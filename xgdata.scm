;;; [] for ref args, @ for ptr args that can be null, # are optional (default #f)
;;; || for ref arg list, {} for ref arg int as list len
;;; & in struct for settable field

(CFNC "gchar* g_type_name GType type")
(CFNC "GQuark g_type_qname GType type")
(CFNC "GType g_type_from_name gchar* name")
(CFNC "GType g_type_parent GType type")
(CFNC "gboolean g_type_is_a GType type GType is_a_type")
(CINT "G_SIGNAL_RUN_FIRST" "GSignalFlags")
(CINT "G_SIGNAL_RUN_LAST" "GSignalFlags")
(CINT "G_SIGNAL_RUN_CLEANUP" "GSignalFlags")
(CINT "G_SIGNAL_NO_RECURSE" "GSignalFlags")
(CINT "G_SIGNAL_DETAILED" "GSignalFlags")
(CINT "G_SIGNAL_ACTION" "GSignalFlags")
(CINT "G_SIGNAL_NO_HOOKS" "GSignalFlags")
(CINT "G_CONNECT_AFTER" "GConnectFlags")
(CINT "G_CONNECT_SWAPPED" "GConnectFlags")
(CINT "G_SIGNAL_MATCH_ID" "GSignalMatchType")
(CINT "G_SIGNAL_MATCH_DETAIL" "GSignalMatchType")
(CINT "G_SIGNAL_MATCH_CLOSURE" "GSignalMatchType")
(CINT "G_SIGNAL_MATCH_FUNC" "GSignalMatchType")
(CINT "G_SIGNAL_MATCH_DATA" "GSignalMatchType")
(CINT "G_SIGNAL_MATCH_UNBLOCKED" "GSignalMatchType")
(CFNC "GClosure* g_cclosure_new GCallback func lambda_data func_data GClosureNotify destroy_data")
(CFNC "guint g_signal_newv gchar* signal_name GType itype GSignalFlags signal_flags GClosure* class_closure GSignalAccumulator accumulator gpointer accu_data GSignalCMarshaller c_marshaller GType return_type guint n_params GType* param_types")
;;;(CFNC "guint g_signal_new_valist gchar* signal_name GType itype GSignalFlags signal_flags GClosure* class_closure GSignalAccumulator accumulator gpointer accu_data GSignalCMarshaller c_marshaller GType return_type guint n_params va_list args")
(CFNC "guint g_signal_new gchar* signal_name GType itype GSignalFlags signal_flags guint class_offset GSignalAccumulator accumulator gpointer accu_data GSignalCMarshaller c_marshaller GType return_type guint n_params ...")
;; typedef GClosureMarshal GSignalCMarshaller;
;; typedef void (*GClosureNotify) (gpointer data, GClosure *closure)
;; typedef void (*GClosureMarshal)(GClosure *closure,GValue *return_value,guint n_param_values,const GValue *param_values,gpointer invocation_hint,gpointer marshal_data)
(CFNC "void g_signal_emitv GValue* instance_and_params guint signal_id GQuark detail GValue* return_value")
;;;;(CFNC "void g_signal_emit_valist gpointer instance guint signal_id GQuark detail va_list var_args")
(CFNC "void g_signal_emit gpointer instance guint signal_id GQuark detail ...")
(CFNC "void g_signal_emit_by_name gpointer instance gchar* detailed_signal ...")
(CFNC "guint g_signal_lookup gchar* name GType itype")
(CFNC "gchar* g_signal_name guint signal_id")
(CFNC "void g_signal_query guint signal_id GSignalQuery* query")
(CFNC "guint* g_signal_list_ids GType itype guint* n_ids")
(CFNC "gboolean g_signal_parse_name gchar* detailed_signal GType itype guint* signal_id_p GQuark* detail_p gboolean force_detail_quark")
(CFNC "GSignalInvocationHint* g_signal_get_invocation_hint gpointer instance")
(CFNC "void g_signal_stop_emission gpointer instance guint signal_id GQuark detail")
(CFNC "void g_signal_stop_emission_by_name gpointer instance gchar* detailed_signal")
(CFNC "gulong g_signal_add_emission_hook guint signal_id GQuark quark GSignalEmissionHook hook_func gpointer hook_data GDestroyNotify data_destroy")
(CFNC "void g_signal_remove_emission_hook guint signal_id gulong hook_id")
(CFNC "gboolean g_signal_has_handler_pending gpointer instance guint signal_id GQuark detail gboolean may_be_blocked")
(CFNC "gulong g_signal_connect_closure_by_id gpointer instance guint signal_id GQuark detail GClosure* closure gboolean after")
(CFNC "gulong g_signal_connect_closure gpointer instance gchar* detailed_signal GClosure* closure gboolean after")
(CFNC "gulong g_signal_connect_data gpointer instance gchar* detailed_signal GCallback func lambda_data func_data GClosureNotify destroy_data GConnectFlags connect_flags")
(CFNC "void g_signal_handler_block gpointer instance gulong handler_id")
(CFNC "void g_signal_handler_unblock gpointer instance gulong handler_id")
(CFNC "void g_signal_handler_disconnect gpointer instance gulong handler_id")
(CFNC "gboolean g_signal_handler_is_connected gpointer instance gulong handler_id")
(CFNC "gulong g_signal_handler_find gpointer instance GSignalMatchType mask guint signal_id GQuark detail GClosure* closure gpointer func gpointer data")
(CFNC "guint g_signal_handlers_block_matched gpointer instance GSignalMatchType mask guint signal_id GQuark detail GClosure* closure gpointer func gpointer data")
(CFNC "guint g_signal_handlers_unblock_matched gpointer instance GSignalMatchType mask guint signal_id GQuark detail GClosure* closure gpointer func gpointer data")
(CFNC "guint g_signal_handlers_disconnect_matched gpointer instance GSignalMatchType mask guint signal_id GQuark detail GClosure* closure gpointer func gpointer data")
(CFNC "void g_signal_handlers_destroy gpointer instance")
;(CFNC "void _g_signals_destroy GType itype")
(CFNC "gpointer g_object_ref gpointer object")
(CFNC "void g_object_unref gpointer object")
(CCAST "GDK_COLORMAP(object)" "GdkColormap*")
;(cdef "GDK_COLORMAP_CLASS(klass)")
(CCHK "GDK_IS_COLORMAP(object)" "GdkColormap*")
;(cdef1 "GDK_IS_COLORMAP_CLASS(klass)")
;(cdef "GDK_COLORMAP_GET_CLASS(obj)")
(CFNC "GType gdk_colormap_get_type void")
(CFNC "GdkColormap* gdk_colormap_new GdkVisual* visual gboolean allocate")
(CFNC "GdkColormap* gdk_colormap_get_system void")
(CFNC "gint gdk_colormap_alloc_colors GdkColormap* colormap GdkColor* colors gint ncolors gboolean writeable gboolean best_match gboolean* success")
(CFNC "gboolean gdk_colormap_alloc_color GdkColormap* colormap GdkColor* color gboolean writeable gboolean best_match")
(CFNC "void gdk_colormap_free_colors GdkColormap* colormap GdkColor* colors gint ncolors")
(CFNC "void gdk_colormap_query_color GdkColormap* colormap gulong pixel GdkColor* result")
(CFNC "GdkVisual* gdk_colormap_get_visual GdkColormap* colormap")
(CFNC "GdkColor* gdk_color_copy GdkColor* color")
(CFNC "void gdk_color_free GdkColor* color")
(CFNC "gint gdk_color_parse gchar* spec GdkColor* color")
(CFNC "guint gdk_color_hash GdkColor* colora")
(CFNC "gboolean gdk_color_equal GdkColor* colora GdkColor* colorb")
(CFNC "GType gdk_color_get_type void")
(CINT "GDK_X_CURSOR" "GdkCursorType")
(CINT "GDK_ARROW" "GdkCursorType")
(CINT "GDK_BASED_ARROW_DOWN" "GdkCursorType")
(CINT "GDK_BASED_ARROW_UP" "GdkCursorType")
(CINT "GDK_BOAT" "GdkCursorType")
(CINT "GDK_BOGOSITY" "GdkCursorType")
(CINT "GDK_BOTTOM_LEFT_CORNER" "GdkCursorType")
(CINT "GDK_BOTTOM_RIGHT_CORNER" "GdkCursorType")
(CINT "GDK_BOTTOM_SIDE" "GdkCursorType")
(CINT "GDK_BOTTOM_TEE" "GdkCursorType")
(CINT "GDK_BOX_SPIRAL" "GdkCursorType")
(CINT "GDK_CENTER_PTR" "GdkCursorType")
(CINT "GDK_CIRCLE" "GdkCursorType")
(CINT "GDK_CLOCK" "GdkCursorType")
(CINT "GDK_COFFEE_MUG" "GdkCursorType")
(CINT "GDK_CROSS" "GdkCursorType")
(CINT "GDK_CROSS_REVERSE" "GdkCursorType")
(CINT "GDK_CROSSHAIR" "GdkCursorType")
(CINT "GDK_DIAMOND_CROSS" "GdkCursorType")
(CINT "GDK_DOT" "GdkCursorType")
(CINT "GDK_DOTBOX" "GdkCursorType")
(CINT "GDK_DOUBLE_ARROW" "GdkCursorType")
(CINT "GDK_DRAFT_LARGE" "GdkCursorType")
(CINT "GDK_DRAFT_SMALL" "GdkCursorType")
(CINT "GDK_DRAPED_BOX" "GdkCursorType")
(CINT "GDK_EXCHANGE" "GdkCursorType")
(CINT "GDK_FLEUR" "GdkCursorType")
(CINT "GDK_GOBBLER" "GdkCursorType")
(CINT "GDK_GUMBY" "GdkCursorType")
(CINT "GDK_HAND1" "GdkCursorType")
(CINT "GDK_HAND2" "GdkCursorType")
(CINT "GDK_HEART" "GdkCursorType")
(CINT "GDK_ICON" "GdkCursorType")
(CINT "GDK_IRON_CROSS" "GdkCursorType")
(CINT "GDK_LEFT_PTR" "GdkCursorType")
(CINT "GDK_LEFT_SIDE" "GdkCursorType")
(CINT "GDK_LEFT_TEE" "GdkCursorType")
(CINT "GDK_LEFTBUTTON" "GdkCursorType")
(CINT "GDK_LL_ANGLE" "GdkCursorType")
(CINT "GDK_LR_ANGLE" "GdkCursorType")
(CINT "GDK_MAN" "GdkCursorType")
(CINT "GDK_MIDDLEBUTTON" "GdkCursorType")
(CINT "GDK_MOUSE" "GdkCursorType")
(CINT "GDK_PENCIL" "GdkCursorType")
(CINT "GDK_PIRATE" "GdkCursorType")
(CINT "GDK_PLUS" "GdkCursorType")
(CINT "GDK_QUESTION_ARROW" "GdkCursorType")
(CINT "GDK_RIGHT_PTR" "GdkCursorType")
(CINT "GDK_RIGHT_SIDE" "GdkCursorType")
(CINT "GDK_RIGHT_TEE" "GdkCursorType")
(CINT "GDK_RIGHTBUTTON" "GdkCursorType")
(CINT "GDK_RTL_LOGO" "GdkCursorType")
(CINT "GDK_SAILBOAT" "GdkCursorType")
(CINT "GDK_SB_DOWN_ARROW" "GdkCursorType")
(CINT "GDK_SB_H_DOUBLE_ARROW" "GdkCursorType")
(CINT "GDK_SB_LEFT_ARROW" "GdkCursorType")
(CINT "GDK_SB_RIGHT_ARROW" "GdkCursorType")
(CINT "GDK_SB_UP_ARROW" "GdkCursorType")
(CINT "GDK_SB_V_DOUBLE_ARROW" "GdkCursorType")
(CINT "GDK_SHUTTLE" "GdkCursorType")
(CINT "GDK_SIZING" "GdkCursorType")
(CINT "GDK_SPIDER" "GdkCursorType")
(CINT "GDK_SPRAYCAN" "GdkCursorType")
(CINT "GDK_STAR" "GdkCursorType")
(CINT "GDK_TARGET" "GdkCursorType")
(CINT "GDK_TCROSS" "GdkCursorType")
(CINT "GDK_TOP_LEFT_ARROW" "GdkCursorType")
(CINT "GDK_TOP_LEFT_CORNER" "GdkCursorType")
(CINT "GDK_TOP_RIGHT_CORNER" "GdkCursorType")
(CINT "GDK_TOP_SIDE" "GdkCursorType")
(CINT "GDK_TOP_TEE" "GdkCursorType")
(CINT "GDK_TREK" "GdkCursorType")
(CINT "GDK_UL_ANGLE" "GdkCursorType")
(CINT "GDK_UMBRELLA" "GdkCursorType")
(CINT "GDK_UR_ANGLE" "GdkCursorType")
(CINT "GDK_WATCH" "GdkCursorType")
(CINT "GDK_XTERM" "GdkCursorType")
(CINT "GDK_LAST_CURSOR " "GdkCursorType")
(CINT "GDK_CURSOR_IS_PIXMAP" "GdkCursorType")
(CFNC "GType gdk_cursor_get_type void")
(CFNC "GdkCursor* gdk_cursor_new GdkCursorType cursor_type")
(CFNC "GdkCursor* gdk_cursor_new_from_pixmap GdkPixmap* source GdkPixmap* mask GdkColor* fg GdkColor* bg gint x gint y")
(CFNC "GdkCursor* gdk_cursor_ref GdkCursor* cursor")
(CFNC "void gdk_cursor_unref GdkCursor* cursor")
(CINT "GDK_ACTION_DEFAULT" "GdkDragAction")
(CINT "GDK_ACTION_COPY" "GdkDragAction")
(CINT "GDK_ACTION_MOVE" "GdkDragAction")
(CINT "GDK_ACTION_LINK" "GdkDragAction")
(CINT "GDK_ACTION_PRIVATE" "GdkDragAction")
(CINT "GDK_ACTION_ASK" "GdkDragAction")
(CINT "GDK_DRAG_PROTO_MOTIF" "GdkDragProtocol")
(CINT "GDK_DRAG_PROTO_XDND" "GdkDragProtocol")
(CINT "GDK_DRAG_PROTO_ROOTWIN" "GdkDragProtocol")
(CINT "GDK_DRAG_PROTO_NONE" "GdkDragProtocol")
(CINT "GDK_DRAG_PROTO_WIN32_DROPFILES" "GdkDragProtocol")
(CINT "GDK_DRAG_PROTO_OLE2" "GdkDragProtocol")
(CINT "GDK_DRAG_PROTO_LOCAL" "GdkDragProtocol")
(CCAST "GDK_DRAG_CONTEXT(object)" "GdkDragContext*")
;(cdef "GDK_DRAG_CONTEXT_CLASS(klass)")
(CCHK "GDK_IS_DRAG_CONTEXT(object)" "GdkDragContext*")
;(cdef1 "GDK_IS_DRAG_CONTEXT_CLASS(klass)")
;(cdef "GDK_DRAG_CONTEXT_GET_CLASS(obj)")
(CFNC "GType gdk_drag_context_get_type void")
(CFNC "GdkDragContext* gdk_drag_context_new void")
(CFNC "void gdk_drag_status GdkDragContext* context GdkDragAction action guint32 time")
(CFNC "void gdk_drop_reply GdkDragContext* context gboolean ok guint32 time")
(CFNC "void gdk_drop_finish GdkDragContext* context gboolean success guint32 time")
(CFNC "GdkAtom gdk_drag_get_selection GdkDragContext* context")
(CFNC "GdkDragContext* gdk_drag_begin GdkWindow* window GList* targets")
(CFNC "guint32 gdk_drag_get_protocol guint32 xid GdkDragProtocol* protocol")
(CFNC "void gdk_drag_find_window GdkDragContext* context GdkWindow* drag_window gint x_root gint y_root GdkWindow** [dest_window] GdkDragProtocol* [protocol]")
(CFNC "gboolean gdk_drag_motion GdkDragContext* context GdkWindow* dest_window GdkDragProtocol protocol gint x_root gint y_root GdkDragAction suggested_action GdkDragAction possible_actions guint32 time")
(CFNC "void gdk_drag_drop GdkDragContext* context guint32 time")
(CFNC "void gdk_drag_abort GdkDragContext* context guint32 time")
(CCAST "GDK_DRAWABLE(object)" "GdkDrawable*")
;(cdef "GDK_DRAWABLE_CLASS(klass)")
(CCHK "GDK_IS_DRAWABLE(object)" "GdkDrawable*")
;(cdef1 "GDK_IS_DRAWABLE_CLASS(klass)")
;(cdef "GDK_DRAWABLE_GET_CLASS(obj)")
(CFNC "GType gdk_drawable_get_type void")
(CFNC "void gdk_drawable_get_size GdkDrawable* drawable gint* [width] gint* [height]")
(CFNC "void gdk_drawable_set_colormap GdkDrawable* drawable GdkColormap* colormap")
(CFNC "GdkColormap* gdk_drawable_get_colormap GdkDrawable* drawable")
(CFNC "GdkVisual* gdk_drawable_get_visual GdkDrawable* drawable")
(CFNC "gint gdk_drawable_get_depth GdkDrawable* drawable")
(CFNC "void gdk_draw_point GdkDrawable* drawable GdkGC* gc gint x gint y")
(CFNC "void gdk_draw_line GdkDrawable* drawable GdkGC* gc gint x1 gint y1 gint x2 gint y2")
(CFNC "void gdk_draw_rectangle GdkDrawable* drawable GdkGC* gc gboolean filled gint x gint y gint width gint height")
(CFNC "void gdk_draw_arc GdkDrawable* drawable GdkGC* gc gboolean filled gint x gint y gint width gint height gint angle1 gint angle2")
(CFNC "void gdk_draw_polygon GdkDrawable* drawable GdkGC* gc gboolean filled GdkPoint* points gint npoints")
;;; the "filled" arg is declared gint in gdkdrawable.h, but treated as a boolean in x11/gdkdrawable.c
(CFNC "void gdk_draw_drawable GdkDrawable* drawable GdkGC* gc GdkDrawable* src gint xsrc gint ysrc gint xdest gint ydest gint width gint height")
(CFNC "void gdk_draw_image GdkDrawable* drawable GdkGC* gc GdkImage* image gint xsrc gint ysrc gint xdest gint ydest gint width gint height")
(CFNC "void gdk_draw_points GdkDrawable* drawable GdkGC* gc GdkPoint* points gint npoints")
(CFNC "void gdk_draw_segments GdkDrawable* drawable GdkGC* gc GdkSegment* segs gint nsegs")
(CFNC "void gdk_draw_lines GdkDrawable* drawable GdkGC* gc GdkPoint* points gint npoints")
(CFNC "void gdk_draw_glyphs GdkDrawable* drawable GdkGC* gc PangoFont* font gint x gint y PangoGlyphString* glyphs")
(CFNC "void gdk_draw_layout_line GdkDrawable* drawable GdkGC* gc gint x gint y PangoLayoutLine* line")
(CFNC "void gdk_draw_layout GdkDrawable* drawable GdkGC* gc gint x gint y PangoLayout* layout")
(CFNC "void gdk_draw_layout_line_with_colors GdkDrawable* drawable GdkGC* gc gint x gint y PangoLayoutLine* line GdkColor* @foreground GdkColor* @background")
(CFNC "void gdk_draw_layout_with_colors GdkDrawable* drawable GdkGC* gc gint x gint y PangoLayout* layout GdkColor* @foreground GdkColor* @background")
(CFNC "GdkImage* gdk_drawable_get_image GdkDrawable* drawable gint x gint y gint width gint height")
(CFNC "GdkRegion* gdk_drawable_get_clip_region GdkDrawable* drawable")
(CFNC "GdkRegion* gdk_drawable_get_visible_region GdkDrawable* drawable")
(CFNC "GType gdk_cursor_type_get_type void")
(CFNC "GType gdk_drag_action_get_type void")
(CFNC "GType gdk_drag_protocol_get_type void")
(CFNC "GType gdk_filter_return_get_type void")
(CFNC "GType gdk_event_type_get_type void")
(CFNC "GType gdk_event_mask_get_type void")
(CFNC "GType gdk_visibility_state_get_type void")
(CFNC "GType gdk_scroll_direction_get_type void")
(CFNC "GType gdk_notify_type_get_type void")
(CFNC "GType gdk_crossing_mode_get_type void")
(CFNC "GType gdk_property_state_get_type void")
(CFNC "GType gdk_window_state_get_type void")
(CFNC "GType gdk_setting_action_get_type void")
(CFNC "GType gdk_font_type_get_type void")
(CFNC "GType gdk_cap_style_get_type void")
(CFNC "GType gdk_fill_get_type void")
(CFNC "GType gdk_function_get_type void")
(CFNC "GType gdk_join_style_get_type void")
(CFNC "GType gdk_line_style_get_type void")
(CFNC "GType gdk_subwindow_mode_get_type void")
(CFNC "GType gdk_gc_values_mask_get_type void")
(CFNC "GType gdk_image_type_get_type void")
(CFNC "GType gdk_extension_mode_get_type void")
(CFNC "GType gdk_input_source_get_type void")
(CFNC "GType gdk_input_mode_get_type void")
(CFNC "GType gdk_axis_use_get_type void")
(CFNC "GType gdk_prop_mode_get_type void")
(CFNC "GType gdk_fill_rule_get_type void")
(CFNC "GType gdk_overlap_type_get_type void")
(CFNC "GType gdk_rgb_dither_get_type void")
(CFNC "GType gdk_byte_order_get_type void")
(CFNC "GType gdk_modifier_type_get_type void")
(CFNC "GType gdk_input_condition_get_type void")
(CFNC "GType gdk_status_get_type void")
(CFNC "GType gdk_grab_status_get_type void")
(CFNC "GType gdk_visual_type_get_type void")
(CFNC "GType gdk_window_class_get_type void")
(CFNC "GType gdk_window_type_get_type void")
(CFNC "GType gdk_window_attributes_type_get_type void")
(CFNC "GType gdk_window_hints_get_type void")
(CFNC "GType gdk_window_type_hint_get_type void")
(CFNC "GType gdk_wm_decoration_get_type void")
(CFNC "GType gdk_wm_function_get_type void")
(CFNC "GType gdk_gravity_get_type void")
(CFNC "GType gdk_window_edge_get_type void")
(CINT "GDK_PRIORITY_EVENTS")
(CINT "GDK_PRIORITY_REDRAW")
(CINT "GDK_NOTHING" "GdkEventType")
(CINT "GDK_DELETE" "GdkEventType")
(CINT "GDK_DESTROY" "GdkEventType")
(CINT "GDK_EXPOSE" "GdkEventType")
(CINT "GDK_MOTION_NOTIFY" "GdkEventType")
(CINT "GDK_BUTTON_PRESS" "GdkEventType")
(CINT "GDK_2BUTTON_PRESS" "GdkEventType")
(CINT "GDK_3BUTTON_PRESS" "GdkEventType")
(CINT "GDK_BUTTON_RELEASE" "GdkEventType")
(CINT "GDK_KEY_PRESS" "GdkEventType")
(CINT "GDK_KEY_RELEASE" "GdkEventType")
(CINT "GDK_ENTER_NOTIFY" "GdkEventType")
(CINT "GDK_LEAVE_NOTIFY" "GdkEventType")
(CINT "GDK_FOCUS_CHANGE" "GdkEventType")
(CINT "GDK_CONFIGURE" "GdkEventType")
(CINT "GDK_MAP" "GdkEventType")
(CINT "GDK_UNMAP" "GdkEventType")
(CINT "GDK_PROPERTY_NOTIFY" "GdkEventType")
(CINT "GDK_SELECTION_CLEAR" "GdkEventType")
(CINT "GDK_SELECTION_REQUEST" "GdkEventType")
(CINT "GDK_SELECTION_NOTIFY" "GdkEventType")
(CINT "GDK_PROXIMITY_IN" "GdkEventType")
(CINT "GDK_PROXIMITY_OUT" "GdkEventType")
(CINT "GDK_DRAG_ENTER" "GdkEventType")
(CINT "GDK_DRAG_LEAVE" "GdkEventType")
(CINT "GDK_DRAG_MOTION" "GdkEventType")
(CINT "GDK_DRAG_STATUS" "GdkEventType")
(CINT "GDK_DROP_START" "GdkEventType")
(CINT "GDK_DROP_FINISHED" "GdkEventType")
(CINT "GDK_CLIENT_EVENT" "GdkEventType")
(CINT "GDK_VISIBILITY_NOTIFY" "GdkEventType")
(CINT "GDK_NO_EXPOSE" "GdkEventType")
(CINT "GDK_SCROLL" "GdkEventType")
(CINT "GDK_WINDOW_STATE" "GdkEventType")
(CINT "GDK_SETTING" "GdkEventType")
(CINT "GDK_EXPOSURE_MASK" "GdkEventMask")
(CINT "GDK_POINTER_MOTION_MASK" "GdkEventMask")
(CINT "GDK_POINTER_MOTION_HINT_MASK" "GdkEventMask")
(CINT "GDK_BUTTON_MOTION_MASK" "GdkEventMask")
(CINT "GDK_BUTTON1_MOTION_MASK" "GdkEventMask")
(CINT "GDK_BUTTON2_MOTION_MASK" "GdkEventMask")
(CINT "GDK_BUTTON3_MOTION_MASK" "GdkEventMask")
(CINT "GDK_BUTTON_PRESS_MASK" "GdkEventMask")
(CINT "GDK_BUTTON_RELEASE_MASK" "GdkEventMask")
(CINT "GDK_KEY_PRESS_MASK" "GdkEventMask")
(CINT "GDK_KEY_RELEASE_MASK" "GdkEventMask")
(CINT "GDK_ENTER_NOTIFY_MASK" "GdkEventMask")
(CINT "GDK_LEAVE_NOTIFY_MASK" "GdkEventMask")
(CINT "GDK_FOCUS_CHANGE_MASK" "GdkEventMask")
(CINT "GDK_STRUCTURE_MASK" "GdkEventMask")
(CINT "GDK_PROPERTY_CHANGE_MASK" "GdkEventMask")
(CINT "GDK_VISIBILITY_NOTIFY_MASK" "GdkEventMask")
(CINT "GDK_PROXIMITY_IN_MASK" "GdkEventMask")
(CINT "GDK_PROXIMITY_OUT_MASK" "GdkEventMask")
(CINT "GDK_SUBSTRUCTURE_MASK" "GdkEventMask")
(CINT "GDK_SCROLL_MASK" "GdkEventMask")
(CINT "GDK_ALL_EVENTS_MASK" "GdkEventMask")
(CINT "GDK_VISIBILITY_UNOBSCURED " "GdkVisibilityState")
(CINT "GDK_VISIBILITY_PARTIAL " "GdkVisibilityState")
(CINT "GDK_VISIBILITY_FULLY_OBSCURED" "GdkVisibilityState")
(CINT "GDK_SCROLL_UP" "GdkScrollDirection")
(CINT "GDK_SCROLL_DOWN" "GdkScrollDirection")
(CINT "GDK_SCROLL_LEFT" "GdkScrollDirection")
(CINT "GDK_SCROLL_RIGHT" "GdkScrollDirection")
(CINT "GDK_NOTIFY_ANCESTOR" "GdkNotifyType")
(CINT "GDK_NOTIFY_VIRTUAL" "GdkNotifyType")
(CINT "GDK_NOTIFY_INFERIOR" "GdkNotifyType")
(CINT "GDK_NOTIFY_NONLINEAR" "GdkNotifyType")
(CINT "GDK_NOTIFY_NONLINEAR_VIRTUAL" "GdkNotifyType")
(CINT "GDK_NOTIFY_UNKNOWN" "GdkNotifyType")
(CINT "GDK_CROSSING_NORMAL" "GdkCrossingMode")
(CINT "GDK_CROSSING_GRAB" "GdkNotifyType")
(CINT "GDK_CROSSING_UNGRAB" "GdkNotifyType")
(CINT "GDK_PROPERTY_NEW_VALUE" "GdkPropertyState")
(CINT "GDK_PROPERTY_DELETE" "GdkPropertyState")
(CINT "GDK_WINDOW_STATE_WITHDRAWN" "GdkWindowState")
(CINT "GDK_WINDOW_STATE_ICONIFIED" "GdkWindowState")
(CINT "GDK_WINDOW_STATE_MAXIMIZED" "GdkWindowState")
(CINT "GDK_WINDOW_STATE_STICKY" "GdkWindowState")
(CINT "GDK_SETTING_ACTION_NEW" "GdkSettingAction")
(CINT "GDK_SETTING_ACTION_CHANGED" "GdkSettingAction")
(CINT "GDK_SETTING_ACTION_DELETED" "GdkSettingAction")
(CFNC "GType gdk_event_get_type void")
(CFNC "gboolean gdk_events_pending void")
(CFNC "GdkEvent* gdk_event_get void")
(CFNC "GdkEvent* gdk_event_peek void")
(CFNC "GdkEvent* gdk_event_get_graphics_expose GdkWindow* window")
(CFNC "void gdk_event_put GdkEvent* event")
(CFNC "GdkEvent* gdk_event_copy GdkEvent* event")
(CFNC "void gdk_event_free GdkEvent* event")
(CFNC "guint32 gdk_event_get_time GdkEvent* @event")
(CFNC "gboolean gdk_event_get_state GdkEvent* event GdkModifierType* state")
(CFNC "gboolean gdk_event_get_coords GdkEvent* event gdouble* [x_win] gdouble* [y_win]")
(CFNC "gboolean gdk_event_get_root_coords GdkEvent* event gdouble* x_root gdouble* y_root")
(CFNC "gboolean gdk_event_get_axis GdkEvent* event GdkAxisUse axis_use gdouble* [value]")
(CFNC "void gdk_event_handler_set GdkEventFunc func lambda_data func_data GDestroyNotify notify")
(CFNC "void gdk_set_show_events gboolean show_events")
(CFNC "gboolean gdk_get_show_events void")
(CFNC "void gdk_add_client_message_filter GdkAtom message_type GdkFilterFunc func lambda_data #func_data")
(CFNC "gboolean gdk_setting_get gchar* name GValue* value") 
(CINT "GDK_CAP_NOT_LAST" "GdkCapStyle")
(CINT "GDK_CAP_BUTT" "GdkCapStyle")
(CINT "GDK_CAP_ROUND" "GdkCapStyle")
(CINT "GDK_CAP_PROJECTING" "GdkCapStyle")
(CINT "GDK_SOLID" "GdkFill")
(CINT "GDK_TILED" "GdkFill")
(CINT "GDK_STIPPLED" "GdkFill")
(CINT "GDK_OPAQUE_STIPPLED" "GdkFill")
(CINT "GDK_COPY" "GdkFunction")
(CINT "GDK_INVERT" "GdkFunction")
(CINT "GDK_XOR" "GdkFunction")
(CINT "GDK_CLEAR" "GdkFunction")
(CINT "GDK_AND" "GdkFunction")
(CINT "GDK_AND_REVERSE" "GdkFunction")
(CINT "GDK_AND_INVERT" "GdkFunction")
(CINT "GDK_NOOP" "GdkFunction")
(CINT "GDK_OR" "GdkFunction")
(CINT "GDK_EQUIV" "GdkFunction")
(CINT "GDK_OR_REVERSE" "GdkFunction")
(CINT "GDK_COPY_INVERT" "GdkFunction")
(CINT "GDK_OR_INVERT" "GdkFunction")
(CINT "GDK_NAND" "GdkFunction")
(CINT "GDK_NOR" "GdkFunction")
(CINT "GDK_SET" "GdkFunction")
(CINT "GDK_JOIN_MITER" "GdkJoinStyle")
(CINT "GDK_JOIN_ROUND" "GdkJoinStyle")
(CINT "GDK_JOIN_BEVEL" "GdkJoinStyle")
(CINT "GDK_LINE_SOLID" "GdkLineStyle")
(CINT "GDK_LINE_ON_OFF_DASH" "GdkLineStyle")
(CINT "GDK_LINE_DOUBLE_DASH" "GdkLineStyle")
(CINT "GDK_CLIP_BY_CHILDREN" "GdkSubWindowMode")
(CINT "GDK_INCLUDE_INFERIORS" "GdkSubWindowMode")
(CINT "GDK_GC_FOREGROUND" "GdkGCValuesMask")
(CINT "GDK_GC_BACKGROUND" "GdkGCValuesMask")
(CINT "GDK_GC_FONT" "GdkGCValuesMask")
(CINT "GDK_GC_FUNCTION" "GdkGCValuesMask")
(CINT "GDK_GC_FILL" "GdkGCValuesMask")
(CINT "GDK_GC_TILE" "GdkGCValuesMask")
(CINT "GDK_GC_STIPPLE" "GdkGCValuesMask")
(CINT "GDK_GC_CLIP_MASK" "GdkGCValuesMask")
(CINT "GDK_GC_SUBWINDOW" "GdkGCValuesMask")
(CINT "GDK_GC_TS_X_ORIGIN" "GdkGCValuesMask")
(CINT "GDK_GC_TS_Y_ORIGIN" "GdkGCValuesMask")
(CINT "GDK_GC_CLIP_X_ORIGIN" "GdkGCValuesMask")
(CINT "GDK_GC_CLIP_Y_ORIGIN" "GdkGCValuesMask")
(CINT "GDK_GC_EXPOSURES" "GdkGCValuesMask")
(CINT "GDK_GC_LINE_WIDTH" "GdkGCValuesMask")
(CINT "GDK_GC_LINE_STYLE" "GdkGCValuesMask")
(CINT "GDK_GC_CAP_STYLE" "GdkGCValuesMask")
(CINT "GDK_GC_JOIN_STYLE" "GdkGCValuesMask")
(CCAST "GDK_GC(object)" "GdkGC*")
;(cdef "GDK_GC_CLASS(klass)")
(CCHK "GDK_IS_GC(object)" "GdkGC*")
;(cdef1 "GDK_IS_GC_CLASS(klass)")
;(cdef "GDK_GC_GET_CLASS(obj)")
(CFNC "GType gdk_gc_get_type void")
(CFNC "GdkGC* gdk_gc_new GdkDrawable* drawable")
(CFNC "GdkGC* gdk_gc_new_with_values GdkDrawable* drawable GdkGCValues* values GdkGCValuesMask values_mask")
(CFNC "void gdk_gc_get_values GdkGC* gc GdkGCValues* values")
(CFNC "void gdk_gc_set_values GdkGC* gc GdkGCValues* values GdkGCValuesMask values_mask")
(CFNC "void gdk_gc_set_foreground GdkGC* gc GdkColor* color")
(CFNC "void gdk_gc_set_background GdkGC* gc GdkColor* color")
(CFNC "void gdk_gc_set_function GdkGC* gc GdkFunction function")
(CFNC "void gdk_gc_set_fill GdkGC* gc GdkFill fill")
(CFNC "void gdk_gc_set_tile GdkGC* gc GdkPixmap* tile")
(CFNC "void gdk_gc_set_stipple GdkGC* gc GdkPixmap* stipple")
(CFNC "void gdk_gc_set_ts_origin GdkGC* gc gint x gint y")
(CFNC "void gdk_gc_set_clip_origin GdkGC* gc gint x gint y")
(CFNC "void gdk_gc_set_clip_mask GdkGC* gc GdkBitmap* mask")
(CFNC "void gdk_gc_set_clip_rectangle GdkGC* gc GdkRectangle* rectangle")
(CFNC "void gdk_gc_set_clip_region GdkGC* gc GdkRegion* region")
(CFNC "void gdk_gc_set_subwindow GdkGC* gc GdkSubwindowMode mode")
(CFNC "void gdk_gc_set_exposures GdkGC* gc gboolean exposures")
(CFNC "void gdk_gc_set_line_attributes GdkGC* gc gint line_width GdkLineStyle line_style GdkCapStyle cap_style GdkJoinStyle join_style")
(CFNC "void gdk_gc_set_dashes GdkGC* gc gint dash_offset gint8* dash_list gint n")
(CFNC "void gdk_gc_offset GdkGC* gc gint x_offset gint y_offset")
(CFNC "void gdk_gc_copy GdkGC* dst_gc GdkGC* src_gc")
(CFNC "void gdk_gc_set_colormap GdkGC* gc GdkColormap* colormap")
(CFNC "GdkColormap* gdk_gc_get_colormap GdkGC* gc")
(CFNC "void gdk_gc_set_rgb_fg_color GdkGC* gc GdkColor* color")
(CFNC "void gdk_gc_set_rgb_bg_color GdkGC* gc GdkColor* color")
(CFNC "void gdk_init gint* {argc} gchar*** |argv|")
(CFNC "gboolean gdk_init_check gint* {argc} gchar*** |argv|")
(CFNC "gchar* gdk_set_locale void")
(CFNC "char* gdk_get_program_class void")
(CFNC "void gdk_set_program_class char* program_class")
(CFNC "void gdk_error_trap_push void")
(CFNC "gint gdk_error_trap_pop void")
(CFNC "gchar* gdk_get_display void")
(CFNC-22 "gchar* gdk_get_display_arg_name void")
(CFNC-22 "void gdk_notify_startup_complete void")
(CFNC "GdkGrabStatus gdk_pointer_grab GdkWindow* window gboolean owner_events GdkEventMask event_mask GdkWindow* confine_to GdkCursor* cursor guint32 time")
(CFNC "void gdk_pointer_ungrab guint32 time")
(CFNC "GdkGrabStatus gdk_keyboard_grab GdkWindow* window gboolean owner_events guint32 time")
(CFNC "void gdk_keyboard_ungrab guint32 time")
(CFNC "gboolean gdk_pointer_is_grabbed void")
(CFNC "gint gdk_screen_width void")
(CFNC "gint gdk_screen_height void")
(CFNC "gint gdk_screen_width_mm void")
(CFNC "gint gdk_screen_height_mm void")
(CFNC "void gdk_flush void")
(CFNC "void gdk_beep void")
(CFNC "void gdk_set_double_click_time guint msec")
(CFNC "gboolean gdk_rectangle_intersect GdkRectangle* src1 GdkRectangle* src2 GdkRectangle* dest")
(CFNC "void gdk_rectangle_union GdkRectangle* src1 GdkRectangle* src2 GdkRectangle* dest")
(CFNC "GType gdk_rectangle_get_type void")
(CFNC "gchar* gdk_wcstombs GdkWChar* src")
(CFNC "gint gdk_mbstowcs GdkWChar* dest gchar* src gint dest_max")
(CFNC "void gdk_event_send_clientmessage_toall GdkEvent* event")
(CFNC "gboolean gdk_event_send_client_message GdkEvent* event guint32 xid")
(CFNC "void gdk_threads_enter void")
(CFNC "void gdk_threads_leave void")
(CFNC "void gdk_threads_init void") 
(CINT "GDK_IMAGE_NORMAL" "GdkImageType")
(CINT "GDK_IMAGE_SHARED" "GdkImageType")
(CINT "GDK_IMAGE_FASTEST" "GdkImageType")
(CCAST "GDK_IMAGE(object)" "GdkImage*")
;(cdef "GDK_IMAGE_CLASS(klass)")
(CCHK "GDK_IS_IMAGE(object)" "GdkImage*")
;(cdef1 "GDK_IS_IMAGE_CLASS(klass)")
;(cdef "GDK_IMAGE_GET_CLASS(obj)")
(CFNC "GType gdk_image_get_type void")
(CFNC "GdkImage* gdk_image_new GdkImageType type GdkVisual* visual gint width gint height")
(CCAST "GDK_DEVICE(object)" "GdkDevice*")
;(cdef "GDK_DEVICE_CLASS(klass)")
(CCHK "GDK_IS_DEVICE(object)" "GdkDevice*")
;(cdef1 "GDK_IS_DEVICE_CLASS(klass)")
;(cdef "GDK_DEVICE_GET_CLASS(obj)")
(CINT "GDK_EXTENSION_EVENTS_NONE" "GdkExtensionMode")
(CINT "GDK_EXTENSION_EVENTS_ALL" "GdkExtensionMode")
(CINT "GDK_EXTENSION_EVENTS_CURSOR" "GdkExtensionMode")
(CINT "GDK_SOURCE_MOUSE" "GdkInputSource")
(CINT "GDK_SOURCE_PEN" "GdkInputSource")
(CINT "GDK_SOURCE_ERASER" "GdkInputSource")
(CINT "GDK_SOURCE_CURSOR" "GdkInputSource")
(CINT "GDK_MODE_DISABLED" "GdkInputMode")
(CINT "GDK_MODE_SCREEN" "GdkInputMode")
(CINT "GDK_MODE_WINDOW" "GdkInputMode")
(CINT "GDK_AXIS_IGNORE" "GdkAxisUse")
(CINT "GDK_AXIS_X" "GdkAxisUse")
(CINT "GDK_AXIS_Y" "GdkAxisUse")
(CINT "GDK_AXIS_PRESSURE" "GdkAxisUse")
(CINT "GDK_AXIS_XTILT" "GdkAxisUse")
(CINT "GDK_AXIS_YTILT" "GdkAxisUse")
(CINT "GDK_AXIS_WHEEL" "GdkAxisUse")
(CINT "GDK_AXIS_LAST" "GdkAxisUse")
(CINT "GDK_MAX_TIMECOORD_AXES")
(CFNC "GType gdk_device_get_type void")
(CFNC "GList* gdk_devices_list void")
(CFNC "void gdk_device_set_source GdkDevice* device GdkInputSource source")
(CFNC "gboolean gdk_device_set_mode GdkDevice* device GdkInputMode mode")
(CFNC "void gdk_device_set_key GdkDevice* device guint index guint keyval GdkModifierType modifiers")
(CFNC "void gdk_device_set_axis_use GdkDevice* device guint index GdkAxisUse use")
(CFNC "void gdk_device_get_state GdkDevice* device GdkWindow* window gdouble* axes GdkModifierType* mask")
(CFNC "gboolean gdk_device_get_history GdkDevice* device GdkWindow* window guint32 start guint32 stop GdkTimeCoord*** [events] gint* [n_events]")
(CFNC "void gdk_device_free_history GdkTimeCoord** events gint n_events")
(CFNC "gboolean gdk_device_get_axis GdkDevice* device gdouble* axes GdkAxisUse use gdouble* value")
(CFNC "void gdk_input_set_extension_events GdkWindow* window gint mask GdkExtensionMode mode")
(CFNC "GdkDevice* gdk_device_get_core_pointer void")
(CCAST "GDK_KEYMAP(object)" "GdkKeymap*")
;(cdef "GDK_KEYMAP_CLASS(klass)")
(CCHK "GDK_IS_KEYMAP(object)" "GdkKeymap*")
;(cdef1 "GDK_IS_KEYMAP_CLASS(klass)")
;(cdef "GDK_KEYMAP_GET_CLASS(obj)")
(CFNC "GType gdk_keymap_get_type void")
(CFNC "GdkKeymap* gdk_keymap_get_default void")
(CFNC "guint gdk_keymap_lookup_key GdkKeymap* keymap GdkKeymapKey* key")
;(CFNC "gboolean gdk_keymap_translate_keyboard_state GdkKeymap* keymap guint hardware_keycode GdkModifierType state gint group guint* [keyval] gint* [effective_group] gint* [level] GdkModifierType* [unused_modifiers]")
(CFNC "gboolean gdk_keymap_get_entries_for_keyval GdkKeymap* keymap guint keyval GdkKeymapKey** [keys] gint* [n_keys]")
(CFNC "gboolean gdk_keymap_get_entries_for_keycode GdkKeymap* keymap guint hardware_keycode GdkKeymapKey** [keys] guint** [keyvals] gint* [n_entries]")
(CFNC "PangoDirection gdk_keymap_get_direction GdkKeymap* keymap")
(CFNC "gchar* gdk_keyval_name guint keyval")
(CFNC "guint gdk_keyval_from_name gchar* keyval_name")
(CFNC "void gdk_keyval_convert_case guint symbol guint* [lower] guint* [upper]")
(CFNC "guint gdk_keyval_to_upper guint keyval")
(CFNC "guint gdk_keyval_to_lower guint keyval")
(CFNC "gboolean gdk_keyval_is_upper guint keyval")
(CFNC "gboolean gdk_keyval_is_lower guint keyval")
(CFNC "guint32 gdk_keyval_to_unicode guint keyval")
(CFNC "guint gdk_unicode_to_keyval guint32 wc")
(CINT "GDK_VoidSymbol")
(CINT "GDK_BackSpace")
(CINT "GDK_Tab")
(CINT "GDK_Linefeed")
(CINT "GDK_Clear")
(CINT "GDK_Return")
(CINT "GDK_Pause")
(CINT "GDK_Scroll_Lock")
(CINT "GDK_Sys_Req")
(CINT "GDK_Escape")
(CINT "GDK_Delete")
(CINT "GDK_Home")
(CINT "GDK_Left")
(CINT "GDK_Up")
(CINT "GDK_Right")
(CINT "GDK_Down")
(CINT "GDK_Prior")
(CINT "GDK_Page_Up")
(CINT "GDK_Next")
(CINT "GDK_Page_Down")
(CINT "GDK_End")
(CINT "GDK_Begin")
(CINT "GDK_Select")
(CINT "GDK_Print")
(CINT "GDK_Execute")
(CINT "GDK_Insert")
(CINT "GDK_Undo")
(CINT "GDK_Redo")
(CINT "GDK_Menu")
(CINT "GDK_Find")
(CINT "GDK_Cancel")
(CINT "GDK_Help")
(CINT "GDK_Break")
(CINT "GDK_Mode_switch")
(CINT "GDK_script_switch")
(CINT "GDK_Num_Lock")
(CINT "GDK_KP_Space")
(CINT "GDK_KP_Tab")
(CINT "GDK_KP_Enter")
(CINT "GDK_KP_F1")
(CINT "GDK_KP_F2")
(CINT "GDK_KP_F3")
(CINT "GDK_KP_F4")
(CINT "GDK_KP_Home")
(CINT "GDK_KP_Left")
(CINT "GDK_KP_Up")
(CINT "GDK_KP_Right")
(CINT "GDK_KP_Down")
(CINT "GDK_KP_Prior")
(CINT "GDK_KP_Page_Up")
(CINT "GDK_KP_Next")
(CINT "GDK_KP_Page_Down")
(CINT "GDK_KP_End")
(CINT "GDK_KP_Begin")
(CINT "GDK_KP_Insert")
(CINT "GDK_KP_Delete")
(CINT "GDK_KP_Equal")
(CINT "GDK_KP_Multiply")
(CINT "GDK_KP_Add")
(CINT "GDK_KP_Separator")
(CINT "GDK_KP_Subtract")
(CINT "GDK_KP_Decimal")
(CINT "GDK_KP_Divide")
(CINT "GDK_KP_0")
(CINT "GDK_KP_1")
(CINT "GDK_KP_2")
(CINT "GDK_KP_3")
(CINT "GDK_KP_4")
(CINT "GDK_KP_5")
(CINT "GDK_KP_6")
(CINT "GDK_KP_7")
(CINT "GDK_KP_8")
(CINT "GDK_KP_9")
(CINT "GDK_F1")
(CINT "GDK_F2")
(CINT "GDK_F3")
(CINT "GDK_F4")
(CINT "GDK_F5")
(CINT "GDK_F6")
(CINT "GDK_F7")
(CINT "GDK_F8")
(CINT "GDK_F9")
(CINT "GDK_F10")
(CINT "GDK_F11")
(CINT "GDK_L1")
(CINT "GDK_F12")
(CINT "GDK_L2")
(CINT "GDK_F13")
(CINT "GDK_L3")
(CINT "GDK_F14")
(CINT "GDK_L4")
(CINT "GDK_F15")
(CINT "GDK_L5")
(CINT "GDK_F16")
(CINT "GDK_L6")
(CINT "GDK_F17")
(CINT "GDK_L7")
(CINT "GDK_F18")
(CINT "GDK_L8")
(CINT "GDK_F19")
(CINT "GDK_L9")
(CINT "GDK_F20")
(CINT "GDK_L10")
(CINT "GDK_F21")
(CINT "GDK_R1")
(CINT "GDK_F22")
(CINT "GDK_R2")
(CINT "GDK_F23")
(CINT "GDK_R3")
(CINT "GDK_F24")
(CINT "GDK_R4")
(CINT "GDK_F25")
(CINT "GDK_R5")
(CINT "GDK_F26")
(CINT "GDK_R6")
(CINT "GDK_F27")
(CINT "GDK_R7")
(CINT "GDK_F28")
(CINT "GDK_R8")
(CINT "GDK_F29")
(CINT "GDK_R9")
(CINT "GDK_F30")
(CINT "GDK_R10")
(CINT "GDK_F31")
(CINT "GDK_R11")
(CINT "GDK_F32")
(CINT "GDK_R12")
(CINT "GDK_F33")
(CINT "GDK_R13")
(CINT "GDK_F34")
(CINT "GDK_R14")
(CINT "GDK_F35")
(CINT "GDK_R15")
(CINT "GDK_Shift_L")
(CINT "GDK_Shift_R")
(CINT "GDK_Control_L")
(CINT "GDK_Control_R")
(CINT "GDK_Caps_Lock")
(CINT "GDK_Shift_Lock")
(CINT "GDK_Meta_L")
(CINT "GDK_Meta_R")
(CINT "GDK_Alt_L")
(CINT "GDK_Alt_R")
(CINT "GDK_space")
(CINT "GDK_exclam")
(CINT "GDK_quotedbl")
(CINT "GDK_numbersign")
(CINT "GDK_dollar")
(CINT "GDK_percent")
(CINT "GDK_ampersand")
(CINT "GDK_apostrophe")
(CINT "GDK_quoteright")
(CINT "GDK_parenleft")
(CINT "GDK_parenright")
(CINT "GDK_asterisk")
(CINT "GDK_plus")
(CINT "GDK_comma")
(CINT "GDK_minus")
(CINT "GDK_period")
(CINT "GDK_slash")
(CINT "GDK_0")
(CINT "GDK_1")
(CINT "GDK_2")
(CINT "GDK_3")
(CINT "GDK_4")
(CINT "GDK_5")
(CINT "GDK_6")
(CINT "GDK_7")
(CINT "GDK_8")
(CINT "GDK_9")
(CINT "GDK_colon")
(CINT "GDK_semicolon")
(CINT "GDK_less")
(CINT "GDK_equal")
(CINT "GDK_greater")
(CINT "GDK_question")
(CINT "GDK_at")
(CINT "GDK_A")
(CINT "GDK_B")
(CINT "GDK_C")
(CINT "GDK_D")
(CINT "GDK_E")
(CINT "GDK_F")
(CINT "GDK_G")
(CINT "GDK_H")
(CINT "GDK_I")
(CINT "GDK_J")
(CINT "GDK_K")
(CINT "GDK_L")
(CINT "GDK_M")
(CINT "GDK_N")
(CINT "GDK_O")
(CINT "GDK_P")
(CINT "GDK_Q")
(CINT "GDK_R")
(CINT "GDK_S")
(CINT "GDK_T")
(CINT "GDK_U")
(CINT "GDK_V")
(CINT "GDK_W")
(CINT "GDK_X")
(CINT "GDK_Y")
(CINT "GDK_Z")
(CINT "GDK_bracketleft")
(CINT "GDK_backslash")
(CINT "GDK_bracketright")
(CINT "GDK_asciicircum")
(CINT "GDK_underscore")
(CINT "GDK_grave")
(CINT "GDK_quoteleft")
(CINT "GDK_a")
(CINT "GDK_b")
(CINT "GDK_c")
(CINT "GDK_d")
(CINT "GDK_e")
(CINT "GDK_f")
(CINT "GDK_g")
(CINT "GDK_h")
(CINT "GDK_i")
(CINT "GDK_j")
(CINT "GDK_k")
(CINT "GDK_l")
(CINT "GDK_m")
(CINT "GDK_n")
(CINT "GDK_o")
(CINT "GDK_p")
(CINT "GDK_q")
(CINT "GDK_r")
(CINT "GDK_s")
(CINT "GDK_t")
(CINT "GDK_u")
(CINT "GDK_v")
(CINT "GDK_w")
(CINT "GDK_x")
(CINT "GDK_y")
(CINT "GDK_z")
(CINT "GDK_braceleft")
(CINT "GDK_bar")
(CINT "GDK_braceright")
(CINT "GDK_asciitilde")

(CFNC "PangoContext* gdk_pango_context_get void")
(CFNC "void gdk_pango_context_set_colormap PangoContext* context GdkColormap* colormap")
(CFNC "GdkRegion* gdk_pango_layout_line_get_clip_region PangoLayoutLine* line gint x_origin gint y_origin gint* index_ranges gint n_ranges")
(CFNC "GdkRegion* gdk_pango_layout_get_clip_region PangoLayout* layout gint x_origin gint y_origin gint* index_ranges gint n_ranges")
(CFNC "PangoAttribute* gdk_pango_attr_stipple_new GdkBitmap* stipple")
(CFNC "PangoAttribute* gdk_pango_attr_embossed_new gboolean embossed")
(CFNC "void gdk_pixbuf_render_threshold_alpha GdkPixbuf* pixbuf GdkBitmap* bitmap int src_x int src_y int dest_x int dest_y int width int height int alpha_threshold")
(CFNC "void gdk_pixbuf_render_to_drawable GdkPixbuf* pixbuf GdkDrawable* drawable GdkGC* gc int src_x int src_y int dest_x int dest_y int width int height GdkRgbDither dither int x_dither int y_dither")
(CFNC "void gdk_pixbuf_render_to_drawable_alpha GdkPixbuf* pixbuf GdkDrawable* drawable int src_x int src_y int dest_x int dest_y int width int height GdkPixbufAlphaMode alpha_mode int alpha_threshold GdkRgbDither dither int x_dither int y_dither")
(CFNC "void gdk_pixbuf_render_pixmap_and_mask_for_colormap GdkPixbuf* pixbuf GdkColormap* colormap GdkPixmap** [pixmap_return] GdkBitmap** [mask_return] int alpha_threshold")
(CFNC "void gdk_pixbuf_render_pixmap_and_mask GdkPixbuf* pixbuf GdkPixmap** [pixmap_return] GdkBitmap** [mask_return] int alpha_threshold")
(CFNC "GdkPixbuf* gdk_pixbuf_get_from_drawable GdkPixbuf* dest GdkDrawable* src GdkColormap* cmap int src_x int src_y int dest_x int dest_y int width int height")
(CFNC "GdkPixbuf* gdk_pixbuf_get_from_image GdkPixbuf* dest GdkImage* src GdkColormap* cmap int src_x int src_y int dest_x int dest_y int width int height")
(CCAST "GDK_PIXMAP(object)" "GdkPixmap*")
;(cdef "GDK_PIXMAP_CLASS(klass)")
(CCHK "GDK_IS_PIXMAP(object)" "GdkPixmap*")
;(cdef1 "GDK_IS_PIXMAP_CLASS(klass)")
;(cdef "GDK_PIXMAP_GET_CLASS(obj)")
;(CCAST2 "GDK_PIXMAP_OBJECT(object)")
(CFNC "GType gdk_pixmap_get_type void")

;; GdkWindow -> GdkDrawable in gtk 2.2
(CFNC "GdkPixmap* gdk_pixmap_new Drawable_was_Window* window gint width gint height gint depth")
(CFNC "GdkBitmap* gdk_bitmap_create_from_data Drawable_was_Window* window gchar* data gint width gint height")
(CFNC "GdkPixmap* gdk_pixmap_create_from_data Drawable_was_Window* window gchar* data gint width gint height gint depth GdkColor* fg GdkColor* bg")
(CFNC "GdkPixmap* gdk_pixmap_create_from_xpm Drawable_was_Window* window GdkBitmap** mask GdkColor* transparent_color gchar* filename")
(CFNC "GdkPixmap* gdk_pixmap_colormap_create_from_xpm Drawable_was_Window* window GdkColormap* colormap GdkBitmap** mask GdkColor* transparent_color gchar* filename")
(CFNC "GdkPixmap* gdk_pixmap_create_from_xpm_d Drawable_was_Window* window GdkBitmap** mask GdkColor* transparent_color gchar** data")
(CFNC "GdkPixmap* gdk_pixmap_colormap_create_from_xpm_d Drawable_was_Window* window GdkColormap* colormap GdkBitmap** mask GdkColor* transparent_color gchar** data")

(CFNC "GdkPixmap* gdk_pixmap_foreign_new GdkNativeWindow anid")
(CFNC "GdkPixmap* gdk_pixmap_lookup GdkNativeWindow anid")
(CINT "GDK_PROP_MODE_REPLACE" "GdkPropMode")
(CINT "GDK_PROP_MODE_PREPEND" "GdkPropMode")
(CINT "GDK_PROP_MODE_APPEND" "GdkPropMode")
(CFNC "GdkAtom gdk_atom_intern gchar* atom_name gboolean only_if_exists")
(CFNC "gchar* gdk_atom_name GdkAtom atom")
(CFNC "gboolean gdk_property_get GdkWindow* window GdkAtom property GdkAtom type gulong offset gulong length gint pdelete GdkAtom* [actual_property_type] gint* [actual_format] gint* [actual_length] guchar** [data]") 
(CFNC "void gdk_property_change GdkWindow* window GdkAtom property GdkAtom type gint format GdkPropMode mode guchar* data gint nelements")
(CFNC "void gdk_property_delete GdkWindow* window GdkAtom property")
(CFNC "gint gdk_text_property_to_text_list GdkAtom encoding gint format guchar* text gint length gchar*** list")
(CFNC "gint gdk_text_property_to_utf8_list GdkAtom encoding gint format guchar* text gint length gchar*** list")
(CFNC "gchar* gdk_utf8_to_string_target gchar* str")
(CFNC "gboolean gdk_utf8_to_compound_text gchar* str GdkAtom* encoding gint* format guchar** [ctext] gint* [length]")
(CFNC "void gdk_free_text_list gchar** list")
(CFNC "gint gdk_string_to_compound_text gchar* str GdkAtom* encoding gint* format guchar** [ctext] gint* [length]")
(CFNC "void gdk_free_compound_text guchar* ctext")
(CFNC "GdkRegion* gdk_region_new void")
(CFNC "GdkRegion* gdk_region_polygon GdkPoint* points gint npoints GdkFillRule fill_rule")
(CFNC "GdkRegion* gdk_region_copy GdkRegion* region")
(CFNC "GdkRegion* gdk_region_rectangle GdkRectangle* rectangle")
(CFNC "void gdk_region_destroy GdkRegion* region")
(CFNC "void gdk_region_get_clipbox GdkRegion* region GdkRectangle* rectangle")
(CFNC "void gdk_region_get_rectangles GdkRegion* region GdkRectangle** [rectangles] gint* [n_rectangles]")
(CFNC "gboolean gdk_region_empty GdkRegion* region")
(CFNC "gboolean gdk_region_equal GdkRegion* region1 GdkRegion* region2")
(CFNC "gboolean gdk_region_point_in GdkRegion* region int x int y")
(CFNC "GdkOverlapType gdk_region_rect_in GdkRegion* region GdkRectangle* rect")
(CFNC "void gdk_region_offset GdkRegion* region gint dx gint dy")
(CFNC "void gdk_region_shrink GdkRegion* region gint dx gint dy")
(CFNC "void gdk_region_union_with_rect GdkRegion* region GdkRectangle* rect")
(CFNC "void gdk_region_intersect GdkRegion* source1 GdkRegion* source2")
(CFNC "void gdk_region_union GdkRegion* source1 GdkRegion* source2")
(CFNC "void gdk_region_subtract GdkRegion* source1 GdkRegion* source2")
(CFNC "void gdk_region_xor GdkRegion* source1 GdkRegion* source2")
(CFNC "void gdk_region_spans_intersect_foreach GdkRegion* region GdkSpan* spans int n_spans gboolean sorted GdkSpanFunc func lambda_data #func_data")
(CFNC "void gdk_rgb_find_color GdkColormap* colormap GdkColor* color")
(CINT "GDK_RGB_DITHER_NONE")
(CINT "GDK_RGB_DITHER_NORMAL")
(CINT "GDK_RGB_DITHER_MAX")
(CFNC "void gdk_draw_rgb_image GdkDrawable* drawable GdkGC* gc gint x gint y gint width gint height GdkRgbDither dith guchar* rgb_buf gint rowstride")
(CFNC "void gdk_draw_rgb_image_dithalign GdkDrawable* drawable GdkGC* gc gint x gint y gint width gint height GdkRgbDither dith guchar* rgb_buf gint rowstride gint xdith gint ydith")
(CFNC "void gdk_draw_rgb_32_image GdkDrawable* drawable GdkGC* gc gint x gint y gint width gint height GdkRgbDither dith guchar* buf gint rowstride")
(CFNC "void gdk_draw_rgb_32_image_dithalign GdkDrawable* drawable GdkGC* gc gint x gint y gint width gint height GdkRgbDither dith guchar* buf gint rowstride gint xdith gint ydith")
(CFNC "void gdk_draw_gray_image GdkDrawable* drawable GdkGC* gc gint x gint y gint width gint height GdkRgbDither dith guchar* buf gint rowstride")
(CFNC "void gdk_draw_indexed_image GdkDrawable* drawable GdkGC* gc gint x gint y gint width gint height GdkRgbDither dith guchar* buf gint rowstride GdkRgbCmap* cmap")
(CFNC "GdkRgbCmap* gdk_rgb_cmap_new guint32* colors gint n_colors")
(CFNC "void gdk_rgb_cmap_free GdkRgbCmap* cmap")
(CFNC "gboolean gdk_rgb_ditherable void")
(CFNC "void gdk_rgb_set_verbose gboolean verbose")
(CFNC "void gdk_rgb_set_install gboolean install")
(CFNC "void gdk_rgb_set_min_colors gint min_colors")
(CFNC "GdkColormap* gdk_rgb_get_colormap void")
(CFNC "GdkVisual* gdk_rgb_get_visual void")
;;; atoms from gdk/gdkselection.h
(CATOM "GDK_SELECTION_PRIMARY")
(CATOM "GDK_SELECTION_SECONDARY")
(CATOM "GDK_SELECTION_CLIPBOARD")
(CATOM "GDK_TARGET_BITMAP")
(CATOM "GDK_TARGET_COLORMAP")
(CATOM "GDK_TARGET_DRAWABLE")
(CATOM "GDK_TARGET_PIXMAP")
(CATOM "GDK_TARGET_STRING")
(CATOM "GDK_SELECTION_TYPE_ATOM")
(CATOM "GDK_SELECTION_TYPE_BITMAP")
(CATOM "GDK_SELECTION_TYPE_COLORMAP")
(CATOM "GDK_SELECTION_TYPE_DRAWABLE")
(CATOM "GDK_SELECTION_TYPE_INTEGER")
(CATOM "GDK_SELECTION_TYPE_PIXMAP")
(CATOM "GDK_SELECTION_TYPE_WINDOW")
(CATOM "GDK_SELECTION_TYPE_STRING")
(CFNC "gboolean gdk_selection_owner_set GdkWindow* owner GdkAtom selection guint32 time gboolean send_event")
(CFNC "GdkWindow* gdk_selection_owner_get GdkAtom selection")
(CFNC "void gdk_selection_convert GdkWindow* requestor GdkAtom selection GdkAtom target guint32 time")
(CFNC "gboolean gdk_selection_property_get GdkWindow* requestor guchar** [data] GdkAtom* [prop_type] gint* [prop_format]")
(CFNC "void gdk_selection_send_notify guint32 requestor GdkAtom selection GdkAtom target GdkAtom property guint32 time")
(CINT "GDK_CURRENT_TIME")
(CINT "GDK_PARENT_RELATIVE")
;(CCAST2 "GDK_ATOM_TO_POINTER(atom)")
;(CCAST2 "GDK_POINTER_TO_ATOM(ptr)")
(CATOM "GDK_NONE")
(CINT "GDK_LSB_FIRST" "GdkByteOrder")
(CINT "GDK_MSB_FIRST" "GdkByteOrder")
(CINT "GDK_SHIFT_MASK" "GdkModifierType")
(CINT "GDK_LOCK_MASK" "GdkModifierType")
(CINT "GDK_CONTROL_MASK" "GdkModifierType")
(CINT "GDK_MOD1_MASK" "GdkModifierType")
(CINT "GDK_MOD2_MASK" "GdkModifierType")
(CINT "GDK_MOD3_MASK" "GdkModifierType")
(CINT "GDK_MOD4_MASK" "GdkModifierType")
(CINT "GDK_MOD5_MASK" "GdkModifierType")
(CINT "GDK_BUTTON1_MASK" "GdkModifierType")
(CINT "GDK_BUTTON2_MASK" "GdkModifierType")
(CINT "GDK_BUTTON3_MASK" "GdkModifierType")
(CINT "GDK_BUTTON4_MASK" "GdkModifierType")
(CINT "GDK_BUTTON5_MASK" "GdkModifierType")
(CINT "GDK_RELEASE_MASK" "GdkModifierType")
(CINT "GDK_MODIFIER_MASK" "GdkModifierType")
(CINT "GDK_INPUT_READ" "GdkInputCondition")
(CINT "GDK_INPUT_WRITE" "GdkInputCondition")
(CINT "GDK_INPUT_EXCEPTION" "GdkInputCondition")
(CINT "GDK_OK" "GdkStatus")
(CINT "GDK_ERROR" "GdkStatus")
(CINT "GDK_ERROR_PARAM" "GdkStatus")
(CINT "GDK_ERROR_FILE" "GdkStatus")
(CINT "GDK_ERROR_MEM" "GdkStatus")
(CINT "GDK_GRAB_SUCCESS" "GdkGrabStatus")
(CINT "GDK_GRAB_ALREADY_GRABBED" "GdkGrabStatus")
(CINT "GDK_GRAB_INVALID_TIME" "GdkGrabStatus")
(CINT "GDK_GRAB_NOT_VIEWABLE" "GdkGrabStatus")
(CINT "GDK_GRAB_FROZEN" "GdkGrabStatus")
(CCAST "GDK_VISUAL(object)" "GdkVisual*")
;(cdef "GDK_VISUAL_CLASS(klass)")
(CCHK "GDK_IS_VISUAL(object)" "GdkVisual*")
;(cdef1 "GDK_IS_VISUAL_CLASS(klass)")
;(cdef "GDK_VISUAL_GET_CLASS(obj)")
(CINT "GDK_VISUAL_STATIC_GRAY" "GdkVisualType")
(CINT "GDK_VISUAL_GRAYSCALE" "GdkVisualType")
(CINT "GDK_VISUAL_STATIC_COLOR" "GdkVisualType")
(CINT "GDK_VISUAL_PSEUDO_COLOR" "GdkVisualType")
(CINT "GDK_VISUAL_TRUE_COLOR" "GdkVisualType")
(CINT "GDK_VISUAL_DIRECT_COLOR" "GdkVisualType")
(CFNC "GType gdk_visual_get_type void")
(CFNC "gint gdk_visual_get_best_depth void")
(CFNC "GdkVisualType gdk_visual_get_best_type void")
(CFNC "GdkVisual* gdk_visual_get_system void")
(CFNC "GdkVisual* gdk_visual_get_best void")
(CFNC "GdkVisual* gdk_visual_get_best_with_depth gint depth")
(CFNC "GdkVisual* gdk_visual_get_best_with_type GdkVisualType visual_type")
(CFNC "GdkVisual* gdk_visual_get_best_with_both gint depth GdkVisualType visual_type")
(CFNC "void gdk_query_depths gint** [depths] gint* [count]")
(CFNC "void gdk_query_visual_types GdkVisualType** [visual_types] gint* [count]")
(CFNC "GList* gdk_list_visuals void")
(CINT "GDK_INPUT_OUTPUT" "GdkWindowClass")
(CINT "GDK_INPUT_ONLY" "GdkWindowClass")
(CINT "GDK_WINDOW_ROOT" "GdkWindowType")
(CINT "GDK_WINDOW_TOPLEVEL" "GdkWindowType")
(CINT "GDK_WINDOW_CHILD" "GdkWindowType")
(CINT "GDK_WINDOW_DIALOG" "GdkWindowType")
(CINT "GDK_WINDOW_TEMP" "GdkWindowType")
(CINT "GDK_WINDOW_FOREIGN" "GdkWindowType")
(CINT "GDK_WA_TITLE" "GdkWindowAttributesType")
(CINT "GDK_WA_X" "GdkWindowAttributesType")
(CINT "GDK_WA_Y" "GdkWindowAttributesType")
(CINT "GDK_WA_CURSOR" "GdkWindowAttributesType")
(CINT "GDK_WA_COLORMAP" "GdkWindowAttributesType")
(CINT "GDK_WA_VISUAL" "GdkWindowAttributesType")
(CINT "GDK_WA_WMCLASS" "GdkWindowAttributesType")
(CINT "GDK_WA_NOREDIR" "GdkWindowAttributesType")
(CINT "GDK_HINT_POS" "GdkWindowHints")
(CINT "GDK_HINT_MIN_SIZE" "GdkWindowHints")
(CINT "GDK_HINT_MAX_SIZE" "GdkWindowHints")
(CINT "GDK_HINT_BASE_SIZE" "GdkWindowHints")
(CINT "GDK_HINT_ASPECT" "GdkWindowHints")
(CINT "GDK_HINT_RESIZE_INC" "GdkWindowHints")
(CINT "GDK_HINT_WIN_GRAVITY" "GdkWindowHints")
(CINT "GDK_HINT_USER_POS" "GdkWindowHints")
(CINT "GDK_HINT_USER_SIZE" "GdkWindowHints")
(CINT "GDK_WINDOW_TYPE_HINT_NORMAL" "GdkWindowTypeHint")
(CINT "GDK_WINDOW_TYPE_HINT_DIALOG" "GdkWindowTypeHint")
(CINT "GDK_WINDOW_TYPE_HINT_MENU" "GdkWindowTypeHint")
(CINT "GDK_WINDOW_TYPE_HINT_TOOLBAR" "GdkWindowTypeHint")
(CINT "GDK_DECOR_ALL" "GdkWMDecoration")
(CINT "GDK_DECOR_BORDER" "GdkWMDecoration")
(CINT "GDK_DECOR_RESIZEH" "GdkWMDecoration")
(CINT "GDK_DECOR_TITLE" "GdkWMDecoration")
(CINT "GDK_DECOR_MENU" "GdkWMDecoration")
(CINT "GDK_DECOR_MINIMIZE" "GdkWMDecoration")
(CINT "GDK_DECOR_MAXIMIZE" "GdkWMDecoration")
(CINT "GDK_FUNC_ALL" "GdkWMFunction")
(CINT "GDK_FUNC_RESIZE" "GdkWMFunction")
(CINT "GDK_FUNC_MOVE" "GdkWMFunction")
(CINT "GDK_FUNC_MINIMIZE" "GdkWMFunction")
(CINT "GDK_FUNC_MAXIMIZE" "GdkWMFunction")
(CINT "GDK_FUNC_CLOSE" "GdkWMFunction")
(CINT "GDK_GRAVITY_NORTH_WEST" "GdkGravity")
(CINT "GDK_GRAVITY_NORTH" "GdkGravity")
(CINT "GDK_GRAVITY_NORTH_EAST" "GdkGravity")
(CINT "GDK_GRAVITY_WEST" "GdkGravity")
(CINT "GDK_GRAVITY_CENTER" "GdkGravity")
(CINT "GDK_GRAVITY_EAST" "GdkGravity")
(CINT "GDK_GRAVITY_SOUTH_WEST" "GdkGravity")
(CINT "GDK_GRAVITY_SOUTH" "GdkGravity")
(CINT "GDK_GRAVITY_SOUTH_EAST" "GdkGravity")
(CINT "GDK_GRAVITY_STATIC" "GdkGravity")
(CINT "GDK_WINDOW_EDGE_NORTH_WEST" "GdkWindowEdge")
(CINT "GDK_WINDOW_EDGE_NORTH" "GdkWindowEdge")
(CINT "GDK_WINDOW_EDGE_NORTH_EAST" "GdkWindowEdge")
(CINT "GDK_WINDOW_EDGE_WEST" "GdkWindowEdge")
(CINT "GDK_WINDOW_EDGE_EAST" "GdkWindowEdge")
(CINT "GDK_WINDOW_EDGE_SOUTH_WEST" "GdkWindowEdge")
(CINT "GDK_WINDOW_EDGE_SOUTH" "GdkWindowEdge")
(CINT "GDK_WINDOW_EDGE_SOUTH_EAST" "GdkWindowEdge")
(CCAST "GDK_WINDOW(object)" "GdkWindow*")
;(cdef "GDK_WINDOW_CLASS(klass)")
(CCHK "GDK_IS_WINDOW(object)" "GdkWindow*")
;(cdef1 "GDK_IS_WINDOW_CLASS(klass)")
;(cdef "GDK_WINDOW_GET_CLASS(obj)")
(CCAST "GDK_WINDOW_OBJECT(object)" "GdkWindowObject*")
(CFNC "GType gdk_window_object_get_type void")
(CFNC "GdkWindow* gdk_window_new GdkWindow* parent GdkWindowAttr* attributes gint attributes_mask")
(CFNC "void gdk_window_destroy GdkWindow* window")
(CFNC "GdkWindowType gdk_window_get_window_type GdkWindow* window")
(CFNC "GdkWindow* gdk_window_at_pointer gint* [win_x] gint* [win_y]")
(CFNC "void gdk_window_show GdkWindow* window")
(CFNC "void gdk_window_hide GdkWindow* window")
(CFNC "void gdk_window_withdraw GdkWindow* window")
(CFNC "void gdk_window_show_unraised GdkWindow* window")
(CFNC "void gdk_window_move GdkWindow* window gint x gint y")
(CFNC "void gdk_window_resize GdkWindow* window gint width gint height")
(CFNC "void gdk_window_move_resize GdkWindow* window gint x gint y gint width gint height")
(CFNC "void gdk_window_reparent GdkWindow* window GdkWindow* new_parent gint x gint y")
(CFNC "void gdk_window_clear GdkWindow* window")
(CFNC "void gdk_window_clear_area GdkWindow* window gint x gint y gint width gint height")
(CFNC "void gdk_window_clear_area_e GdkWindow* window gint x gint y gint width gint height")
(CFNC "void gdk_window_raise GdkWindow* window")
(CFNC "void gdk_window_lower GdkWindow* window")
(CFNC "void gdk_window_focus GdkWindow* window guint32 timestamp")
(CFNC "void gdk_window_set_user_data GdkWindow* @window gpointer user_data")
(CFNC "void gdk_window_set_override_redirect GdkWindow* window gboolean override_redirect")
(CFNC "void gdk_window_add_filter GdkWindow* window GdkFilterFunc func lambda_data #func_data")
(CFNC "void gdk_window_remove_filter GdkWindow* window GdkFilterFunc func lambda_data #func_data")
(CFNC "void gdk_window_scroll GdkWindow* window gint dx gint dy")
(CFNC "void gdk_window_shape_combine_mask GdkWindow* window GdkBitmap* mask gint x gint y")
(CFNC "void gdk_window_shape_combine_region GdkWindow* window GdkRegion* shape_region gint offset_x gint offset_y")
(CFNC "void gdk_window_set_child_shapes GdkWindow* window")
(CFNC "void gdk_window_merge_child_shapes GdkWindow* window")
(CFNC "gboolean gdk_window_is_visible GdkWindow* window")
(CFNC "gboolean gdk_window_is_viewable GdkWindow* window")
(CFNC "GdkWindowState gdk_window_get_state GdkWindow* window")
(CFNC "gboolean gdk_window_set_static_gravities GdkWindow* window gboolean use_static") 
(CFNC "GdkWindow* gdk_window_foreign_new GdkNativeWindow anid")
(CFNC "GdkWindow* gdk_window_lookup GdkNativeWindow anid")
(CFNC "void gdk_window_get_root_origin GdkWindow* window gint* [x] gint* [y]")
(CFNC "void gdk_window_get_frame_extents GdkWindow* window GdkRectangle* rect")
(CFNC "GdkWindow* gdk_window_get_pointer GdkWindow* window gint* [x] gint* [y] GdkModifierType* [mask]")
(CFNC "GdkWindow* gdk_window_get_parent GdkWindow* window")
(CFNC "GdkWindow* gdk_window_get_toplevel GdkWindow* window")
(CFNC "GList* gdk_window_get_children GdkWindow* window")
(CFNC "GList* gdk_window_peek_children GdkWindow* window")
(CFNC "GdkEventMask gdk_window_get_events GdkWindow* window")
(CFNC "void gdk_window_set_events GdkWindow* window GdkEventMask event_mask")
(CFNC "void gdk_window_set_icon_list GdkWindow* window GList* pixbufs")
(CFNC "void gdk_window_set_icon GdkWindow* window GdkWindow* icon_window GdkPixmap* pixmap GdkBitmap* mask")
(CFNC "void gdk_window_set_icon_name GdkWindow* window gchar* name")
(CFNC "void gdk_window_set_group GdkWindow* window GdkWindow* leader")
(CFNC "void gdk_window_set_decorations GdkWindow* window GdkWMDecoration decorations")
(CFNC "gboolean gdk_window_get_decorations GdkWindow* window GdkWMDecoration* decorations")
(CFNC "void gdk_window_set_functions GdkWindow* window GdkWMFunction functions")
(CFNC "GList* gdk_window_get_toplevels void")
(CFNC "void gdk_window_iconify GdkWindow* window")
(CFNC "void gdk_window_deiconify GdkWindow* window")
(CFNC "void gdk_window_stick GdkWindow* window")
(CFNC "void gdk_window_unstick GdkWindow* window")
(CFNC "void gdk_window_maximize GdkWindow* window")
(CFNC "void gdk_window_unmaximize GdkWindow* window")
(CFNC "void gdk_window_register_dnd GdkWindow* window")
(CFNC "void gdk_window_begin_resize_drag GdkWindow* window GdkWindowEdge edge gint button gint root_x gint root_y guint32 timestamp")
(CFNC "void gdk_window_begin_move_drag GdkWindow* window gint button gint root_x gint root_y guint32 timestamp")
(CFNC "void gdk_window_invalidate_rect GdkWindow* window GdkRectangle* rect gboolean invalidate_children")
(CFNC "void gdk_window_invalidate_region GdkWindow* window GdkRegion* region gboolean invalidate_children")
(CFNC "void gdk_window_invalidate_maybe_recurse GdkWindow* window GdkRegion* region lambda2 func lambda_data #func_data")
(CFNC "GdkRegion* gdk_window_get_update_area GdkWindow* window")
(CFNC "void gdk_window_freeze_updates GdkWindow* window")
(CFNC "void gdk_window_thaw_updates GdkWindow* window")
(CFNC "void gdk_window_process_all_updates void")
(CFNC "void gdk_window_process_updates GdkWindow* window gboolean update_children")
(CFNC "void gdk_window_set_debug_updates gboolean setting")
(CFNC "void gdk_window_constrain_size GdkGeometry* geometry guint flags gint width gint height gint* [new_width] gint* [new_height]")
(CFNC "void gdk_window_get_internal_paint_info GdkWindow* window GdkDrawable** [real_drawable] gint* [x_offset] gint* [y_offset]")
(CFNC "void gtk_window_group_add_window GtkWindowGroup* window_group GtkWindow* window")
(CFNC "void gtk_window_group_remove_window GtkWindowGroup* window_group GtkWindow* window")
(CFNC "void gtk_window_remove_embedded_xid GtkWindow* window guint xid")
(CFNC "void gtk_window_add_embedded_xid GtkWindow* window guint xid")
(CFNC "void gdk_window_set_type_hint GdkWindow* window GdkWindowTypeHint hint")
(CFNC "void gdk_window_set_modal_hint GdkWindow* window gboolean modal")
(CFNC "void gdk_window_set_geometry_hints GdkWindow* window GdkGeometry* geometry GdkWindowHints geom_mask")
(CFNC "void gdk_set_sm_client_id gchar* sm_client_id")
(CFNC "void gdk_window_begin_paint_rect GdkWindow* window GdkRectangle* rectangle")
(CFNC "void gdk_window_begin_paint_region GdkWindow* window GdkRegion* region")
(CFNC "void gdk_window_end_paint GdkWindow* window")
(CFNC "void gdk_window_set_title GdkWindow* window gchar* title")
(CFNC "void gdk_window_set_role GdkWindow* window gchar* role")
(CFNC "void gdk_window_set_transient_for GdkWindow* window GdkWindow* parent")
(CFNC "void gdk_window_set_background GdkWindow* window GdkColor* color")
(CFNC "void gdk_window_set_back_pixmap GdkWindow* window GdkPixmap* pixmap gboolean parent_relative")
(CFNC "void gdk_window_set_cursor GdkWindow* window GdkCursor* cursor")
(CFNC "void gdk_window_get_user_data GdkWindow* window gpointer* [data]")
(CFNC "void gdk_window_get_geometry GdkWindow* window gint* x gint* y gint* width gint* height gint* depth")
(CFNC "void gdk_window_get_position GdkWindow* window gint* [x] gint* [y]")
(CFNC "gint gdk_window_get_origin GdkWindow* window gint* x gint* y")
;(CFNC "GdkPointerHooks* gdk_set_pointer_hooks GdkPointerHooks* @new_hooks") 
(CFNC "GdkWindow* gdk_get_default_root_window void")

;;; gdk-pixbuf
(CFNC "GQuark gdk_pixbuf_error_quark void") 
(CFNC "GType gdk_pixbuf_get_type void") 
(CFNC "GdkColorspace gdk_pixbuf_get_colorspace GdkPixbuf* pixbuf")
(CFNC "int gdk_pixbuf_get_n_channels GdkPixbuf* pixbuf")
(CFNC "gboolean gdk_pixbuf_get_has_alpha GdkPixbuf* pixbuf")
(CFNC "int gdk_pixbuf_get_bits_per_sample GdkPixbuf* pixbuf")
(CFNC "guchar* gdk_pixbuf_get_pixels GdkPixbuf* pixbuf")
(CFNC "int gdk_pixbuf_get_width GdkPixbuf* pixbuf")
(CFNC "int gdk_pixbuf_get_height GdkPixbuf* pixbuf")
(CFNC "int gdk_pixbuf_get_rowstride GdkPixbuf* pixbuf")
(CFNC "GdkPixbuf* gdk_pixbuf_new GdkColorspace colorspace gboolean has_alpha int bits_per_sample int width int height")
(CFNC "GdkPixbuf* gdk_pixbuf_copy GdkPixbuf* pixbuf")
(CFNC "GdkPixbuf* gdk_pixbuf_new_subpixbuf GdkPixbuf* src_pixbuf int src_x int src_y int width int height")
(CFNC "GdkPixbuf* gdk_pixbuf_new_from_file char* filename GError** [error]")
(CFNC "GdkPixbuf* gdk_pixbuf_new_from_data guchar* data GdkColorspace colorspace gboolean has_alpha int bits_per_sample int width int height int rowstride GdkPixbufDestroyNotify destroy_fn gpointer destroy_fn_data")
(CFNC "GdkPixbuf* gdk_pixbuf_new_from_xpm_data char** data" 'const)
(CFNC "GdkPixbuf* gdk_pixbuf_new_from_inline gint data_length guint8* data gboolean copy_pixels GError** [error]")
(CFNC "void gdk_pixbuf_fill GdkPixbuf* pixbuf guint32 pixel")
(CFNC "gboolean gdk_pixbuf_save GdkPixbuf* pixbuf char* filename char* type GError** [error] ...")
(CFNC "gboolean gdk_pixbuf_savev GdkPixbuf* pixbuf char* filename char* type char** option_keys char** option_values GError** [error]")
(CFNC "GdkPixbuf* gdk_pixbuf_add_alpha GdkPixbuf* pixbuf gboolean substitute_color guchar r guchar g guchar b")
(CFNC "void gdk_pixbuf_copy_area GdkPixbuf* src_pixbuf int src_x int src_y int width int height GdkPixbuf* dest_pixbuf int dest_x int dest_y")
(CFNC "void gdk_pixbuf_saturate_and_pixelate GdkPixbuf* src GdkPixbuf* dest gfloat saturation gboolean pixelate") 
(CFNC "void gdk_pixbuf_scale GdkPixbuf* src GdkPixbuf* dest int dest_x int dest_y int dest_width int dest_height double offset_x double offset_y double scale_x double scale_y GdkInterpType interp_type")
(CFNC "void gdk_pixbuf_composite GdkPixbuf* src GdkPixbuf* dest int dest_x int dest_y int dest_width int dest_height double offset_x double offset_y double scale_x double scale_y GdkInterpType interp_type int overall_alpha")
(CFNC "void gdk_pixbuf_composite_color GdkPixbuf* src GdkPixbuf* dest int dest_x int dest_y int dest_width int dest_height double offset_x double offset_y double scale_x double scale_y GdkInterpType interp_type int overall_alpha int check_x int check_y int check_size guint32 color1 guint32 color2")
(CFNC "GdkPixbuf* gdk_pixbuf_scale_simple GdkPixbuf* src int dest_width int dest_height GdkInterpType interp_type")
(CFNC "GdkPixbuf* gdk_pixbuf_composite_color_simple GdkPixbuf* src int dest_width int dest_height GdkInterpType interp_type int overall_alpha int check_size guint32 color1 guint32 color2")
(CFNC "GType gdk_pixbuf_animation_get_type void") 
(CFNC "GdkPixbufAnimation* gdk_pixbuf_animation_new_from_file char* filename GError** [error]")
(CFNC "int gdk_pixbuf_animation_get_width GdkPixbufAnimation* animation")
(CFNC "int gdk_pixbuf_animation_get_height GdkPixbufAnimation* animation")
(CFNC "gboolean gdk_pixbuf_animation_is_static_image GdkPixbufAnimation* animation")
(CFNC "GdkPixbuf* gdk_pixbuf_animation_get_static_image GdkPixbufAnimation* animation")
(CFNC "GdkPixbufAnimationIter* gdk_pixbuf_animation_get_iter GdkPixbufAnimation* animation GTimeVal* start_time")
(CFNC "GType gdk_pixbuf_animation_iter_get_type void") 
(CFNC "int gdk_pixbuf_animation_iter_get_delay_time GdkPixbufAnimationIter* iter")
(CFNC "GdkPixbuf* gdk_pixbuf_animation_iter_get_pixbuf GdkPixbufAnimationIter* iter")
(CFNC "gboolean gdk_pixbuf_animation_iter_on_currently_loading_frame GdkPixbufAnimationIter* iter")
(CFNC "gboolean gdk_pixbuf_animation_iter_advance GdkPixbufAnimationIter* iter GTimeVal* current_time")
(CFNC "gchar* gdk_pixbuf_get_option GdkPixbuf* pixbuf gchar* key")
(CFNC "GType gdk_pixbuf_loader_get_type void") 
(CFNC "GdkPixbufLoader* gdk_pixbuf_loader_new void")
(CFNC "GdkPixbufLoader* gdk_pixbuf_loader_new_with_type char* image_type GError** [error]")
(CFNC "gboolean gdk_pixbuf_loader_write GdkPixbufLoader* loader guchar* buf gsize count GError** [error]")
(CFNC "GdkPixbuf* gdk_pixbuf_loader_get_pixbuf GdkPixbufLoader* loader")
(CFNC "GdkPixbufAnimation* gdk_pixbuf_loader_get_animation GdkPixbufLoader* loader")
(CFNC "gboolean gdk_pixbuf_loader_close GdkPixbufLoader* loader GError** [error]")
(CINT "GDK_PIXBUF_ALPHA_BILEVEL" "GdkPixbufAlphaMode")
(CINT "GDK_PIXBUF_ALPHA_FULL" "GdkPixbufAlphaMode")
(CINT "GDK_COLORSPACE_RGB" "GdkColorspace")
(CLNG "GDK_TYPE_PIXBUF")
(CCAST "GDK_PIXBUF(object)" "GdkPixbuf*")
(CCHK "GDK_IS_PIXBUF(object)" "GdkPixbuf*")
(CLNG "GDK_TYPE_PIXBUF_ANIMATION")
(CCAST "GDK_PIXBUF_ANIMATION(object)" "GdkPixbufAnimation*")
(CCHK "GDK_IS_PIXBUF_ANIMATION(object)" "GdkPixbufAnimation*")
(CLNG "GDK_TYPE_PIXBUF_ANIMATION_ITER")
(CCAST "GDK_PIXBUF_ANIMATION_ITER(object)" "GdkPixbufAnimationIter*")
(CCHK "GDK_IS_PIXBUF_ANIMATION_ITER(object)" "GdkPixbufAnimationIter*")
(CLNG "GDK_PIXBUF_ERROR")
(CINT "GDK_PIXBUF_ERROR_CORRUPT_IMAGE" "GdkPixbufError")
(CINT "GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY" "GdkPixbufError")
(CINT "GDK_PIXBUF_ERROR_BAD_OPTION" "GdkPixbufError")
(CINT "GDK_PIXBUF_ERROR_UNKNOWN_TYPE" "GdkPixbufError")
(CINT "GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION" "GdkPixbufError")
(CINT "GDK_PIXBUF_ERROR_FAILED" "GdkPixbufError")
(CINT "GDK_INTERP_NEAREST" "GdkInterpType")
(CINT "GDK_INTERP_TILES" "GdkInterpType")
(CINT "GDK_INTERP_BILINEAR" "GdkInterpType")
(CINT "GDK_INTERP_HYPER" "GdkInterpType")
(CINT "GDK_PIXBUF_MAJOR")
(CINT "GDK_PIXBUF_MINOR")
(CINT "GDK_PIXBUF_MICRO")
(CSTR "GDK_PIXBUF_VERSION")
(CLNG "GDK_TYPE_PIXBUF_LOADER")
(CCAST "GDK_PIXBUF_LOADER(obj)" "GdkPixbufLoader*")
(CCHK "GDK_IS_PIXBUF_LOADER(obj)" "GdkPixbufLoader*")
(CFNC "GType gdk_pixbuf_alpha_mode_get_type void")
(CLNG "GDK_TYPE_PIXBUF_ALPHA_MODE")
(CFNC "GType gdk_colorspace_get_type void")
(CLNG "GDK_TYPE_COLORSPACE")
(CFNC "GType gdk_pixbuf_error_get_type void")
(CLNG "GDK_TYPE_PIXBUF_ERROR")
(CFNC "GType gdk_interp_type_get_type void")
(CLNG "GDK_TYPE_INTERP_TYPE")



(CCAST "GTK_VBOX(obj)" "GtkVBox*")
;(cdef "GTK_VBOX_CLASS(klass)")
(CCHK "GTK_IS_VBOX(obj)" "GtkVBox*")
;(cdef1 "GTK_IS_VBOX_CLASS(klass)")
;(cdef "GTK_VBOX_GET_CLASS(obj)")
(CFNC "GtkType gtk_vbox_get_type void")
(CFNC "GtkWidget* gtk_vbox_new gboolean homogeneous gint spacing")
(CCAST "GTK_ACCEL_GROUP(object)" "GtkAccelGroup*")
;(cdef "GTK_ACCEL_GROUP_CLASS(klass)")
(CCHK "GTK_IS_ACCEL_GROUP(object)" "GtkAccelGroup*")
;(cdef1 "GTK_IS_ACCEL_GROUP_CLASS(klass)")
;(cdef "GTK_ACCEL_GROUP_GET_CLASS(obj)")
(CINT "GTK_ACCEL_VISIBLE" "GtkAccelFlags")
(CINT "GTK_ACCEL_LOCKED" "GtkAccelFlags")
(CINT "GTK_ACCEL_MASK" "GtkAccelFlags")
(CFNC "GType gtk_accel_group_get_type void")
(CFNC "GtkAccelGroup* gtk_accel_group_new void")
(CFNC "void gtk_accel_group_lock GtkAccelGroup* accel_group")
(CFNC "void gtk_accel_group_unlock GtkAccelGroup* accel_group")
(CFNC "void gtk_accel_group_connect GtkAccelGroup* accel_group guint accel_key GdkModifierType accel_mods GtkAccelFlags accel_flags GClosure* closure")
(CFNC "void gtk_accel_group_connect_by_path GtkAccelGroup* accel_group gchar* accel_path GClosure* closure")
(CFNC "gboolean gtk_accel_group_disconnect GtkAccelGroup* accel_group GClosure* closure")
(CFNC "gboolean gtk_accel_group_disconnect_key GtkAccelGroup* accel_group guint accel_key GdkModifierType accel_mods")
(CFNC "gboolean gtk_accel_groups_activate GObject* object guint accel_key GdkModifierType accel_mods")
(CFNC "GSList* gtk_accel_groups_from_object GObject* object")
(CFNC "GtkAccelKey* gtk_accel_group_find GtkAccelGroup* accel_group lambda3 func lambda_data #func_data")
(CFNC "GtkAccelGroup* gtk_accel_group_from_accel_closure GClosure* closure")
(CFNC "gboolean gtk_accelerator_valid guint keyval GdkModifierType modifiers")
(CFNC "void gtk_accelerator_parse gchar* accelerator guint* [accelerator_key] GdkModifierType* [accelerator_mods]")
(CFNC "gchar* gtk_accelerator_name guint accelerator_key GdkModifierType accelerator_mods")
(CFNC "void gtk_accelerator_set_default_mod_mask GdkModifierType default_mod_mask")
(CFNC "guint gtk_accelerator_get_default_mod_mask void")
(CFNC "GtkAccelGroupEntry* gtk_accel_group_query GtkAccelGroup* accel_group guint accel_key GdkModifierType accel_mods guint* [n_entries]")
(CCAST "GTK_ACCEL_LABEL(obj)" "GtkAccelLabel*")
;(cdef "GTK_ACCEL_LABEL_CLASS(klass)")
(CCHK "GTK_IS_ACCEL_LABEL(obj)" "GtkAccelLabel*")
;(cdef1 "GTK_IS_ACCEL_LABEL_CLASS(klass)")
;(cdef "GTK_ACCEL_LABEL_GET_CLASS(obj)")
(CFNC "GtkType gtk_accel_label_get_type void")
(CFNC "GtkWidget* gtk_accel_label_new gchar* string")
(CFNC "GtkWidget* gtk_accel_label_get_accel_widget GtkAccelLabel* accel_label")
(CFNC "guint gtk_accel_label_get_accel_width GtkAccelLabel* accel_label")
(CFNC "void gtk_accel_label_set_accel_widget GtkAccelLabel* accel_label GtkWidget* accel_widget")
(CFNC "void gtk_accel_label_set_accel_closure GtkAccelLabel* accel_label GClosure* closure")
(CFNC "gboolean gtk_accel_label_refetch GtkAccelLabel* accel_label")
(CFNC "void gtk_accel_map_add_entry gchar* accel_path guint accel_key GdkModifierType accel_mods")
(CFNC "gboolean gtk_accel_map_lookup_entry gchar* accel_path GtkAccelKey* key")
(CFNC "gboolean gtk_accel_map_change_entry gchar* accel_path guint accel_key GdkModifierType accel_mods gboolean replace")
(CFNC "void gtk_accel_map_load gchar* file_name")
(CFNC "void gtk_accel_map_save gchar* file_name")
(CFNC "void gtk_accel_map_foreach gpointer data GtkAccelMapForeach foreach_func")
(CFNC "void gtk_accel_map_load_fd gint fd")
(CFNC "void gtk_accel_map_load_scanner GScanner* scanner")
(CFNC "void gtk_accel_map_save_fd gint fd")
(CFNC "void gtk_accel_map_add_filter gchar* filter_pattern")
(CFNC "void gtk_accel_map_foreach_unfiltered gpointer data GtkAccelMapForeach foreach_func")
(CCAST "GTK_ACCESSIBLE(obj)" "GtkAccessible*")
;(cdef "GTK_ACCESSIBLE_CLASS(klass)")
(CCHK "GTK_IS_ACCESSIBLE(obj)" "GtkAccessible*")
;(cdef1 "GTK_IS_ACCESSIBLE_CLASS(klass)")
;(cdef "GTK_ACCESSIBLE_GET_CLASS(obj)")
(CFNC "GtkType gtk_accessible_get_type void")
(CFNC "void gtk_accessible_connect_widget_destroyed GtkAccessible* accessible")
(CCAST "GTK_ADJUSTMENT(obj)" "GtkAdjustment*")
;(cdef "GTK_ADJUSTMENT_CLASS(klass)")
(CCHK "GTK_IS_ADJUSTMENT(obj)" "GtkAdjustment*")
;(cdef1 "GTK_IS_ADJUSTMENT_CLASS(klass)")
;(cdef "GTK_ADJUSTMENT_GET_CLASS(obj)")
(CFNC "GtkType gtk_adjustment_get_type void")
(CFNC "GtkObject* gtk_adjustment_new gdouble value gdouble lower gdouble upper gdouble step_increment gdouble page_increment gdouble page_size")
(CFNC "void gtk_adjustment_changed GtkAdjustment* adjustment")
(CFNC "void gtk_adjustment_value_changed GtkAdjustment* adjustment")
(CFNC "void gtk_adjustment_clamp_page GtkAdjustment* adjustment gdouble lower gdouble upper")
(CFNC "gdouble gtk_adjustment_get_value GtkAdjustment* adjustment")
(CFNC "void gtk_adjustment_set_value GtkAdjustment* adjustment gdouble value")
(CCAST "GTK_ALIGNMENT(obj)" "GtkAlignment*")
;(cdef "GTK_ALIGNMENT_CLASS(klass)")
(CCHK "GTK_IS_ALIGNMENT(obj)" "GtkAlignment*")
;(cdef1 "GTK_IS_ALIGNMENT_CLASS(klass)")
;(cdef "GTK_ALIGNMENT_GET_CLASS(obj)")
(CFNC "GtkType gtk_alignment_get_type void")
(CFNC "GtkWidget* gtk_alignment_new gfloat xalign gfloat yalign gfloat xscale gfloat yscale")
(CFNC "void gtk_alignment_set GtkAlignment* alignment gfloat xalign gfloat yalign gfloat xscale gfloat yscale")
(CCAST "GTK_ARROW(obj)" "GtkArrow*")
;(cdef "GTK_ARROW_CLASS(klass)")
(CCHK "GTK_IS_ARROW(obj)" "GtkArrow*")
;(cdef1 "GTK_IS_ARROW_CLASS(klass)")
;(cdef "GTK_ARROW_GET_CLASS(obj)")
(CFNC "GtkType gtk_arrow_get_type void")
(CFNC "GtkWidget* gtk_arrow_new GtkArrowType arrow_type GtkShadowType shadow_type")
(CFNC "void gtk_arrow_set GtkArrow* arrow GtkArrowType arrow_type GtkShadowType shadow_type")
(CCAST "GTK_ASPECT_FRAME(obj)" "GtkAspectFrame*")
;(cdef "GTK_ASPECT_FRAME_CLASS(klass)")
(CCHK "GTK_IS_ASPECT_FRAME(obj)" "GtkAspectFrame*")
;(cdef1 "GTK_IS_ASPECT_FRAME_CLASS(klass)")
;(cdef "GTK_ASPECT_FRAME_GET_CLASS(obj)")
(CFNC "GtkType gtk_aspect_frame_get_type void")
(CFNC "GtkWidget* gtk_aspect_frame_new gchar* label gfloat xalign gfloat yalign gfloat ratio gboolean obey_child")
(CFNC "void gtk_aspect_frame_set GtkAspectFrame* aspect_frame gfloat xalign gfloat yalign gfloat ratio gboolean obey_child")
(CCAST "GTK_BUTTON_BOX(obj)" "GtkButtonBox*")
;(cdef "GTK_BUTTON_BOX_CLASS(klass)")
(CCHK "GTK_IS_BUTTON_BOX(obj)" "GtkButtonBox*")
;(cdef1 "GTK_IS_BUTTON_BOX_CLASS(klass)")
;(cdef "GTK_BUTTON_BOX_GET_CLASS(obj)")
(CINT "GTK_BUTTONBOX_DEFAULT")
(CFNC "GtkType gtk_button_box_get_type void")
(CFNC "GtkButtonBoxStyle gtk_button_box_get_layout GtkButtonBox* widget")
(CFNC "void gtk_button_box_set_layout GtkButtonBox* widget GtkButtonBoxStyle layout_style")
(CFNC "void gtk_button_box_set_child_secondary GtkButtonBox* widget GtkWidget* child gboolean is_secondary")
(CFNC "GtkBindingSet* gtk_binding_set_new gchar* set_name")
(CFNC "GtkBindingSet* gtk_binding_set_by_class gpointer object_class")
(CFNC "GtkBindingSet* gtk_binding_set_find gchar* set_name")
(CFNC "gboolean gtk_bindings_activate GtkObject* object guint keyval GdkModifierType modifiers")
(CFNC "gboolean gtk_binding_set_activate GtkBindingSet* binding_set guint keyval GdkModifierType modifiers GtkObject* object")
(CFNC "void gtk_binding_entry_clear GtkBindingSet* binding_set guint keyval GdkModifierType modifiers")
(CFNC "void gtk_binding_entry_add_signal GtkBindingSet* binding_set guint keyval GdkModifierType modifiers gchar* signal_name guint n_args ...")
(CFNC "void gtk_binding_set_add_path GtkBindingSet* binding_set GtkPathType path_type gchar* path_pattern GtkPathPriorityType priority")
(CFNC "void gtk_binding_entry_remove GtkBindingSet* binding_set guint keyval GdkModifierType modifiers")
(CFNC "void gtk_binding_entry_add_signall GtkBindingSet* binding_set guint keyval GdkModifierType modifiers gchar* signal_name GSList* binding_args")
(CFNC "guint gtk_binding_parse_binding GScanner* scanner")
(CCAST "GTK_BIN(obj)" "GtkBin*")
;(cdef "GTK_BIN_CLASS(klass)")
(CCHK "GTK_IS_BIN(obj)" "GtkBin*")
;(cdef1 "GTK_IS_BIN_CLASS(klass)")
;(cdef "GTK_BIN_GET_CLASS(obj)")
(CFNC "GtkType gtk_bin_get_type void")
(CFNC "GtkWidget* gtk_bin_get_child GtkBin* bin")
(CCAST "GTK_BOX(obj)" "GtkBox*")
;(cdef "GTK_BOX_CLASS(klass)")
(CCHK "GTK_IS_BOX(obj)" "GtkBox*")
;(cdef1 "GTK_IS_BOX_CLASS(klass)")
;(cdef "GTK_BOX_GET_CLASS(obj)")
(CFNC "GtkType gtk_box_get_type void")
(CFNC "void gtk_box_pack_start GtkBox* box GtkWidget* child gboolean expand gboolean fill guint padding")
(CFNC "void gtk_box_pack_end GtkBox* box GtkWidget* child gboolean expand gboolean fill guint padding")
(CFNC "void gtk_box_pack_start_defaults GtkBox* box GtkWidget* widget")
(CFNC "void gtk_box_pack_end_defaults GtkBox* box GtkWidget* widget")
(CFNC "void gtk_box_set_homogeneous GtkBox* box gboolean homogeneous")
(CFNC "gboolean gtk_box_get_homogeneous GtkBox* box")
(CFNC "void gtk_box_set_spacing GtkBox* box gint spacing")
(CFNC "gint gtk_box_get_spacing GtkBox* box")
(CFNC "void gtk_box_reorder_child GtkBox* box GtkWidget* child gint position")
(CFNC "void gtk_box_query_child_packing GtkBox* box GtkWidget* child gboolean* expand gboolean* fill guint* padding GtkPackType* pack_type")
(CFNC "void gtk_box_set_child_packing GtkBox* box GtkWidget* child gboolean expand gboolean fill guint padding GtkPackType pack_type")
(CCAST "GTK_BUTTON(obj)" "GtkButton*")
;(cdef "GTK_BUTTON_CLASS(klass)")
(CCHK "GTK_IS_BUTTON(obj)" "GtkButton*")
;(cdef1 "GTK_IS_BUTTON_CLASS(klass)")
;(cdef "GTK_BUTTON_GET_CLASS(obj)")
(CFNC "GtkType gtk_button_get_type void")
(CFNC "GtkWidget* gtk_button_new void")
(CFNC "GtkWidget* gtk_button_new_with_label gchar* label")
(CFNC "GtkWidget* gtk_button_new_from_stock gchar* stock_id")
(CFNC "GtkWidget* gtk_button_new_with_mnemonic gchar* label")
(CFNC "void gtk_button_pressed GtkButton* button")
(CFNC "void gtk_button_released GtkButton* button")
(CFNC "void gtk_button_clicked GtkButton* button")
(CFNC "void gtk_button_enter GtkButton* button")
(CFNC "void gtk_button_leave GtkButton* button")
(CFNC "void gtk_button_set_relief GtkButton* button GtkReliefStyle newstyle")
(CFNC "GtkReliefStyle gtk_button_get_relief GtkButton* button")
(CFNC "void gtk_button_set_label GtkButton* button gchar* label")
(CFNC "gchar* gtk_button_get_label GtkButton* button")
(CFNC "void gtk_button_set_use_underline GtkButton* button gboolean use_underline")
(CFNC "gboolean gtk_button_get_use_underline GtkButton* button")
(CFNC "void gtk_button_set_use_stock GtkButton* button gboolean use_stock")
(CFNC "gboolean gtk_button_get_use_stock GtkButton* button")
(CCAST "GTK_CALENDAR(obj)" "GtkCalendar*")
;(cdef "GTK_CALENDAR_CLASS(klass)")
(CCHK "GTK_IS_CALENDAR(obj)" "GtkCalendar*")
;(cdef1 "GTK_IS_CALENDAR_CLASS(klass)")
;(cdef "GTK_CALENDAR_GET_CLASS(obj)")
(CINT "GTK_CALENDAR_SHOW_HEADING" "GtkCalendarDisplayOptions")
(CINT "GTK_CALENDAR_SHOW_DAY_NAMES" "GtkCalendarDisplayOptions")
(CINT "GTK_CALENDAR_NO_MONTH_CHANGE" "GtkCalendarDisplayOptions")
(CINT "GTK_CALENDAR_SHOW_WEEK_NUMBERS" "GtkCalendarDisplayOptions")
(CINT "GTK_CALENDAR_WEEK_START_MONDAY" "GtkCalendarDisplayOptions")
(CFNC "GtkType gtk_calendar_get_type void")
(CFNC "GtkWidget* gtk_calendar_new void")
(CFNC "gboolean gtk_calendar_select_month GtkCalendar* calendar guint month guint year")
(CFNC "void gtk_calendar_select_day GtkCalendar* calendar guint day")
(CFNC "gboolean gtk_calendar_mark_day GtkCalendar* calendar guint day")
(CFNC "gboolean gtk_calendar_unmark_day GtkCalendar* calendar guint day")
(CFNC "void gtk_calendar_clear_marks GtkCalendar* calendar")
(CFNC "void gtk_calendar_display_options GtkCalendar* calendar GtkCalendarDisplayOptions flags")
(CFNC "void gtk_calendar_get_date GtkCalendar* calendar guint* year guint* month guint* day")
(CFNC "void gtk_calendar_freeze GtkCalendar* calendar")
(CFNC "void gtk_calendar_thaw GtkCalendar* calendar")
(CCAST "GTK_CELL_EDITABLE(obj)" "GtkCellEditable*")
;(cdef "GTK_CELL_EDITABLE_CLASS(obj)")
(CCHK "GTK_IS_CELL_EDITABLE(obj)" "GtkCellEditable*")
;(CCAST2 "GTK_CELL_EDITABLE_GET_IFACE(obj)")
(CFNC "GType gtk_cell_editable_get_type void")
(CFNC "void gtk_cell_editable_start_editing GtkCellEditable* cell_editable GdkEvent* @event")
(CFNC "void gtk_cell_editable_editing_done GtkCellEditable* cell_editable")
(CFNC "void gtk_cell_editable_remove_widget GtkCellEditable* cell_editable")
(CINT "GTK_CELL_RENDERER_SELECTED" "GtkCellRendererState")
(CINT "GTK_CELL_RENDERER_PRELIT" "GtkCellRendererState")
(CINT "GTK_CELL_RENDERER_INSENSITIVE" "GtkCellRendererState")
(CINT "GTK_CELL_RENDERER_SORTED" "GtkCellRendererState")
(CINT-22 "GTK_CELL_RENDERER_FOCUSED" "GtkCellRendererState")
(CINT "GTK_CELL_RENDERER_MODE_INERT" "GtkCellRendererMode")
(CINT "GTK_CELL_RENDERER_MODE_ACTIVATABLE" "GtkCellRendererMode")
(CINT "GTK_CELL_RENDERER_MODE_EDITABLE" "GtkCellRendererMode")
(CCAST "GTK_CELL_RENDERER(obj)" "GtkCellRenderer*")
;(cdef "GTK_CELL_RENDERER_CLASS(klass)")
(CCHK "GTK_IS_CELL_RENDERER(obj)" "GtkCellRenderer*")
;(cdef1 "GTK_IS_CELL_RENDERER_CLASS(klass)")
;(cdef "GTK_CELL_RENDERER_GET_CLASS(obj)")
(CFNC "GType gtk_cell_renderer_get_type void")
(CFNC "void gtk_cell_renderer_get_size GtkCellRenderer* cell GtkWidget* widget GdkRectangle* @cell_area gint* [x_offset] gint* [y_offset] gint* [width] gint* [height]")
(CFNC "void gtk_cell_renderer_render GtkCellRenderer* cell GdkWindow* window GtkWidget* widget GdkRectangle* background_area GdkRectangle* cell_area GdkRectangle* expose_area GtkCellRendererState flags")
(CFNC "gboolean gtk_cell_renderer_activate GtkCellRenderer* cell GdkEvent* event GtkWidget* widget gchar* path GdkRectangle* background_area GdkRectangle* cell_area GtkCellRendererState flags")
(CFNC "GtkCellEditable* gtk_cell_renderer_start_editing GtkCellRenderer* cell GdkEvent* event GtkWidget* widget gchar* path GdkRectangle* background_area GdkRectangle* cell_area GtkCellRendererState flags")
(CFNC "void gtk_cell_renderer_set_fixed_size GtkCellRenderer* cell gint width gint height")
(CFNC "void gtk_cell_renderer_get_fixed_size GtkCellRenderer* cell gint* [width] gint* [height]")
(CCAST "GTK_CELL_RENDERER_PIXBUF(obj)" "GtkCellRendererPixbuf*")
;(cdef "GTK_CELL_RENDERER_PIXBUF_CLASS(klass)")
(CCHK "GTK_IS_CELL_RENDERER_PIXBUF(obj)" "GtkCellRendererPixbuf*")
;(cdef1 "GTK_IS_CELL_RENDERER_PIXBUF_CLASS(klass)")
;(cdef "GTK_CELL_RENDERER_PIXBUF_GET_CLASS(obj)")
(CFNC "GtkType gtk_cell_renderer_pixbuf_get_type void")
(CFNC "GtkCellRenderer* gtk_cell_renderer_pixbuf_new void")
(CCAST "GTK_CELL_RENDERER_TEXT(obj)" "GtkCellRendererText*")
;(cdef "GTK_CELL_RENDERER_TEXT_CLASS(klass)")
(CCHK "GTK_IS_CELL_RENDERER_TEXT(obj)" "GtkCellRendererText*")
;(cdef1 "GTK_IS_CELL_RENDERER_TEXT_CLASS(klass)")
;(cdef "GTK_CELL_RENDERER_TEXT_GET_CLASS(obj)")
(CFNC "GtkType gtk_cell_renderer_text_get_type void")
(CFNC "GtkCellRenderer* gtk_cell_renderer_text_new void")
(CFNC "void gtk_cell_renderer_text_set_fixed_height_from_font GtkCellRendererText* renderer gint number_of_rows")
(CCAST "GTK_CELL_RENDERER_TOGGLE(obj)" "GtkCellRendererToggle*")
;(cdef "GTK_CELL_RENDERER_TOGGLE_CLASS(klass)")
(CCHK "GTK_IS_CELL_RENDERER_TOGGLE(obj)" "GtkCellRendererToggle*")
;(cdef1 "GTK_IS_CELL_RENDERER_TOGGLE_CLASS(klass)")
;(cdef "GTK_CELL_RENDERER_TOGGLE_GET_CLASS(obj)")
(CFNC "GtkType gtk_cell_renderer_toggle_get_type void")
(CFNC "GtkCellRenderer* gtk_cell_renderer_toggle_new void")
(CFNC "gboolean gtk_cell_renderer_toggle_get_radio GtkCellRendererToggle* toggle")
(CFNC "void gtk_cell_renderer_toggle_set_radio GtkCellRendererToggle* toggle gboolean radio")
(CFNC "gboolean gtk_cell_renderer_toggle_get_active GtkCellRendererToggle* toggle")
(CFNC "void gtk_cell_renderer_toggle_set_active GtkCellRendererToggle* toggle gboolean setting")
(CCAST "GTK_CHECK_BUTTON(obj)" "GtkCheckButton*")
;(cdef "GTK_CHECK_BUTTON_CLASS(klass)")
(CCHK "GTK_IS_CHECK_BUTTON(obj)" "GtkCheckButton*")
;(cdef1 "GTK_IS_CHECK_BUTTON_CLASS(klass)")
;(cdef "GTK_CHECK_BUTTON_GET_CLASS(obj)")
(CFNC "GtkType gtk_check_button_get_type void")
(CFNC "GtkWidget* gtk_check_button_new void")
(CFNC "GtkWidget* gtk_check_button_new_with_label gchar* label")
(CFNC "GtkWidget* gtk_check_button_new_with_mnemonic gchar* label")
(CCAST "GTK_CHECK_MENU_ITEM(obj)" "GtkCheckMenuItem*")
;(cdef "GTK_CHECK_MENU_ITEM_CLASS(klass)")
(CCHK "GTK_IS_CHECK_MENU_ITEM(obj)" "GtkCheckMenuItem*")
;(cdef1 "GTK_IS_CHECK_MENU_ITEM_CLASS(klass)")
;(cdef "GTK_CHECK_MENU_ITEM_GET_CLASS(obj)")
(CFNC "GtkType gtk_check_menu_item_get_type void")
(CFNC "GtkWidget* gtk_check_menu_item_new void")
(CFNC "GtkWidget* gtk_check_menu_item_new_with_label gchar* label")
(CFNC "GtkWidget* gtk_check_menu_item_new_with_mnemonic gchar* label")
(CFNC "void gtk_check_menu_item_set_active GtkCheckMenuItem* check_menu_item gboolean is_active")
(CFNC "gboolean gtk_check_menu_item_get_active GtkCheckMenuItem* check_menu_item")
(CFNC "void gtk_check_menu_item_toggled GtkCheckMenuItem* check_menu_item")
(CFNC "void gtk_check_menu_item_set_inconsistent GtkCheckMenuItem* check_menu_item gboolean setting")
(CFNC "gboolean gtk_check_menu_item_get_inconsistent GtkCheckMenuItem* check_menu_item")
(CFNC "GtkClipboard* gtk_clipboard_get GdkAtom selection") ; might be on GDK_MULTIHEAD_SAFE switch?
(CFNC "gboolean gtk_clipboard_set_with_data GtkClipboard* clipboard GtkTargetEntry* targets guint n_targets GtkClipboardGetFunc func GtkClipboardClearFunc clear_func lambda_data #func_data")
;(CFNC "gboolean gtk_clipboard_set_with_owner GtkClipboard* clipboard GtkTargetEntry* targets guint n_targets GtkClipboardGetFunc func GtkClipboardClearFunc clear_func GObject* owner")
(CFNC "GObject* gtk_clipboard_get_owner GtkClipboard* clipboard")
(CFNC "void gtk_clipboard_clear GtkClipboard* clipboard")
(CFNC "void gtk_clipboard_set_text GtkClipboard* clipboard gchar* text gint len")
(CFNC "void gtk_clipboard_request_contents GtkClipboard* clipboard GdkAtom target GtkClipboardReceivedFunc func lambda_data #func_data")
(CFNC "void gtk_clipboard_request_text GtkClipboard* clipboard GtkClipboardTextReceivedFunc func lambda_data #func_data")
(CFNC "GtkSelectionData* gtk_clipboard_wait_for_contents GtkClipboard* clipboard GdkAtom target")
(CFNC "gchar* gtk_clipboard_wait_for_text GtkClipboard* clipboard")
(CFNC "gboolean gtk_clipboard_wait_is_text_available GtkClipboard* clipboard")
(CCAST "GTK_COLOR_SELECTION_DIALOG(obj)" "GtkColorSelectionDialog*")
;(cdef "GTK_COLOR_SELECTION_DIALOG_CLASS(klass)")
(CCHK "GTK_IS_COLOR_SELECTION_DIALOG(obj)" "GtkColorSelectionDialog*")
;(cdef1 "GTK_IS_COLOR_SELECTION_DIALOG_CLASS(klass)")
;(cdef "GTK_COLOR_SELECTION_DIALOG_GET_CLASS(obj)")
(CFNC "GtkType gtk_color_selection_dialog_get_type void")
(CFNC "GtkWidget* gtk_color_selection_dialog_new gchar* title") 
(CCAST "GTK_COLOR_SELECTION(obj)" "GtkColorSelection*")
;(cdef "GTK_COLOR_SELECTION_CLASS(klass)")
(CCHK "GTK_IS_COLOR_SELECTION(obj)" "GtkColorSelection*")
;(cdef1 "GTK_IS_COLOR_SELECTION_CLASS(klass)")
;(cdef "GTK_COLOR_SELECTION_GET_CLASS(obj)")
(CFNC "GtkType gtk_color_selection_get_type void")
(CFNC "GtkWidget* gtk_color_selection_new void")
(CFNC "gboolean gtk_color_selection_get_has_opacity_control GtkColorSelection* colorsel")
(CFNC "void gtk_color_selection_set_has_opacity_control GtkColorSelection* colorsel gboolean has_opacity")
(CFNC "gboolean gtk_color_selection_get_has_palette GtkColorSelection* colorsel")
(CFNC "void gtk_color_selection_set_has_palette GtkColorSelection* colorsel gboolean has_palette")
(CFNC "void gtk_color_selection_set_current_color GtkColorSelection* colorsel GdkColor* color")
(CFNC "void gtk_color_selection_set_current_alpha GtkColorSelection* colorsel guint16 alpha")
(CFNC "void gtk_color_selection_get_current_color GtkColorSelection* colorsel GdkColor* color")
(CFNC "guint16 gtk_color_selection_get_current_alpha GtkColorSelection* colorsel")
(CFNC "void gtk_color_selection_set_previous_color GtkColorSelection* colorsel GdkColor* color")
(CFNC "void gtk_color_selection_set_previous_alpha GtkColorSelection* colorsel guint16 alpha")
(CFNC "void gtk_color_selection_get_previous_color GtkColorSelection* colorsel GdkColor* color")
(CFNC "guint16 gtk_color_selection_get_previous_alpha GtkColorSelection* colorsel")
(CFNC "gboolean gtk_color_selection_is_adjusting GtkColorSelection* colorsel")
(CFNC "gboolean gtk_color_selection_palette_from_string gchar* str GdkColor** [colors] gint* [n_colors]")
(CFNC "gchar* gtk_color_selection_palette_to_string GdkColor* colors gint n_colors")
(CFNC "GtkColorSelectionChangePaletteFunc gtk_color_selection_set_change_palette_hook GtkColorSelectionChangePaletteFunc func")
(CCAST "GTK_COMBO(obj)" "GtkCombo*")
;(cdef "GTK_COMBO_CLASS(klass)")
(CCHK "GTK_IS_COMBO(obj)" "GtkCombo*")
;(cdef1 "GTK_IS_COMBO_CLASS(klass)")
;(cdef "GTK_COMBO_GET_CLASS(obj)")
(CFNC "GtkType gtk_combo_get_type void")
(CFNC "GtkWidget* gtk_combo_new void")
(CFNC "void gtk_combo_set_value_in_list GtkCombo* combo gboolean val gboolean ok_if_empty")
(CFNC "void gtk_combo_set_use_arrows GtkCombo* combo gboolean val")
(CFNC "void gtk_combo_set_use_arrows_always GtkCombo* combo gboolean val")
(CFNC "void gtk_combo_set_case_sensitive GtkCombo* combo gboolean val")
(CFNC "void gtk_combo_set_item_string GtkCombo* combo GtkItem* item gchar* item_value")
(CFNC "void gtk_combo_set_popdown_strings GtkCombo* combo GList* strings")
(CFNC "void gtk_combo_disable_activate GtkCombo* combo")
(CCAST "GTK_CONTAINER(obj)" "GtkContainer*")
;(cdef "GTK_CONTAINER_CLASS(klass)")
(CCHK "GTK_IS_CONTAINER(obj)" "GtkContainer*")
;(cdef1 "GTK_IS_CONTAINER_CLASS(klass)")
;(cdef "GTK_CONTAINER_GET_CLASS(obj)")
(CFNC "gboolean GTK_IS_RESIZE_CONTAINER GtkWidget* widget")
(CFNC "GtkType gtk_container_get_type void")
(CFNC "void gtk_container_set_border_width GtkContainer* container guint border_width")
(CFNC "guint gtk_container_get_border_width GtkContainer* container")
(CFNC "void gtk_container_add GtkContainer* container GtkWidget* widget")
(CFNC "void gtk_container_remove GtkContainer* container GtkWidget* widget")
(CFNC "void gtk_container_set_resize_mode GtkContainer* container GtkResizeMode resize_mode")
(CFNC "GtkResizeMode gtk_container_get_resize_mode GtkContainer* container")
(CFNC "void gtk_container_check_resize GtkContainer* container")
(CFNC "void gtk_container_foreach GtkContainer* container GtkCallback func lambda_data #func_data")
(CFNC "GList* gtk_container_get_children GtkContainer* container")
(CCAST "GTK_CURVE(obj)" "GtkCurve*")
;(cdef "GTK_CURVE_CLASS(klass)")
(CCHK "GTK_IS_CURVE(obj)" "GtkCurve*")
;(cdef1 "GTK_IS_CURVE_CLASS(klass)")
;(cdef "GTK_CURVE_GET_CLASS(obj)")
(CFNC "GtkType gtk_curve_get_type void")
(CFNC "GtkWidget* gtk_curve_new void")
(CFNC "void gtk_curve_reset GtkCurve* curve")
(CFNC "void gtk_curve_set_gamma GtkCurve* curve gfloat gamma")
(CFNC "void gtk_curve_set_range GtkCurve* curve gfloat min_x gfloat max_x gfloat min_y gfloat max_y")
(CFNC "void gtk_curve_get_vector GtkCurve* curve int veclen gfloat* vector")
(CFNC "void gtk_curve_set_vector GtkCurve* curve int veclen gfloat* vector")
(CFNC "void gtk_curve_set_curve_type GtkCurve* curve GtkCurveType type")
;(CINT "GTK_DEBUG_MISC")
;(CINT "GTK_DEBUG_PLUGSOCKET")
;(CINT "GTK_DEBUG_TEXT")
;(CINT "GTK_DEBUG_TREE")
;(CINT "GTK_DEBUG_UPDATES")
(CINT "GTK_DIALOG_MODAL" "GtkDialogFlags")
(CINT "GTK_DIALOG_DESTROY_WITH_PARENT" "GtkDialogFlags")
(CINT "GTK_DIALOG_NO_SEPARATOR" "GtkDialogFlags")
(CINT "GTK_RESPONSE_NONE" "GtkResponseType")
(CINT "GTK_RESPONSE_REJECT" "GtkResponseType")
(CINT "GTK_RESPONSE_ACCEPT" "GtkResponseType")
(CINT "GTK_RESPONSE_DELETE_EVENT" "GtkResponseType")
(CINT "GTK_RESPONSE_OK" "GtkResponseType")
(CINT "GTK_RESPONSE_CANCEL" "GtkResponseType")
(CINT "GTK_RESPONSE_CLOSE" "GtkResponseType")
(CINT "GTK_RESPONSE_YES" "GtkResponseType")
(CINT "GTK_RESPONSE_NO" "GtkResponseType")
(CINT "GTK_RESPONSE_APPLY" "GtkResponseType")
(CINT "GTK_RESPONSE_HELP" "GtkResponseType")
(CCAST "GTK_DIALOG(obj)" "GtkDialog*")
;(cdef "GTK_DIALOG_CLASS(klass)")
(CCHK "GTK_IS_DIALOG(obj)" "GtkDialog*")
;(cdef1 "GTK_IS_DIALOG_CLASS(klass)")
;(cdef "GTK_DIALOG_GET_CLASS(obj)")
(CFNC "GtkType gtk_dialog_get_type void")
(CFNC "GtkWidget* gtk_dialog_new void")
(CFNC "GtkWidget* gtk_dialog_new_with_buttons gchar* title GtkWindow* @parent GtkDialogFlags flags gchar* first_button_text ...")
(CFNC "void gtk_dialog_add_action_widget GtkDialog* dialog GtkWidget* child gint response_id")
(CFNC "GtkWidget* gtk_dialog_add_button GtkDialog* dialog gchar* button_text gint response_id")
(CFNC "void gtk_dialog_add_buttons GtkDialog* dialog gchar* first_button_text ...")
(CFNC "void gtk_dialog_set_response_sensitive GtkDialog* dialog gint response_id gboolean setting")
(CFNC "void gtk_dialog_set_default_response GtkDialog* dialog gint response_id")
(CFNC "void gtk_dialog_set_has_separator GtkDialog* dialog gboolean setting")
(CFNC "gboolean gtk_dialog_get_has_separator GtkDialog* dialog")
(CFNC "void gtk_dialog_response GtkDialog* dialog gint response_id")
(CFNC "gint gtk_dialog_run GtkDialog* dialog")
(CINT "GTK_DEST_DEFAULT_MOTION" "GtkDestDefaults")
(CINT "GTK_DEST_DEFAULT_HIGHLIGHT" "GtkDestDefaults")
(CINT "GTK_DEST_DEFAULT_DROP" "GtkDestDefaults")
(CINT "GTK_DEST_DEFAULT_ALL" "GtkDestDefaults")
(CINT "GTK_TARGET_SAME_APP" "GtkTargetFlags")
(CINT "GTK_TARGET_SAME_WIDGET" "GtkTargetFlags")
(CFNC "void gtk_drag_get_data GtkWidget* widget GdkDragContext* context GdkAtom target guint32 time")
(CFNC "void gtk_drag_finish GdkDragContext* context gboolean success gboolean del guint32 time")
(CFNC "GtkWidget* gtk_drag_get_source_widget GdkDragContext* context")
(CFNC "void gtk_drag_highlight GtkWidget* widget")
(CFNC "void gtk_drag_unhighlight GtkWidget* widget")
(CFNC "void gtk_drag_dest_set GtkWidget* widget GtkDestDefaults flags GtkTargetEntry* targets gint n_targets GdkDragAction actions")
(CFNC "void gtk_drag_dest_set_proxy GtkWidget* widget GdkWindow* proxy_window GdkDragProtocol protocol gboolean use_coordinates")
(CFNC "void gtk_drag_dest_unset GtkWidget* widget")
(CFNC "GdkAtom gtk_drag_dest_find_target GtkWidget* widget GdkDragContext* context GtkTargetList* @target_list")
(CFNC "GtkTargetList* gtk_drag_dest_get_target_list GtkWidget* widget")
(CFNC "void gtk_drag_dest_set_target_list GtkWidget* widget GtkTargetList* @target_list")
(CFNC "void gtk_drag_source_set GtkWidget* widget GdkModifierType start_button_mask GtkTargetEntry* targets gint n_targets GdkDragAction actions")
(CFNC "void gtk_drag_source_unset GtkWidget* widget")
(CFNC "void gtk_drag_source_set_icon GtkWidget* widget GdkColormap* colormap GdkPixmap* pixmap GdkBitmap* mask")
(CFNC "void gtk_drag_source_set_icon_pixbuf GtkWidget* widget GdkPixbuf* pixbuf")
(CFNC "void gtk_drag_source_set_icon_stock GtkWidget* widget gchar* stock_id")
(CFNC "GdkDragContext* gtk_drag_begin GtkWidget* widget GtkTargetList* targets GdkDragAction actions gint button GdkEvent* event")
(CFNC "void gtk_drag_set_icon_widget GdkDragContext* context GtkWidget* widget gint hot_x gint hot_y")
(CFNC "void gtk_drag_set_icon_pixmap GdkDragContext* context GdkColormap* colormap GdkPixmap* pixmap GdkBitmap* mask gint hot_x gint hot_y")
(CFNC "void gtk_drag_set_icon_pixbuf GdkDragContext* context GdkPixbuf* pixbuf gint hot_x gint hot_y")
(CFNC "void gtk_drag_set_icon_stock GdkDragContext* context gchar* stock_id gint hot_x gint hot_y")
(CFNC "void gtk_drag_set_icon_default GdkDragContext* context")
(CFNC "gboolean gtk_drag_check_threshold GtkWidget* widget gint start_x gint start_y gint current_x gint current_y")
(CCAST "GTK_DRAWING_AREA(obj)" "GtkDrawingArea*")
;(cdef "GTK_DRAWING_AREA_CLASS(klass)")
(CCHK "GTK_IS_DRAWING_AREA(obj)" "GtkDrawingArea*")
;(cdef1 "GTK_IS_DRAWING_AREA_CLASS(klass)")
;(cdef "GTK_DRAWING_AREA_GET_CLASS(obj)")
(CFNC "GtkType gtk_drawing_area_get_type void")
(CFNC "GtkWidget* gtk_drawing_area_new void")
(CCAST "GTK_EDITABLE(obj)" "GtkEditable*")
;(cdef "GTK_EDITABLE_CLASS(vtable)")
(CCHK "GTK_IS_EDITABLE(obj)" "GtkEditable*")
;(cdef1 "GTK_IS_EDITABLE_CLASS(vtable)")
;(cdef "GTK_EDITABLE_GET_CLASS(inst)")
(CFNC "GtkType gtk_editable_get_type void")
(CFNC "void gtk_editable_select_region GtkEditable* editable gint start gint end")
(CFNC "gboolean gtk_editable_get_selection_bounds GtkEditable* editable gint* start gint* end")
(CFNC "void gtk_editable_insert_text GtkEditable* editable gchar* new_text gint new_text_length gint* position")
(CFNC "void gtk_editable_delete_text GtkEditable* editable gint start_pos gint end_pos")
(CFNC "gchar* gtk_editable_get_chars GtkEditable* editable gint start_pos gint end_pos")
(CFNC "void gtk_editable_cut_clipboard GtkEditable* editable")
(CFNC "void gtk_editable_copy_clipboard GtkEditable* editable")
(CFNC "void gtk_editable_paste_clipboard GtkEditable* editable")
(CFNC "void gtk_editable_delete_selection GtkEditable* editable")
(CFNC "void gtk_editable_set_position GtkEditable* editable gint position")
(CFNC "gint gtk_editable_get_position GtkEditable* editable")
(CFNC "void gtk_editable_set_editable GtkEditable* editable gboolean is_editable")
(CFNC "gboolean gtk_editable_get_editable GtkEditable* editable")
(CCAST "GTK_ENTRY(obj)" "GtkEntry*")
;(cdef "GTK_ENTRY_CLASS(klass)")
(CCHK "GTK_IS_ENTRY(obj)" "GtkEntry*")
;(cdef1 "GTK_IS_ENTRY_CLASS(klass)")
;(cdef "GTK_ENTRY_GET_CLASS(obj)")
(CFNC "GtkType gtk_entry_get_type void")
(CFNC "GtkWidget* gtk_entry_new void")
(CFNC "void gtk_entry_set_visibility GtkEntry* entry gboolean visible")
(CFNC "gboolean gtk_entry_get_visibility GtkEntry* entry")
(CFNC "void gtk_entry_set_invisible_char GtkEntry* entry gunichar ch")
(CFNC "gunichar gtk_entry_get_invisible_char GtkEntry* entry")
(CFNC "void gtk_entry_set_has_frame GtkEntry* entry gboolean setting")
(CFNC "gboolean gtk_entry_get_has_frame GtkEntry* entry")
(CFNC "void gtk_entry_set_max_length GtkEntry* entry gint max")
(CFNC "gint gtk_entry_get_max_length GtkEntry* entry")
(CFNC "void gtk_entry_set_activates_default GtkEntry* entry gboolean setting")
(CFNC "gboolean gtk_entry_get_activates_default GtkEntry* entry")
(CFNC "void gtk_entry_set_width_chars GtkEntry* entry gint n_chars")
(CFNC "gint gtk_entry_get_width_chars GtkEntry* entry")
(CFNC "void gtk_entry_set_text GtkEntry* entry gchar* text")
(CFNC "gchar* gtk_entry_get_text GtkEntry* entry")
(CFNC "PangoLayout* gtk_entry_get_layout GtkEntry* entry")
(CFNC "void gtk_entry_get_layout_offsets GtkEntry* entry gint* [x] gint* [y]")
(CINT "GTK_ANCHOR_CENTER" "GtkAnchorType")
(CINT "GTK_ANCHOR_NORTH" "GtkAnchorType")
(CINT "GTK_ANCHOR_NORTH_WEST" "GtkAnchorType")
(CINT "GTK_ANCHOR_NORTH_EAST" "GtkAnchorType")
(CINT "GTK_ANCHOR_SOUTH" "GtkAnchorType")
(CINT "GTK_ANCHOR_SOUTH_WEST" "GtkAnchorType")
(CINT "GTK_ANCHOR_SOUTH_EAST" "GtkAnchorType")
(CINT "GTK_ANCHOR_WEST" "GtkAnchorType")
(CINT "GTK_ANCHOR_EAST" "GtkAnchorType")
(CINT "GTK_ANCHOR_N" "GtkAnchorType")
(CINT "GTK_ANCHOR_NW" "GtkAnchorType")
(CINT "GTK_ANCHOR_NE" "GtkAnchorType")
(CINT "GTK_ANCHOR_S" "GtkAnchorType")
(CINT "GTK_ANCHOR_SW" "GtkAnchorType")
(CINT "GTK_ANCHOR_SE" "GtkAnchorType")
(CINT "GTK_ANCHOR_W" "GtkAnchorType")
(CINT "GTK_ANCHOR_E" "GtkAnchorType")
(CINT "GTK_ARROW_UP" "GtkArrowType")
(CINT "GTK_ARROW_DOWN" "GtkArrowType")
(CINT "GTK_ARROW_LEFT" "GtkArrowType")
(CINT "GTK_ARROW_RIGHT" "GtkArrowType")
(CINT "GTK_EXPAND" "GtkAttachOptions")
(CINT "GTK_SHRINK" "GtkAttachOptions")
(CINT "GTK_FILL" "GtkAttachOptions")
(CINT "GTK_BUTTONBOX_DEFAULT_STYLE" "GtkButtonBoxStyle")
(CINT "GTK_BUTTONBOX_SPREAD" "GtkButtonBoxStyle")
(CINT "GTK_BUTTONBOX_EDGE" "GtkButtonBoxStyle")
(CINT "GTK_BUTTONBOX_START" "GtkButtonBoxStyle")
(CINT "GTK_BUTTONBOX_END" "GtkButtonBoxStyle")
(CINT "GTK_CURVE_TYPE_LINEAR" "GtkCurveType")
(CINT "GTK_CURVE_TYPE_SPLINE" "GtkCurveType")
(CINT "GTK_CURVE_TYPE_FREE" "GtkCurveType")
(CINT "GTK_DELETE_CHARS" "GtkDeleteType")
(CINT "GTK_DELETE_WORD_ENDS" "GtkDeleteType")
(CINT "GTK_DELETE_WORDS" "GtkDeleteType")
(CINT "GTK_DELETE_DISPLAY_LINES" "GtkDeleteType")
(CINT "GTK_DELETE_DISPLAY_LINE_ENDS" "GtkDeleteType")
(CINT "GTK_DELETE_PARAGRAPH_ENDS" "GtkDeleteType")
(CINT "GTK_DELETE_PARAGRAPHS" "GtkDeleteType")
(CINT "GTK_DELETE_WHITESPACE" "GtkDeleteType")
(CINT "GTK_DIR_TAB_FORWARD" "GtkDirectionType")
(CINT "GTK_DIR_TAB_BACKWARD" "GtkDirectionType")
(CINT "GTK_DIR_UP" "GtkDirectionType")
(CINT "GTK_DIR_DOWN" "GtkDirectionType")
(CINT "GTK_DIR_LEFT" "GtkDirectionType")
(CINT "GTK_DIR_RIGHT" "GtkDirectionType")
(CINT "GTK_EXPANDER_COLLAPSED" "GtkExpanderStyle")
(CINT "GTK_EXPANDER_SEMI_COLLAPSED" "GtkExpanderStyle")
(CINT "GTK_EXPANDER_SEMI_EXPANDED" "GtkExpanderStyle")
(CINT "GTK_EXPANDER_EXPANDED" "GtkExpanderStyle")
(CINT "GTK_ICON_SIZE_INVALID" "GtkIconSize")
(CINT "GTK_ICON_SIZE_MENU" "GtkIconSize")
(CINT "GTK_ICON_SIZE_SMALL_TOOLBAR" "GtkIconSize")
(CINT "GTK_ICON_SIZE_LARGE_TOOLBAR" "GtkIconSize")
(CINT "GTK_ICON_SIZE_BUTTON" "GtkIconSize")
(CINT "GTK_ICON_SIZE_DND" "GtkIconSize")
(CINT "GTK_ICON_SIZE_DIALOG" "GtkIconSize")
(CINT "GTK_TEXT_DIR_NONE" "GtkTextDirection")
(CINT "GTK_TEXT_DIR_LTR" "GtkTextDirection")
(CINT "GTK_TEXT_DIR_RTL" "GtkTextDirection")
(CINT "GTK_JUSTIFY_LEFT" "GtkTextJustification")
(CINT "GTK_JUSTIFY_RIGHT" "GtkTextJustification")
(CINT "GTK_JUSTIFY_CENTER" "GtkTextJustification")
(CINT "GTK_JUSTIFY_FILL" "GtkTextJustification")
(CINT "GTK_MENU_DIR_PARENT" "GtkMenuDirectionType")
(CINT "GTK_MENU_DIR_CHILD" "GtkMenuDirectionType")
(CINT "GTK_MENU_DIR_NEXT" "GtkMenuDirectionType")
(CINT "GTK_MENU_DIR_PREV" "GtkMenuDirectionType")
(CINT "GTK_PIXELS" "GtkMetricType")
(CINT "GTK_INCHES" "GtkMetricType")
(CINT "GTK_CENTIMETERS" "GtkMetricType")
(CINT "GTK_MOVEMENT_LOGICAL_POSITIONS" "GtkMovementStep")
(CINT "GTK_MOVEMENT_VISUAL_POSITIONS" "GtkMovementStep")
(CINT "GTK_MOVEMENT_WORDS" "GtkMovementStep")
(CINT "GTK_MOVEMENT_DISPLAY_LINES" "GtkMovementStep")
(CINT "GTK_MOVEMENT_DISPLAY_LINE_ENDS" "GtkMovementStep")
(CINT "GTK_MOVEMENT_PARAGRAPHS" "GtkMovementStep")
(CINT "GTK_MOVEMENT_PARAGRAPH_ENDS" "GtkMovementStep")
(CINT "GTK_MOVEMENT_PAGES" "GtkMovementStep")
(CINT "GTK_MOVEMENT_BUFFER_ENDS" "GtkMovementStep")
(CINT "GTK_ORIENTATION_HORIZONTAL" "GtkOrientation")
(CINT "GTK_ORIENTATION_VERTICAL" "GtkOrientation")
(CINT "GTK_CORNER_TOP_LEFT" "GtkCornerType")
(CINT "GTK_CORNER_BOTTOM_LEFT" "GtkCornerType")
(CINT "GTK_CORNER_TOP_RIGHT" "GtkCornerType")
(CINT "GTK_CORNER_BOTTOM_RIGHT" "GtkCornerType")
(CINT "GTK_PACK_START" "GtkPackType")
(CINT "GTK_PACK_END" "GtkPackType")
(CINT "GTK_PATH_PRIO_LOWEST" "GtkPathPriorityType")
(CINT "GTK_PATH_PRIO_GTK")
(CINT "GTK_PATH_PRIO_APPLICATION" "GtkPathPriorityType")
(CINT "GTK_PATH_PRIO_THEME" "GtkPathPriorityType")
(CINT "GTK_PATH_PRIO_RC" "GtkPathPriorityType")
(CINT "GTK_PATH_PRIO_HIGHEST" "GtkPathPriorityType")
(CINT "GTK_PATH_PRIO_MASK")
(CINT "GTK_PATH_WIDGET" "GtkPathType")
(CINT "GTK_PATH_WIDGET_CLASS" "GtkPathType")
(CINT "GTK_PATH_CLASS" "GtkPathType")
(CINT "GTK_POLICY_ALWAYS" "GtkPolicyType")
(CINT "GTK_POLICY_AUTOMATIC" "GtkPolicyType")
(CINT "GTK_POLICY_NEVER" "GtkPolicyType")
(CINT "GTK_POS_LEFT" "GtkPositionType")
(CINT "GTK_POS_RIGHT" "GtkPositionType")
(CINT "GTK_POS_TOP" "GtkPositionType")
(CINT "GTK_POS_BOTTOM" "GtkPositionType")
(CINT "GTK_RELIEF_NORMAL" "GtkReliefStyle")
(CINT "GTK_RELIEF_HALF" "GtkReliefStyle")
(CINT "GTK_RELIEF_NONE" "GtkReliefStyle")
(CINT "GTK_RESIZE_PARENT" "GtkResizeMode")
(CINT "GTK_RESIZE_QUEUE" "GtkResizeMode")
(CINT "GTK_RESIZE_IMMEDIATE" "GtkResizeMode")
(CINT "GTK_SCROLL_NONE" "GtkScrollType")
(CINT "GTK_SCROLL_JUMP" "GtkScrollType")
(CINT "GTK_SCROLL_STEP_BACKWARD" "GtkScrollType")
(CINT "GTK_SCROLL_STEP_FORWARD" "GtkScrollType")
(CINT "GTK_SCROLL_PAGE_BACKWARD" "GtkScrollType")
(CINT "GTK_SCROLL_PAGE_FORWARD" "GtkScrollType")
(CINT "GTK_SCROLL_STEP_UP" "GtkScrollType")
(CINT "GTK_SCROLL_STEP_DOWN" "GtkScrollType")
(CINT "GTK_SCROLL_PAGE_UP" "GtkScrollType")
(CINT "GTK_SCROLL_PAGE_DOWN" "GtkScrollType")
(CINT "GTK_SCROLL_STEP_LEFT" "GtkScrollType")
(CINT "GTK_SCROLL_STEP_RIGHT" "GtkScrollType")
(CINT "GTK_SCROLL_PAGE_LEFT" "GtkScrollType")
(CINT "GTK_SCROLL_PAGE_RIGHT" "GtkScrollType")
(CINT "GTK_SCROLL_START" "GtkScrollType")
(CINT "GTK_SCROLL_END" "GtkScrollType")
(CINT "GTK_SELECTION_NONE" "GtkSelectionMode")
(CINT "GTK_SELECTION_SINGLE" "GtkSelectionMode")
(CINT "GTK_SELECTION_BROWSE" "GtkSelectionMode")
(CINT "GTK_SELECTION_MULTIPLE" "GtkSelectionMode")
(CINT "GTK_SELECTION_EXTENDED" "GtkSelectionMode")
(CINT "GTK_SHADOW_NONE" "GtkShadowType")
(CINT "GTK_SHADOW_IN" "GtkShadowType")
(CINT "GTK_SHADOW_OUT" "GtkShadowType")
(CINT "GTK_SHADOW_ETCHED_IN" "GtkShadowType")
(CINT "GTK_SHADOW_ETCHED_OUT" "GtkShadowType")
(CINT "GTK_STATE_NORMAL" "GtkStateType")
(CINT "GTK_STATE_ACTIVE" "GtkStateType")
(CINT "GTK_STATE_PRELIGHT" "GtkStateType")
(CINT "GTK_STATE_SELECTED" "GtkStateType")
(CINT "GTK_STATE_INSENSITIVE" "GtkStateType")
(CINT "GTK_TOOLBAR_ICONS" "GtkToolbarStyle")
(CINT "GTK_TOOLBAR_TEXT" "GtkToolbarStyle")
(CINT "GTK_TOOLBAR_BOTH" "GtkToolbarStyle")
(CINT "GTK_TOOLBAR_BOTH_HORIZ" "GtkToolbarStyle")
(CINT "GTK_UPDATE_CONTINUOUS" "GtkUpdateType")
(CINT "GTK_UPDATE_DISCONTINUOUS" "GtkUpdateType")
(CINT "GTK_UPDATE_DELAYED" "GtkUpdateType")
(CINT "GTK_VISIBILITY_NONE" "GtkVisibility")
(CINT "GTK_VISIBILITY_PARTIAL" "GtkVisibility")
(CINT "GTK_VISIBILITY_FULL" "GtkVisibility")
(CINT "GTK_WIN_POS_NONE" "GtkWindowPosition")
(CINT "GTK_WIN_POS_CENTER" "GtkWindowPosition")
(CINT "GTK_WIN_POS_MOUSE" "GtkWindowPosition")
(CINT "GTK_WIN_POS_CENTER_ALWAYS" "GtkWindowPosition")
(CINT "GTK_WIN_POS_CENTER_ON_PARENT" "GtkWindowPosition")
(CINT "GTK_WINDOW_TOPLEVEL" "GtkWindowType")
(CINT "GTK_WINDOW_POPUP" "GtkWindowType")
(CINT "GTK_WRAP_NONE" "GtkWrapMode")
(CINT "GTK_WRAP_CHAR" "GtkWrapMode")
(CINT "GTK_WRAP_WORD" "GtkWrapMode")
(CINT "GTK_SORT_ASCENDING" "GtkSortMode")
(CINT "GTK_SORT_DESCENDING" "GtkSortMode")
(CCAST "GTK_EVENT_BOX(obj)" "GtkEventBox*")
;(cdef "GTK_EVENT_BOX_CLASS(klass)")
(CCHK "GTK_IS_EVENT_BOX(obj)" "GtkEventBox*")
;(cdef1 "GTK_IS_EVENT_BOX_CLASS(klass)")
;(cdef "GTK_EVENT_BOX_GET_CLASS(obj)")
(CFNC "GtkType gtk_event_box_get_type void")
(CFNC "GtkWidget* gtk_event_box_new void")
(CCAST "GTK_FILE_SELECTION(obj)" "GtkFileSelection*")
;(cdef "GTK_FILE_SELECTION_CLASS(klass)")
(CCHK "GTK_IS_FILE_SELECTION(obj)" "GtkFileSelection*")
;(cdef1 "GTK_IS_FILE_SELECTION_CLASS(klass)")
;(cdef "GTK_FILE_SELECTION_GET_CLASS(obj)")
(CFNC "GtkType gtk_file_selection_get_type void")
(CFNC "GtkWidget* gtk_file_selection_new gchar* title")
(CFNC "void gtk_file_selection_set_filename GtkFileSelection* filesel gchar* filename")
(CFNC "gchar* gtk_file_selection_get_filename GtkFileSelection* filesel")
(CFNC "void gtk_file_selection_complete GtkFileSelection* filesel gchar* pattern")
(CFNC "void gtk_file_selection_show_fileop_buttons GtkFileSelection* filesel")
(CFNC "void gtk_file_selection_hide_fileop_buttons GtkFileSelection* filesel")
;;; added 1.3.15:
(CFNC "gchar** gtk_file_selection_get_selections GtkFileSelection* filesel")
(CFNC "void gtk_file_selection_set_select_multiple GtkFileSelection* filesel gboolean select_multiple")
(CFNC "gboolean gtk_file_selection_get_select_multiple GtkFileSelection* filesel")
;;;
;;; added 2.0.0
(CLNG "GTK_TYPE_ICON_SET")
(CLNG "GTK_TYPE_ICON_SOURCE")
(CLNG "GTK_TYPE_SELECTION_DATA")
(CLNG "GTK_TYPE_BORDER")
(CLNG "GTK_TYPE_TREE_ITER")
(CLNG "GTK_TYPE_TREE_PATH")
(CLNG "GTK_TYPE_IDENTIFIER")
(CLNG "GTK_TYPE_REQUISITION")
(CFNC "GType gtk_icon_set_get_type void")
(CFNC "GType gtk_icon_source_get_type void")
(CFNC "GType gtk_selection_data_get_type void")
(CFNC "GType gtk_border_get_type void")
(CFNC "GType gtk_tree_path_get_type void")
(CFNC "GType gtk_tree_iter_get_type void")
(CFNC "GType gtk_identifier_get_type void")
(CFNC "GType gtk_requisition_get_type void")
;;;;
(CCAST "GTK_FIXED(obj)" "GtkFixed*")
;(cdef "GTK_FIXED_CLASS(klass)")
(CCHK "GTK_IS_FIXED(obj)" "GtkFixed*")
;(cdef1 "GTK_IS_FIXED_CLASS(klass)")
;(cdef "GTK_FIXED_GET_CLASS(obj)")
(CFNC "GtkType gtk_fixed_get_type void")
(CFNC "GtkWidget* gtk_fixed_new void")
(CFNC "void gtk_fixed_put GtkFixed* fixed GtkWidget* widget gint x gint y")
(CFNC "void gtk_fixed_move GtkFixed* fixed GtkWidget* widget gint x gint y")
(CFNC "void gtk_fixed_set_has_window GtkFixed* fixed gboolean has_window")
(CFNC "gboolean gtk_fixed_get_has_window GtkFixed* fixed")
(CCAST "GTK_FONT_SELECTION(obj)" "GtkFontSelection*")
;(cdef "GTK_FONT_SELECTION_CLASS(klass)")
(CCHK "GTK_IS_FONT_SELECTION(obj)" "GtkFontSelection*")
;(cdef1 "GTK_IS_FONT_SELECTION_CLASS(klass)")
;(cdef "GTK_FONT_SELECTION_GET_CLASS(obj)")
(CCAST "GTK_FONT_SELECTION_DIALOG(obj)" "GtkFontSelectionDialog*")
;(cdef "GTK_FONT_SELECTION_DIALOG_CLASS(klass)")
(CCHK "GTK_IS_FONT_SELECTION_DIALOG(obj)" "GtkFontSelectionDialog*")
;(cdef1 "GTK_IS_FONT_SELECTION_DIALOG_CLASS(klass)")
;(cdef "GTK_FONT_SELECTION_DIALOG_GET_CLASS(obj)")
(CFNC "GtkType gtk_font_selection_get_type void")
(CFNC "GtkWidget* gtk_font_selection_new void")
(CFNC "gchar* gtk_font_selection_get_font_name GtkFontSelection* fontsel")
(CFNC "gboolean gtk_font_selection_set_font_name GtkFontSelection* fontsel gchar* fontname")
(CFNC "gchar* gtk_font_selection_get_preview_text GtkFontSelection* fontsel")
(CFNC "void gtk_font_selection_set_preview_text GtkFontSelection* fontsel gchar* text")
(CFNC "GtkType gtk_font_selection_dialog_get_type void")
(CFNC "GtkWidget* gtk_font_selection_dialog_new gchar* title")
(CFNC "gchar* gtk_font_selection_dialog_get_font_name GtkFontSelectionDialog* fsd")
(CFNC "gboolean gtk_font_selection_dialog_set_font_name GtkFontSelectionDialog* fsd gchar* fontname")
(CFNC "gchar* gtk_font_selection_dialog_get_preview_text GtkFontSelectionDialog* fsd")
(CFNC "void gtk_font_selection_dialog_set_preview_text GtkFontSelectionDialog* fsd gchar* text")
(CCAST "GTK_FRAME(obj)" "GtkFrame*")
;(cdef "GTK_FRAME_CLASS(klass)")
(CCHK "GTK_IS_FRAME(obj)" "GtkFrame*")
;(cdef1 "GTK_IS_FRAME_CLASS(klass)")
;(cdef "GTK_FRAME_GET_CLASS(obj)")
(CFNC "GtkType gtk_frame_get_type void")
(CFNC "GtkWidget* gtk_frame_new gchar* label")
(CFNC "void gtk_frame_set_label GtkFrame* frame gchar* label")
(CFNC "gchar* gtk_frame_get_label GtkFrame* frame")
(CFNC "void gtk_frame_set_label_widget GtkFrame* frame GtkWidget* label_widget")
(CFNC "GtkWidget* gtk_frame_get_label_widget GtkFrame* frame")
(CFNC "void gtk_frame_set_label_align GtkFrame* frame gfloat xalign gfloat yalign")
(CFNC "void gtk_frame_get_label_align GtkFrame* frame gfloat* [xalign] gfloat* [yalign]")
(CFNC "void gtk_frame_set_shadow_type GtkFrame* frame GtkShadowType type")
(CFNC "GtkShadowType gtk_frame_get_shadow_type GtkFrame* frame")
(CCAST "GTK_GAMMA_CURVE(obj)" "GtkGammaCurve*")
;(cdef "GTK_GAMMA_CURVE_CLASS(klass)")
(CCHK "GTK_IS_GAMMA_CURVE(obj)" "GtkGammaCurve*")
;(cdef1 "GTK_IS_GAMMA_CURVE_CLASS(klass)")
;(cdef "GTK_GAMMA_CURVE_GET_CLASS(obj)")
(CFNC "GtkType gtk_gamma_curve_get_type void")
(CFNC "GtkWidget* gtk_gamma_curve_new void")
(CFNC "GdkGC* gtk_gc_get gint depth GdkColormap* colormap GdkGCValues* values GdkGCValuesMask values_mask")
(CFNC "void gtk_gc_release GdkGC* gc")
(CCAST "GTK_HANDLE_BOX(obj)" "GtkHandleBox*")
;(cdef "GTK_HANDLE_BOX_CLASS(klass)")
(CCHK "GTK_IS_HANDLE_BOX(obj)" "GtkHandleBox*")
;(cdef1 "GTK_IS_HANDLE_BOX_CLASS(klass)")
;(cdef "GTK_HANDLE_BOX_GET_CLASS(obj)")
(CFNC "GtkType gtk_handle_box_get_type void")
(CFNC "GtkWidget* gtk_handle_box_new void")
(CFNC "void gtk_handle_box_set_shadow_type GtkHandleBox* handle_box GtkShadowType type")
(CFNC "GtkShadowType gtk_handle_box_get_shadow_type GtkHandleBox* handle_box")
(CFNC "void gtk_handle_box_set_handle_position GtkHandleBox* handle_box GtkPositionType position")
(CFNC "GtkPositionType gtk_handle_box_get_handle_position GtkHandleBox* handle_box")
(CFNC "void gtk_handle_box_set_snap_edge GtkHandleBox* handle_box GtkPositionType edge")
(CFNC "GtkPositionType gtk_handle_box_get_snap_edge GtkHandleBox* handle_box")
(CCAST "GTK_HBUTTON_BOX(obj)" "GtkHButtonBox*")
;(cdef "GTK_HBUTTON_BOX_CLASS(klass)")
(CCHK "GTK_IS_HBUTTON_BOX(obj)" "GtkHButtonBox*")
;(cdef1 "GTK_IS_HBUTTON_BOX_CLASS(klass)")
;(cdef "GTK_HBUTTON_BOX_GET_CLASS(obj)")
(CFNC "GtkType gtk_hbutton_box_get_type void")
(CFNC "GtkWidget* gtk_hbutton_box_new void")
(CCAST "GTK_HBOX(obj)" "GtkHBox*")
;(cdef "GTK_HBOX_CLASS(klass)")
(CCHK "GTK_IS_HBOX(obj)" "GtkHBox*")
;(cdef1 "GTK_IS_HBOX_CLASS(klass)")
;(cdef "GTK_HBOX_GET_CLASS(obj)")
(CFNC "GtkType gtk_hbox_get_type void")
(CFNC "GtkWidget* gtk_hbox_new gboolean homogeneous gint spacing")
(CCAST "GTK_HPANED(obj)" "GtkHPaned*")
;(cdef "GTK_HPANED_CLASS(klass)")
(CCHK "GTK_IS_HPANED(obj)" "GtkHPaned*")
;(cdef1 "GTK_IS_HPANED_CLASS(klass)")
;(cdef "GTK_HPANED_GET_CLASS(obj)")
(CFNC "GtkType gtk_hpaned_get_type void")
(CFNC "GtkWidget* gtk_hpaned_new void")
(CCAST "GTK_HRULER(obj)" "GtkHRuler*")
;(cdef "GTK_HRULER_CLASS(klass)")
(CCHK "GTK_IS_HRULER(obj)" "GtkHRuler*")
;(cdef1 "GTK_IS_HRULER_CLASS(klass)")
;(cdef "GTK_HRULER_GET_CLASS(obj)")
(CFNC "GtkType gtk_hruler_get_type void")
(CFNC "GtkWidget* gtk_hruler_new void")
(CCAST "GTK_HSCALE(obj)" "GtkHScale*")
;(cdef "GTK_HSCALE_CLASS(klass)")
(CCHK "GTK_IS_HSCALE(obj)" "GtkHScale*")
;(cdef1 "GTK_IS_HSCALE_CLASS(klass)")
;(cdef "GTK_HSCALE_GET_CLASS(obj)")
(CFNC "GtkType gtk_hscale_get_type void")
(CFNC "GtkWidget* gtk_hscale_new GtkAdjustment* adjustment")
(CFNC "GtkWidget* gtk_hscale_new_with_range gdouble min gdouble max gdouble step")
(CCAST "GTK_HSCROLLBAR(obj)" "GtkHScrollbar*")
;(cdef "GTK_HSCROLLBAR_CLASS(klass)")
(CCHK "GTK_IS_HSCROLLBAR(obj)" "GtkHScrollbar*")
;(cdef1 "GTK_IS_HSCROLLBAR_CLASS(klass)")
;(cdef "GTK_HSCROLLBAR_GET_CLASS(obj)")
(CFNC "GtkType gtk_hscrollbar_get_type void")
(CFNC "GtkWidget* gtk_hscrollbar_new GtkAdjustment* adjustment")
(CCAST "GTK_HSEPARATOR(obj)" "GtkHSeparator*")
;(cdef "GTK_HSEPARATOR_CLASS(klass)")
(CCHK "GTK_IS_HSEPARATOR(obj)" "GtkHSeparator*")
;(cdef1 "GTK_IS_HSEPARATOR_CLASS(klass)")
;(cdef "GTK_HSEPARATOR_GET_CLASS(obj)")
(CFNC "GtkType gtk_hseparator_get_type void")
(CFNC "GtkWidget* gtk_hseparator_new void")
(CCAST "GTK_ICON_FACTORY(object)" "GtkIconFactory*")
;(cdef "GTK_ICON_FACTORY_CLASS(klass)")
(CCHK "GTK_IS_ICON_FACTORY(object)" "GtkIconFactory*")
;(cdef1 "GTK_IS_ICON_FACTORY_CLASS(klass)")
;(cdef "GTK_ICON_FACTORY_GET_CLASS(obj)")
(CFNC "GType gtk_icon_factory_get_type void")
(CFNC "GtkIconFactory* gtk_icon_factory_new void")
(CFNC "void gtk_icon_factory_add GtkIconFactory* factory gchar* stock_id GtkIconSet* icon_set")
(CFNC "GtkIconSet* gtk_icon_factory_lookup GtkIconFactory* factory gchar* stock_id")
(CFNC "void gtk_icon_factory_add_default GtkIconFactory* factory")
(CFNC "void gtk_icon_factory_remove_default GtkIconFactory* factory")
(CFNC "GtkIconSet* gtk_icon_factory_lookup_default gchar* stock_id")
(CFNC "gboolean gtk_icon_size_lookup GtkIconSize size gint* [width] gint* [height]")
(CFNC "GtkIconSize gtk_icon_size_register gchar* name gint width gint height")
(CFNC "void gtk_icon_size_register_alias gchar* alias GtkIconSize target")
(CFNC "GtkIconSize gtk_icon_size_from_name gchar* name")
(CFNC "gchar* gtk_icon_size_get_name GtkIconSize size")
(CFNC "GtkIconSet* gtk_icon_set_new void")
(CFNC "GtkIconSet* gtk_icon_set_new_from_pixbuf GdkPixbuf* pixbuf")
(CFNC "GtkIconSet* gtk_icon_set_ref GtkIconSet* icon_set")
(CFNC "void gtk_icon_set_unref GtkIconSet* icon_set")
(CFNC "GtkIconSet* gtk_icon_set_copy GtkIconSet* icon_set")
(CFNC "GdkPixbuf* gtk_icon_set_render_icon GtkIconSet* icon_set GtkStyle* @style GtkTextDirection direction GtkStateType state GtkIconSize size GtkWidget* @widget char* detail")
(CFNC "void gtk_icon_set_add_source GtkIconSet* icon_set GtkIconSource* source")
(CFNC "void gtk_icon_set_get_sizes GtkIconSet* icon_set GtkIconSize** [sizes] gint* [n_sizes]")
(CFNC "GtkIconSource* gtk_icon_source_new void")
(CFNC "GtkIconSource* gtk_icon_source_copy GtkIconSource* source")
(CFNC "void gtk_icon_source_free GtkIconSource* source")
(CFNC "void gtk_icon_source_set_filename GtkIconSource* source gchar* filename")
(CFNC "void gtk_icon_source_set_pixbuf GtkIconSource* source GdkPixbuf* pixbuf")
(CFNC "gchar* gtk_icon_source_get_filename GtkIconSource* source")
(CFNC "GdkPixbuf* gtk_icon_source_get_pixbuf GtkIconSource* source")
(CFNC "void gtk_icon_source_set_direction_wildcarded GtkIconSource* source gboolean setting")
(CFNC "void gtk_icon_source_set_state_wildcarded GtkIconSource* source gboolean setting")
(CFNC "void gtk_icon_source_set_size_wildcarded GtkIconSource* source gboolean setting")
(CFNC "gboolean gtk_icon_source_get_size_wildcarded GtkIconSource* source")
(CFNC "gboolean gtk_icon_source_get_state_wildcarded GtkIconSource* source")
(CFNC "gboolean gtk_icon_source_get_direction_wildcarded GtkIconSource* source")
(CFNC "void gtk_icon_source_set_direction GtkIconSource* source GtkTextDirection direction")
(CFNC "void gtk_icon_source_set_state GtkIconSource* source GtkStateType state")
(CFNC "void gtk_icon_source_set_size GtkIconSource* source GtkIconSize size")
(CFNC "GtkTextDirection gtk_icon_source_get_direction GtkIconSource* source")
(CFNC "GtkStateType gtk_icon_source_get_state GtkIconSource* source")
(CFNC "GtkIconSize gtk_icon_source_get_size GtkIconSource* source")
(CCAST "GTK_IMAGE(obj)" "GtkImage*")
;(cdef "GTK_IMAGE_CLASS(klass)")
(CCHK "GTK_IS_IMAGE(obj)" "GtkImage*")
;(cdef1 "GTK_IS_IMAGE_CLASS(klass)")
;(cdef "GTK_IMAGE_GET_CLASS(obj)")
(CINT "GTK_IMAGE_EMPTY" "GtkImageType")
(CINT "GTK_IMAGE_PIXMAP" "GtkImageType")
(CINT "GTK_IMAGE_IMAGE" "GtkImageType")
(CINT "GTK_IMAGE_PIXBUF" "GtkImageType")
(CINT "GTK_IMAGE_STOCK" "GtkImageType")
(CINT "GTK_IMAGE_ICON_SET" "GtkImageType")
(CINT "GTK_IMAGE_ANIMATION" "GtkImageType")
(CFNC "GtkType gtk_image_get_type void")
(CFNC "GtkWidget* gtk_image_new void")
(CFNC "GtkWidget* gtk_image_new_from_pixmap GdkPixmap* @pixmap GdkBitmap* @mask")
(CFNC "GtkWidget* gtk_image_new_from_image GdkImage* @image GdkBitmap* @mask")
(CFNC "GtkWidget* gtk_image_new_from_file gchar* filename")
(CFNC "GtkWidget* gtk_image_new_from_pixbuf GdkPixbuf* @pixbuf")
(CFNC "GtkWidget* gtk_image_new_from_stock gchar* stock_id GtkIconSize size")
(CFNC "GtkWidget* gtk_image_new_from_icon_set GtkIconSet* icon_set GtkIconSize size")
(CFNC "GtkWidget* gtk_image_new_from_animation GdkPixbufAnimation* animation")
(CFNC "void gtk_image_set_from_pixmap GtkImage* image GdkPixmap* @pixmap GdkBitmap* @mask")
(CFNC "void gtk_image_set_from_image GtkImage* image GdkImage* @gdk_image GdkBitmap* @mask")
(CFNC "void gtk_image_set_from_file GtkImage* image gchar* filename")
(CFNC "void gtk_image_set_from_pixbuf GtkImage* image GdkPixbuf* @pixbuf")
(CFNC "void gtk_image_set_from_stock GtkImage* image gchar* stock_id GtkIconSize size")
(CFNC "void gtk_image_set_from_icon_set GtkImage* image GtkIconSet* icon_set GtkIconSize size")
(CFNC "void gtk_image_set_from_animation GtkImage* image GdkPixbufAnimation* @animation")
(CFNC "GtkImageType gtk_image_get_storage_type GtkImage* image")
(CFNC "void gtk_image_get_pixmap GtkImage* image GdkPixmap** [pixmap] GdkBitmap** [mask]")
(CFNC "void gtk_image_get_image GtkImage* image GdkImage** [gdk_image] GdkBitmap** [mask]")
(CFNC "GdkPixbuf* gtk_image_get_pixbuf GtkImage* image")
(CFNC "void gtk_image_get_stock GtkImage* image gchar** [stock_id] GtkIconSize* [size]")
(CFNC "void gtk_image_get_icon_set GtkImage* image GtkIconSet** [icon_set] GtkIconSize* [size]")
(CFNC "GdkPixbufAnimation* gtk_image_get_animation GtkImage* image")
(CCAST "GTK_IMAGE_MENU_ITEM(obj)" "GtkImageMenuItem*")
;(cdef "GTK_IMAGE_MENU_ITEM_CLASS(klass)")
(CCHK "GTK_IS_IMAGE_MENU_ITEM(obj)" "GtkImageMenuItem*")
;(cdef1 "GTK_IS_IMAGE_MENU_ITEM_CLASS(klass)")
;(cdef "GTK_IMAGE_MENU_ITEM_GET_CLASS(obj)")
(CFNC "GtkType gtk_image_menu_item_get_type void")
(CFNC "GtkWidget* gtk_image_menu_item_new void")
(CFNC "GtkWidget* gtk_image_menu_item_new_with_label gchar* label")
(CFNC "GtkWidget* gtk_image_menu_item_new_with_mnemonic gchar* label")
(CFNC "GtkWidget* gtk_image_menu_item_new_from_stock gchar* stock_id GtkAccelGroup* accel_group")
(CFNC "void gtk_image_menu_item_set_image GtkImageMenuItem* image_menu_item GtkWidget* image")
(CFNC "GtkWidget* gtk_image_menu_item_get_image GtkImageMenuItem* image_menu_item")
(CCAST "GTK_IM_CONTEXT(obj)" "GtkIMContext*")
;(cdef "GTK_IM_CONTEXT_CLASS(klass)")
(CCHK "GTK_IS_IM_CONTEXT(obj)" "GtkIMContext*")
;(cdef1 "GTK_IS_IM_CONTEXT_CLASS(klass)")
;(cdef "GTK_IM_CONTEXT_GET_CLASS(obj)")
(CFNC "GtkType gtk_im_context_get_type void")
(CFNC "void gtk_im_context_set_client_window GtkIMContext* context GdkWindow* @window")
(CFNC "void gtk_im_context_get_preedit_string GtkIMContext* context gchar** [str] PangoAttrList** [attrs] gint* [cursor_pos]")
(CFNC "gboolean gtk_im_context_filter_keypress GtkIMContext* context GdkEventKey* event")
(CFNC "void gtk_im_context_focus_in GtkIMContext* context")
(CFNC "void gtk_im_context_focus_out GtkIMContext* context")
(CFNC "void gtk_im_context_reset GtkIMContext* context")
(CFNC "void gtk_im_context_set_cursor_location GtkIMContext* context GdkRectangle* area")
(CFNC "void gtk_im_context_set_use_preedit GtkIMContext* context gboolean use_preedit")
(CFNC "void gtk_im_context_set_surrounding GtkIMContext* context gchar* text gint len gint cursor_index")
(CFNC "gboolean gtk_im_context_get_surrounding GtkIMContext* context gchar** [text] gint* [cursor_index]")
(CFNC "gboolean gtk_im_context_delete_surrounding GtkIMContext* context gint offset gint n_chars")
(CCAST "GTK_IM_CONTEXT_SIMPLE(obj)" "GtkIMContextSimple*")
;(cdef "GTK_IM_CONTEXT_SIMPLE_CLASS(klass)")
(CCHK "GTK_IS_IM_CONTEXT_SIMPLE(obj)" "GtkIMContextSimple*")
;(cdef1 "GTK_IS_IM_CONTEXT_SIMPLE_CLASS(klass)")
;(cdef "GTK_IM_CONTEXT_SIMPLE_GET_CLASS(obj)")
(CINT "GTK_MAX_COMPOSE_LEN")
(CFNC "GtkType gtk_im_context_simple_get_type void")
(CFNC "GtkIMContext* gtk_im_context_simple_new void")
(CFNC "void gtk_im_context_simple_add_table GtkIMContextSimple* context_simple guint16* data gint max_seq_len gint n_seqs")
(CCAST "GTK_IM_MULTICONTEXT(obj)" "GtkIMMulticontext*")
;(cdef "GTK_IM_MULTICONTEXT_CLASS(klass)")
(CCHK "GTK_IS_IM_MULTICONTEXT(obj)" "GtkIMMulticontext*")
;(cdef1 "GTK_IS_IM_MULTICONTEXT_CLASS(klass)")
;(cdef "GTK_IM_MULTICONTEXT_GET_CLASS(obj)")
(CFNC "GtkType gtk_im_multicontext_get_type void")
(CFNC "GtkIMContext* gtk_im_multicontext_new void")
(CFNC "void gtk_im_multicontext_append_menuitems GtkIMMulticontext* context GtkMenuShell* menushell")
(CCAST "GTK_INPUT_DIALOG(obj)" "GtkInputDialog*")
;(cdef "GTK_INPUT_DIALOG_CLASS(klass)")
(CCHK "GTK_IS_INPUT_DIALOG(obj)" "GtkInputDialog*")
;(cdef1 "GTK_IS_INPUT_DIALOG_CLASS(klass)")
;(cdef "GTK_INPUT_DIALOG_GET_CLASS(obj)")
(CFNC "GtkType gtk_input_dialog_get_type void")
(CFNC "GtkWidget* gtk_input_dialog_new void")
(CCAST "GTK_INVISIBLE(obj)" "GtkInvisible*")
;(cdef "GTK_INVISIBLE_CLASS(klass)")
(CCHK "GTK_IS_INVISIBLE(obj)" "GtkInvisible*")
;(cdef1 "GTK_IS_INVISIBLE_CLASS(klass)")
;(cdef "GTK_INVISIBLE_GET_CLASS(obj)")
(CFNC "GtkType gtk_invisible_get_type void")
(CFNC "GtkWidget* gtk_invisible_new void")
(CCAST "GTK_ITEM_FACTORY(object)" "GtkItemFactory*")
;(cdef "GTK_ITEM_FACTORY_CLASS(klass)")
(CCHK "GTK_IS_ITEM_FACTORY(object)" "GtkItemFactory*")
;(cdef1 "GTK_IS_ITEM_FACTORY_CLASS(klass)")
;(cdef "GTK_ITEM_FACTORY_GET_CLASS(obj)")
(CFNC "GtkType gtk_item_factory_get_type void")
(CFNC "GtkItemFactory* gtk_item_factory_new GtkType container_type gchar* path GtkAccelGroup* @accel_group")
(CFNC "void gtk_item_factory_construct GtkItemFactory* ifactory GtkType container_type gchar* path GtkAccelGroup* @accel_group")
(CFNC "void gtk_item_factory_add_foreign GtkWidget* accel_widget gchar* full_path GtkAccelGroup* accel_group guint keyval GdkModifierType modifiers")
(CFNC "GtkItemFactory* gtk_item_factory_from_widget GtkWidget* widget")
(CFNC "gchar* gtk_item_factory_path_from_widget GtkWidget* widget")
(CFNC "GtkWidget* gtk_item_factory_get_item GtkItemFactory* ifactory gchar* path")
(CFNC "GtkWidget* gtk_item_factory_get_widget GtkItemFactory* ifactory gchar* path")
(CFNC "GtkWidget* gtk_item_factory_get_widget_by_action GtkItemFactory* ifactory guint action")
(CFNC "GtkWidget* gtk_item_factory_get_item_by_action GtkItemFactory* ifactory guint action")
(CFNC "void gtk_item_factory_create_item GtkItemFactory* ifactory GtkItemFactoryEntry* entry gpointer callback_data guint callback_type")
(CFNC "void gtk_item_factory_create_items GtkItemFactory* ifactory guint n_entries GtkItemFactoryEntry* entries gpointer callback_data")
(CFNC "void gtk_item_factory_delete_item GtkItemFactory* ifactory gchar* path")
(CFNC "void gtk_item_factory_delete_entry GtkItemFactory* ifactory GtkItemFactoryEntry* entry")
(CFNC "void gtk_item_factory_delete_entries GtkItemFactory* ifactory guint n_entries GtkItemFactoryEntry* entries")
(CFNC "void gtk_item_factory_popup GtkItemFactory* ifactory guint x guint y guint mouse_button guint32 time")
(CFNC "void gtk_item_factory_popup_with_data GtkItemFactory* ifactory gpointer func_data GtkDestroyNotify destroy guint x guint y guint mouse_button guint32 time")
(CFNC "gpointer gtk_item_factory_popup_data GtkItemFactory* ifactory")
(CFNC "gpointer gtk_item_factory_popup_data_from_widget GtkWidget* widget")
(CFNC "void gtk_item_factory_set_translate_func GtkItemFactory* ifactory GtkTranslateFunc func lambda_data func_data GtkDestroyNotify notify")
(CCAST "GTK_ITEM(obj)" "GtkItem*")
;(cdef "GTK_ITEM_CLASS(klass)")
(CCHK "GTK_IS_ITEM(obj)" "GtkItem*")
;(cdef1 "GTK_IS_ITEM_CLASS(klass)")
;(cdef "GTK_ITEM_GET_CLASS(obj)")
(CFNC "GtkType gtk_item_get_type void")
(CFNC "void gtk_item_select GtkItem* item")
(CFNC "void gtk_item_deselect GtkItem* item")
(CFNC "void gtk_item_toggle GtkItem* item")
(CCAST "GTK_LABEL(obj)" "GtkLabel*")
;(cdef "GTK_LABEL_CLASS(klass)")
(CCHK "GTK_IS_LABEL(obj)" "GtkLabel*")
;(cdef1 "GTK_IS_LABEL_CLASS(klass)")
;(cdef "GTK_LABEL_GET_CLASS(obj)")
(CFNC "GtkType gtk_label_get_type void")
(CFNC "GtkWidget* gtk_label_new char* str")
(CFNC "GtkWidget* gtk_label_new_with_mnemonic char* str")
(CFNC "void gtk_label_set_text GtkLabel* label char* str")
(CFNC "gchar* gtk_label_get_text GtkLabel* label")
(CFNC "void gtk_label_set_attributes GtkLabel* label PangoAttrList* attrs")
(CFNC "PangoAttrList* gtk_label_get_attributes GtkLabel* label")
(CFNC "void gtk_label_set_label GtkLabel* label gchar* str")
(CFNC "gchar* gtk_label_get_label GtkLabel* label")
(CFNC "void gtk_label_set_markup GtkLabel* label gchar* str")
(CFNC "void gtk_label_set_use_markup GtkLabel* label gboolean setting")
(CFNC "gboolean gtk_label_get_use_markup GtkLabel* label")
(CFNC "void gtk_label_set_use_underline GtkLabel* label gboolean setting")
(CFNC "gboolean gtk_label_get_use_underline GtkLabel* label")
(CFNC "void gtk_label_set_markup_with_mnemonic GtkLabel* label gchar* str")
(CFNC "guint gtk_label_get_mnemonic_keyval GtkLabel* label")
(CFNC "void gtk_label_set_mnemonic_widget GtkLabel* label GtkWidget* widget")
(CFNC "GtkWidget* gtk_label_get_mnemonic_widget GtkLabel* label")
(CFNC "void gtk_label_set_text_with_mnemonic GtkLabel* label gchar* str")
(CFNC "void gtk_label_set_justify GtkLabel* label GtkJustification jtype")
(CFNC "GtkJustification gtk_label_get_justify GtkLabel* label")
(CFNC "void gtk_label_set_pattern GtkLabel* label gchar* pattern")
(CFNC "void gtk_label_set_line_wrap GtkLabel* label gboolean wrap")
(CFNC "gboolean gtk_label_get_line_wrap GtkLabel* label")
(CFNC "void gtk_label_set_selectable GtkLabel* label gboolean setting")
(CFNC "gboolean gtk_label_get_selectable GtkLabel* label")
(CFNC "void gtk_label_select_region GtkLabel* label gint start_offset gint end_offset")
(CFNC "gboolean gtk_label_get_selection_bounds GtkLabel* label gint* [start] gint* [end]")
(CFNC "PangoLayout* gtk_label_get_layout GtkLabel* label")
(CFNC "void gtk_label_get_layout_offsets GtkLabel* label gint* [x] gint* [y]")
(CCAST "GTK_LAYOUT(obj)" "GtkLayout*")
;(cdef "GTK_LAYOUT_CLASS(klass)")
(CCHK "GTK_IS_LAYOUT(obj)" "GtkLayout*")
;(cdef1 "GTK_IS_LAYOUT_CLASS(klass)")
;(cdef "GTK_LAYOUT_GET_CLASS(obj)")
(CFNC "GtkType gtk_layout_get_type void")
(CFNC "GtkWidget* gtk_layout_new GtkAdjustment* hadjustment GtkAdjustment* vadjustment")
(CFNC "void gtk_layout_put GtkLayout* layout GtkWidget* child_widget gint x gint y")
(CFNC "void gtk_layout_move GtkLayout* layout GtkWidget* child_widget gint x gint y")
(CFNC "void gtk_layout_set_size GtkLayout* layout guint width guint height")
(CFNC "void gtk_layout_get_size GtkLayout* layout guint* [width] guint* [height]")
(CFNC "GtkAdjustment* gtk_layout_get_hadjustment GtkLayout* layout")
(CFNC "GtkAdjustment* gtk_layout_get_vadjustment GtkLayout* layout")
(CFNC "void gtk_layout_set_hadjustment GtkLayout* layout GtkAdjustment* adjustment")
(CFNC "void gtk_layout_set_vadjustment GtkLayout* layout GtkAdjustment* adjustment")
(CCAST "GTK_LIST_STORE(obj)" "GtkListStore*")
;(cdef "GTK_LIST_STORE_CLASS(klass)")
(CCHK "GTK_IS_LIST_STORE(obj)" "GtkListStore*")
;(cdef1 "GTK_IS_LIST_STORE_CLASS(klass)")
;(cdef "GTK_LIST_STORE_GET_CLASS(obj)")
(CFNC "GtkType gtk_list_store_get_type void")
(CFNC "GtkListStore* gtk_list_store_new gint n_columns ...")
(CFNC "GtkListStore* gtk_list_store_newv gint n_columns GType* types")
(CFNC "void gtk_list_store_set_column_types GtkListStore* list_store gint n_columns GType* types")
(CFNC "void gtk_list_store_set_value GtkListStore* list_store GtkTreeIter* iter gint column GValue* value")
(CFNC "void gtk_list_store_set GtkListStore* list_store GtkTreeIter* iter ...")
;;;;(CFNC "void gtk_list_store_set_valist GtkListStore* list_store GtkTreeIter* iter va_list var_args")
(CFNC "void gtk_list_store_remove GtkListStore* list_store GtkTreeIter* iter")
(CFNC "void gtk_list_store_insert GtkListStore* list_store GtkTreeIter* iter gint position")
(CFNC "void gtk_list_store_insert_before GtkListStore* list_store GtkTreeIter* iter GtkTreeIter* @sibling")
(CFNC "void gtk_list_store_insert_after GtkListStore* list_store GtkTreeIter* iter GtkTreeIter* @sibling")
(CFNC "void gtk_list_store_prepend GtkListStore* list_store GtkTreeIter* iter")
(CFNC "void gtk_list_store_append GtkListStore* list_store GtkTreeIter* iter")
(CFNC "void gtk_list_store_clear GtkListStore* list_store")
(CINT "GTK_PRIORITY_RESIZE")
(CFNC "gchar* gtk_check_version guint required_major guint required_minor guint required_micro")
(CFNC "void gtk_init int* {argc} char*** |argv|")
(CFNC "gboolean gtk_init_check int* {argc} char*** |argv|")
;(CFNC "void gtk_init_abi_check int* argc char*** argv int num_checks size_t sizeof_GtkWindow")
;(CFNC "gboolean gtk_init_check_abi_check int* argc char*** argv int num_checks size_t sizeof_GtkWindow")
(CFNC "void gtk_disable_setlocale void")
(CFNC "gchar* gtk_set_locale void")
(CFNC "PangoLanguage* gtk_get_default_language void")
(CFNC "gint gtk_events_pending void")
(CFNC "void gtk_main_do_event GdkEvent* event")
(CFNC "void gtk_main void")
(CFNC "guint gtk_main_level void")
(CFNC "void gtk_main_quit void")
(CFNC "gboolean gtk_main_iteration void")
(CFNC "gboolean gtk_main_iteration_do gboolean blocking")
(CFNC "gboolean gtk_true void")
(CFNC "gboolean gtk_false void")
(CFNC "void gtk_grab_add GtkWidget* widget")
(CFNC "GtkWidget* gtk_grab_get_current void")
(CFNC "void gtk_grab_remove GtkWidget* widget")
(CFNC "void gtk_init_add GtkFunction func lambda_data #func_data")
(CFNC "void gtk_quit_add_destroy guint main_level GtkObject* object")
(CFNC "guint gtk_quit_add guint main_level GtkFunction func lambda_data #func_data")
;(CFNC "guint gtk_quit_add_full guint main_level GtkFunction func GtkCallbackMarshal marshal lambda_data func_data GtkDestroyNotify destroy")
(CFNC "void gtk_quit_remove guint quit_handler_id")
(CFNC "void gtk_quit_remove_by_data xen data")
(CFNC "guint gtk_timeout_add guint32 interval GtkTimeoutFunction func lambda_data #func_data")
;(CFNC "guint gtk_timeout_add_full guint32 interval GtkTimeoutFunction func GtkCallbackMarshal marshal lambda_data func_data GtkDestroyNotify destroy")
(CFNC "void gtk_timeout_remove guint timeout_handler_id")
(CFNC "guint gtk_idle_add GtkFunction func lambda_data #func_data")
(CFNC "guint gtk_idle_add_priority gint priority GtkFunction func lambda_data #func_data")
;(CFNC "guint gtk_idle_add_full gint priority GtkFunction func GtkCallbackMarshal marshal lambda_data func_data GtkDestroyNotify destroy")
(CFNC "void gtk_idle_remove guint idle_handler_id")
(CFNC "void gtk_idle_remove_by_data xen data")
;(CFNC "guint gtk_input_add_full gint source GdkInputCondition condition GdkInputFunction func GtkCallbackMarshal marshal lambda_data func_data GtkDestroyNotify destroy")
(CFNC "void gtk_input_remove guint input_handler_id")
(CFNC "guint gtk_key_snooper_install GtkKeySnoopFunc func lambda_data #func_data")
(CFNC "void gtk_key_snooper_remove guint snooper_handler_id")
(CFNC "GdkEvent* gtk_get_current_event void")
(CFNC "guint32 gtk_get_current_event_time void")
(CFNC "gboolean gtk_get_current_event_state GdkModifierType* [state]")
(CFNC "GtkWidget* gtk_get_event_widget GdkEvent* @event")
(CFNC "void gtk_propagate_event GtkWidget* widget GdkEvent* event")
(CCAST "GTK_MENU_BAR(obj)" "GtkMenuBar*")
;(cdef "GTK_MENU_BAR_CLASS(klass)")
(CCHK "GTK_IS_MENU_BAR(obj)" "GtkMenuBar*")
;(cdef1 "GTK_IS_MENU_BAR_CLASS(klass)")
;(cdef "GTK_MENU_BAR_GET_CLASS(obj)")
(CFNC "GtkType gtk_menu_bar_get_type void")
(CFNC "GtkWidget* gtk_menu_bar_new void")
(CCAST "GTK_MENU(obj)" "GtkMenu*")
;(cdef "GTK_MENU_CLASS(klass)")
(CCHK "GTK_IS_MENU(obj)" "GtkMenu*")
;(cdef1 "GTK_IS_MENU_CLASS(klass)")
;(cdef "GTK_MENU_GET_CLASS(obj)")
(CFNC "GtkType gtk_menu_get_type void")
(CFNC "GtkWidget* gtk_menu_new void")
(CFNC "void gtk_menu_popup GtkMenu* menu GtkWidget* parent_menu_shell GtkWidget* parent_menu_item GtkMenuPositionFunc func lambda_data func_data guint button guint32 activate_time")
(CFNC "void gtk_menu_reposition GtkMenu* menu")
(CFNC "void gtk_menu_popdown GtkMenu* menu")
(CFNC "GtkWidget* gtk_menu_get_active GtkMenu* menu")
(CFNC "void gtk_menu_set_active GtkMenu* menu guint index")
(CFNC "void gtk_menu_set_accel_group GtkMenu* menu GtkAccelGroup* accel_group")
(CFNC "GtkAccelGroup* gtk_menu_get_accel_group GtkMenu* menu")
(CFNC "void gtk_menu_set_accel_path GtkMenu* menu gchar* accel_path") ; 1.3.13
(CFNC "void gtk_menu_attach_to_widget GtkMenu* menu GtkWidget* attach_widget GtkMenuDetachFunc detacher")
(CFNC "void gtk_menu_detach GtkMenu* menu")
(CFNC "GtkWidget* gtk_menu_get_attach_widget GtkMenu* menu")
(CFNC "void gtk_menu_set_tearoff_state GtkMenu* menu gboolean torn_off")
(CFNC "gboolean gtk_menu_get_tearoff_state GtkMenu* menu")
(CFNC "void gtk_menu_set_title GtkMenu* menu gchar* title")
(CFNC "gchar* gtk_menu_get_title GtkMenu* menu")
(CFNC "void gtk_menu_reorder_child GtkMenu* menu GtkWidget* child gint position")
(CCAST "GTK_MENU_ITEM(obj)" "GtkMenuItem*")
;(cdef "GTK_MENU_ITEM_CLASS(klass)")
(CCHK "GTK_IS_MENU_ITEM(obj)" "GtkMenuItem*")
;(cdef1 "GTK_IS_MENU_ITEM_CLASS(klass)")
;(cdef "GTK_MENU_ITEM_GET_CLASS(obj)")
(CFNC "GtkType gtk_menu_item_get_type void")
(CFNC "GtkWidget* gtk_menu_item_new void")
(CFNC "GtkWidget* gtk_menu_item_new_with_label gchar* label")
(CFNC "GtkWidget* gtk_menu_item_new_with_mnemonic gchar* label")
(CFNC "void gtk_menu_item_set_submenu GtkMenuItem* menu_item GtkWidget* submenu")
(CFNC "GtkWidget* gtk_menu_item_get_submenu GtkMenuItem* menu_item")
(CFNC "void gtk_menu_item_remove_submenu GtkMenuItem* menu_item")
(CFNC "void gtk_menu_item_select GtkMenuItem* menu_item")
(CFNC "void gtk_menu_item_deselect GtkMenuItem* menu_item")
(CFNC "void gtk_menu_item_activate GtkMenuItem* menu_item")
(CFNC "void gtk_menu_item_toggle_size_request GtkMenuItem* menu_item gint* requisition")
(CFNC "void gtk_menu_item_toggle_size_allocate GtkMenuItem* menu_item gint allocation")
(CFNC "void gtk_menu_item_set_right_justified GtkMenuItem* menu_item gboolean right_justified")
(CFNC "gboolean gtk_menu_item_get_right_justified GtkMenuItem* menu_item")
(CFNC "void gtk_menu_item_set_accel_path GtkMenuItem* menu_item gchar* accel_path")
(CCAST "GTK_MENU_SHELL(obj)" "GtkMenuShell*")
;(cdef "GTK_MENU_SHELL_CLASS(klass)")
(CCHK "GTK_IS_MENU_SHELL(obj)" "GtkMenuShell*")
;(cdef1 "GTK_IS_MENU_SHELL_CLASS(klass)")
;(cdef "GTK_MENU_SHELL_GET_CLASS(obj)")
(CFNC "GtkType gtk_menu_shell_get_type void")
(CFNC "void gtk_menu_shell_append GtkMenuShell* menu_shell GtkWidget* child")
(CFNC "void gtk_menu_shell_prepend GtkMenuShell* menu_shell GtkWidget* child")
(CFNC "void gtk_menu_shell_insert GtkMenuShell* menu_shell GtkWidget* child gint position")
(CFNC "void gtk_menu_shell_deactivate GtkMenuShell* menu_shell")
(CFNC "void gtk_menu_shell_select_item GtkMenuShell* menu_shell GtkWidget* menu_item")
(CFNC "void gtk_menu_shell_deselect GtkMenuShell* menu_shell")
(CFNC "void gtk_menu_shell_activate_item GtkMenuShell* menu_shell GtkWidget* menu_item gboolean force_deactivate")
(CINT "GTK_MESSAGE_INFO" "GtkMessageType")
(CINT "GTK_MESSAGE_WARNING" "GtkMessageType")
(CINT "GTK_MESSAGE_QUESTION" "GtkMessageType")
(CINT "GTK_MESSAGE_ERROR" "GtkMessageType")
(CINT "GTK_BUTTONS_NONE" "GtkButtonsType")
(CINT "GTK_BUTTONS_OK" "GtkButtonsType")
(CINT "GTK_BUTTONS_CLOSE" "GtkButtonsType")
(CINT "GTK_BUTTONS_CANCEL" "GtkButtonsType")
(CINT "GTK_BUTTONS_YES_NO" "GtkButtonsType")
(CINT "GTK_BUTTONS_OK_CANCEL" "GtkButtonsType")
(CCAST "GTK_MESSAGE_DIALOG(obj)" "GtkMessageDialog*")
;(cdef "GTK_MESSAGE_DIALOG_CLASS(klass)")
(CCHK "GTK_IS_MESSAGE_DIALOG(obj)" "GtkMessageDialog*")
;(cdef1 "GTK_IS_MESSAGE_DIALOG_CLASS(klass)")
;(cdef "GTK_MESSAGE_DIALOG_GET_CLASS(obj)")
(CFNC "GtkType gtk_message_dialog_get_type void")
(CFNC "GtkWidget* gtk_message_dialog_new GtkWindow* parent GtkDialogFlags flags GtkMessageType type GtkButtonsType buttons gchar* message_format ...")
(CCAST "GTK_MISC(obj)" "GtkMisc*")
;(cdef "GTK_MISC_CLASS(klass)")
(CCHK "GTK_IS_MISC(obj)" "GtkMisc*")
;(cdef1 "GTK_IS_MISC_CLASS(klass)")
;(cdef "GTK_MISC_GET_CLASS(obj)")
(CFNC "GtkType gtk_misc_get_type void")
(CFNC "void gtk_misc_set_alignment GtkMisc* misc gfloat xalign gfloat yalign")
(CFNC "void gtk_misc_get_alignment GtkMisc* misc gfloat* [xalign] gfloat* [yalign]")
(CFNC "void gtk_misc_set_padding GtkMisc* misc gint xpad gint ypad")
(CFNC "void gtk_misc_get_padding GtkMisc* misc gint* xpad gint* ypad")
(CCAST "GTK_NOTEBOOK(obj)" "GtkNotebook*")
;(cdef "GTK_NOTEBOOK_CLASS(klass)")
(CCHK "GTK_IS_NOTEBOOK(obj)" "GtkNotebook*")
;(cdef1 "GTK_IS_NOTEBOOK_CLASS(klass)")
;(cdef "GTK_NOTEBOOK_GET_CLASS(obj)")
(CINT "GTK_NOTEBOOK_TAB_FIRST" "GtkNotebookTab")
(CINT "GTK_NOTEBOOK_TAB_LAST" "GtkNotebookTab")
(CFNC "GtkType gtk_notebook_get_type void")
(CFNC "GtkWidget* gtk_notebook_new void")
(CFNC "void gtk_notebook_append_page GtkNotebook* notebook GtkWidget* child GtkWidget* @tab_label")
(CFNC "void gtk_notebook_append_page_menu GtkNotebook* notebook GtkWidget* child GtkWidget* @tab_label GtkWidget* @menu_label")
(CFNC "void gtk_notebook_prepend_page GtkNotebook* notebook GtkWidget* child GtkWidget* @tab_label")
(CFNC "void gtk_notebook_prepend_page_menu GtkNotebook* notebook GtkWidget* child GtkWidget* @tab_label GtkWidget* @menu_label")
(CFNC "void gtk_notebook_insert_page GtkNotebook* notebook GtkWidget* child GtkWidget* @tab_label gint position")
(CFNC "void gtk_notebook_insert_page_menu GtkNotebook* notebook GtkWidget* child GtkWidget* @tab_label GtkWidget* @menu_label gint position")
(CFNC "void gtk_notebook_remove_page GtkNotebook* notebook gint page_num")
(CFNC "gint gtk_notebook_get_current_page GtkNotebook* notebook")
(CFNC "GtkWidget* gtk_notebook_get_nth_page GtkNotebook* notebook gint page_num")
(CFNC "gint gtk_notebook_page_num GtkNotebook* notebook GtkWidget* child")
(CFNC "void gtk_notebook_set_current_page GtkNotebook* notebook gint page_num")
(CFNC "void gtk_notebook_next_page GtkNotebook* notebook")
(CFNC "void gtk_notebook_prev_page GtkNotebook* notebook")
(CFNC "void gtk_notebook_set_show_border GtkNotebook* notebook gboolean show_border")
(CFNC "gboolean gtk_notebook_get_show_border GtkNotebook* notebook")
(CFNC "void gtk_notebook_set_show_tabs GtkNotebook* notebook gboolean show_tabs")
(CFNC "gboolean gtk_notebook_get_show_tabs GtkNotebook* notebook")
(CFNC "void gtk_notebook_set_tab_pos GtkNotebook* notebook GtkPositionType pos")
(CFNC "GtkPositionType gtk_notebook_get_tab_pos GtkNotebook* notebook")
(CFNC "void gtk_notebook_set_scrollable GtkNotebook* notebook gboolean scrollable")
(CFNC "gboolean gtk_notebook_get_scrollable GtkNotebook* notebook")
(CFNC "void gtk_notebook_popup_enable GtkNotebook* notebook")
(CFNC "void gtk_notebook_popup_disable GtkNotebook* notebook")
(CFNC "GtkWidget* gtk_notebook_get_tab_label GtkNotebook* notebook GtkWidget* child")
(CFNC "void gtk_notebook_set_tab_label GtkNotebook* notebook GtkWidget* child GtkWidget* @tab_label")
(CFNC "void gtk_notebook_set_tab_label_text GtkNotebook* notebook GtkWidget* child gchar* tab_text")
(CFNC "gchar* gtk_notebook_get_tab_label_text GtkNotebook* notebook GtkWidget* child")
(CFNC "GtkWidget* gtk_notebook_get_menu_label GtkNotebook* notebook GtkWidget* child")
(CFNC "void gtk_notebook_set_menu_label GtkNotebook* notebook GtkWidget* child GtkWidget* menu_label")
(CFNC "void gtk_notebook_set_menu_label_text GtkNotebook* notebook GtkWidget* child gchar* menu_text")
(CFNC "gchar* gtk_notebook_get_menu_label_text GtkNotebook* notebook GtkWidget* child")
(CFNC "void gtk_notebook_query_tab_label_packing GtkNotebook* notebook GtkWidget* child gboolean* expand gboolean* fill GtkPackType* pack_type")
(CFNC "void gtk_notebook_set_tab_label_packing GtkNotebook* notebook GtkWidget* child gboolean expand gboolean fill GtkPackType pack_type")
(CFNC "void gtk_notebook_reorder_child GtkNotebook* notebook GtkWidget* child gint position")
(CCAST "GTK_OBJECT(object)" "GtkObject*")
;(cdef "GTK_OBJECT_CLASS(klass)")
(CCHK "GTK_IS_OBJECT(object)" "GtkObject*")
;(cdef1 "GTK_IS_OBJECT_CLASS(klass)")
;(cdef "GTK_OBJECT_GET_CLASS(object)")
;(CCAST2 "GTK_OBJECT_TYPE(object)")
(CFNC "char* GTK_OBJECT_TYPE_NAME GtkObject* object")
(CINT "GTK_IN_DESTRUCTION")
(CINT "GTK_FLOATING")
(CINT "GTK_RESERVED_1")
(CINT "GTK_RESERVED_2")
(CFNC "int GTK_OBJECT_FLAGS GtkObject* obj")
(CFNC "gboolean GTK_OBJECT_FLOATING GtkObject* obj")
(CFNC "void GTK_OBJECT_SET_FLAGS GtkObject* obj int flag")
(CFNC "void GTK_OBJECT_UNSET_FLAGS GtkObject* obj int flag")
(CFNC "GtkType gtk_object_get_type void")
(CFNC "GtkObject* gtk_object_new GtkType type gchar* first_property_name ...")
(CFNC "void gtk_object_sink GtkObject* object")
(CFNC "void gtk_object_destroy GtkObject* object")
(CCAST "GTK_OPTION_MENU(obj)" "GtkOptionMenu*")
;(cdef "GTK_OPTION_MENU_CLASS(klass)")
(CCHK "GTK_IS_OPTION_MENU(obj)" "GtkOptionMenu*")
;(cdef1 "GTK_IS_OPTION_MENU_CLASS(klass)")
;(cdef "GTK_OPTION_MENU_GET_CLASS(obj)")
(CFNC "GtkType gtk_option_menu_get_type void")
(CFNC "GtkWidget* gtk_option_menu_new void")
(CFNC "GtkWidget* gtk_option_menu_get_menu GtkOptionMenu* option_menu")
(CFNC "void gtk_option_menu_set_menu GtkOptionMenu* option_menu GtkWidget* menu")
(CFNC "void gtk_option_menu_remove_menu GtkOptionMenu* option_menu")
(CFNC "gint gtk_option_menu_get_history GtkOptionMenu* option_menu")
(CFNC "void gtk_option_menu_set_history GtkOptionMenu* option_menu guint index")
(CCAST "GTK_PANED(obj)" "GtkPaned*")
;(cdef "GTK_PANED_CLASS(klass)")
(CCHK "GTK_IS_PANED(obj)" "GtkPaned*")
;(cdef1 "GTK_IS_PANED_CLASS(klass)")
;(cdef "GTK_PANED_GET_CLASS(obj)")
(CFNC "GtkType gtk_paned_get_type void")
(CFNC "void gtk_paned_add1 GtkPaned* paned GtkWidget* child")
(CFNC "void gtk_paned_add2 GtkPaned* paned GtkWidget* child")
(CFNC "void gtk_paned_pack1 GtkPaned* paned GtkWidget* child gboolean resize gboolean shrink")
(CFNC "void gtk_paned_pack2 GtkPaned* paned GtkWidget* child gboolean resize gboolean shrink")
(CFNC "gint gtk_paned_get_position GtkPaned* paned")
(CFNC "void gtk_paned_set_position GtkPaned* paned gint position")
(CFNC "void gtk_paned_compute_position GtkPaned* paned gint allocation gint child1_req gint child2_req")
(CCAST "GTK_PLUG(obj)" "GtkPlug*")
;(cdef "GTK_PLUG_CLASS(klass)")
(CCHK "GTK_IS_PLUG(obj)" "GtkPlug*")
;(cdef1 "GTK_IS_PLUG_CLASS(klass)")
;(cdef "GTK_PLUG_GET_CLASS(obj)")
(CFNC "GtkType gtk_plug_get_type void")
(CFNC "void gtk_plug_construct GtkPlug* plug GdkNativeWindow socket_id")
(CFNC "GtkWidget* gtk_plug_new GdkNativeWindow socket_id")
(CFNC "GdkNativeWindow gtk_plug_get_id GtkPlug* plug")
(CCAST "GTK_PROGRESS_BAR(obj)" "GtkProgressBar*")
;(cdef "GTK_PROGRESS_BAR_CLASS(klass)")
(CCHK "GTK_IS_PROGRESS_BAR(obj)" "GtkProgressBar*")
;(cdef1 "GTK_IS_PROGRESS_BAR_CLASS(klass)")
;(cdef "GTK_PROGRESS_BAR_GET_CLASS(obj)")
(CINT "GTK_PROGRESS_CONTINUOUS" "GtkProgressBarStyle")
(CINT "GTK_PROGRESS_DISCRETE" "GtkProgressBarStyle")
(CINT "GTK_PROGRESS_LEFT_TO_RIGHT" "GtkProgressBarOrientation")
(CINT "GTK_PROGRESS_RIGHT_TO_LEFT" "GtkProgressBarOrientation")
(CINT "GTK_PROGRESS_BOTTOM_TO_TOP" "GtkProgressBarOrientation")
(CINT "GTK_PROGRESS_TOP_TO_BOTTOM" "GtkProgressBarOrientation")
(CFNC "GtkType gtk_progress_bar_get_type void")
(CFNC "GtkWidget* gtk_progress_bar_new void")
(CFNC "void gtk_progress_bar_pulse GtkProgressBar* pbar")
(CFNC "void gtk_progress_bar_set_text GtkProgressBar* pbar gchar* text")
(CFNC "void gtk_progress_bar_set_fraction GtkProgressBar* pbar gdouble fraction")
(CFNC "void gtk_progress_bar_set_pulse_step GtkProgressBar* pbar gdouble fraction")
(CFNC "void gtk_progress_bar_set_orientation GtkProgressBar* pbar GtkProgressBarOrientation orientation")
(CFNC "gchar* gtk_progress_bar_get_text GtkProgressBar* pbar")
(CFNC "gdouble gtk_progress_bar_get_fraction GtkProgressBar* pbar")
(CFNC "gdouble gtk_progress_bar_get_pulse_step GtkProgressBar* pbar")
(CFNC "GtkProgressBarOrientation gtk_progress_bar_get_orientation GtkProgressBar* pbar")
(CCAST "GTK_RADIO_BUTTON(obj)" "GtkRadioButton*")
;(cdef "GTK_RADIO_BUTTON_CLASS(klass)")
(CCHK "GTK_IS_RADIO_BUTTON(obj)" "GtkRadioButton*")
;(cdef1 "GTK_IS_RADIO_BUTTON_CLASS(klass)")
;(cdef "GTK_RADIO_BUTTON_GET_CLASS(obj)")
(CFNC "GtkType gtk_radio_button_get_type void")
(CFNC "GtkWidget* gtk_radio_button_new GSList* group")
(CFNC "GtkWidget* gtk_radio_button_new_from_widget GtkRadioButton* group")
(CFNC "GtkWidget* gtk_radio_button_new_with_label GSList* group gchar* label")
(CFNC "GtkWidget* gtk_radio_button_new_with_label_from_widget GtkRadioButton* group gchar* label")
(CFNC "GtkWidget* gtk_radio_button_new_with_mnemonic GSList* group gchar* label")
(CFNC "GtkWidget* gtk_radio_button_new_with_mnemonic_from_widget GtkRadioButton* group gchar* label")
(CFNC "GSList* gtk_radio_button_get_group GtkRadioButton* radio_button")
(CFNC "void gtk_radio_button_set_group GtkRadioButton* radio_button GSList* group")
(CCAST "GTK_RADIO_MENU_ITEM(obj)" "GtkRadioMenuItem*")
;(cdef "GTK_RADIO_MENU_ITEM_CLASS(klass)")
(CCHK "GTK_IS_RADIO_MENU_ITEM(obj)" "GtkRadioMenuItem*")
;(cdef1 "GTK_IS_RADIO_MENU_ITEM_CLASS(klass)")
;(cdef "GTK_RADIO_MENU_ITEM_GET_CLASS(obj)")
(CFNC "GtkType gtk_radio_menu_item_get_type void")
(CFNC "GtkWidget* gtk_radio_menu_item_new GSList* group")
(CFNC "GtkWidget* gtk_radio_menu_item_new_with_label GSList* group gchar* label")
(CFNC "GtkWidget* gtk_radio_menu_item_new_with_mnemonic GSList* group gchar* label")
(CFNC "GSList* gtk_radio_menu_item_get_group GtkRadioMenuItem* radio_menu_item")
(CFNC "void gtk_radio_menu_item_set_group GtkRadioMenuItem* radio_menu_item GSList* group")
(CCAST "GTK_RANGE(obj)" "GtkRange*")
;(cdef "GTK_RANGE_CLASS(klass)")
(CCHK "GTK_IS_RANGE(obj)" "GtkRange*")
;(cdef1 "GTK_IS_RANGE_CLASS(klass)")
;(cdef "GTK_RANGE_GET_CLASS(obj)")
(CFNC "GtkType gtk_range_get_type void")
(CFNC "void gtk_range_set_update_policy GtkRange* range GtkUpdateType policy")
(CFNC "GtkUpdateType gtk_range_get_update_policy GtkRange* range")
(CFNC "void gtk_range_set_adjustment GtkRange* range GtkAdjustment* adjustment")
(CFNC "GtkAdjustment* gtk_range_get_adjustment GtkRange* range")
(CFNC "void gtk_range_set_inverted GtkRange* range gboolean setting")
(CFNC "gboolean gtk_range_get_inverted GtkRange* range")
(CFNC "void gtk_range_set_increments GtkRange* range gdouble step gdouble page")
(CFNC "void gtk_range_set_range GtkRange* range gdouble min gdouble max")
(CFNC "void gtk_range_set_value GtkRange* range gdouble value")
(CFNC "gdouble gtk_range_get_value GtkRange* range")
;(CINT "GTK_RBNODE_BLACK")
;(CINT "GTK_RBNODE_RED")
;(CINT "GTK_RBNODE_IS_PARENT")
;(CINT "GTK_RBNODE_IS_SELECTED")
;(CINT "GTK_RBNODE_IS_PRELIT")
;(CINT "GTK_RBNODE_IS_SEMI_COLLAPSED")
;(CINT "GTK_RBNODE_IS_SEMI_EXPANDED")
;(CINT "GTK_RBNODE_INVALID")
;(CINT "GTK_RBNODE_COLUMN_INVALID")
;(CINT "GTK_RBNODE_DESCENDANTS_INVALID")
;(CINT "GTK_RBNODE_NON_COLORS")
;(CCAST2 "GTK_RBNODE_GET_COLOR(node)")
;(CCAST4 "GTK_RBNODE_SET_COLOR(node color)")
;(CCAST2 "GTK_RBNODE_GET_HEIGHT(node)")
;(CCAST2 "GTK_RBNODE_SET_FLAG(node")
;(CCAST2 "GTK_RBNODE_UNSET_FLAG(node")
;(CCAST2 "GTK_RBNODE_FLAG_SET(node")
;;; (CCAST "GTK_RC_STYLE(object)" "GtkRcStyle*")
;;; this collides with GTK_RC_STYLE defined in gtkwidget.h!
;(cdef "GTK_RC_STYLE_CLASS(klass)")
(CCHK "GTK_IS_RC_STYLE(object)" "GtkRcStyle*")
;(cdef1 "GTK_IS_RC_STYLE_CLASS(klass)")
;(cdef "GTK_RC_STYLE_GET_CLASS(obj)")
(CINT "GTK_RC_FG")
(CINT "GTK_RC_BG")
(CINT "GTK_RC_TEXT")
(CINT "GTK_RC_BASE")
(CFNC "void gtk_rc_add_default_file gchar* filename")
(CFNC "void gtk_rc_set_default_files gchar** filenames")
(CFNC "gchar** gtk_rc_get_default_files void")
(CFNC "GtkStyle* gtk_rc_get_style GtkWidget* widget")
(CFNC "GtkStyle* gtk_rc_get_style_by_paths GtkSettings* settings char* widget_path char* class_path GType type")
(CFNC "gboolean gtk_rc_reparse_all_for_settings GtkSettings* settings gboolean force_load")
(CFNC "gchar* gtk_rc_find_pixmap_in_path GtkSettings* settings GScanner* @scanner gchar* pixmap_file")
(CFNC "void gtk_rc_parse gchar* filename")
(CFNC "void gtk_rc_parse_string gchar* rc_string")
(CFNC "gboolean gtk_rc_reparse_all void")
(CFNC "GType gtk_rc_style_get_type void")
(CFNC "GtkRcStyle* gtk_rc_style_new void")
(CFNC "GtkRcStyle* gtk_rc_style_copy GtkRcStyle* orig")
(CFNC "void gtk_rc_style_ref GtkRcStyle* rc_style")
(CFNC "void gtk_rc_style_unref GtkRcStyle* rc_style")
(CFNC "gchar* gtk_rc_find_module_in_path gchar* module_file")
(CFNC "gchar* gtk_rc_get_theme_dir void")
(CFNC "gchar* gtk_rc_get_module_dir void")
(CFNC "gchar* gtk_rc_get_im_module_path void")
(CFNC "gchar* gtk_rc_get_im_module_file void")
(CINT "GTK_RC_TOKEN_INVALID" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_INCLUDE" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_NORMAL" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_ACTIVE" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_PRELIGHT" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_SELECTED" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_INSENSITIVE" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_FG" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_BG" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_TEXT" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_BASE" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_XTHICKNESS" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_YTHICKNESS" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_FONT" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_FONTSET" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_FONT_NAME" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_BG_PIXMAP" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_PIXMAP_PATH" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_STYLE" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_BINDING" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_BIND" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_WIDGET" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_WIDGET_CLASS" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_CLASS" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_LOWEST" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_GTK" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_APPLICATION" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_THEME" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_RC" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_HIGHEST" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_ENGINE" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_MODULE_PATH" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_IM_MODULE_PATH" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_IM_MODULE_FILE" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_STOCK" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_LTR" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_RTL" "GtkRcTokenType")
(CINT "GTK_RC_TOKEN_LAST" "GtkRcTokenType")
(CFNC "GScanner* gtk_rc_scanner_new void")
(CFNC "guint gtk_rc_parse_color GScanner* scanner GdkColor* color")
(CFNC "guint gtk_rc_parse_state GScanner* scanner GtkStateType* state")
(CFNC "guint gtk_rc_parse_priority GScanner* scanner GtkPathPriorityType* priority")
;(CFNC "gchar* gtk_win32_get_installation_directory void")
(CCAST "GTK_RULER(obj)" "GtkRuler*")
;(cdef "GTK_RULER_CLASS(klass)")
(CCHK "GTK_IS_RULER(obj)" "GtkRuler*")
;(cdef1 "GTK_IS_RULER_CLASS(klass)")
;(cdef "GTK_RULER_GET_CLASS(obj)")
(CFNC "GtkType gtk_ruler_get_type void")
(CFNC "void gtk_ruler_set_metric GtkRuler* ruler GtkMetricType metric")
(CFNC "void gtk_ruler_set_range GtkRuler* ruler gdouble lower gdouble upper gdouble position gdouble max_size")
(CFNC "void gtk_ruler_draw_ticks GtkRuler* ruler")
(CFNC "void gtk_ruler_draw_pos GtkRuler* ruler")
(CFNC "GtkMetricType gtk_ruler_get_metric GtkRuler* ruler")
(CFNC "void gtk_ruler_get_range GtkRuler* ruler gdouble* [lower] gdouble* [upper] gdouble* [position] gdouble* [max_size]")
(CCAST "GTK_SCALE(obj)" "GtkScale*")
;(cdef "GTK_SCALE_CLASS(klass)")
(CCHK "GTK_IS_SCALE(obj)" "GtkScale*")
;(cdef1 "GTK_IS_SCALE_CLASS(klass)")
;(cdef "GTK_SCALE_GET_CLASS(obj)")
(CFNC "GtkType gtk_scale_get_type void")
(CFNC "void gtk_scale_set_digits GtkScale* scale gint digits")
(CFNC "gint gtk_scale_get_digits GtkScale* scale")
(CFNC "void gtk_scale_set_draw_value GtkScale* scale gboolean draw_value")
(CFNC "gboolean gtk_scale_get_draw_value GtkScale* scale")
(CFNC "void gtk_scale_set_value_pos GtkScale* scale GtkPositionType pos")
(CFNC "GtkPositionType gtk_scale_get_value_pos GtkScale* scale")
(CCAST "GTK_SCROLLBAR(obj)" "GtkScrollbar*")
;(cdef "GTK_SCROLLBAR_CLASS(klass)")
(CCHK "GTK_IS_SCROLLBAR(obj)" "GtkScrollbar*")
;(cdef1 "GTK_IS_SCROLLBAR_CLASS(klass)")
;(cdef "GTK_SCROLLBAR_GET_CLASS(obj)")
(CFNC "GtkType gtk_scrollbar_get_type void")
(CCAST "GTK_SCROLLED_WINDOW(obj)" "GtkScrolledWindow*")
;(cdef "GTK_SCROLLED_WINDOW_CLASS(klass)")
(CCHK "GTK_IS_SCROLLED_WINDOW(obj)" "GtkScrolledWindow*")
;(cdef1 "GTK_IS_SCROLLED_WINDOW_CLASS(klass)")
;(cdef "GTK_SCROLLED_WINDOW_GET_CLASS(obj)")
(CFNC "GtkType gtk_scrolled_window_get_type void")
(CFNC "GtkWidget* gtk_scrolled_window_new GtkAdjustment* hadjustment GtkAdjustment* vadjustment")
(CFNC "void gtk_scrolled_window_set_hadjustment GtkScrolledWindow* scrolled_window GtkAdjustment* hadjustment")
(CFNC "void gtk_scrolled_window_set_vadjustment GtkScrolledWindow* scrolled_window GtkAdjustment* hadjustment")
(CFNC "GtkAdjustment* gtk_scrolled_window_get_hadjustment GtkScrolledWindow* scrolled_window")
(CFNC "GtkAdjustment* gtk_scrolled_window_get_vadjustment GtkScrolledWindow* scrolled_window")
(CFNC "void gtk_scrolled_window_set_policy GtkScrolledWindow* scrolled_window GtkPolicyType hscrollbar_policy GtkPolicyType vscrollbar_policy")
(CFNC "void gtk_scrolled_window_get_policy GtkScrolledWindow* scrolled_window GtkPolicyType* [hscrollbar_policy] GtkPolicyType* [vscrollbar_policy]")
(CFNC "void gtk_scrolled_window_set_placement GtkScrolledWindow* scrolled_window GtkCornerType window_placement")
(CFNC "GtkCornerType gtk_scrolled_window_get_placement GtkScrolledWindow* scrolled_window")
(CFNC "void gtk_scrolled_window_set_shadow_type GtkScrolledWindow* scrolled_window GtkShadowType type")
(CFNC "GtkShadowType gtk_scrolled_window_get_shadow_type GtkScrolledWindow* scrolled_window")
(CFNC "void gtk_scrolled_window_add_with_viewport GtkScrolledWindow* scrolled_window GtkWidget* child")
(CFNC "GtkTargetList* gtk_target_list_new GtkTargetEntry* targets guint ntargets")
(CFNC "void gtk_target_list_ref GtkTargetList* list")
(CFNC "void gtk_target_list_unref GtkTargetList* list")
(CFNC "void gtk_target_list_add GtkTargetList* list GdkAtom target guint flags guint info")
(CFNC "void gtk_target_list_add_table GtkTargetList* list GtkTargetEntry* targets guint ntargets")
(CFNC "void gtk_target_list_remove GtkTargetList* list GdkAtom target")
(CFNC "gboolean gtk_target_list_find GtkTargetList* list GdkAtom target guint* info")
(CFNC "gboolean gtk_selection_owner_set GtkWidget* widget GdkAtom selection guint32 time")
(CFNC "void gtk_selection_add_target GtkWidget* widget GdkAtom selection GdkAtom target guint info")
(CFNC "void gtk_selection_add_targets GtkWidget* widget GdkAtom selection GtkTargetEntry* targets guint ntargets")
(CFNC "void gtk_selection_clear_targets GtkWidget* widget GdkAtom selection")
(CFNC "gboolean gtk_selection_convert GtkWidget* widget GdkAtom selection GdkAtom target guint32 time")
(CFNC "void gtk_selection_data_set GtkSelectionData* selection_data GdkAtom type gint format guchar* data gint length")
(CFNC "gboolean gtk_selection_data_set_text GtkSelectionData* selection_data gchar* str gint len")
(CFNC "guchar* gtk_selection_data_get_text GtkSelectionData* selection_data")
(CFNC "gboolean gtk_selection_data_get_targets GtkSelectionData* selection_data GdkAtom** [targets] gint* [n_atoms]")
(CFNC "gboolean gtk_selection_data_targets_include_text GtkSelectionData* selection_data")
(CFNC "void gtk_selection_remove_all GtkWidget* widget")
(CFNC "gboolean gtk_selection_clear GtkWidget* widget GdkEventSelection* event")
;;; removed 2.1 (CFNC "gboolean gtk_selection_request GtkWidget* widget GdkEventSelection* event")
;;; removed 2.1 (CFNC "gboolean gtk_selection_incr_event GdkWindow* window GdkEventProperty* event")
;;; removed 2.1 (CFNC "gboolean gtk_selection_notify GtkWidget* widget GdkEventSelection* event")
;;; removed 2.1 (CFNC "gboolean gtk_selection_property_notify GtkWidget* widget GdkEventProperty* event")
(CFNC "GtkSelectionData* gtk_selection_data_copy GtkSelectionData* data")
(CFNC "void gtk_selection_data_free GtkSelectionData* data")
(CCAST "GTK_SEPARATOR(obj)" "GtkSeparator*")
;(cdef "GTK_SEPARATOR_CLASS(klass)")
(CCHK "GTK_IS_SEPARATOR(obj)" "GtkSeparator*")
;(cdef1 "GTK_IS_SEPARATOR_CLASS(klass)")
;(cdef "GTK_SEPARATOR_GET_CLASS(obj)")
(CFNC "GtkType gtk_separator_get_type void")
(CCAST "GTK_SEPARATOR_MENU_ITEM(obj)" "GtkSeparatorMenuItem*")
;(cdef "GTK_SEPARATOR_MENU_ITEM_CLASS(klass)")
(CCHK "GTK_IS_SEPARATOR_MENU_ITEM(obj)" "GtkSeparatorMenuItem*")
;(cdef1 "GTK_IS_SEPARATOR_MENU_ITEM_CLASS(klass)")
;(cdef "GTK_SEPARATOR_MENU_ITEM_GET_CLASS(obj)")
(CFNC "GType gtk_separator_menu_item_get_type void")
(CFNC "GtkWidget* gtk_separator_menu_item_new void")
(CCAST "GTK_SETTINGS(obj)" "GtkSettings*")
;(cdef "GTK_SETTINGS_CLASS(klass)")
(CCHK "GTK_IS_SETTINGS(obj)" "GtkSettings*")
;(cdef1 "GTK_IS_SETTINGS_CLASS(klass)")
;(cdef "GTK_SETTINGS_GET_CLASS(obj)")
(CFNC "GType gtk_settings_get_type void")
(CFNC "GtkSettings* gtk_settings_get_default void")
(CFNC "void gtk_settings_install_property GParamSpec* pspec")
(CFNC "void gtk_settings_install_property_parser GParamSpec* pspec GtkRcPropertyParser parser")
(CFNC "gboolean gtk_rc_property_parse_color GParamSpec* pspec GString* gstring GValue* property_value")
(CFNC "gboolean gtk_rc_property_parse_enum GParamSpec* pspec GString* gstring GValue* property_value")
(CFNC "gboolean gtk_rc_property_parse_flags GParamSpec* pspec GString* gstring GValue* property_value")
(CFNC "gboolean gtk_rc_property_parse_requisition GParamSpec* pspec GString* gstring GValue* property_value")
(CFNC "gboolean gtk_rc_property_parse_border GParamSpec* pspec GString* gstring GValue* property_value")
(CFNC "void gtk_settings_set_property_value GtkSettings* settings gchar* name GtkSettingsValue* svalue")
(CFNC "void gtk_settings_set_string_property GtkSettings* settings gchar* name gchar* v_string gchar* origin")
(CFNC "void gtk_settings_set_long_property GtkSettings* settings gchar* name glong v_long gchar* origin")
(CFNC "void gtk_settings_set_double_property GtkSettings* settings gchar* name gdouble v_double gchar* origin")
(CCAST "GTK_SIZE_GROUP(obj)" "GtkSizeGroup*")
;(cdef "GTK_SIZE_GROUP_CLASS(klass)")
(CCHK "GTK_IS_SIZE_GROUP(obj)" "GtkSizeGroup*")
;(cdef1 "GTK_IS_SIZE_GROUP_CLASS(klass)")
;(cdef "GTK_SIZE_GROUP_GET_CLASS(obj)")
(CINT "GTK_SIZE_GROUP_NONE" "GtkSizeGroupMode")
(CINT "GTK_SIZE_GROUP_HORIZONTAL" "GtkSizeGroupMode")
(CINT "GTK_SIZE_GROUP_VERTICAL" "GtkSizeGroupMode")
(CINT "GTK_SIZE_GROUP_BOTH" "GtkSizeGroupMode")
(CFNC "GType gtk_size_group_get_type void")
(CFNC "GtkSizeGroup* gtk_size_group_new GtkSizeGroupMode mode")
(CFNC "void gtk_size_group_set_mode GtkSizeGroup* size_group GtkSizeGroupMode mode")
(CFNC "GtkSizeGroupMode gtk_size_group_get_mode GtkSizeGroup* size_group")
(CFNC "void gtk_size_group_add_widget GtkSizeGroup* size_group GtkWidget* widget")
(CFNC "void gtk_size_group_remove_widget GtkSizeGroup* size_group GtkWidget* widget")
(CCAST "GTK_SOCKET(obj)" "GtkSocket*")
;(cdef "GTK_SOCKET_CLASS(klass)")
(CCHK "GTK_IS_SOCKET(obj)" "GtkSocket*")
;(cdef1 "GTK_IS_SOCKET_CLASS(klass)")
;(cdef "GTK_SOCKET_GET_CLASS(obj)")
(CFNC "GtkWidget* gtk_socket_new void")
(CFNC "GtkType gtk_socket_get_type void")
(CFNC "void gtk_socket_add_id GtkSocket* socket GdkNativeWindow window_id")
(CFNC "GdkNativeWindow gtk_socket_get_id GtkSocket* socket")
(CCAST "GTK_SPIN_BUTTON(obj)" "GtkSpinButton*")
;(cdef "GTK_SPIN_BUTTON_CLASS(klass)")
(CCHK "GTK_IS_SPIN_BUTTON(obj)" "GtkSpinButton*")
;(cdef1 "GTK_IS_SPIN_BUTTON_CLASS(klass)")
;(cdef "GTK_SPIN_BUTTON_GET_CLASS(obj)")
(CINT "GTK_INPUT_ERROR")
(CINT "GTK_UPDATE_ALWAYS" "GtkSpinButtonUpdatePolicy")
(CINT "GTK_UPDATE_IF_VALID" "GtkSpinButtonUpdatePolicy")
(CINT "GTK_SPIN_STEP_FORWARD" "GtkSpinType")
(CINT "GTK_SPIN_STEP_BACKWARD" "GtkSpinType")
(CINT "GTK_SPIN_PAGE_FORWARD" "GtkSpinType")
(CINT "GTK_SPIN_PAGE_BACKWARD" "GtkSpinType")
(CINT "GTK_SPIN_HOME" "GtkSpinType")
(CINT "GTK_SPIN_END" "GtkSpinType")
(CINT "GTK_SPIN_USER_DEFINED")
(CFNC "GtkType gtk_spin_button_get_type void")
(CFNC "void gtk_spin_button_configure GtkSpinButton* spin_button GtkAdjustment* adjustment gdouble climb_rate guint digits")
(CFNC "GtkWidget* gtk_spin_button_new GtkAdjustment* adjustment gdouble climb_rate guint digits")
(CFNC "GtkWidget* gtk_spin_button_new_with_range gdouble min gdouble max gdouble step")
(CFNC "void gtk_spin_button_set_adjustment GtkSpinButton* spin_button GtkAdjustment* adjustment")
(CFNC "GtkAdjustment* gtk_spin_button_get_adjustment GtkSpinButton* spin_button")
(CFNC "void gtk_spin_button_set_digits GtkSpinButton* spin_button guint digits")
(CFNC "guint gtk_spin_button_get_digits GtkSpinButton* spin_button")
(CFNC "void gtk_spin_button_set_increments GtkSpinButton* spin_button gdouble step gdouble page")
(CFNC "void gtk_spin_button_get_increments GtkSpinButton* spin_button gdouble* [step] gdouble* [page]")
(CFNC "void gtk_spin_button_set_range GtkSpinButton* spin_button gdouble min gdouble max")
(CFNC "void gtk_spin_button_get_range GtkSpinButton* spin_button gdouble* [min] gdouble* [max]")
(CFNC "gdouble gtk_spin_button_get_value GtkSpinButton* spin_button")
(CFNC "gint gtk_spin_button_get_value_as_int GtkSpinButton* spin_button")
(CFNC "void gtk_spin_button_set_value GtkSpinButton* spin_button gdouble value")
(CFNC "void gtk_spin_button_set_update_policy GtkSpinButton* spin_button GtkSpinButtonUpdatePolicy policy")
(CFNC "GtkSpinButtonUpdatePolicy gtk_spin_button_get_update_policy GtkSpinButton* spin_button")
(CFNC "void gtk_spin_button_set_numeric GtkSpinButton* spin_button gboolean numeric")
(CFNC "gboolean gtk_spin_button_get_numeric GtkSpinButton* spin_button")
(CFNC "void gtk_spin_button_spin GtkSpinButton* spin_button GtkSpinType direction gdouble increment")
(CFNC "void gtk_spin_button_set_wrap GtkSpinButton* spin_button gboolean wrap")
(CFNC "gboolean gtk_spin_button_get_wrap GtkSpinButton* spin_button")
(CFNC "void gtk_spin_button_set_snap_to_ticks GtkSpinButton* spin_button gboolean snap_to_ticks")
(CFNC "gboolean gtk_spin_button_get_snap_to_ticks GtkSpinButton* spin_button")
(CFNC "void gtk_spin_button_update GtkSpinButton* spin_button")
(CCAST "GTK_STATUSBAR(obj)" "GtkStatusbar*")
;(cdef "GTK_STATUSBAR_CLASS(klass)")
(CCHK "GTK_IS_STATUSBAR(obj)" "GtkStatusbar*")
;(cdef1 "GTK_IS_STATUSBAR_CLASS(klass)")
;(cdef "GTK_STATUSBAR_GET_CLASS(obj)")
(CFNC "GtkType gtk_statusbar_get_type void")
(CFNC "GtkWidget* gtk_statusbar_new void")
(CFNC "guint gtk_statusbar_get_context_id GtkStatusbar* statusbar gchar* context_description")
(CFNC "guint gtk_statusbar_push GtkStatusbar* statusbar guint context_id gchar* text")
(CFNC "void gtk_statusbar_pop GtkStatusbar* statusbar guint context_id")
(CFNC "void gtk_statusbar_remove GtkStatusbar* statusbar guint context_id guint message_id")
(CFNC "void gtk_statusbar_set_has_resize_grip GtkStatusbar* statusbar gboolean setting")
(CFNC "gboolean gtk_statusbar_get_has_resize_grip GtkStatusbar* statusbar")
(CFNC "void gtk_stock_add GtkStockItem* items guint n_items")
(CFNC "void gtk_stock_add_static GtkStockItem* items guint n_items")
(CFNC "gboolean gtk_stock_lookup gchar* stock_id GtkStockItem* item")
(CFNC "GSList* gtk_stock_list_ids void")
(CFNC "GtkStockItem* gtk_stock_item_copy GtkStockItem* item")
(CFNC "void gtk_stock_item_free GtkStockItem* item")
(CSTR "GTK_STOCK_DIALOG_INFO")
(CSTR "GTK_STOCK_DIALOG_WARNING")
(CSTR "GTK_STOCK_DIALOG_ERROR")
(CSTR "GTK_STOCK_DIALOG_QUESTION")
(CSTR "GTK_STOCK_DND")
(CSTR "GTK_STOCK_DND_MULTIPLE")
(CSTR "GTK_STOCK_ADD")
(CSTR "GTK_STOCK_APPLY")
(CSTR "GTK_STOCK_BOLD")
(CSTR "GTK_STOCK_CANCEL")
(CSTR "GTK_STOCK_CDROM")
(CSTR "GTK_STOCK_CLEAR")
(CSTR "GTK_STOCK_CLOSE")
(CSTR "GTK_STOCK_CONVERT")
(CSTR "GTK_STOCK_COPY")
(CSTR "GTK_STOCK_CUT")
(CSTR "GTK_STOCK_DELETE")
(CSTR "GTK_STOCK_EXECUTE")
(CSTR "GTK_STOCK_FIND")
(CSTR "GTK_STOCK_FIND_AND_REPLACE")
(CSTR "GTK_STOCK_FLOPPY")
(CSTR "GTK_STOCK_GOTO_BOTTOM")
(CSTR "GTK_STOCK_GOTO_FIRST")
(CSTR "GTK_STOCK_GOTO_LAST")
(CSTR "GTK_STOCK_GOTO_TOP")
(CSTR "GTK_STOCK_GO_BACK")
(CSTR "GTK_STOCK_GO_DOWN")
(CSTR "GTK_STOCK_GO_FORWARD")
(CSTR "GTK_STOCK_GO_UP")
(CSTR "GTK_STOCK_HELP")
(CSTR "GTK_STOCK_HOME")
(CSTR "GTK_STOCK_INDEX")
(CSTR "GTK_STOCK_ITALIC")
(CSTR "GTK_STOCK_JUMP_TO")
(CSTR "GTK_STOCK_JUSTIFY_CENTER")
(CSTR "GTK_STOCK_JUSTIFY_FILL")
(CSTR "GTK_STOCK_JUSTIFY_LEFT")
(CSTR "GTK_STOCK_JUSTIFY_RIGHT")
(CSTR "GTK_STOCK_MISSING_IMAGE")
(CSTR "GTK_STOCK_NEW")
(CSTR "GTK_STOCK_NO")
(CSTR "GTK_STOCK_OK")
(CSTR "GTK_STOCK_OPEN")
(CSTR "GTK_STOCK_PASTE")
(CSTR "GTK_STOCK_PREFERENCES")
(CSTR "GTK_STOCK_PRINT")
(CSTR "GTK_STOCK_PRINT_PREVIEW")
(CSTR "GTK_STOCK_PROPERTIES")
(CSTR "GTK_STOCK_QUIT")
(CSTR "GTK_STOCK_REDO")
(CSTR "GTK_STOCK_REFRESH")
(CSTR "GTK_STOCK_REMOVE")
(CSTR "GTK_STOCK_REVERT_TO_SAVED")
(CSTR "GTK_STOCK_SAVE")
(CSTR "GTK_STOCK_SAVE_AS")
(CSTR "GTK_STOCK_SELECT_COLOR")
(CSTR "GTK_STOCK_SELECT_FONT")
(CSTR "GTK_STOCK_SORT_ASCENDING")
(CSTR "GTK_STOCK_SORT_DESCENDING")
(CSTR "GTK_STOCK_SPELL_CHECK")
(CSTR "GTK_STOCK_STOP")
(CSTR "GTK_STOCK_STRIKETHROUGH")
(CSTR "GTK_STOCK_UNDELETE")
(CSTR "GTK_STOCK_UNDERLINE")
(CSTR "GTK_STOCK_UNDO")
(CSTR "GTK_STOCK_YES")
(CSTR "GTK_STOCK_ZOOM_100")
(CSTR "GTK_STOCK_ZOOM_FIT")
(CSTR "GTK_STOCK_ZOOM_IN")
(CSTR "GTK_STOCK_ZOOM_OUT")
(CCAST "GTK_STYLE(object)" "GtkStyle*")
;(cdef "GTK_STYLE_CLASS(klass)")
(CCHK "GTK_IS_STYLE(object)" "GtkStyle*")
;(cdef1 "GTK_IS_STYLE_CLASS(klass)")
;(cdef "GTK_STYLE_GET_CLASS(obj)")
;(CCAST2 "GTK_STYLE_ATTACHED(style)")
(CFNC "GType gtk_style_get_type void")
(CFNC "GtkStyle* gtk_style_new void")
(CFNC "GtkStyle* gtk_style_copy GtkStyle* style")
(CFNC "GtkStyle* gtk_style_attach GtkStyle* style GdkWindow* window")
(CFNC "void gtk_style_detach GtkStyle* style")
(CFNC "void gtk_style_set_background GtkStyle* style GdkWindow* window GtkStateType state_type")
(CFNC "void gtk_style_apply_default_background GtkStyle* style GdkWindow* window gboolean set_bg GtkStateType state_type GdkRectangle* area gint x gint y gint width gint height")
(CFNC "GtkIconSet* gtk_style_lookup_icon_set GtkStyle* style gchar* stock_id")
(CFNC "GdkPixbuf* gtk_style_render_icon GtkStyle* style GtkIconSource* source GtkTextDirection direction GtkStateType state GtkIconSize size GtkWidget* widget gchar* detail")
(CFNC "void gtk_paint_hline GtkStyle* style GdkWindow* window GtkStateType state_type GdkRectangle* area GtkWidget* widget gchar* detail gint x1 gint x2 gint y")
(CFNC "void gtk_paint_vline GtkStyle* style GdkWindow* window GtkStateType state_type GdkRectangle* area GtkWidget* widget gchar* detail gint y1 gint y2 gint x")
(CFNC "void gtk_paint_shadow GtkStyle* style GdkWindow* window GtkStateType state_type GtkShadowType shadow_type GdkRectangle* area GtkWidget* widget gchar* detail gint x gint y gint width gint height")
(CFNC "void gtk_paint_polygon GtkStyle* style GdkWindow* window GtkStateType state_type GtkShadowType shadow_type GdkRectangle* area GtkWidget* widget gchar* detail GdkPoint* points gint npoints gboolean fill")
(CFNC "void gtk_paint_arrow GtkStyle* style GdkWindow* window GtkStateType state_type GtkShadowType shadow_type GdkRectangle* area GtkWidget* widget gchar* detail GtkArrowType arrow_type gboolean fill gint x gint y gint width gint height")
(CFNC "void gtk_paint_diamond GtkStyle* style GdkWindow* window GtkStateType state_type GtkShadowType shadow_type GdkRectangle* area GtkWidget* widget gchar* detail gint x gint y gint width gint height")
(CFNC "void gtk_paint_box GtkStyle* style GdkWindow* window GtkStateType state_type GtkShadowType shadow_type GdkRectangle* area GtkWidget* widget gchar* detail gint x gint y gint width gint height")
(CFNC "void gtk_paint_flat_box GtkStyle* style GdkWindow* window GtkStateType state_type GtkShadowType shadow_type GdkRectangle* area GtkWidget* widget gchar* detail gint x gint y gint width gint height")
(CFNC "void gtk_paint_check GtkStyle* style GdkWindow* window GtkStateType state_type GtkShadowType shadow_type GdkRectangle* area GtkWidget* widget gchar* detail gint x gint y gint width gint height")
(CFNC "void gtk_paint_option GtkStyle* style GdkWindow* window GtkStateType state_type GtkShadowType shadow_type GdkRectangle* area GtkWidget* widget gchar* detail gint x gint y gint width gint height")
(CFNC "void gtk_paint_tab GtkStyle* style GdkWindow* window GtkStateType state_type GtkShadowType shadow_type GdkRectangle* area GtkWidget* widget gchar* detail gint x gint y gint width gint height")
(CFNC "void gtk_paint_shadow_gap GtkStyle* style GdkWindow* window GtkStateType state_type GtkShadowType shadow_type GdkRectangle* area GtkWidget* widget gchar* detail gint x gint y gint width gint height GtkPositionType gap_side gint gap_x gint gap_width")
(CFNC "void gtk_paint_box_gap GtkStyle* style GdkWindow* window GtkStateType state_type GtkShadowType shadow_type GdkRectangle* area GtkWidget* widget gchar* detail gint x gint y gint width gint height GtkPositionType gap_side gint gap_x gint gap_width")
(CFNC "void gtk_paint_extension GtkStyle* style GdkWindow* window GtkStateType state_type GtkShadowType shadow_type GdkRectangle* area GtkWidget* widget gchar* detail gint x gint y gint width gint height GtkPositionType gap_side")
(CFNC "void gtk_paint_focus GtkStyle* style GdkWindow* window GtkStateType state_type GdkRectangle* area GtkWidget* widget gchar* detail gint x gint y gint width gint height")
(CFNC "void gtk_paint_slider GtkStyle* style GdkWindow* window GtkStateType state_type GtkShadowType shadow_type GdkRectangle* area GtkWidget* widget gchar* detail gint x gint y gint width gint height GtkOrientation orientation")
(CFNC "void gtk_paint_handle GtkStyle* style GdkWindow* window GtkStateType state_type GtkShadowType shadow_type GdkRectangle* area GtkWidget* widget gchar* detail gint x gint y gint width gint height GtkOrientation orientation")
(CFNC "void gtk_paint_expander GtkStyle* style GdkWindow* window GtkStateType state_type GdkRectangle* area GtkWidget* widget gchar* detail gint x gint y GtkExpanderStyle expander_style")
(CFNC "void gtk_paint_layout GtkStyle* style GdkWindow* window GtkStateType state_type gboolean use_text GdkRectangle* area GtkWidget* widget gchar* detail gint x gint y PangoLayout* layout")
(CFNC "void gtk_paint_resize_grip GtkStyle* style GdkWindow* window GtkStateType state_type GdkRectangle* area GtkWidget* widget gchar* detail GdkWindowEdge edge gint x gint y gint width gint height")
(CFNC "GtkBorder* gtk_border_copy GtkBorder* border")
(CFNC "void gtk_border_free GtkBorder* border")
(CCAST "GTK_TABLE(obj)" "GtkTable*")
;(cdef "GTK_TABLE_CLASS(klass)")
(CCHK "GTK_IS_TABLE(obj)" "GtkTable*")
;(cdef1 "GTK_IS_TABLE_CLASS(klass)")
;(cdef "GTK_TABLE_GET_CLASS(obj)")
(CFNC "GtkType gtk_table_get_type void")
(CFNC "GtkWidget* gtk_table_new guint rows guint columns gboolean homogeneous")
(CFNC "void gtk_table_resize GtkTable* table guint rows guint columns")
(CFNC "void gtk_table_attach GtkTable* table GtkWidget* child guint left_attach guint right_attach guint top_attach guint bottom_attach GtkAttachOptions xoptions GtkAttachOptions yoptions guint xpadding guint ypadding")
(CFNC "void gtk_table_attach_defaults GtkTable* table GtkWidget* widget guint left_attach guint right_attach guint top_attach guint bottom_attach")
(CFNC "void gtk_table_set_row_spacing GtkTable* table guint row guint spacing")
(CFNC "guint gtk_table_get_row_spacing GtkTable* table guint row")
(CFNC "void gtk_table_set_col_spacing GtkTable* table guint column guint spacing")
(CFNC "guint gtk_table_get_col_spacing GtkTable* table guint column")
(CFNC "void gtk_table_set_row_spacings GtkTable* table guint spacing")
(CFNC "guint gtk_table_get_default_row_spacing GtkTable* table")
(CFNC "void gtk_table_set_col_spacings GtkTable* table guint spacing")
(CFNC "guint gtk_table_get_default_col_spacing GtkTable* table")
(CFNC "void gtk_table_set_homogeneous GtkTable* table gboolean homogeneous")
(CFNC "gboolean gtk_table_get_homogeneous GtkTable* table")
(CCAST "GTK_TEAROFF_MENU_ITEM(obj)" "GtkTearoffMenuItem*")
;(cdef "GTK_TEAROFF_MENU_ITEM_CLASS(klass)")
(CCHK "GTK_IS_TEAROFF_MENU_ITEM(obj)" "GtkTearoffMenuItem*")
;(cdef1 "GTK_IS_TEAROFF_MENU_ITEM_CLASS(klass)")
;(cdef "GTK_TEAROFF_MENU_ITEM_GET_CLASS(obj)")
(CFNC "GtkType gtk_tearoff_menu_item_get_type void")
(CFNC "GtkWidget* gtk_tearoff_menu_item_new void")
(CCAST "GTK_TEXT_BUFFER(obj)" "GtkTextBuffer*")
;(cdef "GTK_TEXT_BUFFER_CLASS(klass)")
(CCHK "GTK_IS_TEXT_BUFFER(obj)" "GtkTextBuffer*")
;(cdef1 "GTK_IS_TEXT_BUFFER_CLASS(klass)")
;(cdef "GTK_TEXT_BUFFER_GET_CLASS(obj)")
(CFNC "GType gtk_text_buffer_get_type void")
(CFNC "GtkTextBuffer* gtk_text_buffer_new GtkTextTagTable* table")
(CFNC "gint gtk_text_buffer_get_line_count GtkTextBuffer* buffer")
(CFNC "gint gtk_text_buffer_get_char_count GtkTextBuffer* buffer")
(CFNC "GtkTextTagTable* gtk_text_buffer_get_tag_table GtkTextBuffer* buffer")
(CFNC "void gtk_text_buffer_set_text GtkTextBuffer* buffer gchar* text gint len")
(CFNC "void gtk_text_buffer_insert GtkTextBuffer* buffer GtkTextIter* iter gchar* text gint len")
(CFNC "void gtk_text_buffer_insert_at_cursor GtkTextBuffer* buffer gchar* text gint len")
(CFNC "gboolean gtk_text_buffer_insert_interactive GtkTextBuffer* buffer GtkTextIter* iter gchar* text gint len gboolean default_editable")
(CFNC "gboolean gtk_text_buffer_insert_interactive_at_cursor GtkTextBuffer* buffer gchar* text gint len gboolean default_editable")
(CFNC "void gtk_text_buffer_insert_range GtkTextBuffer* buffer GtkTextIter* iter GtkTextIter* start GtkTextIter* end")
(CFNC "gboolean gtk_text_buffer_insert_range_interactive GtkTextBuffer* buffer GtkTextIter* iter GtkTextIter* start GtkTextIter* end gboolean default_editable")
(CFNC "void gtk_text_buffer_insert_with_tags GtkTextBuffer* buffer GtkTextIter* iter gchar* text gint len GtkTextTag* first_tag ...")
(CFNC "void gtk_text_buffer_insert_with_tags_by_name GtkTextBuffer* buffer GtkTextIter* iter gchar* text gint len gchar* first_tag_name ...")
(CFNC "void gtk_text_buffer_delete GtkTextBuffer* buffer GtkTextIter* start GtkTextIter* end")
(CFNC "gboolean gtk_text_buffer_delete_interactive GtkTextBuffer* buffer GtkTextIter* start_iter GtkTextIter* end_iter gboolean default_editable")
(CFNC "gchar* gtk_text_buffer_get_text GtkTextBuffer* buffer GtkTextIter* start GtkTextIter* end gboolean include_hidden_chars")
(CFNC "gchar* gtk_text_buffer_get_slice GtkTextBuffer* buffer GtkTextIter* start GtkTextIter* end gboolean include_hidden_chars")
(CFNC "void gtk_text_buffer_insert_pixbuf GtkTextBuffer* buffer GtkTextIter* iter GdkPixbuf* pixbuf")
(CFNC "void gtk_text_buffer_insert_child_anchor GtkTextBuffer* buffer GtkTextIter* iter GtkTextChildAnchor* anchor")
(CFNC "GtkTextChildAnchor* gtk_text_buffer_create_child_anchor GtkTextBuffer* buffer GtkTextIter* iter")
(CFNC "GtkTextMark* gtk_text_buffer_create_mark GtkTextBuffer* buffer gchar* mark_name GtkTextIter* where gboolean left_gravity")
(CFNC "void gtk_text_buffer_move_mark GtkTextBuffer* buffer GtkTextMark* mark GtkTextIter* where")
(CFNC "void gtk_text_buffer_delete_mark GtkTextBuffer* buffer GtkTextMark* mark")
(CFNC "GtkTextMark* gtk_text_buffer_get_mark GtkTextBuffer* buffer gchar* name")
(CFNC "void gtk_text_buffer_move_mark_by_name GtkTextBuffer* buffer gchar* name GtkTextIter* where")
(CFNC "void gtk_text_buffer_delete_mark_by_name GtkTextBuffer* buffer gchar* name")
(CFNC "GtkTextMark* gtk_text_buffer_get_insert GtkTextBuffer* buffer")
(CFNC "GtkTextMark* gtk_text_buffer_get_selection_bound GtkTextBuffer* buffer")
(CFNC "void gtk_text_buffer_place_cursor GtkTextBuffer* buffer GtkTextIter* where")
(CFNC "void gtk_text_buffer_apply_tag GtkTextBuffer* buffer GtkTextTag* tag GtkTextIter* start GtkTextIter* end")
(CFNC "void gtk_text_buffer_remove_tag GtkTextBuffer* buffer GtkTextTag* tag GtkTextIter* start GtkTextIter* end")
(CFNC "void gtk_text_buffer_apply_tag_by_name GtkTextBuffer* buffer gchar* name GtkTextIter* start GtkTextIter* end")
(CFNC "void gtk_text_buffer_remove_tag_by_name GtkTextBuffer* buffer gchar* name GtkTextIter* start GtkTextIter* end")
(CFNC "void gtk_text_buffer_remove_all_tags GtkTextBuffer* buffer GtkTextIter* start GtkTextIter* end")
(CFNC "GtkTextTag* gtk_text_buffer_create_tag GtkTextBuffer* buffer gchar* tag_name gchar* first_property_name ...")
(CFNC "void gtk_text_buffer_get_iter_at_line_offset GtkTextBuffer* buffer GtkTextIter* iter gint line_number gint char_offset")
(CFNC "void gtk_text_buffer_get_iter_at_line_index GtkTextBuffer* buffer GtkTextIter* iter gint line_number gint byte_index")
(CFNC "void gtk_text_buffer_get_iter_at_offset GtkTextBuffer* buffer GtkTextIter* iter gint char_offset")
(CFNC "void gtk_text_buffer_get_iter_at_line GtkTextBuffer* buffer GtkTextIter* iter gint line_number")
(CFNC "void gtk_text_buffer_get_start_iter GtkTextBuffer* buffer GtkTextIter* iter")
(CFNC "void gtk_text_buffer_get_end_iter GtkTextBuffer* buffer GtkTextIter* iter")
(CFNC "void gtk_text_buffer_get_bounds GtkTextBuffer* buffer GtkTextIter* start GtkTextIter* end")
(CFNC "void gtk_text_buffer_get_iter_at_mark GtkTextBuffer* buffer GtkTextIter* iter GtkTextMark* mark")
(CFNC "void gtk_text_buffer_get_iter_at_child_anchor GtkTextBuffer* buffer GtkTextIter* iter GtkTextChildAnchor* anchor")
(CFNC "gboolean gtk_text_buffer_get_modified GtkTextBuffer* buffer")
(CFNC "void gtk_text_buffer_set_modified GtkTextBuffer* buffer gboolean setting")
(CFNC "void gtk_text_buffer_add_selection_clipboard GtkTextBuffer* buffer GtkClipboard* clipboard")
(CFNC "void gtk_text_buffer_remove_selection_clipboard GtkTextBuffer* buffer GtkClipboard* clipboard")
(CFNC "void gtk_text_buffer_cut_clipboard GtkTextBuffer* buffer GtkClipboard* clipboard gboolean default_editable")
(CFNC "void gtk_text_buffer_copy_clipboard GtkTextBuffer* buffer GtkClipboard* clipboard")
(CFNC "void gtk_text_buffer_paste_clipboard GtkTextBuffer* buffer GtkClipboard* clipboard GtkTextIter* @override_location gboolean default_editable")
(CFNC "gboolean gtk_text_buffer_get_selection_bounds GtkTextBuffer* buffer GtkTextIter* start GtkTextIter* end")
(CFNC "gboolean gtk_text_buffer_delete_selection GtkTextBuffer* buffer gboolean interactive gboolean default_editable") 
(CFNC "void gtk_text_buffer_begin_user_action GtkTextBuffer* buffer")
(CFNC "void gtk_text_buffer_end_user_action GtkTextBuffer* buffer")
(CCAST "GTK_TEXT_CHILD_ANCHOR(object)" "GtkTextChildAnchor*")
;(cdef "GTK_TEXT_CHILD_ANCHOR_CLASS(klass)")
(CCHK "GTK_IS_TEXT_CHILD_ANCHOR(object)" "GtkTextChildAnchor*")
;(cdef1 "GTK_IS_TEXT_CHILD_ANCHOR_CLASS(klass)")
;(cdef "GTK_TEXT_CHILD_ANCHOR_GET_CLASS(obj)")
(CFNC "GType gtk_text_child_anchor_get_type void")
(CFNC "GtkTextChildAnchor* gtk_text_child_anchor_new void")
(CFNC "GList* gtk_text_child_anchor_get_widgets GtkTextChildAnchor* anchor")
(CFNC "gboolean gtk_text_child_anchor_get_deleted GtkTextChildAnchor* anchor")
(CFNC "GtkTextBuffer* gtk_text_iter_get_buffer GtkTextIter* iter")
(CFNC "GtkTextIter* gtk_text_iter_copy GtkTextIter* iter")
(CFNC "void gtk_text_iter_free GtkTextIter* iter")
(CFNC "gint gtk_text_iter_get_offset GtkTextIter* iter")
(CFNC "gint gtk_text_iter_get_line GtkTextIter* iter")
(CFNC "gint gtk_text_iter_get_line_offset GtkTextIter* iter")
(CFNC "gint gtk_text_iter_get_line_index GtkTextIter* iter")
(CFNC "gint gtk_text_iter_get_visible_line_offset GtkTextIter* iter")
(CFNC "gint gtk_text_iter_get_visible_line_index GtkTextIter* iter")
(CFNC "gunichar gtk_text_iter_get_char GtkTextIter* iter")
(CFNC "gchar* gtk_text_iter_get_slice GtkTextIter* start GtkTextIter* end")
(CFNC "gchar* gtk_text_iter_get_text GtkTextIter* start GtkTextIter* end")
(CFNC "gchar* gtk_text_iter_get_visible_slice GtkTextIter* start GtkTextIter* end")
(CFNC "gchar* gtk_text_iter_get_visible_text GtkTextIter* start GtkTextIter* end")
(CFNC "GdkPixbuf* gtk_text_iter_get_pixbuf GtkTextIter* iter")
(CFNC "GSList* gtk_text_iter_get_marks GtkTextIter* iter")
(CFNC "GtkTextChildAnchor* gtk_text_iter_get_child_anchor GtkTextIter* iter")
(CFNC "GSList* gtk_text_iter_get_toggled_tags GtkTextIter* iter gboolean toggled_on")
(CFNC "gboolean gtk_text_iter_begins_tag GtkTextIter* iter GtkTextTag* @tag")
(CFNC "gboolean gtk_text_iter_ends_tag GtkTextIter* iter GtkTextTag* @tag")
(CFNC "gboolean gtk_text_iter_toggles_tag GtkTextIter* iter GtkTextTag* tag")
(CFNC "gboolean gtk_text_iter_has_tag GtkTextIter* iter GtkTextTag* tag")
(CFNC "GSList* gtk_text_iter_get_tags GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_editable GtkTextIter* iter gboolean default_setting")
(CFNC "gboolean gtk_text_iter_can_insert GtkTextIter* iter gboolean default_editability")
(CFNC "gboolean gtk_text_iter_starts_word GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_ends_word GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_inside_word GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_starts_sentence GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_ends_sentence GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_inside_sentence GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_starts_line GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_ends_line GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_is_cursor_position GtkTextIter* iter")
(CFNC "gint gtk_text_iter_get_chars_in_line GtkTextIter* iter")
(CFNC "gint gtk_text_iter_get_bytes_in_line GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_get_attributes GtkTextIter* iter GtkTextAttributes* values")
(CFNC "PangoLanguage* gtk_text_iter_get_language GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_is_end GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_is_start GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_forward_char GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_backward_char GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_forward_chars GtkTextIter* iter gint count")
(CFNC "gboolean gtk_text_iter_backward_chars GtkTextIter* iter gint count")
(CFNC "gboolean gtk_text_iter_forward_line GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_backward_line GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_forward_lines GtkTextIter* iter gint count")
(CFNC "gboolean gtk_text_iter_backward_lines GtkTextIter* iter gint count")
(CFNC "gboolean gtk_text_iter_forward_word_end GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_backward_word_start GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_forward_word_ends GtkTextIter* iter gint count")
(CFNC "gboolean gtk_text_iter_backward_word_starts GtkTextIter* iter gint count")
(CFNC "gboolean gtk_text_iter_forward_sentence_end GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_backward_sentence_start GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_forward_sentence_ends GtkTextIter* iter gint count")
(CFNC "gboolean gtk_text_iter_backward_sentence_starts GtkTextIter* iter gint count")
(CFNC "gboolean gtk_text_iter_forward_cursor_position GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_backward_cursor_position GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_forward_cursor_positions GtkTextIter* iter gint count")
(CFNC "gboolean gtk_text_iter_backward_cursor_positions GtkTextIter* iter gint count")
(CFNC "void gtk_text_iter_set_offset GtkTextIter* iter gint char_offset")
(CFNC "void gtk_text_iter_set_line GtkTextIter* iter gint line_number")
(CFNC "void gtk_text_iter_set_line_offset GtkTextIter* iter gint char_on_line")
(CFNC "void gtk_text_iter_set_line_index GtkTextIter* iter gint byte_on_line")
(CFNC "void gtk_text_iter_forward_to_end GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_forward_to_line_end GtkTextIter* iter")
(CFNC "void gtk_text_iter_set_visible_line_offset GtkTextIter* iter gint char_on_line")
(CFNC "void gtk_text_iter_set_visible_line_index GtkTextIter* iter gint byte_on_line")
(CFNC "gboolean gtk_text_iter_forward_to_tag_toggle GtkTextIter* iter GtkTextTag* @tag")
(CFNC "gboolean gtk_text_iter_backward_to_tag_toggle GtkTextIter* iter GtkTextTag* @tag")
(CFNC "gboolean gtk_text_iter_forward_find_char GtkTextIter* iter GtkTextCharPredicate pred gpointer user_data GtkTextIter* @limit")
(CFNC "gboolean gtk_text_iter_backward_find_char GtkTextIter* iter GtkTextCharPredicate pred gpointer user_data GtkTextIter* @limit")
(CFNC "gboolean gtk_text_iter_forward_search GtkTextIter* iter gchar* str GtkTextSearchFlags flags GtkTextIter* @match_start GtkTextIter* @match_end GtkTextIter* @limit")
(CFNC "gboolean gtk_text_iter_backward_search GtkTextIter* iter gchar* str GtkTextSearchFlags flags GtkTextIter* @match_start GtkTextIter* @match_end GtkTextIter* @limit")
(CFNC "gboolean gtk_text_iter_equal GtkTextIter* lhs GtkTextIter* rhs")
(CFNC "gint gtk_text_iter_compare GtkTextIter* lhs GtkTextIter* rhs")
(CFNC "gboolean gtk_text_iter_in_range GtkTextIter* iter GtkTextIter* start GtkTextIter* end")
(CFNC "void gtk_text_iter_order GtkTextIter* first GtkTextIter* second")
(CCAST "GTK_TEXT_MARK(object)" "GtkTextMark*")
;(cdef "GTK_TEXT_MARK_CLASS(klass)")
(CCHK "GTK_IS_TEXT_MARK(object)" "GtkTextMark*")
;(cdef1 "GTK_IS_TEXT_MARK_CLASS(klass)")
;(cdef "GTK_TEXT_MARK_GET_CLASS(obj)")
(CFNC "GType gtk_text_mark_get_type void")
(CFNC "void gtk_text_mark_set_visible GtkTextMark* mark gboolean setting")
(CFNC "gboolean gtk_text_mark_get_visible GtkTextMark* mark")
(CFNC "char* gtk_text_mark_get_name GtkTextMark* mark")
(CFNC "gboolean gtk_text_mark_get_deleted GtkTextMark* mark")
(CFNC "GtkTextBuffer* gtk_text_mark_get_buffer GtkTextMark* mark")
(CFNC "gboolean gtk_text_mark_get_left_gravity GtkTextMark* mark")
(CCAST "GTK_TEXT_TAG(obj)" "GtkTextTag*")
;(cdef "GTK_TEXT_TAG_CLASS(klass)")
(CCHK "GTK_IS_TEXT_TAG(obj)" "GtkTextTag*")
;(cdef1 "GTK_IS_TEXT_TAG_CLASS(klass)")
;(cdef "GTK_TEXT_TAG_GET_CLASS(obj)")
(CFNC "GType gtk_text_tag_get_type void")
(CFNC "GtkTextTag* gtk_text_tag_new gchar* name")
(CFNC "gint gtk_text_tag_get_priority GtkTextTag* tag")
(CFNC "void gtk_text_tag_set_priority GtkTextTag* tag gint priority")
(CFNC "gboolean gtk_text_tag_event GtkTextTag* tag GObject* event_object GdkEvent* event GtkTextIter* iter")
(CFNC "GtkTextAttributes* gtk_text_attributes_new void")
(CFNC "GtkTextAttributes* gtk_text_attributes_copy GtkTextAttributes* src")
(CFNC "void gtk_text_attributes_copy_values GtkTextAttributes* src GtkTextAttributes* dest")
(CFNC "void gtk_text_attributes_unref GtkTextAttributes* values")
(CFNC "void gtk_text_attributes_ref GtkTextAttributes* values")
(CCAST "GTK_TEXT_TAG_TABLE(obj)" "GtkTextTagTable*")
;(cdef "GTK_TEXT_TAG_TABLE_CLASS(klass)")
(CCHK "GTK_IS_TEXT_TAG_TABLE(obj)" "GtkTextTagTable*")
;(cdef1 "GTK_IS_TEXT_TAG_TABLE_CLASS(klass)")
;(cdef "GTK_TEXT_TAG_TABLE_GET_CLASS(obj)")
(CFNC "GType gtk_text_tag_table_get_type void")
(CFNC "GtkTextTagTable* gtk_text_tag_table_new void")
(CFNC "void gtk_text_tag_table_add GtkTextTagTable* table GtkTextTag* tag")
(CFNC "void gtk_text_tag_table_remove GtkTextTagTable* table GtkTextTag* tag")
(CFNC "GtkTextTag* gtk_text_tag_table_lookup GtkTextTagTable* table gchar* name")
(CFNC "void gtk_text_tag_table_foreach GtkTextTagTable* table GtkTextTagTableForeach func gpointer data")
(CFNC "gint gtk_text_tag_table_get_size GtkTextTagTable* table")
;(CFNC "gboolean gtk_text_byte_begins_utf8_char gchar* byte")
(CCAST "GTK_TEXT_VIEW(obj)" "GtkTextView*")
;(cdef "GTK_TEXT_VIEW_CLASS(klass)")
(CCHK "GTK_IS_TEXT_VIEW(obj)" "GtkTextView*")
;(cdef1 "GTK_IS_TEXT_VIEW_CLASS(klass)")
;(cdef "GTK_TEXT_VIEW_GET_CLASS(obj)")
(CINT "GTK_TEXT_WINDOW_PRIVATE" "GtkTextWindowType")
(CINT "GTK_TEXT_WINDOW_WIDGET" "GtkTextWindowType")
(CINT "GTK_TEXT_WINDOW_TEXT" "GtkTextWindowType")
(CINT "GTK_TEXT_WINDOW_LEFT" "GtkTextWindowType")
(CINT "GTK_TEXT_WINDOW_RIGHT" "GtkTextWindowType")
(CINT "GTK_TEXT_WINDOW_TOP" "GtkTextWindowType")
(CINT "GTK_TEXT_WINDOW_BOTTOM" "GtkTextWindowType")
(CINT "GTK_TEXT_VIEW_PRIORITY_VALIDATE")
(CFNC "GtkType gtk_text_view_get_type void")
(CFNC "GtkWidget* gtk_text_view_new void")
(CFNC "GtkWidget* gtk_text_view_new_with_buffer GtkTextBuffer* buffer")
(CFNC "void gtk_text_view_set_buffer GtkTextView* text_view GtkTextBuffer* buffer")
(CFNC "GtkTextBuffer* gtk_text_view_get_buffer GtkTextView* text_view")
(CFNC "gboolean gtk_text_view_scroll_to_iter GtkTextView* text_view GtkTextIter* iter gdouble within_margin gboolean use_align gdouble xalign gdouble yalign")
(CFNC "void gtk_text_view_scroll_to_mark GtkTextView* text_view GtkTextMark* mark gdouble within_margin gboolean use_align gdouble xalign gdouble yalign")
(CFNC "void gtk_text_view_scroll_mark_onscreen GtkTextView* text_view GtkTextMark* mark")
(CFNC "gboolean gtk_text_view_move_mark_onscreen GtkTextView* text_view GtkTextMark* mark")
(CFNC "gboolean gtk_text_view_place_cursor_onscreen GtkTextView* text_view")
(CFNC "void gtk_text_view_get_visible_rect GtkTextView* text_view GdkRectangle* visible_rect")
(CFNC "void gtk_text_view_set_cursor_visible GtkTextView* text_view gboolean setting")
(CFNC "gboolean gtk_text_view_get_cursor_visible GtkTextView* text_view")
(CFNC "void gtk_text_view_get_iter_location GtkTextView* text_view GtkTextIter* iter GdkRectangle* location")
(CFNC "void gtk_text_view_get_iter_at_location GtkTextView* text_view GtkTextIter* iter gint x gint y")
(CFNC "void gtk_text_view_get_line_yrange GtkTextView* text_view GtkTextIter* iter gint* y gint* height")
(CFNC "void gtk_text_view_get_line_at_y GtkTextView* text_view GtkTextIter* target_iter gint y gint* [line_top]")
(CFNC "void gtk_text_view_buffer_to_window_coords GtkTextView* text_view GtkTextWindowType win gint buffer_x gint buffer_y gint* [window_x] gint* [window_y]")
(CFNC "void gtk_text_view_window_to_buffer_coords GtkTextView* text_view GtkTextWindowType win gint window_x gint window_y gint* [buffer_x] gint* [buffer_y]")
(CFNC "GdkWindow* gtk_text_view_get_window GtkTextView* text_view GtkTextWindowType win")
(CFNC "GtkTextWindowType gtk_text_view_get_window_type GtkTextView* text_view GdkWindow* window")
(CFNC "void gtk_text_view_set_border_window_size GtkTextView* text_view GtkTextWindowType type gint size")
(CFNC "gint gtk_text_view_get_border_window_size GtkTextView* text_view GtkTextWindowType type")
(CFNC "gboolean gtk_text_view_forward_display_line GtkTextView* text_view GtkTextIter* iter")
(CFNC "gboolean gtk_text_view_backward_display_line GtkTextView* text_view GtkTextIter* iter")
(CFNC "gboolean gtk_text_view_forward_display_line_end GtkTextView* text_view GtkTextIter* iter")
(CFNC "gboolean gtk_text_view_backward_display_line_start GtkTextView* text_view GtkTextIter* iter")
(CFNC "gboolean gtk_text_view_starts_display_line GtkTextView* text_view GtkTextIter* iter")
(CFNC "gboolean gtk_text_view_move_visually GtkTextView* text_view GtkTextIter* iter gint count")
(CFNC "void gtk_text_view_add_child_at_anchor GtkTextView* text_view GtkWidget* child GtkTextChildAnchor* anchor")
(CFNC "void gtk_text_view_add_child_in_window GtkTextView* text_view GtkWidget* child GtkTextWindowType which_window gint xpos gint ypos")
(CFNC "void gtk_text_view_move_child GtkTextView* text_view GtkWidget* child gint xpos gint ypos")
(CFNC "void gtk_text_view_set_wrap_mode GtkTextView* text_view GtkWrapMode wrap_mode")
(CFNC "GtkWrapMode gtk_text_view_get_wrap_mode GtkTextView* text_view")
(CFNC "void gtk_text_view_set_editable GtkTextView* text_view gboolean setting")
(CFNC "gboolean gtk_text_view_get_editable GtkTextView* text_view")
(CFNC "void gtk_text_view_set_pixels_above_lines GtkTextView* text_view gint pixels_above_lines")
(CFNC "gint gtk_text_view_get_pixels_above_lines GtkTextView* text_view")
(CFNC "void gtk_text_view_set_pixels_below_lines GtkTextView* text_view gint pixels_below_lines")
(CFNC "gint gtk_text_view_get_pixels_below_lines GtkTextView* text_view")
(CFNC "void gtk_text_view_set_pixels_inside_wrap GtkTextView* text_view gint pixels_inside_wrap")
(CFNC "gint gtk_text_view_get_pixels_inside_wrap GtkTextView* text_view")
(CFNC "void gtk_text_view_set_justification GtkTextView* text_view GtkJustification justification")
(CFNC "GtkJustification gtk_text_view_get_justification GtkTextView* text_view")
(CFNC "void gtk_text_view_set_left_margin GtkTextView* text_view gint left_margin")
(CFNC "gint gtk_text_view_get_left_margin GtkTextView* text_view")
(CFNC "void gtk_text_view_set_right_margin GtkTextView* text_view gint right_margin")
(CFNC "gint gtk_text_view_get_right_margin GtkTextView* text_view")
(CFNC "void gtk_text_view_set_indent GtkTextView* text_view gint indent")
(CFNC "gint gtk_text_view_get_indent GtkTextView* text_view")
(CFNC "void gtk_text_view_set_tabs GtkTextView* text_view PangoTabArray* tabs")
(CFNC "PangoTabArray* gtk_text_view_get_tabs GtkTextView* text_view")
(CFNC "GtkTextAttributes* gtk_text_view_get_default_attributes GtkTextView* text_view")
;(CCAST "GTK_THEME_ENGINE(theme_engine)" "GtkThemeEngine*")
;(CCHK "GTK_IS_THEME_ENGINE(theme_engine)" "GtkThemeEngine*")
;(CFNC "GType gtk_theme_engine_get_type void")
;(CFNC "GtkThemeEngine* gtk_theme_engine_get gchar* name")
;(CFNC "GtkRcStyle* gtk_theme_engine_create_rc_style GtkThemeEngine* engine")
(CCAST "GTK_TOGGLE_BUTTON(obj)" "GtkToggleButton*")
;(cdef "GTK_TOGGLE_BUTTON_CLASS(klass)")
(CCHK "GTK_IS_TOGGLE_BUTTON(obj)" "GtkToggleButton*")
;(cdef1 "GTK_IS_TOGGLE_BUTTON_CLASS(klass)")
;(cdef "GTK_TOGGLE_BUTTON_GET_CLASS(obj)")
(CFNC "GtkType gtk_toggle_button_get_type void")
(CFNC "GtkWidget* gtk_toggle_button_new void")
(CFNC "GtkWidget* gtk_toggle_button_new_with_label gchar* label")
(CFNC "GtkWidget* gtk_toggle_button_new_with_mnemonic gchar* label")
(CFNC "void gtk_toggle_button_set_mode GtkToggleButton* toggle_button gboolean draw_indicator")
(CFNC "gboolean gtk_toggle_button_get_mode GtkToggleButton* toggle_button")
(CFNC "void gtk_toggle_button_set_active GtkToggleButton* toggle_button gboolean is_active")
(CFNC "gboolean gtk_toggle_button_get_active GtkToggleButton* toggle_button")
(CFNC "void gtk_toggle_button_toggled GtkToggleButton* toggle_button")
(CFNC "void gtk_toggle_button_set_inconsistent GtkToggleButton* toggle_button gboolean setting")
(CFNC "gboolean gtk_toggle_button_get_inconsistent GtkToggleButton* toggle_button")
(CCAST "GTK_TOOLBAR(obj)" "GtkToolbar*")
;(cdef "GTK_TOOLBAR_CLASS(klass)")
(CCHK "GTK_IS_TOOLBAR(obj)" "GtkToolbar*")
;(cdef1 "GTK_IS_TOOLBAR_CLASS(klass)")
;(cdef "GTK_TOOLBAR_GET_CLASS(obj)")
(CINT "GTK_TOOLBAR_CHILD_SPACE" "GtkToolbarChildType")
(CINT "GTK_TOOLBAR_CHILD_BUTTON" "GtkToolbarChildType")
(CINT "GTK_TOOLBAR_CHILD_TOGGLEBUTTON" "GtkToolbarChildType")
(CINT "GTK_TOOLBAR_CHILD_RADIOBUTTON" "GtkToolbarChildType")
(CINT "GTK_TOOLBAR_CHILD_WIDGET" "GtkToolbarChildType")
(CINT "GTK_TOOLBAR_SPACE_EMPTY" "GtkToolbarSpaceStyle")
(CINT "GTK_TOOLBAR_SPACE_LINE" "GtkToolbarSpaceStyle")
(CFNC "GtkType gtk_toolbar_get_type void")
(CFNC "GtkWidget* gtk_toolbar_new void")

(CFNC "GtkWidget* gtk_toolbar_append_item GtkToolbar* toolbar char* text char* tooltip_text char* tooltip_private_text GtkWidget* icon GtkSignalFunc func lambda_data #func_data")
(CFNC "GtkWidget* gtk_toolbar_prepend_item GtkToolbar* toolbar char* text char* tooltip_text char* tooltip_private_text GtkWidget* icon GtkSignalFunc func lambda_data #func_data")
(CFNC "GtkWidget* gtk_toolbar_insert_item GtkToolbar* toolbar char* text char* tooltip_text char* tooltip_private_text GtkWidget* icon GtkSignalFunc func lambda_data func_data gint position")
(CFNC "GtkWidget* gtk_toolbar_insert_stock GtkToolbar* toolbar gchar* stock_id char* tooltip_text char* tooltip_private_text GtkSignalFunc func lambda_data func_data gint position")
(CFNC "void gtk_toolbar_append_space GtkToolbar* toolbar")
(CFNC "void gtk_toolbar_prepend_space GtkToolbar* toolbar")
(CFNC "void gtk_toolbar_insert_space GtkToolbar* toolbar gint position")
(CFNC "void gtk_toolbar_remove_space GtkToolbar* toolbar gint position")
(CFNC "GtkWidget* gtk_toolbar_append_element GtkToolbar* toolbar GtkToolbarChildType type GtkWidget* widget char* text char* tooltip_text char* tooltip_private_text GtkWidget* icon GtkSignalFunc func lambda_data #func_data")
(CFNC "GtkWidget* gtk_toolbar_prepend_element GtkToolbar* toolbar GtkToolbarChildType type GtkWidget* widget char* text char* tooltip_text char* tooltip_private_text GtkWidget* icon GtkSignalFunc func lambda_data #func_data")
(CFNC "GtkWidget* gtk_toolbar_insert_element GtkToolbar* toolbar GtkToolbarChildType type GtkWidget* @widget char* text char* tooltip_text char* tooltip_private_text GtkWidget* icon GtkSignalFunc func lambda_data func_data gint position")
(CFNC "void gtk_toolbar_append_widget GtkToolbar* toolbar GtkWidget* widget char* tooltip_text char* tooltip_private_text")
(CFNC "void gtk_toolbar_prepend_widget GtkToolbar* toolbar GtkWidget* widget char* tooltip_text char* tooltip_private_text")
(CFNC "void gtk_toolbar_insert_widget GtkToolbar* toolbar GtkWidget* widget char* tooltip_text char* tooltip_private_text gint position")

(CFNC "void gtk_toolbar_set_orientation GtkToolbar* toolbar GtkOrientation orientation")
(CFNC "void gtk_toolbar_set_style GtkToolbar* toolbar GtkToolbarStyle style")
(CFNC "void gtk_toolbar_set_icon_size GtkToolbar* toolbar GtkIconSize icon_size")
(CFNC "void gtk_toolbar_set_tooltips GtkToolbar* toolbar gboolean enable")
(CFNC "void gtk_toolbar_unset_style GtkToolbar* toolbar")
(CFNC "void gtk_toolbar_unset_icon_size GtkToolbar* toolbar")
(CFNC "GtkOrientation gtk_toolbar_get_orientation GtkToolbar* toolbar")
(CFNC "GtkToolbarStyle gtk_toolbar_get_style GtkToolbar* toolbar")
(CFNC "GtkIconSize gtk_toolbar_get_icon_size GtkToolbar* toolbar")
(CFNC "gboolean gtk_toolbar_get_tooltips GtkToolbar* toolbar")
(CCAST "GTK_TOOLTIPS(obj)" "GtkTooltips*")
;(cdef "GTK_TOOLTIPS_CLASS(klass)")
(CCHK "GTK_IS_TOOLTIPS(obj)" "GtkTooltips*")
;(cdef1 "GTK_IS_TOOLTIPS_CLASS(klass)")
;(cdef "GTK_TOOLTIPS_GET_CLASS(obj)")
(CFNC "GtkType gtk_tooltips_get_type void")
(CFNC "GtkTooltips* gtk_tooltips_new void")
(CFNC "void gtk_tooltips_enable GtkTooltips* tooltips")
(CFNC "void gtk_tooltips_disable GtkTooltips* tooltips")
(CFNC "void gtk_tooltips_set_tip GtkTooltips* tooltips GtkWidget* widget gchar* tip_text gchar* tip_private")
(CFNC "GtkTooltipsData* gtk_tooltips_data_get GtkWidget* widget")
(CFNC "void gtk_tooltips_force_window GtkTooltips* tooltips")
(CCAST "GTK_TREE_DRAG_SOURCE(obj)" "GtkTreeDragSource*")
(CCHK "GTK_IS_TREE_DRAG_SOURCE(obj)" "GtkTreeDragSource*")
;(CCAST2 "GTK_TREE_DRAG_SOURCE_GET_IFACE(obj)")
(CFNC "GType gtk_tree_drag_source_get_type void")
(CFNC "gboolean gtk_tree_drag_source_row_draggable GtkTreeDragSource* drag_source GtkTreePath* path")
(CFNC "gboolean gtk_tree_drag_source_drag_data_delete GtkTreeDragSource* drag_source GtkTreePath* path")
(CFNC "gboolean gtk_tree_drag_source_drag_data_get GtkTreeDragSource* drag_source GtkTreePath* path GtkSelectionData* selection_data")
(CCAST "GTK_TREE_DRAG_DEST(obj)" "GtkTreeDragDest*")
(CCHK "GTK_IS_TREE_DRAG_DEST(obj)" "GtkTreeDragDest*")
;(CCAST2 "GTK_TREE_DRAG_DEST_GET_IFACE(obj)")
(CFNC "GType gtk_tree_drag_dest_get_type void")
(CFNC "gboolean gtk_tree_drag_dest_drag_data_received GtkTreeDragDest* drag_dest GtkTreePath* dest GtkSelectionData* selection_data")
(CFNC "gboolean gtk_tree_drag_dest_row_drop_possible GtkTreeDragDest* drag_dest GtkTreePath* dest_path GtkSelectionData* selection_data")
(CFNC "gboolean gtk_tree_set_row_drag_data GtkSelectionData* selection_data GtkTreeModel* tree_model GtkTreePath* path")
(CFNC "gboolean gtk_tree_get_row_drag_data GtkSelectionData* selection_data GtkTreeModel** [tree_model] GtkTreePath** [path]")
(CCAST "GTK_TREE_MODEL(obj)" "GtkTreeModel*")
(CCHK "GTK_IS_TREE_MODEL(obj)" "GtkTreeModel*")
;(CCAST2 "GTK_TREE_MODEL_GET_IFACE(obj)")
(CINT "GTK_TREE_MODEL_ITERS_PERSIST")
(CINT "GTK_TREE_MODEL_LIST_ONLY")
(CFNC "GtkTreePath* gtk_tree_path_new void")
(CFNC "GtkTreePath* gtk_tree_path_new_from_string gchar* path")
(CFNC "gchar* gtk_tree_path_to_string GtkTreePath* path")
(CFNC "GtkTreePath* gtk_tree_path_new_root void")
(CFNC "GtkTreePath* gtk_tree_path_new_first void")
(CFNC "void gtk_tree_path_append_index GtkTreePath* path gint index")
(CFNC "void gtk_tree_path_prepend_index GtkTreePath* path gint index")
(CFNC "gint gtk_tree_path_get_depth GtkTreePath* path")
(CFNC "gint* gtk_tree_path_get_indices GtkTreePath* path")
(CFNC "void gtk_tree_path_free GtkTreePath* path")
(CFNC "GtkTreePath* gtk_tree_path_copy GtkTreePath* path")
(CFNC "gint gtk_tree_path_compare GtkTreePath* a GtkTreePath* b")
(CFNC "void gtk_tree_path_next GtkTreePath* path")
(CFNC "gboolean gtk_tree_path_prev GtkTreePath* path")
(CFNC "gboolean gtk_tree_path_up GtkTreePath* path")
(CFNC "void gtk_tree_path_down GtkTreePath* path")
(CFNC "gboolean gtk_tree_path_is_ancestor GtkTreePath* path GtkTreePath* descendant")
(CFNC "gboolean gtk_tree_path_is_descendant GtkTreePath* path GtkTreePath* ancestor")
(CFNC "GtkTreeRowReference* gtk_tree_row_reference_new GtkTreeModel* model GtkTreePath* path")
;;; where is this function? (CFNC-22 "GType gtk_tree_row_reference_get_type void")
(CFNC "GtkTreeRowReference* gtk_tree_row_reference_new_proxy GObject* proxy GtkTreeModel* model GtkTreePath* path")
(CFNC "GtkTreePath* gtk_tree_row_reference_get_path GtkTreeRowReference* reference")
(CFNC "gboolean gtk_tree_row_reference_valid GtkTreeRowReference* reference")
(CFNC "void gtk_tree_row_reference_free GtkTreeRowReference* reference")
(CFNC "void gtk_tree_row_reference_inserted GObject* proxy GtkTreePath* path")
(CFNC "void gtk_tree_row_reference_deleted GObject* proxy GtkTreePath* path")
(CFNC "void gtk_tree_row_reference_reordered GObject* proxy GtkTreePath* path GtkTreeIter* iter gint* new_order")
(CFNC "GtkTreeIter* gtk_tree_iter_copy GtkTreeIter* iter")
(CFNC "void gtk_tree_iter_free GtkTreeIter* iter")
(CFNC "GtkType gtk_tree_model_get_type void")
(CFNC "GtkTreeModelFlags gtk_tree_model_get_flags GtkTreeModel* tree_model")
(CFNC "gint gtk_tree_model_get_n_columns GtkTreeModel* tree_model")
(CFNC "GType gtk_tree_model_get_column_type GtkTreeModel* tree_model gint index")
(CFNC "gboolean gtk_tree_model_get_iter GtkTreeModel* tree_model GtkTreeIter* iter GtkTreePath* path")
(CFNC "gboolean gtk_tree_model_get_iter_from_string GtkTreeModel* tree_model GtkTreeIter* iter gchar* path_string")
(CFNC "gboolean gtk_tree_model_get_iter_root GtkTreeModel* tree_model GtkTreeIter* iter")
(CFNC "gboolean gtk_tree_model_get_iter_first GtkTreeModel* tree_model GtkTreeIter* iter")
(CFNC "GtkTreePath* gtk_tree_model_get_path GtkTreeModel* tree_model GtkTreeIter* iter")
(CFNC "void gtk_tree_model_get_value GtkTreeModel* tree_model GtkTreeIter* iter gint column GValue* value")
(CFNC "gboolean gtk_tree_model_iter_next GtkTreeModel* tree_model GtkTreeIter* iter")
(CFNC "gboolean gtk_tree_model_iter_children GtkTreeModel* tree_model GtkTreeIter* iter GtkTreeIter* parent")
(CFNC "gboolean gtk_tree_model_iter_has_child GtkTreeModel* tree_model GtkTreeIter* iter")
(CFNC "gint gtk_tree_model_iter_n_children GtkTreeModel* tree_model GtkTreeIter* @iter")
(CFNC "gboolean gtk_tree_model_iter_nth_child GtkTreeModel* tree_model GtkTreeIter* iter GtkTreeIter* @parent gint n")
(CFNC "gboolean gtk_tree_model_iter_parent GtkTreeModel* tree_model GtkTreeIter* iter GtkTreeIter* child")
(CFNC "void gtk_tree_model_ref_node GtkTreeModel* tree_model GtkTreeIter* iter")
(CFNC "void gtk_tree_model_unref_node GtkTreeModel* tree_model GtkTreeIter* iter")
(CFNC "void gtk_tree_model_get GtkTreeModel* tree_model GtkTreeIter* iter ...")
;;;;(CFNC "void gtk_tree_model_get_valist GtkTreeModel* tree_model GtkTreeIter* iter va_list var_args")
(CFNC "void gtk_tree_model_foreach GtkTreeModel* model GtkTreeModelForeachFunc func lambda_data #func_data")
(CFNC "void gtk_tree_model_row_changed GtkTreeModel* tree_model GtkTreePath* path GtkTreeIter* iter")
(CFNC "void gtk_tree_model_row_inserted GtkTreeModel* tree_model GtkTreePath* path GtkTreeIter* iter")
(CFNC "void gtk_tree_model_row_has_child_toggled GtkTreeModel* tree_model GtkTreePath* path GtkTreeIter* iter")
(CFNC "void gtk_tree_model_row_deleted GtkTreeModel* tree_model GtkTreePath* path")
(CFNC "void gtk_tree_model_rows_reordered GtkTreeModel* tree_model GtkTreePath* path GtkTreeIter* iter gint* new_order")
(CCAST "GTK_TREE_MODEL_SORT(obj)" "GtkTreeModelSort*")
;(cdef "GTK_TREE_MODEL_SORT_CLASS(klass)")
(CCHK "GTK_IS_TREE_MODEL_SORT(obj)" "GtkTreeModelSort*")
;(cdef1 "GTK_IS_TREE_MODEL_SORT_CLASS(klass)")
;(cdef "GTK_TREE_MODEL_SORT_GET_CLASS(obj)")
(CFNC "GType gtk_tree_model_sort_get_type void")
(CFNC "GtkTreeModel* gtk_tree_model_sort_new_with_model GtkTreeModel* child_model")
(CFNC "GtkTreeModel* gtk_tree_model_sort_get_model GtkTreeModelSort* tree_model")
(CFNC "GtkTreePath* gtk_tree_model_sort_convert_child_path_to_path GtkTreeModelSort* tree_model_sort GtkTreePath* child_path")
(CFNC "void gtk_tree_model_sort_convert_child_iter_to_iter GtkTreeModelSort* tree_model_sort GtkTreeIter* sort_iter GtkTreeIter* child_iter")
(CFNC "GtkTreePath* gtk_tree_model_sort_convert_path_to_child_path GtkTreeModelSort* tree_model_sort GtkTreePath* sorted_path")
(CFNC "void gtk_tree_model_sort_convert_iter_to_child_iter GtkTreeModelSort* tree_model_sort GtkTreeIter* child_iter GtkTreeIter* sorted_iter")
(CFNC "void gtk_tree_model_sort_reset_default_sort_func GtkTreeModelSort* tree_model_sort")
(CFNC "void gtk_tree_model_sort_clear_cache GtkTreeModelSort* tree_model_sort")
(CCAST "GTK_TREE_SELECTION(obj)" "GtkTreeSelection*")
;(cdef "GTK_TREE_SELECTION_CLASS(klass)")
(CCHK "GTK_IS_TREE_SELECTION(obj)" "GtkTreeSelection*")
;(cdef1 "GTK_IS_TREE_SELECTION_CLASS(klass)")
;(cdef "GTK_TREE_SELECTION_GET_CLASS(obj)")
(CFNC "GtkType gtk_tree_selection_get_type void")
(CFNC "void gtk_tree_selection_set_mode GtkTreeSelection* selection GtkSelectionMode type")
(CFNC "GtkSelectionMode gtk_tree_selection_get_mode GtkTreeSelection* selection")
(CFNC "void gtk_tree_selection_set_select_function GtkTreeSelection* selection GtkTreeSelectionFunc func lambda_data func_data GtkDestroyNotify destroy")
(CFNC "gpointer gtk_tree_selection_get_user_data GtkTreeSelection* selection")
(CFNC "GtkTreeView* gtk_tree_selection_get_tree_view GtkTreeSelection* selection")
(CFNC "gboolean gtk_tree_selection_get_selected GtkTreeSelection* selection GtkTreeModel** model GtkTreeIter* iter")
(CFNC "void gtk_tree_selection_selected_foreach GtkTreeSelection* selection GtkTreeSelectionForeachFunc func lambda_data #func_data")
(CFNC "void gtk_tree_selection_select_path GtkTreeSelection* selection GtkTreePath* path")
(CFNC "void gtk_tree_selection_unselect_path GtkTreeSelection* selection GtkTreePath* path")
(CFNC "void gtk_tree_selection_select_iter GtkTreeSelection* selection GtkTreeIter* iter")
(CFNC "void gtk_tree_selection_unselect_iter GtkTreeSelection* selection GtkTreeIter* iter")
(CFNC "gboolean gtk_tree_selection_path_is_selected GtkTreeSelection* selection GtkTreePath* path")
(CFNC "gboolean gtk_tree_selection_iter_is_selected GtkTreeSelection* selection GtkTreeIter* iter")
(CFNC "void gtk_tree_selection_select_all GtkTreeSelection* selection")
(CFNC "void gtk_tree_selection_unselect_all GtkTreeSelection* selection")
(CFNC "void gtk_tree_selection_select_range GtkTreeSelection* selection GtkTreePath* start_path GtkTreePath* end_path")
(CCAST "GTK_TREE_SORTABLE(obj)" "GtkTreeSortable*")
;(cdef "GTK_TREE_SORTABLE_CLASS(obj)")
(CCHK "GTK_IS_TREE_SORTABLE(obj)" "GtkTreeSortable*")
;(CCAST2 "GTK_TREE_SORTABLE_GET_IFACE(obj)")
(CFNC "GType gtk_tree_sortable_get_type void")
(CFNC "void gtk_tree_sortable_sort_column_changed GtkTreeSortable* sortable")
(CFNC "gboolean gtk_tree_sortable_get_sort_column_id GtkTreeSortable* sortable gint* sort_column_id GtkSortType* order")
(CFNC "void gtk_tree_sortable_set_sort_column_id GtkTreeSortable* sortable gint sort_column_id GtkSortType order")
(CFNC "void gtk_tree_sortable_set_sort_func GtkTreeSortable* sortable gint sort_column_id GtkTreeIterCompareFunc func lambda_data func_data GtkDestroyNotify destroy")
;;       typedef void (*GtkCallbackMarshal) (GtkObject *object,gpointer data,guint n_args,GtkArg *args)
(CFNC "void gtk_tree_sortable_set_default_sort_func GtkTreeSortable* sortable GtkTreeIterCompareFunc func lambda_data func_data GtkDestroyNotify destroy")
(CFNC "gboolean gtk_tree_sortable_has_default_sort_func GtkTreeSortable* sortable")
(CCAST "GTK_TREE_STORE(obj)" "GtkTreeStore*")
;(cdef "GTK_TREE_STORE_CLASS(klass)")
(CCHK "GTK_IS_TREE_STORE(obj)" "GtkTreeStore*")
;(cdef1 "GTK_IS_TREE_STORE_CLASS(klass)")
;(cdef "GTK_TREE_STORE_GET_CLASS(obj)")
(CFNC "GtkType gtk_tree_store_get_type void")
(CFNC "GtkTreeStore* gtk_tree_store_new gint n_columns ...")
(CFNC "GtkTreeStore* gtk_tree_store_newv gint n_columns GType* types")
(CFNC "void gtk_tree_store_set_column_types GtkTreeStore* tree_store gint n_columns GType* types")
(CFNC "void gtk_tree_store_set_value GtkTreeStore* tree_store GtkTreeIter* iter gint column GValue* value")
(CFNC "void gtk_tree_store_set GtkTreeStore* tree_store GtkTreeIter* iter ...")
;;;;(CFNC "void gtk_tree_store_set_valist GtkTreeStore* tree_store GtkTreeIter* iter va_list var_args")
(CFNC "void gtk_tree_store_remove GtkTreeStore* tree_store GtkTreeIter* iter")
(CFNC "void gtk_tree_store_insert GtkTreeStore* tree_store GtkTreeIter* iter GtkTreeIter* @parent gint position")
(CFNC "void gtk_tree_store_insert_before GtkTreeStore* tree_store GtkTreeIter* iter GtkTreeIter* @parent GtkTreeIter* @sibling")
(CFNC "void gtk_tree_store_insert_after GtkTreeStore* tree_store GtkTreeIter* iter GtkTreeIter* @parent GtkTreeIter* @sibling")
(CFNC "void gtk_tree_store_prepend GtkTreeStore* tree_store GtkTreeIter* iter GtkTreeIter* @parent")
(CFNC "void gtk_tree_store_append GtkTreeStore* tree_store GtkTreeIter* iter GtkTreeIter* @parent")
(CFNC "gboolean gtk_tree_store_is_ancestor GtkTreeStore* tree_store GtkTreeIter* iter GtkTreeIter* descendant")
(CFNC "gint gtk_tree_store_iter_depth GtkTreeStore* tree_store GtkTreeIter* iter")
(CFNC "void gtk_tree_store_clear GtkTreeStore* tree_store")
(CCAST "GTK_TREE_VIEW_COLUMN(obj)" "GtkTreeViewColumn*")
;(cdef "GTK_TREE_VIEW_COLUMN_CLASS(klass)")
(CCHK "GTK_IS_TREE_VIEW_COLUMN(obj)" "GtkTreeViewColumn*")
;(cdef1 "GTK_IS_TREE_VIEW_COLUMN_CLASS(klass)")
;(cdef "GTK_TREE_VIEW_COLUMN_GET_CLASS(obj)")
(CINT "GTK_TREE_VIEW_COLUMN_GROW_ONLY" "GtkTreeViewColumnSizing")
(CINT "GTK_TREE_VIEW_COLUMN_AUTOSIZE" "GtkTreeViewColumnSizing")
(CINT "GTK_TREE_VIEW_COLUMN_FIXED" "GtkTreeViewColumnSizing")
(CFNC "GtkType gtk_tree_view_column_get_type void")
(CFNC "GtkTreeViewColumn* gtk_tree_view_column_new void")
(CFNC "GtkTreeViewColumn* gtk_tree_view_column_new_with_attributes gchar* title GtkCellRenderer* cell ...")
(CFNC "void gtk_tree_view_column_pack_start GtkTreeViewColumn* tree_column GtkCellRenderer* cell gboolean expand")
(CFNC "void gtk_tree_view_column_pack_end GtkTreeViewColumn* tree_column GtkCellRenderer* cell gboolean expand")
(CFNC "void gtk_tree_view_column_clear GtkTreeViewColumn* tree_column")
(CFNC "GList* gtk_tree_view_column_get_cell_renderers GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_add_attribute GtkTreeViewColumn* tree_column GtkCellRenderer* cell_renderer gchar* attribute gint column")
(CFNC "void gtk_tree_view_column_set_attributes GtkTreeViewColumn* tree_column GtkCellRenderer* cell_renderer ...")
(CFNC "void gtk_tree_view_column_set_cell_data_func GtkTreeViewColumn* tree_column GtkCellRenderer* cell_renderer GtkTreeCellDataFunc func lambda_data func_data GtkDestroyNotify destroy")
(CFNC "void gtk_tree_view_column_clear_attributes GtkTreeViewColumn* tree_column GtkCellRenderer* cell_renderer")
(CFNC "void gtk_tree_view_column_set_spacing GtkTreeViewColumn* tree_column gint spacing")
(CFNC "gint gtk_tree_view_column_get_spacing GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_set_visible GtkTreeViewColumn* tree_column gboolean visible")
(CFNC "gboolean gtk_tree_view_column_get_visible GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_set_resizable GtkTreeViewColumn* tree_column gboolean resizable")
(CFNC "gboolean gtk_tree_view_column_get_resizable GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_set_sizing GtkTreeViewColumn* tree_column GtkTreeViewColumnSizing type")
(CFNC "GtkTreeViewColumnSizing gtk_tree_view_column_get_sizing GtkTreeViewColumn* tree_column")
(CFNC "gint gtk_tree_view_column_get_width GtkTreeViewColumn* tree_column")
(CFNC "gint gtk_tree_view_column_get_fixed_width GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_set_fixed_width GtkTreeViewColumn* tree_column gint fixed_width")
(CFNC "void gtk_tree_view_column_set_min_width GtkTreeViewColumn* tree_column gint min_width")
(CFNC "gint gtk_tree_view_column_get_min_width GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_set_max_width GtkTreeViewColumn* tree_column gint max_width")
(CFNC "gint gtk_tree_view_column_get_max_width GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_clicked GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_set_title GtkTreeViewColumn* tree_column gchar* title")
(CFNC "gchar* gtk_tree_view_column_get_title GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_set_clickable GtkTreeViewColumn* tree_column gboolean clickable")
(CFNC "gboolean gtk_tree_view_column_get_clickable GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_set_widget GtkTreeViewColumn* tree_column GtkWidget* @widget")
(CFNC "GtkWidget* gtk_tree_view_column_get_widget GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_set_alignment GtkTreeViewColumn* tree_column gfloat xalign")
(CFNC "gfloat gtk_tree_view_column_get_alignment GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_set_reorderable GtkTreeViewColumn* tree_column gboolean reorderable")
(CFNC "gboolean gtk_tree_view_column_get_reorderable GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_set_sort_column_id GtkTreeViewColumn* tree_column gint sort_column_id")
(CFNC "gint gtk_tree_view_column_get_sort_column_id GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_set_sort_indicator GtkTreeViewColumn* tree_column gboolean setting")
(CFNC "gboolean gtk_tree_view_column_get_sort_indicator GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_set_sort_order GtkTreeViewColumn* tree_column GtkSortType order")
(CFNC "GtkSortType gtk_tree_view_column_get_sort_order GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_cell_set_cell_data GtkTreeViewColumn* tree_column GtkTreeModel* tree_model GtkTreeIter* iter gboolean is_expander gboolean is_expanded")
(CFNC "void gtk_tree_view_column_cell_get_size GtkTreeViewColumn* tree_column GdkRectangle* cell_area gint* x_offset gint* y_offset gint* width gint* height")
;(CFNC "void gtk_tree_view_column_cell_render GtkTreeViewColumn* tree_column GdkWindow* window GdkRectangle* background_area GdkRectangle* cell_area GdkRectangle* expose_area guint flags")
;(CFNC "gboolean gtk_tree_view_column_cell_focus GtkTreeViewColumn* tree_column gint direction")
;(CFNC "void gtk_tree_view_column_cell_draw_focus GtkTreeViewColumn* tree_column GdkWindow* window GdkRectangle* background_area GdkRectangle* cell_area GdkRectangle* expose_area guint flags")
(CFNC "gboolean gtk_tree_view_column_cell_is_visible GtkTreeViewColumn* tree_column")
;(CFNC "void gtk_tree_view_column_cell_set_dirty GtkTreeViewColumn* tree_column")
(CFNC-22 "gboolean gtk_tree_view_column_cell_get_position GtkTreeViewColumn* tree_column GtkCellRenderer* cell_renderer gint* [start_pos] gint* [width]")
(CINT "GTK_TREE_VIEW_DROP_BEFORE" "GtkTreeViewDropPosition")
(CINT "GTK_TREE_VIEW_DROP_AFTER" "GtkTreeViewDropPosition")
(CINT "GTK_TREE_VIEW_DROP_INTO_OR_BEFORE" "GtkTreeViewDropPosition")
(CINT "GTK_TREE_VIEW_DROP_INTO_OR_AFTER" "GtkTreeViewDropPosition")
(CCAST "GTK_TREE_VIEW(obj)" "GtkTreeView*")
;(cdef "GTK_TREE_VIEW_CLASS(klass)")
(CCHK "GTK_IS_TREE_VIEW(obj)" "GtkTreeView*")
;(cdef1 "GTK_IS_TREE_VIEW_CLASS(klass)")
;(cdef "GTK_TREE_VIEW_GET_CLASS(obj)")
(CFNC "GtkType gtk_tree_view_get_type void")
(CFNC "GtkWidget* gtk_tree_view_new void")
(CFNC "GtkWidget* gtk_tree_view_new_with_model GtkTreeModel* model")
(CFNC "GtkTreeModel* gtk_tree_view_get_model GtkTreeView* tree_view")
(CFNC "void gtk_tree_view_set_model GtkTreeView* tree_view GtkTreeModel* @model")
(CFNC "GtkTreeSelection* gtk_tree_view_get_selection GtkTreeView* tree_view")
(CFNC "GtkAdjustment* gtk_tree_view_get_hadjustment GtkTreeView* tree_view")
(CFNC "void gtk_tree_view_set_hadjustment GtkTreeView* tree_view GtkAdjustment* @adjustment")
(CFNC "GtkAdjustment* gtk_tree_view_get_vadjustment GtkTreeView* tree_view")
(CFNC "void gtk_tree_view_set_vadjustment GtkTreeView* tree_view GtkAdjustment* @adjustment")
(CFNC "gboolean gtk_tree_view_get_headers_visible GtkTreeView* tree_view")
(CFNC "void gtk_tree_view_set_headers_visible GtkTreeView* tree_view gboolean headers_visible")
(CFNC "void gtk_tree_view_columns_autosize GtkTreeView* tree_view")
(CFNC "void gtk_tree_view_set_headers_clickable GtkTreeView* tree_view gboolean setting")
(CFNC "void gtk_tree_view_set_rules_hint GtkTreeView* tree_view gboolean setting")
(CFNC "gboolean gtk_tree_view_get_rules_hint GtkTreeView* tree_view")
(CFNC "gint gtk_tree_view_append_column GtkTreeView* tree_view GtkTreeViewColumn* column")
(CFNC "gint gtk_tree_view_remove_column GtkTreeView* tree_view GtkTreeViewColumn* column")
(CFNC "gint gtk_tree_view_insert_column GtkTreeView* tree_view GtkTreeViewColumn* column gint position")
(CFNC "gint gtk_tree_view_insert_column_with_attributes GtkTreeView* tree_view gint position gchar* title GtkCellRenderer* cell ...")
(CFNC "gint gtk_tree_view_insert_column_with_data_func GtkTreeView* tree_view gint position gchar* title GtkCellRenderer* cell GtkTreeCellDataFunc func lambda_data func_data GDestroyNotify dnotify")
(CFNC "GtkTreeViewColumn* gtk_tree_view_get_column GtkTreeView* tree_view gint n")
(CFNC "GList* gtk_tree_view_get_columns GtkTreeView* tree_view")
(CFNC "void gtk_tree_view_move_column_after GtkTreeView* tree_view GtkTreeViewColumn* column GtkTreeViewColumn* @base_column")
(CFNC "void gtk_tree_view_set_expander_column GtkTreeView* tree_view GtkTreeViewColumn* @column")
(CFNC "GtkTreeViewColumn* gtk_tree_view_get_expander_column GtkTreeView* tree_view")
(CFNC "void gtk_tree_view_set_column_drag_function GtkTreeView* tree_view GtkTreeViewColumnDropFunc func lambda_data func_data GtkDestroyNotify destroy")
(CFNC "void gtk_tree_view_scroll_to_point GtkTreeView* tree_view gint tree_x gint tree_y")
(CFNC "void gtk_tree_view_scroll_to_cell GtkTreeView* tree_view GtkTreePath* @path GtkTreeViewColumn* @column gboolean use_align gfloat row_align gfloat col_align")
(CFNC "void gtk_tree_view_row_activated GtkTreeView* tree_view GtkTreePath* path GtkTreeViewColumn* column")
(CFNC "void gtk_tree_view_expand_all GtkTreeView* tree_view")
(CFNC "void gtk_tree_view_collapse_all GtkTreeView* tree_view")
(CFNC "gboolean gtk_tree_view_expand_row GtkTreeView* tree_view GtkTreePath* path gboolean open_all")
(CFNC "gboolean gtk_tree_view_collapse_row GtkTreeView* tree_view GtkTreePath* path")
(CFNC "void gtk_tree_view_map_expanded_rows GtkTreeView* tree_view GtkTreeViewMappingFunc func lambda_data #func_data")
(CFNC "gboolean gtk_tree_view_row_expanded GtkTreeView* tree_view GtkTreePath* path")
(CFNC "void gtk_tree_view_set_reorderable GtkTreeView* tree_view gboolean reorderable")
(CFNC "gboolean gtk_tree_view_get_reorderable GtkTreeView* tree_view")
(CFNC "void gtk_tree_view_set_cursor GtkTreeView* tree_view GtkTreePath* path GtkTreeViewColumn* focus_column gboolean start_editing")
(CFNC "void gtk_tree_view_get_cursor GtkTreeView* tree_view GtkTreePath** [path] GtkTreeViewColumn** [focus_column]")
(CFNC "GdkWindow* gtk_tree_view_get_bin_window GtkTreeView* tree_view")
(CFNC "gboolean gtk_tree_view_get_path_at_pos GtkTreeView* tree_view gint x gint y GtkTreePath** [path] GtkTreeViewColumn** [column] gint* [cell_x] gint* [cell_y]")
(CFNC "void gtk_tree_view_get_cell_area GtkTreeView* tree_view GtkTreePath* @path GtkTreeViewColumn* @column GdkRectangle* rect")
(CFNC "void gtk_tree_view_get_background_area GtkTreeView* tree_view GtkTreePath* @path GtkTreeViewColumn* @column GdkRectangle* rect")
(CFNC "void gtk_tree_view_get_visible_rect GtkTreeView* tree_view GdkRectangle* visible_rect")
(CFNC "void gtk_tree_view_widget_to_tree_coords GtkTreeView* tree_view gint wx gint wy gint* [tx] gint* [ty]")
(CFNC "void gtk_tree_view_tree_to_widget_coords GtkTreeView* tree_view gint tx gint ty gint* [wx] gint* [wy]")
(CFNC "void gtk_tree_view_enable_model_drag_source GtkTreeView* tree_view GdkModifierType start_button_mask GtkTargetEntry* targets gint n_targets GdkDragAction actions")
(CFNC "void gtk_tree_view_enable_model_drag_dest GtkTreeView* tree_view GtkTargetEntry* targets gint n_targets GdkDragAction actions")
(CFNC "void gtk_tree_view_unset_rows_drag_source GtkTreeView* tree_view")
(CFNC "void gtk_tree_view_unset_rows_drag_dest GtkTreeView* tree_view")
(CFNC "void gtk_tree_view_set_drag_dest_row GtkTreeView* tree_view GtkTreePath* path GtkTreeViewDropPosition pos")
(CFNC "void gtk_tree_view_get_drag_dest_row GtkTreeView* tree_view GtkTreePath** [path] GtkTreeViewDropPosition* [pos]")
(CFNC "gboolean gtk_tree_view_get_dest_row_at_pos GtkTreeView* tree_view gint drag_x gint drag_y GtkTreePath** [path] GtkTreeViewDropPosition* [pos]")
(CFNC "GdkPixmap* gtk_tree_view_create_row_drag_icon GtkTreeView* tree_view GtkTreePath* path")
(CFNC "void gtk_tree_view_set_enable_search GtkTreeView* tree_view gboolean enable_search")
(CFNC "gboolean gtk_tree_view_get_enable_search GtkTreeView* tree_view")
(CFNC "gint gtk_tree_view_get_search_column GtkTreeView* tree_view")
(CFNC "void gtk_tree_view_set_search_column GtkTreeView* tree_view gint column")
(CFNC "GtkTreeViewSearchEqualFunc gtk_tree_view_get_search_equal_func GtkTreeView* tree_view")
(CFNC "void gtk_tree_view_set_search_equal_func GtkTreeView* tree_view GtkTreeViewSearchEqualFunc func lambda_data func_data GtkDestroyNotify search_destroy")
;;;;(CFNC "void gtk_tree_view_set_destroy_count_func GtkTreeView* tree_view GtkTreeDestroyCountFunc func gpointer func_data GtkDestroyNotify destroy")
;(CCAST2 "GTK_CLASS_NAME(class)")
;(CCAST2 "GTK_CLASS_TYPE(class)")
;(CCAST2 "GTK_FUNDAMENTAL_TYPE")
;(CINT"GTK_STRUCT_OFFSET")
;(CINT "GTK_CHECK_CAST")
;(CINT "GTK_CHECK_CLASS_CAST")
;(CINT "GTK_CHECK_GET_CLASS")
;(CINT "GTK_CHECK_TYPE")
;(CINT "GTK_CHECK_CLASS_TYPE")
;(CFNC "gpointer gtk_type_class GtkType type")
;(CFNC "GtkType gtk_type_unique GtkType parent_type GtkTypeInfo* gtkinfo")
;(CFNC "gpointer gtk_type_new GtkType type")
;(CFNC "GtkEnumValue* gtk_type_enum_get_values GtkType enum_type")
;(CFNC "GtkFlagValue* gtk_type_flags_get_values GtkType flags_type")
;(CFNC "GtkEnumValue* gtk_type_enum_find_value GtkType enum_type gchar* value_name")
;(CFNC "GtkFlagValue* gtk_type_flags_find_value GtkType flags_type gchar* value_name")
(CCAST "GTK_VBUTTON_BOX(obj)" "GtkVButtonBox*")
;(cdef "GTK_VBUTTON_BOX_CLASS(klass)")
(CCHK "GTK_IS_VBUTTON_BOX(obj)" "GtkVButtonBox*")
;(cdef1 "GTK_IS_VBUTTON_BOX_CLASS(klass)")
;(cdef "GTK_VBUTTON_BOX_GET_CLASS(obj)")
(CFNC "GtkType gtk_vbutton_box_get_type void")
(CFNC "GtkWidget* gtk_vbutton_box_new void")
(CINT "GTK_MAJOR_VERSION")
(CINT "GTK_MINOR_VERSION")
(CINT "GTK_MICRO_VERSION")
(CINT "GTK_BINARY_AGE")
(CINT "GTK_INTERFACE_AGE")
(CCAST "GTK_VIEWPORT(obj)" "GtkViewport*")
;(cdef "GTK_VIEWPORT_CLASS(klass)")
(CCHK "GTK_IS_VIEWPORT(obj)" "GtkViewport*")
;(cdef1 "GTK_IS_VIEWPORT_CLASS(klass)")
;(cdef "GTK_VIEWPORT_GET_CLASS(obj)")
(CFNC "GtkType gtk_viewport_get_type void")
(CFNC "GtkWidget* gtk_viewport_new GtkAdjustment* hadjustment GtkAdjustment* vadjustment")
(CFNC "GtkAdjustment* gtk_viewport_get_hadjustment GtkViewport* viewport")
(CFNC "GtkAdjustment* gtk_viewport_get_vadjustment GtkViewport* viewport")
(CFNC "void gtk_viewport_set_hadjustment GtkViewport* viewport GtkAdjustment* adjustment")
(CFNC "void gtk_viewport_set_vadjustment GtkViewport* viewport GtkAdjustment* adjustment")
(CFNC "void gtk_viewport_set_shadow_type GtkViewport* viewport GtkShadowType type")
(CFNC "GtkShadowType gtk_viewport_get_shadow_type GtkViewport* viewport")
(CCAST "GTK_VPANED(obj)" "GtkVPaned*")
;(cdef "GTK_VPANED_CLASS(klass)")
(CCHK "GTK_IS_VPANED(obj)" "GtkVPaned*")
;(cdef1 "GTK_IS_VPANED_CLASS(klass)")
;(cdef "GTK_VPANED_GET_CLASS(obj)")
(CFNC "GtkType gtk_vpaned_get_type void")
(CFNC "GtkWidget* gtk_vpaned_new void")
(CCAST "GTK_VRULER(obj)" "GtkVRuler*")
;(cdef "GTK_VRULER_CLASS(klass)")
(CCHK "GTK_IS_VRULER(obj)" "GtkVRuler*")
;(cdef1 "GTK_IS_VRULER_CLASS(klass)")
;(cdef "GTK_VRULER_GET_CLASS(obj)")
(CFNC "GtkType gtk_vruler_get_type void")
(CFNC "GtkWidget* gtk_vruler_new void")
(CCAST "GTK_VSCALE(obj)" "GtkVScale*")
;(cdef "GTK_VSCALE_CLASS(klass)")
(CCHK "GTK_IS_VSCALE(obj)" "GtkVScale*")
;(cdef1 "GTK_IS_VSCALE_CLASS(klass)")
;(cdef "GTK_VSCALE_GET_CLASS(obj)")
(CFNC "GtkType gtk_vscale_get_type void")
(CFNC "GtkWidget* gtk_vscale_new GtkAdjustment* adjustment")
(CFNC "GtkWidget* gtk_vscale_new_with_range gdouble min gdouble max gdouble step")
(CCAST "GTK_VSCROLLBAR(obj)" "GtkVScrollbar*")
;(cdef "GTK_VSCROLLBAR_CLASS(klass)")
(CCHK "GTK_IS_VSCROLLBAR(obj)" "GtkVScrollbar*")
;(cdef1 "GTK_IS_VSCROLLBAR_CLASS(klass)")
;(cdef "GTK_VSCROLLBAR_GET_CLASS(obj)")
(CFNC "GtkType gtk_vscrollbar_get_type void")
(CFNC "GtkWidget* gtk_vscrollbar_new GtkAdjustment* adjustment")
(CCAST "GTK_VSEPARATOR(obj)" "GtkVSeparator*")
;(cdef "GTK_VSEPARATOR_CLASS(klass)")
(CCHK "GTK_IS_VSEPARATOR(obj)" "GtkVSeparator*")
;(cdef1 "GTK_IS_VSEPARATOR_CLASS(klass)")
;(cdef "GTK_VSEPARATOR_GET_CLASS(obj)")
(CFNC "GtkType gtk_vseparator_get_type void")
(CFNC "GtkWidget* gtk_vseparator_new void")
(CINT "GTK_TOPLEVEL" "GtkWidgetFlags")
(CINT "GTK_NO_WINDOW" "GtkWidgetFlags")
(CINT "GTK_REALIZED" "GtkWidgetFlags")
(CINT "GTK_MAPPED" "GtkWidgetFlags")
(CINT "GTK_VISIBLE" "GtkWidgetFlags")
(CINT "GTK_SENSITIVE" "GtkWidgetFlags")
(CINT "GTK_PARENT_SENSITIVE" "GtkWidgetFlags")
(CINT "GTK_CAN_FOCUS" "GtkWidgetFlags")
(CINT "GTK_HAS_FOCUS" "GtkWidgetFlags")
(CINT "GTK_CAN_DEFAULT" "GtkWidgetFlags")
(CINT "GTK_HAS_DEFAULT" "GtkWidgetFlags")
(CINT "GTK_HAS_GRAB" "GtkWidgetFlags")
(CINT "GTK_RC_STYLE" "GtkWidgetFlags")
;;; this is also defined in gtkrc.h
(CINT "GTK_COMPOSITE_CHILD" "GtkWidgetFlags")
(CINT "GTK_NO_REPARENT" "GtkWidgetFlags")
(CINT "GTK_APP_PAINTABLE" "GtkWidgetFlags")
(CINT "GTK_RECEIVES_DEFAULT" "GtkWidgetFlags")
(CINT "GTK_DOUBLE_BUFFERED" "GtkWidgetFlags")
(CINT "GTK_WIDGET_HELP_TOOLTIP" "GtkWidgetHelpType")
(CINT "GTK_WIDGET_HELP_WHATS_THIS" "GtkWidgetHelpType")
(CCAST "GTK_WIDGET(widget)" "GtkWidget*")
;(cdef "GTK_WIDGET_CLASS(klass)")
(CCHK "GTK_IS_WIDGET(widget)" "GtkWidget*")
;(cdef1 "GTK_IS_WIDGET_CLASS(klass)")
;(cdef "GTK_WIDGET_GET_CLASS(obj)")
;(CCAST2 "GTK_WIDGET_TYPE(wid)")
(CFNC "int GTK_WIDGET_STATE GtkWidget* wid")
(CFNC "int GTK_WIDGET_SAVED_STATE GtkWidget* wid")
(CFNC "int GTK_WIDGET_FLAGS GtkWidget* wid")
(CFNC "gboolean GTK_WIDGET_TOPLEVEL GtkWidget* wid")
(CFNC "gboolean GTK_WIDGET_NO_WINDOW GtkWidget* wid")
(CFNC "gboolean GTK_WIDGET_REALIZED GtkWidget* wid")
(CFNC "gboolean GTK_WIDGET_MAPPED GtkWidget* wid")
(CFNC "gboolean GTK_WIDGET_VISIBLE GtkWidget* wid")
(CFNC "gboolean GTK_WIDGET_DRAWABLE GtkWidget* wid")
(CFNC "gboolean GTK_WIDGET_SENSITIVE GtkWidget* wid")
(CFNC "gboolean GTK_WIDGET_PARENT_SENSITIVE GtkWidget* wid")
(CFNC "gboolean GTK_WIDGET_IS_SENSITIVE GtkWidget* wid")
(CFNC "gboolean GTK_WIDGET_CAN_FOCUS GtkWidget* wid")
(CFNC "gboolean GTK_WIDGET_HAS_FOCUS GtkWidget* wid")
(CFNC "gboolean GTK_WIDGET_CAN_DEFAULT GtkWidget* wid")
(CFNC "gboolean GTK_WIDGET_HAS_DEFAULT GtkWidget* wid")
(CFNC "gboolean GTK_WIDGET_HAS_GRAB GtkWidget* wid")
(CFNC "gboolean GTK_WIDGET_RC_STYLE GtkWidget* wid")
(CFNC "gboolean GTK_WIDGET_COMPOSITE_CHILD GtkWidget* wid")
(CFNC "gboolean GTK_WIDGET_APP_PAINTABLE GtkWidget* wid")
(CFNC "gboolean GTK_WIDGET_RECEIVES_DEFAULT GtkWidget* wid")
(CFNC "gboolean GTK_WIDGET_DOUBLE_BUFFERED GtkWidget* wid")
(CFNC "void GTK_WIDGET_SET_FLAGS GtkWidget* wid int flag")
(CFNC "void GTK_WIDGET_UNSET_FLAGS GtkWidget* wid int flag")
(CFNC "GtkType gtk_widget_get_type void")
(CFNC "GtkWidget* gtk_widget_new GtkType type gchar* first_property_name ...")
(CFNC "GtkWidget* gtk_widget_ref GtkWidget* widget")
(CFNC "void gtk_widget_unref GtkWidget* widget")
(CFNC "void gtk_widget_destroy GtkWidget* widget")
(CFNC "void gtk_widget_destroyed GtkWidget* widget GtkWidget** [widget_pointer]")
(CFNC "void gtk_widget_unparent GtkWidget* widget")
(CFNC "void gtk_widget_show GtkWidget* widget")
(CFNC "void gtk_widget_show_now GtkWidget* widget")
(CFNC "void gtk_widget_hide GtkWidget* widget")
(CFNC "void gtk_widget_show_all GtkWidget* widget")
(CFNC "void gtk_widget_hide_all GtkWidget* widget")
(CFNC "void gtk_widget_map GtkWidget* widget")
(CFNC "void gtk_widget_unmap GtkWidget* widget")
(CFNC "void gtk_widget_realize GtkWidget* widget")
(CFNC "void gtk_widget_unrealize GtkWidget* widget")
(CFNC "void gtk_widget_queue_draw GtkWidget* widget")
(CFNC "void gtk_widget_queue_draw_area GtkWidget* widget gint x gint y gint width gint height")
(CFNC "void gtk_widget_queue_resize GtkWidget* widget")
(CFNC "void gtk_widget_size_request GtkWidget* widget GtkRequisition* requisition")
(CFNC "void gtk_widget_size_allocate GtkWidget* widget GtkAllocation* allocation")
(CFNC "void gtk_widget_get_child_requisition GtkWidget* widget GtkRequisition* requisition")
(CFNC "void gtk_widget_add_accelerator GtkWidget* widget gchar* accel_signal GtkAccelGroup* accel_group guint accel_key GdkModifierType accel_mods GtkAccelFlags accel_flags")
(CFNC "gboolean gtk_widget_remove_accelerator GtkWidget* widget GtkAccelGroup* accel_group guint accel_key GdkModifierType accel_mods")
(CFNC "GList* gtk_widget_list_accel_closures GtkWidget* widget")
(CFNC "gboolean gtk_widget_mnemonic_activate GtkWidget* widget gboolean group_cycling")
(CFNC "gboolean gtk_widget_event GtkWidget* widget GdkEvent* event")
(CFNC "gint gtk_widget_send_expose GtkWidget* widget GdkEvent* event")
(CFNC "gboolean gtk_widget_activate GtkWidget* widget")
(CFNC "gboolean gtk_widget_set_scroll_adjustments GtkWidget* widget GtkAdjustment* @hadjustment GtkAdjustment* @vadjustment")
(CFNC "void gtk_widget_reparent GtkWidget* widget GtkWidget* new_parent")
(CFNC "gboolean gtk_widget_intersect GtkWidget* widget GdkRectangle* area GdkRectangle* @intersection")
(CFNC "GdkRegion* gtk_widget_region_intersect GtkWidget* widget GdkRegion* region")
(CFNC "void gtk_widget_freeze_child_notify GtkWidget* widget")
(CFNC "void gtk_widget_child_notify GtkWidget* widget gchar* child_property")
(CFNC "void gtk_widget_thaw_child_notify GtkWidget* widget")
(CFNC "gboolean gtk_widget_is_focus GtkWidget* widget")
(CFNC "void gtk_widget_grab_focus GtkWidget* widget")
(CFNC "void gtk_widget_grab_default GtkWidget* widget")
(CFNC "void gtk_widget_set_name GtkWidget* widget gchar* name")
(CFNC "gchar* gtk_widget_get_name GtkWidget* widget")
(CFNC "void gtk_widget_set_state GtkWidget* widget GtkStateType state")
(CFNC "void gtk_widget_set_sensitive GtkWidget* widget gboolean sensitive")
(CFNC "void gtk_widget_set_app_paintable GtkWidget* widget gboolean app_paintable")
(CFNC "void gtk_widget_set_double_buffered GtkWidget* widget gboolean double_buffered")
(CFNC "void gtk_widget_set_redraw_on_allocate GtkWidget* widget gboolean redraw_on_allocate")
(CFNC "void gtk_widget_set_parent GtkWidget* widget GtkWidget* parent")
(CFNC "void gtk_widget_set_parent_window GtkWidget* widget GdkWindow* parent_window")
(CFNC "void gtk_widget_set_child_visible GtkWidget* widget gboolean is_visible")
(CFNC "void gtk_widget_set_accel_path GtkWidget* widget gchar* accel_path GtkAccelGroup* accel_group")
(CFNC "gboolean gtk_widget_get_child_visible GtkWidget* widget")
(CFNC "GtkWidget* gtk_widget_get_parent GtkWidget* widget")
(CFNC "GdkWindow* gtk_widget_get_parent_window GtkWidget* widget")
(CFNC "gboolean gtk_widget_child_focus GtkWidget* widget GtkDirectionType direction")
(CFNC "void gtk_widget_set_size_request GtkWidget* widget gint width gint height")
(CFNC "void gtk_widget_get_size_request GtkWidget* widget gint* [width] gint* [height]")
(CFNC "void gtk_widget_set_events GtkWidget* widget gint events")
(CFNC "void gtk_widget_add_events GtkWidget* widget gint events")
(CFNC "void gtk_widget_set_extension_events GtkWidget* widget GdkExtensionMode mode")
(CFNC "GdkExtensionMode gtk_widget_get_extension_events GtkWidget* widget")
(CFNC "GtkWidget* gtk_widget_get_toplevel GtkWidget* widget")
(CFNC "GtkWidget* gtk_widget_get_ancestor GtkWidget* widget GtkType widget_type")
(CFNC "GdkColormap* gtk_widget_get_colormap GtkWidget* widget")
(CFNC "GdkVisual* gtk_widget_get_visual GtkWidget* widget")
(CFNC "GtkSettings* gtk_widget_get_settings GtkWidget* widget")
(CFNC "AtkObject* gtk_widget_get_accessible GtkWidget* widget")
(CFNC "void gtk_widget_set_colormap GtkWidget* widget GdkColormap* colormap")
(CFNC "gint gtk_widget_get_events GtkWidget* widget")
(CFNC "void gtk_widget_get_pointer GtkWidget* widget gint* [x] gint* [y]")
(CFNC "gboolean gtk_widget_is_ancestor GtkWidget* widget GtkWidget* ancestor")
(CFNC "gboolean gtk_widget_translate_coordinates GtkWidget* src_widget GtkWidget* dest_widget gint src_x gint src_y gint* [dest_x] gint* [dest_y]")
(CFNC "gboolean gtk_widget_hide_on_delete GtkWidget* widget")
(CFNC "void gtk_widget_set_style GtkWidget* widget GtkStyle* style")
(CFNC "void gtk_widget_ensure_style GtkWidget* widget")
(CFNC "GtkStyle* gtk_widget_get_style GtkWidget* widget")
(CFNC "void gtk_widget_modify_style GtkWidget* widget GtkRcStyle* style")
(CFNC "GtkRcStyle* gtk_widget_get_modifier_style GtkWidget* widget")
(CFNC "void gtk_widget_modify_fg GtkWidget* widget GtkStateType state GdkColor* color")
(CFNC "void gtk_widget_modify_bg GtkWidget* widget GtkStateType state GdkColor* color")
(CFNC "void gtk_widget_modify_text GtkWidget* widget GtkStateType state GdkColor* color")
(CFNC "void gtk_widget_modify_base GtkWidget* widget GtkStateType state GdkColor* color")
(CFNC "void gtk_widget_modify_font GtkWidget* widget PangoFontDescription* font_desc")
(CFNC "PangoContext* gtk_widget_create_pango_context GtkWidget* widget")
(CFNC "PangoContext* gtk_widget_get_pango_context GtkWidget* widget")
(CFNC "PangoLayout* gtk_widget_create_pango_layout GtkWidget* widget gchar* text")
(CFNC "GdkPixbuf* gtk_widget_render_icon GtkWidget* widget gchar* stock_id GtkIconSize size gchar* detail")
(CFNC "void gtk_widget_set_composite_name GtkWidget* widget gchar* name")
(CFNC "gchar* gtk_widget_get_composite_name GtkWidget* widget")
(CFNC "void gtk_widget_reset_rc_styles GtkWidget* widget")
(CFNC "void gtk_widget_push_colormap GdkColormap* cmap")
(CFNC "void gtk_widget_push_composite_child void")
(CFNC "void gtk_widget_pop_composite_child void")
(CFNC "void gtk_widget_pop_colormap void")
;(CFNC "void gtk_widget_class_install_style_property GtkWidgetClass* klass GParamSpec* pspec")
;(CFNC "void gtk_widget_class_install_style_property_parser GtkWidgetClass* klass GParamSpec* pspec GtkRcPropertyParser parser")
(CFNC "void gtk_widget_style_get_property GtkWidget* widget gchar* property_name GValue* value")
;;;;(CFNC "void gtk_widget_style_get_valist GtkWidget* widget gchar* first_property_name va_list var_args")
(CFNC "void gtk_widget_style_get GtkWidget* widget gchar* first_property_name ...")
(CFNC "void gtk_widget_set_default_colormap GdkColormap* colormap")
(CFNC "GtkStyle* gtk_widget_get_default_style void")
(CFNC "GdkColormap* gtk_widget_get_default_colormap void")
(CFNC "GdkVisual* gtk_widget_get_default_visual void")
(CFNC "void gtk_widget_set_direction GtkWidget* widget GtkTextDirection dir")
(CFNC "GtkTextDirection gtk_widget_get_direction GtkWidget* widget")
(CFNC "void gtk_widget_set_default_direction GtkTextDirection dir")
(CFNC "GtkTextDirection gtk_widget_get_default_direction void")
(CFNC "void gtk_widget_shape_combine_mask GtkWidget* widget GdkBitmap* @shape_mask gint offset_x gint offset_y")
(CFNC "void gtk_widget_reset_shapes GtkWidget* widget")
(CFNC "void gtk_widget_path GtkWidget* widget guint* path_length gchar** [path] gchar** [path_reversed]")
(CFNC "void gtk_widget_class_path GtkWidget* widget guint* path_length gchar** [path] gchar** [path_reversed]")
(CFNC "GtkRequisition* gtk_requisition_copy GtkRequisition* requisition")
(CFNC "void gtk_requisition_free GtkRequisition* requisition")
(CFNC "GtkWidgetAuxInfo* _gtk_widget_get_aux_info GtkWidget* widget gboolean create")
;(CFNC "void gtk_decorated_window_init GtkWindow* window")
;(CFNC "void gtk_decorated_window_calculate_frame_size GtkWindow* window")
;(CFNC "void gtk_decorated_window_set_title GtkWindow* window gchar* title")
;(CFNC "void gtk_decorated_window_move_resize_window GtkWindow* window gint x gint y gint width gint height")
(CCAST "GTK_WINDOW(obj)" "GtkWindow*")
;(cdef "GTK_WINDOW_CLASS(klass)")
(CCHK "GTK_IS_WINDOW(obj)" "GtkWindow*")
;(cdef1 "GTK_IS_WINDOW_CLASS(klass)")
;(cdef "GTK_WINDOW_GET_CLASS(obj)")
(CCAST "GTK_WINDOW_GROUP(object)" "GtkWindowGroup*")
;(cdef "GTK_WINDOW_GROUP_CLASS(klass)")
(CCHK "GTK_IS_WINDOW_GROUP(object)" "GtkWindowGroup*")
;(cdef1 "GTK_IS_WINDOW_GROUP_CLASS(klass)")
;(cdef "GTK_WINDOW_GROUP_GET_CLASS(obj)")
(CFNC "GtkType gtk_window_get_type void")
(CFNC "GtkWidget* gtk_window_new GtkWindowType type")
(CFNC "void gtk_window_set_title GtkWindow* window gchar* title")
(CFNC-22 "void gtk_window_set_auto_startup_notification gboolean setting")
(CFNC "gchar* gtk_window_get_title GtkWindow* window")
(CFNC "void gtk_window_set_wmclass GtkWindow* window gchar* wmclass_name gchar* wmclass_class")
(CFNC "void gtk_window_set_role GtkWindow* window gchar* role")
(CFNC "gchar* gtk_window_get_role GtkWindow* window")
(CFNC "void gtk_window_add_accel_group GtkWindow* window GtkAccelGroup* accel_group")
(CFNC "void gtk_window_remove_accel_group GtkWindow* window GtkAccelGroup* accel_group")
(CFNC "void gtk_window_set_position GtkWindow* window GtkWindowPosition position")
(CFNC "gboolean gtk_window_activate_focus GtkWindow* window")
(CFNC "void gtk_window_set_focus GtkWindow* window GtkWidget* @focus")
(CFNC "GtkWidget* gtk_window_get_focus GtkWindow* window")
(CFNC "void gtk_window_set_default GtkWindow* window GtkWidget* @default_widget")
(CFNC "gboolean gtk_window_activate_default GtkWindow* window")
(CFNC "void gtk_window_set_transient_for GtkWindow* window GtkWindow* parent")
(CFNC "GtkWindow* gtk_window_get_transient_for GtkWindow* window")
(CFNC "void gtk_window_set_type_hint GtkWindow* window GdkWindowTypeHint hint")
(CFNC "GdkWindowTypeHint gtk_window_get_type_hint GtkWindow* window")
(CFNC "void gtk_window_set_destroy_with_parent GtkWindow* window gboolean setting")
(CFNC "gboolean gtk_window_get_destroy_with_parent GtkWindow* window")
(CFNC "void gtk_window_set_resizable GtkWindow* window gboolean resizable")
(CFNC "gboolean gtk_window_get_resizable GtkWindow* window")
(CFNC "void gtk_window_set_gravity GtkWindow* window GdkGravity gravity")
(CFNC "GdkGravity gtk_window_get_gravity GtkWindow* window")
(CFNC "void gtk_window_set_geometry_hints GtkWindow* window GtkWidget* geometry_widget GdkGeometry* geometry GdkWindowHints geom_mask")
(CFNC "void gtk_window_set_has_frame GtkWindow* window gboolean setting")
(CFNC "gboolean gtk_window_get_has_frame GtkWindow* window")
(CFNC "void gtk_window_set_frame_dimensions GtkWindow* window gint left gint top gint right gint bottom")
(CFNC "void gtk_window_get_frame_dimensions GtkWindow* window gint* [left] gint* [top] gint* [right] gint* [bottom]")
(CFNC "void gtk_window_set_decorated GtkWindow* window gboolean setting")
(CFNC "gboolean gtk_window_get_decorated GtkWindow* window")
(CFNC "void gtk_window_set_icon_list GtkWindow* window GList* list")
(CFNC "GList* gtk_window_get_icon_list GtkWindow* window")
(CFNC "void gtk_window_set_icon GtkWindow* window GdkPixbuf* @icon")
(CFNC "GdkPixbuf* gtk_window_get_icon GtkWindow* window")
(CFNC "void gtk_window_set_default_icon_list GList* list")
(CFNC "GList* gtk_window_get_default_icon_list void")
(CFNC "void gtk_window_set_modal GtkWindow* window gboolean modal")
(CFNC "gboolean gtk_window_get_modal GtkWindow* window")
(CFNC "GList* gtk_window_list_toplevels void")
(CFNC "void gtk_window_add_mnemonic GtkWindow* window guint keyval GtkWidget* target")
(CFNC "void gtk_window_remove_mnemonic GtkWindow* window guint keyval GtkWidget* target")
(CFNC "gboolean gtk_window_mnemonic_activate GtkWindow* window guint keyval GdkModifierType modifier")
(CFNC "void gtk_window_set_mnemonic_modifier GtkWindow* window GdkModifierType modifier")
(CFNC "GdkModifierType gtk_window_get_mnemonic_modifier GtkWindow* window")
(CFNC "void gtk_window_present GtkWindow* window")
(CFNC "void gtk_window_iconify GtkWindow* window")
(CFNC "void gtk_window_deiconify GtkWindow* window")
(CFNC "void gtk_window_stick GtkWindow* window")
(CFNC "void gtk_window_unstick GtkWindow* window")
(CFNC "void gtk_window_maximize GtkWindow* window")
(CFNC "void gtk_window_unmaximize GtkWindow* window")
(CFNC "void gtk_window_begin_resize_drag GtkWindow* window GdkWindowEdge edge gint button gint root_x gint root_y guint32 timestamp")
(CFNC "void gtk_window_begin_move_drag GtkWindow* window gint button gint root_x gint root_y guint32 timestamp")
(CFNC "void gtk_window_set_default_size GtkWindow* window gint width gint height")
(CFNC "void gtk_window_get_default_size GtkWindow* window gint* [width] gint* [height]")
(CFNC "void gtk_window_resize GtkWindow* window gint width gint height")
(CFNC "void gtk_window_get_size GtkWindow* window gint* width gint* height")
(CFNC "void gtk_window_move GtkWindow* window gint x gint y")
(CFNC "void gtk_window_get_position GtkWindow* window gint* [root_x] gint* [root_y]")
(CFNC "gboolean gtk_window_parse_geometry GtkWindow* window gchar* geometry")
(CFNC "void gtk_window_reshow_with_initial_size GtkWindow* window")
(CFNC "GType gtk_window_group_get_type void")
(CFNC "GtkWindowGroup* gtk_window_group_new void")

(CFNC "GType pango_color_get_type void")
(CFNC "PangoColor* pango_color_copy PangoColor* src")
(CFNC "void pango_color_free PangoColor* color")
(CFNC "gboolean pango_color_parse PangoColor* color char* spec")
(CINT "PANGO_ATTR_INVALID")
(CINT "PANGO_ATTR_LANGUAGE")
(CINT "PANGO_ATTR_FAMILY")
(CINT "PANGO_ATTR_STYLE")
(CINT "PANGO_ATTR_WEIGHT")
(CINT "PANGO_ATTR_VARIANT")
(CINT "PANGO_ATTR_STRETCH")
(CINT "PANGO_ATTR_SIZE")
(CINT "PANGO_ATTR_FONT_DESC")
(CINT "PANGO_ATTR_FOREGROUND")
(CINT "PANGO_ATTR_BACKGROUND")
(CINT "PANGO_ATTR_UNDERLINE")
(CINT "PANGO_ATTR_STRIKETHROUGH")
(CINT "PANGO_ATTR_RISE")
(CINT "PANGO_ATTR_SHAPE")
(CINT "PANGO_ATTR_SCALE")
(CINT "PANGO_UNDERLINE_NONE")
(CINT "PANGO_UNDERLINE_SINGLE")
(CINT "PANGO_UNDERLINE_DOUBLE")
(CINT "PANGO_UNDERLINE_LOW")
(CFNC "PangoAttrType pango_attr_type_register gchar* name")
(CFNC "PangoAttribute* pango_attribute_copy PangoAttribute* attr")
(CFNC "void pango_attribute_destroy PangoAttribute* attr")
(CFNC "gboolean pango_attribute_equal PangoAttribute* attr1 PangoAttribute* attr2")
(CFNC "PangoAttribute* pango_attr_language_new PangoLanguage* language")
(CFNC "PangoAttribute* pango_attr_family_new char* family")
(CFNC "PangoAttribute* pango_attr_foreground_new guint16 red guint16 green guint16 blue")
(CFNC "PangoAttribute* pango_attr_background_new guint16 red guint16 green guint16 blue")
(CFNC "PangoAttribute* pango_attr_size_new int size")
(CFNC "PangoAttribute* pango_attr_style_new PangoStyle style")
(CFNC "PangoAttribute* pango_attr_weight_new PangoWeight weight")
(CFNC "PangoAttribute* pango_attr_variant_new PangoVariant variant")
(CFNC "PangoAttribute* pango_attr_stretch_new PangoStretch stretch")
(CFNC "PangoAttribute* pango_attr_font_desc_new PangoFontDescription* desc")
(CFNC "PangoAttribute* pango_attr_underline_new PangoUnderline underline")
(CFNC "PangoAttribute* pango_attr_strikethrough_new gboolean strikethrough")
(CFNC "PangoAttribute* pango_attr_rise_new int rise")
(CFNC "PangoAttribute* pango_attr_shape_new PangoRectangle* ink_rect PangoRectangle* logical_rect")
(CFNC "PangoAttribute* pango_attr_scale_new double scale_factor")
(CFNC "GType pango_attr_list_get_type void")
(CFNC "PangoAttrList* pango_attr_list_new void")
(CFNC "void pango_attr_list_ref PangoAttrList* list")
(CFNC "void pango_attr_list_unref PangoAttrList* list")
(CFNC "PangoAttrList* pango_attr_list_copy PangoAttrList* list")
(CFNC "void pango_attr_list_insert PangoAttrList* list PangoAttribute* attr")
(CFNC "void pango_attr_list_insert_before PangoAttrList* list PangoAttribute* attr")
(CFNC "void pango_attr_list_change PangoAttrList* list PangoAttribute* attr")
(CFNC "void pango_attr_list_splice PangoAttrList* list PangoAttrList* other gint pos gint len")
(CFNC "PangoAttrIterator* pango_attr_list_get_iterator PangoAttrList* list")
(CFNC "void pango_attr_iterator_range PangoAttrIterator* iterator gint* start gint* end")
(CFNC "gboolean pango_attr_iterator_next PangoAttrIterator* iterator")
(CFNC "PangoAttrIterator* pango_attr_iterator_copy PangoAttrIterator* iterator")
(CFNC "void pango_attr_iterator_destroy PangoAttrIterator* iterator")
(CFNC "PangoAttribute* pango_attr_iterator_get PangoAttrIterator* iterator PangoAttrType type")
(CFNC "void pango_attr_iterator_get_font PangoAttrIterator* iterator PangoFontDescription* desc PangoLanguage** [language] GSList** [extra_attrs]")
(CFNC "gboolean pango_parse_markup char* markup_text int length gunichar accel_marker PangoAttrList** attr_list char** text gunichar* accel_char GError** [error]")
(CFNC "void pango_break gchar* text int length PangoAnalysis* analysis PangoLogAttr* attrs int attrs_len")
(CFNC "void pango_find_paragraph_boundary gchar* text gint length gint* paragraph_delimiter_index gint* next_paragraph_start")
(CFNC "void pango_get_log_attrs char* text int length int level PangoLanguage* language PangoLogAttr* log_attrs int attrs_len")
(CFNC-extra "void pango_default_break gchar* text int length PangoAnalysis* analysis PangoLogAttr* attrs int attrs_len")
(CCAST "PANGO_CONTEXT(object)" "PangoContext*")
;(cdef "PANGO_CONTEXT_CLASS(klass)")
(CCHK "PANGO_IS_CONTEXT(object)" "PangoContext*")
;(cdef1 "PANGO_IS_CONTEXT_CLASS(klass)")
;(cdef "PANGO_CONTEXT_GET_CLASS(obj)")
(CFNC "GType pango_context_get_type void")
(CFNC-extra "PangoContext* pango_context_new void")
(CFNC "void pango_context_list_families PangoContext* context PangoFontFamily*** [families] int* [n_families]")
(CFNC "PangoFont* pango_context_load_font PangoContext* context PangoFontDescription* desc")
(CFNC "PangoFontset* pango_context_load_fontset PangoContext* context PangoFontDescription* desc PangoLanguage* language")
(CFNC "PangoFontMetrics* pango_context_get_metrics PangoContext* context PangoFontDescription* desc PangoLanguage* language")
(CFNC "void pango_context_set_font_description PangoContext* context PangoFontDescription* desc")
(CFNC "PangoFontDescription* pango_context_get_font_description PangoContext* context")
(CFNC "PangoLanguage* pango_context_get_language PangoContext* context")
(CFNC "void pango_context_set_language PangoContext* context PangoLanguage* language")
(CFNC "void pango_context_set_base_dir PangoContext* context PangoDirection direction")
(CFNC "PangoDirection pango_context_get_base_dir PangoContext* context")
(CFNC "GList* pango_itemize PangoContext* context char* text int start_index int length PangoAttrList* attrs PangoAttrIterator* cached_iter")
(CINT "PANGO_COVERAGE_NONE")
(CINT "PANGO_COVERAGE_FALLBACK")
(CINT "PANGO_COVERAGE_APPROXIMATE")
(CINT "PANGO_COVERAGE_EXACT")
(CFNC "PangoCoverage* pango_coverage_new void")
(CFNC "PangoCoverage* pango_coverage_ref PangoCoverage* coverage")
(CFNC "void pango_coverage_unref PangoCoverage* coverage")
(CFNC "PangoCoverage* pango_coverage_copy PangoCoverage* coverage")
(CFNC "PangoCoverageLevel pango_coverage_get PangoCoverage* coverage int index")
(CFNC "void pango_coverage_set PangoCoverage* coverage int index PangoCoverageLevel level")
(CFNC "void pango_coverage_max PangoCoverage* coverage PangoCoverage* other")
(CFNC "void pango_coverage_to_bytes PangoCoverage* coverage guchar** [bytes] int* [n_bytes]")
(CFNC "PangoCoverage* pango_coverage_from_bytes guchar* bytes int n_bytes")
(CSTR-extra "PANGO_ENGINE_TYPE_LANG")
(CSTR-extra "PANGO_ENGINE_TYPE_SHAPE")
(CSTR-extra "PANGO_RENDER_TYPE_NONE")
(CFNC-extra "void script_engine_list PangoEngineInfo** [engines] int* [n_engines]")
(CFNC-extra "PangoEngine* script_engine_load char* id")
(CFNC-extra "void script_engine_unload PangoEngine* engine")
(CFNC "GType pango_attr_type_get_type void")
(CFNC "GType pango_underline_get_type void")
(CFNC "GType pango_coverage_level_get_type void")
(CFNC "GType pango_style_get_type void")
(CFNC "GType pango_variant_get_type void")
(CFNC "GType pango_weight_get_type void")
(CFNC "GType pango_stretch_get_type void")
(CFNC "GType pango_font_mask_get_type void")
(CFNC "GType pango_alignment_get_type void")
(CFNC "GType pango_wrap_mode_get_type void")
(CFNC "GType pango_tab_align_get_type void")
(CFNC "GType pango_direction_get_type void")
(CINT "PANGO_STYLE_NORMAL")
(CINT "PANGO_STYLE_OBLIQUE")
(CINT "PANGO_STYLE_ITALIC")
(CINT "PANGO_VARIANT_NORMAL")
(CINT "PANGO_VARIANT_SMALL_CAPS")
(CINT "PANGO_WEIGHT_ULTRALIGHT")
(CINT "PANGO_WEIGHT_LIGHT")
(CINT "PANGO_WEIGHT_NORMAL")
(CINT "PANGO_WEIGHT_BOLD")
(CINT "PANGO_WEIGHT_ULTRABOLD")
(CINT "PANGO_WEIGHT_HEAVY")
(CINT "PANGO_STRETCH_ULTRA_CONDENSED")
(CINT "PANGO_STRETCH_EXTRA_CONDENSED")
(CINT "PANGO_STRETCH_CONDENSED")
(CINT "PANGO_STRETCH_SEMI_CONDENSED")
(CINT "PANGO_STRETCH_NORMAL")
(CINT "PANGO_STRETCH_SEMI_EXPANDED")
(CINT "PANGO_STRETCH_EXPANDED")
(CINT "PANGO_STRETCH_EXTRA_EXPANDED")
(CINT "PANGO_STRETCH_ULTRA_EXPANDED")
(CINT "PANGO_FONT_MASK_FAMILY")
(CINT "PANGO_FONT_MASK_STYLE")
(CINT "PANGO_FONT_MASK_VARIANT")
(CINT "PANGO_FONT_MASK_WEIGHT")
(CINT "PANGO_FONT_MASK_STRETCH")
(CINT "PANGO_FONT_MASK_SIZE")
(CDBL "PANGO_SCALE_XX_SMALL")
(CDBL "PANGO_SCALE_X_SMALL")
(CDBL "PANGO_SCALE_SMALL")
(CDBL "PANGO_SCALE_MEDIUM")
(CDBL "PANGO_SCALE_LARGE")
(CDBL "PANGO_SCALE_X_LARGE")
(CDBL "PANGO_SCALE_XX_LARGE")
(CFNC "GType pango_font_description_get_type void")
(CFNC "PangoFontDescription* pango_font_description_new void")
(CFNC "PangoFontDescription* pango_font_description_copy PangoFontDescription* desc")
(CFNC "PangoFontDescription* pango_font_description_copy_static PangoFontDescription* desc")
(CFNC "guint pango_font_description_hash PangoFontDescription* desc")
(CFNC "gboolean pango_font_description_equal PangoFontDescription* desc1 PangoFontDescription* desc2")
(CFNC "void pango_font_description_free PangoFontDescription* desc")
(CFNC "void pango_font_descriptions_free PangoFontDescription** descs int n_descs")
(CFNC "void pango_font_description_set_family PangoFontDescription* desc char* family")
(CFNC "void pango_font_description_set_family_static PangoFontDescription* desc char* family")
(CFNC "char* pango_font_description_get_family PangoFontDescription* desc")
(CFNC "void pango_font_description_set_style PangoFontDescription* desc PangoStyle style")
(CFNC "PangoStyle pango_font_description_get_style PangoFontDescription* desc")
(CFNC "void pango_font_description_set_variant PangoFontDescription* desc PangoVariant variant")
(CFNC "PangoVariant pango_font_description_get_variant PangoFontDescription* desc")
(CFNC "void pango_font_description_set_weight PangoFontDescription* desc PangoWeight weight")
(CFNC "PangoWeight pango_font_description_get_weight PangoFontDescription* desc")
(CFNC "void pango_font_description_set_stretch PangoFontDescription* desc PangoStretch stretch")
(CFNC "PangoStretch pango_font_description_get_stretch PangoFontDescription* desc")
(CFNC "void pango_font_description_set_size PangoFontDescription* desc gint size")
(CFNC "gint pango_font_description_get_size PangoFontDescription* desc")
(CFNC "PangoFontMask pango_font_description_get_set_fields PangoFontDescription* desc")
(CFNC "void pango_font_description_unset_fields PangoFontDescription* desc PangoFontMask to_unset")
(CFNC "void pango_font_description_merge PangoFontDescription* desc PangoFontDescription* desc_to_merge gboolean replace_existing")
(CFNC "void pango_font_description_merge_static PangoFontDescription* desc PangoFontDescription* desc_to_merge gboolean replace_existing")
(CFNC "gboolean pango_font_description_better_match PangoFontDescription* desc PangoFontDescription* old_match PangoFontDescription* new_match")
(CFNC "PangoFontDescription* pango_font_description_from_string char* str")
(CFNC "char* pango_font_description_to_string PangoFontDescription* desc")
(CFNC "char* pango_font_description_to_filename PangoFontDescription* desc")
(CFNC "GType pango_font_metrics_get_type void")
(CFNC "PangoFontMetrics* pango_font_metrics_ref PangoFontMetrics* metrics")
(CFNC "void pango_font_metrics_unref PangoFontMetrics* metrics")
(CFNC "int pango_font_metrics_get_ascent PangoFontMetrics* metrics")
(CFNC "int pango_font_metrics_get_descent PangoFontMetrics* metrics")
(CFNC "int pango_font_metrics_get_approximate_char_width PangoFontMetrics* metrics")
(CFNC "int pango_font_metrics_get_approximate_digit_width PangoFontMetrics* metrics")
(CFNC-extra "PangoFontMetrics* pango_font_metrics_new void")
(CCAST-extra "PANGO_FONT_FAMILY(object)" "PangoFontFamily*")
(CCHK-extra "PANGO_IS_FONT_FAMILY(object)" "PangoFontFamily*")
(CFNC-extra "GType pango_font_family_get_type void")
(CFNC-extra "void pango_font_family_list_faces PangoFontFamily* family PangoFontFace*** [faces] int* [n_faces]")
(CFNC-extra "char* pango_font_family_get_name PangoFontFamily* family")
;(cdef-extra "PANGO_FONT_FAMILY_CLASS(klass)")
;(cdef1-extra "PANGO_IS_FONT_FAMILY_CLASS(klass)")
;(cdef-extra "PANGO_FONT_FAMILY_GET_CLASS(obj)")
(CCAST "PANGO_FONT_FACE(object)" "PangoFontFace*")
(CCHK "PANGO_IS_FONT_FACE(object)" "PangoFontFace*")
(CFNC "GType pango_font_face_get_type void")
(CFNC "PangoFontDescription* pango_font_face_describe PangoFontFace* face")
(CFNC "char* pango_font_face_get_face_name PangoFontFace* face")
;(cdef-extra "PANGO_FONT_FACE_CLASS(klass)")
;(cdef1-extra "PANGO_IS_FONT_FACE_CLASS(klass)")
;(cdef-extra "PANGO_FONT_FACE_GET_CLASS(obj)")
(CCAST "PANGO_FONT(object)" "PangoFont*")
(CCHK "PANGO_IS_FONT(object)" "PangoFont*")
(CFNC "GType pango_font_get_type void")
(CFNC "PangoFontDescription* pango_font_describe PangoFont* font")
(CFNC "PangoCoverage* pango_font_get_coverage PangoFont* font PangoLanguage* language")
(CFNC "PangoEngineShape* pango_font_find_shaper PangoFont* font PangoLanguage* language guint32 ch")
(CFNC "PangoFontMetrics* pango_font_get_metrics PangoFont* font PangoLanguage* language")
(CFNC "void pango_font_get_glyph_extents PangoFont* font PangoGlyph glyph PangoRectangle* ink_rect PangoRectangle* logical_rect")
;(cdef-extra "PANGO_FONT_CLASS(klass)")
;(cdef1-extra "PANGO_IS_FONT_CLASS(klass)")
;(cdef-extra "PANGO_FONT_GET_CLASS(obj)")
(CCAST "PANGO_FONT_MAP(object)" "PangoFontMap*")
(CCHK "PANGO_IS_FONT_MAP(object)" "PangoFontMap*")
(CFNC "GType pango_font_map_get_type void")
(CFNC "PangoFont* pango_font_map_load_font PangoFontMap* fontmap PangoContext* context PangoFontDescription* desc")
(CFNC "PangoFontset* pango_font_map_load_fontset PangoFontMap* fontmap PangoContext* context PangoFontDescription* desc PangoLanguage* language")
(CFNC "void pango_font_map_list_families PangoFontMap* fontmap PangoFontFamily*** [families] int* [n_families]")
;(cdef-extra "PANGO_FONT_MAP_CLASS(klass)")
;(cdef1-extra "PANGO_IS_FONT_MAP_CLASS(klass)")
;(cdef-extra "PANGO_FONT_MAP_GET_CLASS(obj)")
(CFNC-extra "void pango_context_set_font_map PangoContext* context PangoFontMap* font_map")
(CFNC "PangoGlyphString* pango_glyph_string_new void")
(CFNC "void pango_glyph_string_set_size PangoGlyphString* string gint new_len")
(CFNC "GType pango_glyph_string_get_type void")
(CFNC "PangoGlyphString* pango_glyph_string_copy PangoGlyphString* string")
(CFNC "void pango_glyph_string_free PangoGlyphString* string")
(CFNC "void pango_glyph_string_extents PangoGlyphString* glyphs PangoFont* font PangoRectangle* ink_rect PangoRectangle* logical_rect")
(CFNC "void pango_glyph_string_extents_range PangoGlyphString* glyphs int start int end PangoFont* font PangoRectangle* ink_rect PangoRectangle* logical_rect")
(CFNC "void pango_glyph_string_get_logical_widths PangoGlyphString* glyphs char* text int length int embedding_level int* logical_widths")
(CFNC "void pango_glyph_string_index_to_x PangoGlyphString* glyphs char* text int length PangoAnalysis* analysis int index gboolean trailing int* x_pos")
(CFNC "void pango_glyph_string_x_to_index PangoGlyphString* glyphs char* text int length PangoAnalysis* analysis int x_pos int* index int* trailing")
(CFNC "void pango_shape gchar* text gint length PangoAnalysis* analysis PangoGlyphString* glyphs")
(CFNC "GList* pango_reorder_items GList* logical_items")
(CFNC "PangoItem* pango_item_new void")
(CFNC "PangoItem* pango_item_copy PangoItem* item")
(CFNC "void pango_item_free PangoItem* item")
(CFNC "PangoItem* pango_item_split PangoItem* orig int split_index int split_offset")
(CINT "PANGO_ALIGN_LEFT")
(CINT "PANGO_ALIGN_CENTER")
(CINT "PANGO_ALIGN_RIGHT")
(CINT "PANGO_WRAP_WORD")
(CINT "PANGO_WRAP_CHAR")
(CCAST "PANGO_LAYOUT(object)" "PangoLayout*")
;(cdef "PANGO_LAYOUT_CLASS(klass)")
(CCHK "PANGO_IS_LAYOUT(object)" "PangoLayout*")
;(cdef1 "PANGO_IS_LAYOUT_CLASS(klass)")
;(cdef "PANGO_LAYOUT_GET_CLASS(obj)")
(CFNC "GType pango_layout_get_type void")
(CFNC "PangoLayout* pango_layout_new PangoContext* context")
(CFNC "PangoLayout* pango_layout_copy PangoLayout* src")
(CFNC "PangoContext* pango_layout_get_context PangoLayout* layout")
(CFNC "void pango_layout_set_attributes PangoLayout* layout PangoAttrList* attrs")
(CFNC "PangoAttrList* pango_layout_get_attributes PangoLayout* layout")
(CFNC "void pango_layout_set_text PangoLayout* layout char* text int length")
(CFNC "char* pango_layout_get_text PangoLayout* layout")
(CFNC "void pango_layout_set_markup PangoLayout* layout char* markup int length")
(CFNC "void pango_layout_set_markup_with_accel PangoLayout* layout char* markup int length gunichar accel_marker gunichar* accel_char")
(CFNC "void pango_layout_set_font_description PangoLayout* layout PangoFontDescription* desc")
(CFNC "void pango_layout_set_width PangoLayout* layout int width")
(CFNC "int pango_layout_get_width PangoLayout* layout")
(CFNC "void pango_layout_set_wrap PangoLayout* layout PangoWrapMode wrap")
(CFNC "PangoWrapMode pango_layout_get_wrap PangoLayout* layout")
(CFNC "void pango_layout_set_indent PangoLayout* layout int indent")
(CFNC "int pango_layout_get_indent PangoLayout* layout")
(CFNC "void pango_layout_set_spacing PangoLayout* layout int spacing")
(CFNC "int pango_layout_get_spacing PangoLayout* layout")
(CFNC "void pango_layout_set_justify PangoLayout* layout gboolean justify")
(CFNC "gboolean pango_layout_get_justify PangoLayout* layout")
(CFNC "void pango_layout_set_alignment PangoLayout* layout PangoAlignment alignment")
(CFNC "PangoAlignment pango_layout_get_alignment PangoLayout* layout")
(CFNC "void pango_layout_set_tabs PangoLayout* layout PangoTabArray* tabs")
(CFNC "PangoTabArray* pango_layout_get_tabs PangoLayout* layout")
(CFNC "void pango_layout_set_single_paragraph_mode PangoLayout* layout gboolean setting")
(CFNC "gboolean pango_layout_get_single_paragraph_mode PangoLayout* layout")
(CFNC "void pango_layout_context_changed PangoLayout* layout")
(CFNC "void pango_layout_get_log_attrs PangoLayout* layout PangoLogAttr** [attrs] gint* [n_attrs]")
(CFNC "void pango_layout_index_to_pos PangoLayout* layout int index PangoRectangle* pos")
(CFNC "void pango_layout_get_cursor_pos PangoLayout* layout int index PangoRectangle* strong_pos PangoRectangle* weak_pos")
(CFNC "void pango_layout_move_cursor_visually PangoLayout* layout gboolean strong int old_index int old_trailing int direction int* new_index int* new_trailing")
(CFNC "gboolean pango_layout_xy_to_index PangoLayout* layout int x int y int* index int* trailing")
(CFNC "void pango_layout_get_extents PangoLayout* layout PangoRectangle* ink_rect PangoRectangle* logical_rect")
(CFNC "void pango_layout_get_pixel_extents PangoLayout* layout PangoRectangle* ink_rect PangoRectangle* logical_rect")
(CFNC "void pango_layout_get_size PangoLayout* layout int* [width] int* [height]")
(CFNC "void pango_layout_get_pixel_size PangoLayout* layout int* [width] int* [height]")
(CFNC "int pango_layout_get_line_count PangoLayout* layout")
(CFNC "PangoLayoutLine* pango_layout_get_line PangoLayout* layout int line")
(CFNC "GSList* pango_layout_get_lines PangoLayout* layout")
(CFNC "void pango_layout_line_ref PangoLayoutLine* line")
(CFNC "void pango_layout_line_unref PangoLayoutLine* line")
(CFNC "gboolean pango_layout_line_x_to_index PangoLayoutLine* line int x_pos int* index int* trailing")
(CFNC "void pango_layout_line_index_to_x PangoLayoutLine* line int index gboolean trailing int* x_pos")
(CFNC "void pango_layout_line_get_x_ranges PangoLayoutLine* line int start_index int end_index int** [ranges] int* [n_ranges]")
(CFNC "void pango_layout_line_get_extents PangoLayoutLine* line PangoRectangle* ink_rect PangoRectangle* logical_rect")
(CFNC "void pango_layout_line_get_pixel_extents PangoLayoutLine* layout_line PangoRectangle* ink_rect PangoRectangle* logical_rect")
(CFNC "PangoLayoutIter* pango_layout_get_iter PangoLayout* layout")
(CFNC "void pango_layout_iter_free PangoLayoutIter* iter")
(CFNC "int pango_layout_iter_get_index PangoLayoutIter* iter")
(CFNC "PangoLayoutRun* pango_layout_iter_get_run PangoLayoutIter* iter")
(CFNC "PangoLayoutLine* pango_layout_iter_get_line PangoLayoutIter* iter")
(CFNC "gboolean pango_layout_iter_at_last_line PangoLayoutIter* iter")
(CFNC "gboolean pango_layout_iter_next_char PangoLayoutIter* iter")
(CFNC "gboolean pango_layout_iter_next_cluster PangoLayoutIter* iter")
(CFNC "gboolean pango_layout_iter_next_run PangoLayoutIter* iter")
(CFNC "gboolean pango_layout_iter_next_line PangoLayoutIter* iter")
(CFNC "void pango_layout_iter_get_char_extents PangoLayoutIter* iter PangoRectangle* logical_rect")
(CFNC "void pango_layout_iter_get_cluster_extents PangoLayoutIter* iter PangoRectangle* ink_rect PangoRectangle* logical_rect")
(CFNC "void pango_layout_iter_get_run_extents PangoLayoutIter* iter PangoRectangle* ink_rect PangoRectangle* logical_rect")
(CFNC "void pango_layout_iter_get_line_extents PangoLayoutIter* iter PangoRectangle* ink_rect PangoRectangle* logical_rect")
(CFNC "void pango_layout_iter_get_line_yrange PangoLayoutIter* iter int* [y0] int* [y1]")
(CFNC "void pango_layout_iter_get_layout_extents PangoLayoutIter* iter PangoRectangle* ink_rect PangoRectangle* logical_rect")
(CFNC "int pango_layout_iter_get_baseline PangoLayoutIter* iter")
;(CFNC "int PANGO_ASCENT PangoRectangle rect)")
;(CFNC "int PANGO_DESCENT PangoRectangle rect)")
;(CFNC "int PANGO_LBEARING PangoRectangle rect)")
;(CFNC "int PANGO_RBEARING PangoRectangle rect)")
(CINT "PANGO_DIRECTION_LTR")
(CINT "PANGO_DIRECTION_RTL")
(CINT "PANGO_DIRECTION_TTB_LTR")
(CINT "PANGO_DIRECTION_TTB_RTL")
(CFNC "GType pango_language_get_type void")
(CFNC "PangoLanguage* pango_language_from_string char* language")
(CFNC "gboolean pango_language_matches PangoLanguage* language char* range_list")

(STRUCT-make "GdkColor guint32 &pixel guint16 &red guint16 &green guint16 &blue")
(STRUCT "GdkColormap gint size GdkColor* colors GdkVisual* visual gpointer windowing_data")
(STRUCT-make "GdkCursor GdkCursorType type guint ref_count")
(STRUCT "GdkDragContext GdkDragProtocol protocol gboolean is_source GdkWindow* source_window GdkWindow* dest_window GList* targets GdkDragAction actions GdkDragAction suggested_action GdkDragAction action guint32 start_time gpointer windowing_data")
(STRUCT "GdkEventAny GdkEventType type GdkWindow* window gint8 send_event")
(STRUCT "GdkEventExpose GdkEventType type GdkWindow* window gint8 send_event GdkRegion* region gint count")
(STRUCT "GdkEventNoExpose GdkEventType type GdkWindow* window gint8 send_event")
(STRUCT "GdkEventVisibility GdkEventType type GdkWindow* window gint8 send_event GdkVisibilityState state")
(STRUCT "GdkEventMotion GdkEventType type GdkWindow* window gint8 send_event guint32 time gdouble x gdouble y gdouble* axes guint state gint16 is_hint GdkDevice* device gdouble x_root gdouble y_root")
(STRUCT "GdkEventButton GdkEventType type GdkWindow* window gint8 send_event guint32 time gdouble x gdouble y gdouble* axes guint state guint button GdkDevice* device gdouble x_root gdouble y_root")
(STRUCT "GdkEventScroll GdkEventType type GdkWindow* window gint8 send_event guint32 time gdouble x gdouble y guint state GdkScrollDirection direction GdkDevice* device gdouble x_root gdouble y_root")
(STRUCT "GdkEventKey GdkEventType type GdkWindow* window gint8 send_event guint32 time guint state guint keyval gint length gchar* string guint16 hardware_keycode guint8 group")
(STRUCT "GdkEventCrossing GdkEventType type GdkWindow* window gint8 send_event GdkWindow* subwindow guint32 time gdouble x gdouble y gdouble x_root gdouble y_root GdkCrossingMode mode GdkNotifyType detail gboolean focus guint state")
(STRUCT "GdkEventFocus GdkEventType type GdkWindow* window gint8 send_event gint16 in")
(STRUCT "GdkEventConfigure GdkEventType type GdkWindow* window gint8 send_event gint x gint y gint width gint height")
(STRUCT "GdkEventProperty GdkEventType type GdkWindow* window gint8 send_event GdkAtom atom guint32 time guint state")
(STRUCT "GdkEventSelection GdkEventType type GdkWindow* window gint8 send_event GdkAtom selection GdkAtom target GdkAtom property guint32 time GdkNativeWindow requestor")
(STRUCT "GdkEventProximity GdkEventType type GdkWindow* window gint8 send_event guint32 time GdkDevice* device")
(STRUCT "GdkEventSetting GdkEventType type GdkWindow* window gint8 send_event GdkSettingAction action char* name")
(STRUCT "GdkEventWindowState GdkEventType type GdkWindow* window gint8 send_event GdkWindowState changed_mask GdkWindowState new_window_state")
(STRUCT "GdkEventDND GdkEventType type GdkWindow* window gint8 send_event GdkDragContext* context guint32 time gshort x_root gshort y_root")
(STRUCT "GdkGCValues GdkFunction function GdkFill fill GdkPixmap* tile GdkPixmap* stipple GdkPixmap* clip_mask GdkSubwindowMode subwindow_mode gint ts_x_origin gint ts_y_origin gint clip_x_origin gint clip_y_origin gint graphics_exposures gint line_width GdkLineStyle line_style GdkCapStyle cap_style GdkJoinStyle join_style")
(STRUCT "GdkGC gint clip_x_origin gint clip_y_origin gint ts_x_origin gint ts_y_origin GdkColormap* colormap")
(STRUCT "GdkImage GdkImageType type GdkVisual* visual GdkByteOrder byte_order gint width gint height guint16 depth guint16 bpp guint16 bpl guint16 bits_per_pixel gpointer mem GdkColormap* colormap gpointer windowing_data")
(STRUCT "GdkDevice gchar* name GdkInputSource source GdkInputMode mode gboolean has_cursor gint num_axes GdkDeviceAxis* axes gint num_keys GdkDeviceKey* keys")
(STRUCT "GdkKeymapKey guint keycode gint group gint level")
(STRUCT "GdkRgbCmap guint32* colors gint n_colors GSList* info_list")
(STRUCT-make "GdkPoint gint x gint y")
(STRUCT-make "GdkRectangle gint x gint y gint width gint height")
(STRUCT-make "GdkSegment gint x1 gint y1 gint x2 gint y2")
(STRUCT-make "GdkSpan gint x gint y gint width")
(STRUCT "GdkVisual GdkVisualType type gint depth GdkByteOrder byte_order gint colormap_size gint bits_per_rgb guint32 red_mask gint red_shift gint red_prec guint32 green_mask gint green_shift gint green_prec guint32 blue_mask gint blue_shift gint blue_prec")
(STRUCT "GdkWindowAttr gchar* title gint event_mask gint x gint y gint width gint height GdkVisual* visual GdkColormap* colormap GdkWindowType window_type GdkCursor* cursor gchar* wmclass_name gchar* wmclass_class gboolean override_redirect")
(STRUCT "GdkGeometry gint min_width gint min_height gint max_width gint max_height gint base_width gint base_height gint width_inc gint height_inc gdouble min_aspect gdouble max_aspect GdkGravity win_gravity")
(STRUCT "GdkWindowObject GdkDrawable* impl GdkWindowObject* parent gpointer user_data gint x gint y gint extension_events GList* filters GList* children GdkPixmap* bg_pixmap GSList* paint_stack GdkRegion* update_area guint update_freeze_count guint8 window_type guint8 depth guint8 resize_count GdkWindowState state guint guffaw_gravity guint input_only guint modal_hint")
(STRUCT "GtkAccelGroup guint lock_count GdkModifierType modifier_mask GSList* acceleratables guint n_accels GtkAccelGroupEntry* priv_accels")
(STRUCT "GtkAccelLabel guint accel_padding GtkWidget* accel_widget GClosure* accel_closure GtkAccelGroup* accel_group gchar* accel_string guint16 accel_string_width")
(STRUCT "GtkAdjustment gdouble lower gdouble upper gdouble &value gdouble step_increment gdouble page_increment gdouble page_size")
(STRUCT "GtkAlignment gfloat xalign gfloat yalign gfloat xscale gfloat yscale")
(STRUCT "GtkAspectFrame gfloat xalign gfloat yalign gfloat ratio gboolean obey_child")
(STRUCT "GtkArrow gint16 arrow_type gint16 shadow_type")
(STRUCT "GtkBin GtkWidget* child")
(STRUCT "GtkBox GList* children gint16 spacing")
(STRUCT "GtkButton GdkWindow* event_window gchar* label_text guint activate_timeout guint constructed guint in_button guint button_down guint relief guint use_underline guint use_stock")
(STRUCT "GtkCellRenderer gfloat xalign gfloat yalign gint width gint height guint16 xpad guint16 ypad guint mode guint visible guint is_expander")
(STRUCT "GtkCellRendererText gchar* text PangoFontDescription* font gdouble font_scale PangoAttrList* extra_attrs PangoUnderline underline_style gint rise gint fixed_height_rows guint strikethrough guint editable guint scale_set guint foreground_set guint background_set guint underline_set guint rise_set guint strikethrough_set guint editable_set")
(STRUCT "GtkCellRendererToggle guint active guint activatable")
(STRUCT "GtkCellRendererPixbuf GdkPixbuf* pixbuf GdkPixbuf* pixbuf_expander_open GdkPixbuf* pixbuf_expander_closed")
(STRUCT "GtkCheckMenuItem guint active guint always_show_toggle")
(STRUCT "GtkColorSelectionDialog GtkWidget* colorsel GtkWidget* ok_button GtkWidget* cancel_button GtkWidget* help_button")
(STRUCT "GtkCombo GtkWidget* entry GtkWidget* button GtkWidget* popup GtkWidget* popwin GtkWidget* list guint entry_change_id guint list_change_id guint value_in_list guint ok_if_empty guint case_sensitive guint use_arrows guint use_arrows_always guint16 current_button guint activate_id")
(STRUCT "GtkContainer GtkWidget* focus_child guint border_width guint need_resize guint resize_mode guint reallocate_redraws")
(STRUCT "GtkCurve gint cursor_type gfloat min_x gfloat max_x gfloat min_y gfloat max_y GdkPixmap* pixmap GtkCurveType curve_type gint height gint grab_point gint last gint num_points GdkPoint* point gint num_ctlpoints")
(STRUCT "GtkDialog GtkWidget* vbox GtkWidget* action_area GtkWidget* separator")
(STRUCT "GtkDrawingArea gpointer draw_data")
(STRUCT "GtkEntry gchar* text guint editable guint visible guint overwrite_mode guint in_drag guint16 text_length guint16 text_max_length GdkWindow* text_area GtkIMContext* im_context GtkWidget* popup_menu gint current_pos gint selection_bound PangoLayout* cached_layout guint cache_includes_preedit guint need_im_reset guint has_frame guint activates_default guint cursor_visible guint in_click guint is_cell_renderer guint editing_canceled guint mouse_cursor_obscured guint button guint blink_timeout guint recompute_idle gint scroll_offset gint ascent gint descent guint16 text_size guint16 n_bytes guint16 preedit_length guint16 preedit_cursor gint dnd_position gint drag_start_x gint drag_start_y gunichar invisible_char gint width_chars")
(STRUCT "GtkFileSelection GtkWidget* dir_list GtkWidget* file_list GtkWidget* selection_entry GtkWidget* selection_text GtkWidget* main_vbox GtkWidget* ok_button GtkWidget* cancel_button GtkWidget* help_button GtkWidget* history_pulldown GtkWidget* history_menu GList* history_list GtkWidget* fileop_dialog GtkWidget* fileop_entry gchar* fileop_file gpointer cmpl_state GtkWidget* fileop_c_dir GtkWidget* fileop_del_file GtkWidget* fileop_ren_file GtkWidget* button_area GtkWidget* action_area")
(STRUCT "GtkFixed GList* children")
(STRUCT "GtkFontSelection GtkWidget* font_entry GtkWidget* family_list GtkWidget* font_style_entry GtkWidget* face_list GtkWidget* size_entry GtkWidget* size_list GtkWidget* pixels_button GtkWidget* points_button GtkWidget* filter_button GtkWidget* preview_entry PangoFontFace* face gint size")
(STRUCT "GtkFontSelectionDialog GtkWidget* fontsel GtkWidget* main_vbox GtkWidget* action_area GtkWidget* ok_button GtkWidget* apply_button GtkWidget* cancel_button gint dialog_width gboolean auto_resize")
(STRUCT "GtkFrame GtkWidget* label_widget gint16 shadow_type gfloat label_xalign gfloat label_yalign")
(STRUCT "GtkGammaCurve GtkWidget* table GtkWidget* curve GtkWidget** button gfloat gamma GtkWidget* gamma_dialog GtkWidget* gamma_text")
(STRUCT "GtkHandleBox GdkWindow* bin_window GdkWindow* float_window GtkShadowType shadow_type guint handle_position guint float_window_mapped guint child_detached guint in_drag guint shrink_on_detach gint snap_edge gint deskoff_x gint deskoff_y")
(STRUCT "GtkImageMenuItem GtkWidget* image")
(STRUCT "GtkIMMulticontext GtkIMContext* slave GdkWindow* client_window gchar* context_id")
(STRUCT "GtkInputDialog GtkWidget* axis_list GtkWidget* axis_listbox GtkWidget* mode_optionmenu GtkWidget* close_button GtkWidget* save_button GtkWidget** axis_items GdkDevice* current_device GtkWidget* keys_list GtkWidget* keys_listbox")
(STRUCT "GtkInvisible gboolean has_user_ref_count")
(STRUCT "GtkItemFactoryEntry gchar* path gchar* accelerator GtkItemFactoryCallback callback guint callback_action gchar* item_type gpointer extra_data")
(STRUCT "GtkLabel gchar* label guint jtype guint wrap guint use_underline guint use_markup guint mnemonic_keyval gchar* text PangoAttrList* attrs PangoAttrList* effective_attrs PangoLayout* layout GtkWidget* mnemonic_widget GtkWindow* mnemonic_window GtkLabelSelectionInfo* select_info")
(STRUCT "GtkLayout GList* children guint width guint height GtkAdjustment* hadjustment GtkAdjustment* vadjustment GdkWindow* bin_window GdkVisibilityState visibility gint scroll_x gint scroll_y guint freeze_count")
(STRUCT "GtkListStore gint stamp gpointer root gpointer tail GList* sort_list gint n_columns gint sort_column_id GtkSortType order GType* column_headers gint length GtkTreeIterCompareFunc default_sort_func gpointer default_sort_data GtkDestroyNotify default_sort_destroy")
(STRUCT "GtkMenu GtkWidget* parent_menu_item GtkWidget* old_active_menu_item GtkAccelGroup* accel_group gchar* accel_path GtkMenuPositionFunc position_func gpointer position_func_data guint toggle_size GtkWidget* toplevel GtkWidget* tearoff_window GtkWidget* tearoff_hbox GtkWidget* tearoff_scrollbar GtkAdjustment* tearoff_adjustment GdkWindow* view_window GdkWindow* bin_window gint scroll_offset gint saved_scroll_offset gint scroll_step guint timeout_id GdkRegion* navigation_region guint navigation_timeout guint needs_destruction_ref_count guint torn_off guint tearoff_active guint scroll_fast guint upper_arrow_visible guint lower_arrow_visible guint upper_arrow_prelight")
(STRUCT "GtkMenuItem GtkWidget* submenu GdkWindow* event_window guint16 toggle_size guint16 accelerator_width gchar* accel_path guint show_submenu_indicator guint submenu_placement guint submenu_direction guint right_justify guint timer")
(STRUCT "GtkMenuShell GList* children GtkWidget* active_menu_item GtkWidget* parent_menu_shell guint button guint32 activate_time guint active guint have_grab guint have_xgrab guint ignore_leave guint menu_flag guint ignore_enter")
(STRUCT "GtkMessageDialog GtkWidget* image GtkWidget* label")
(STRUCT "GtkMisc gfloat xalign gfloat yalign guint16 xpad guint16 ypad")
(STRUCT "GtkNotebook GtkNotebookPage* cur_page GList* children GList* first_tab GList* focus_tab GtkWidget* menu GdkWindow* event_window guint32 timer guint16 tab_hborder guint16 tab_vborder guint show_tabs guint homogeneous guint show_border guint tab_pos guint scrollable guint in_child guint click_child guint button guint need_timer guint child_has_focus")
(STRUCT "GtkObject guint32 flags")
(STRUCT "GtkOptionMenu GtkWidget* menu GtkWidget* menu_item guint16 width guint16 height")
(STRUCT "GtkPaned GtkWidget* child1 GtkWidget* child2 GdkWindow* handle GdkGC* xor_gc GdkCursorType cursor_type gint child1_size gint last_allocation gint min_position gint max_position guint position_set guint in_drag guint child1_shrink guint child1_resize guint child2_shrink guint child2_resize")
(STRUCT "GtkPlug GdkWindow* socket_window GtkWidget* modality_window GtkWindowGroup* modality_group")
(STRUCT "GtkRadioButton GSList* group")
(STRUCT "GtkRadioMenuItem GSList* group")
(STRUCT "GtkRange GtkAdjustment* adjustment GtkUpdateType update_policy guint inverted guint flippable guint has_stepper_a guint has_stepper_b guint has_stepper_c guint has_stepper_d guint need_recalc guint slider_size_fixed gint min_slider_size GtkOrientation orientation gint slider_start gint slider_end gint round_digits guint trough_click_forward guint update_pending GtkRangeLayout* layout GtkRangeStepTimer* timer gint slide_initial_slider_position gint slide_initial_coordinate guint update_timeout_id GdkWindow* event_window")
(STRUCT "GtkRulerMetric gchar* metric_name gchar* abbrev gdouble pixels_per_unit gdouble* ruler_scale gint* subdivide")
(STRUCT "GtkRuler GdkPixmap* backing_store GdkGC* non_gr_exp_gc GtkRulerMetric* metric gint xsrc gint ysrc gint slider_size gdouble lower gdouble upper gdouble position gdouble max_size")
(STRUCT "GtkScale gint digits guint draw_value")
(STRUCT "GtkScrolledWindow GtkWidget* hscrollbar GtkWidget* vscrollbar guint hscrollbar_policy guint vscrollbar_policy guint hscrollbar_visible guint vscrollbar_visible guint window_placement guint16 shadow_type")
(STRUCT "GtkSelectionData GdkAtom selection GdkAtom target GdkAtom type gint format guchar* data gint length")
(STRUCT "GtkTargetEntry gchar* target guint flags guint info")
(STRUCT "GtkTargetList GList* list guint ref_count")
(STRUCT "GtkSettings GData* queued_settings GValue* property_values GtkRcContext* rc_context")
(STRUCT "GtkSizeGroup GSList* widgets guint8 mode guint have_width guint have_height")
(STRUCT "GtkSocket guint16 request_width guint16 request_height guint16 current_width guint16 current_height GdkWindow* plug_window GtkWidget* plug_widget gshort xembed_version guint same_app guint focus_in guint have_size guint need_map guint is_mapped GtkWidget* toplevel")
(STRUCT "GtkSpinButton GtkAdjustment* adjustment GdkWindow* panel guint32 timer gdouble climb_rate gdouble timer_step GtkSpinButtonUpdatePolicy update_policy guint in_child guint click_child guint button guint need_timer guint timer_calls guint digits guint numeric guint wrap")
(STRUCT "GtkStockItem gchar* stock_id gchar* label GdkModifierType modifier guint keyval gchar* translation_domain")
(STRUCT "GtkStyle GdkColor* fg GdkColor* bg GdkColor* light GdkColor* dark GdkColor* mid GdkColor* text GdkColor* base GdkColor* text_aa PangoFontDescription* font_desc gint xthickness gint ythickness GdkGC** fg_gc GdkGC** bg_gc GdkGC** light_gc GdkGC** dark_gc GdkGC** mid_gc GdkGC** text_gc GdkGC** base_gc GdkGC** text_aa_gc GdkGC* black_gc GdkGC* white_gc GdkPixmap** bg_pixmap gint attach_count gint depth GdkColormap* colormap GtkRcStyle* rc_style GSList* styles GArray* property_cache GSList* icon_factories")
(STRUCT "GtkBorder gint left gint right gint top gint bottom")
(STRUCT "GtkStatusbar GtkWidget* frame GtkWidget* label GSList* messages GSList* keys guint seq_context_id guint seq_message_id GdkWindow* grip_window guint has_resize_grip")
(STRUCT "GtkTable GList* children GtkTableRowCol* rows GtkTableRowCol* cols guint16 nrows guint16 ncols guint16 column_spacing guint16 row_spacing")
(STRUCT "GtkTextBuffer GtkTextTagTable* tag_table GtkTextBTree* btree GSList* clipboard_contents_buffers GSList* selection_clipboards GtkTextLogAttrCache* log_attr_cache")
(STRUCT-make "GtkTextIter")
(STRUCT-make "GtkTextMark")
(STRUCT-make "GtkTextChildAnchor")
(STRUCT "GtkToggleButton gboolean active guint draw_indicator") ; headers say guint which is inconsistent with toggle_button_set_active
(STRUCT "GtkToolbar gint num_children GList* children GtkOrientation orientation GtkToolbarStyle style GtkIconSize icon_size GtkTooltips* tooltips gint button_maxw gint button_maxh guint style_set_connection guint icon_size_connection guint style_set")
(STRUCT "GtkTooltipsData GtkTooltips* tooltips GtkWidget* widget gchar* tip_text")
(STRUCT "GtkTooltips GtkWidget* tip_window GtkWidget* tip_label GtkTooltipsData* active_tips_data GList* tips_data_list guint delay guint enabled guint have_grab gint timer_tag gboolean use_sticky_delay")
(STRUCT "GtkTreeModelSort gpointer root gint stamp guint child_flags GtkTreeModel* child_model gint zero_ref_count GList* sort_list gint sort_column_id GtkSortType order GtkTreeIterCompareFunc default_sort_func gpointer default_sort_data GtkDestroyNotify default_sort_destroy guint changed_id guint inserted_id guint has_child_toggled_id guint deleted_id guint reordered_id")
(STRUCT "GtkTreeSelection GtkTreeView* tree_view GtkSelectionMode type GtkTreeSelectionFunc user_func gpointer user_data GtkDestroyNotify destroy")
(STRUCT "GtkTreeStore gint stamp gpointer root gpointer last gint n_columns gint sort_column_id GList* sort_list GtkSortType order GType* column_headers GtkTreeIterCompareFunc default_sort_func gpointer default_sort_data GtkDestroyNotify default_sort_destroy")
(STRUCT "GtkTreeViewColumn GtkWidget* tree_view GtkWidget* button GtkWidget* child GtkWidget* arrow GtkWidget* alignment GdkWindow* window GtkCellEditable* editable_widget gfloat xalign guint property_changed_signal gint spacing GtkTreeViewColumnSizing column_type gint requested_width gint button_request gint resized_width gint width gint fixed_width gint min_width gint max_width gint drag_x gint drag_y gchar* title GList* cell_list guint sort_clicked_signal guint sort_column_changed_signal gint sort_column_id GtkSortType sort_order guint visible guint resizable guint clickable guint dirty guint show_sort_indicator guint maybe_reordered guint reorderable")
(STRUCT "GtkViewport GtkShadowType shadow_type GdkWindow* view_window GdkWindow* bin_window GtkAdjustment* hadjustment GtkAdjustment* vadjustment")
(STRUCT "GtkRequisition gint width gint height")
(STRUCT "GtkWidget guint8 state guint8 saved_state gchar* name GtkStyle* style GdkWindow* window GtkWidget* parent")
(STRUCT "GtkWindow gchar* title gchar* wmclass_name gchar* wmclass_class gchar* wm_role GtkWidget* focus_widget GtkWidget* default_widget GtkWindow* transient_parent GdkWindow* frame GtkWindowGroup* group guint16 configure_request_count guint allow_shrink guint allow_grow guint configure_notify_received guint need_default_position guint need_default_size guint position GtkWindowType type guint has_user_ref_count guint has_focus guint modal guint destroy_with_parent guint has_frame guint iconify_initially guint stick_initially guint maximize_initially guint decorated GdkWindowTypeHint type_hint GdkGravity gravity guint frame_left guint frame_top guint frame_right guint frame_bottom guint keys_changed_handler GdkModifierType mnemonic_modifier")
;(STRUCT "PangoColor guint16 &red guint16 &green guint16 &blue")
;(STRUCT "PangoAttribute guint start_index guint end_index")
;(STRUCT "PangoLogAttr guint is_line_break guint is_mandatory_break guint is_char_break guint is_white guint is_cursor_position guint is_word_start guint is_word_end guint is_sentence_boundary guint is_sentence_start guint is_sentence_end")
;(STRUCT "PangoFontMetrics guint ref_count int ascent int descent int approximate_char_width int approximate_digit_width")

;;; could this use xen rather than gpointer?



(CLNG "GTK_TYPE_ACCEL_GROUP")
(CLNG "GTK_TYPE_ACCEL_LABEL")
(CLNG "GTK_TYPE_ACCESSIBLE")
(CLNG "GTK_TYPE_ADJUSTMENT")
(CLNG "GTK_TYPE_ALIGNMENT")
(CLNG "GTK_TYPE_ARROW")
(CLNG "GTK_TYPE_ASPECT_FRAME")
(CLNG "GTK_TYPE_BUTTON_BOX")
(CLNG "GTK_TYPE_BIN")
(CLNG "GTK_TYPE_BOX")
(CLNG "GTK_TYPE_BUTTON")
(CLNG "GTK_TYPE_CALENDAR")
(CLNG "GTK_TYPE_CELL_EDITABLE")
(CLNG "GTK_TYPE_CELL_RENDERER")
(CLNG "GTK_TYPE_CELL_RENDERER_PIXBUF")
(CLNG "GTK_TYPE_CELL_RENDERER_TEXT")
(CLNG "GTK_TYPE_CELL_RENDERER_TOGGLE")
(CLNG "GTK_TYPE_CHECK_BUTTON")
(CLNG "GTK_TYPE_CHECK_MENU_ITEM")
(CLNG "GTK_TYPE_COLOR_SELECTION_DIALOG")
(CLNG "GTK_TYPE_COLOR_SELECTION")
(CLNG "GTK_TYPE_COMBO")
(CLNG "GTK_TYPE_CONTAINER")
(CLNG "GTK_TYPE_CURVE")
(CLNG "GTK_TYPE_DIALOG")
(CLNG "GTK_TYPE_DRAWING_AREA")
(CLNG "GTK_TYPE_EDITABLE")
(CLNG "GTK_TYPE_ENTRY")
(CLNG "GTK_TYPE_EVENT_BOX")
(CLNG "GTK_TYPE_FILE_SELECTION")
(CLNG "GTK_TYPE_FIXED")
(CLNG "GTK_TYPE_FONT_SELECTION")
(CLNG "GTK_TYPE_FONT_SELECTION_DIALOG")
(CLNG "GTK_TYPE_FRAME")
(CLNG "GTK_TYPE_GAMMA_CURVE")
(CLNG "GTK_TYPE_HANDLE_BOX")
(CLNG "GTK_TYPE_HBUTTON_BOX")
(CLNG "GTK_TYPE_HBOX")
(CLNG "GTK_TYPE_HPANED")
(CLNG "GTK_TYPE_HRULER")
(CLNG "GTK_TYPE_HSCALE")
(CLNG "GTK_TYPE_HSCROLLBAR")
(CLNG "GTK_TYPE_HSEPARATOR")
(CLNG "GTK_TYPE_ICON_FACTORY")
(CLNG "GTK_TYPE_IMAGE")
(CLNG "GTK_TYPE_IMAGE_MENU_ITEM")
(CLNG "GTK_TYPE_IM_CONTEXT")
(CLNG "GTK_TYPE_IM_CONTEXT_SIMPLE")
(CLNG "GTK_TYPE_IM_MULTICONTEXT")
(CLNG "GTK_TYPE_INPUT_DIALOG")
(CLNG "GTK_TYPE_INVISIBLE")
(CLNG "GTK_TYPE_ITEM_FACTORY")
(CLNG "GTK_TYPE_ITEM")
(CLNG "GTK_TYPE_LABEL")
(CLNG "GTK_TYPE_LAYOUT")
(CLNG "GTK_TYPE_LIST_STORE")
(CLNG "GTK_TYPE_MENU_BAR")
(CLNG "GTK_TYPE_MENU")
(CLNG "GTK_TYPE_MENU_ITEM")
(CLNG "GTK_TYPE_MENU_SHELL")
(CLNG "GTK_TYPE_MESSAGE_DIALOG")
(CLNG "GTK_TYPE_MISC")
(CLNG "GTK_TYPE_NOTEBOOK")
(CLNG "GTK_TYPE_OBJECT")
(CLNG "GTK_TYPE_OPTION_MENU")
(CLNG "GTK_TYPE_PANED")
(CLNG "GTK_TYPE_PLUG")
(CLNG "GTK_TYPE_PROGRESS_BAR")
(CLNG "GTK_TYPE_RADIO_BUTTON")
(CLNG "GTK_TYPE_RADIO_MENU_ITEM")
(CLNG "GTK_TYPE_RANGE")
(CLNG "GTK_TYPE_RC_STYLE")
(CLNG "GTK_TYPE_RULER")
(CLNG "GTK_TYPE_SCALE")
(CLNG "GTK_TYPE_SCROLLBAR")
(CLNG "GTK_TYPE_SCROLLED_WINDOW")
(CLNG "GTK_TYPE_SEPARATOR")
(CLNG "GTK_TYPE_SEPARATOR_MENU_ITEM")
(CLNG "GTK_TYPE_SETTINGS")
(CLNG "GTK_TYPE_SIZE_GROUP")
(CLNG "GTK_TYPE_SOCKET")
(CLNG "GTK_TYPE_SPIN_BUTTON")
(CLNG "GTK_TYPE_STATUSBAR")
(CLNG "GTK_TYPE_STYLE")
(CLNG "GTK_TYPE_TABLE")
(CLNG "GTK_TYPE_TEAROFF_MENU_ITEM")
(CLNG "GTK_TYPE_TEXT_BUFFER")
(CLNG "GTK_TYPE_TEXT_CHILD_ANCHOR")
(CLNG "GTK_TYPE_TEXT_MARK")
(CLNG "GTK_TYPE_TEXT_TAG")
(CLNG "GTK_TYPE_TEXT_TAG_TABLE")
(CLNG "GTK_TYPE_TEXT_VIEW")
(CLNG "GTK_TYPE_TOGGLE_BUTTON")
(CLNG "GTK_TYPE_TOOLBAR")
(CLNG "GTK_TYPE_TOOLTIPS")
(CLNG "GTK_TYPE_TREE_DRAG_SOURCE")
(CLNG "GTK_TYPE_TREE_DRAG_DEST")
(CLNG "GTK_TYPE_TREE_MODEL")
(CLNG "GTK_TYPE_TREE_MODEL_SORT")
(CLNG "GTK_TYPE_TREE_SELECTION")
(CLNG "GTK_TYPE_TREE_SORTABLE")
(CLNG "GTK_TYPE_TREE_STORE")
(CLNG "GTK_TYPE_TREE_VIEW_COLUMN")
(CLNG "GTK_TYPE_TREE_VIEW")
(CLNG "GTK_TYPE_VBUTTON_BOX")
(CLNG "GTK_TYPE_VBOX")
(CLNG "GTK_TYPE_VIEWPORT")
(CLNG "GTK_TYPE_VPANED")
(CLNG "GTK_TYPE_VRULER")
(CLNG "GTK_TYPE_VSCALE")
(CLNG "GTK_TYPE_VSCROLLBAR")
(CLNG "GTK_TYPE_VSEPARATOR")
(CLNG "GTK_TYPE_WIDGET")
(CLNG "GTK_TYPE_WINDOW")
(CLNG "GTK_TYPE_WINDOW_GROUP")
(CLNG "GDK_TYPE_COLORMAP")
(CLNG "GDK_TYPE_COLOR")
(CLNG "GDK_TYPE_CURSOR")
(CLNG "GDK_TYPE_DRAG_CONTEXT")
(CLNG "GDK_TYPE_DRAWABLE")
(CLNG "GDK_TYPE_CURSOR_TYPE")
(CLNG "GDK_TYPE_DRAG_ACTION")
(CLNG "GDK_TYPE_DRAG_PROTOCOL")
(CLNG "GDK_TYPE_FILTER_RETURN")
(CLNG "GDK_TYPE_EVENT_TYPE")
(CLNG "GDK_TYPE_EVENT_MASK")
(CLNG "GDK_TYPE_VISIBILITY_STATE")
(CLNG "GDK_TYPE_SCROLL_DIRECTION")
(CLNG "GDK_TYPE_NOTIFY_TYPE")
(CLNG "GDK_TYPE_CROSSING_MODE")
(CLNG "GDK_TYPE_PROPERTY_STATE")
(CLNG "GDK_TYPE_WINDOW_STATE")
(CLNG "GDK_TYPE_SETTING_ACTION")
(CLNG "GDK_TYPE_FONT_TYPE")
(CLNG "GDK_TYPE_CAP_STYLE")
(CLNG "GDK_TYPE_FILL")
(CLNG "GDK_TYPE_FUNCTION")
(CLNG "GDK_TYPE_JOIN_STYLE")
(CLNG "GDK_TYPE_LINE_STYLE")
(CLNG "GDK_TYPE_SUBWINDOW_MODE")
(CLNG "GDK_TYPE_GC_VALUES_MASK")
(CLNG "GDK_TYPE_IMAGE_TYPE")
(CLNG "GDK_TYPE_EXTENSION_MODE")
(CLNG "GDK_TYPE_INPUT_SOURCE")
(CLNG "GDK_TYPE_INPUT_MODE")
(CLNG "GDK_TYPE_AXIS_USE")
(CLNG "GDK_TYPE_PROP_MODE")
(CLNG "GDK_TYPE_FILL_RULE")
(CLNG "GDK_TYPE_OVERLAP_TYPE")
(CLNG "GDK_TYPE_RGB_DITHER")
(CLNG "GDK_TYPE_BYTE_ORDER")
(CLNG "GDK_TYPE_MODIFIER_TYPE")
(CLNG "GDK_TYPE_INPUT_CONDITION")
(CLNG "GDK_TYPE_STATUS")
(CLNG "GDK_TYPE_GRAB_STATUS")
(CLNG "GDK_TYPE_VISUAL_TYPE")
(CLNG "GDK_TYPE_WINDOW_CLASS")
(CLNG "GDK_TYPE_WINDOW_TYPE")
(CLNG "GDK_TYPE_WINDOW_ATTRIBUTES_TYPE")
(CLNG "GDK_TYPE_WINDOW_HINTS")
(CLNG "GDK_TYPE_WINDOW_TYPE_HINT")
(CLNG "GDK_TYPE_WM_DECORATION")
(CLNG "GDK_TYPE_WM_FUNCTION")
(CLNG "GDK_TYPE_GRAVITY")
(CLNG "GDK_TYPE_WINDOW_EDGE")
(CLNG "GDK_TYPE_EVENT")
(CLNG "GDK_TYPE_GC")
(CLNG "GDK_TYPE_RECTANGLE")
(CLNG "GDK_TYPE_IMAGE")
(CLNG "GDK_TYPE_DEVICE")
(CLNG "GDK_TYPE_KEYMAP")
(CLNG "GDK_TYPE_PIXMAP")
(CLNG "GDK_TYPE_VISUAL")
(CLNG "GDK_TYPE_WINDOW")

(CCAST "G_OBJECT(object)" "GObject*")
(CFNC "GType G_OBJECT_TYPE GtkObject* object")
(CCHK "G_IS_OBJECT(object)" "GObject*")

#!
GTK_TYPE_IS_OBJECT(type)
G_TYPE_IS_BOXED(type)
(CLNG "G_TYPE_CLOSURE")
(CLNG "G_TYPE_VALUE")
(CLNG "G_TYPE_VALUE_ARRAY")
(CLNG "G_TYPE_GSTRING")
G_TYPE_IS_ENUM(type)
G_TYPE_IS_OBJECT(type)
G_IS_OBJECT_CLASS(class)
G_VALUE_HOLDS_OBJECT(value)
G_TYPE_IS_PARAM(type)
G_PARAM_SPEC(pspec)
G_IS_PARAM_SPEC(pspec)
G_PARAM_SPEC_TYPE(pspec)
G_VALUE_HOLDS_PARAM(value)
G_TYPE_PARAM_CHAR
G_IS_PARAM_SPEC_CHAR(pspec)
G_PARAM_SPEC_CHAR(pspec)
G_TYPE_PARAM_UCHAR
G_IS_PARAM_SPEC_UCHAR(pspec)
G_PARAM_SPEC_UCHAR(pspec)
G_TYPE_PARAM_BOOLEAN
G_IS_PARAM_SPEC_BOOLEAN(pspec)
G_PARAM_SPEC_BOOLEAN(pspec)
G_TYPE_PARAM_INT
G_IS_PARAM_SPEC_INT(pspec)
G_PARAM_SPEC_INT(pspec)
G_TYPE_PARAM_UINT
G_IS_PARAM_SPEC_UINT(pspec)
G_PARAM_SPEC_UINT(pspec)
G_TYPE_PARAM_LONG
G_IS_PARAM_SPEC_LONG(pspec)
G_PARAM_SPEC_LONG(pspec)
G_TYPE_PARAM_ULONG
G_IS_PARAM_SPEC_ULONG(pspec)
G_PARAM_SPEC_ULONG(pspec)
G_TYPE_PARAM_INT64
G_IS_PARAM_SPEC_INT64(pspec)
G_PARAM_SPEC_INT64(pspec)
G_TYPE_PARAM_UINT64
G_IS_PARAM_SPEC_UINT64(pspec)
G_PARAM_SPEC_UINT64(pspec)
G_TYPE_PARAM_UNICHAR
G_PARAM_SPEC_UNICHAR(pspec)
G_IS_PARAM_SPEC_UNICHAR(pspec)
G_TYPE_PARAM_ENUM
G_IS_PARAM_SPEC_ENUM(pspec)
G_PARAM_SPEC_ENUM(pspec)
G_TYPE_PARAM_FLAGS
G_IS_PARAM_SPEC_FLAGS(pspec)
G_PARAM_SPEC_FLAGS(pspec)
G_TYPE_PARAM_FLOAT
G_IS_PARAM_SPEC_FLOAT(pspec)
G_PARAM_SPEC_FLOAT(pspec)
G_TYPE_PARAM_DOUBLE
G_IS_PARAM_SPEC_DOUBLE(pspec)
G_PARAM_SPEC_DOUBLE(pspec)
G_TYPE_PARAM_STRING
G_IS_PARAM_SPEC_STRING(pspec)
G_PARAM_SPEC_STRING(pspec)
G_TYPE_PARAM_PARAM
G_IS_PARAM_SPEC_PARAM(pspec)
G_PARAM_SPEC_PARAM(pspec)
G_TYPE_PARAM_BOXED
G_IS_PARAM_SPEC_BOXED(pspec)
G_PARAM_SPEC_BOXED(pspec)
G_TYPE_PARAM_POINTER
G_IS_PARAM_SPEC_POINTER(pspec)
G_PARAM_SPEC_POINTER(pspec)
G_TYPE_PARAM_VALUE_ARRAY
G_IS_PARAM_SPEC_VALUE_ARRAY(pspec)
G_PARAM_SPEC_VALUE_ARRAY(pspec)
G_TYPE_PARAM_OBJECT
G_IS_PARAM_SPEC_OBJECT(pspec)
G_PARAM_SPEC_OBJECT(pspec)
G_SIGNAL_TYPE_STATIC_SCOPE
G_TYPE_IO_CHANNEL
G_TYPE_IS_FUNDAMENTAL(type)
G_TYPE_IS_DERIVED(type)
G_TYPE_IS_INTERFACE(type)
G_TYPE_IS_CLASSED(type)
G_TYPE_IS_INSTANTIATABLE(type)
G_TYPE_IS_DERIVABLE(type)
G_TYPE_IS_DEEP_DERIVABLE(type)
G_TYPE_IS_ABSTRACT(type)
G_TYPE_IS_VALUE_ABSTRACT(type)
G_TYPE_IS_VALUE_TYPE(type)
!#
(CLNG "G_TYPE_IO_CONDITION")
;(CLNG "G_TYPE_FUNDAMENTAL(type)")
;(CLNG "G_TYPE_FUNDAMENTAL_MAX")
(CLNG "G_TYPE_INVALID")
(CLNG "G_TYPE_NONE")
(CLNG "G_TYPE_INTERFACE")
(CLNG "G_TYPE_CHAR")
(CLNG "G_TYPE_UCHAR")
(CLNG "G_TYPE_BOOLEAN")
(CLNG "G_TYPE_INT")
(CLNG "G_TYPE_UINT")
(CLNG "G_TYPE_LONG")
(CLNG "G_TYPE_ULONG")
(CLNG "G_TYPE_INT64")
(CLNG "G_TYPE_UINT64")
(CLNG "G_TYPE_ENUM")
(CLNG "G_TYPE_FLAGS")
(CLNG "G_TYPE_FLOAT")
(CLNG "G_TYPE_DOUBLE")
(CLNG "G_TYPE_STRING")
(CLNG "G_TYPE_POINTER")
(CLNG "G_TYPE_BOXED")
(CLNG "G_TYPE_PARAM")
(CLNG "G_TYPE_OBJECT")
(CLNG "G_UNICODE_CONTROL")
(CLNG "G_UNICODE_FORMAT")
(CLNG "G_UNICODE_UNASSIGNED")
(CLNG "G_UNICODE_PRIVATE_USE")
(CLNG "G_UNICODE_SURROGATE")
(CLNG "G_UNICODE_LOWERCASE_LETTER")
(CLNG "G_UNICODE_MODIFIER_LETTER")
(CLNG "G_UNICODE_OTHER_LETTER")
(CLNG "G_UNICODE_TITLECASE_LETTER")
(CLNG "G_UNICODE_UPPERCASE_LETTER")
(CLNG "G_UNICODE_COMBINING_MARK")
(CLNG "G_UNICODE_ENCLOSING_MARK")
(CLNG "G_UNICODE_NON_SPACING_MARK")
(CLNG "G_UNICODE_DECIMAL_NUMBER")
(CLNG "G_UNICODE_LETTER_NUMBER")
(CLNG "G_UNICODE_OTHER_NUMBER")
(CLNG "G_UNICODE_CONNECT_PUNCTUATION")
(CLNG "G_UNICODE_DASH_PUNCTUATION")
(CLNG "G_UNICODE_CLOSE_PUNCTUATION")
(CLNG "G_UNICODE_FINAL_PUNCTUATION")
(CLNG "G_UNICODE_INITIAL_PUNCTUATION")
(CLNG "G_UNICODE_OTHER_PUNCTUATION")
(CLNG "G_UNICODE_OPEN_PUNCTUATION")
(CLNG "G_UNICODE_CURRENCY_SYMBOL")
(CLNG "G_UNICODE_MODIFIER_SYMBOL")
(CLNG "G_UNICODE_MATH_SYMBOL")
(CLNG "G_UNICODE_OTHER_SYMBOL")
(CLNG "G_UNICODE_LINE_SEPARATOR")
(CLNG "G_UNICODE_PARAGRAPH_SEPARATOR")
(CLNG "G_UNICODE_SPACE_SEPARATOR")
(CLNG "G_UNICODE_BREAK_MANDATORY")
(CLNG "G_UNICODE_BREAK_CARRIAGE_RETURN")
(CLNG "G_UNICODE_BREAK_LINE_FEED")
(CLNG "G_UNICODE_BREAK_COMBINING_MARK")
(CLNG "G_UNICODE_BREAK_SURROGATE")
(CLNG "G_UNICODE_BREAK_ZERO_WIDTH_SPACE")
(CLNG "G_UNICODE_BREAK_INSEPARABLE")
(CLNG "G_UNICODE_BREAK_NON_BREAKING_GLUE")
(CLNG "G_UNICODE_BREAK_CONTINGENT")
(CLNG "G_UNICODE_BREAK_SPACE")
(CLNG "G_UNICODE_BREAK_AFTER")
(CLNG "G_UNICODE_BREAK_BEFORE")
(CLNG "G_UNICODE_BREAK_BEFORE_AND_AFTER")
(CLNG "G_UNICODE_BREAK_HYPHEN")
(CLNG "G_UNICODE_BREAK_NON_STARTER")
(CLNG "G_UNICODE_BREAK_OPEN_PUNCTUATION")
(CLNG "G_UNICODE_BREAK_CLOSE_PUNCTUATION")
(CLNG "G_UNICODE_BREAK_QUOTATION")
(CLNG "G_UNICODE_BREAK_EXCLAMATION")
(CLNG "G_UNICODE_BREAK_IDEOGRAPHIC")
(CLNG "G_UNICODE_BREAK_NUMERIC")
(CLNG "G_UNICODE_BREAK_INFIX_SEPARATOR")
(CLNG "G_UNICODE_BREAK_SYMBOL")
(CLNG "G_UNICODE_BREAK_ALPHABETIC")
(CLNG "G_UNICODE_BREAK_PREFIX")
(CLNG "G_UNICODE_BREAK_POSTFIX")
(CLNG "G_UNICODE_BREAK_COMPLEX_CONTEXT")
(CLNG "G_UNICODE_BREAK_AMBIGUOUS")
(CLNG "G_UNICODE_BREAK_UNKNOWN")
(CINT "G_NORMALIZE_DEFAULT")
(CINT "G_NORMALIZE_NFD")
(CINT "G_NORMALIZE_DEFAULT_COMPOSE")
(CINT "G_NORMALIZE_NFC")
(CINT "G_NORMALIZE_ALL")
(CINT "G_NORMALIZE_NFKD")
(CINT "G_NORMALIZE_ALL_COMPOSE")
(CINT "G_NORMALIZE_NFKC")
#!
(CFNC "gboolean g_get_charset char** charset")
(CFNC "gboolean g_unichar_isalnum gunichar c") 
(CFNC "gboolean g_unichar_isalpha gunichar c") 
(CFNC "gboolean g_unichar_iscntrl gunichar c") 
(CFNC "gboolean g_unichar_isdigit gunichar c") 
(CFNC "gboolean g_unichar_isgraph gunichar c") 
(CFNC "gboolean g_unichar_islower gunichar c") 
(CFNC "gboolean g_unichar_isprint gunichar c") 
(CFNC "gboolean g_unichar_ispunct gunichar c") 
(CFNC "gboolean g_unichar_isspace gunichar c") 
(CFNC "gboolean g_unichar_isupper gunichar c") 
(CFNC "gboolean g_unichar_isxdigit gunichar c") 
(CFNC "gboolean g_unichar_istitle gunichar c") 
(CFNC "gboolean g_unichar_isdefined gunichar c") 
(CFNC "gboolean g_unichar_iswide gunichar c") 
(CFNC "gunichar g_unichar_toupper gunichar c") 
(CFNC "gunichar g_unichar_tolower gunichar c") 
(CFNC "gunichar g_unichar_totitle gunichar c") 
(CFNC "gint g_unichar_digit_value gunichar c") 
(CFNC "gint g_unichar_xdigit_value gunichar c") 
(CFNC "GUnicodeType g_unichar_type gunichar c") 
(CFNC "GUnicodeBreakType g_unichar_break_type gunichar c") 
(CFNC "void g_unicode_canonical_ordering gunichar* string gsize len")
(CFNC "gunichar* g_unicode_canonical_decomposition gunichar ch gsize* result_len")
(CFNC "gchar* g_utf8_next_char gchar* p") ;??
(CFNC "gunichar g_utf8_get_char gchar* p")
(CFNC "gunichar g_utf8_get_char_validated gchar* p gssize max_len")
(CFNC "gchar* g_utf8_offset_to_pointer gchar* str glong offset") 
(CFNC "glong g_utf8_pointer_to_offset gchar* str gchar* pos")
(CFNC "gchar* g_utf8_prev_char gchar* p")
(CFNC "gchar* g_utf8_find_next_char gchar* p gchar* end")
(CFNC "gchar* g_utf8_find_prev_char gchar* str gchar* p")
(CFNC "glong g_utf8_strlen gchar* p gssize max") 
(CFNC "gchar* g_utf8_strncpy gchar* dest gchar* src gsize n")
(CFNC "gchar* g_utf8_strchr gchar* p gssize len gunichar c")
(CFNC "gchar* g_utf8_strrchr gchar* p gssize len gunichar c")
(CFNC "gunichar2* g_utf8_to_utf16 gchar* str glong len glong* [items_read] glong* [items_written] GError** [error]")
(CFNC "gunichar* g_utf8_to_ucs4 gchar* str glong len glong* [items_read] glong* [items_written] GError** [error]")
(CFNC "gunichar* g_utf8_to_ucs4_fast gchar* str glong len glong* [items_written]") 
(CFNC "gunichar* g_utf16_to_ucs4 gunichar2* str glong len glong* [items_read] glong* [items_written] GError** [error]")
(CFNC "gchar* g_utf16_to_utf8 gunichar2* str glong len glong* [items_read] glong* [items_written] GError** [error]")
(CFNC "gunichar2* g_ucs4_to_utf16 gunichar* str glong len glong* [items_read] glong* [items_written] GError** [error]")
(CFNC "gchar* g_ucs4_to_utf8 gunichar* str glong len glong* [items_read] glong* [items_written] GError** [error]")
(CFNC "gint g_unichar_to_utf8 gunichar c gchar* outbuf")
(CFNC "gboolean g_utf8_validate gchar* str gssize max_len gchar** end")
(CFNC "gboolean g_unichar_validate gunichar ch")
(CFNC "gchar* g_utf8_strup gchar* str gssize len")
(CFNC "gchar* g_utf8_strdown gchar* str gssize len")
(CFNC "gchar* g_utf8_casefold gchar* str gssize len")
(CFNC "gchar* g_utf8_normalize gchar* str gssize len GNormalizeMode mode")
(CFNC "gint g_utf8_collate gchar* str1 gchar* str2")
(CFNC "gchar* g_utf8_collate_key gchar* str gssize len")

!#
;;; and gobject/gtype.h type creation functions




;;; -------- 2.1 changes 
;;; omitted gtk_tree_path_new_from_indices() -- uses va arg

(CFNC-21 "void gdk_draw_pixbuf GdkDrawable* drawable GdkGC* gc GdkPixbuf* pixbuf int src_x int src_y int dest_x int dest_y int width int height GdkRgbDither dither int x_dither int y_dither")
(CFNC-21 "gchar* gtk_tree_model_get_string_from_iter GtkTreeModel* tree_model GtkTreeIter* iter")
(CFNC-21 "gboolean gtk_tree_model_sort_iter_is_valid GtkTreeModelSort* tree_model_sort GtkTreeIter* iter")
(CFNC-21 "void gtk_tree_view_expand_to_path GtkTreeView* tree_view GtkTreePath* path")
(CFNC-21 "GList* gtk_tree_selection_get_selected_rows GtkTreeSelection* selection GtkTreeModel** model")
(CFNC-21 "int gtk_tree_selection_count_selected_rows GtkTreeSelection* selection")
(CFNC-21 "void gtk_menu_shell_select_first GtkMenuShell* menu_shell gboolean search_sensitive")
(CFNC-21 "int gtk_notebook_get_n_pages GtkNotebook* notebook")
(CFNC-21 "void gtk_list_store_reorder GtkListStore* store int* new_order")
(CFNC-21 "void gtk_list_store_swap GtkListStore* store GtkTreeIter* a GtkTreeIter* b")
(CFNC-22 "void gtk_list_store_move_after GtkListStore* store GtkTreeIter* iter GtkTreeIter* position")
(CFNC-22 "void gtk_list_store_move_before GtkListStore* store GtkTreeIter* iter GtkTreeIter* position")
(CFNC-21 "void gtk_tree_store_reorder GtkTreeStore* tree_store GtkTreeIter* parent int* new_order")
(CFNC-21 "void gtk_tree_store_swap GtkTreeStore* tree_store GtkTreeIter* a GtkTreeIter* b")
;;; removed in 2.2 (CFNC-21 "void gtk_tree_store_move GtkTreeStore* tree_store GtkTreeIter* iter GtkTreePath* position")

(CFNC-21 "GType gdk_display_get_type void")
(CFNC-21 "GdkDisplay* gdk_display_open gchar* display_name")
(CFNC-21 "gchar* gdk_display_get_name GdkDisplay* display")
(CFNC-21 "int gdk_display_get_n_screens GdkDisplay* display")
(CFNC-21 "GdkScreen* gdk_display_get_screen GdkDisplay* display int screen_num")
(CFNC-21 "GdkScreen* gdk_display_get_default_screen GdkDisplay* display")
(CFNC-21 "void gdk_display_pointer_ungrab GdkDisplay* display guint32 time")
(CFNC-21 "void gdk_display_keyboard_ungrab GdkDisplay* display guint32 time")
(CFNC-21 "gboolean gdk_display_pointer_is_grabbed GdkDisplay* display")
(CFNC-21 "void gdk_display_beep GdkDisplay* display")
(CFNC-21 "void gdk_display_sync GdkDisplay* display")
(CFNC-21 "void gdk_display_close GdkDisplay* display")
(CFNC-21 "GList* gdk_display_list_devices GdkDisplay* display")
(CFNC-21 "GdkEvent* gdk_display_get_event GdkDisplay* display")
(CFNC-21 "GdkEvent* gdk_display_peek_event GdkDisplay* display")
(CFNC-21 "void gdk_display_put_event GdkDisplay* display GdkEvent* event")
(CFNC-21 "void gdk_display_add_client_message_filter GdkDisplay* display GdkAtom message_type GdkFilterFunc func lambda_data #func_data")
(CFNC-21 "void gdk_display_set_double_click_time GdkDisplay* display guint msec")
(CFNC-21 "GdkDisplay* gdk_display_get_default void")
(CFNC-21 "GdkDevice* gdk_display_get_core_pointer GdkDisplay* display")
(CFNC-21 "void gdk_display_get_pointer GdkDisplay* display GdkScreen** screen int* x int* y GdkModifierType* mask")
(CFNC-21 "GdkWindow* gdk_display_get_window_at_pointer GdkDisplay* display int* win_x int* win_y")
(CFNC-21 "GdkDisplayPointerHooks* gdk_display_set_pointer_hooks GdkDisplay* display GdkDisplayPointerHooks* new_hooks")
(CFNC-21 "GType gdk_screen_get_type void")
(CFNC-21 "GdkColormap* gdk_screen_get_default_colormap GdkScreen* screen")
(CFNC-21 "void gdk_screen_set_default_colormap GdkScreen* screen GdkColormap* colormap")
(CFNC-21 "GdkColormap* gdk_screen_get_system_colormap GdkScreen* screen")
(CFNC-21 "GdkVisual* gdk_screen_get_system_visual GdkScreen* screen")
(CFNC-21 "GdkColormap* gdk_screen_get_rgb_colormap GdkScreen* screen")
(CFNC-21 "GdkVisual* gdk_screen_get_rgb_visual GdkScreen* screen")
(CFNC-21 "GdkWindow* gdk_screen_get_root_window GdkScreen* screen")
(CFNC-21 "GdkDisplay* gdk_screen_get_display GdkScreen* screen")
(CFNC-21 "int gdk_screen_get_number GdkScreen* screen")
(CFNC-21 "int gdk_screen_get_width GdkScreen* screen")
(CFNC-21 "int gdk_screen_get_height GdkScreen* screen")
(CFNC-21 "int gdk_screen_get_width_mm GdkScreen* screen")
(CFNC-21 "int gdk_screen_get_height_mm GdkScreen* screen")
(CFNC-21 "GList* gdk_screen_list_visuals GdkScreen* screen")
(CFNC-21 "GList* gdk_screen_get_toplevel_windows GdkScreen* screen")
(CFNC-21 "gchar* gdk_screen_make_display_name GdkScreen* screen")
(CFNC-21 "int gdk_screen_get_n_monitors GdkScreen* screen")
(CFNC-21 "void gdk_screen_get_monitor_geometry GdkScreen* screen int monitor_num GdkRectangle* dest")
(CFNC-21 "int gdk_screen_get_monitor_at_point GdkScreen* screen int x int y")
(CFNC-21 "int gdk_screen_get_monitor_at_window GdkScreen* screen GdkWindow* window")
(CFNC-21 "void gdk_screen_broadcast_client_message GdkScreen* screen GdkEvent* event")
(CFNC-21 "GdkScreen* gdk_screen_get_default void")
(CFNC-21 "gboolean gdk_screen_get_setting GdkScreen* screen gchar* name GValue* value")

(CLNG-21 "GDK_TYPE_SCREEN")
(CLNG-21 "GDK_TYPE_DISPLAY")
(CCAST-21 "GDK_SCREEN(object)" "GdkScreen*")
;GDK_SCREEN_CLASS(klass)
(CCHK-21 "GDK_IS_SCREEN(object)" "GdkScreen*")
;GDK_IS_SCREEN_CLASS(klass)
;GDK_SCREEN_GET_CLASS(obj)
(CCAST-21 "GDK_DISPLAY_OBJECT(object)" "GdkDisplay*")
;GDK_DISPLAY_CLASS(klass)
(CCHK-21 "GDK_IS_DISPLAY(object)" "GdkDisplay*")
;GDK_IS_DISPLAY_CLASS(klass)
;GDK_DISPLAY_GET_CLASS(obj)

(CFNC-21 "GtkClipboard* gtk_clipboard_get_for_display GdkDisplay* display GdkAtom selection")
(CFNC-21 "GdkDisplay* gtk_clipboard_get_display GtkClipboard* clipboard")
(CFNC-21 "GdkScreen* gtk_widget_get_screen GtkWidget* widget")
(CFNC-21 "gboolean gtk_widget_has_screen GtkWidget* widget")
(CFNC-21 "GdkDisplay* gtk_widget_get_display GtkWidget* widget")
(CFNC-21 "GdkWindow* gtk_widget_get_root_window GtkWidget* widget")
(CFNC-21 "GtkClipboard* gtk_widget_get_clipboard GtkWidget* widget GdkAtom selection")

;;; -------- end gtk 2.1 additions


;;; glist additions

(CFNC "void g_list_free GList* list")
(CFNC "GList* g_list_reverse GList* list")
(CFNC "GList* g_list_copy GList* list")
(CFNC "GList* g_list_last GList* list")
(CFNC "GList* g_list_first GList* list")
(CFNC "guint g_list_length GList* list")
(CFNC "void g_free gpointer mem")
(CFNC "GList* g_list_remove_link GList* list GList* llink")
(CFNC "gpointer g_object_get_data GObject* object gchar* key" 'const)
(CFNC "void g_object_set_data GObject* object gchar* key gpointer data" 'const)

(CCAST "GPOINTER(obj)" "gpointer")
(CCAST "GDK_EVENT_ANY(obj)" "GdkEventAny*")
(CCAST "GDK_EVENT_EXPOSE(obj)" "GdkEventExpose*")
(CCAST "GDK_EVENT_NOEXPOSE(obj)" "GdkEventNoExpose*")
(CCAST "GDK_EVENT_VISIBILITY(obj)" "GdkEventVisibility*")
(CCAST "GDK_EVENT_MOTION(obj)" "GdkEventMotion*")
(CCAST "GDK_EVENT_BUTTON(obj)" "GdkEventButton*")
(CCAST "GDK_EVENT_SCROLL(obj)" "GdkEventScroll*")
(CCAST "GDK_EVENT_KEY(obj)" "GdkEventKey*")
(CCAST "GDK_EVENT_CROSSING(obj)" "GdkEventCrossing*")
(CCAST "GDK_EVENT_FOCUS(obj)" "GdkEventFocus*")
(CCAST "GDK_EVENT_CONFIGURE(obj)" "GdkEventConfigure*")
(CCAST "GDK_EVENT_PROPERTY(obj)" "GdkEventProperty*")
(CCAST "GDK_EVENT_SELECTION(obj)" "GdkEventSelection*")
(CCAST "GDK_EVENT_PROXIMITY(obj)" "GdkEventProximity*")
(CCAST "GDK_EVENT_SETTING(obj)" "GdkEventSetting*")
(CCAST "GDK_EVENT_WINDOWSTATE(obj)" "GdkEventWindowState*")
(CCAST "GDK_EVENT_DND(obj)" "GdkEventDND*")

;;; ---------------- with-x11 name collisions

(define with-x11-accessors (list "pixel" "red" "green" "blue" "flags" "x" "y" "width" "height" "x1" "y1" "x2" "y2" 
				 "clip_mask" "clip_y_origin" "clip_x_origin" "graphics_exposures" "subwindow_mode" 
				 "font" "ts_y_origin" "ts_x_origin" "stipple" "tile" "join_style" "cap_style" 
				 "line_style" "line_width" "function" "name" "depth" "visual" 
				 "format" "data" "property" "target" "requestor" "selection" "atom" "override_redirect" 
				 "border_width" "parent" "count" "focus" "detail" "mode" "is_hint" "button" "keycode" 
				 "state" "y_root" "x_root" "root" "time" "subwindow" "window" "send_event" "type" "colormap"))
(define with-x11-readers (list "backing_store" "ascent" "descent" "red_mask" "green_mask" "blue_mask" "bits_per_rgb" 
			       "colormap_size" "bits_per_pixel" "win_gravity" "event_mask" "cursor" "byte_order" 
			       "min_height" "max_height" "min_width" "max_width" "height_inc" "width_inc"))


;;; accessor xg: pixel red green blue