;;; event.scm: user-interface auto-test functions (see snd-test.scm)

(if (not (provided? 'xm))
    (let ((hxm (dlopen "xm.so")))
      (if (string? hxm)
	  (snd-error (format #f "snd-motif.scm needs the xm module: ~A" hxm))
	  (dlinit hxm "init_xm"))))


(define key-event
  (let ((e (|XEvent |KeyPress))
	(cast-current-time (list 'Time |CurrentTime)))
    (lambda (widget key state)
      (let ((dpy (|XtDisplay widget))
	    (window (|XtWindow widget)))
	(set! (|type e) |KeyPress)
	(set! (|window e) window)
	(set! (|display e) dpy)
	(set! (|root e) (|RootWindow dpy (|DefaultScreen dpy)))
	(set! (|x e) 0)
	(set! (|y e) 0)
	(set! (|x_root e) 0)
	(set! (|y_root e) 0)
	(set! (|keycode e) (|XKeysymToKeycode dpy (list 'KeySym key)))
	(set! (|state e) state)
	(set! (|time e) cast-current-time)
	(set! (|same_screen e) #t)
	(set! (|subwindow e) (list 'Window |None))
	(let ((err (|XSendEvent dpy window #f |KeyPressMask e)))
	  (if (not (= err 0))
	      (begin
		(set! (|time e) cast-current-time)
		(set! (|type e) |KeyRelease)
		(set! err (|XSendEvent dpy window #f |KeyReleaseMask e))))
	  (if (= err 0)
	      (display (format #f "[key-event error] " err)))
	  err)))))
    
;;; (key-event (car (channel-widgets)) (char->integer #\a) 4)

(define resize-event
  (let ((e (|XEvent |ResizeRequest)))
    (lambda (widget width height)
      (let ((dpy (|XtDisplay widget))
	    (window (|XtWindow widget)))
	(set! (|window e) window)
	(set! (|display e) dpy)
	(set! (|width e) width)
	(set! (|height e) height)
	(|XSendEvent dpy window #f |ResizeRedirectMask e)))))

(define expose-event
  (let ((e (|XEvent |Expose)))
    (lambda (widget x y width height)
      (let ((dpy (|XtDisplay widget))
	    (window (|XtWindow widget)))
	(set! (|window e) window)
	(set! (|display e) dpy)
	(set! (|width e) width)
	(set! (|height e) height)
	(set! (|x e) x)
	(set! (|y e) y)
	(set! (|count e) 0)
	(|XSendEvent dpy window #f |ExposureMask e)))))

(define click-event
  (let ((e (|XEvent |ButtonPress)))
    (lambda (widget button state x y)
      (let ((dpy (|XtDisplay widget))
	    (window (|XtWindow widget)))
	(set! (|type e) |ButtonPress)
	(set! (|window e) window)
	(set! (|display e) dpy)
	(set! (|root e) (|RootWindow dpy (|DefaultScreen dpy)))
	(set! (|x e) x)
	(set! (|y e) y)
	(set! (|x_root e) 0)
	(set! (|y_root e) 0)
	(set! (|state e) state)
	(set! (|button e) button)
	(set! (|time e) (list 'Time |CurrentTime))
	(set! (|same_screen e) #t)
	(set! (|subwindow e) (list 'Window |None))
	(let ((err (|XSendEvent dpy window #f |ButtonPressMask e)))
	  (if (not (= err 0))
	      (begin
		(set! (|time e) (list 'Time |CurrentTime))
		(set! (|type e) |ButtonRelease)
		(set! err (|XSendEvent dpy window #f |ButtonReleaseMask e))))
	  (if (= err 0)
	      (display (format #f "[click-event error] " err)))
	  err)))))


(define drag-event
  (let ((e (|XEvent |ButtonPress))
	(e1 (|XEvent |MotionNotify)))
    (lambda (widget button state x0 y0 x1 y1)
      (let ((dpy (|XtDisplay widget))
	    (window (|XtWindow widget)))
	(set! (|type e) |ButtonPress)
	(set! (|window e) window)
	(set! (|display e) dpy)
	(set! (|root e) (|RootWindow dpy (|DefaultScreen dpy)))
	(set! (|x e) x0)
	(set! (|y e) y0)
	(set! (|x_root e) 0)
	(set! (|y_root e) 0)
	(set! (|state e) state)
	(set! (|button e) button)
	(set! (|time e) (list 'Time |CurrentTime))
	(set! (|same_screen e) #t)
	(set! (|subwindow e) (list 'Window |None))
	(let ((err (|XSendEvent dpy window #f |ButtonPressMask e)))
	  (if (not (= err 0))
	      (begin
		(set! (|window e1) window)
		(set! (|display e1) dpy)
		(set! (|root e1) (|RootWindow dpy (|DefaultScreen dpy)))
		(set! (|x e1) x1)
		(set! (|y e1) y1)
		(set! (|x_root e1) x0)
		(set! (|y_root e1) y0)
		(set! (|state e1) state)
		(set! (|time e1) (list 'Time (+ 300 |CurrentTime)))
		(set! (|same_screen e1) #t)
		(set! (|subwindow e1) (list 'Window |None))
		(set! (|is_hint e1) |NotifyNormal)
		(|XSendEvent dpy window #f |ButtonMotionMask e1)
		(set! (|type e) |ButtonRelease)
		(set! (|time e) (list 'Time (+ 500 |CurrentTime)))
		(set! (|x e) x1)
		(set! (|y e) y1)
		(|XSendEvent dpy window #f |ButtonReleaseMask e))))))))

(define (select-item wid pos)
  (if (not (|XmIsList wid))
      (display (format #f "~A is not a list" (|XtName wid)))
      (|XmListSelectPos wid (+ pos 1) #t)))

(define (click-button button)
  (if (|Widget? button)
      (if (|XtIsSensitive button)
	  (if (or (|XmIsPushButton button)
		  (|XmIsPushButtonGadget button)
		  (|XmIsArrowButton button))
	      (|XtCallCallbacks-raw button |XmNactivateCallback (snd-global-state))
	      (if (or (|XmIsToggleButton button)
		      (|XmIsToggleButtonGadget button))
		  (|XtCallCallbacks-raw button |XmNvalueChangedCallback (snd-global-state))
		  (display (format #f ";~A (~A) is not a push or toggle button" (|XtName button) (|XtName (|XtParent button)))))))
      (display (format #f "~A is not a widget" button))))

(define (resize-pane wid height)
  (|XtUnmanageChild wid)
  (|XtVaSetValues wid (list |XmNpaneMinimum (if (> height 5) (- height 5) 0)
			    |XmNpaneMaximum (+ height 5)))
  (|XtManageChild wid)
  (|XtVaSetValues wid (list |XmNpaneMinimum 5
			    |XmNpaneMaximum 1000)))

(define (force-event)
  (let ((app (car (main-widgets))))
    (while #t
      (let ((msk (|XtAppPending app)))
	(if (= (logand msk (logior |XtIMXEvent |XtIMAlternateInput)) 0)
	    (break 'done)
	    (|XtDispatchEvent (|XtAppNextEvent app)))))))
	      
(define (take-keyboard-focus wid)
  (if (and (|XmIsTraversable wid)
	   (not (= (|XmGetVisibility wid) |XmVISIBILITY_FULLY_OBSCURED)))
      (|XmProcessTraversal wid |XmTRAVERSE_CURRENT)))
