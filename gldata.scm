(define (CFNC-multi . args) #f)
(define (CINT-multi . args) #f)

(CFNC-X "XVisualInfo* glXChooseVisual Display* dpy int screen int* attribList")
(CFNC-X "void glXCopyContext Display* dpy GLXContext src GLXContext dst unsigned_long mask")
(CFNC-X "GLXContext glXCreateContext Display* dpy XVisualInfo* vis GLXContext shareList Bool direct")
(CFNC-X "GLXPixmap glXCreateGLXPixmap Display* dpy XVisualInfo* vis Pixmap pixmap")
(CFNC-X "void glXDestroyContext Display* dpy GLXContext ctx")
(CFNC-X "void glXDestroyGLXPixmap Display* dpy GLXPixmap pix")
(CFNC-X "int glXGetConfig Display* dpy XVisualInfo* vis int attrib int* [value]")
(CFNC-X "GLXContext glXGetCurrentContext void")
(CFNC-X "Window glXGetCurrentDrawable void")
(CFNC-X "Bool glXIsDirect Display* dpy GLXContext ctx")
(CFNC-X "Bool glXMakeCurrent Display* dpy Window drawable GLXContext ctx")
(CFNC-X "Bool glXQueryExtension Display* dpy int* [errorBase] int* [eventBase]")
(CFNC-X "Bool glXQueryVersion Display* dpy int* [major] int* [minor]")
(CFNC-X "void glXSwapBuffers Display* dpy Window drawable")
(CFNC-X "void glXUseXFont Font font int first int count int listBase")
(CFNC-X "void glXWaitGL void")
(CFNC-X "void glXWaitX void")
(CFNC-X "char* glXGetClientString Display* dpy int name")
(CFNC-X "char* glXQueryServerString Display* dpy int screen int name")
(CFNC-X "char* glXQueryExtensionsString Display* dpy int screen")
;(CFNC-X "GLXFBConfig* glXGetFBConfigs Display* dpy int screen int* nelements")
;(CFNC-X "GLXFBConfig* glXChooseFBConfig Display* dpy int screen int* attrib_list int* nelements")
;(CFNC-X "int glXGetFBConfigAttrib Display* dpy GLXFBConfig config int attribute int* value")
;(CFNC-X "XVisualInfo* glXGetVisualFromFBConfig Display* dpy GLXFBConfig config")
;(CFNC-X "GLXWindow glXCreateWindow Display* dpy GLXFBConfig config Window win int* attrib_list")
;(CFNC-X "void glXDestroyWindow Display* dpy GLXWindow win")
;(CFNC-X "GLXPixmap glXCreatePixmap Display* dpy GLXFBConfig config Pixmap pixmap int* attrib_list")
;(CFNC-X "void glXDestroyPixmap Display* dpy GLXPixmap pixmap")
;(CFNC-X "GLXPbuffer glXCreatePbuffer Display* dpy GLXFBConfig config int* attrib_list")
;(CFNC-X "void glXDestroyPbuffer Display* dpy GLXPbuffer pbuf")
;(CFNC-X "void glXQueryDrawable Display* dpy Window draw int attribute ulong* value")
;(CFNC-X "GLXContext glXCreateNewContext Display* dpy GLXFBConfig config int render_type GLXContext share_list Bool direct")
;(CFNC-X "Bool glXMakeContextCurrent Display* display Window draw Window read GLXContext ctx")
;(CFNC-X "Window glXGetCurrentReadDrawable void")
;(CFNC-X "Display* glXGetCurrentDisplay void")
;(CFNC-X "int glXQueryContext Display* dpy GLXContext ctx int attribute int* value")
;(CFNC-X "void glXSelectEvent Display* dpy Window draw ulong event_mask")
;(CFNC-X "void glXGetSelectedEvent Display* dpy Window draw ulong* event_mask")
;(CFNC-X "GLXContextID glXGetContextIDEXT GLXContext ctx")
;(CFNC-X "Window glXGetCurrentDrawableEXT void")
;(CFNC-X "GLXContext glXImportContextEXT Display* dpy GLXContextID contextID")
;(CFNC-X "void glXFreeContextEXT Display* dpy GLXContext ctx")
;(CFNC-X "int glXQueryContextInfoEXT Display* dpy GLXContext ctx int attribute int* value")
(CFNC "void glClearIndex GLfloat c")
(CFNC "void glClearColor GLclampf red GLclampf green GLclampf blue GLclampf alpha")
(CFNC "void glClear GLbitfield mask")
(CFNC "void glIndexMask GLuint mask")
(CFNC "void glColorMask GLboolean red GLboolean green GLboolean blue GLboolean alpha")
(CFNC "void glAlphaFunc GLenum func GLclampf ref")
(CFNC "void glBlendFunc GLenum sfactor GLenum dfactor")
(CFNC "void glLogicOp GLenum opcode")
(CFNC "void glCullFace GLenum mode")
(CFNC "void glFrontFace GLenum mode")
(CFNC "void glPointSize GLfloat size")
(CFNC "void glLineWidth GLfloat width")
(CFNC "void glLineStipple GLint factor GLushort pattern")
(CFNC "void glPolygonMode GLenum face GLenum mode")
(CFNC "void glPolygonOffset GLfloat factor GLfloat units")
(CFNC "void glPolygonStipple GLubyte* mask")
;(CFNC "void glGetPolygonStipple GLubyte* [mask]") ; mask is of unknown size (1 = segfault, code looks like it uses 128)
(CFNC "void glEdgeFlag GLboolean flag")
;(CFNC "void glEdgeFlagv GLboolean* flag")
(CFNC "void glScissor GLint x GLint y GLsizei width GLsizei height")
(CFNC "void glClipPlane GLenum plane GLdouble* equation")
(CFNC "void glGetClipPlane GLenum plane GLdouble* [equation]")
(CFNC "void glDrawBuffer GLenum mode")
(CFNC "void glReadBuffer GLenum mode")
(CFNC "void glEnable GLenum cap")
(CFNC "void glDisable GLenum cap")
(CFNC "GLboolean glIsEnabled GLenum cap")
(CFNC "void glEnableClientState GLenum cap") 
(CFNC "void glDisableClientState GLenum cap")
(CFNC "void glGetBooleanv GLenum pname GLboolean* [params]")
(CFNC "void glGetDoublev GLenum pname GLdouble* [params]")
(CFNC "void glGetFloatv GLenum pname GLfloat* [params]")
(CFNC "void glGetIntegerv GLenum pname GLint* [params]")
(CFNC "void glPushAttrib GLbitfield mask")
(CFNC "void glPopAttrib void")
(CFNC "void glPushClientAttrib GLbitfield mask")
(CFNC "void glPopClientAttrib void") 
(CFNC "GLint glRenderMode GLenum mode")
(CFNC "GLenum glGetError void")
(CFNC "constchar* glGetString GLenum name")
(CFNC "void glFinish void")
(CFNC "void glFlush void")
(CFNC "void glHint GLenum target GLenum mode")
(CFNC "void glClearDepth GLclampd depth")
(CFNC "void glDepthFunc GLenum func")
(CFNC "void glDepthMask GLboolean flag")
(CFNC "void glDepthRange GLclampd near_val GLclampd far_val")
(CFNC "void glClearAccum GLfloat red GLfloat green GLfloat blue GLfloat alpha")
(CFNC "void glAccum GLenum op GLfloat value")
(CFNC "void glMatrixMode GLenum mode")
(CFNC "void glOrtho GLdouble left GLdouble right GLdouble bottom GLdouble top GLdouble near_val GLdouble far_val")
(CFNC "void glFrustum GLdouble left GLdouble right GLdouble bottom GLdouble top GLdouble near_val GLdouble far_val")
(CFNC "void glViewport GLint x GLint y GLsizei width GLsizei height")
(CFNC "void glPushMatrix void")
(CFNC "void glPopMatrix void")
(CFNC "void glLoadIdentity void")
(CFNC "void glLoadMatrixd GLdouble* m")
(CFNC "void glLoadMatrixf GLfloat* m")
(CFNC "void glMultMatrixd GLdouble* m")
(CFNC "void glMultMatrixf GLfloat* m")
(CFNC "void glRotated GLdouble angle GLdouble x GLdouble y GLdouble z")
(CFNC "void glRotatef GLfloat angle GLfloat x GLfloat y GLfloat z")
(CFNC "void glScaled GLdouble x GLdouble y GLdouble z")
(CFNC "void glScalef GLfloat x GLfloat y GLfloat z")
(CFNC "void glTranslated GLdouble x GLdouble y GLdouble z")
(CFNC "void glTranslatef GLfloat x GLfloat y GLfloat z")
(CFNC "GLboolean glIsList GLuint list")
(CFNC "void glDeleteLists GLuint list GLsizei range")
(CFNC "GLuint glGenLists GLsizei range")
(CFNC "void glNewList GLuint list GLenum mode")
(CFNC "void glEndList void")
(CFNC "void glCallList GLuint list")
(CFNC "void glCallLists GLsizei n GLenum type GLvoid* lists")
(CFNC "void glListBase GLuint base")
(CFNC "void glBegin GLenum mode")
(CFNC "void glEnd void")
(CFNC "void glVertex2d GLdouble x GLdouble y")
(CFNC "void glVertex2f GLfloat x GLfloat y")
(CFNC "void glVertex2i GLint x GLint y")
(CFNC "void glVertex2s GLshort x GLshort y")
(CFNC "void glVertex3d GLdouble x GLdouble y GLdouble z")
(CFNC "void glVertex3f GLfloat x GLfloat y GLfloat z")
(CFNC "void glVertex3i GLint x GLint y GLint z")
(CFNC "void glVertex3s GLshort x GLshort y GLshort z")
(CFNC "void glVertex4d GLdouble x GLdouble y GLdouble z GLdouble w")
(CFNC "void glVertex4f GLfloat x GLfloat y GLfloat z GLfloat w")
(CFNC "void glVertex4i GLint x GLint y GLint z GLint w")
(CFNC "void glVertex4s GLshort x GLshort y GLshort z GLshort w")
;(CFNC "void glVertex2dv GLdouble* v")
;(CFNC "void glVertex2fv GLfloat* v")
;(CFNC "void glVertex2iv GLint* v")
;(CFNC "void glVertex2sv GLshort* v")
;(CFNC "void glVertex3dv GLdouble* v")
;(CFNC "void glVertex3fv GLfloat* v")
;(CFNC "void glVertex3iv GLint* v")
;(CFNC "void glVertex3sv GLshort* v")
;(CFNC "void glVertex4dv GLdouble* v")
;(CFNC "void glVertex4fv GLfloat* v")
;(CFNC "void glVertex4iv GLint* v")
;(CFNC "void glVertex4sv GLshort* v")
(CFNC "void glNormal3b GLbyte nx GLbyte ny GLbyte nz")
(CFNC "void glNormal3d GLdouble nx GLdouble ny GLdouble nz")
(CFNC "void glNormal3f GLfloat nx GLfloat ny GLfloat nz")
(CFNC "void glNormal3i GLint nx GLint ny GLint nz")
(CFNC "void glNormal3s GLshort nx GLshort ny GLshort nz")
;(CFNC "void glNormal3bv GLbyte* v")
;(CFNC "void glNormal3dv GLdouble* v")
;(CFNC "void glNormal3fv GLfloat* v")
;(CFNC "void glNormal3iv GLint* v")
;(CFNC "void glNormal3sv GLshort* v")
(CFNC "void glIndexd GLdouble c")
(CFNC "void glIndexf GLfloat c")
(CFNC "void glIndexi GLint c")
(CFNC "void glIndexs GLshort c")
(CFNC "void glIndexub GLubyte c")
;(CFNC "void glIndexdv GLdouble* c")
;(CFNC "void glIndexfv GLfloat* c")
;(CFNC "void glIndexiv GLint* c")
;(CFNC "void glIndexsv GLshort* c")
;(CFNC "void glIndexubv GLubyte* c")
(CFNC "void glColor3b GLbyte red GLbyte green GLbyte blue")
(CFNC "void glColor3d GLdouble red GLdouble green GLdouble blue")
(CFNC "void glColor3f GLfloat red GLfloat green GLfloat blue")
(CFNC "void glColor3i GLint red GLint green GLint blue")
(CFNC "void glColor3s GLshort red GLshort green GLshort blue")
(CFNC "void glColor3ub GLubyte red GLubyte green GLubyte blue")
(CFNC "void glColor3ui GLuint red GLuint green GLuint blue")
(CFNC "void glColor3us GLushort red GLushort green GLushort blue")
(CFNC "void glColor4b GLbyte red GLbyte green GLbyte blue GLbyte alpha")
(CFNC "void glColor4d GLdouble red GLdouble green GLdouble blue GLdouble alpha")
(CFNC "void glColor4f GLfloat red GLfloat green GLfloat blue GLfloat alpha")
(CFNC "void glColor4i GLint red GLint green GLint blue GLint alpha")
(CFNC "void glColor4s GLshort red GLshort green GLshort blue GLshort alpha")
(CFNC "void glColor4ub GLubyte red GLubyte green GLubyte blue GLubyte alpha")
(CFNC "void glColor4ui GLuint red GLuint green GLuint blue GLuint alpha")
(CFNC "void glColor4us GLushort red GLushort green GLushort blue GLushort alpha")
;(CFNC "void glColor3bv GLbyte* v")
;(CFNC "void glColor3dv GLdouble* v")
;(CFNC "void glColor3fv GLfloat* v")
;(CFNC "void glColor3iv GLint* v")
;(CFNC "void glColor3sv GLshort* v")
;(CFNC "void glColor3ubv GLubyte* v")
;(CFNC "void glColor3uiv GLuint* v")
;(CFNC "void glColor3usv GLushort* v")
;(CFNC "void glColor4bv GLbyte* v")
;(CFNC "void glColor4dv GLdouble* v")
;(CFNC "void glColor4fv GLfloat* v")
;(CFNC "void glColor4iv GLint* v")
;(CFNC "void glColor4sv GLshort* v")
;(CFNC "void glColor4ubv GLubyte* v")
;(CFNC "void glColor4uiv GLuint* v")
;(CFNC "void glColor4usv GLushort* v")
(CFNC "void glTexCoord1d GLdouble s")
(CFNC "void glTexCoord1f GLfloat s")
(CFNC "void glTexCoord1i GLint s")
(CFNC "void glTexCoord1s GLshort s")
(CFNC "void glTexCoord2d GLdouble s GLdouble t")
(CFNC "void glTexCoord2f GLfloat s GLfloat t")
(CFNC "void glTexCoord2i GLint s GLint t")
(CFNC "void glTexCoord2s GLshort s GLshort t")
(CFNC "void glTexCoord3d GLdouble s GLdouble t GLdouble r")
(CFNC "void glTexCoord3f GLfloat s GLfloat t GLfloat r")
(CFNC "void glTexCoord3i GLint s GLint t GLint r")
(CFNC "void glTexCoord3s GLshort s GLshort t GLshort r")
(CFNC "void glTexCoord4d GLdouble s GLdouble t GLdouble r GLdouble q")
(CFNC "void glTexCoord4f GLfloat s GLfloat t GLfloat r GLfloat q")
(CFNC "void glTexCoord4i GLint s GLint t GLint r GLint q")
(CFNC "void glTexCoord4s GLshort s GLshort t GLshort r GLshort q")
;(CFNC "void glTexCoord1dv GLdouble* v")
;(CFNC "void glTexCoord1fv GLfloat* v")
;(CFNC "void glTexCoord1iv GLint* v")
;(CFNC "void glTexCoord1sv GLshort* v")
;(CFNC "void glTexCoord2dv GLdouble* v")
;(CFNC "void glTexCoord2fv GLfloat* v")
;(CFNC "void glTexCoord2iv GLint* v")
;(CFNC "void glTexCoord2sv GLshort* v")
;(CFNC "void glTexCoord3dv GLdouble* v")
;(CFNC "void glTexCoord3fv GLfloat* v")
;(CFNC "void glTexCoord3iv GLint* v")
;(CFNC "void glTexCoord3sv GLshort* v")
;(CFNC "void glTexCoord4dv GLdouble* v")
;(CFNC "void glTexCoord4fv GLfloat* v")
;(CFNC "void glTexCoord4iv GLint* v")
;(CFNC "void glTexCoord4sv GLshort* v")
(CFNC "void glRasterPos2d GLdouble x GLdouble y")
(CFNC "void glRasterPos2f GLfloat x GLfloat y")
(CFNC "void glRasterPos2i GLint x GLint y")
(CFNC "void glRasterPos2s GLshort x GLshort y")
(CFNC "void glRasterPos3d GLdouble x GLdouble y GLdouble z")
(CFNC "void glRasterPos3f GLfloat x GLfloat y GLfloat z")
(CFNC "void glRasterPos3i GLint x GLint y GLint z")
(CFNC "void glRasterPos3s GLshort x GLshort y GLshort z")
(CFNC "void glRasterPos4d GLdouble x GLdouble y GLdouble z GLdouble w")
(CFNC "void glRasterPos4f GLfloat x GLfloat y GLfloat z GLfloat w")
(CFNC "void glRasterPos4i GLint x GLint y GLint z GLint w")
(CFNC "void glRasterPos4s GLshort x GLshort y GLshort z GLshort w")
;(CFNC "void glRasterPos2dv GLdouble* v")
;(CFNC "void glRasterPos2fv GLfloat* v")
;(CFNC "void glRasterPos2iv GLint* v")
;(CFNC "void glRasterPos2sv GLshort* v")
;(CFNC "void glRasterPos3dv GLdouble* v")
;(CFNC "void glRasterPos3fv GLfloat* v")
;(CFNC "void glRasterPos3iv GLint* v")
;(CFNC "void glRasterPos3sv GLshort* v")
;(CFNC "void glRasterPos4dv GLdouble* v")
;(CFNC "void glRasterPos4fv GLfloat* v")
;(CFNC "void glRasterPos4iv GLint* v")
;(CFNC "void glRasterPos4sv GLshort* v")
(CFNC "void glRectd GLdouble x1 GLdouble y1 GLdouble x2 GLdouble y2")
(CFNC "void glRectf GLfloat x1 GLfloat y1 GLfloat x2 GLfloat y2")
(CFNC "void glRecti GLint x1 GLint y1 GLint x2 GLint y2")
(CFNC "void glRects GLshort x1 GLshort y1 GLshort x2 GLshort y2")
;(CFNC "void glRectdv GLdouble* v1 GLdouble* v2")
;(CFNC "void glRectfv GLfloat* v1 GLfloat* v2")
;(CFNC "void glRectiv GLint* v1 GLint* v2")
;(CFNC "void glRectsv GLshort* v1 GLshort* v2")
(CFNC "void glVertexPointer GLint size GLenum type GLsizei stride GLvoid* ptr")
(CFNC "void glNormalPointer GLenum type GLsizei stride GLvoid* ptr")
(CFNC "void glColorPointer GLint size GLenum type GLsizei stride GLvoid* ptr")
(CFNC "void glIndexPointer GLenum type GLsizei stride GLvoid* ptr")
(CFNC "void glTexCoordPointer GLint size GLenum type GLsizei stride GLvoid* ptr")
(CFNC "void glEdgeFlagPointer GLsizei stride GLvoid* ptr")
(CFNC "void glGetPointerv GLenum pname void** [params]")
(CFNC "void glArrayElement GLint i")
(CFNC "void glDrawArrays GLenum mode GLint first GLsizei count")
(CFNC "void glDrawElements GLenum mode GLsizei count GLenum type GLvoid* indices")
(CFNC "void glInterleavedArrays GLenum format GLsizei stride GLvoid* pointer")
(CFNC "void glShadeModel GLenum mode")
(CFNC "void glLightf GLenum light GLenum pname GLfloat param")
(CFNC "void glLighti GLenum light GLenum pname GLint param")
;(CFNC "void glLightfv GLenum light GLenum pname GLfloat* params")
;(CFNC "void glLightiv GLenum light GLenum pname GLint* params")
(CFNC "void glGetLightfv GLenum light GLenum pname GLfloat* [params]")
(CFNC "void glGetLightiv GLenum light GLenum pname GLint* [params]")
(CFNC "void glLightModelf GLenum pname GLfloat param")
(CFNC "void glLightModeli GLenum pname GLint param")
;(CFNC "void glLightModelfv GLenum pname GLfloat* params")
;(CFNC "void glLightModeliv GLenum pname GLint* params")
(CFNC "void glMaterialf GLenum face GLenum pname GLfloat param")
(CFNC "void glMateriali GLenum face GLenum pname GLint param")
;(CFNC "void glMaterialfv GLenum face GLenum pname GLfloat* params")
;(CFNC "void glMaterialiv GLenum face GLenum pname GLint* params")
(CFNC "void glGetMaterialfv GLenum face GLenum pname GLfloat* [params]")
(CFNC "void glGetMaterialiv GLenum face GLenum pname GLint* [params]")
(CFNC "void glColorMaterial GLenum face GLenum mode")
(CFNC "void glPixelZoom GLfloat xfactor GLfloat yfactor")
(CFNC "void glPixelStoref GLenum pname GLfloat param")
(CFNC "void glPixelStorei GLenum pname GLint param")
(CFNC "void glPixelTransferf GLenum pname GLfloat param")
(CFNC "void glPixelTransferi GLenum pname GLint param")
;(CFNC "void glPixelMapfv GLenum map GLint mapsize GLfloat* values")
;(CFNC "void glPixelMapuiv GLenum map GLint mapsize GLuint* values")
;(CFNC "void glPixelMapusv GLenum map GLint mapsize GLushort* values")
(CFNC "void glGetPixelMapfv GLenum map GLfloat* [values]")
(CFNC "void glGetPixelMapuiv GLenum map GLuint* [values]")
(CFNC "void glGetPixelMapusv GLenum map GLushort* [values]")
(CFNC "void glBitmap GLsizei width GLsizei height GLfloat xorig GLfloat yorig GLfloat xmove GLfloat ymove GLubyte* bitmap")
(CFNC "void glReadPixels GLint x GLint y GLsizei width GLsizei height GLenum format GLenum type GLvoid* pixels")
(CFNC "void glDrawPixels GLsizei width GLsizei height GLenum format GLenum type GLvoid* pixels")
(CFNC "void glCopyPixels GLint x GLint y GLsizei width GLsizei height GLenum type")
(CFNC "void glStencilFunc GLenum func GLint ref GLuint mask")
(CFNC "void glStencilMask GLuint mask")
(CFNC "void glStencilOp GLenum fail GLenum zfail GLenum zpass")
(CFNC "void glClearStencil GLint s")
(CFNC "void glTexGend GLenum coord GLenum pname GLdouble param")
(CFNC "void glTexGenf GLenum coord GLenum pname GLfloat param")
(CFNC "void glTexGeni GLenum coord GLenum pname GLint param")
;(CFNC "void glTexGendv GLenum coord GLenum pname GLdouble* params")
;(CFNC "void glTexGenfv GLenum coord GLenum pname GLfloat* params")
;(CFNC "void glTexGeniv GLenum coord GLenum pname GLint* params")
(CFNC "void glGetTexGendv GLenum coord GLenum pname GLdouble* [params]")
(CFNC "void glGetTexGenfv GLenum coord GLenum pname GLfloat* [params]")
(CFNC "void glGetTexGeniv GLenum coord GLenum pname GLint* [params]")
(CFNC "void glTexEnvf GLenum target GLenum pname GLfloat param")
(CFNC "void glTexEnvi GLenum target GLenum pname GLint param")
;(CFNC "void glTexEnvfv GLenum target GLenum pname GLfloat* params")
;(CFNC "void glTexEnviv GLenum target GLenum pname GLint* params")
(CFNC "void glGetTexEnvfv GLenum target GLenum pname GLfloat* [params]")
(CFNC "void glGetTexEnviv GLenum target GLenum pname GLint* [params]")
(CFNC "void glTexParameterf GLenum target GLenum pname GLfloat param")
(CFNC "void glTexParameteri GLenum target GLenum pname GLint param")
;(CFNC "void glTexParameterfv GLenum target GLenum pname GLfloat* params")
;(CFNC "void glTexParameteriv GLenum target GLenum pname GLint* params")
(CFNC "void glGetTexParameterfv GLenum target GLenum pname GLfloat* [params]")
(CFNC "void glGetTexParameteriv GLenum target GLenum pname GLint* [params]")
(CFNC "void glGetTexLevelParameterfv GLenum target GLint level GLenum pname GLfloat* [params]")
(CFNC "void glGetTexLevelParameteriv GLenum target GLint level GLenum pname GLint* [params]")
(CFNC "void glTexImage1D GLenum target GLint level GLint internalFormat GLsizei width GLint border GLenum format GLenum type GLvoid* pixels")
(CFNC "void glTexImage2D GLenum target GLint level GLint internalFormat GLsizei width GLsizei height GLint border GLenum format GLenum type GLvoid* pixels")
;(CFNC "void glGetTexImage GLenum target GLint level GLenum format GLenum type GLvoid* [pixels]")
(CFNC "void glGenTextures GLsizei n GLuint* textures")
(CFNC "void glDeleteTextures GLsizei n GLuint* textures")
(CFNC "void glBindTexture GLenum target GLuint texture")
;(CFNC "void glPrioritizeTextures GLsizei n GLuint* textures GLclampf* priorities")
(CFNC "GLboolean glAreTexturesResident GLsizei n GLuint* textures GLboolean* residences")
(CFNC "GLboolean glIsTexture GLuint texture")
(CFNC "void glTexSubImage1D GLenum target GLint level GLint xoffset GLsizei width GLenum format GLenum type GLvoid* pixels")
(CFNC "void glTexSubImage2D GLenum target GLint level GLint xoffset GLint yoffset GLsizei width GLsizei height GLenum format GLenum type GLvoid* pixels")
(CFNC "void glCopyTexImage1D GLenum target GLint level GLenum internalformat GLint x GLint y GLsizei width GLint border")
(CFNC "void glCopyTexImage2D GLenum target GLint level GLenum internalformat GLint x GLint y GLsizei width GLsizei height GLint border")
(CFNC "void glCopyTexSubImage1D GLenum target GLint level GLint xoffset GLint x GLint y GLsizei width")
(CFNC "void glCopyTexSubImage2D GLenum target GLint level GLint xoffset GLint yoffset GLint x GLint y GLsizei width GLsizei height")
(CFNC "void glMap1d GLenum target GLdouble u1 GLdouble u2 GLint stride GLint order GLdouble* points")
(CFNC "void glMap1f GLenum target GLfloat u1 GLfloat u2 GLint stride GLint order GLfloat* points")
(CFNC "void glMap2d GLenum target GLdouble u1 GLdouble u2 GLint ustride GLint uorder GLdouble v1 GLdouble v2 GLint vstride GLint vorder GLdouble* points")
(CFNC "void glMap2f GLenum target GLfloat u1 GLfloat u2 GLint ustride GLint uorder GLfloat v1 GLfloat v2 GLint vstride GLint vorder GLfloat* points")
(CFNC "void glGetMapdv GLenum target GLenum query GLdouble* [v]")
(CFNC "void glGetMapfv GLenum target GLenum query GLfloat* [v]")
(CFNC "void glGetMapiv GLenum target GLenum query GLint* [v]")
(CFNC "void glEvalCoord1d GLdouble u")
(CFNC "void glEvalCoord1f GLfloat u")
;(CFNC "void glEvalCoord1dv GLdouble* u")
;(CFNC "void glEvalCoord1fv GLfloat* u")
(CFNC "void glEvalCoord2d GLdouble u GLdouble v")
(CFNC "void glEvalCoord2f GLfloat u GLfloat v")
;(CFNC "void glEvalCoord2dv GLdouble* u")
;(CFNC "void glEvalCoord2fv GLfloat* u")
(CFNC "void glMapGrid1d GLint un GLdouble u1 GLdouble u2")
(CFNC "void glMapGrid1f GLint un GLfloat u1 GLfloat u2")
(CFNC "void glMapGrid2d GLint un GLdouble u1 GLdouble u2 GLint vn GLdouble v1 GLdouble v2")
(CFNC "void glMapGrid2f GLint un GLfloat u1 GLfloat u2 GLint vn GLfloat v1 GLfloat v2")
(CFNC "void glEvalPoint1 GLint i")
(CFNC "void glEvalPoint2 GLint i GLint j")
(CFNC "void glEvalMesh1 GLenum mode GLint i1 GLint i2")
(CFNC "void glEvalMesh2 GLenum mode GLint i1 GLint i2 GLint j1 GLint j2")
(CFNC "void glFogf GLenum pname GLfloat param")
(CFNC "void glFogi GLenum pname GLint param")
;(CFNC "void glFogfv GLenum pname GLfloat* params")
;(CFNC "void glFogiv GLenum pname GLint* params")
(CFNC "void glFeedbackBuffer GLsizei size GLenum type GLfloat* buffer")
(CFNC "void glPassThrough GLfloat token")
(CFNC "void glSelectBuffer GLsizei size GLuint* buffer")
(CFNC "void glInitNames void")
(CFNC "void glLoadName GLuint name")
(CFNC "void glPushName GLuint name")
(CFNC "void glPopName void")
(CFNC "void glDrawRangeElements GLenum mode GLuint start GLuint end GLsizei count GLenum type GLvoid* indices")
(CFNC "void glTexImage3D GLenum target GLint level GLint internalFormat GLsizei width GLsizei height GLsizei depth GLint border GLenum format GLenum type GLvoid* pixels")
(CFNC "void glTexSubImage3D GLenum target GLint level GLint xoffset GLint yoffset GLint zoffset GLsizei width GLsizei height GLsizei depth GLenum format GLenum type GLvoid* pixels")
(CFNC "void glCopyTexSubImage3D GLenum target GLint level GLint xoffset GLint yoffset GLint zoffset GLint x GLint y GLsizei width GLsizei height")
(CFNC "void glColorTable GLenum target GLenum internalformat GLsizei width GLenum format GLenum type GLvoid* table")
(CFNC "void glColorSubTable GLenum target GLsizei start GLsizei count GLenum format GLenum type GLvoid* data")
;(CFNC "void glColorTableParameteriv GLenum target GLenum pname GLint* params")
;(CFNC "void glColorTableParameterfv GLenum target GLenum pname GLfloat* params")
(CFNC "void glCopyColorSubTable GLenum target GLsizei start GLint x GLint y GLsizei width")
(CFNC "void glCopyColorTable GLenum target GLenum internalformat GLint x GLint y GLsizei width")
;(CFNC "void glGetColorTable GLenum target GLenum format GLenum type GLvoid* [table]")
(CFNC "void glGetColorTableParameterfv GLenum target GLenum pname GLfloat* [params]")
(CFNC "void glGetColorTableParameteriv GLenum target GLenum pname GLint* [params]")
(CFNC "void glBlendEquation GLenum mode")
(CFNC "void glBlendColor GLclampf red GLclampf green GLclampf blue GLclampf alpha")
(CFNC "void glHistogram GLenum target GLsizei width GLenum internalformat GLboolean sink")
(CFNC "void glResetHistogram GLenum target")
(CFNC "void glGetHistogram GLenum target GLboolean reset GLenum format GLenum type GLvoid* values")
(CFNC "void glGetHistogramParameterfv GLenum target GLenum pname GLfloat* [params]")
(CFNC "void glGetHistogramParameteriv GLenum target GLenum pname GLint* [params]")
(CFNC "void glMinmax GLenum target GLenum internalformat GLboolean sink")
(CFNC "void glResetMinmax GLenum target")
(CFNC "void glGetMinmax GLenum target GLboolean reset GLenum format GLenum types GLvoid* values")
(CFNC "void glGetMinmaxParameterfv GLenum target GLenum pname GLfloat* [params]")
(CFNC "void glGetMinmaxParameteriv GLenum target GLenum pname GLint* [params]")
(CFNC "void glConvolutionFilter1D GLenum target GLenum internalformat GLsizei width GLenum format GLenum type GLvoid* image")
(CFNC "void glConvolutionFilter2D GLenum target GLenum internalformat GLsizei width GLsizei height GLenum format GLenum type GLvoid* image")
(CFNC "void glConvolutionParameterf GLenum target GLenum pname GLfloat params")
;(CFNC "void glConvolutionParameterfv GLenum target GLenum pname GLfloat* params")
(CFNC "void glConvolutionParameteri GLenum target GLenum pname GLint params")
;(CFNC "void glConvolutionParameteriv GLenum target GLenum pname GLint* params")
(CFNC "void glCopyConvolutionFilter1D GLenum target GLenum internalformat GLint x GLint y GLsizei width")
(CFNC "void glCopyConvolutionFilter2D GLenum target GLenum internalformat GLint x GLint y GLsizei width GLsizei height")
;(CFNC "void glGetConvolutionFilter GLenum target GLenum format GLenum type GLvoid* [image]")
;(CFNC "void glGetConvolutionParameterfv GLenum target GLenum pname GLfloat* params")
;(CFNC "void glGetConvolutionParameteriv GLenum target GLenum pname GLint* params")
(CFNC "void glSeparableFilter2D GLenum target GLenum internalformat GLsizei width GLsizei height GLenum format GLenum type GLvoid* row GLvoid* column")
;(CFNC "void glGetSeparableFilter GLenum target GLenum format GLenum type GLvoid* [row] GLvoid* [column] GLvoid* [span]")
;(CFNC "void gluBeginCurve GLUnurbs* nurb")
(CFNC "void gluBeginPolygon GLUtesselator* tess")
;(CFNC "void gluBeginSurface GLUnurbs* nurb")(CFNC "void gluBeginTrim GLUnurbs* nurb")
;(CFNC "GLint gluBuild1DMipmapLevels GLenum target GLint internalFormat GLsizei width GLenum format GLenum type GLint level GLint base GLint max void* data")
(CFNC "GLint gluBuild1DMipmaps GLenum target GLint internalFormat GLsizei width GLenum format GLenum type void* data")
;(CFNC "GLint gluBuild2DMipmapLevels GLenum target GLint internalFormat GLsizei width GLsizei height GLenum format GLenum type GLint level GLint base GLint max void* data")
(CFNC "GLint gluBuild2DMipmaps GLenum target GLint internalFormat GLsizei width GLsizei height GLenum format GLenum type void* data")
;(CFNC "GLint gluBuild3DMipmapLevels GLenum target GLint internalFormat GLsizei width GLsizei height GLsizei depth GLenum format GLenum type GLint level GLint base GLint max void* data")
;(CFNC "GLint gluBuild3DMipmaps GLenum target GLint internalFormat GLsizei width GLsizei height GLsizei depth GLenum format GLenum type void* data")
;(CFNC "GLboolean gluCheckExtension GLubyte* extName GLubyte* extString")
;(CFNC "void gluCylinder GLUquadric* quad GLdouble base GLdouble top GLdouble height GLint slices GLint stacks")
;(CFNC "void gluDeleteNurbsRenderer GLUnurbs* nurb")
;;(CFNC "void gluDeleteQuadric GLUquadric* quad")
(CFNC "void gluDeleteTess GLUtesselator* tess")
;(CFNC "void gluDisk GLUquadric* quad GLdouble inner GLdouble outer GLint slices GLint loops")
;(CFNC "void gluEndCurve GLUnurbs* nurb")
(CFNC "void gluEndPolygon GLUtesselator* tess")
;(CFNC "void gluEndSurface GLUnurbs* nurb")
;(CFNC "void gluEndTrim GLUnurbs* nurb")
(CFNC "constchar* gluErrorString GLenum error")
;(CFNC "void gluGetNurbsProperty GLUnurbs* nurb GLenum property GLfloat* data")
(CFNC "constchar* gluGetString GLenum name")
(CFNC "void gluGetTessProperty GLUtesselator* tess GLenum which GLdouble* data")
;(CFNC "void gluLoadSamplingMatrices GLUnurbs* nurb GLfloat* model GLfloat* perspective GLint* view")
(CFNC "void gluLookAt GLdouble eyeX GLdouble eyeY GLdouble eyeZ GLdouble centerX GLdouble centerY GLdouble centerZ GLdouble upX GLdouble upY GLdouble upZ")
;(CFNC "GLUnurbs* gluNewNurbsRenderer void")
;(CFNC "GLUquadric* gluNewQuadric void")
(CFNC "GLUtesselator* gluNewTess void")
(CFNC "void gluNextContour GLUtesselator* tess GLenum type")
;(CFNC "void gluNurbsCallback GLUnurbs* nurb GLenum which _GLUfuncptr CallBackFunc")
;(CFNC "void gluNurbsCallbackData GLUnurbs* nurb GLvoid* userData")
;(CFNC "void gluNurbsCallbackDataEXT GLUnurbs* nurb GLvoid* userData")
;(CFNC "void gluNurbsCurve GLUnurbs* nurb GLint knotCount GLfloat* knots GLint stride GLfloat* control GLint order GLenum type")
;(CFNC "void gluNurbsProperty GLUnurbs* nurb GLenum property GLfloat value")
;(CFNC "void gluNurbsSurface GLUnurbs* nurb GLint sKnotCount GLfloat* sKnots GLint tKnotCount GLfloat* tKnots GLint sStride GLint tStride GLfloat* control GLint sOrder GLint tOrder GLenum type")
(CFNC "void gluOrtho2D GLdouble left GLdouble right GLdouble bottom GLdouble top")
;(CFNC "void gluPartialDisk GLUquadric* quad GLdouble inner GLdouble outer GLint slices GLint loops GLdouble start GLdouble sweep")
(CFNC "void gluPerspective GLdouble fovy GLdouble aspect GLdouble zNear GLdouble zFar")
(CFNC "void gluPickMatrix GLdouble x GLdouble y GLdouble delX GLdouble delY GLint* viewport")
(CFNC "GLint gluProject GLdouble objX GLdouble objY GLdouble objZ GLdouble* model GLdouble* proj GLint* view GLdouble* winX GLdouble* winY GLdouble* winZ")
;(CFNC "void gluPwlCurve GLUnurbs* nurb GLint count GLfloat* data GLint stride GLenum type")
;(CFNC "void gluQuadricCallback GLUquadric* quad GLenum which _GLUfuncptr CallBackFunc")
;(CFNC "void gluQuadricDrawStyle GLUquadric* quad GLenum draw")
;(CFNC "void gluQuadricNormals GLUquadric* quad GLenum normal")
;(CFNC "void gluQuadricOrientation GLUquadric* quad GLenum orientation")
;(CFNC "void gluQuadricTexture GLUquadric* quad GLboolean texture")
(CFNC "GLint gluScaleImage GLenum format GLsizei wIn GLsizei hIn GLenum typeIn void* dataIn GLsizei wOut GLsizei hOut GLenum typeOut GLvoid* dataOut")
;(CFNC "void gluSphere GLUquadric* quad GLdouble radius GLint slices GLint stacks")
(CFNC "void gluTessBeginContour GLUtesselator* tess")
(CFNC "void gluTessBeginPolygon GLUtesselator* tess GLvoid* data")
;(CFNC "void gluTessCallback GLUtesselator* tess GLenum which _GLUfuncptr CallBackFunc")
(CFNC "void gluTessEndContour GLUtesselator* tess")
(CFNC "void gluTessEndPolygon GLUtesselator* tess")
(CFNC "void gluTessNormal GLUtesselator* tess GLdouble valueX GLdouble valueY GLdouble valueZ")
(CFNC "void gluTessProperty GLUtesselator* tess GLenum which GLdouble data")
(CFNC "void gluTessVertex GLUtesselator* tess GLdouble* location GLvoid* data")
(CFNC "GLint gluUnProject GLdouble winX GLdouble winY GLdouble winZ GLdouble* model GLdouble* proj GLint* view GLdouble* objX GLdouble* objY GLdouble* objZ")
;(CFNC "GLint gluUnProject4 GLdouble winX GLdouble winY GLdouble winZ GLdouble clipW GLdouble* model GLdouble* proj GLint* view GLdouble near GLdouble far GLdouble* objX GLdouble* objY GLdouble* objZ GLdouble* objW")
(CFNC-multi "void glActiveTextureARB GLenum texture")
(CFNC-multi "void glClientActiveTextureARB GLenum texture")
(CFNC-multi "void glMultiTexCoord1dARB GLenum target GLdouble s")
(CFNC-multi "void glMultiTexCoord1dvARB GLenum target GLdouble* v")
(CFNC-multi "void glMultiTexCoord1fARB GLenum target GLfloat s")
(CFNC-multi "void glMultiTexCoord1fvARB GLenum target GLfloat* v")
(CFNC-multi "void glMultiTexCoord1iARB GLenum target GLint s")
(CFNC-multi "void glMultiTexCoord1ivARB GLenum target GLint* v")
(CFNC-multi "void glMultiTexCoord1sARB GLenum target GLshort s")
(CFNC-multi "void glMultiTexCoord1svARB GLenum target GLshort* v")
(CFNC-multi "void glMultiTexCoord2dARB GLenum target GLdouble s GLdouble t")
(CFNC-multi "void glMultiTexCoord2dvARB GLenum target GLdouble* v")
(CFNC-multi "void glMultiTexCoord2fARB GLenum target GLfloat s GLfloat t")
(CFNC-multi "void glMultiTexCoord2fvARB GLenum target GLfloat* v")
(CFNC-multi "void glMultiTexCoord2iARB GLenum target GLint s GLint t")
(CFNC-multi "void glMultiTexCoord2ivARB GLenum target GLint* v")
(CFNC-multi "void glMultiTexCoord2sARB GLenum target GLshort s GLshort t")
(CFNC-multi "void glMultiTexCoord2svARB GLenum target GLshort* v")
(CFNC-multi "void glMultiTexCoord3dARB GLenum target GLdouble s GLdouble t GLdouble r")
(CFNC-multi "void glMultiTexCoord3dvARB GLenum target GLdouble* v")
(CFNC-multi "void glMultiTexCoord3fARB GLenum target GLfloat s GLfloat t GLfloat r")
(CFNC-multi "void glMultiTexCoord3fvARB GLenum target GLfloat* v")
(CFNC-multi "void glMultiTexCoord3iARB GLenum target GLint s GLint t GLint r")
(CFNC-multi "void glMultiTexCoord3ivARB GLenum target GLint* v")
(CFNC-multi "void glMultiTexCoord3sARB GLenum target GLshort s GLshort t GLshort r")
(CFNC-multi "void glMultiTexCoord3svARB GLenum target GLshort* v")
(CFNC-multi "void glMultiTexCoord4dARB GLenum target GLdouble s GLdouble t GLdouble r GLdouble q")
(CFNC-multi "void glMultiTexCoord4dvARB GLenum target GLdouble* v")
(CFNC-multi "void glMultiTexCoord4fARB GLenum target GLfloat s GLfloat t GLfloat r GLfloat q")
(CFNC-multi "void glMultiTexCoord4fvARB GLenum target GLfloat* v")
(CFNC-multi "void glMultiTexCoord4iARB GLenum target GLint s GLint t GLint r GLint q")
(CFNC-multi "void glMultiTexCoord4ivARB GLenum target GLint* v")
(CFNC-multi "void glMultiTexCoord4sARB GLenum target GLshort s GLshort t GLshort r GLshort q")
(CFNC-multi "void glMultiTexCoord4svARB GLenum target GLshort* v")
;;;(CFNC "void glLockArraysEXT GLint first GLsizei count")
;;;(CFNC "void glUnlockArraysEXT void")
;;;(CFNC "void glBlendColorEXT GLclampf red GLclampf green GLclampf blue GLclampf alpha")
;;;(CFNC-blend "void glPolygonOffsetEXT GLfloat factor GLfloat bias")
;;;(CFNC-texture "void glTexImage3DEXT GLenum target GLint level GLenum internalFormat GLsizei width GLsizei height GLsizei depth GLint border GLenum format GLenum type GLvoid* pixels")
;;;(CFNC-texture "void glTexSubImage3DEXT GLenum target GLint level GLint xoffset GLint yoffset GLint zoffset GLsizei width GLsizei height GLsizei depth GLenum format GLenum type GLvoid* pixels")
;;;(CFNC-texture "void glCopyTexSubImage3DEXT GLenum target GLint level GLint xoffset GLint yoffset GLint zoffset GLint x GLint y GLsizei width GLsizei height")
;;;(CFNC-object "void glGenTexturesEXT GLsizei n GLuint* textures")
;;;(CFNC-object "void glDeleteTexturesEXT GLsizei n GLuint* textures")
;;;(CFNC-object "void glBindTextureEXT GLenum target GLuint texture")
;(CFNC-object "void glPrioritizeTexturesEXT GLsizei n GLuint* textures GLclampf* priorities")
;;;(CFNC-object "GLboolean glAreTexturesResidentEXT GLsizei n GLuint* textures GLboolean* residences")
;;;(CFNC-object "GLboolean glIsTextureEXT GLuint texture")
;;;(CFNC-vertex "void glVertexPointerEXT GLint size GLenum type GLsizei stride GLsizei count GLvoid* ptr")
;;;(CFNC-vertex "void glNormalPointerEXT GLenum type GLsizei stride GLsizei count GLvoid* ptr")
;;;(CFNC-vertex "void glColorPointerEXT GLint size GLenum type GLsizei stride GLsizei count GLvoid* ptr")
;;;(CFNC-vertex "void glIndexPointerEXT GLenum type GLsizei stride GLsizei count GLvoid* ptr")
;;;(CFNC-vertex "void glTexCoordPointerEXT GLint size GLenum type GLsizei stride GLsizei count GLvoid* ptr")
;;;(CFNC-vertex "void glEdgeFlagPointerEXT GLsizei stride GLsizei count GLboolean* ptr")
;;;(CFNC-vertex "void glGetPointervEXT GLenum pname void** [params]")
;;;(CFNC-vertex "void glArrayElementEXT GLint i")
;;;(CFNC-vertex "void glDrawArraysEXT GLenum mode GLint first GLsizei count")
;;;(CFNC "void glBlendEquationEXT GLenum mode")
;;;(CFNC "void glPointParameterfEXT GLenum pname GLfloat param")
;;;(CFNC "void glPointParameterfvEXT GLenum pname GLfloat* params")
;(CFNC "void glPointParameterfSGIS GLenum pname GLfloat param")
;(CFNC "void glPointParameterfvSGIS GLenum pname GLfloat* params")
;;;(CFNC "void glColorTableEXT GLenum target GLenum internalformat GLsizei width GLenum format GLenum type GLvoid* table")
;;;(CFNC "void glColorSubTableEXT GLenum target GLsizei start GLsizei count GLenum format GLenum type GLvoid* data")
;(CFNC "void glGetColorTableEXT GLenum target GLenum format GLenum type GLvoid* [table]")
;;;(CFNC "void glGetColorTableParameterfvEXT GLenum target GLenum pname GLfloat* [params]")
;;;(CFNC "void glGetColorTableParameterivEXT GLenum target GLenum pname GLint* [params]")
;(CFNC "void glWindowPos2iMESA GLint x GLint y")
;(CFNC "void glWindowPos2sMESA GLshort x GLshort y")
;(CFNC "void glWindowPos2fMESA GLfloat x GLfloat y")
;(CFNC "void glWindowPos2dMESA GLdouble x GLdouble y")
;(CFNC "void glWindowPos2ivMESA GLint* p")
;(CFNC "void glWindowPos2svMESA GLshort* p")
;(CFNC "void glWindowPos2fvMESA GLfloat* p")
;(CFNC "void glWindowPos2dvMESA GLdouble* p")
;(CFNC "void glWindowPos3iMESA GLint x GLint y GLint z")
;(CFNC "void glWindowPos3sMESA GLshort x GLshort y GLshort z")
;(CFNC "void glWindowPos3fMESA GLfloat x GLfloat y GLfloat z")
;(CFNC "void glWindowPos3dMESA GLdouble x GLdouble y GLdouble z")
;(CFNC "void glWindowPos3ivMESA GLint* p")
;(CFNC "void glWindowPos3svMESA GLshort* p")
;(CFNC "void glWindowPos3fvMESA GLfloat* p")
;(CFNC "void glWindowPos3dvMESA GLdouble* p")
;(CFNC "void glWindowPos4iMESA GLint x GLint y GLint z GLint w")
;(CFNC "void glWindowPos4sMESA GLshort x GLshort y GLshort z GLshort w")
;(CFNC "void glWindowPos4fMESA GLfloat x GLfloat y GLfloat z GLfloat w")
;(CFNC "void glWindowPos4dMESA GLdouble x GLdouble y GLdouble z GLdouble w")
;(CFNC "void glWindowPos4ivMESA GLint* p")
;(CFNC "void glWindowPos4svMESA GLshort* p")
;(CFNC "void glWindowPos4fvMESA GLfloat* p")
;(CFNC "void glWindowPos4dvMESA GLdouble* p")
;(CFNC "void glResizeBuffersMESA void")

(CINT-X "GLX_USE_GL")
(CINT-X "GLX_BUFFER_SIZE")
(CINT-X "GLX_LEVEL")
(CINT-X "GLX_RGBA")
(CINT-X "GLX_DOUBLEBUFFER")
(CINT-X "GLX_STEREO")
(CINT-X "GLX_AUX_BUFFERS")
(CINT-X "GLX_RED_SIZE")
(CINT-X "GLX_GREEN_SIZE")
(CINT-X "GLX_BLUE_SIZE")
(CINT-X "GLX_ALPHA_SIZE")
(CINT-X "GLX_DEPTH_SIZE")
(CINT-X "GLX_STENCIL_SIZE")
(CINT-X "GLX_ACCUM_RED_SIZE")
(CINT-X "GLX_ACCUM_GREEN_SIZE")
(CINT-X "GLX_ACCUM_BLUE_SIZE")
(CINT-X "GLX_ACCUM_ALPHA_SIZE")
;(CINT-X "GLX_X_VISUAL_TYPE")
;(CINT-X "GLX_CONFIG_CAVEAT")
;(CINT-X "GLX_TRANSPARENT_TYPE")
;(CINT-X "GLX_TRANSPARENT_INDEX_VALUE")
;(CINT-X "GLX_TRANSPARENT_RED_VALUE")
;(CINT-X "GLX_TRANSPARENT_GREEN_VALUE")
;(CINT-X "GLX_TRANSPARENT_BLUE_VALUE")
;(CINT-X "GLX_TRANSPARENT_ALPHA_VALUE")
;(CINT-X "GLX_DRAWABLE_TYPE")
;(CINT-X "GLX_RENDER_TYPE")
;(CINT-X "GLX_X_RENDERABLE")
;(CINT-X "GLX_FBCONFIG_ID")
;(CINT-X "GLX_MAX_PBUFFER_WIDTH")
;(CINT-X "GLX_MAX_PBUFFER_HEIGHT")
;(CINT-X "GLX_MAX_PBUFFER_PIXELS")
;(CINT-X "GLX_VISUAL_ID")
(CINT-X "GLX_BAD_SCREEN")
(CINT-X "GLX_BAD_ATTRIBUTE")
(CINT-X "GLX_NO_EXTENSION")
(CINT-X "GLX_BAD_VISUAL")
(CINT-X "GLX_BAD_CONTEXT")
(CINT-X "GLX_BAD_VALUE")
(CINT-X "GLX_BAD_ENUM")
;(CINT-X "GLX_DONT_CARE")
;(CINT-X "GLX_RGBA_BIT")
;(CINT-X "GLX_COLOR_INDEX_BIT")
;(CINT-X "GLX_WINDOW_BIT")
;(CINT-X "GLX_PIXMAP_BIT")
;(CINT-X "GLX_PBUFFER_BIT")
;(CINT-X "GLX_NONE")
;(CINT-X "GLX_SLOW_CONFIG")
;(CINT-X "GLX_NON_CONFORMANT_CONFIG")
;(CINT-X "GLX_TRUE_COLOR")
;(CINT-X "GLX_DIRECT_COLOR")
;(CINT-X "GLX_PSEUDO_COLOR")
;(CINT-X "GLX_STATIC_COLOR")
;(CINT-X "GLX_GRAY_SCALE")
;(CINT-X "GLX_STATIC_GRAY")
;(CINT-X "GLX_TRANSPARENT_RGB")
;(CINT-X "GLX_TRANSPARENT_INDEX")
;(CINT-X "GLX_PRESERVED_CONTENTS")
;(CINT-X "GLX_LARGEST_PBUFFER")
;(CINT-X "GLX_PBUFFER_HEIGHT")
;(CINT-X "GLX_PBUFFER_WIDTH")
;(CINT-X "GLX_WIDTH")
;(CINT-X "GLX_HEIGHT")
;(CINT-X "GLX_EVENT_MASK")
;(CINT-X "GLX_RGBA_TYPE")
;(CINT-X "GLX_COLOR_INDEX_TYPE")
;(CINT-X "GLX_SCREEN")
;(CINT-X "GLX_PBUFFER_CLOBBER_MASK")
;(CINT-X "GLX_DAMAGED")
;(CINT-X "GLX_SAVED")
;(CINT-X "GLX_WINDOW")
;(CINT-X "GLX_PBUFFER")
;(CINT-X "GLX_FRONT_LEFT_BUFFER_BIT")
;(CINT-X "GLX_FRONT_RIGHT_BUFFER_BIT")
;(CINT-X "GLX_BACK_LEFT_BUFFER_BIT")
;(CINT-X "GLX_BACK_RIGHT_BUFFER_BIT")
;(CINT-X "GLX_AUX_BUFFERS_BIT")
;(CINT-X "GLX_DEPTH_BUFFER_BIT")
;(CINT-X "GLX_STENCIL_BUFFER_BIT")
;(CINT-X "GLX_ACCUM_BUFFER_BIT")
;(CINT-X "GLX_X_VISUAL_TYPE_EXT")
;(CINT-X "GLX_TRANSPARENT_TYPE_EXT")
;(CINT-X "GLX_TRANSPARENT_INDEX_VALUE_EXT")
;(CINT-X "GLX_TRANSPARENT_RED_VALUE_EXT")
;(CINT-X "GLX_TRANSPARENT_GREEN_VALUE_EXT")
;(CINT-X "GLX_TRANSPARENT_BLUE_VALUE_EXT")
;(CINT-X "GLX_TRANSPARENT_ALPHA_VALUE_EXT")
;(CINT-X "GLX_TRUE_COLOR_EXT")
;(CINT-X "GLX_DIRECT_COLOR_EXT")
;(CINT-X "GLX_PSEUDO_COLOR_EXT")
;(CINT-X "GLX_STATIC_COLOR_EXT")
;(CINT-X "GLX_GRAY_SCALE_EXT")
;(CINT-X "GLX_STATIC_GRAY_EXT")
;(CINT-X "GLX_NONE_EXT")
;(CINT-X "GLX_TRANSPARENT_RGB_EXT")
;(CINT-X "GLX_TRANSPARENT_INDEX_EXT")
;;(CINT-X "GLX_VISUAL_CAVEAT_EXT")
;;(CINT-X "GLX_SLOW_VISUAL_EXT")
;(CINT-X "GLX_NON_CONFORMANT_VISUAL_EXT")
(CINT-X "GLX_VENDOR")
(CINT-X "GLX_VERSION")
(CINT-X "GLX_EXTENSIONS")
;(CINT-X "GLX_SHARE_CONTEXT_EXT")
;(CINT-X "GLX_VISUAL_ID_EXT")
;(CINT-X "GLX_SCREEN_EXT")
(CINT "GL_FALSE")
(CINT "GL_TRUE")
(CINT "GL_BYTE")
(CINT "GL_UNSIGNED_BYTE")
(CINT "GL_SHORT")
(CINT "GL_UNSIGNED_SHORT")
(CINT "GL_INT")
(CINT "GL_UNSIGNED_INT")
(CINT "GL_FLOAT")
(CINT "GL_DOUBLE")
(CINT "GL_2_BYTES")
(CINT "GL_3_BYTES")
(CINT "GL_4_BYTES")
(CINT "GL_POINTS")
(CINT "GL_LINES")
(CINT "GL_LINE_LOOP")
(CINT "GL_LINE_STRIP")
(CINT "GL_TRIANGLES")
(CINT "GL_TRIANGLE_STRIP")
(CINT "GL_TRIANGLE_FAN")
(CINT "GL_QUADS")
(CINT "GL_QUAD_STRIP")
(CINT "GL_POLYGON")
(CINT "GL_VERTEX_ARRAY")
(CINT "GL_NORMAL_ARRAY")
(CINT "GL_COLOR_ARRAY")
(CINT "GL_INDEX_ARRAY")
(CINT "GL_TEXTURE_COORD_ARRAY")
(CINT "GL_EDGE_FLAG_ARRAY")
(CINT "GL_VERTEX_ARRAY_SIZE")
(CINT "GL_VERTEX_ARRAY_TYPE")
(CINT "GL_VERTEX_ARRAY_STRIDE")
(CINT "GL_NORMAL_ARRAY_TYPE")
(CINT "GL_NORMAL_ARRAY_STRIDE")
(CINT "GL_COLOR_ARRAY_SIZE")
(CINT "GL_COLOR_ARRAY_TYPE")
(CINT "GL_COLOR_ARRAY_STRIDE")
(CINT "GL_INDEX_ARRAY_TYPE")
(CINT "GL_INDEX_ARRAY_STRIDE")
(CINT "GL_TEXTURE_COORD_ARRAY_SIZE")
(CINT "GL_TEXTURE_COORD_ARRAY_TYPE")
(CINT "GL_TEXTURE_COORD_ARRAY_STRIDE")
(CINT "GL_EDGE_FLAG_ARRAY_STRIDE")
(CINT "GL_VERTEX_ARRAY_POINTER")
(CINT "GL_NORMAL_ARRAY_POINTER")
(CINT "GL_COLOR_ARRAY_POINTER")
(CINT "GL_INDEX_ARRAY_POINTER")
(CINT "GL_TEXTURE_COORD_ARRAY_POINTER")
(CINT "GL_EDGE_FLAG_ARRAY_POINTER")
(CINT "GL_V2F")
(CINT "GL_V3F")
(CINT "GL_C4UB_V2F")
(CINT "GL_C4UB_V3F")
(CINT "GL_C3F_V3F")
(CINT "GL_N3F_V3F")
(CINT "GL_C4F_N3F_V3F")
(CINT "GL_T2F_V3F")
(CINT "GL_T4F_V4F")
(CINT "GL_T2F_C4UB_V3F")
(CINT "GL_T2F_C3F_V3F")
(CINT "GL_T2F_N3F_V3F")
(CINT "GL_T2F_C4F_N3F_V3F")
(CINT "GL_T4F_C4F_N3F_V4F")
(CINT "GL_MATRIX_MODE")
(CINT "GL_MODELVIEW")
(CINT "GL_PROJECTION")
(CINT "GL_TEXTURE")
(CINT "GL_POINT_SMOOTH")
(CINT "GL_POINT_SIZE")
(CINT "GL_POINT_SIZE_GRANULARITY")
(CINT "GL_POINT_SIZE_RANGE")
(CINT "GL_LINE_SMOOTH")
(CINT "GL_LINE_STIPPLE")
(CINT "GL_LINE_STIPPLE_PATTERN")
(CINT "GL_LINE_STIPPLE_REPEAT")
(CINT "GL_LINE_WIDTH")
(CINT "GL_LINE_WIDTH_GRANULARITY")
(CINT "GL_LINE_WIDTH_RANGE")
(CINT "GL_POINT")
(CINT "GL_LINE")
(CINT "GL_FILL")
(CINT "GL_CW")
(CINT "GL_CCW")
(CINT "GL_FRONT")
(CINT "GL_BACK")
(CINT "GL_POLYGON_MODE")
(CINT "GL_POLYGON_SMOOTH")
(CINT "GL_POLYGON_STIPPLE")
(CINT "GL_EDGE_FLAG")
(CINT "GL_CULL_FACE")
(CINT "GL_CULL_FACE_MODE")
(CINT "GL_FRONT_FACE")
(CINT "GL_POLYGON_OFFSET_FACTOR")
(CINT "GL_POLYGON_OFFSET_UNITS")
(CINT "GL_POLYGON_OFFSET_POINT")
(CINT "GL_POLYGON_OFFSET_LINE")
(CINT "GL_POLYGON_OFFSET_FILL")
(CINT "GL_COMPILE")
(CINT "GL_COMPILE_AND_EXECUTE")
(CINT "GL_LIST_BASE")
(CINT "GL_LIST_INDEX")
(CINT "GL_LIST_MODE")
(CINT "GL_NEVER")
(CINT "GL_LESS")
(CINT "GL_EQUAL")
(CINT "GL_LEQUAL")
(CINT "GL_GREATER")
(CINT "GL_NOTEQUAL")
(CINT "GL_GEQUAL")
(CINT "GL_ALWAYS")
(CINT "GL_DEPTH_TEST")
(CINT "GL_DEPTH_BITS")
(CINT "GL_DEPTH_CLEAR_VALUE")
(CINT "GL_DEPTH_FUNC")
(CINT "GL_DEPTH_RANGE")
(CINT "GL_DEPTH_WRITEMASK")
(CINT "GL_DEPTH_COMPONENT")
(CINT "GL_LIGHTING")
(CINT "GL_LIGHT0")
(CINT "GL_LIGHT1")
(CINT "GL_LIGHT2")
(CINT "GL_LIGHT3")
(CINT "GL_LIGHT4")
(CINT "GL_LIGHT5")
(CINT "GL_LIGHT6")
(CINT "GL_LIGHT7")
(CINT "GL_SPOT_EXPONENT")
(CINT "GL_SPOT_CUTOFF")
(CINT "GL_CONSTANT_ATTENUATION")
(CINT "GL_LINEAR_ATTENUATION")
(CINT "GL_QUADRATIC_ATTENUATION")
(CINT "GL_AMBIENT")
(CINT "GL_DIFFUSE")
(CINT "GL_SPECULAR")
(CINT "GL_SHININESS")
(CINT "GL_EMISSION")
(CINT "GL_POSITION")
(CINT "GL_SPOT_DIRECTION")
(CINT "GL_AMBIENT_AND_DIFFUSE")
(CINT "GL_COLOR_INDEXES")
(CINT "GL_LIGHT_MODEL_TWO_SIDE")
(CINT "GL_LIGHT_MODEL_LOCAL_VIEWER")
(CINT "GL_LIGHT_MODEL_AMBIENT")
(CINT "GL_FRONT_AND_BACK")
(CINT "GL_SHADE_MODEL")
(CINT "GL_FLAT")
(CINT "GL_SMOOTH")
(CINT "GL_COLOR_MATERIAL")
(CINT "GL_COLOR_MATERIAL_FACE")
(CINT "GL_COLOR_MATERIAL_PARAMETER")
(CINT "GL_NORMALIZE")
(CINT "GL_CLIP_PLANE0")
(CINT "GL_CLIP_PLANE1")
(CINT "GL_CLIP_PLANE2")
(CINT "GL_CLIP_PLANE3")
(CINT "GL_CLIP_PLANE4")
(CINT "GL_CLIP_PLANE5")
(CINT "GL_ACCUM_RED_BITS")
(CINT "GL_ACCUM_GREEN_BITS")
(CINT "GL_ACCUM_BLUE_BITS")
(CINT "GL_ACCUM_ALPHA_BITS")
(CINT "GL_ACCUM_CLEAR_VALUE")
(CINT "GL_ACCUM")
(CINT "GL_ADD")
(CINT "GL_LOAD")
(CINT "GL_MULT")
(CINT "GL_RETURN")
(CINT "GL_ALPHA_TEST")
(CINT "GL_ALPHA_TEST_REF")
(CINT "GL_ALPHA_TEST_FUNC")
(CINT "GL_BLEND")
(CINT "GL_BLEND_SRC")
(CINT "GL_BLEND_DST")
(CINT "GL_ZERO")
(CINT "GL_ONE")
(CINT "GL_SRC_COLOR")
(CINT "GL_ONE_MINUS_SRC_COLOR")
(CINT "GL_DST_COLOR")
(CINT "GL_ONE_MINUS_DST_COLOR")
(CINT "GL_SRC_ALPHA")
(CINT "GL_ONE_MINUS_SRC_ALPHA")
(CINT "GL_DST_ALPHA")
(CINT "GL_ONE_MINUS_DST_ALPHA")
(CINT "GL_SRC_ALPHA_SATURATE")
(CINT "GL_CONSTANT_COLOR")
(CINT "GL_ONE_MINUS_CONSTANT_COLOR")
(CINT "GL_CONSTANT_ALPHA")
(CINT "GL_ONE_MINUS_CONSTANT_ALPHA")
(CINT "GL_FEEDBACK")
(CINT "GL_RENDER")
(CINT "GL_SELECT")
(CINT "GL_2D")
(CINT "GL_3D")
(CINT "GL_3D_COLOR")
(CINT "GL_3D_COLOR_TEXTURE")
(CINT "GL_4D_COLOR_TEXTURE")
(CINT "GL_POINT_TOKEN")
(CINT "GL_LINE_TOKEN")
(CINT "GL_LINE_RESET_TOKEN")
(CINT "GL_POLYGON_TOKEN")
(CINT "GL_BITMAP_TOKEN")
(CINT "GL_DRAW_PIXEL_TOKEN")
(CINT "GL_COPY_PIXEL_TOKEN")
(CINT "GL_PASS_THROUGH_TOKEN")
(CINT "GL_FEEDBACK_BUFFER_POINTER")
(CINT "GL_FEEDBACK_BUFFER_SIZE")
(CINT "GL_FEEDBACK_BUFFER_TYPE")
(CINT "GL_SELECTION_BUFFER_POINTER")
(CINT "GL_SELECTION_BUFFER_SIZE")
(CINT "GL_FOG")
(CINT "GL_FOG_MODE")
(CINT "GL_FOG_DENSITY")
(CINT "GL_FOG_COLOR")
(CINT "GL_FOG_INDEX")
(CINT "GL_FOG_START")
(CINT "GL_FOG_END")
(CINT "GL_LINEAR")
(CINT "GL_EXP")
(CINT "GL_EXP2")
(CINT "GL_LOGIC_OP")
(CINT "GL_INDEX_LOGIC_OP")
(CINT "GL_COLOR_LOGIC_OP")
(CINT "GL_LOGIC_OP_MODE")
(CINT "GL_CLEAR")
(CINT "GL_SET")
(CINT "GL_COPY")
(CINT "GL_COPY_INVERTED")
(CINT "GL_NOOP")
(CINT "GL_INVERT")
(CINT "GL_AND")
(CINT "GL_NAND")
(CINT "GL_OR")
(CINT "GL_NOR")
(CINT "GL_XOR")
(CINT "GL_EQUIV")
(CINT "GL_AND_REVERSE")
(CINT "GL_AND_INVERTED")
(CINT "GL_OR_REVERSE")
(CINT "GL_OR_INVERTED")
(CINT "GL_STENCIL_TEST")
(CINT "GL_STENCIL_WRITEMASK")
(CINT "GL_STENCIL_BITS")
(CINT "GL_STENCIL_FUNC")
(CINT "GL_STENCIL_VALUE_MASK")
(CINT "GL_STENCIL_REF")
(CINT "GL_STENCIL_FAIL")
(CINT "GL_STENCIL_PASS_DEPTH_PASS")
(CINT "GL_STENCIL_PASS_DEPTH_FAIL")
(CINT "GL_STENCIL_CLEAR_VALUE")
(CINT "GL_STENCIL_INDEX")
(CINT "GL_KEEP")
(CINT "GL_REPLACE")
(CINT "GL_INCR")
(CINT "GL_DECR")
(CINT "GL_NONE")
(CINT "GL_LEFT")
(CINT "GL_RIGHT")
(CINT "GL_FRONT_LEFT")
(CINT "GL_FRONT_RIGHT")
(CINT "GL_BACK_LEFT")
(CINT "GL_BACK_RIGHT")
(CINT "GL_AUX0")
(CINT "GL_AUX1")
(CINT "GL_AUX2")
(CINT "GL_AUX3")
(CINT "GL_COLOR_INDEX")
(CINT "GL_RED")
(CINT "GL_GREEN")
(CINT "GL_BLUE")
(CINT "GL_ALPHA")
(CINT "GL_LUMINANCE")
(CINT "GL_LUMINANCE_ALPHA")
(CINT "GL_ALPHA_BITS")
(CINT "GL_RED_BITS")
(CINT "GL_GREEN_BITS")
(CINT "GL_BLUE_BITS")
(CINT "GL_INDEX_BITS")
(CINT "GL_SUBPIXEL_BITS")
(CINT "GL_AUX_BUFFERS")
(CINT "GL_READ_BUFFER")
(CINT "GL_DRAW_BUFFER")
(CINT "GL_DOUBLEBUFFER")
(CINT "GL_STEREO")
(CINT "GL_BITMAP")
(CINT "GL_COLOR")
(CINT "GL_DEPTH")
(CINT "GL_STENCIL")
(CINT "GL_DITHER")
(CINT "GL_RGB")
(CINT "GL_RGBA")
(CINT "GL_MAX_LIST_NESTING")
(CINT "GL_MAX_ATTRIB_STACK_DEPTH")
(CINT "GL_MAX_MODELVIEW_STACK_DEPTH")
(CINT "GL_MAX_NAME_STACK_DEPTH")
(CINT "GL_MAX_PROJECTION_STACK_DEPTH")
(CINT "GL_MAX_TEXTURE_STACK_DEPTH")
(CINT "GL_MAX_EVAL_ORDER")
(CINT "GL_MAX_LIGHTS")
(CINT "GL_MAX_CLIP_PLANES")
(CINT "GL_MAX_TEXTURE_SIZE")
(CINT "GL_MAX_PIXEL_MAP_TABLE")
(CINT "GL_MAX_VIEWPORT_DIMS")
(CINT "GL_MAX_CLIENT_ATTRIB_STACK_DEPTH")
(CINT "GL_ATTRIB_STACK_DEPTH")
(CINT "GL_CLIENT_ATTRIB_STACK_DEPTH")
(CINT "GL_COLOR_CLEAR_VALUE")
(CINT "GL_COLOR_WRITEMASK")
(CINT "GL_CURRENT_INDEX")
(CINT "GL_CURRENT_COLOR")
(CINT "GL_CURRENT_NORMAL")
(CINT "GL_CURRENT_RASTER_COLOR")
(CINT "GL_CURRENT_RASTER_DISTANCE")
(CINT "GL_CURRENT_RASTER_INDEX")
(CINT "GL_CURRENT_RASTER_POSITION")
(CINT "GL_CURRENT_RASTER_TEXTURE_COORDS")
(CINT "GL_CURRENT_RASTER_POSITION_VALID")
(CINT "GL_CURRENT_TEXTURE_COORDS")
(CINT "GL_INDEX_CLEAR_VALUE")
(CINT "GL_INDEX_MODE")
(CINT "GL_INDEX_WRITEMASK")
(CINT "GL_MODELVIEW_MATRIX")
(CINT "GL_MODELVIEW_STACK_DEPTH")
(CINT "GL_NAME_STACK_DEPTH")
(CINT "GL_PROJECTION_MATRIX")
(CINT "GL_PROJECTION_STACK_DEPTH")
(CINT "GL_RENDER_MODE")
(CINT "GL_RGBA_MODE")
(CINT "GL_TEXTURE_MATRIX")
(CINT "GL_TEXTURE_STACK_DEPTH")
(CINT "GL_VIEWPORT")
(CINT "GL_AUTO_NORMAL")
(CINT "GL_MAP1_COLOR_4")
(CINT "GL_MAP1_GRID_DOMAIN")
(CINT "GL_MAP1_GRID_SEGMENTS")
(CINT "GL_MAP1_INDEX")
(CINT "GL_MAP1_NORMAL")
(CINT "GL_MAP1_TEXTURE_COORD_1")
(CINT "GL_MAP1_TEXTURE_COORD_2")
(CINT "GL_MAP1_TEXTURE_COORD_3")
(CINT "GL_MAP1_TEXTURE_COORD_4")
(CINT "GL_MAP1_VERTEX_3")
(CINT "GL_MAP1_VERTEX_4")
(CINT "GL_MAP2_COLOR_4")
(CINT "GL_MAP2_GRID_DOMAIN")
(CINT "GL_MAP2_GRID_SEGMENTS")
(CINT "GL_MAP2_INDEX")
(CINT "GL_MAP2_NORMAL")
(CINT "GL_MAP2_TEXTURE_COORD_1")
(CINT "GL_MAP2_TEXTURE_COORD_2")
(CINT "GL_MAP2_TEXTURE_COORD_3")
(CINT "GL_MAP2_TEXTURE_COORD_4")
(CINT "GL_MAP2_VERTEX_3")
(CINT "GL_MAP2_VERTEX_4")
(CINT "GL_COEFF")
(CINT "GL_DOMAIN")
(CINT "GL_ORDER")
(CINT "GL_FOG_HINT")
(CINT "GL_LINE_SMOOTH_HINT")
(CINT "GL_PERSPECTIVE_CORRECTION_HINT")
(CINT "GL_POINT_SMOOTH_HINT")
(CINT "GL_POLYGON_SMOOTH_HINT")
(CINT "GL_DONT_CARE")
(CINT "GL_FASTEST")
(CINT "GL_NICEST")
(CINT "GL_SCISSOR_TEST")
(CINT "GL_SCISSOR_BOX")
(CINT "GL_MAP_COLOR")
(CINT "GL_MAP_STENCIL")
(CINT "GL_INDEX_SHIFT")
(CINT "GL_INDEX_OFFSET")
(CINT "GL_RED_SCALE")
(CINT "GL_RED_BIAS")
(CINT "GL_GREEN_SCALE")
(CINT "GL_GREEN_BIAS")
(CINT "GL_BLUE_SCALE")
(CINT "GL_BLUE_BIAS")
(CINT "GL_ALPHA_SCALE")
(CINT "GL_ALPHA_BIAS")
(CINT "GL_DEPTH_SCALE")
(CINT "GL_DEPTH_BIAS")
(CINT "GL_PIXEL_MAP_S_TO_S_SIZE")
(CINT "GL_PIXEL_MAP_I_TO_I_SIZE")
(CINT "GL_PIXEL_MAP_I_TO_R_SIZE")
(CINT "GL_PIXEL_MAP_I_TO_G_SIZE")
(CINT "GL_PIXEL_MAP_I_TO_B_SIZE")
(CINT "GL_PIXEL_MAP_I_TO_A_SIZE")
(CINT "GL_PIXEL_MAP_R_TO_R_SIZE")
(CINT "GL_PIXEL_MAP_G_TO_G_SIZE")
(CINT "GL_PIXEL_MAP_B_TO_B_SIZE")
(CINT "GL_PIXEL_MAP_A_TO_A_SIZE")
(CINT "GL_PIXEL_MAP_S_TO_S")
(CINT "GL_PIXEL_MAP_I_TO_I")
(CINT "GL_PIXEL_MAP_I_TO_R")
(CINT "GL_PIXEL_MAP_I_TO_G")
(CINT "GL_PIXEL_MAP_I_TO_B")
(CINT "GL_PIXEL_MAP_I_TO_A")
(CINT "GL_PIXEL_MAP_R_TO_R")
(CINT "GL_PIXEL_MAP_G_TO_G")
(CINT "GL_PIXEL_MAP_B_TO_B")
(CINT "GL_PIXEL_MAP_A_TO_A")
(CINT "GL_PACK_ALIGNMENT")
(CINT "GL_PACK_LSB_FIRST")
(CINT "GL_PACK_ROW_LENGTH")
(CINT "GL_PACK_SKIP_PIXELS")
(CINT "GL_PACK_SKIP_ROWS")
(CINT "GL_PACK_SWAP_BYTES")
(CINT "GL_UNPACK_ALIGNMENT")
(CINT "GL_UNPACK_LSB_FIRST")
(CINT "GL_UNPACK_ROW_LENGTH")
(CINT "GL_UNPACK_SKIP_PIXELS")
(CINT "GL_UNPACK_SKIP_ROWS")
(CINT "GL_UNPACK_SWAP_BYTES")
(CINT "GL_ZOOM_X")
(CINT "GL_ZOOM_Y")
(CINT "GL_TEXTURE_ENV")
(CINT "GL_TEXTURE_ENV_MODE")
(CINT "GL_TEXTURE_1D")
(CINT "GL_TEXTURE_2D")
(CINT "GL_TEXTURE_WRAP_S")
(CINT "GL_TEXTURE_WRAP_T")
(CINT "GL_TEXTURE_MAG_FILTER")
(CINT "GL_TEXTURE_MIN_FILTER")
(CINT "GL_TEXTURE_ENV_COLOR")
(CINT "GL_TEXTURE_GEN_S")
(CINT "GL_TEXTURE_GEN_T")
(CINT "GL_TEXTURE_GEN_MODE")
(CINT "GL_TEXTURE_BORDER_COLOR")
(CINT "GL_TEXTURE_WIDTH")
(CINT "GL_TEXTURE_HEIGHT")
(CINT "GL_TEXTURE_BORDER")
(CINT "GL_TEXTURE_COMPONENTS")
(CINT "GL_TEXTURE_RED_SIZE")
(CINT "GL_TEXTURE_GREEN_SIZE")
(CINT "GL_TEXTURE_BLUE_SIZE")
(CINT "GL_TEXTURE_ALPHA_SIZE")
(CINT "GL_TEXTURE_LUMINANCE_SIZE")
(CINT "GL_TEXTURE_INTENSITY_SIZE")
(CINT "GL_NEAREST_MIPMAP_NEAREST")
(CINT "GL_NEAREST_MIPMAP_LINEAR")
(CINT "GL_LINEAR_MIPMAP_NEAREST")
(CINT "GL_LINEAR_MIPMAP_LINEAR")
(CINT "GL_OBJECT_LINEAR")
(CINT "GL_OBJECT_PLANE")
(CINT "GL_EYE_LINEAR")
(CINT "GL_EYE_PLANE")
(CINT "GL_SPHERE_MAP")
(CINT "GL_DECAL")
(CINT "GL_MODULATE")
(CINT "GL_NEAREST")
(CINT "GL_REPEAT")
(CINT "GL_CLAMP")
(CINT "GL_S")
(CINT "GL_T")
(CINT "GL_R")
(CINT "GL_Q")
(CINT "GL_TEXTURE_GEN_R")
(CINT "GL_TEXTURE_GEN_Q")
(CINT "GL_PROXY_TEXTURE_1D")
(CINT "GL_PROXY_TEXTURE_2D")
(CINT "GL_TEXTURE_PRIORITY")
(CINT "GL_TEXTURE_RESIDENT")
(CINT "GL_TEXTURE_BINDING_1D")
(CINT "GL_TEXTURE_BINDING_2D")
(CINT "GL_TEXTURE_INTERNAL_FORMAT")
(CINT "GL_PACK_SKIP_IMAGES")
(CINT "GL_PACK_IMAGE_HEIGHT")
(CINT "GL_UNPACK_SKIP_IMAGES")
(CINT "GL_UNPACK_IMAGE_HEIGHT")
(CINT "GL_TEXTURE_3D")
(CINT "GL_PROXY_TEXTURE_3D")
(CINT "GL_TEXTURE_DEPTH")
(CINT "GL_TEXTURE_WRAP_R")
(CINT "GL_MAX_3D_TEXTURE_SIZE")
(CINT "GL_TEXTURE_BINDING_3D")
(CINT "GL_ALPHA4")
(CINT "GL_ALPHA8")
(CINT "GL_ALPHA12")
(CINT "GL_ALPHA16")
(CINT "GL_LUMINANCE4")
(CINT "GL_LUMINANCE8")
(CINT "GL_LUMINANCE12")
(CINT "GL_LUMINANCE16")
(CINT "GL_LUMINANCE4_ALPHA4")
(CINT "GL_LUMINANCE6_ALPHA2")
(CINT "GL_LUMINANCE8_ALPHA8")
(CINT "GL_LUMINANCE12_ALPHA4")
(CINT "GL_LUMINANCE12_ALPHA12")
(CINT "GL_LUMINANCE16_ALPHA16")
(CINT "GL_INTENSITY")
(CINT "GL_INTENSITY4")
(CINT "GL_INTENSITY8")
(CINT "GL_INTENSITY12")
(CINT "GL_INTENSITY16")
(CINT "GL_R3_G3_B2")
(CINT "GL_RGB4")
(CINT "GL_RGB5")
(CINT "GL_RGB8")
(CINT "GL_RGB10")
(CINT "GL_RGB12")
(CINT "GL_RGB16")
(CINT "GL_RGBA2")
(CINT "GL_RGBA4")
(CINT "GL_RGB5_A1")
(CINT "GL_RGBA8")
(CINT "GL_RGB10_A2")
(CINT "GL_RGBA12")
(CINT "GL_RGBA16")
(CINT "GL_VENDOR")
(CINT "GL_RENDERER")
(CINT "GL_VERSION")
(CINT "GL_EXTENSIONS")
(CINT "GL_NO_ERROR")
(CINT "GL_INVALID_VALUE")
(CINT "GL_INVALID_ENUM")
(CINT "GL_INVALID_OPERATION")
(CINT "GL_STACK_OVERFLOW")
(CINT "GL_STACK_UNDERFLOW")
(CINT "GL_OUT_OF_MEMORY")
(CINT "GL_RESCALE_NORMAL")
(CINT "GL_CLAMP_TO_EDGE")
(CINT "GL_MAX_ELEMENTS_VERTICES")
(CINT "GL_MAX_ELEMENTS_INDICES")
(CINT "GL_BGR")
(CINT "GL_BGRA")
(CINT "GL_UNSIGNED_BYTE_3_3_2")
(CINT "GL_UNSIGNED_BYTE_2_3_3_REV")
(CINT "GL_UNSIGNED_SHORT_5_6_5")
(CINT "GL_UNSIGNED_SHORT_5_6_5_REV")
(CINT "GL_UNSIGNED_SHORT_4_4_4_4")
(CINT "GL_UNSIGNED_SHORT_4_4_4_4_REV")
(CINT "GL_UNSIGNED_SHORT_5_5_5_1")
(CINT "GL_UNSIGNED_SHORT_1_5_5_5_REV")
(CINT "GL_UNSIGNED_INT_8_8_8_8")
(CINT "GL_UNSIGNED_INT_8_8_8_8_REV")
(CINT "GL_UNSIGNED_INT_10_10_10_2")
(CINT "GL_UNSIGNED_INT_2_10_10_10_REV")
(CINT "GL_LIGHT_MODEL_COLOR_CONTROL")
(CINT "GL_SINGLE_COLOR")
(CINT "GL_SEPARATE_SPECULAR_COLOR")
(CINT "GL_TEXTURE_MIN_LOD")
(CINT "GL_TEXTURE_MAX_LOD")
(CINT "GL_TEXTURE_BASE_LEVEL")
(CINT "GL_TEXTURE_MAX_LEVEL")
;(CINT "GL_SMOOTH_POINT_SIZE_RANGE")
;(CINT "GL_SMOOTH_POINT_SIZE_GRANULARITY")
;(CINT "GL_SMOOTH_LINE_WIDTH_RANGE")
;(CINT "GL_SMOOTH_LINE_WIDTH_GRANULARITY")
;(CINT "GL_ALIASED_POINT_SIZE_RANGE")
;(CINT "GL_ALIASED_LINE_WIDTH_RANGE")
(CINT "GL_COLOR_TABLE")
(CINT "GL_POST_CONVOLUTION_COLOR_TABLE")
(CINT "GL_POST_COLOR_MATRIX_COLOR_TABLE")
(CINT "GL_PROXY_COLOR_TABLE")
(CINT "GL_PROXY_POST_CONVOLUTION_COLOR_TABLE")
(CINT "GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE")
(CINT "GL_COLOR_TABLE_SCALE")
(CINT "GL_COLOR_TABLE_BIAS")
(CINT "GL_COLOR_TABLE_FORMAT")
(CINT "GL_COLOR_TABLE_WIDTH")
(CINT "GL_COLOR_TABLE_RED_SIZE")
(CINT "GL_COLOR_TABLE_GREEN_SIZE")
(CINT "GL_COLOR_TABLE_BLUE_SIZE")
(CINT "GL_COLOR_TABLE_ALPHA_SIZE")
(CINT "GL_COLOR_TABLE_LUMINANCE_SIZE")
(CINT "GL_COLOR_TABLE_INTENSITY_SIZE")
(CINT "GL_CONVOLUTION_1D")
(CINT "GL_CONVOLUTION_2D")
(CINT "GL_SEPARABLE_2D")
(CINT "GL_CONVOLUTION_BORDER_MODE")
(CINT "GL_CONVOLUTION_FILTER_SCALE")
(CINT "GL_CONVOLUTION_FILTER_BIAS")
(CINT "GL_REDUCE")
(CINT "GL_CONVOLUTION_FORMAT")
(CINT "GL_CONVOLUTION_WIDTH")
(CINT "GL_CONVOLUTION_HEIGHT")
(CINT "GL_MAX_CONVOLUTION_WIDTH")
(CINT "GL_MAX_CONVOLUTION_HEIGHT")
(CINT "GL_POST_CONVOLUTION_RED_SCALE")
(CINT "GL_POST_CONVOLUTION_GREEN_SCALE")
(CINT "GL_POST_CONVOLUTION_BLUE_SCALE")
(CINT "GL_POST_CONVOLUTION_ALPHA_SCALE")
(CINT "GL_POST_CONVOLUTION_RED_BIAS")
(CINT "GL_POST_CONVOLUTION_GREEN_BIAS")
(CINT "GL_POST_CONVOLUTION_BLUE_BIAS")
(CINT "GL_POST_CONVOLUTION_ALPHA_BIAS")
(CINT "GL_CONSTANT_BORDER")
(CINT "GL_REPLICATE_BORDER")
(CINT "GL_CONVOLUTION_BORDER_COLOR")
(CINT "GL_COLOR_MATRIX")
(CINT "GL_COLOR_MATRIX_STACK_DEPTH")
(CINT "GL_MAX_COLOR_MATRIX_STACK_DEPTH")
(CINT "GL_POST_COLOR_MATRIX_RED_SCALE")
(CINT "GL_POST_COLOR_MATRIX_GREEN_SCALE")
(CINT "GL_POST_COLOR_MATRIX_BLUE_SCALE")
(CINT "GL_POST_COLOR_MATRIX_ALPHA_SCALE")
(CINT "GL_POST_COLOR_MATRIX_RED_BIAS")
(CINT "GL_POST_COLOR_MATRIX_GREEN_BIAS")
(CINT "GL_POST_COLOR_MATRIX_BLUE_BIAS")
(CINT "GL_POST_COLOR_MATRIX_ALPHA_BIAS")
(CINT "GL_HISTOGRAM")
(CINT "GL_PROXY_HISTOGRAM")
(CINT "GL_HISTOGRAM_WIDTH")
(CINT "GL_HISTOGRAM_FORMAT")
(CINT "GL_HISTOGRAM_RED_SIZE")
(CINT "GL_HISTOGRAM_GREEN_SIZE")
(CINT "GL_HISTOGRAM_BLUE_SIZE")
(CINT "GL_HISTOGRAM_ALPHA_SIZE")
(CINT "GL_HISTOGRAM_LUMINANCE_SIZE")
(CINT "GL_HISTOGRAM_SINK")
(CINT "GL_MINMAX")
(CINT "GL_MINMAX_FORMAT")
(CINT "GL_MINMAX_SINK")
(CINT "GL_TABLE_TOO_LARGE")
(CINT "GL_BLEND_EQUATION")
(CINT "GL_MIN")
(CINT "GL_MAX")
(CINT "GL_FUNC_ADD")
(CINT "GL_FUNC_SUBTRACT")
(CINT "GL_FUNC_REVERSE_SUBTRACT")
(CINT "GL_BLEND_COLOR")
(CINT "GL_CURRENT_BIT")
(CINT "GL_POINT_BIT")
(CINT "GL_LINE_BIT")
(CINT "GL_POLYGON_BIT")
(CINT "GL_POLYGON_STIPPLE_BIT")
(CINT "GL_PIXEL_MODE_BIT")
(CINT "GL_LIGHTING_BIT")
(CINT "GL_FOG_BIT")
(CINT "GL_DEPTH_BUFFER_BIT")
(CINT "GL_ACCUM_BUFFER_BIT")
(CINT "GL_STENCIL_BUFFER_BIT")
(CINT "GL_VIEWPORT_BIT")
(CINT "GL_TRANSFORM_BIT")
(CINT "GL_ENABLE_BIT")
(CINT "GL_COLOR_BUFFER_BIT")
(CINT "GL_HINT_BIT")
(CINT "GL_EVAL_BIT")
(CINT "GL_LIST_BIT")
(CINT "GL_TEXTURE_BIT")
(CINT "GL_SCISSOR_BIT")
(CINT "GL_ALL_ATTRIB_BITS")
(CINT "GL_CLIENT_PIXEL_STORE_BIT")
(CINT "GL_CLIENT_VERTEX_ARRAY_BIT")
;(CINT "GL_ALL_CLIENT_ATTRIB_BITS")
(CINT-multi "GL_TEXTURE0_ARB")
(CINT-multi "GL_TEXTURE1_ARB")
(CINT-multi "GL_TEXTURE2_ARB")
(CINT-multi "GL_TEXTURE3_ARB")
(CINT-multi "GL_TEXTURE4_ARB")
(CINT-multi "GL_TEXTURE5_ARB")
(CINT-multi "GL_TEXTURE6_ARB")
(CINT-multi "GL_TEXTURE7_ARB")
(CINT-multi "GL_TEXTURE8_ARB")
(CINT-multi "GL_TEXTURE9_ARB")
(CINT-multi "GL_TEXTURE10_ARB")
(CINT-multi "GL_TEXTURE11_ARB")
(CINT-multi "GL_TEXTURE12_ARB")
(CINT-multi "GL_TEXTURE13_ARB")
(CINT-multi "GL_TEXTURE14_ARB")
(CINT-multi "GL_TEXTURE15_ARB")
(CINT-multi "GL_TEXTURE16_ARB")
(CINT-multi "GL_TEXTURE17_ARB")
(CINT-multi "GL_TEXTURE18_ARB")
(CINT-multi "GL_TEXTURE19_ARB")
(CINT-multi "GL_TEXTURE20_ARB")
(CINT-multi "GL_TEXTURE21_ARB")
(CINT-multi "GL_TEXTURE22_ARB")
(CINT-multi "GL_TEXTURE23_ARB")
(CINT-multi "GL_TEXTURE24_ARB")
(CINT-multi "GL_TEXTURE25_ARB")
(CINT-multi "GL_TEXTURE26_ARB")
(CINT-multi "GL_TEXTURE27_ARB")
(CINT-multi "GL_TEXTURE28_ARB")
(CINT-multi "GL_TEXTURE29_ARB")
(CINT-multi "GL_TEXTURE30_ARB")
(CINT-multi "GL_TEXTURE31_ARB")
(CINT-multi "GL_ACTIVE_TEXTURE_ARB")
(CINT-multi "GL_CLIENT_ACTIVE_TEXTURE_ARB")
(CINT-multi "GL_MAX_TEXTURE_UNITS_ARB")
;(CINT "GL_CONSTANT_COLOR_EXT")
;(CINT "GL_ONE_MINUS_CONSTANT_COLOR_EXT")
;(CINT "GL_CONSTANT_ALPHA_EXT")
;(CINT "GL_ONE_MINUS_CONSTANT_ALPHA_EXT")
;(CINT "GL_BLEND_COLOR_EXT")
;(CINT-blend "GL_POLYGON_OFFSET_EXT")
;(CINT-blend "GL_POLYGON_OFFSET_FACTOR_EXT")
;(CINT-blend "GL_POLYGON_OFFSET_BIAS_EXT")
;(CINT-texture "GL_PACK_SKIP_IMAGES_EXT")
;(CINT-texture "GL_PACK_IMAGE_HEIGHT_EXT")
;(CINT-texture "GL_UNPACK_SKIP_IMAGES_EXT")
;(CINT-texture "GL_UNPACK_IMAGE_HEIGHT_EXT")
;(CINT-texture "GL_TEXTURE_3D_EXT")
;(CINT-texture "GL_PROXY_TEXTURE_3D_EXT")
;(CINT-texture "GL_TEXTURE_DEPTH_EXT")
;(CINT-texture "GL_TEXTURE_WRAP_R_EXT")
;(CINT-texture "GL_MAX_3D_TEXTURE_SIZE_EXT")
;(CINT-texture "GL_TEXTURE_3D_BINDING_EXT")
;(CINT-object "GL_TEXTURE_PRIORITY_EXT")
;(CINT-object "GL_TEXTURE_RESIDENT_EXT")
;(CINT-object "GL_TEXTURE_1D_BINDING_EXT")
;(CINT-object "GL_TEXTURE_2D_BINDING_EXT")
;(CINT-rescale "GL_RESCALE_NORMAL_EXT")
;(CINT-vertex "GL_VERTEX_ARRAY_EXT")
;(CINT-vertex "GL_NORMAL_ARRAY_EXT")
;(CINT-vertex "GL_COLOR_ARRAY_EXT")
;(CINT-vertex "GL_INDEX_ARRAY_EXT")
;(CINT-vertex "GL_TEXTURE_COORD_ARRAY_EXT")
;(CINT-vertex "GL_EDGE_FLAG_ARRAY_EXT")
;(CINT-vertex "GL_VERTEX_ARRAY_SIZE_EXT")
;(CINT-vertex "GL_VERTEX_ARRAY_TYPE_EXT")
;(CINT-vertex "GL_VERTEX_ARRAY_STRIDE_EXT")
;(CINT-vertex "GL_VERTEX_ARRAY_COUNT_EXT")
;(CINT-vertex "GL_NORMAL_ARRAY_TYPE_EXT")
;(CINT-vertex "GL_NORMAL_ARRAY_STRIDE_EXT")
;(CINT-vertex "GL_NORMAL_ARRAY_COUNT_EXT")
;(CINT-vertex "GL_COLOR_ARRAY_SIZE_EXT")
;(CINT-vertex "GL_COLOR_ARRAY_TYPE_EXT")
;(CINT-vertex "GL_COLOR_ARRAY_STRIDE_EXT")
;(CINT-vertex "GL_COLOR_ARRAY_COUNT_EXT")
;(CINT-vertex "GL_INDEX_ARRAY_TYPE_EXT")
;(CINT-vertex "GL_INDEX_ARRAY_STRIDE_EXT")
;(CINT-vertex "GL_INDEX_ARRAY_COUNT_EXT")
;(CINT-vertex "GL_TEXTURE_COORD_ARRAY_SIZE_EXT")
;(CINT-vertex "GL_TEXTURE_COORD_ARRAY_TYPE_EXT")
;(CINT-vertex "GL_TEXTURE_COORD_ARRAY_STRIDE_EXT")
;(CINT-vertex "GL_TEXTURE_COORD_ARRAY_COUNT_EXT")
;(CINT-vertex "GL_EDGE_FLAG_ARRAY_STRIDE_EXT")
;(CINT-vertex "GL_EDGE_FLAG_ARRAY_COUNT_EXT")
;(CINT-vertex "GL_VERTEX_ARRAY_POINTER_EXT")
;(CINT-vertex "GL_NORMAL_ARRAY_POINTER_EXT")
;(CINT-vertex "GL_COLOR_ARRAY_POINTER_EXT")
;(CINT-vertex "GL_INDEX_ARRAY_POINTER_EXT")
;(CINT-vertex "GL_TEXTURE_COORD_ARRAY_POINTER_EXT")
;(CINT-vertex "GL_EDGE_FLAG_ARRAY_POINTER_EXT")
;(CINT "GL_CLAMP_TO_EDGE_SGIS")
;(CINT "GL_FUNC_ADD_EXT")
;(CINT "GL_MIN_EXT")
;(CINT "GL_MAX_EXT")
;(CINT "GL_BLEND_EQUATION_EXT")
;(CINT "GL_FUNC_SUBTRACT_EXT")
;(CINT "GL_FUNC_REVERSE_SUBTRACT_EXT")
;(CINT "GL_POINT_SIZE_MIN_EXT")
;(CINT "GL_POINT_SIZE_MAX_EXT")
;(CINT "GL_POINT_FADE_THRESHOLD_SIZE_EXT")
;(CINT "GL_DISTANCE_ATTENUATION_EXT")
;(CINT "GL_TABLE_TOO_LARGE_EXT")
;(CINT "GL_COLOR_TABLE_FORMAT_EXT")
;(CINT "GL_COLOR_TABLE_WIDTH_EXT")
;(CINT "GL_COLOR_TABLE_RED_SIZE_EXT")
;(CINT "GL_COLOR_TABLE_GREEN_SIZE_EXT")
;(CINT "GL_COLOR_TABLE_BLUE_SIZE_EXT")
;(CINT "GL_COLOR_TABLE_ALPHA_SIZE_EXT")
;(CINT "GL_COLOR_TABLE_LUMINANCE_SIZE_EXT")
;(CINT "GL_COLOR_TABLE_INTENSITY_SIZE_EXT")
;(CINT "GL_TEXTURE_INDEX_SIZE_EXT")
;(CINT "GL_COLOR_INDEX1_EXT")
;(CINT "GL_COLOR_INDEX2_EXT")
;(CINT "GL_COLOR_INDEX4_EXT")
;(CINT "GL_COLOR_INDEX8_EXT")
;(CINT "GL_COLOR_INDEX12_EXT")
;(CINT "GL_COLOR_INDEX16_EXT")
;(CINT "GL_CLIP_VOLUME_CLIPPING_HINT_EXT")
;;(CINT "GL_ARRAY_ELEMENT_LOCK_FIRST_EXT")
;;(CINT "GL_ARRAY_ELEMENT_LOCK_COUNT_EXT")
;;(CINT "GL_OCCLUSION_TEST_HP")
;;(CINT "GL_OCCLUSION_TEST_RESULT_HP")
;(CINT "GL_SHARED_TEXTURE_PALETTE_EXT")
;(CINT "GL_INCR_WRAP_EXT")
;(CINT "GL_DECR_WRAP_EXT")
;(CINT "GL_NORMAL_MAP_NV")
;;(CINT "GL_DOT3_RGB_EXT")
;;(CINT "GL_DOT3_RGBA_EXT")
;(CINT "GL_REFLECTION_MAP_NV")
(CINT "GLU_FALSE")
(CINT "GLU_TRUE")
;(CINT "GLU_VERSION_1_1")
;(CINT "GLU_VERSION_1_2")
;(CINT "GLU_VERSION_1_3")
(CINT "GLU_VERSION")
(CINT "GLU_EXTENSIONS")
(CINT "GLU_INVALID_ENUM")
(CINT "GLU_INVALID_VALUE")
(CINT "GLU_OUT_OF_MEMORY")
;(CINT "GLU_INVALID_OPERATION")
(CINT "GLU_OUTLINE_POLYGON")
(CINT "GLU_OUTLINE_PATCH")
;(CINT "GLU_NURBS_ERROR")
(CINT "GLU_ERROR")
;(CINT "GLU_NURBS_BEGIN")
;(CINT "GLU_NURBS_BEGIN_EXT")
;(CINT "GLU_NURBS_VERTEX")
;(CINT "GLU_NURBS_VERTEX_EXT")
;(CINT "GLU_NURBS_NORMAL")
;(CINT "GLU_NURBS_NORMAL_EXT")
;(CINT "GLU_NURBS_COLOR")
;(CINT "GLU_NURBS_COLOR_EXT")
;(CINT "GLU_NURBS_TEXTURE_COORD")
;(CINT "GLU_NURBS_TEX_COORD_EXT")
;(CINT "GLU_NURBS_END")
;(CINT "GLU_NURBS_END_EXT")
;(CINT "GLU_NURBS_BEGIN_DATA")
;(CINT "GLU_NURBS_BEGIN_DATA_EXT")
;(CINT "GLU_NURBS_VERTEX_DATA")
;(CINT "GLU_NURBS_VERTEX_DATA_EXT")
;(CINT "GLU_NURBS_NORMAL_DATA")
;(CINT "GLU_NURBS_NORMAL_DATA_EXT")
;(CINT "GLU_NURBS_COLOR_DATA")
;(CINT "GLU_NURBS_COLOR_DATA_EXT")
;(CINT "GLU_NURBS_TEXTURE_COORD_DATA")
;(CINT "GLU_NURBS_TEX_COORD_DATA_EXT")
;(CINT "GLU_NURBS_END_DATA")
;(CINT "GLU_NURBS_END_DATA_EXT")
;(CINT "GLU_NURBS_ERROR1")
;(CINT "GLU_NURBS_ERROR2")
;(CINT "GLU_NURBS_ERROR3")
;(CINT "GLU_NURBS_ERROR4")
;(CINT "GLU_NURBS_ERROR5")
;(CINT "GLU_NURBS_ERROR6")
;(CINT "GLU_NURBS_ERROR7")
;(CINT "GLU_NURBS_ERROR8")
;(CINT "GLU_NURBS_ERROR9")
;(CINT "GLU_NURBS_ERROR10")
;(CINT "GLU_NURBS_ERROR11")
;(CINT "GLU_NURBS_ERROR12")
;(CINT "GLU_NURBS_ERROR13")
;(CINT "GLU_NURBS_ERROR14")
;(CINT "GLU_NURBS_ERROR15")
;(CINT "GLU_NURBS_ERROR16")
;(CINT "GLU_NURBS_ERROR17")
;(CINT "GLU_NURBS_ERROR18")
;(CINT "GLU_NURBS_ERROR19")
;(CINT "GLU_NURBS_ERROR20")
;(CINT "GLU_NURBS_ERROR21")
;(CINT "GLU_NURBS_ERROR22")
;(CINT "GLU_NURBS_ERROR23")
;(CINT "GLU_NURBS_ERROR24")
;(CINT "GLU_NURBS_ERROR25")
;(CINT "GLU_NURBS_ERROR26")
;(CINT "GLU_NURBS_ERROR27")
;(CINT "GLU_NURBS_ERROR28")
;(CINT "GLU_NURBS_ERROR29")
;(CINT "GLU_NURBS_ERROR30")
;(CINT "GLU_NURBS_ERROR31")
;(CINT "GLU_NURBS_ERROR32")
;(CINT "GLU_NURBS_ERROR33")
;(CINT "GLU_NURBS_ERROR34")
;(CINT "GLU_NURBS_ERROR35")
;(CINT "GLU_NURBS_ERROR36")
;(CINT "GLU_NURBS_ERROR37")
(CINT "GLU_AUTO_LOAD_MATRIX")
(CINT "GLU_CULLING")
(CINT "GLU_SAMPLING_TOLERANCE")
(CINT "GLU_DISPLAY_MODE")
(CINT "GLU_PARAMETRIC_TOLERANCE")
(CINT "GLU_SAMPLING_METHOD")
(CINT "GLU_U_STEP")
(CINT "GLU_V_STEP")
;(CINT "GLU_NURBS_MODE")
;(CINT "GLU_NURBS_MODE_EXT")
;(CINT "GLU_NURBS_TESSELLATOR")
;(CINT "GLU_NURBS_TESSELLATOR_EXT")
;(CINT "GLU_NURBS_RENDERER")
;(CINT "GLU_NURBS_RENDERER_EXT")
;(CINT "GLU_OBJECT_PARAMETRIC_ERROR")
;(CINT "GLU_OBJECT_PARAMETRIC_ERROR_EXT")
;(CINT "GLU_OBJECT_PATH_LENGTH")
;(CINT "GLU_OBJECT_PATH_LENGTH_EXT")
(CINT "GLU_PATH_LENGTH")
(CINT "GLU_PARAMETRIC_ERROR")
(CINT "GLU_DOMAIN_DISTANCE")
(CINT "GLU_MAP1_TRIM_2")
(CINT "GLU_MAP1_TRIM_3")
(CINT "GLU_POINT")
(CINT "GLU_LINE")
(CINT "GLU_FILL")
(CINT "GLU_SILHOUETTE")
(CINT "GLU_SMOOTH")
(CINT "GLU_FLAT")
(CINT "GLU_NONE")
(CINT "GLU_OUTSIDE")
(CINT "GLU_INSIDE")
(CINT "GLU_TESS_BEGIN")
(CINT "GLU_BEGIN")
(CINT "GLU_TESS_VERTEX")
(CINT "GLU_VERTEX")
(CINT "GLU_TESS_END")
(CINT "GLU_END")
(CINT "GLU_TESS_ERROR")
(CINT "GLU_TESS_EDGE_FLAG")
(CINT "GLU_EDGE_FLAG")
(CINT "GLU_TESS_COMBINE")
(CINT "GLU_TESS_BEGIN_DATA")
(CINT "GLU_TESS_VERTEX_DATA")
(CINT "GLU_TESS_END_DATA")
(CINT "GLU_TESS_ERROR_DATA")
(CINT "GLU_TESS_EDGE_FLAG_DATA")
(CINT "GLU_TESS_COMBINE_DATA")
(CINT "GLU_CW")
(CINT "GLU_CCW")
(CINT "GLU_INTERIOR")
(CINT "GLU_EXTERIOR")
(CINT "GLU_UNKNOWN")
(CINT "GLU_TESS_WINDING_RULE")
(CINT "GLU_TESS_BOUNDARY_ONLY")
(CINT "GLU_TESS_TOLERANCE")
;(CINT "GLU_TESS_ERROR1")
;(CINT "GLU_TESS_ERROR2")
;(CINT "GLU_TESS_ERROR3")
;(CINT "GLU_TESS_ERROR4")
;(CINT "GLU_TESS_ERROR5")
;(CINT "GLU_TESS_ERROR6")
;(CINT "GLU_TESS_ERROR7")
;(CINT "GLU_TESS_ERROR8")
;(CINT "GLU_TESS_MISSING_BEGIN_POLYGON")
;(CINT "GLU_TESS_MISSING_BEGIN_CONTOUR")
;(CINT "GLU_TESS_MISSING_END_POLYGON")
;(CINT "GLU_TESS_MISSING_END_CONTOUR")
;(CINT "GLU_TESS_COORD_TOO_LARGE")
;(CINT "GLU_TESS_NEED_COMBINE_CALLBACK")
(CINT "GLU_TESS_WINDING_ODD")
(CINT "GLU_TESS_WINDING_NONZERO")
(CINT "GLU_TESS_WINDING_POSITIVE")
(CINT "GLU_TESS_WINDING_NEGATIVE")
(CINT "GLU_TESS_WINDING_ABS_GEQ_TWO")
;(CINT "GLU_TESS_MAX_COORD")


(CINT-G5 "GDKGLEXT_MAJOR_VERSION")
(CINT-G5 "GDKGLEXT_MINOR_VERSION")
(CINT-G5 "GDKGLEXT_MICRO_VERSION")
(CINT-G5 "GDKGLEXT_INTERFACE_AGE")
(CINT-G5 "GDKGLEXT_BINARY_AGE")
(CINT-G "GDK_GL_SUCCESS")
(CINT-G "GDK_GL_ATTRIB_LIST_NONE")
(CINT-G "GDK_GL_USE_GL")
(CINT-G "GDK_GL_BUFFER_SIZE")
(CINT-G "GDK_GL_LEVEL")
(CINT-G "GDK_GL_RGBA")
(CINT-G "GDK_GL_DOUBLEBUFFER")
(CINT-G "GDK_GL_STEREO")
(CINT-G "GDK_GL_AUX_BUFFERS")
(CINT-G "GDK_GL_RED_SIZE")
(CINT-G "GDK_GL_GREEN_SIZE")
(CINT-G "GDK_GL_BLUE_SIZE")
(CINT-G "GDK_GL_ALPHA_SIZE")
(CINT-G "GDK_GL_DEPTH_SIZE")
(CINT-G "GDK_GL_STENCIL_SIZE")
(CINT-G "GDK_GL_ACCUM_RED_SIZE")
(CINT-G "GDK_GL_ACCUM_GREEN_SIZE")
(CINT-G "GDK_GL_ACCUM_BLUE_SIZE")
(CINT-G "GDK_GL_ACCUM_ALPHA_SIZE")
(CINT-G "GDK_GL_X_VISUAL_TYPE")
(CINT-G "GDK_GL_CONFIG_CAVEAT")
(CINT-G "GDK_GL_TRANSPARENT_TYPE")
(CINT-G "GDK_GL_TRANSPARENT_INDEX_VALUE")
(CINT-G "GDK_GL_TRANSPARENT_RED_VALUE")
(CINT-G "GDK_GL_TRANSPARENT_GREEN_VALUE")
(CINT-G "GDK_GL_TRANSPARENT_BLUE_VALUE")
(CINT-G "GDK_GL_TRANSPARENT_ALPHA_VALUE")
(CINT-G "GDK_GL_DRAWABLE_TYPE")
(CINT-G "GDK_GL_RENDER_TYPE")
(CINT-G "GDK_GL_X_RENDERABLE")
(CINT-G "GDK_GL_FBCONFIG_ID")
(CINT-G "GDK_GL_MAX_PBUFFER_WIDTH")
(CINT-G "GDK_GL_MAX_PBUFFER_HEIGHT")
(CINT-G "GDK_GL_MAX_PBUFFER_PIXELS")
(CINT-G "GDK_GL_VISUAL_ID")
(CINT-G5 "GDK_GL_SAMPLE_BUFFERS")
(CINT-G5 "GDK_GL_SAMPLES")
(CINT-G "GDK_GL_BAD_SCREEN")
(CINT-G "GDK_GL_BAD_ATTRIBUTE")
(CINT-G "GDK_GL_NO_EXTENSION")
(CINT-G "GDK_GL_BAD_VISUAL")
(CINT-G "GDK_GL_BAD_CONTEXT")
(CINT-G "GDK_GL_BAD_VALUE")
(CINT-G "GDK_GL_BAD_ENUM")
(CINT-G "GDK_GL_DONT_CARE")
(CINT-G "GDK_GL_RGBA_BIT")
(CINT-G "GDK_GL_COLOR_INDEX_BIT")
(CINT-G "GDK_GL_WINDOW_BIT")
(CINT-G "GDK_GL_PIXMAP_BIT")
(CINT-G "GDK_GL_PBUFFER_BIT")
(CINT-G "GDK_GL_NONE")
(CINT-G "GDK_GL_SLOW_CONFIG")
(CINT-G "GDK_GL_NON_CONFORMANT_CONFIG")
(CINT-G "GDK_GL_TRUE_COLOR")
(CINT-G "GDK_GL_DIRECT_COLOR")
(CINT-G "GDK_GL_PSEUDO_COLOR")
(CINT-G "GDK_GL_STATIC_COLOR")
(CINT-G "GDK_GL_GRAY_SCALE")
(CINT-G "GDK_GL_STATIC_GRAY")
(CINT-G "GDK_GL_TRANSPARENT_RGB")
(CINT-G "GDK_GL_TRANSPARENT_INDEX")
(CINT-G "GDK_GL_PRESERVED_CONTENTS")
(CINT-G "GDK_GL_LARGEST_PBUFFER")
(CINT-G "GDK_GL_PBUFFER_HEIGHT")
(CINT-G "GDK_GL_PBUFFER_WIDTH")
(CINT-G "GDK_GL_WIDTH")
(CINT-G "GDK_GL_HEIGHT")
(CINT-G "GDK_GL_EVENT_MASK")
(CINT-G "GDK_GL_RGBA_TYPE")
(CINT-G "GDK_GL_COLOR_INDEX_TYPE")
(CINT-G "GDK_GL_SCREEN")
(CINT-G "GDK_GL_PBUFFER_CLOBBER_MASK")
(CINT-G "GDK_GL_DAMAGED")
(CINT-G "GDK_GL_SAVED")
(CINT-G "GDK_GL_WINDOW")
(CINT-G "GDK_GL_PBUFFER")
(CINT-G "GDK_GL_FRONT_LEFT_BUFFER_BIT")
(CINT-G "GDK_GL_FRONT_RIGHT_BUFFER_BIT")
(CINT-G "GDK_GL_BACK_LEFT_BUFFER_BIT")
(CINT-G "GDK_GL_BACK_RIGHT_BUFFER_BIT")
(CINT-G "GDK_GL_AUX_BUFFERS_BIT")
(CINT-G "GDK_GL_DEPTH_BUFFER_BIT")
(CINT-G "GDK_GL_STENCIL_BUFFER_BIT")
(CINT-G "GDK_GL_ACCUM_BUFFER_BIT")
;;; removed 0.7.0 (CINT-G "GDK_GL_VENDOR")
;;;               (CINT-G "GDK_GL_VERSION")
;;;               (CINT-G "GDK_GL_EXTENSIONS")
(CINT-G "GDK_GL_MODE_RGB")
(CINT-G "GDK_GL_MODE_RGBA")
(CINT-G "GDK_GL_MODE_INDEX")
(CINT-G "GDK_GL_MODE_SINGLE")
(CINT-G "GDK_GL_MODE_DOUBLE")
(CINT-G "GDK_GL_MODE_ACCUM")
(CINT-G "GDK_GL_MODE_ALPHA")
(CINT-G "GDK_GL_MODE_DEPTH")
(CINT-G "GDK_GL_MODE_STENCIL")
(CINT-G "GDK_GL_MODE_STEREO")
(CINT-G "GDK_GL_MODE_MULTISAMPLE")
;;; removed 0.7.0 (CINT-G "GDK_GL_MODE_LUMINANCE")
(CINT-G5 "GTKGLEXT_MAJOR_VERSION")
(CINT-G5 "GTKGLEXT_MINOR_VERSION")
(CINT-G5 "GTKGLEXT_MICRO_VERSION")
(CINT-G5 "GTKGLEXT_INTERFACE_AGE")
(CINT-G5 "GTKGLEXT_BINARY_AGE")

(CFNC-G "gboolean gdk_gl_query_extension void")
(CFNC-G "gboolean gdk_gl_query_version int* major int* minor")
(CFNC-G "gboolean gdk_gl_query_gl_extension char* extension")
(CFNC-G "GdkGLConfig* gdk_gl_config_new int* attrib_list")
(CFNC-G "GdkGLConfig* gdk_gl_config_new_by_mode GdkGLConfigMode mode")
(CFNC-G "gboolean gdk_gl_config_get_attrib GdkGLConfig* glconfig int attribute int* [value]")
(CFNC-G "GdkColormap* gdk_gl_config_get_colormap GdkGLConfig* glconfig")
(CFNC-G "GdkVisual* gdk_gl_config_get_visual GdkGLConfig* glconfig")
(CFNC-G "gint gdk_gl_config_get_depth GdkGLConfig* glconfig")
(CFNC-G "gboolean gdk_gl_config_is_rgba GdkGLConfig* glconfig")
(CFNC-G "gboolean gdk_gl_config_is_double_buffered GdkGLConfig* glconfig")
(CFNC-G "gboolean gdk_gl_config_is_stereo GdkGLConfig* glconfig")
(CFNC-G "gboolean gdk_gl_config_has_alpha GdkGLConfig* glconfig")
(CFNC-G "gboolean gdk_gl_config_has_depth_buffer GdkGLConfig* glconfig")
(CFNC-G "gboolean gdk_gl_config_has_stencil_buffer GdkGLConfig* glconfig")
(CFNC-G "gboolean gdk_gl_config_has_accum_buffer GdkGLConfig* glconfig")
(CFNC-G "GdkGLDrawable* gdk_gl_context_get_gl_drawable GdkGLContext* glcontext")
(CFNC-G "GdkGLConfig* gdk_gl_context_get_gl_config GdkGLContext* glcontext")
(CFNC-G "GdkGLContext* gdk_gl_context_get_share_list GdkGLContext* glcontext")
(CFNC-G "gboolean gdk_gl_context_is_direct GdkGLContext* glcontext")
(CFNC-G "int gdk_gl_context_get_render_type GdkGLContext* glcontext")
;;; removed 0.7.0 (CFNC-G "GdkColormap* gdk_gl_context_get_colormap GdkGLContext* glcontext")
(CFNC-G "gboolean gdk_gl_drawable_make_current GdkGLDrawable* gldrawable GdkGLContext* glcontext")
(CFNC-G "gboolean gdk_gl_drawable_is_double_buffered GdkGLDrawable* gldrawable")
(CFNC-G "void gdk_gl_drawable_swap_buffers GdkGLDrawable* gldrawable")
(CFNC-G "void gdk_gl_drawable_wait_gl GdkGLDrawable* gldrawable")
(CFNC-G "void gdk_gl_drawable_wait_gdk GdkGLDrawable* gldrawable")
(CFNC-G5 "gboolean gdk_gl_drawable_gl_begin GdkGLDrawable* gldrawable GdkGLContext* glcontext")
(CFNC-G5 "void gdk_gl_drawable_gl_end GdkGLDrawable* gldrawable")
(CFNC-G "GdkGLConfig* gdk_gl_drawable_get_gl_config GdkGLDrawable* gldrawable")
(CFNC-G "void gdk_gl_drawable_get_size GdkGLDrawable* gldrawable gint* [width] gint* [height]")
(CFNC-G "GdkGLPixmap* gdk_gl_pixmap_new GdkGLConfig* glconfig GdkPixmap* pixmap int* attrib_list")
(CFNC-G "GdkPixmap* gdk_gl_pixmap_get_pixmap GdkGLPixmap* glpixmap")
(CFNC-G "GdkGLPixmap* gdk_pixmap_set_gl_capability GdkPixmap* pixmap GdkGLConfig* glconfig int* attrib_list")
(CFNC-G "void gdk_pixmap_unset_gl_capability GdkPixmap* pixmap")
(CFNC-G "gboolean gdk_pixmap_is_gl_capable GdkPixmap* pixmap")
(CFNC-G "GdkGLPixmap* gdk_pixmap_get_gl_pixmap GdkPixmap* pixmap")
(CFNC-G "GdkGLWindow* gdk_gl_window_new GdkGLConfig* glconfig GdkWindow* window int* attrib_list")
(CFNC-G "GdkWindow* gdk_gl_window_get_window GdkGLWindow* glwindow")
(CFNC-G "GdkGLWindow* gdk_window_set_gl_capability GdkWindow* window GdkGLConfig* glconfig int* attrib_list")
(CFNC-G "void gdk_window_unset_gl_capability GdkWindow* window")
(CFNC-G "gboolean gdk_window_is_gl_capable GdkWindow* window")
(CFNC-G "GdkGLWindow* gdk_window_get_gl_window GdkWindow* window")
(CFNC-G "PangoFont* gdk_gl_font_use_pango_font PangoFontDescription* font_desc int first int count int list_base")
(CFNC-G "gboolean gtk_widget_set_gl_capability GtkWidget* widget GdkGLConfig* glconfig GdkGLContext* share_list gboolean direct int render_type")
(CFNC-G "gboolean gtk_widget_is_gl_capable GtkWidget* widget")
(CFNC-G "GdkGLConfig* gtk_widget_get_gl_config GtkWidget* widget")
(CFNC-G "GdkGLContext* gtk_widget_get_gl_context GtkWidget* widget")
(CFNC-G "GdkGLWindow* gtk_widget_get_gl_window GtkWidget* widget")
