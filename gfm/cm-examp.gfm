#! /usr/bin/env gforth-fast
\ cm-examp.gfm -- (cm-2.4.0/etc/examples) intro.cm, reich.cm -*- forth -*-

\ Copyright (C) 2003--2005 Michael Scholz

\ Author: Michael Scholz <scholz-micha@gmx.de>
\ Created: Sun Aug 17 02:23:42 CEST 2003
\ Last: Thu Jan 13 17:07:29 CET 2005
\ Ident: $Id: cm-examp.gfm,v 1.67 2005/01/13 16:07:48 mike Exp $

\ This file is part of GFM Gforth Music.

\ This program is free software; you can redistribute it and/or
\ modify it under the terms of the GNU General Public License as
\ published by the Free Software Foundation; either version 2 of
\ the License, or (at your option) any later version.

\ This program is distributed in the hope that it will be
\ useful, but WITHOUT ANY WARRANTY; without even the implied
\ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
\ PURPOSE.  See the GNU General Public License for more details.

\ You should have received a copy of the GNU General Public
\ License along with this program; if not, write to the Free
\ Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
\ MA 02111-1307 USA

\ Commentary:

\ These examples are found in Rick Taube's CM Common Music package
\ (cm-2.4.0/etc/examples).  Examples are taken from intro.cm and
\ reich.cm.

\ cm-inst ( start dur freq amp fm-index -- )
\ sinus ( len cycl low hi rhy dur amp fm-index -- )
\ simul ( num -- )
\ sierpinski ( key ints dur amp depth -- )
\ drunkard ( num -- )
\ octie ( num -- )
\ cage ( offset -- )
\ piano-phase ( trope pulse amp stay move -- )

\ Code:

0 assert-level !

require gfm.fs

vct[ 0e 0e 20e 1e 40e 0.6e 90e 0.5e 100e 0e ] constant amp-env
: cm-inst ( start dur freq amp index -- ) :fm-index :amp-env amp-env fm-violin ;

: sinus { len f: cycl f: low f: hi f: rhy f: dur f: amp f: fm-index }
    len 0 do
	i s>f len s>f f/ two-pi f* cycl f* fsin -1e 1e low hi rescale fround f>s keynum>hertz
	now@ dur frot amp fm-index cm-inst
	rhy wait
    loop
;
event: sinus1 ( -- ) 80 4e 20e 100e 0.1e 0.1e 0.5e 1.5e sinus ;event
event: sinus2 ( -- ) 60 5.7e 50e 80e 0.1e 0.1e 0.5e 0.5e sinus ;event

: simul { num -- }
    vct[ |C4 |D4 |Ef4 |F4 |G4 |Af4 |Bf4 |C5 ] { pat-ary }
    vct[ 0e 0.2e 5e 0.8e ] { amp-ary }
    array[ -24 -12 12 24 ] { oct-ary }
    0.1e { f: rhy } 0e { f: freq }
    num 0 do
	pat-ary cycle to freq
	now@				\ start
	rhy 1.25e f*			\ dur
	freq				\ freq
	i 6 mod s>f amp-ary interp 0.5e f- \ amp
	1e cm-inst
	now@				\ start
	rhy 1.25e f*			\ dur
	freq hertz>keynum oct-ary rnd-pick + keynum>hertz \ freq
	i 6 mod s>f amp-ary interp 0.5e f- \ amp
	1e cm-inst
	rhy wait
    loop
    pat-ary free-vct
    amp-ary free-vct
    oct-ary free-array
;
event: simul1 ( -- ) 40 simul ;event

: sierpinski recursive { key ints f: dur f: amp s-depth }
    ints length s>f { f: flen }
    ints each
	key + { keyn }
	s-depth 1 > if
	    now@ { f: cur }
	    keyn 12 +			 \ key
	    ints			 \ ints
	    dur flen f/			 \ dur
	    amp				 \ amp
	    s-depth 1-			 \ depth
	    sierpinski
	    cur now!
	then
	now@ dur keyn keynum>hertz amp 2e cm-inst
	dur wait
    end-each
;
event: sierp1 ( -- ) |A0 hertz>keynum array[ 0 7 5 ] 3e 0.3e 4 sierpinski ;event
event: sierp2 ( -- ) |A0 hertz>keynum array[ 0 -1 2 13 ] 6e 0.3e 4 sierpinski ;event

: drunkard { num -- }
    vct[ |Q |S |S |A |A |A ] { rpat }
    vct[ 0e 1e 0.5e 0.5e 1e 1e ] { dur-ary }
    60 { key }
    num 0 do
	0.2e 0.4e fbetween { f: amp }
	i s>f num s>f f/ dur-ary interp rpat rnd-pick f2/ f* { f: dur }
	now@ dur key keynum>hertz amp 2e cm-inst
	0.4e ?odds if
	    now@
	    dur 1.5e f*
	    0.5e ?odds if key 11 + else key 13 - then keynum>hertz
	    amp 3e cm-inst
	then
	key 6 30 90 drunk to key
	dur wait
    loop
    rpat free-vct
    dur-ary free-vct
;
event: drunkard1 ( -- ) 100 drunkard ;event

: octie { num -- }
    array[ -24 -12 0 12 24 ] rnd-pick { oct }
    vct[ |C4 |D4 |Ef4 |F4 |G4 |Af4 |B4 ] { pitches }
    vct[ 0e 0.2e 5e 0.8e ] { amp-ary }
    0.1e { f: rhy }
    rhy 1.25e f* { f: dur }
    num 0 do
	now@
	dur
	pitches cycle hertz>keynum oct + keynum>hertz
	i 6 mod s>f amp-ary interp
	1e cm-inst
	rhy wait
    loop
    pitches free-vct
    amp-ary free-vct
;
event: octie1 ( -- ) 40 octie ;event

: cage { offset -- }
    vct[ |S |A |T |T ]    { rhy-ary }
    vct[ 0e 0.5e 90e 4e ] { ary-interp }
    0e { f: weight }
    100 0 do
	rhy-ary rnd-pick { f: rhy }
	weight |G3
	weight |A3
	1e     |Bf3
	weight |C3
	1e     |D4
	weight |E4
	1e     |F4
	weight |G4 16 >vct make-rnd { rn }
	i s>f ary-interp interp to weight
	now@ rhy rn rnd-randomize f>s offset + keynum>hertz 0.3e 1e cm-inst
	rn gen-free
	rhy wait
    loop
    rhy-ary free-vct
    ary-interp free-vct
;
event: cage4 ( -- )
    65e tempo!
    now@ { f: cur }
    25 -12 do i cage now@ cur now! 12 +loop
    now! 3 0 do now@ fmax now! loop
    60e tempo!
;event

: piano-phase { trope f: pulse f: amp stay mv -- }
    trope length { len }
    pulse f2* 0.01e f- { f: dur }
    len len * stay mv + * { stop }
    now@ { f: cur }
    trope vct-copy { trp1 }
    stop 0 do
	now@ dur trp1 cycle amp 1.5e cm-inst
	pulse wait
    loop
    trp1 gen-free
    cur now!
    len stay * { ary1-len }
    len mv * { ary2-len }
    ary1-len ary2-len + make-vct { tempo }
    1e tempo vct-fill!
    ary2-len 1- s>f ary2-len s>f f/ { f: scl }
    tempo length ary2-len do scl i tempo vct! loop
    trope vct-copy { trp2 }
    stop 0 do
	now@ dur trp2 cycle amp 0.5e cm-inst
	pulse tempo cycle f* wait
    loop
    trp2 gen-free
    tempo gen-free
;
event: reich ( -- )
    vct[ |E4 |Fs4 |B4 |Cs5 |D5 |Fs4 |E4 |Cs5 |B4 |Fs4 |D5 |Cs5 ] { pnotes }
    pnotes 0.15e 0.3e 5 3 piano-phase
    pnotes free-vct
;event

lambda:
    .sndversion
    sinus1 1e wait
    sinus2 1e wait
    simul1 1e wait
    sierp1 1e wait
    sierp2 1e wait
    drunkard1 1e wait
    octie1 1e wait
    octie1 1e wait
    octie1 1e wait
    cage4 1e wait
    reich
;
:play             true
:channels         2
:reverb           *clm-use-csndlib* [if] ' freeverb [else] ' jl-reverb [then]
:notehook         nil
:output           *clm-search-list* $" cm-examp.snd" $+
:reverb-file-name *clm-search-list* $" cm-examp.reverb" $+
:comment make-default-comment $"  -- cm-2.4.0/etc/examples/intro.cm" $+ with-sound

script? [if] bye [then]

\ cm-examp.gfm ends here
