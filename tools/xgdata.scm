;;; [] for ref args, @ for ptr args that can be null, # are optional (default #f)
;;; || for ref arg list, {} for ref arg int as list len
;;; & in struct for settable field

(CFNC "gboolean g_unichar_validate gunichar ch")
(CFNC "gboolean g_unichar_isalnum gunichar c")
(CFNC "gboolean g_unichar_isalpha gunichar c")
(CFNC "gboolean g_unichar_iscntrl gunichar c")
(CFNC "gboolean g_unichar_isdefined gunichar c")
(CFNC "gboolean g_unichar_isdigit gunichar c")
(CFNC "gboolean g_unichar_isgraph gunichar c")
(CFNC "gboolean g_unichar_islower gunichar c")
(CFNC "gboolean g_unichar_ismark gunichar c")
(CFNC "gboolean g_unichar_isprint gunichar c")
(CFNC "gboolean g_unichar_ispunct gunichar c")
(CFNC "gboolean g_unichar_isspace gunichar c")
(CFNC "gboolean g_unichar_istitle gunichar c")
(CFNC "gboolean g_unichar_isupper gunichar c")
(CFNC "gboolean g_unichar_isxdigit gunichar c")
(CFNC "gboolean g_unichar_iswide gunichar c")
(CFNC "gboolean g_unichar_iswide_cjk gunichar c")
(CFNC "gboolean g_unichar_iszerowidth gunichar c")
(CFNC "gunichar g_unichar_toupper gunichar c")
(CFNC "gunichar g_unichar_tolower gunichar c")
(CFNC "gunichar g_unichar_totitle gunichar c")
(CFNC "gint g_unichar_digit_value gunichar c")
(CFNC "gint g_unichar_xdigit_value gunichar c")
;(CFNC "gboolean g_unichar_compose gunichar a gunichar b gunichar* [ch]")
;(CFNC "gboolean g_unichar_decompose gunichar ch gunichar* a gunichar* [b]")
;(CFNC "gsize g_unichar_fully_decompose gunichar ch gboolean compat gunichar* [result] gsize result_len")
(CFNC "gint g_unichar_combining_class gunichar uc")
(CFNC "void g_unicode_canonical_ordering gunichar* string gsize len")
;(CFNC "gunichar* g_unicode_canonical_decomposition gunichar ch gsize* [result_len]")
;(CFNC "gboolean g_unichar_get_mirror_char gunichar ch gunichar* mirrored_ch")

(CFNC "gunichar g_utf8_get_char gchar* p" 'const)
(CFNC "gunichar g_utf8_get_char_validated gchar* p gssize max_len" 'const)
(CFNC "gchar* g_utf8_prev_char gchar* p" 'const)
(CFNC "gchar* g_utf8_find_next_char gchar* p gchar* end" 'const)
(CFNC "gchar* g_utf8_find_prev_char gchar* str gchar* p" 'const)
(CFNC "glong g_utf8_strlen gchar* p gssize max" 'const)
;(CFNC "gchar* g_utf8_strncpy gchar* dest gchar* src gsize n" 'const)
(CFNC "gchar* g_utf8_strchr gchar* p gssize len gunichar c" 'const)
(CFNC "gchar* g_utf8_strrchr gchar* p gssize len gunichar c" 'const)
(CFNC "gchar* g_utf8_strreverse gchar* str gssize len" 'const)
;(CFNC "gchar* g_utf8_substring gchar* str glong start_pos glong end_pos" 'const)
(CFNC "gboolean g_utf8_validate gchar* str gssize max_len gchar** [end]" 'const)
(CFNC "gchar* g_utf8_strup gchar* str gssize len" 'const)
(CFNC "gchar* g_utf8_strdown gchar* str gssize len" 'const)
(CFNC "gchar* g_utf8_casefold gchar* str gssize len" 'const)
(CFNC "gchar* g_utf8_normalize gchar* str gssize len GNormalizeMode mode" 'const)
(CFNC "gint g_utf8_collate gchar* str1 gchar* str2" 'const)
(CFNC "gchar* g_utf8_collate_key gchar* str gssize len" 'const)
(CFNC "gchar* g_utf8_collate_key_for_filename gchar* str gssize len" 'const)


(CINT "G_NORMALIZE_DEFAULT" "GNormalizeMode")
(CINT "G_NORMALIZE_NFD" "GNormalizeMode")
(CINT "G_NORMALIZE_DEFAULT_COMPOSE" "GNormalizeMode")
(CINT "G_NORMALIZE_NFC" "GNormalizeMode")
(CINT "G_NORMALIZE_ALL" "GNormalizeMode")
(CINT "G_NORMALIZE_NFKD" "GNormalizeMode")
(CINT "G_NORMALIZE_ALL_COMPOSE" "GNormalizeMode")
(CINT "G_NORMALIZE_NFKC" "GNormalizeMode")

;gunichar is int

;(CFNC "gchar* g_type_name GType type")
;(CFNC "GQuark g_type_qname GType type")
;(CFNC "GType g_type_from_name gchar* name")
;(CFNC "GType g_type_parent GType type")
;(CFNC "gboolean g_type_is_a GType type GType is_a_type")
(CINT "G_SIGNAL_RUN_FIRST" "GSignalFlags")
(CINT "G_SIGNAL_RUN_LAST" "GSignalFlags")
(CINT "G_SIGNAL_RUN_CLEANUP" "GSignalFlags")
(CINT "G_SIGNAL_NO_RECURSE" "GSignalFlags")
(CINT "G_SIGNAL_DETAILED" "GSignalFlags")
(CINT "G_SIGNAL_ACTION" "GSignalFlags")
(CINT "G_SIGNAL_NO_HOOKS" "GSignalFlags")
(CINT "G_CONNECT_AFTER" "GConnectFlags")
(CINT "G_CONNECT_SWAPPED" "GConnectFlags")
(CINT "G_SIGNAL_MATCH_ID" "GSignalMatchType")
(CINT "G_SIGNAL_MATCH_DETAIL" "GSignalMatchType")
(CINT "G_SIGNAL_MATCH_CLOSURE" "GSignalMatchType")
(CINT "G_SIGNAL_MATCH_FUNC" "GSignalMatchType")
(CINT "G_SIGNAL_MATCH_DATA" "GSignalMatchType")
(CINT "G_SIGNAL_MATCH_UNBLOCKED" "GSignalMatchType")
(CFNC "GClosure* g_cclosure_new GCallback func lambda_data @func_info GClosureNotify @destroy_data")
(CFNC "guint g_signal_newv gchar* signal_name GType itype GSignalFlags signal_flags GClosure* @class_closure GSignalAccumulator accumulator gpointer accu_data GSignalCMarshaller c_marshaller GType return_type guint n_params GType* param_types")
;;;(CFNC "guint g_signal_new_valist gchar* signal_name GType itype GSignalFlags signal_flags GClosure* @class_closure GSignalAccumulator accumulator gpointer accu_data GSignalCMarshaller c_marshaller GType return_type guint n_params va_list args")
;;; (CFNC "guint g_signal_new gchar* signal_name GType itype GSignalFlags signal_flags guint class_offset GSignalAccumulator accumulator gpointer accu_data GSignalCMarshaller c_marshaller GType return_type guint n_params ...")
;; typedef GClosureMarshal GSignalCMarshaller;
;; typedef void (*GClosureNotify) (gpointer data, GClosure *closure)
;; typedef void (*GClosureMarshal)(GClosure *closure,GValue *return_value,guint n_param_values,const GValue *param_values,gpointer invocation_hint,gpointer marshal_data)
;;; (CFNC "void g_signal_emitv GValue* instance_and_params guint signal_id GQuark detail GValue* [return_value]")
;;; the [retval] business causes type cast trouble with GValue
;;;;(CFNC "void g_signal_emit_valist gpointer instance guint signal_id GQuark detail va_list var_args")
;;; (CFNC "void g_signal_emit gpointer instance guint signal_id GQuark detail ...")
;;; (CFNC "void g_signal_emit_by_name gpointer instance gchar* detailed_signal ...")
(CFNC "guint g_signal_lookup gchar* name GType itype")
(CFNC "gchar* g_signal_name guint signal_id")
(CFNC "void g_signal_query guint signal_id GSignalQuery* query")
(CFNC "guint* g_signal_list_ids GType itype guint* n_ids")
(CFNC "gboolean g_signal_parse_name gchar* detailed_signal GType itype guint* [signal_id_p] GQuark* [detail_p] gboolean force_detail_quark")
(CFNC "GSignalInvocationHint* g_signal_get_invocation_hint gpointer instance")
(CFNC "void g_signal_stop_emission gpointer instance guint signal_id GQuark detail")
(CFNC "void g_signal_stop_emission_by_name gpointer instance gchar* detailed_signal")
(CFNC "gulong g_signal_add_emission_hook guint signal_id GQuark quark GSignalEmissionHook hook_func lambda_data @func_info GtkDestroyNotify data_destroy")
(CFNC "void g_signal_remove_emission_hook guint signal_id gulong hook_id")
(CFNC "gboolean g_signal_has_handler_pending gpointer instance guint signal_id GQuark detail gboolean may_be_blocked")
(CFNC "gulong g_signal_connect_closure_by_id gpointer instance guint signal_id GQuark detail GClosure* @closure gboolean after")
(CFNC "gulong g_signal_connect_closure gpointer instance gchar* detailed_signal GClosure* @closure gboolean after")
(CFNC "gulong g_signal_connect_data gpointer instance gchar* detailed_signal GCallback func lambda_data @func_info GClosureNotify @destroy_data GConnectFlags connect_flags")

;; these are macros in glib/gobject/gsignal.h, but we can't use them directly here due to infinite type troubles
;; (CFNC "gulong g_signal_connect gpointer instance gchar* detailed_signal GCallback func lambda_data @func_info")
;; (CFNC "gulong g_signal_connect_after gpointer instance gchar* detailed_signal GCallback func lambda_data @func_info")
;; (CFNC "gulong g_signal_connect_swapped gpointer instance gchar* detailed_signal GCallback func lambda_data @func_info")
;; (CFNC "guint g_signal_handlers_disconnect_by_func gpointer instance GCallback func lambda_data @func_info")
;; (CFNC "guint g_signal_handlers_block_by_func gpointer instance GCallback func lambda_data @func_info")
;; (CFNC "guint g_signal_handlers_unblock_by_func gpointer instance GCallback func lambda_data @func_info")

(CFNC "void g_signal_handler_block gpointer instance gulong handler_id")
(CFNC "void g_signal_handler_unblock gpointer instance gulong handler_id")
(CFNC "void g_signal_handler_disconnect gpointer instance gulong handler_id")
(CFNC "gboolean g_signal_handler_is_connected gpointer instance gulong handler_id")
(CFNC "gulong g_signal_handler_find gpointer instance GSignalMatchType mask guint signal_id GQuark detail GClosure* @closure gpointer func gpointer data")
(CFNC "guint g_signal_handlers_block_matched gpointer instance GSignalMatchType mask guint signal_id GQuark detail GClosure* @closure gpointer func gpointer data")
(CFNC "guint g_signal_handlers_unblock_matched gpointer instance GSignalMatchType mask guint signal_id GQuark detail GClosure* @closure gpointer func gpointer data")
(CFNC "guint g_signal_handlers_disconnect_matched gpointer instance GSignalMatchType mask guint signal_id GQuark detail GClosure* @closure gpointer func gpointer data")
(CFNC "void g_signal_handlers_destroy gpointer instance")
;(CFNC "void _g_signals_destroy GType itype")
(CFNC "gpointer g_object_ref gpointer object")
(CFNC "void g_object_unref gpointer object")
;;; (CCAST-gtk2 "GDK_COLORMAP(object)" "GdkColormap*")
;;; (CCHK-gtk2 "GDK_IS_COLORMAP(object)" "GdkColormap*")
;;;;(CFNC "GType gdk_colormap_get_type void")

;;; 3.22.3 (CFNC "GdkVisual* gdk_visual_get_system void") ; -- moved ahead of the gtk2 stuff -- use gdk_screen_get_system_visual
;;; (CFNC-gtk2 "GdkColor* gdk_color_copy GdkColor* color")

;;; (CFNC-gtk2 "GdkColormap* gdk_colormap_new GdkVisual* visual gboolean allocate")
;;; (CFNC-gtk2 "GdkColormap* gdk_colormap_get_system void")
;;; (CFNC-gtk2 "gint gdk_colormap_alloc_colors GdkColormap* colormap GdkColor* colors gint ncolors gboolean writeable gboolean best_match gboolean* [success]")
;;; (CFNC-gtk2 "gboolean gdk_colormap_alloc_color GdkColormap* colormap GdkColor* color gboolean writeable gboolean best_match")
;;; 2.91.0 ;(CFNC "void gdk_colormap_free_colors GdkColormap* colormap GdkColor* colors gint ncolors")
;can't currently pass the color struct as array element
;;; 2.90.6 (CFNC "void gdk_colormap_query_color GdkColormap* colormap gulong pixel GdkColor* result")
;;; (CFNC-gtk2 "GdkVisual* gdk_colormap_get_visual GdkColormap* colormap")

;;; (CFNC-gtk2 "void gdk_color_free GdkColor* color")
;;; (CFNC-gtk2 "gint gdk_color_parse gchar* spec GdkColor* color")
;;; (CFNC-gtk2 "guint gdk_color_hash GdkColor* colora")
;;; (CFNC-gtk2 "gboolean gdk_color_equal GdkColor* colora GdkColor* colorb")
;;;;(CFNC "GType gdk_color_get_type void")
;;; 3.93.0 (CINT "GDK_X_CURSOR" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_ARROW" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_BASED_ARROW_DOWN" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_BASED_ARROW_UP" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_BOAT" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_BOGOSITY" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_BOTTOM_LEFT_CORNER" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_BOTTOM_RIGHT_CORNER" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_BOTTOM_SIDE" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_BOTTOM_TEE" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_BOX_SPIRAL" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_CENTER_PTR" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_CIRCLE" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_CLOCK" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_COFFEE_MUG" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_CROSS" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_CROSS_REVERSE" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_CROSSHAIR" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_DIAMOND_CROSS" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_DOT" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_DOTBOX" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_DOUBLE_ARROW" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_DRAFT_LARGE" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_DRAFT_SMALL" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_DRAPED_BOX" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_EXCHANGE" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_FLEUR" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_GOBBLER" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_GUMBY" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_HAND1" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_HAND2" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_HEART" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_ICON" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_IRON_CROSS" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_LEFT_PTR" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_LEFT_SIDE" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_LEFT_TEE" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_LEFTBUTTON" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_LL_ANGLE" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_LR_ANGLE" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_MAN" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_MIDDLEBUTTON" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_MOUSE" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_PENCIL" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_PIRATE" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_PLUS" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_QUESTION_ARROW" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_RIGHT_PTR" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_RIGHT_SIDE" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_RIGHT_TEE" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_RIGHTBUTTON" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_RTL_LOGO" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_SAILBOAT" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_SB_DOWN_ARROW" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_SB_H_DOUBLE_ARROW" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_SB_LEFT_ARROW" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_SB_RIGHT_ARROW" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_SB_UP_ARROW" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_SB_V_DOUBLE_ARROW" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_SHUTTLE" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_SIZING" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_SPIDER" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_SPRAYCAN" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_STAR" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_TARGET" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_TCROSS" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_TOP_LEFT_ARROW" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_TOP_LEFT_CORNER" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_TOP_RIGHT_CORNER" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_TOP_SIDE" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_TOP_TEE" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_TREK" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_UL_ANGLE" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_UMBRELLA" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_UR_ANGLE" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_WATCH" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_XTERM" "GdkCursorType")
;;; 3.93.0 (CINT "GDK_LAST_CURSOR " "GdkCursorType")
;;; 2.91.0 (CINT "GDK_CURSOR_IS_PIXMAP" "GdkCursorType")

;;; 3.96.0 (CINT "GDK_FILTER_CONTINUE" "GdkFilterReturn")
;;; 3.96.0 (CINT "GDK_FILTER_TRANSLATE" "GdkFilterReturn")
;;; 3.96.0 (CINT "GDK_FILTER_REMOVE" "GdkFilterReturn")


;;; these were missed at some point:
;;; 3.93.0 (CFNC "GdkCursor* gdk_cursor_new_for_display GdkDisplay* display GdkCursorType cursor_type")
;;; 3.93.0 (CFNC "GdkDisplay* gdk_cursor_get_display GdkCursor* cursor")

;;;;(CFNC "GType gdk_cursor_get_type void")
;;; 3.15.2 (CFNC "GdkCursor* gdk_cursor_new GdkCursorType cursor_type")
;;; 2.91.0 (CFNC "GdkCursor* gdk_cursor_new_from_pixmap GdkPixmap* source GdkPixmap* mask GdkColor* fg GdkColor* bg gint x gint y")
;;; (CFNC-gtk2 "GdkCursor* gdk_cursor_ref GdkCursor* cursor")
;;; (CFNC-gtk2 "void gdk_cursor_unref GdkCursor* cursor")
;;; 3.96.0 (CINT "GDK_ACTION_DEFAULT" "GdkDragAction")
(CINT "GDK_ACTION_COPY" "GdkDragAction")
(CINT "GDK_ACTION_MOVE" "GdkDragAction")
(CINT "GDK_ACTION_LINK" "GdkDragAction")
;;; 3.96.0 (CINT "GDK_ACTION_PRIVATE" "GdkDragAction")
(CINT "GDK_ACTION_ASK" "GdkDragAction")

;;; ;;; 3.9.0 (CINT-gtk2 "GDK_DRAG_PROTO_MOTIF" "GdkDragProtocol")
;;; (CINT-gtk2 "GDK_DRAG_PROTO_XDND" "GdkDragProtocol")
;;; (CINT-gtk2 "GDK_DRAG_PROTO_ROOTWIN" "GdkDragProtocol")
;;; (CINT-gtk2 "GDK_DRAG_PROTO_NONE" "GdkDragProtocol")
;;; (CINT-gtk2 "GDK_DRAG_PROTO_WIN32_DROPFILES" "GdkDragProtocol")
;;; (CINT-gtk2 "GDK_DRAG_PROTO_OLE2" "GdkDragProtocol")
;;; (CINT-gtk2 "GDK_DRAG_PROTO_LOCAL" "GdkDragProtocol")

;;; 3.96.0 (CCAST "GDK_DRAG_CONTEXT(object)" "GdkDrag*")
;;; 3.96.0 (CCHK "GDK_IS_DRAG_CONTEXT(object)" "GdkDrag*")
;;;;(CFNC "GType gdk_drag_context_get_type void")
;;; 3.96.0 (CFNC "void gdk_drag_status GdkDrag* context GdkDragAction action guint32 time")
;;; 3.96.0 (CFNC "void gdk_drop_reply GdkDrag* context gboolean ok guint32 time")
;;; 3.94.0 (CFNC "void gdk_drop_finish GdkDrag* context gboolean success guint32 time")
;;; 3.93.0 (CFNC "GdkAtom gdk_drag_get_selection GdkDrag* context")
;;; (CFNC-gtk2 "GdkDrag* gdk_drag_context_new void")
;;; (CFNC-gtk2 "guint32 gdk_drag_get_protocol guint32 xid GdkDragProtocol* [protocol]")
;;; 3.93.0 (CFNC "void gdk_drag_drop GdkDrag* context guint32 time")
;;; 3.93.0 (CFNC "void gdk_drag_abort GdkDrag* context guint32 time")
;;; (CCAST-gtk2 "GDK_DRAWABLE(object)" "GdkDrawable*")
;;; (CCHK-gtk2 "GDK_IS_DRAWABLE(object)" "GdkDrawable*")

;;; (CFNC-gtk2 "cairo_t* gdk_cairo_create GdkDrawable* drawable") ;-- moved up

;;;;(CFNC "GType gdk_drawable_get_type void")
;;; (CFNC-gtk2 "void gdk_drawable_get_size GdkDrawable* drawable gint* [width] gint* [height]")
;;; (CFNC-gtk2 "void gdk_drawable_set_colormap GdkDrawable* drawable GdkColormap* colormap")
;;; (CFNC-gtk2 "GdkColormap* gdk_drawable_get_colormap GdkDrawable* drawable")
;;; (CFNC-gtk2 "GdkVisual* gdk_drawable_get_visual GdkDrawable* drawable")
;;; (CFNC-gtk2 "gint gdk_drawable_get_depth GdkDrawable* drawable")
;;; 2.90.6 (CFNC "void gdk_draw_point GdkDrawable* drawable GdkGC* gc gint x gint y")
;;; 2.90.6 (CFNC "void gdk_draw_line GdkDrawable* drawable GdkGC* gc gint x1 gint y1 gint x2 gint y2")
;;; 2.90.6 (CFNC "void gdk_draw_rectangle GdkDrawable* drawable GdkGC* gc gboolean filled gint x gint y gint width gint height")
;;; 2.90.6 (CFNC "void gdk_draw_arc GdkDrawable* drawable GdkGC* gc gboolean filled gint x gint y gint width gint height gint angle1 gint angle2")
;;; 2.90.6 (CFNC "void gdk_draw_polygon GdkDrawable* drawable GdkGC* gc gboolean filled GdkPoint* points gint npoints")
;;; the "filled" arg is declared gint in gdkdrawable.h, but treated as a boolean in x11/gdkdrawable.c
;;; 2.90.6 (CFNC "void gdk_draw_drawable GdkDrawable* drawable GdkGC* gc GdkDrawable* src gint xsrc gint ysrc gint xdest gint ydest gint width gint height")
;;; 2.90.6 (CFNC "void gdk_draw_image GdkDrawable* drawable GdkGC* gc GdkImage* image gint xsrc gint ysrc gint xdest gint ydest gint width gint height")
;;; 2.90.6 (CFNC "void gdk_draw_points GdkDrawable* drawable GdkGC* gc GdkPoint* points gint npoints")
;;; 2.90.6 (CFNC "void gdk_draw_segments GdkDrawable* drawable GdkGC* gc GdkSegment* segs gint nsegs")
;;; 2.90.6 (CFNC "void gdk_draw_lines GdkDrawable* drawable GdkGC* gc GdkPoint* points gint npoints")
;;; 2.90.6 (CFNC "void gdk_draw_glyphs GdkDrawable* drawable GdkGC* gc PangoFont* font gint x gint y PangoGlyphString* glyphs")
;;; 2.90.6 (CFNC "void gdk_draw_layout_line GdkDrawable* drawable GdkGC* gc gint x gint y PangoLayoutLine* line")
;;; 2.90.6 (CFNC "void gdk_draw_layout GdkDrawable* drawable GdkGC* gc gint x gint y PangoLayout* layout")
;;; 2.90.6 (CFNC "void gdk_draw_layout_line_with_colors GdkDrawable* drawable GdkGC* gc gint x gint y PangoLayoutLine* line GdkColor* @foreground GdkColor* @background")
;;; 2.90.6 (CFNC "void gdk_draw_layout_with_colors GdkDrawable* drawable GdkGC* gc gint x gint y PangoLayout* layout GdkColor* @foreground GdkColor* @background")
;;; 2.90.6 (CFNC "GdkImage* gdk_drawable_get_image GdkDrawable* drawable gint x gint y gint width gint height")
;;; out 2.90.5
;;; (CFNC "GdkRegion* gdk_drawable_get_clip_region GdkDrawable* drawable")
;;; (CFNC "GdkRegion* gdk_drawable_get_visible_region GdkDrawable* drawable")
;;; 2.90.6 (CFNC "GdkImage* gdk_drawable_copy_to_image GdkDrawable* drawable GdkImage* image gint src_x gint src_y gint dest_x gint dest_y gint width gint height")

;;;; are these actually needed?
;;;;;;;; (CFNC "GType gdk_cursor_type_get_type void")
;;;;;;;; (CFNC "GType gdk_drag_action_get_type void")
;;;;;;;; (CFNC "GType gdk_drag_protocol_get_type void")
;;;;;;;; (CFNC "GType gdk_filter_return_get_type void")
;;;;;;;; (CFNC "GType gdk_event_type_get_type void")
;;;;;;;; (CFNC "GType gdk_event_mask_get_type void")
;;;;;;;; (CFNC "GType gdk_visibility_state_get_type void")
;;;;;;;; (CFNC "GType gdk_scroll_direction_get_type void")
;;;;;;;; (CFNC "GType gdk_notify_type_get_type void")
;;;;;;;; (CFNC "GType gdk_crossing_mode_get_type void")
;;;;;;;; (CFNC "GType gdk_property_state_get_type void")
;;;;;;;; (CFNC "GType gdk_setting_action_get_type void")
;;;;;;;; (CFNC "GType gdk_font_type_get_type void")
;;;;;;;; (CFNC "GType gdk_cap_style_get_type void")
;;;;;;;; (CFNC "GType gdk_fill_get_type void")
;;;;;;;; (CFNC "GType gdk_function_get_type void")
;;;;;;;; (CFNC "GType gdk_join_style_get_type void")
;;;;;;;; (CFNC "GType gdk_line_style_get_type void")
;;;;;;;; (CFNC "GType gdk_subwindow_mode_get_type void")
;;;;;;;; (CFNC "GType gdk_gc_values_mask_get_type void")
;;;;;;;; (CFNC "GType gdk_image_type_get_type void")
;;;;;;;; (CFNC "GType gdk_extension_mode_get_type void")
;;;;;;;; (CFNC "GType gdk_input_source_get_type void")
;;;;;;;; (CFNC "GType gdk_input_mode_get_type void")
;;;;;;;; (CFNC "GType gdk_axis_use_get_type void")
;;;;;;;; (CFNC "GType gdk_prop_mode_get_type void")
;;;;;;;; (CFNC "GType gdk_fill_rule_get_type void")
;;;;;;;; (CFNC "GType gdk_overlap_type_get_type void")
;;;;;;;; (CFNC "GType gdk_rgb_dither_get_type void")
;;;;;;;; (CFNC "GType gdk_byte_order_get_type void")
;;;;;;;; (CFNC "GType gdk_modifier_type_get_type void")
;;;;;;;; (CFNC "GType gdk_input_condition_get_type void")
;;;;;;;; (CFNC "GType gdk_status_get_type void")
;;;;;;;; (CFNC "GType gdk_grab_status_get_type void")
;;;;;;;; (CFNC "GType gdk_visual_type_get_type void")
;;;;;;;; (CFNC "GType gdk_wm_decoration_get_type void")
;;;;;;;; (CFNC "GType gdk_wm_function_get_type void")
;;;;;;;; (CFNC "GType gdk_gravity_get_type void")

(CINT "GDK_PRIORITY_EVENTS")
(CINT "GDK_PRIORITY_REDRAW")
(CINT "GDK_NOTHING" "GdkEventType")
(CINT "GDK_DELETE" "GdkEventType")
(CINT "GDK_DESTROY" "GdkEventType")
;;; 3.96.0 (CINT "GDK_EXPOSE" "GdkEventType")
(CINT "GDK_MOTION_NOTIFY" "GdkEventType")
(CINT "GDK_BUTTON_PRESS" "GdkEventType")
;;; 3.92.1 (CINT "GDK_2BUTTON_PRESS" "GdkEventType")
;;; 3.92.1 (CINT "GDK_3BUTTON_PRESS" "GdkEventType")
(CINT "GDK_BUTTON_RELEASE" "GdkEventType")
(CINT "GDK_KEY_PRESS" "GdkEventType")
(CINT "GDK_KEY_RELEASE" "GdkEventType")
(CINT "GDK_ENTER_NOTIFY" "GdkEventType")
(CINT "GDK_LEAVE_NOTIFY" "GdkEventType")
(CINT "GDK_FOCUS_CHANGE" "GdkEventType")
(CINT "GDK_CONFIGURE" "GdkEventType")
;;; 3.96.0 (CINT "GDK_MAP" "GdkEventType")
;;; 3.96.0 (CINT "GDK_UNMAP" "GdkEventType")
;;; 3.93.0 (CINT "GDK_PROPERTY_NOTIFY" "GdkEventType")
;;; 3.93.0 (CINT "GDK_SELECTION_CLEAR" "GdkEventType")
;;; 3.93.0 (CINT "GDK_SELECTION_REQUEST" "GdkEventType")
;;; 3.93.0 (CINT "GDK_SELECTION_NOTIFY" "GdkEventType")
(CINT "GDK_PROXIMITY_IN" "GdkEventType")
(CINT "GDK_PROXIMITY_OUT" "GdkEventType")
;;; 3.96.0 (CINT "GDK_DRAG_ENTER" "GdkEventType")
;;; 3.96.0 (CINT "GDK_DRAG_LEAVE" "GdkEventType")
;;; 3.96.0 (CINT "GDK_DRAG_MOTION" "GdkEventType")
;;; 3.93.0 (CINT "GDK_DRAG_STATUS" "GdkEventType")
(CINT "GDK_DROP_START" "GdkEventType")
;;; 3.93.0 (CINT "GDK_DROP_FINISHED" "GdkEventType")
;;; 3.93.0 (CINT "GDK_CLIENT_EVENT" "GdkEventType")
;;; 3.93.0 (CINT "GDK_VISIBILITY_NOTIFY" "GdkEventType")
;;; (CINT-gtk2 "GDK_NO_EXPOSE" "GdkEventType")
(CINT "GDK_SCROLL" "GdkEventType")
;;; 3.93.0 (CINT "GDK_SETTING" "GdkEventType")
;;; 3.93.0 (CINT "GDK_OWNER_CHANGE" "GdkEventType")
(CINT "GDK_GRAB_BROKEN" "GdkEventType")

;;; these may be out 2.90.1
(CINT "GDK_EXPOSURE_MASK" "GdkEventMask")
(CINT "GDK_POINTER_MOTION_MASK" "GdkEventMask")
;;; 3.12 (CINT "GDK_POINTER_MOTION_HINT_MASK" "GdkEventMask")
(CINT "GDK_BUTTON_MOTION_MASK" "GdkEventMask")
(CINT "GDK_BUTTON1_MOTION_MASK" "GdkEventMask")
(CINT "GDK_BUTTON2_MOTION_MASK" "GdkEventMask")
(CINT "GDK_BUTTON3_MOTION_MASK" "GdkEventMask")
(CINT "GDK_BUTTON_PRESS_MASK" "GdkEventMask")
(CINT "GDK_BUTTON_RELEASE_MASK" "GdkEventMask")
(CINT "GDK_KEY_PRESS_MASK" "GdkEventMask")
(CINT "GDK_KEY_RELEASE_MASK" "GdkEventMask")
(CINT "GDK_ENTER_NOTIFY_MASK" "GdkEventMask")
(CINT "GDK_LEAVE_NOTIFY_MASK" "GdkEventMask")
(CINT "GDK_FOCUS_CHANGE_MASK" "GdkEventMask")
(CINT "GDK_STRUCTURE_MASK" "GdkEventMask")
(CINT "GDK_PROPERTY_CHANGE_MASK" "GdkEventMask")
;;; 3.93.0 (CINT "GDK_VISIBILITY_NOTIFY_MASK" "GdkEventMask")
(CINT "GDK_PROXIMITY_IN_MASK" "GdkEventMask")
(CINT "GDK_PROXIMITY_OUT_MASK" "GdkEventMask")
(CINT "GDK_SUBSTRUCTURE_MASK" "GdkEventMask")
(CINT "GDK_SCROLL_MASK" "GdkEventMask")
;;; 3.93.0 (CINT "GDK_ALL_EVENTS_MASK" "GdkEventMask")


;;; 3.11.8 (CINT "GDK_VISIBILITY_UNOBSCURED " "GdkVisibilityState")
;;; 3.11.8 (CINT "GDK_VISIBILITY_PARTIAL " "GdkVisibilityState")
;;; 3.11.8 (CINT "GDK_VISIBILITY_FULLY_OBSCURED" "GdkVisibilityState")
(CINT "GDK_SCROLL_UP" "GdkScrollDirection")
(CINT "GDK_SCROLL_DOWN" "GdkScrollDirection")
(CINT "GDK_SCROLL_LEFT" "GdkScrollDirection")
(CINT "GDK_SCROLL_RIGHT" "GdkScrollDirection")
(CINT "GDK_NOTIFY_ANCESTOR" "GdkNotifyType")
(CINT "GDK_NOTIFY_VIRTUAL" "GdkNotifyType")
(CINT "GDK_NOTIFY_INFERIOR" "GdkNotifyType")
(CINT "GDK_NOTIFY_NONLINEAR" "GdkNotifyType")
(CINT "GDK_NOTIFY_NONLINEAR_VIRTUAL" "GdkNotifyType")
(CINT "GDK_NOTIFY_UNKNOWN" "GdkNotifyType")
(CINT "GDK_CROSSING_NORMAL" "GdkCrossingMode")
(CINT "GDK_CROSSING_GRAB" "GdkNotifyType")
(CINT "GDK_CROSSING_UNGRAB" "GdkNotifyType")
;;; 3.93.0 (CINT "GDK_PROPERTY_NEW_VALUE" "GdkPropertyState")
;;; 3.93.0 (CINT "GDK_PROPERTY_DELETE" "GdkPropertyState")
;;; 3.93.0 (CINT "GDK_SETTING_ACTION_NEW" "GdkSettingAction")
;;; 3.93.0 (CINT "GDK_SETTING_ACTION_CHANGED" "GdkSettingAction")
;;; 3.93.0 (CINT "GDK_SETTING_ACTION_DELETED" "GdkSettingAction")
;;;;(CFNC "GType gdk_event_get_type void")
;;; 3.93.0 (CFNC "gboolean gdk_events_pending void")
;;; 3.93.0 (CFNC "GdkEvent* gdk_event_get void")
;;; 3.93.0 (CFNC "GdkEvent* gdk_event_peek void")
;;; out 2.18.0
;;; 3.93.0 (CFNC "void gdk_event_put GdkEvent* event")
(CFNC "GdkEvent* gdk_event_copy GdkEvent* event")
;;; 3.96.0?? (CFNC "void gdk_event_free GdkEvent* event")
(CFNC "guint32 gdk_event_get_time GdkEvent* @event")
(CFNC "gboolean gdk_event_get_state GdkEvent* event GdkModifierType* [state]")
(CFNC "gboolean gdk_event_get_coords GdkEvent* event gdouble* [x_win] gdouble* [y_win]")
(CFNC "gboolean gdk_event_get_root_coords GdkEvent* event gdouble* [x_root] gdouble* [y_root]")
;;;; (CFNC "gboolean gdk_event_get_axis GdkEvent* event GdkAxisUse axis_use gdouble* [value]")
;;; 3.96.0 (CFNC "void gdk_event_handler_set GdkEventFunc func lambda_data @func_info GtkDestroyNotify notify")
(CFNC "void gdk_set_show_events gboolean show_events")
(CFNC "gboolean gdk_get_show_events void")
;;; 2.99.3 (CFNC "void gdk_add_client_message_filter GdkAtom message_type GdkFilterFunc func lambda_data @func_info")
;;; 2.91.1 ;(CFNC "gboolean gdk_setting_get gchar* name GValue* value") 
;;; 2.90.6 (CINT "GDK_CAP_NOT_LAST" "GdkCapStyle")
;;; 2.90.6 (CINT "GDK_CAP_BUTT" "GdkCapStyle")
;;; 2.90.6 (CINT "GDK_CAP_ROUND" "GdkCapStyle")
;;; 2.90.6 (CINT "GDK_CAP_PROJECTING" "GdkCapStyle")
;;; 2.90.6 (CINT "GDK_SOLID" "GdkFill")
;;; 2.90.6 (CINT "GDK_TILED" "GdkFill")
;;; 2.90.6 (CINT "GDK_STIPPLED" "GdkFill")
;;; 2.90.6 (CINT "GDK_OPAQUE_STIPPLED" "GdkFill")
;;; 2.90.6 (CINT "GDK_COPY" "GdkFunction")
;;; 2.90.6 (CINT "GDK_INVERT" "GdkFunction")
;;; 2.90.6 (CINT "GDK_XOR" "GdkFunction")
;;; 2.90.6 (CINT "GDK_CLEAR" "GdkFunction")
;;; 2.90.6 (CINT "GDK_AND" "GdkFunction")
;;; 2.90.6 (CINT "GDK_AND_REVERSE" "GdkFunction")
;;; 2.90.6 (CINT "GDK_AND_INVERT" "GdkFunction")
;;; 2.90.6 (CINT "GDK_NOOP" "GdkFunction")
;;; 2.90.6 (CINT "GDK_OR" "GdkFunction")
;;; 2.90.6 (CINT "GDK_EQUIV" "GdkFunction")
;;; 2.90.6 (CINT "GDK_OR_REVERSE" "GdkFunction")
;;; 2.90.6 (CINT "GDK_COPY_INVERT" "GdkFunction")
;;; 2.90.6 (CINT "GDK_OR_INVERT" "GdkFunction")
;;; 2.90.6 (CINT "GDK_NAND" "GdkFunction")
;;; 2.90.6 (CINT "GDK_NOR" "GdkFunction")
;;; 2.90.6 (CINT "GDK_SET" "GdkFunction")
;;; 2.90.6 (CINT "GDK_JOIN_MITER" "GdkJoinStyle")
;;; 2.90.6 (CINT "GDK_JOIN_ROUND" "GdkJoinStyle")
;;; 2.90.6 (CINT "GDK_JOIN_BEVEL" "GdkJoinStyle")
;;; 2.90.6 (CINT "GDK_LINE_SOLID" "GdkLineStyle")
;;; 2.90.6 (CINT "GDK_LINE_ON_OFF_DASH" "GdkLineStyle")
;;; 2.90.6 (CINT "GDK_LINE_DOUBLE_DASH" "GdkLineStyle")
;;; 2.90.6 (CINT "GDK_CLIP_BY_CHILDREN" "GdkSubwindowMode")
;;; 2.90.6 (CINT "GDK_INCLUDE_INFERIORS" "GdkSubwindowMode")
;;; 2.90.6 (CINT "GDK_GC_FOREGROUND" "GdkGCValuesMask")
;;; 2.90.6 (CINT "GDK_GC_BACKGROUND" "GdkGCValuesMask")
;;; 2.90.6 ;;; (CINT "GDK_GC_FONT" "GdkGCValuesMask")
;;; 2.90.6 (CINT "GDK_GC_FUNCTION" "GdkGCValuesMask")
;;; 2.90.6 (CINT "GDK_GC_FILL" "GdkGCValuesMask")
;;; 2.90.6 (CINT "GDK_GC_TILE" "GdkGCValuesMask")
;;; 2.90.6 (CINT "GDK_GC_STIPPLE" "GdkGCValuesMask")
;;; 2.90.6 (CINT "GDK_GC_CLIP_MASK" "GdkGCValuesMask")
;;; 2.90.6 (CINT "GDK_GC_SUBWINDOW" "GdkGCValuesMask")
;;; 2.90.6 (CINT "GDK_GC_TS_X_ORIGIN" "GdkGCValuesMask")
;;; 2.90.6 (CINT "GDK_GC_TS_Y_ORIGIN" "GdkGCValuesMask")
;;; 2.90.6 (CINT "GDK_GC_CLIP_X_ORIGIN" "GdkGCValuesMask")
;;; 2.90.6 (CINT "GDK_GC_CLIP_Y_ORIGIN" "GdkGCValuesMask")
;;; 2.90.6 (CINT "GDK_GC_EXPOSURES" "GdkGCValuesMask")
;;; 2.90.6 (CINT "GDK_GC_LINE_WIDTH" "GdkGCValuesMask")
;;; 2.90.6 (CINT "GDK_GC_LINE_STYLE" "GdkGCValuesMask")
;;; 2.90.6 (CINT "GDK_GC_CAP_STYLE" "GdkGCValuesMask")
;;; 2.90.6 (CINT "GDK_GC_JOIN_STYLE" "GdkGCValuesMask")
;;; 2.90.6 (CCAST "GDK_GC(object)" "GdkGC*")
;;; 2.90.6 (CCHK "GDK_IS_GC(object)" "GdkGC*")
;;;;(CFNC "GType gdk_gc_get_type void")
;;; 2.90.6 (CFNC "GdkGC* gdk_gc_new GdkDrawable* drawable")
;;; 2.90.6 (CFNC "GdkGC* gdk_gc_new_with_values GdkDrawable* drawable GdkGCValues* values GdkGCValuesMask values_mask")
;;; 2.90.6 (CFNC "void gdk_gc_get_values GdkGC* gc GdkGCValues* values")
;;; 2.90.6 (CFNC "void gdk_gc_set_values GdkGC* gc GdkGCValues* values GdkGCValuesMask values_mask")
;;; 2.90.6 (CFNC "void gdk_gc_set_foreground GdkGC* gc GdkColor* color")
;;; 2.90.6 (CFNC "void gdk_gc_set_background GdkGC* gc GdkColor* color")
;;; 2.90.6 (CFNC "void gdk_gc_set_function GdkGC* gc GdkFunction function")
;;; 2.90.6 (CFNC "void gdk_gc_set_fill GdkGC* gc GdkFill fill")
;;; 2.90.6 (CFNC "void gdk_gc_set_tile GdkGC* gc GdkPixmap* tile")
;;; 2.90.6 (CFNC "void gdk_gc_set_stipple GdkGC* gc GdkPixmap* stipple")
;;; 2.90.6 (CFNC "void gdk_gc_set_ts_origin GdkGC* gc gint x gint y")
;;; 2.90.6 (CFNC "void gdk_gc_set_clip_origin GdkGC* gc gint x gint y")
;;; 2.90.6 (CFNC "void gdk_gc_set_clip_mask GdkGC* gc GdkBitmap* mask")
;;; 2.90.6 (CFNC "void gdk_gc_set_clip_rectangle GdkGC* gc GdkRectangle* rectangle")
;;; 2.90.6 ;;; 2.90.5 (CFNC "void gdk_gc_set_clip_region GdkGC* gc GdkRegion* region")
;;; 2.90.6 (CFNC "void gdk_gc_set_subwindow GdkGC* gc GdkSubwindowMode mode")
;;; 2.90.6 (CFNC "void gdk_gc_set_exposures GdkGC* gc gboolean exposures")
;;; 2.90.6 (CFNC "void gdk_gc_set_line_attributes GdkGC* gc gint line_width GdkLineStyle line_style GdkCapStyle cap_style GdkJoinStyle join_style")
;;; 2.90.6 ;;;(CFNC "void gdk_gc_set_dashes GdkGC* gc gint dash_offset gint8* dash_list gint n")
;;; gint8* is a problem (23-Feb-09)
;;; 2.90.6 (CFNC "void gdk_gc_offset GdkGC* gc gint x_offset gint y_offset")
;;; 2.90.6 (CFNC "void gdk_gc_copy GdkGC* dst_gc GdkGC* src_gc")
;;; 2.90.6 (CFNC "void gdk_gc_set_colormap GdkGC* gc GdkColormap* colormap")
;;; 2.90.6 (CFNC "GdkColormap* gdk_gc_get_colormap GdkGC* gc")
;;; 2.90.6 (CFNC "void gdk_gc_set_rgb_fg_color GdkGC* gc GdkColor* color")
;;; 2.90.6 (CFNC "void gdk_gc_set_rgb_bg_color GdkGC* gc GdkColor* color")
;;; 3.92.1 (CFNC "void gdk_init gint* {argc} gchar*** |argv|")
;;; 3.92.1 (CFNC "gboolean gdk_init_check gint* {argc} gchar*** |argv|")
;;; (CFNC-gtk2 "gchar* gdk_set_locale void")
;;; 3.93.0 (CFNC "char* gdk_get_program_class void")
;;; 3.93.0 (CFNC "void gdk_set_program_class char* program_class")
;;; 3.93.0 (CFNC "void gdk_error_trap_push void")
;;; 3.93.0 (CFNC "gint gdk_error_trap_pop void")
;;; 3.9.0 (CFNC "gchar* gdk_get_display void" 'free)
;;; 3.93.0 (CFNC "gchar* gdk_get_display_arg_name void")
;;; 3.93.0 (CFNC "void gdk_notify_startup_complete void")
;;; 2.99.0 (CFNC "void gdk_pointer_ungrab guint32 time")
;;; 2.99.0 (CFNC "void gdk_keyboard_ungrab guint32 time")
;;; 2.99.0 (CFNC "gboolean gdk_pointer_is_grabbed void")
;;; 3.22.2 (CFNC "gint gdk_screen_width void")
;;; 3.22.2 (CFNC "gint gdk_screen_height void")
;;; 3.22.2 (CFNC "gint gdk_screen_width_mm void")
;;; 3.22.2 (CFNC "gint gdk_screen_height_mm void")
;;; 3.93.0 (CFNC "void gdk_flush void")
;;; 3.93.0 (CFNC "void gdk_beep void")
;;; 3.93.0 (CFNC "void gdk_set_double_click_time guint msec")
(CFNC "gboolean gdk_rectangle_intersect GdkRectangle* src1 GdkRectangle* src2 GdkRectangle* dest")
(CFNC "void gdk_rectangle_union GdkRectangle* src1 GdkRectangle* src2 GdkRectangle* dest")
;;;;(CFNC "GType gdk_rectangle_get_type void")
;;; out 2.3 (CFNC "gchar* gdk_wcstombs GdkWChar* src")
;;; out 2.3 (CFNC "gint gdk_mbstowcs GdkWChar* dest gchar* src gint dest_max")
;;; 2.99.3 (CFNC "void gdk_event_send_clientmessage_toall GdkEvent* event")
;;; 2.99.3 (CFNC "gboolean gdk_event_send_client_message GdkEvent* event guint32 xid")
;;; 3.5.10 (CFNC "void gdk_threads_enter void")
;;; 3.5.10 (CFNC "void gdk_threads_leave void")
;;; 3.5.10 (CFNC "void gdk_threads_init void") 
;;; 2.90.6 (CINT "GDK_IMAGE_NORMAL" "GdkImageType")
;;; 2.90.6 (CINT "GDK_IMAGE_SHARED" "GdkImageType")
;;; 2.90.6 (CINT "GDK_IMAGE_FASTEST" "GdkImageType")
;;; 2.90.6 (CCAST "GDK_IMAGE(object)" "GdkImage*")
;;; 2.90.6 (CCHK "GDK_IS_IMAGE(object)" "GdkImage*")
;;;;(CFNC "GType gdk_image_get_type void")
;;; 2.90.6 (CFNC "GdkImage* gdk_image_new GdkImageType type GdkVisual* visual gint width gint height")
(CCAST "GDK_DEVICE(object)" "GdkDevice*")
(CCHK "GDK_IS_DEVICE(object)" "GdkDevice*")
;;;; (CINT "GDK_EXTENSION_EVENTS_NONE" "GdkExtensionMode")
;;;; (CINT "GDK_EXTENSION_EVENTS_ALL" "GdkExtensionMode")
;;;; (CINT "GDK_EXTENSION_EVENTS_CURSOR" "GdkExtensionMode")
;;;; (CINT "GDK_SOURCE_MOUSE" "GdkInputSource")
;;;; (CINT "GDK_SOURCE_PEN" "GdkInputSource")
;;;; (CINT "GDK_SOURCE_ERASER" "GdkInputSource")
;;;; (CINT "GDK_SOURCE_CURSOR" "GdkInputSource")
;;;; (CINT "GDK_MODE_DISABLED" "GdkInputMode")
;;;; (CINT "GDK_MODE_SCREEN" "GdkInputMode")
;;;; (CINT "GDK_MODE_WINDOW" "GdkInputMode")
;;;; (CINT "GDK_AXIS_IGNORE" "GdkAxisUse")
;;;; (CINT "GDK_AXIS_X" "GdkAxisUse")
;;;; (CINT "GDK_AXIS_Y" "GdkAxisUse")
;;;; (CINT "GDK_AXIS_PRESSURE" "GdkAxisUse")
;;;; (CINT "GDK_AXIS_XTILT" "GdkAxisUse")
;;;; (CINT "GDK_AXIS_YTILT" "GdkAxisUse")
;;;; (CINT "GDK_AXIS_WHEEL" "GdkAxisUse")
;;;; (CINT "GDK_AXIS_LAST" "GdkAxisUse")
;;; (CINT "GDK_EVEN_ODD_RULE" "GdkFillRule")
;;; (CINT "GDK_WINDING_RULE" "GdkFillRule")
;;;; (CINT "GDK_OVERLAP_RECTANGLE_IN" "GdkOverlapType")
;;;; (CINT "GDK_OVERLAP_RECTANGLE_OUT" "GdkOverlapType")
;;;; (CINT "GDK_OVERLAP_RECTANGLE_PART" "GdkOverlapType")
;;;; (CINT "GDK_MAX_TIMECOORD_AXES")

;;;;;;;; (CFNC "GType gdk_device_get_type void")
;;;; (CFNC "GList* gdk_devices_list void")
;;;; (CFNC "void gdk_device_set_source GdkDevice* device GdkInputSource source")
;;;; (CFNC "gboolean gdk_device_set_mode GdkDevice* device GdkInputMode mode")
;;;; (CFNC "void gdk_device_set_key GdkDevice* device guint index guint keyval GdkModifierType modifiers")
;;;; (CFNC "void gdk_device_set_axis_use GdkDevice* device guint index GdkAxisUse use")
;;;; (CFNC "void gdk_device_free_history GdkTimeCoord** events gint n_events")
;;;; (CFNC "gboolean gdk_device_get_axis GdkDevice* device gdouble* axes GdkAxisUse use gdouble* value")
;;;; (CFNC "GdkDevice* gdk_device_get_core_pointer void")

(CCAST "GDK_KEYMAP(object)" "GdkKeymap*")
(CCHK "GDK_IS_KEYMAP(object)" "GdkKeymap*")
;;;;(CFNC "GType gdk_keymap_get_type void")
;;; 3.93.0 (CFNC "GdkKeymap* gdk_keymap_get_default void")
(CFNC "guint gdk_keymap_lookup_key GdkKeymap* keymap GdkKeymapKey* key")
;(CFNC "gboolean gdk_keymap_translate_keyboard_state GdkKeymap* keymap guint hardware_keycode GdkModifierType state gint group guint* [keyval] gint* [effective_group] gint* [level] GdkModifierType* [unused_modifiers]")
(CFNC "gboolean gdk_keymap_get_entries_for_keyval GdkKeymap* keymap guint keyval GdkKeymapKey** [keys] gint* [n_keys]")
(CFNC "gboolean gdk_keymap_get_entries_for_keycode GdkKeymap* keymap guint hardware_keycode GdkKeymapKey** [keys] guint** [keyvals] gint* [n_entries]")
(CFNC "PangoDirection gdk_keymap_get_direction GdkKeymap* keymap")
(CFNC "gchar* gdk_keyval_name guint keyval")
(CFNC "guint gdk_keyval_from_name gchar* keyval_name")
(CFNC "void gdk_keyval_convert_case guint symbol guint* [lower] guint* [upper]")
(CFNC "guint gdk_keyval_to_upper guint keyval")
(CFNC "guint gdk_keyval_to_lower guint keyval")
(CFNC "gboolean gdk_keyval_is_upper guint keyval")
(CFNC "gboolean gdk_keyval_is_lower guint keyval")
(CFNC "guint32 gdk_keyval_to_unicode guint keyval")
(CFNC "guint gdk_unicode_to_keyval guint32 wc")

;;; these all changed 2.90.7
(CINT-3.0 "GDK_KEY_VoidSymbol")
(CINT-3.0 "GDK_KEY_BackSpace")
(CINT-3.0 "GDK_KEY_Tab")
(CINT-3.0 "GDK_KEY_Linefeed")
(CINT-3.0 "GDK_KEY_Clear")
(CINT-3.0 "GDK_KEY_Return")
(CINT-3.0 "GDK_KEY_Pause")
(CINT-3.0 "GDK_KEY_Scroll_Lock")
(CINT-3.0 "GDK_KEY_Sys_Req")
(CINT-3.0 "GDK_KEY_Escape")
(CINT-3.0 "GDK_KEY_Delete")
(CINT-3.0 "GDK_KEY_Home")
(CINT-3.0 "GDK_KEY_Left")
(CINT-3.0 "GDK_KEY_Up")
(CINT-3.0 "GDK_KEY_Right")
(CINT-3.0 "GDK_KEY_Down")
(CINT-3.0 "GDK_KEY_Prior")
(CINT-3.0 "GDK_KEY_Page_Up")
(CINT-3.0 "GDK_KEY_Next")
(CINT-3.0 "GDK_KEY_Page_Down")
(CINT-3.0 "GDK_KEY_End")
(CINT-3.0 "GDK_KEY_Begin")
(CINT-3.0 "GDK_KEY_Select")
(CINT-3.0 "GDK_KEY_Print")
(CINT-3.0 "GDK_KEY_Execute")
(CINT-3.0 "GDK_KEY_Insert")
(CINT-3.0 "GDK_KEY_Undo")
(CINT-3.0 "GDK_KEY_Redo")
(CINT-3.0 "GDK_KEY_Menu")
(CINT-3.0 "GDK_KEY_Find")
(CINT-3.0 "GDK_KEY_Cancel")
(CINT-3.0 "GDK_KEY_Help")
(CINT-3.0 "GDK_KEY_Break")
(CINT-3.0 "GDK_KEY_Mode_switch")
(CINT-3.0 "GDK_KEY_script_switch")
(CINT-3.0 "GDK_KEY_Num_Lock")
(CINT-3.0 "GDK_KEY_KP_Space")
(CINT-3.0 "GDK_KEY_KP_Tab")
(CINT-3.0 "GDK_KEY_KP_Enter")
(CINT-3.0 "GDK_KEY_KP_F1")
(CINT-3.0 "GDK_KEY_KP_F2")
(CINT-3.0 "GDK_KEY_KP_F3")
(CINT-3.0 "GDK_KEY_KP_F4")
(CINT-3.0 "GDK_KEY_KP_Home")
(CINT-3.0 "GDK_KEY_KP_Left")
(CINT-3.0 "GDK_KEY_KP_Up")
(CINT-3.0 "GDK_KEY_KP_Right")
(CINT-3.0 "GDK_KEY_KP_Down")
(CINT-3.0 "GDK_KEY_KP_Prior")
(CINT-3.0 "GDK_KEY_KP_Page_Up")
(CINT-3.0 "GDK_KEY_KP_Next")
(CINT-3.0 "GDK_KEY_KP_Page_Down")
(CINT-3.0 "GDK_KEY_KP_End")
(CINT-3.0 "GDK_KEY_KP_Begin")
(CINT-3.0 "GDK_KEY_KP_Insert")
(CINT-3.0 "GDK_KEY_KP_Delete")
(CINT-3.0 "GDK_KEY_KP_Equal")
(CINT-3.0 "GDK_KEY_KP_Multiply")
(CINT-3.0 "GDK_KEY_KP_Add")
(CINT-3.0 "GDK_KEY_KP_Separator")
(CINT-3.0 "GDK_KEY_KP_Subtract")
(CINT-3.0 "GDK_KEY_KP_Decimal")
(CINT-3.0 "GDK_KEY_KP_Divide")
(CINT-3.0 "GDK_KEY_KP_0")
(CINT-3.0 "GDK_KEY_KP_1")
(CINT-3.0 "GDK_KEY_KP_2")
(CINT-3.0 "GDK_KEY_KP_3")
(CINT-3.0 "GDK_KEY_KP_4")
(CINT-3.0 "GDK_KEY_KP_5")
(CINT-3.0 "GDK_KEY_KP_6")
(CINT-3.0 "GDK_KEY_KP_7")
(CINT-3.0 "GDK_KEY_KP_8")
(CINT-3.0 "GDK_KEY_KP_9")
(CINT-3.0 "GDK_KEY_F1")
(CINT-3.0 "GDK_KEY_F2")
(CINT-3.0 "GDK_KEY_F3")
(CINT-3.0 "GDK_KEY_F4")
(CINT-3.0 "GDK_KEY_F5")
(CINT-3.0 "GDK_KEY_F6")
(CINT-3.0 "GDK_KEY_F7")
(CINT-3.0 "GDK_KEY_F8")
(CINT-3.0 "GDK_KEY_F9")
(CINT-3.0 "GDK_KEY_F10")
(CINT-3.0 "GDK_KEY_F11")
(CINT-3.0 "GDK_KEY_L1")
(CINT-3.0 "GDK_KEY_F12")
(CINT-3.0 "GDK_KEY_L2")
(CINT-3.0 "GDK_KEY_F13")
(CINT-3.0 "GDK_KEY_L3")
(CINT-3.0 "GDK_KEY_F14")
(CINT-3.0 "GDK_KEY_L4")
(CINT-3.0 "GDK_KEY_F15")
(CINT-3.0 "GDK_KEY_L5")
(CINT-3.0 "GDK_KEY_F16")
(CINT-3.0 "GDK_KEY_L6")
(CINT-3.0 "GDK_KEY_F17")
(CINT-3.0 "GDK_KEY_L7")
(CINT-3.0 "GDK_KEY_F18")
(CINT-3.0 "GDK_KEY_L8")
(CINT-3.0 "GDK_KEY_F19")
(CINT-3.0 "GDK_KEY_L9")
(CINT-3.0 "GDK_KEY_F20")
(CINT-3.0 "GDK_KEY_L10")
(CINT-3.0 "GDK_KEY_F21")
(CINT-3.0 "GDK_KEY_R1")
(CINT-3.0 "GDK_KEY_F22")
(CINT-3.0 "GDK_KEY_R2")
(CINT-3.0 "GDK_KEY_F23")
(CINT-3.0 "GDK_KEY_R3")
(CINT-3.0 "GDK_KEY_F24")
(CINT-3.0 "GDK_KEY_R4")
(CINT-3.0 "GDK_KEY_F25")
(CINT-3.0 "GDK_KEY_R5")
(CINT-3.0 "GDK_KEY_F26")
(CINT-3.0 "GDK_KEY_R6")
(CINT-3.0 "GDK_KEY_F27")
(CINT-3.0 "GDK_KEY_R7")
(CINT-3.0 "GDK_KEY_F28")
(CINT-3.0 "GDK_KEY_R8")
(CINT-3.0 "GDK_KEY_F29")
(CINT-3.0 "GDK_KEY_R9")
(CINT-3.0 "GDK_KEY_F30")
(CINT-3.0 "GDK_KEY_R10")
(CINT-3.0 "GDK_KEY_F31")
(CINT-3.0 "GDK_KEY_R11")
(CINT-3.0 "GDK_KEY_F32")
(CINT-3.0 "GDK_KEY_R12")
(CINT-3.0 "GDK_KEY_F33")
(CINT-3.0 "GDK_KEY_R13")
(CINT-3.0 "GDK_KEY_F34")
(CINT-3.0 "GDK_KEY_R14")
(CINT-3.0 "GDK_KEY_F35")
(CINT-3.0 "GDK_KEY_R15")
(CINT-3.0 "GDK_KEY_Shift_L")
(CINT-3.0 "GDK_KEY_Shift_R")
(CINT-3.0 "GDK_KEY_Control_L")
(CINT-3.0 "GDK_KEY_Control_R")
(CINT-3.0 "GDK_KEY_Caps_Lock")
(CINT-3.0 "GDK_KEY_Shift_Lock")
(CINT-3.0 "GDK_KEY_Meta_L")
(CINT-3.0 "GDK_KEY_Meta_R")
(CINT-3.0 "GDK_KEY_Alt_L")
(CINT-3.0 "GDK_KEY_Alt_R")
(CINT-3.0 "GDK_KEY_space")
(CINT-3.0 "GDK_KEY_exclam")
(CINT-3.0 "GDK_KEY_quotedbl")
(CINT-3.0 "GDK_KEY_numbersign")
(CINT-3.0 "GDK_KEY_dollar")
(CINT-3.0 "GDK_KEY_percent")
(CINT-3.0 "GDK_KEY_ampersand")
(CINT-3.0 "GDK_KEY_apostrophe")
(CINT-3.0 "GDK_KEY_quoteright")
(CINT-3.0 "GDK_KEY_parenleft")
(CINT-3.0 "GDK_KEY_parenright")
(CINT-3.0 "GDK_KEY_asterisk")
(CINT-3.0 "GDK_KEY_plus")
(CINT-3.0 "GDK_KEY_comma")
(CINT-3.0 "GDK_KEY_minus")
(CINT-3.0 "GDK_KEY_period")
(CINT-3.0 "GDK_KEY_slash")
(CINT-3.0 "GDK_KEY_0")
(CINT-3.0 "GDK_KEY_1")
(CINT-3.0 "GDK_KEY_2")
(CINT-3.0 "GDK_KEY_3")
(CINT-3.0 "GDK_KEY_4")
(CINT-3.0 "GDK_KEY_5")
(CINT-3.0 "GDK_KEY_6")
(CINT-3.0 "GDK_KEY_7")
(CINT-3.0 "GDK_KEY_8")
(CINT-3.0 "GDK_KEY_9")
(CINT-3.0 "GDK_KEY_colon")
(CINT-3.0 "GDK_KEY_semicolon")
(CINT-3.0 "GDK_KEY_less")
(CINT-3.0 "GDK_KEY_equal")
(CINT-3.0 "GDK_KEY_greater")
(CINT-3.0 "GDK_KEY_question")
(CINT-3.0 "GDK_KEY_at")
(CINT-3.0 "GDK_KEY_A")
(CINT-3.0 "GDK_KEY_B")
(CINT-3.0 "GDK_KEY_C")
(CINT-3.0 "GDK_KEY_D")
(CINT-3.0 "GDK_KEY_E")
(CINT-3.0 "GDK_KEY_F")
(CINT-3.0 "GDK_KEY_G")
(CINT-3.0 "GDK_KEY_H")
(CINT-3.0 "GDK_KEY_I")
(CINT-3.0 "GDK_KEY_J")
(CINT-3.0 "GDK_KEY_K")
(CINT-3.0 "GDK_KEY_L")
(CINT-3.0 "GDK_KEY_M")
(CINT-3.0 "GDK_KEY_N")
(CINT-3.0 "GDK_KEY_O")
(CINT-3.0 "GDK_KEY_P")
(CINT-3.0 "GDK_KEY_Q")
(CINT-3.0 "GDK_KEY_R")
(CINT-3.0 "GDK_KEY_S")
(CINT-3.0 "GDK_KEY_T")
(CINT-3.0 "GDK_KEY_U")
(CINT-3.0 "GDK_KEY_V")
(CINT-3.0 "GDK_KEY_W")
(CINT-3.0 "GDK_KEY_X")
(CINT-3.0 "GDK_KEY_Y")
(CINT-3.0 "GDK_KEY_Z")
(CINT-3.0 "GDK_KEY_bracketleft")
(CINT-3.0 "GDK_KEY_backslash")
(CINT-3.0 "GDK_KEY_bracketright")
(CINT-3.0 "GDK_KEY_asciicircum")
(CINT-3.0 "GDK_KEY_underscore")
(CINT-3.0 "GDK_KEY_grave")
(CINT-3.0 "GDK_KEY_quoteleft")
(CINT-3.0 "GDK_KEY_a")
(CINT-3.0 "GDK_KEY_b")
(CINT-3.0 "GDK_KEY_c")
(CINT-3.0 "GDK_KEY_d")
(CINT-3.0 "GDK_KEY_e")
(CINT-3.0 "GDK_KEY_f")
(CINT-3.0 "GDK_KEY_g")
(CINT-3.0 "GDK_KEY_h")
(CINT-3.0 "GDK_KEY_i")
(CINT-3.0 "GDK_KEY_j")
(CINT-3.0 "GDK_KEY_k")
(CINT-3.0 "GDK_KEY_l")
(CINT-3.0 "GDK_KEY_m")
(CINT-3.0 "GDK_KEY_n")
(CINT-3.0 "GDK_KEY_o")
(CINT-3.0 "GDK_KEY_p")
(CINT-3.0 "GDK_KEY_q")
(CINT-3.0 "GDK_KEY_r")
(CINT-3.0 "GDK_KEY_s")
(CINT-3.0 "GDK_KEY_t")
(CINT-3.0 "GDK_KEY_u")
(CINT-3.0 "GDK_KEY_v")
(CINT-3.0 "GDK_KEY_w")
(CINT-3.0 "GDK_KEY_x")
(CINT-3.0 "GDK_KEY_y")
(CINT-3.0 "GDK_KEY_z")
(CINT-3.0 "GDK_KEY_braceleft")
(CINT-3.0 "GDK_KEY_bar")
(CINT-3.0 "GDK_KEY_braceright")
(CINT-3.0 "GDK_KEY_asciitilde")

;; gtk2 versions
;;; (CINT-gtk2 "GDK_VoidSymbol")
;;; (CINT-gtk2 "GDK_BackSpace")
;;; (CINT-gtk2 "GDK_Tab")
;;; (CINT-gtk2 "GDK_Linefeed")
;;; (CINT-gtk2 "GDK_Clear")
;;; (CINT-gtk2 "GDK_Return")
;;; (CINT-gtk2 "GDK_Pause")
;;; (CINT-gtk2 "GDK_Scroll_Lock")
;;; (CINT-gtk2 "GDK_Sys_Req")
;;; (CINT-gtk2 "GDK_Escape")
;;; (CINT-gtk2 "GDK_Delete")
;;; (CINT-gtk2 "GDK_Home")
;;; (CINT-gtk2 "GDK_Left")
;;; (CINT-gtk2 "GDK_Up")
;;; (CINT-gtk2 "GDK_Right")
;;; (CINT-gtk2 "GDK_Down")
;;; (CINT-gtk2 "GDK_Prior")
;;; (CINT-gtk2 "GDK_Page_Up")
;;; (CINT-gtk2 "GDK_Next")
;;; (CINT-gtk2 "GDK_Page_Down")
;;; (CINT-gtk2 "GDK_End")
;;; (CINT-gtk2 "GDK_Begin")
;;; (CINT-gtk2 "GDK_Select")
;;; (CINT-gtk2 "GDK_Print")
;;; (CINT-gtk2 "GDK_Execute")
;;; (CINT-gtk2 "GDK_Insert")
;;; (CINT-gtk2 "GDK_Undo")
;;; (CINT-gtk2 "GDK_Redo")
;;; (CINT-gtk2 "GDK_Menu")
;;; (CINT-gtk2 "GDK_Find")
;;; (CINT-gtk2 "GDK_Cancel")
;;; (CINT-gtk2 "GDK_Help")
;;; (CINT-gtk2 "GDK_Break")
;;; (CINT-gtk2 "GDK_Mode_switch")
;;; (CINT-gtk2 "GDK_script_switch")
;;; (CINT-gtk2 "GDK_Num_Lock")
;;; (CINT-gtk2 "GDK_KP_Space")
;;; (CINT-gtk2 "GDK_KP_Tab")
;;; (CINT-gtk2 "GDK_KP_Enter")
;;; (CINT-gtk2 "GDK_KP_F1")
;;; (CINT-gtk2 "GDK_KP_F2")
;;; (CINT-gtk2 "GDK_KP_F3")
;;; (CINT-gtk2 "GDK_KP_F4")
;;; (CINT-gtk2 "GDK_KP_Home")
;;; (CINT-gtk2 "GDK_KP_Left")
;;; (CINT-gtk2 "GDK_KP_Up")
;;; (CINT-gtk2 "GDK_KP_Right")
;;; (CINT-gtk2 "GDK_KP_Down")
;;; (CINT-gtk2 "GDK_KP_Prior")
;;; (CINT-gtk2 "GDK_KP_Page_Up")
;;; (CINT-gtk2 "GDK_KP_Next")
;;; (CINT-gtk2 "GDK_KP_Page_Down")
;;; (CINT-gtk2 "GDK_KP_End")
;;; (CINT-gtk2 "GDK_KP_Begin")
;;; (CINT-gtk2 "GDK_KP_Insert")
;;; (CINT-gtk2 "GDK_KP_Delete")
;;; (CINT-gtk2 "GDK_KP_Equal")
;;; (CINT-gtk2 "GDK_KP_Multiply")
;;; (CINT-gtk2 "GDK_KP_Add")
;;; (CINT-gtk2 "GDK_KP_Separator")
;;; (CINT-gtk2 "GDK_KP_Subtract")
;;; (CINT-gtk2 "GDK_KP_Decimal")
;;; (CINT-gtk2 "GDK_KP_Divide")
;;; (CINT-gtk2 "GDK_KP_0")
;;; (CINT-gtk2 "GDK_KP_1")
;;; (CINT-gtk2 "GDK_KP_2")
;;; (CINT-gtk2 "GDK_KP_3")
;;; (CINT-gtk2 "GDK_KP_4")
;;; (CINT-gtk2 "GDK_KP_5")
;;; (CINT-gtk2 "GDK_KP_6")
;;; (CINT-gtk2 "GDK_KP_7")
;;; (CINT-gtk2 "GDK_KP_8")
;;; (CINT-gtk2 "GDK_KP_9")
;;; (CINT-gtk2 "GDK_F1")
;;; (CINT-gtk2 "GDK_F2")
;;; (CINT-gtk2 "GDK_F3")
;;; (CINT-gtk2 "GDK_F4")
;;; (CINT-gtk2 "GDK_F5")
;;; (CINT-gtk2 "GDK_F6")
;;; (CINT-gtk2 "GDK_F7")
;;; (CINT-gtk2 "GDK_F8")
;;; (CINT-gtk2 "GDK_F9")
;;; (CINT-gtk2 "GDK_F10")
;;; (CINT-gtk2 "GDK_F11")
;;; (CINT-gtk2 "GDK_L1")
;;; (CINT-gtk2 "GDK_F12")
;;; (CINT-gtk2 "GDK_L2")
;;; (CINT-gtk2 "GDK_F13")
;;; (CINT-gtk2 "GDK_L3")
;;; (CINT-gtk2 "GDK_F14")
;;; (CINT-gtk2 "GDK_L4")
;;; (CINT-gtk2 "GDK_F15")
;;; (CINT-gtk2 "GDK_L5")
;;; (CINT-gtk2 "GDK_F16")
;;; (CINT-gtk2 "GDK_L6")
;;; (CINT-gtk2 "GDK_F17")
;;; (CINT-gtk2 "GDK_L7")
;;; (CINT-gtk2 "GDK_F18")
;;; (CINT-gtk2 "GDK_L8")
;;; (CINT-gtk2 "GDK_F19")
;;; (CINT-gtk2 "GDK_L9")
;;; (CINT-gtk2 "GDK_F20")
;;; (CINT-gtk2 "GDK_L10")
;;; (CINT-gtk2 "GDK_F21")
;;; (CINT-gtk2 "GDK_R1")
;;; (CINT-gtk2 "GDK_F22")
;;; (CINT-gtk2 "GDK_R2")
;;; (CINT-gtk2 "GDK_F23")
;;; (CINT-gtk2 "GDK_R3")
;;; (CINT-gtk2 "GDK_F24")
;;; (CINT-gtk2 "GDK_R4")
;;; (CINT-gtk2 "GDK_F25")
;;; (CINT-gtk2 "GDK_R5")
;;; (CINT-gtk2 "GDK_F26")
;;; (CINT-gtk2 "GDK_R6")
;;; (CINT-gtk2 "GDK_F27")
;;; (CINT-gtk2 "GDK_R7")
;;; (CINT-gtk2 "GDK_F28")
;;; (CINT-gtk2 "GDK_R8")
;;; (CINT-gtk2 "GDK_F29")
;;; (CINT-gtk2 "GDK_R9")
;;; (CINT-gtk2 "GDK_F30")
;;; (CINT-gtk2 "GDK_R10")
;;; (CINT-gtk2 "GDK_F31")
;;; (CINT-gtk2 "GDK_R11")
;;; (CINT-gtk2 "GDK_F32")
;;; (CINT-gtk2 "GDK_R12")
;;; (CINT-gtk2 "GDK_F33")
;;; (CINT-gtk2 "GDK_R13")
;;; (CINT-gtk2 "GDK_F34")
;;; (CINT-gtk2 "GDK_R14")
;;; (CINT-gtk2 "GDK_F35")
;;; (CINT-gtk2 "GDK_R15")
;;; (CINT-gtk2 "GDK_Shift_L")
;;; (CINT-gtk2 "GDK_Shift_R")
;;; (CINT-gtk2 "GDK_Control_L")
;;; (CINT-gtk2 "GDK_Control_R")
;;; (CINT-gtk2 "GDK_Caps_Lock")
;;; (CINT-gtk2 "GDK_Shift_Lock")
;;; (CINT-gtk2 "GDK_Meta_L")
;;; (CINT-gtk2 "GDK_Meta_R")
;;; (CINT-gtk2 "GDK_Alt_L")
;;; (CINT-gtk2 "GDK_Alt_R")
;;; (CINT-gtk2 "GDK_space")
;;; (CINT-gtk2 "GDK_exclam")
;;; (CINT-gtk2 "GDK_quotedbl")
;;; (CINT-gtk2 "GDK_numbersign")
;;; (CINT-gtk2 "GDK_dollar")
;;; (CINT-gtk2 "GDK_percent")
;;; (CINT-gtk2 "GDK_ampersand")
;;; (CINT-gtk2 "GDK_apostrophe")
;;; (CINT-gtk2 "GDK_quoteright")
;;; (CINT-gtk2 "GDK_parenleft")
;;; (CINT-gtk2 "GDK_parenright")
;;; (CINT-gtk2 "GDK_asterisk")
;;; (CINT-gtk2 "GDK_plus")
;;; (CINT-gtk2 "GDK_comma")
;;; (CINT-gtk2 "GDK_minus")
;;; (CINT-gtk2 "GDK_period")
;;; (CINT-gtk2 "GDK_slash")
;;; (CINT-gtk2 "GDK_0")
;;; (CINT-gtk2 "GDK_1")
;;; (CINT-gtk2 "GDK_2")
;;; (CINT-gtk2 "GDK_3")
;;; (CINT-gtk2 "GDK_4")
;;; (CINT-gtk2 "GDK_5")
;;; (CINT-gtk2 "GDK_6")
;;; (CINT-gtk2 "GDK_7")
;;; (CINT-gtk2 "GDK_8")
;;; (CINT-gtk2 "GDK_9")
;;; (CINT-gtk2 "GDK_colon")
;;; (CINT-gtk2 "GDK_semicolon")
;;; (CINT-gtk2 "GDK_less")
;;; (CINT-gtk2 "GDK_equal")
;;; (CINT-gtk2 "GDK_greater")
;;; (CINT-gtk2 "GDK_question")
;;; (CINT-gtk2 "GDK_at")
;;; (CINT-gtk2 "GDK_A")
;;; (CINT-gtk2 "GDK_B")
;;; (CINT-gtk2 "GDK_C")
;;; (CINT-gtk2 "GDK_D")
;;; (CINT-gtk2 "GDK_E")
;;; (CINT-gtk2 "GDK_F")
;;; (CINT-gtk2 "GDK_G")
;;; (CINT-gtk2 "GDK_H")
;;; (CINT-gtk2 "GDK_I")
;;; (CINT-gtk2 "GDK_J")
;;; (CINT-gtk2 "GDK_K")
;;; (CINT-gtk2 "GDK_L")
;;; (CINT-gtk2 "GDK_M")
;;; (CINT-gtk2 "GDK_N")
;;; (CINT-gtk2 "GDK_O")
;;; (CINT-gtk2 "GDK_P")
;;; (CINT-gtk2 "GDK_Q")
;;; (CINT-gtk2 "GDK_R")
;;; (CINT-gtk2 "GDK_S")
;;; (CINT-gtk2 "GDK_T")
;;; (CINT-gtk2 "GDK_U")
;;; (CINT-gtk2 "GDK_V")
;;; (CINT-gtk2 "GDK_W")
;;; (CINT-gtk2 "GDK_X")
;;; (CINT-gtk2 "GDK_Y")
;;; (CINT-gtk2 "GDK_Z")
;;; (CINT-gtk2 "GDK_bracketleft")
;;; (CINT-gtk2 "GDK_backslash")
;;; (CINT-gtk2 "GDK_bracketright")
;;; (CINT-gtk2 "GDK_asciicircum")
;;; (CINT-gtk2 "GDK_underscore")
;;; (CINT-gtk2 "GDK_grave")
;;; (CINT-gtk2 "GDK_quoteleft")
;;; (CINT-gtk2 "GDK_a")
;;; (CINT-gtk2 "GDK_b")
;;; (CINT-gtk2 "GDK_c")
;;; (CINT-gtk2 "GDK_d")
;;; (CINT-gtk2 "GDK_e")
;;; (CINT-gtk2 "GDK_f")
;;; (CINT-gtk2 "GDK_g")
;;; (CINT-gtk2 "GDK_h")
;;; (CINT-gtk2 "GDK_i")
;;; (CINT-gtk2 "GDK_j")
;;; (CINT-gtk2 "GDK_k")
;;; (CINT-gtk2 "GDK_l")
;;; (CINT-gtk2 "GDK_m")
;;; (CINT-gtk2 "GDK_n")
;;; (CINT-gtk2 "GDK_o")
;;; (CINT-gtk2 "GDK_p")
;;; (CINT-gtk2 "GDK_q")
;;; (CINT-gtk2 "GDK_r")
;;; (CINT-gtk2 "GDK_s")
;;; (CINT-gtk2 "GDK_t")
;;; (CINT-gtk2 "GDK_u")
;;; (CINT-gtk2 "GDK_v")
;;; (CINT-gtk2 "GDK_w")
;;; (CINT-gtk2 "GDK_x")
;;; (CINT-gtk2 "GDK_y")
;;; (CINT-gtk2 "GDK_z")
;;; (CINT-gtk2 "GDK_braceleft")
;;; (CINT-gtk2 "GDK_bar")
;;; (CINT-gtk2 "GDK_braceright")
;;; (CINT-gtk2 "GDK_asciitilde")

;;; 3.93.0 (CFNC "PangoContext* gdk_pango_context_get void")
;;; out 2.5.6 (CFNC "void gdk_pango_context_set_colormap PangoContext* context GdkColormap* colormap")
;;; 2.90.5 (CFNC "GdkRegion* gdk_pango_layout_line_get_clip_region PangoLayoutLine* line gint x_origin gint y_origin gint* index_ranges gint n_ranges")
;;; (CFNC "GdkRegion* gdk_pango_layout_get_clip_region PangoLayout* layout gint x_origin gint y_origin gint* index_ranges gint n_ranges")
;;; 2.90.6 (CFNC "PangoAttribute* gdk_pango_attr_stipple_new GdkBitmap* stipple")
;;; 2.90.6 (CFNC "PangoAttribute* gdk_pango_attr_embossed_new gboolean embossed")
;;; (CFNC-gtk2 "void gdk_pixbuf_render_threshold_alpha GdkPixbuf* pixbuf GdkBitmap* bitmap int src_x int src_y int dest_x int dest_y int width int height int alpha_threshold")
;;; 2.90.6 ;;; out 2.3 (CFNC "void gdk_pixbuf_render_to_drawable GdkPixbuf* pixbuf GdkDrawable* drawable GdkGC* gc int src_x int src_y int dest_x int dest_y int width int height GdkRgbDither dither int x_dither int y_dither")
;;; out 2.3 (CFNC "void gdk_pixbuf_render_to_drawable_alpha GdkPixbuf* pixbuf GdkDrawable* drawable int src_x int src_y int dest_x int dest_y int width int height GdkPixbufAlphaMode alpha_mode int alpha_threshold GdkRgbDither dither int x_dither int y_dither")
;;; (CFNC-gtk2 "void gdk_pixbuf_render_pixmap_and_mask_for_colormap GdkPixbuf* pixbuf GdkColormap* colormap GdkPixmap** [pixmap_return] GdkBitmap** [mask_return] int alpha_threshold")
;;; (CFNC-gtk2 "void gdk_pixbuf_render_pixmap_and_mask GdkPixbuf* pixbuf GdkPixmap** [pixmap_return] GdkBitmap** [mask_return] int alpha_threshold")
;;; (CFNC-gtk2 "GdkPixbuf* gdk_pixbuf_get_from_drawable GdkPixbuf* @dest GdkDrawable* src GdkColormap* @cmap int src_x int src_y int dest_x int dest_y int width int height")
;;; 2.90.6 (CFNC "GdkPixbuf* gdk_pixbuf_get_from_image GdkPixbuf* @dest GdkImage* src GdkColormap* @cmap int src_x int src_y int dest_x int dest_y int width int height")
;;; (CCAST-gtk2 "GDK_PIXMAP(object)" "GdkPixmap*")
;;; (CCHK-gtk2 "GDK_IS_PIXMAP(object)" "GdkPixmap*")
;;; 2.91.0 ;(CCAST2 "GDK_PIXMAP_OBJECT(object)")
;;;;(CFNC "GType gdk_pixmap_get_type void")

;;; 2.90.6 (CFNC "GdkPixmap* gdk_pixmap_new GdkDrawable* window gint width gint height gint depth")
;;; 2.90.6 (CFNC "GdkBitmap* gdk_bitmap_create_from_data GdkDrawable* window gchar* data gint width gint height")
;;; 2.90.6 (CFNC "GdkPixmap* gdk_pixmap_create_from_data GdkDrawable* window gchar* data gint width gint height gint depth GdkColor* fg GdkColor* bg")
;;; 2.90.6 (CFNC "GdkPixmap* gdk_pixmap_create_from_xpm GdkDrawable* window GdkBitmap** @mask GdkColor* transparent_color gchar* filename")
;;; 2.90.6 (CFNC "GdkPixmap* gdk_pixmap_colormap_create_from_xpm GdkDrawable* window GdkColormap* @colormap GdkBitmap** @mask GdkColor* transparent_color gchar* filename")
;;; 2.90.6 (CFNC "GdkPixmap* gdk_pixmap_create_from_xpm_d GdkDrawable* window GdkBitmap** @mask GdkColor* transparent_color gchar** data")
;;; 2.90.6 (CFNC "GdkPixmap* gdk_pixmap_colormap_create_from_xpm_d GdkDrawable* window GdkColormap* @colormap GdkBitmap** @mask GdkColor* transparent_color gchar** data")

;;; 2.91.0 (CFNC "GdkPixmap* gdk_pixmap_foreign_new GdkNativeWindow anid")
;;; 2.91.0 (CFNC "GdkPixmap* gdk_pixmap_lookup GdkNativeWindow anid")
;;; 3.93.0 (CINT "GDK_PROP_MODE_REPLACE" "GdkPropMode")
;;; 3.93.0 (CINT "GDK_PROP_MODE_PREPEND" "GdkPropMode")
;;; 3.93.0 (CINT "GDK_PROP_MODE_APPEND" "GdkPropMode")
;;; 3.93.0 (CFNC "GdkAtom gdk_atom_intern gchar* atom_name gboolean only_if_exists")
;;; 3.93.0 (CFNC "gchar* gdk_atom_name GdkAtom atom" 'free)
;;; ;(CFNC-gtk2 "gint gdk_text_property_to_text_list GdkAtom encoding gint format guchar* text gint length gchar*** list")
;;; ;(CFNC-gtk2 "gint gdk_text_property_to_utf8_list GdkAtom encoding gint format guchar* text gint length gchar*** list")
(CFNC "gchar* gdk_utf8_to_string_target gchar* str" 'free)
;;; ;(CFNC-gtk2 "gboolean gdk_utf8_to_compound_text gchar* str GdkAtom* encoding gint* format guchar** [ctext] gint* [length]")
;;; ;(CFNC-gtk2 "void gdk_free_text_list gchar** list")
;;; ;(CFNC-gtk2 "gint gdk_string_to_compound_text gchar* str GdkAtom* encoding gint* format guchar** [ctext] gint* [length]")
;;; ;(CFNC-gtk2 "void gdk_free_compound_text guchar* ctext")
;;; 2.90.5
;;; (CFNC "GdkRegion* gdk_region_new void")
;;; (CFNC "GdkRegion* gdk_region_polygon GdkPoint* points gint npoints GdkFillRule fill_rule")
;;; (CFNC "GdkRegion* gdk_region_copy GdkRegion* region")
;;; (CFNC "GdkRegion* gdk_region_rectangle GdkRectangle* rectangle")
;;; (CFNC "void gdk_region_destroy GdkRegion* region")
;;; (CFNC "void gdk_region_get_clipbox GdkRegion* region GdkRectangle* rectangle")
;;; (CFNC "void gdk_region_get_rectangles GdkRegion* region GdkRectangle** [rectangles] gint* [n_rectangles]") ; FREE: returned rect arr
;;; (CFNC "gboolean gdk_region_empty GdkRegion* region")
;;; (CFNC "gboolean gdk_region_equal GdkRegion* region1 GdkRegion* region2")
;;; (CFNC "gboolean gdk_region_point_in GdkRegion* region int x int y")
;;;; (CFNC "GdkOverlapType gdk_region_rect_in GdkRegion* region GdkRectangle* rect")
;;; (CFNC "void gdk_region_offset GdkRegion* region gint dx gint dy")
;;; (CFNC "void gdk_region_shrink GdkRegion* region gint dx gint dy")
;;; (CFNC "void gdk_region_union_with_rect GdkRegion* region GdkRectangle* rect")
;;; (CFNC "void gdk_region_intersect GdkRegion* source1 GdkRegion* source2")
;;; (CFNC "void gdk_region_union GdkRegion* source1 GdkRegion* source2")
;;; (CFNC "void gdk_region_subtract GdkRegion* source1 GdkRegion* source2")
;;; (CFNC "void gdk_region_xor GdkRegion* source1 GdkRegion* source2")
;;; ;(CFNC "void gdk_region_spans_intersect_foreach GdkRegion* region GdkSpan* spans int n_spans gboolean sorted GdkSpanFunc func lambda_data @func_info")
;;; (CFNC-gtk2 "void gdk_rgb_find_color GdkColormap* colormap GdkColor* color")
;;; 2.90.6 (CINT "GDK_RGB_DITHER_NONE" "GdkRgbDither")
;;; 2.90.6 (CINT "GDK_RGB_DITHER_NORMAL" "GdkRgbDither")
;;; 2.90.6 (CINT "GDK_RGB_DITHER_MAX" "GdkRgbDither")
;;; 2.90.6 (CFNC "void gdk_draw_rgb_image GdkDrawable* drawable GdkGC* gc gint x gint y gint width gint height GdkRgbDither dith guchar* rgb_buf gint rowstride")
;;; 2.90.6 (CFNC "void gdk_draw_rgb_image_dithalign GdkDrawable* drawable GdkGC* gc gint x gint y gint width gint height GdkRgbDither dith guchar* rgb_buf gint rowstride gint xdith gint ydith")
;;; 2.90.6 (CFNC "void gdk_draw_rgb_32_image GdkDrawable* drawable GdkGC* gc gint x gint y gint width gint height GdkRgbDither dith guchar* buf gint rowstride")
;;; 2.90.6 (CFNC "void gdk_draw_rgb_32_image_dithalign GdkDrawable* drawable GdkGC* gc gint x gint y gint width gint height GdkRgbDither dith guchar* buf gint rowstride gint xdith gint ydith")
;;; 2.90.6 (CFNC "void gdk_draw_gray_image GdkDrawable* drawable GdkGC* gc gint x gint y gint width gint height GdkRgbDither dith guchar* buf gint rowstride")
;;; 2.90.6 (CFNC "void gdk_draw_indexed_image GdkDrawable* drawable GdkGC* gc gint x gint y gint width gint height GdkRgbDither dith guchar* buf gint rowstride GdkRgbCmap* cmap")
;;; 2.90.6 (CFNC "GdkRgbCmap* gdk_rgb_cmap_new guint32* colors gint n_colors")
;;; 2.90.6 (CFNC "void gdk_rgb_cmap_free GdkRgbCmap* cmap")
;;; 2.90.6 (CFNC "gboolean gdk_rgb_ditherable void")
;;; 2.90.6 (CFNC "void gdk_rgb_set_verbose gboolean verbose")
;;; 2.90.6 (CFNC "void gdk_rgb_set_install gboolean install")
;;; 2.90.6 (CFNC "void gdk_rgb_set_min_colors gint min_colors")
;;; 2.90.6 (CFNC "GdkColormap* gdk_rgb_get_colormap void")
;;; 2.90.6 (CFNC "GdkVisual* gdk_rgb_get_visual void")
;;; atoms from gdk/gdkselection.h
;;; 3.93.0 (CATOM "GDK_SELECTION_PRIMARY")
;;; 3.93.0 (CATOM "GDK_SELECTION_SECONDARY")
;;; 3.93.0 (CATOM "GDK_SELECTION_CLIPBOARD")
;;; 3.93.0 (CATOM "GDK_TARGET_BITMAP")
;;; 2.91.0 (CATOM "GDK_TARGET_COLORMAP")
;;; 3.93.0 (CATOM "GDK_TARGET_DRAWABLE")
;;; 2.91.0 (CATOM "GDK_TARGET_PIXMAP")
;;; 3.93.0 (CATOM "GDK_TARGET_STRING")
;;; 3.93.0 (CATOM "GDK_SELECTION_TYPE_ATOM")
;;; 3.93.0 (CATOM "GDK_SELECTION_TYPE_BITMAP")
;;; 2.91.0 (CATOM "GDK_SELECTION_TYPE_COLORMAP")
;;; 3.93.0 (CATOM "GDK_SELECTION_TYPE_DRAWABLE")
;;; 3.93.0 (CATOM "GDK_SELECTION_TYPE_INTEGER")
;;; 2.91.0 (CATOM "GDK_SELECTION_TYPE_PIXMAP")
;;; 3.93.0 (CATOM "GDK_SELECTION_TYPE_WINDOW")
;;; 3.93.0 (CATOM "GDK_SELECTION_TYPE_STRING")
;;; 2.99.3 (CFNC "void gdk_selection_send_notify guint32 requestor GdkAtom selection GdkAtom target GdkAtom property guint32 time")
(CINT "GDK_CURRENT_TIME")
(CINT "GDK_PARENT_RELATIVE")
;(CCAST2 "GDK_ATOM_TO_POINTER(atom)")
;(CCAST2 "GDK_POINTER_TO_ATOM(ptr)")
;;; 3.93.0 (CATOM "GDK_NONE")
(CINT "GDK_LSB_FIRST" "GdkByteOrder")
(CINT "GDK_MSB_FIRST" "GdkByteOrder")
(CINT "GDK_SHIFT_MASK" "GdkModifierType")
(CINT "GDK_LOCK_MASK" "GdkModifierType")
(CINT "GDK_CONTROL_MASK" "GdkModifierType")
(CINT "GDK_MOD1_MASK" "GdkModifierType")
(CINT "GDK_MOD2_MASK" "GdkModifierType")
(CINT "GDK_MOD3_MASK" "GdkModifierType")
(CINT "GDK_MOD4_MASK" "GdkModifierType")
(CINT "GDK_MOD5_MASK" "GdkModifierType")
(CINT "GDK_BUTTON1_MASK" "GdkModifierType")
(CINT "GDK_BUTTON2_MASK" "GdkModifierType")
(CINT "GDK_BUTTON3_MASK" "GdkModifierType")
(CINT "GDK_BUTTON4_MASK" "GdkModifierType")
(CINT "GDK_BUTTON5_MASK" "GdkModifierType")
(CINT "GDK_RELEASE_MASK" "GdkModifierType")
(CINT "GDK_MODIFIER_MASK" "GdkModifierType")
;;; 2.90.4
;;; (CINT "GDK_INPUT_READ" "GdkInputCondition")
;;; (CINT "GDK_INPUT_WRITE" "GdkInputCondition")
;;; (CINT "GDK_INPUT_EXCEPTION" "GdkInputCondition")
;;; 3.94.0 (CINT "GDK_OK" "GdkStatus")
;;; 3.94.0 (CINT "GDK_ERROR" "GdkStatus")
;;; 3.94.0 (CINT "GDK_ERROR_PARAM" "GdkStatus")
;;; 3.94.0 (CINT "GDK_ERROR_FILE" "GdkStatus")
;;; 3.94.0 (CINT "GDK_ERROR_MEM" "GdkStatus")
(CINT "GDK_GRAB_SUCCESS" "GdkGrabStatus")
(CINT "GDK_GRAB_ALREADY_GRABBED" "GdkGrabStatus")
(CINT "GDK_GRAB_INVALID_TIME" "GdkGrabStatus")
(CINT "GDK_GRAB_NOT_VIEWABLE" "GdkGrabStatus")
(CINT "GDK_GRAB_FROZEN" "GdkGrabStatus")
;;; 3.89 (CCAST "GDK_VISUAL(object)" "GdkVisual*")
;;; 3.89 (CCHK "GDK_IS_VISUAL(object)" "GdkVisual*")
;;; 3.89 (CINT "GDK_VISUAL_STATIC_GRAY" "GdkVisualType")
;;; 3.89 (CINT "GDK_VISUAL_GRAYSCALE" "GdkVisualType")
;;; 3.89 (CINT "GDK_VISUAL_STATIC_COLOR" "GdkVisualType")
;;; 3.89 (CINT "GDK_VISUAL_PSEUDO_COLOR" "GdkVisualType")
;;; 3.89 (CINT "GDK_VISUAL_TRUE_COLOR" "GdkVisualType")
;;; 3.89 (CINT "GDK_VISUAL_DIRECT_COLOR" "GdkVisualType")
;;;;(CFNC "GType gdk_visual_get_type void")
;;; 3.22.3 (CFNC "gint gdk_visual_get_best_depth void")
;;; 3.22.3 (CFNC "GdkVisualType gdk_visual_get_best_type void")
;;; 3.22.3 ;(CFNC "GdkVisual* gdk_visual_get_system void") -- moved up
;;; 3.22.3 (CFNC "GdkVisual* gdk_visual_get_best void")
;;; 3.22.3 (CFNC "GdkVisual* gdk_visual_get_best_with_depth gint depth")
;;; 3.22.3 (CFNC "GdkVisual* gdk_visual_get_best_with_type GdkVisualType visual_type")
;;; 3.22.3 (CFNC "GdkVisual* gdk_visual_get_best_with_both gint depth GdkVisualType visual_type")
;;; 3.22.3 (CFNC "void gdk_query_depths gint** [depths] gint* [count]")
;;; 3.22.3 (CFNC "void gdk_query_visual_types GdkVisualType** [visual_types] gint* [count]")
;;; 3.22.3 (CFNC "GList* gdk_list_visuals void")


(CINT "GDK_DECOR_ALL" "GdkWMDecoration")
(CINT "GDK_DECOR_BORDER" "GdkWMDecoration")
(CINT "GDK_DECOR_RESIZEH" "GdkWMDecoration")
(CINT "GDK_DECOR_TITLE" "GdkWMDecoration")
(CINT "GDK_DECOR_MENU" "GdkWMDecoration")
(CINT "GDK_DECOR_MINIMIZE" "GdkWMDecoration")
(CINT "GDK_DECOR_MAXIMIZE" "GdkWMDecoration")
(CINT "GDK_FUNC_ALL" "GdkWMFunction")
(CINT "GDK_FUNC_RESIZE" "GdkWMFunction")
(CINT "GDK_FUNC_MOVE" "GdkWMFunction")
(CINT "GDK_FUNC_MINIMIZE" "GdkWMFunction")
(CINT "GDK_FUNC_MAXIMIZE" "GdkWMFunction")
(CINT "GDK_FUNC_CLOSE" "GdkWMFunction")
(CINT "GDK_GRAVITY_NORTH_WEST" "GdkGravity")
(CINT "GDK_GRAVITY_NORTH" "GdkGravity")
(CINT "GDK_GRAVITY_NORTH_EAST" "GdkGravity")
(CINT "GDK_GRAVITY_WEST" "GdkGravity")
(CINT "GDK_GRAVITY_CENTER" "GdkGravity")
(CINT "GDK_GRAVITY_EAST" "GdkGravity")
(CINT "GDK_GRAVITY_SOUTH_WEST" "GdkGravity")
(CINT "GDK_GRAVITY_SOUTH" "GdkGravity")
(CINT "GDK_GRAVITY_SOUTH_EAST" "GdkGravity")
(CINT "GDK_GRAVITY_STATIC" "GdkGravity")

;;; gdk-pixbuf
(CFNC "GQuark gdk_pixbuf_error_quark void") 
;;;;(CFNC "GType gdk_pixbuf_get_type void") 
(CFNC "GdkColorspace gdk_pixbuf_get_colorspace GdkPixbuf* pixbuf")
(CFNC "int gdk_pixbuf_get_n_channels GdkPixbuf* pixbuf")
(CFNC "gboolean gdk_pixbuf_get_has_alpha GdkPixbuf* pixbuf")
(CFNC "int gdk_pixbuf_get_bits_per_sample GdkPixbuf* pixbuf")
(CFNC "guchar* gdk_pixbuf_get_pixels GdkPixbuf* pixbuf")
(CFNC "int gdk_pixbuf_get_width GdkPixbuf* pixbuf")
(CFNC "int gdk_pixbuf_get_height GdkPixbuf* pixbuf")
(CFNC "int gdk_pixbuf_get_rowstride GdkPixbuf* pixbuf")
(CFNC "GdkPixbuf* gdk_pixbuf_new GdkColorspace colorspace gboolean has_alpha int bits_per_sample int width int height")
(CFNC "GdkPixbuf* gdk_pixbuf_copy GdkPixbuf* pixbuf")
(CFNC "GdkPixbuf* gdk_pixbuf_new_subpixbuf GdkPixbuf* src_pixbuf int src_x int src_y int width int height")
(CFNC "GdkPixbuf* gdk_pixbuf_new_from_file char* filename GError** [error]")
(CFNC "GdkPixbuf* gdk_pixbuf_new_from_data guchar* data GdkColorspace colorspace gboolean has_alpha int bits_per_sample int width int height int rowstride GdkPixbufDestroyNotify destroy_fn gpointer destroy_fn_data")
(CFNC "GdkPixbuf* gdk_pixbuf_new_from_xpm_data char** data" 'const)
;;; 3.16.0 (CFNC "GdkPixbuf* gdk_pixbuf_new_from_inline gint data_length guint8* data gboolean copy_pixels GError** [error]")
(CFNC "void gdk_pixbuf_fill GdkPixbuf* pixbuf guint32 pixel")
;;; (CFNC "gboolean gdk_pixbuf_save GdkPixbuf* pixbuf char* filename char* type GError** [error] ...")
(CFNC "gboolean gdk_pixbuf_savev GdkPixbuf* pixbuf char* filename char* type char** option_keys char** option_values GError** [error]")
(CFNC "GdkPixbuf* gdk_pixbuf_add_alpha GdkPixbuf* pixbuf gboolean substitute_color guchar r guchar g guchar b")
(CFNC "void gdk_pixbuf_copy_area GdkPixbuf* src_pixbuf int src_x int src_y int width int height GdkPixbuf* dest_pixbuf int dest_x int dest_y")
(CFNC "void gdk_pixbuf_saturate_and_pixelate GdkPixbuf* src GdkPixbuf* dest gfloat saturation gboolean pixelate") 
(CFNC "void gdk_pixbuf_scale GdkPixbuf* src GdkPixbuf* dest int dest_x int dest_y int dest_width int dest_height double offset_x double offset_y double scale_x double scale_y GdkInterpType interp_type")
(CFNC "void gdk_pixbuf_composite GdkPixbuf* src GdkPixbuf* dest int dest_x int dest_y int dest_width int dest_height double offset_x double offset_y double scale_x double scale_y GdkInterpType interp_type int overall_alpha")
(CFNC "void gdk_pixbuf_composite_color GdkPixbuf* src GdkPixbuf* dest int dest_x int dest_y int dest_width int dest_height double offset_x double offset_y double scale_x double scale_y GdkInterpType interp_type int overall_alpha int check_x int check_y int check_size guint32 color1 guint32 color2")
(CFNC "GdkPixbuf* gdk_pixbuf_scale_simple GdkPixbuf* src int dest_width int dest_height GdkInterpType interp_type")
(CFNC "GdkPixbuf* gdk_pixbuf_composite_color_simple GdkPixbuf* src int dest_width int dest_height GdkInterpType interp_type int overall_alpha int check_size guint32 color1 guint32 color2")
;;;;(CFNC "GType gdk_pixbuf_animation_get_type void") 
;;; 3.93.0 (CFNC "GdkPixbufAnimation* gdk_pixbuf_animation_new_from_file char* filename GError** [error]")
;;; 3.93.0 (CFNC "int gdk_pixbuf_animation_get_width GdkPixbufAnimation* animation")
;;; 3.93.0 (CFNC "int gdk_pixbuf_animation_get_height GdkPixbufAnimation* animation")
;;; 3.93.0 (CFNC "gboolean gdk_pixbuf_animation_is_static_image GdkPixbufAnimation* animation")
;;; 3.93.0 (CFNC "GdkPixbuf* gdk_pixbuf_animation_get_static_image GdkPixbufAnimation* animation")
;;; 3.93.0 (CFNC "GdkPixbufAnimationIter* gdk_pixbuf_animation_get_iter GdkPixbufAnimation* animation GTimeVal* start_time")
;;; 3.93.0 ;;;;(CFNC "GType gdk_pixbuf_animation_iter_get_type void") 
;;; 3.93.0 (CFNC "int gdk_pixbuf_animation_iter_get_delay_time GdkPixbufAnimationIter* iter")
;;; 3.93.0 (CFNC "GdkPixbuf* gdk_pixbuf_animation_iter_get_pixbuf GdkPixbufAnimationIter* iter")
;;; 3.93.0 (CFNC "gboolean gdk_pixbuf_animation_iter_on_currently_loading_frame GdkPixbufAnimationIter* iter")
;;; 3.93.0 (CFNC "gboolean gdk_pixbuf_animation_iter_advance GdkPixbufAnimationIter* iter GTimeVal* current_time")
(CFNC "gchar* gdk_pixbuf_get_option GdkPixbuf* pixbuf gchar* key")
;;; (CFNC "gboolean gdk_pixbuf_set_option GdkPixbuf* pixbuf gchar* key gchar* value")

; surely these loaders are internal?
;;;;(CFNC "GType gdk_pixbuf_loader_get_type void") 
;(CFNC "GdkPixbufLoader* gdk_pixbuf_loader_new void")
;(CFNC "GdkPixbufLoader* gdk_pixbuf_loader_new_with_type char* image_type GError** [error]")
;(CFNC "gboolean gdk_pixbuf_loader_write GdkPixbufLoader* loader guchar* buf gsize count GError** [error]")
;(CFNC "GdkPixbuf* gdk_pixbuf_loader_get_pixbuf GdkPixbufLoader* loader")
;(CFNC "GdkPixbufAnimation* gdk_pixbuf_loader_get_animation GdkPixbufLoader* loader")
;(CFNC "gboolean gdk_pixbuf_loader_close GdkPixbufLoader* loader GError** [error]")
;;; 2.91.6 ;(CLNG "GDK_TYPE_PIXBUF_LOADER")
;(CCAST "GDK_PIXBUF_LOADER(obj)" "GdkPixbufLoader*")
;(CCHK "GDK_IS_PIXBUF_LOADER(obj)" "GdkPixbufLoader*")

(CINT "GDK_PIXBUF_ALPHA_BILEVEL" "GdkPixbufAlphaMode")
(CINT "GDK_PIXBUF_ALPHA_FULL" "GdkPixbufAlphaMode")
(CINT "GDK_COLORSPACE_RGB" "GdkColorspace")
;;; 2.91.6 (CLNG "GDK_TYPE_PIXBUF")
(CCAST "GDK_PIXBUF(object)" "GdkPixbuf*")
(CCHK "GDK_IS_PIXBUF(object)" "GdkPixbuf*")
;;; 2.91.6 (CLNG "GDK_TYPE_PIXBUF_ANIMATION")
;;; 3.93.0 (CCAST "GDK_PIXBUF_ANIMATION(object)" "GdkPixbufAnimation*")
;;; 3.93.0 (CCHK "GDK_IS_PIXBUF_ANIMATION(object)" "GdkPixbufAnimation*")
;;; 2.91.6 (CLNG "GDK_TYPE_PIXBUF_ANIMATION_ITER")
;;; 3.93.0 (CCAST "GDK_PIXBUF_ANIMATION_ITER(object)" "GdkPixbufAnimationIter*")
;;; 3.93.0 (CCHK "GDK_IS_PIXBUF_ANIMATION_ITER(object)" "GdkPixbufAnimationIter*")
;;; (CLNG "GDK_PIXBUF_ERROR")
(CINT "GDK_PIXBUF_ERROR_CORRUPT_IMAGE" "GdkPixbufError")
(CINT "GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY" "GdkPixbufError")
(CINT "GDK_PIXBUF_ERROR_BAD_OPTION" "GdkPixbufError")
(CINT "GDK_PIXBUF_ERROR_UNKNOWN_TYPE" "GdkPixbufError")
(CINT "GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION" "GdkPixbufError")
(CINT "GDK_PIXBUF_ERROR_FAILED" "GdkPixbufError")
(CINT "GDK_INTERP_NEAREST" "GdkInterpType")
(CINT "GDK_INTERP_TILES" "GdkInterpType")
(CINT "GDK_INTERP_BILINEAR" "GdkInterpType")
(CINT "GDK_INTERP_HYPER" "GdkInterpType")
;;;; (CINT "GDK_PIXBUF_MAJOR")
;;;; (CINT "GDK_PIXBUF_MINOR")
;;;; (CINT "GDK_PIXBUF_MICRO")
;;;; (CSTR "GDK_PIXBUF_VERSION")
;;;;(CFNC "GType gdk_pixbuf_alpha_mode_get_type void")
;;; 2.91.6 (CLNG "GDK_TYPE_PIXBUF_ALPHA_MODE")
;;;;(CFNC "GType gdk_colorspace_get_type void")
;;; 2.91.6 (CLNG "GDK_TYPE_COLORSPACE")
;;;;(CFNC "GType gdk_pixbuf_error_get_type void")
;;; 2.91.6 (CLNG "GDK_TYPE_PIXBUF_ERROR")
;;;;(CFNC "GType gdk_interp_type_get_type void")
;;; 2.91.6 (CLNG "GDK_TYPE_INTERP_TYPE")


;;; 3.1.6 (CCAST "GTK_VBOX(obj)" "GtkVBox*")
;;; 3.1.6 (CCHK "GTK_IS_VBOX(obj)" "GtkVBox*")
;;; 3.1.6 ;;;;(CFNC "GType gtk_vbox_get_type void")
;;; 3.1.6 (CFNC "GtkWidget* gtk_vbox_new gboolean homogeneous gint spacing")
(CCAST "GTK_ACCEL_GROUP(object)" "GtkAccelGroup*")
(CCHK "GTK_IS_ACCEL_GROUP(object)" "GtkAccelGroup*")
(CINT "GTK_ACCEL_VISIBLE" "GtkAccelFlags")
(CINT "GTK_ACCEL_LOCKED" "GtkAccelFlags")
(CINT "GTK_ACCEL_MASK" "GtkAccelFlags")
;;;;(CFNC "GType gtk_accel_group_get_type void")
(CFNC "GtkAccelGroup* gtk_accel_group_new void")
(CFNC "void gtk_accel_group_lock GtkAccelGroup* accel_group")
(CFNC "void gtk_accel_group_unlock GtkAccelGroup* accel_group")
(CFNC "void gtk_accel_group_connect GtkAccelGroup* accel_group guint accel_key GdkModifierType accel_mods GtkAccelFlags accel_flags GClosure* @closure")
(CFNC "void gtk_accel_group_connect_by_path GtkAccelGroup* accel_group gchar* accel_path GClosure* @closure")
(CFNC "gboolean gtk_accel_group_disconnect GtkAccelGroup* accel_group GClosure* @closure")
(CFNC "gboolean gtk_accel_group_disconnect_key GtkAccelGroup* accel_group guint accel_key GdkModifierType accel_mods")
(CFNC "gboolean gtk_accel_groups_activate GObject* object guint accel_key GdkModifierType accel_mods")
(CFNC "GSList* gtk_accel_groups_from_object GObject* object")
(CFNC "GtkAccelKey* gtk_accel_group_find GtkAccelGroup* accel_group lambda3 func lambda_data @func_info")
(CFNC "GtkAccelGroup* gtk_accel_group_from_accel_closure GClosure* @closure")
(CFNC "gboolean gtk_accelerator_valid guint keyval GdkModifierType modifiers")
(CFNC "void gtk_accelerator_parse gchar* accelerator guint* [accelerator_key] GdkModifierType* [accelerator_mods]")
(CFNC "gchar* gtk_accelerator_name guint accelerator_key GdkModifierType accelerator_mods" 'free)
(CFNC "void gtk_accelerator_set_default_mod_mask GdkModifierType default_mod_mask")
;;; 2.91.1 (CFNC "guint gtk_accelerator_get_default_mod_mask void")
(CFNC "GtkAccelGroupEntry* gtk_accel_group_query GtkAccelGroup* accel_group guint accel_key GdkModifierType accel_mods guint* [n_entries]")
(CFNC "gboolean gtk_accel_group_activate GtkAccelGroup* accel_group GQuark accel_quark GObject* acceleratable guint accel_key GdkModifierType accel_mods")
(CCAST "GTK_ACCEL_LABEL(obj)" "GtkAccelLabel*")
(CCHK "GTK_IS_ACCEL_LABEL(obj)" "GtkAccelLabel*")
;;;;(CFNC "GType gtk_accel_label_get_type void")
(CFNC "GtkWidget* gtk_accel_label_new gchar* string")
(CFNC "GtkWidget* gtk_accel_label_get_accel_widget GtkAccelLabel* accel_label")
(CFNC "guint gtk_accel_label_get_accel_width GtkAccelLabel* accel_label")
(CFNC "void gtk_accel_label_set_accel_widget GtkAccelLabel* accel_label GtkWidget* accel_widget")
(CFNC "void gtk_accel_label_set_accel_closure GtkAccelLabel* accel_label GClosure* @closure")
(CFNC "gboolean gtk_accel_label_refetch GtkAccelLabel* accel_label")
(CFNC "void gtk_accel_map_add_entry gchar* accel_path guint accel_key GdkModifierType accel_mods")
(CFNC "gboolean gtk_accel_map_lookup_entry gchar* accel_path GtkAccelKey* key")
(CFNC "gboolean gtk_accel_map_change_entry gchar* accel_path guint accel_key GdkModifierType accel_mods gboolean replace")
(CFNC "void gtk_accel_map_load gchar* file_name")
(CFNC "void gtk_accel_map_save gchar* file_name")
(CFNC "void gtk_accel_map_foreach lambda_data @func_info GtkAccelMapForeach func")
(CFNC "void gtk_accel_map_load_fd gint fd")
;;; (CFNC "void gtk_accel_map_load_scanner GScanner* scanner")
(CFNC "void gtk_accel_map_save_fd gint fd")
(CFNC "void gtk_accel_map_add_filter gchar* filter_pattern")
(CFNC "void gtk_accel_map_foreach_unfiltered lambda_data @func_info GtkAccelMapForeach func")
(CCAST "GTK_ACCESSIBLE(obj)" "GtkAccessible*")
(CCHK "GTK_IS_ACCESSIBLE(obj)" "GtkAccessible*")
;;;;(CFNC "GType gtk_accessible_get_type void")
;;; 3.3.6 (CFNC "void gtk_accessible_connect_widget_destroyed GtkAccessible* accessible")
(CCAST "GTK_ADJUSTMENT(obj)" "GtkAdjustment*")
(CCHK "GTK_IS_ADJUSTMENT(obj)" "GtkAdjustment*")
;;;;(CFNC "GType gtk_adjustment_get_type void")

;;; (CFNC-gtk2 "GtkObject* gtk_adjustment_new gdouble value gdouble lower gdouble upper gdouble step_increment gdouble page_increment gdouble page_size")

;;; 3.18.0 (CFNC "void gtk_adjustment_changed GtkAdjustment* adjustment")
;;; 3.18.0 (CFNC "void gtk_adjustment_value_changed GtkAdjustment* adjustment")
(CFNC "void gtk_adjustment_clamp_page GtkAdjustment* adjustment gdouble lower gdouble upper")
(CFNC "gdouble gtk_adjustment_get_value GtkAdjustment* adjustment")
(CFNC "void gtk_adjustment_set_value GtkAdjustment* adjustment gdouble value")
;;; 3.13.2 (CCAST "GTK_ALIGNMENT(obj)" "GtkAlignment*")
;;; 3.13.2 (CCHK "GTK_IS_ALIGNMENT(obj)" "GtkAlignment*")
;;; 3.13.2 ;;;;(CFNC "GType gtk_alignment_get_type void")
;;; 3.13.2 (CFNC "GtkWidget* gtk_alignment_new gfloat xalign gfloat yalign gfloat xscale gfloat yscale")
;;; 3.13.2 (CFNC "void gtk_alignment_set GtkAlignment* alignment gfloat xalign gfloat yalign gfloat xscale gfloat yscale")
;;; 3.13.2 (CCAST "GTK_ARROW(obj)" "GtkArrow*")
;;; 3.13.2 (CCHK "GTK_IS_ARROW(obj)" "GtkArrow*")
;;;;(CFNC "GType gtk_arrow_get_type void")
;;; 3.13.2 (CFNC "GtkWidget* gtk_arrow_new GtkArrowType arrow_type GtkShadowType shadow_type")
;;; 3.13.2 (CFNC "void gtk_arrow_set GtkArrow* arrow GtkArrowType arrow_type GtkShadowType shadow_type")
(CCAST "GTK_ASPECT_FRAME(obj)" "GtkAspectFrame*")
(CCHK "GTK_IS_ASPECT_FRAME(obj)" "GtkAspectFrame*")
;;;;(CFNC "GType gtk_aspect_frame_get_type void")
(CFNC "GtkWidget* gtk_aspect_frame_new gchar* label gfloat xalign gfloat yalign gfloat ratio gboolean obey_child")
(CFNC "void gtk_aspect_frame_set GtkAspectFrame* aspect_frame gfloat xalign gfloat yalign gfloat ratio gboolean obey_child")
;;; 3.96.0 (CCAST "GTK_BUTTON_BOX(obj)" "GtkButtonBox*")
;;; 3.96.0 (CCHK "GTK_IS_BUTTON_BOX(obj)" "GtkButtonBox*")
;;; 2.90.6 (CINT "GTK_BUTTONBOX_DEFAULT")
;;;;(CFNC "GType gtk_button_box_get_type void")
;;; 3.96.0 (CFNC "GtkButtonBoxStyle gtk_button_box_get_layout GtkButtonBox* widget")
;;; 3.96.0 (CFNC "void gtk_button_box_set_layout GtkButtonBox* widget GtkButtonBoxStyle layout_style")
;;; 3.96.0 (CFNC "void gtk_button_box_set_child_secondary GtkButtonBox* widget GtkWidget* child gboolean is_secondary")
(CFNC "GtkBindingSet* gtk_binding_set_new gchar* set_name")
(CFNC "GtkBindingSet* gtk_binding_set_by_class gpointer object_class")
(CFNC "GtkBindingSet* gtk_binding_set_find gchar* set_name")
;;; (CFNC-gtk2 "gboolean gtk_bindings_activate GtkObject* object guint keyval GdkModifierType modifiers")
;;; (CFNC-gtk2 "gboolean gtk_binding_set_activate GtkBindingSet* binding_set guint keyval GdkModifierType modifiers GtkObject* object")

;;; (CFNC "void gtk_binding_entry_clear GtkBindingSet* binding_set guint keyval GdkModifierType modifiers") ; out 2.11.0
;;; (CFNC "void gtk_binding_entry_add_signal GtkBindingSet* binding_set guint keyval GdkModifierType modifiers gchar* signal_name guint n_args ...")
;;; 2.99.3 (CFNC "void gtk_binding_set_add_path GtkBindingSet* binding_set GtkPathType path_type gchar* path_pattern GtkPathPriorityType priority")
(CFNC "void gtk_binding_entry_remove GtkBindingSet* binding_set guint keyval GdkModifierType modifiers")
;;; (CFNC "void gtk_binding_entry_add_signall GtkBindingSet* binding_set guint keyval GdkModifierType modifiers gchar* signal_name GSList* binding_args") ; out 2.11.0
;;; (CFNC "guint gtk_binding_parse_binding GScanner* scanner")
(CCAST "GTK_BIN(obj)" "GtkBin*")
(CCHK "GTK_IS_BIN(obj)" "GtkBin*")
;;;;(CFNC "GType gtk_bin_get_type void")
(CFNC "GtkWidget* gtk_bin_get_child GtkBin* bin")
(CCAST "GTK_BOX(obj)" "GtkBox*")
(CCHK "GTK_IS_BOX(obj)" "GtkBox*")
;;;;(CFNC "GType gtk_box_get_type void")
;;; 3.91.0 (CFNC "void gtk_box_pack_start GtkBox* box GtkWidget* child gboolean expand gboolean fill guint padding")
;;; 3.91.0 (CFNC "void gtk_box_pack_end GtkBox* box GtkWidget* child gboolean expand gboolean fill guint padding")
;;; out 2.13.5 (CFNC "void gtk_box_pack_start_defaults GtkBox* box GtkWidget* widget")
;;; out 2.13.5 (CFNC "void gtk_box_pack_end_defaults GtkBox* box GtkWidget* widget")
(CFNC "void gtk_box_set_homogeneous GtkBox* box gboolean homogeneous")
(CFNC "gboolean gtk_box_get_homogeneous GtkBox* box")
(CFNC "void gtk_box_set_spacing GtkBox* box gint spacing")
(CFNC "gint gtk_box_get_spacing GtkBox* box")
;;; 3.96.0 (CFNC "void gtk_box_reorder_child GtkBox* box GtkWidget* child gint position")
;;; 3.92.1 (CFNC "void gtk_box_query_child_packing GtkBox* box GtkWidget* child gboolean* [expand] gboolean* [fill] guint* [padding] GtkPackType* [pack_type]")
;;; different args
;;; 3.92.1 (CFNC "void gtk_box_set_child_packing GtkBox* box GtkWidget* child gboolean expand gboolean fill guint padding GtkPackType pack_type")
;;; same
(CCAST "GTK_BUTTON(obj)" "GtkButton*")
(CCHK "GTK_IS_BUTTON(obj)" "GtkButton*")
;;;;(CFNC "GType gtk_button_get_type void")
(CFNC "GtkWidget* gtk_button_new void")
(CFNC "GtkWidget* gtk_button_new_with_label gchar* label")
;;; 3.9.8 (CFNC "GtkWidget* gtk_button_new_from_stock gchar* stock_id")
(CFNC "GtkWidget* gtk_button_new_with_mnemonic gchar* label")
;;; out 2.19.0 (CFNC "void gtk_button_pressed GtkButton* button")
;;; (CFNC "void gtk_button_released GtkButton* button")
(CFNC "void gtk_button_clicked GtkButton* button")
;;; (CFNC "void gtk_button_enter GtkButton* button")
;;; (CFNC "void gtk_button_leave GtkButton* button")
(CFNC "void gtk_button_set_relief GtkButton* button GtkReliefStyle newstyle")
(CFNC "GtkReliefStyle gtk_button_get_relief GtkButton* button")
(CFNC "void gtk_button_set_label GtkButton* button gchar* label")
(CFNC "gchar* gtk_button_get_label GtkButton* button")
(CFNC "void gtk_button_set_use_underline GtkButton* button gboolean use_underline")
(CFNC "gboolean gtk_button_get_use_underline GtkButton* button")
;;; 3.9.8 (CFNC "void gtk_button_set_use_stock GtkButton* button gboolean use_stock")
;;; 3.9.8 (CFNC "gboolean gtk_button_get_use_stock GtkButton* button")
(CCAST "GTK_CALENDAR(obj)" "GtkCalendar*")
(CCHK "GTK_IS_CALENDAR(obj)" "GtkCalendar*")
(CINT "GTK_CALENDAR_SHOW_HEADING" "GtkCalendarDisplayOptions")
(CINT "GTK_CALENDAR_SHOW_DAY_NAMES" "GtkCalendarDisplayOptions")
(CINT "GTK_CALENDAR_NO_MONTH_CHANGE" "GtkCalendarDisplayOptions")
(CINT "GTK_CALENDAR_SHOW_WEEK_NUMBERS" "GtkCalendarDisplayOptions")
;;; 2.90.7 (CINT "GTK_CALENDAR_WEEK_START_MONDAY" "GtkCalendarDisplayOptions")
;;;;(CFNC "GType gtk_calendar_get_type void")
(CFNC "GtkWidget* gtk_calendar_new void")
;(CFNC "gboolean gtk_calendar_select_month GtkCalendar* calendar guint month guint year")
(CFNC "void gtk_calendar_select_day GtkCalendar* calendar guint day")
;(CFNC "gboolean gtk_calendar_mark_day GtkCalendar* calendar guint day")
;(CFNC "gboolean gtk_calendar_unmark_day GtkCalendar* calendar guint day")
;;; these now are void funcs (2.90.3)
(CFNC "void gtk_calendar_clear_marks GtkCalendar* calendar")
;;; out 2.3 (CFNC "void gtk_calendar_display_options GtkCalendar* calendar GtkCalendarDisplayOptions flags")
(CFNC "void gtk_calendar_get_date GtkCalendar* calendar guint* [year] guint* [month] guint* [day]")
;;; out 2.7.0 (CFNC "void gtk_calendar_freeze GtkCalendar* calendar")
;;; out 2.7.0 (CFNC "void gtk_calendar_thaw GtkCalendar* calendar")
(CCAST "GTK_CELL_EDITABLE(obj)" "GtkCellEditable*")
(CCHK "GTK_IS_CELL_EDITABLE(obj)" "GtkCellEditable*")
;;;;(CFNC "GType gtk_cell_editable_get_type void")
(CFNC "void gtk_cell_editable_start_editing GtkCellEditable* cell_editable GdkEvent* @event")
(CFNC "void gtk_cell_editable_editing_done GtkCellEditable* cell_editable")
(CFNC "void gtk_cell_editable_remove_widget GtkCellEditable* cell_editable")
(CINT "GTK_CELL_RENDERER_SELECTED" "GtkCellRendererState")
(CINT "GTK_CELL_RENDERER_PRELIT" "GtkCellRendererState")
(CINT "GTK_CELL_RENDERER_INSENSITIVE" "GtkCellRendererState")
(CINT "GTK_CELL_RENDERER_SORTED" "GtkCellRendererState")
(CINT "GTK_CELL_RENDERER_FOCUSED" "GtkCellRendererState")
;(CINT "GTK_CELL_RENDERER_MODE_INERT" "GtkCellRendererMode")
;(CINT "GTK_CELL_RENDERER_MODE_ACTIVATABLE" "GtkCellRendererMode")
;(CINT "GTK_CELL_RENDERER_MODE_EDITABLE" "GtkCellRendererMode")
(CCAST "GTK_CELL_RENDERER(obj)" "GtkCellRenderer*")
(CCHK "GTK_IS_CELL_RENDERER(obj)" "GtkCellRenderer*")
;;;;(CFNC "GType gtk_cell_renderer_get_type void")

(CFNC "gboolean gtk_cell_renderer_activate GtkCellRenderer* cell GdkEvent* event GtkWidget* widget gchar* path GdkRectangle* background_area GdkRectangle* cell_area GtkCellRendererState flags")
;;; (CFNC-gtk2 "void gtk_cell_renderer_get_size GtkCellRenderer* cell GtkWidget* widget GdkRectangle* @cell_area gint* [x_offset] gint* [y_offset] gint* [width] gint* [height]")

(CFNC "GtkCellEditable* gtk_cell_renderer_start_editing GtkCellRenderer* cell GdkEvent* @event GtkWidget* widget gchar* path GdkRectangle* background_area GdkRectangle* cell_area GtkCellRendererState flags")
(CFNC "void gtk_cell_renderer_set_fixed_size GtkCellRenderer* cell gint width gint height")
(CFNC "void gtk_cell_renderer_get_fixed_size GtkCellRenderer* cell gint* [width] gint* [height]")
(CCAST "GTK_CELL_RENDERER_PIXBUF(obj)" "GtkCellRendererPixbuf*")
(CCHK "GTK_IS_CELL_RENDERER_PIXBUF(obj)" "GtkCellRendererPixbuf*")
;;;;(CFNC "GType gtk_cell_renderer_pixbuf_get_type void")
(CFNC "GtkCellRenderer* gtk_cell_renderer_pixbuf_new void")
(CCAST "GTK_CELL_RENDERER_TEXT(obj)" "GtkCellRendererText*")
(CCHK "GTK_IS_CELL_RENDERER_TEXT(obj)" "GtkCellRendererText*")
;;;;(CFNC "GType gtk_cell_renderer_text_get_type void")
(CFNC "GtkCellRenderer* gtk_cell_renderer_text_new void")
(CFNC "void gtk_cell_renderer_text_set_fixed_height_from_font GtkCellRendererText* renderer gint number_of_rows")
(CCAST "GTK_CELL_RENDERER_TOGGLE(obj)" "GtkCellRendererToggle*")
(CCHK "GTK_IS_CELL_RENDERER_TOGGLE(obj)" "GtkCellRendererToggle*")
;;;;(CFNC "GType gtk_cell_renderer_toggle_get_type void")
(CFNC "GtkCellRenderer* gtk_cell_renderer_toggle_new void")
(CFNC "gboolean gtk_cell_renderer_toggle_get_radio GtkCellRendererToggle* toggle")
(CFNC "void gtk_cell_renderer_toggle_set_radio GtkCellRendererToggle* toggle gboolean radio")
(CFNC "gboolean gtk_cell_renderer_toggle_get_active GtkCellRendererToggle* toggle")
(CFNC "void gtk_cell_renderer_toggle_set_active GtkCellRendererToggle* toggle gboolean setting")
(CCAST "GTK_CHECK_BUTTON(obj)" "GtkCheckButton*")
(CCHK "GTK_IS_CHECK_BUTTON(obj)" "GtkCheckButton*")
;;;;(CFNC "GType gtk_check_button_get_type void")
(CFNC "GtkWidget* gtk_check_button_new void")
(CFNC "GtkWidget* gtk_check_button_new_with_label gchar* label")
(CFNC "GtkWidget* gtk_check_button_new_with_mnemonic gchar* label")
(CCAST "GTK_CHECK_MENU_ITEM(obj)" "GtkCheckMenuItem*")
(CCHK "GTK_IS_CHECK_MENU_ITEM(obj)" "GtkCheckMenuItem*")
;;;;(CFNC "GType gtk_check_menu_item_get_type void")
(CFNC "GtkWidget* gtk_check_menu_item_new void")
(CFNC "GtkWidget* gtk_check_menu_item_new_with_label gchar* label") ; null label => segfault
(CFNC "GtkWidget* gtk_check_menu_item_new_with_mnemonic gchar* label")
(CFNC "void gtk_check_menu_item_set_active GtkCheckMenuItem* check_menu_item gboolean is_active")
(CFNC "gboolean gtk_check_menu_item_get_active GtkCheckMenuItem* check_menu_item")
(CFNC "void gtk_check_menu_item_toggled GtkCheckMenuItem* check_menu_item")
(CFNC "void gtk_check_menu_item_set_inconsistent GtkCheckMenuItem* check_menu_item gboolean setting")
(CFNC "gboolean gtk_check_menu_item_get_inconsistent GtkCheckMenuItem* check_menu_item")
;;; 3.93.0 (CFNC "GtkClipboard* gtk_clipboard_get GdkAtom selection") ; might be on GDK_MULTIHEAD_SAFE switch?
;;; 3.93.0 (CFNC "gboolean gtk_clipboard_set_with_data GtkClipboard* clipboard GtkTargetEntry* targets guint n_targets GtkClipboardGetFunc func GtkClipboardClearFunc clear_func lambda_data @func_info")
;(CFNC "gboolean gtk_clipboard_set_with_owner GtkClipboard* clipboard GtkTargetEntry* targets guint n_targets GtkClipboardGetFunc func GtkClipboardClearFunc clear_func GObject* owner")
;;; 3.93.0 (CFNC "GObject* gtk_clipboard_get_owner GtkClipboard* clipboard")
;;; 3.93.0 (CFNC "void gtk_clipboard_clear GtkClipboard* clipboard")
;;; 3.93.0 (CFNC "void gtk_clipboard_set_text GtkClipboard* clipboard gchar* text gint len")
;;; 3.93.0 (CFNC "void gtk_clipboard_request_contents GtkClipboard* clipboard GdkAtom target GtkClipboardReceivedFunc func lambda_data @func_info")
;;; 3.93.0 (CFNC "void gtk_clipboard_request_text GtkClipboard* clipboard GtkClipboardTextReceivedFunc func lambda_data @func_info")
;;; 3.93.0 (CFNC "GtkSelectionData* gtk_clipboard_wait_for_contents GtkClipboard* clipboard GdkAtom target")
;;; 3.93.0 (CFNC "gchar* gtk_clipboard_wait_for_text GtkClipboard* clipboard" 'free)
;;; 3.93.0 (CFNC "gboolean gtk_clipboard_wait_is_text_available GtkClipboard* clipboard")
;;; 3.3.16 (CCAST "GTK_COLOR_SELECTION_DIALOG(obj)" "GtkColorSelectionDialog*")
;;; 3.3.16 (CCHK "GTK_IS_COLOR_SELECTION_DIALOG(obj)" "GtkColorSelectionDialog*")
;;; 3.3.16 ;;;;(CFNC "GType gtk_color_selection_dialog_get_type void")
;;; 3.3.16 (CFNC "GtkWidget* gtk_color_selection_dialog_new gchar* title") 
;;; 3.3.16 (CCAST "GTK_COLOR_SELECTION(obj)" "GtkColorSelection*")
;;; 3.3.16 (CCHK "GTK_IS_COLOR_SELECTION(obj)" "GtkColorSelection*")
;;; 3.3.16 ;;;;(CFNC "GType gtk_color_selection_get_type void")
;;; 3.3.16 (CFNC "GtkWidget* gtk_color_selection_new void")
;;; 3.3.16 (CFNC "gboolean gtk_color_selection_get_has_opacity_control GtkColorSelection* colorsel")
;;; 3.3.16 (CFNC "void gtk_color_selection_set_has_opacity_control GtkColorSelection* colorsel gboolean has_opacity")
;;; 3.3.16 (CFNC "gboolean gtk_color_selection_get_has_palette GtkColorSelection* colorsel")
;;; 3.3.16 (CFNC "void gtk_color_selection_set_has_palette GtkColorSelection* colorsel gboolean has_palette")
;;; ;;; 3.3.16 (CFNC-gtk2 "void gtk_color_selection_set_current_color GtkColorSelection* colorsel GdkColor* color")
;;; 3.3.16 (CFNC "void gtk_color_selection_set_current_alpha GtkColorSelection* colorsel guint16 alpha")
;;; ;;; 3.3.16 (CFNC-gtk2 "void gtk_color_selection_get_current_color GtkColorSelection* colorsel GdkColor* color")
;;; 3.3.16 (CFNC "guint16 gtk_color_selection_get_current_alpha GtkColorSelection* colorsel")
;;; ;;; 3.3.16 (CFNC-gtk2 "void gtk_color_selection_set_previous_color GtkColorSelection* colorsel GdkColor* color")
;;; 3.3.16 (CFNC "void gtk_color_selection_set_previous_alpha GtkColorSelection* colorsel guint16 alpha")
;;; ;;; 3.3.16 (CFNC-gtk2 "void gtk_color_selection_get_previous_color GtkColorSelection* colorsel GdkColor* color")
;;; 3.3.16 (CFNC "guint16 gtk_color_selection_get_previous_alpha GtkColorSelection* colorsel")
;;; 3.3.16 (CFNC "gboolean gtk_color_selection_is_adjusting GtkColorSelection* colorsel")
;;; ;;; 3.3.16 (CFNC-gtk2 "gboolean gtk_color_selection_palette_from_string gchar* str GdkColor** [colors] gint* [n_colors]")
;;; ;;; 3.3.16 (CFNC-gtk2 "gchar* gtk_color_selection_palette_to_string GdkColor* colors gint n_colors" 'free)
;;; out 2.3 (CFNC "GtkColorSelectionChangePaletteFunc gtk_color_selection_set_change_palette_hook GtkColorSelectionChangePaletteFunc func")
;;; out 2.3 (CCAST "GTK_COMBO(obj)" "GtkCombo*")
;;; out 2.3 (CCHK "GTK_IS_COMBO(obj)" "GtkCombo*")
;;;;;;; out 2.3 (CFNC "GType gtk_combo_get_type void")
;;; out 2.3 (CFNC "GtkWidget* gtk_combo_new void")
;;; out 2.3 (CFNC "void gtk_combo_set_value_in_list GtkCombo* combo gboolean val gboolean ok_if_empty")
;;; out 2.3 (CFNC "void gtk_combo_set_use_arrows GtkCombo* combo gboolean val")
;;; out 2.3 (CFNC "void gtk_combo_set_use_arrows_always GtkCombo* combo gboolean val")
;;; out 2.3 (CFNC "void gtk_combo_set_case_sensitive GtkCombo* combo gboolean val")
;;; out 2.3 (CFNC "void gtk_combo_set_item_string GtkCombo* combo GtkItem* item gchar* item_value")
;;; out 2.3 (CFNC "void gtk_combo_set_popdown_strings GtkCombo* combo GList* strings")
;;; out 2.3 (CFNC "void gtk_combo_disable_activate GtkCombo* combo")
(CCAST "GTK_CONTAINER(obj)" "GtkContainer*")
(CCHK "GTK_IS_CONTAINER(obj)" "GtkContainer*")
;;; (CFNC "gboolean GTK_IS_RESIZE_CONTAINER GtkWidget* widget")
;;;;(CFNC "GType gtk_container_get_type void")
;;; 3.89 (CFNC "void gtk_container_set_border_width GtkContainer* container guint border_width")
;;; 3.89 (CFNC "guint gtk_container_get_border_width GtkContainer* container")
(CFNC "void gtk_container_add GtkContainer* container GtkWidget* widget")
(CFNC "void gtk_container_remove GtkContainer* container GtkWidget* widget")
;;; 3.12.0 (CFNC "void gtk_container_set_resize_mode GtkContainer* container GtkResizeMode resize_mode")
;;; 3.12.0 (CFNC "GtkResizeMode gtk_container_get_resize_mode GtkContainer* container")
;;; 3.96.0 (CFNC "void gtk_container_check_resize GtkContainer* container")
(CFNC "void gtk_container_foreach GtkContainer* container GtkCallback func lambda_data @func_info")
(CFNC "GList* gtk_container_get_children GtkContainer* container") ; FREE (g_list_free)
;;; out 2.19.0 (CCAST "GTK_CURVE(obj)" "GtkCurve*")
;;; (CCHK "GTK_IS_CURVE(obj)" "GtkCurve*")
;;;;(CFNC "GType gtk_curve_get_type void")
;;; (CFNC "GtkWidget* gtk_curve_new void")
;;; (CFNC "void gtk_curve_reset GtkCurve* curve")
;;; (CFNC "void gtk_curve_set_gamma GtkCurve* curve gfloat gamma")
;;; (CFNC "void gtk_curve_set_range GtkCurve* curve gfloat min_x gfloat max_x gfloat min_y gfloat max_y")
;;; (CFNC "void gtk_curve_get_vector GtkCurve* curve int veclen gfloat* vector")
;;; (CFNC "void gtk_curve_set_vector GtkCurve* curve int veclen gfloat* vector")
;;; (CFNC "void gtk_curve_set_curve_type GtkCurve* curve GtkCurveType type")
;(CINT "GTK_DEBUG_MISC")
;(CINT "GTK_DEBUG_PLUGSOCKET")
;(CINT "GTK_DEBUG_TEXT")
;(CINT "GTK_DEBUG_TREE")
;(CINT "GTK_DEBUG_UPDATES")
(CINT "GTK_DIALOG_MODAL" "GtkDialogFlags")
(CINT "GTK_DIALOG_DESTROY_WITH_PARENT" "GtkDialogFlags")
;;; 2.90.7 (CINT "GTK_DIALOG_NO_SEPARATOR" "GtkDialogFlags")
(CINT "GTK_RESPONSE_NONE" "GtkResponseType")
(CINT "GTK_RESPONSE_REJECT" "GtkResponseType")
(CINT "GTK_RESPONSE_ACCEPT" "GtkResponseType")
(CINT "GTK_RESPONSE_DELETE_EVENT" "GtkResponseType")
(CINT "GTK_RESPONSE_OK" "GtkResponseType")
(CINT "GTK_RESPONSE_CANCEL" "GtkResponseType")
(CINT "GTK_RESPONSE_CLOSE" "GtkResponseType")
(CINT "GTK_RESPONSE_YES" "GtkResponseType")
(CINT "GTK_RESPONSE_NO" "GtkResponseType")
(CINT "GTK_RESPONSE_APPLY" "GtkResponseType")
(CINT "GTK_RESPONSE_HELP" "GtkResponseType")
(CCAST "GTK_DIALOG(obj)" "GtkDialog*")
(CCHK "GTK_IS_DIALOG(obj)" "GtkDialog*")
;;;;(CFNC "GType gtk_dialog_get_type void")
(CFNC "GtkWidget* gtk_dialog_new void")
;;; in 3.3.4 this is generating a warning (CFNC-PA "GtkWidget* gtk_dialog_new_with_buttons gchar* title GtkWindow* @parent GtkDialogFlags flags etc #buttons" 0 10 '("gchar*" "int"))
;;; ... at init arg, then list arg name, min len, max len, step, then types within step 
(CFNC "void gtk_dialog_add_action_widget GtkDialog* dialog GtkWidget* child gint response_id")
(CFNC "GtkWidget* gtk_dialog_add_button GtkDialog* dialog gchar* button_text gint response_id")
(CFNC-PA "void gtk_dialog_add_buttons GtkDialog* dialog etc buttons" 2 10 '("gchar*" "int")) ; must have at least 1 button
(CFNC "void gtk_dialog_set_response_sensitive GtkDialog* dialog gint response_id gboolean setting")
(CFNC "void gtk_dialog_set_default_response GtkDialog* dialog gint response_id")
;;; 2.90.7 (CFNC "void gtk_dialog_set_has_separator GtkDialog* dialog gboolean setting")
;;; 2.90.7 (CFNC "gboolean gtk_dialog_get_has_separator GtkDialog* dialog")
(CFNC "void gtk_dialog_response GtkDialog* dialog gint response_id")
(CFNC "gint gtk_dialog_run GtkDialog* dialog")
(CINT "GTK_DEST_DEFAULT_MOTION" "GtkDestDefaults")
(CINT "GTK_DEST_DEFAULT_HIGHLIGHT" "GtkDestDefaults")
(CINT "GTK_DEST_DEFAULT_DROP" "GtkDestDefaults")
(CINT "GTK_DEST_DEFAULT_ALL" "GtkDestDefaults")
;(CINT "GTK_TARGET_SAME_APP" "GtkTargetFlags")
;(CINT "GTK_TARGET_SAME_WIDGET" "GtkTargetFlags")
;;; 3.93.0 (CFNC "void gtk_drag_finish GdkDrag* context gboolean success gboolean del guint32 time")
;;; 3.96.0 (CFNC "GtkWidget* gtk_drag_get_source_widget GdkDrag* context")
(CFNC "void gtk_drag_highlight GtkWidget* widget")
(CFNC "void gtk_drag_unhighlight GtkWidget* widget")
;;; 3.93.0 (CFNC "void gtk_drag_dest_set GtkWidget* widget GtkDestDefaults flags GtkTargetEntry* targets gint n_targets GdkDragAction actions")
(CFNC "void gtk_drag_dest_unset GtkWidget* widget")
;;; 3.93.0 (CFNC "GdkAtom gtk_drag_dest_find_target GtkWidget* widget GdkDrag* context GtkTargetList* @target_list")
;;; 3.93.0 (CFNC "GtkTargetList* gtk_drag_dest_get_target_list GtkWidget* widget")
;;; 3.93.0 (CFNC "void gtk_drag_dest_set_target_list GtkWidget* widget GtkTargetList* @target_list")
;;; 3.93.0 (CFNC "void gtk_drag_source_set GtkWidget* widget GdkModifierType start_button_mask GtkTargetEntry* targets gint n_targets GdkDragAction actions")
(CFNC "void gtk_drag_source_unset GtkWidget* widget")
;;; (CFNC-gtk2 "void gtk_drag_source_set_icon GtkWidget* widget GdkColormap* colormap GdkPixmap* pixmap GdkBitmap* mask")
;;; 3.93.0 (CFNC "void gtk_drag_source_set_icon_pixbuf GtkWidget* widget GdkPixbuf* pixbuf")
;;; 3.9.8 (CFNC "void gtk_drag_source_set_icon_stock GtkWidget* widget gchar* stock_id")
;;; (CFNC "GdkDrag* gtk_drag_begin GtkWidget* widget GtkTargetList* targets GdkDragAction actions gint button GdkEvent* event")
;;; (CFNC-gtk2 "void gtk_drag_set_icon_pixmap GdkDrag* context GdkColormap* colormap GdkPixmap* pixmap GdkBitmap* mask gint hot_x gint hot_y")
;;; 3.93.0 (CFNC "void gtk_drag_set_icon_pixbuf GdkDrag* context GdkPixbuf* pixbuf gint hot_x gint hot_y")
;;; (CFNC "void gtk_drag_set_icon_stock GdkDrag* context gchar* stock_id gint hot_x gint hot_y")
(CFNC "gboolean gtk_drag_check_threshold GtkWidget* widget gint start_x gint start_y gint current_x gint current_y")
(CCAST "GTK_DRAWING_AREA(obj)" "GtkDrawingArea*")
(CCHK "GTK_IS_DRAWING_AREA(obj)" "GtkDrawingArea*")
;;;;(CFNC "GType gtk_drawing_area_get_type void")
(CFNC "GtkWidget* gtk_drawing_area_new void")
(CCAST "GTK_EDITABLE(obj)" "GtkEditable*")
(CCHK "GTK_IS_EDITABLE(obj)" "GtkEditable*")
;;;;(CFNC "GType gtk_editable_get_type void")
(CFNC "void gtk_editable_select_region GtkEditable* editable int start int end")
(CFNC "gboolean gtk_editable_get_selection_bounds GtkEditable* editable int* [start] int* [end]")
(CFNC "void gtk_editable_insert_text GtkEditable* editable gchar* new_text int new_text_length int* [position]")
(CFNC "void gtk_editable_delete_text GtkEditable* editable int start_pos int end_pos")
(CFNC "gchar* gtk_editable_get_chars GtkEditable* editable int start_pos int end_pos" 'free)
;;; 3.96.0 (CFNC "void gtk_editable_cut_clipboard GtkEditable* editable")
;;; 3.96.0 (CFNC "void gtk_editable_copy_clipboard GtkEditable* editable")
;;; 3.96.0 (CFNC "void gtk_editable_paste_clipboard GtkEditable* editable")
(CFNC "void gtk_editable_delete_selection GtkEditable* editable")
(CFNC "void gtk_editable_set_position GtkEditable* editable gint position")
(CFNC "gint gtk_editable_get_position GtkEditable* editable")
(CFNC "void gtk_editable_set_editable GtkEditable* editable gboolean is_editable")
(CFNC "gboolean gtk_editable_get_editable GtkEditable* editable")
(CCAST "GTK_ENTRY(obj)" "GtkEntry*")
(CCHK "GTK_IS_ENTRY(obj)" "GtkEntry*")
;;;;(CFNC "GType gtk_entry_get_type void")
(CFNC "GtkWidget* gtk_entry_new void")
(CFNC "void gtk_entry_set_visibility GtkEntry* entry gboolean visible")
(CFNC "gboolean gtk_entry_get_visibility GtkEntry* entry")
(CFNC "void gtk_entry_set_invisible_char GtkEntry* entry gunichar ch")
(CFNC "gunichar gtk_entry_get_invisible_char GtkEntry* entry")
(CFNC "void gtk_entry_set_has_frame GtkEntry* entry gboolean setting")
(CFNC "gboolean gtk_entry_get_has_frame GtkEntry* entry")
(CFNC "void gtk_entry_set_max_length GtkEntry* entry gint max")
(CFNC "gint gtk_entry_get_max_length GtkEntry* entry")
(CFNC "void gtk_entry_set_activates_default GtkEntry* entry gboolean setting")
(CFNC "gboolean gtk_entry_get_activates_default GtkEntry* entry")
;;; 3.96.0 (CFNC "void gtk_entry_set_width_chars GtkEntry* entry gint n_chars")
;;; 3.96.0 (CFNC "gint gtk_entry_get_width_chars GtkEntry* entry")
;;; 3.96.0 (CFNC "void gtk_entry_set_text GtkEntry* entry gchar* text")
;;; 3.96.0 (CFNC "gchar* gtk_entry_get_text GtkEntry* entry")
;;; 3.96.0 (CFNC "PangoLayout* gtk_entry_get_layout GtkEntry* entry")
;;; 3.96.0 (CFNC "void gtk_entry_get_layout_offsets GtkEntry* entry gint* [x] gint* [y]")

;;; these out 2.90.7 I think
;(CINT "GTK_ANCHOR_CENTER" "GtkAnchorType")
;(CINT "GTK_ANCHOR_NORTH" "GtkAnchorType")
;(CINT "GTK_ANCHOR_NORTH_WEST" "GtkAnchorType")
;(CINT "GTK_ANCHOR_NORTH_EAST" "GtkAnchorType")
;(CINT "GTK_ANCHOR_SOUTH" "GtkAnchorType")
;(CINT "GTK_ANCHOR_SOUTH_WEST" "GtkAnchorType")
;(CINT "GTK_ANCHOR_SOUTH_EAST" "GtkAnchorType")
;(CINT "GTK_ANCHOR_WEST" "GtkAnchorType")
;(CINT "GTK_ANCHOR_EAST" "GtkAnchorType")
;(CINT "GTK_ANCHOR_N" "GtkAnchorType")
;(CINT "GTK_ANCHOR_NW" "GtkAnchorType")
;(CINT "GTK_ANCHOR_NE" "GtkAnchorType")
;(CINT "GTK_ANCHOR_S" "GtkAnchorType")
;(CINT "GTK_ANCHOR_SW" "GtkAnchorType")
;(CINT "GTK_ANCHOR_SE" "GtkAnchorType")
;(CINT "GTK_ANCHOR_W" "GtkAnchorType")
;(CINT "GTK_ANCHOR_E" "GtkAnchorType")

;;; 3.13.2 (CINT "GTK_ARROW_UP" "GtkArrowType")
;;; 3.13.2 (CINT "GTK_ARROW_DOWN" "GtkArrowType")
;;; 3.13.2 (CINT "GTK_ARROW_LEFT" "GtkArrowType")
;;; 3.13.2 (CINT "GTK_ARROW_RIGHT" "GtkArrowType")
;;; 3.15.0 (CINT "GTK_EXPAND" "GtkAttachOptions")
;;; 3.15.0 (CINT "GTK_SHRINK" "GtkAttachOptions")
;;; 3.15.0 (CINT "GTK_FILL" "GtkAttachOptions")
;;; 2.90.6 (CINT "GTK_BUTTONBOX_DEFAULT_STYLE" "GtkButtonBoxStyle")
;;; 3.96.0 (CINT "GTK_BUTTONBOX_SPREAD" "GtkButtonBoxStyle")
;;; 3.96.0 (CINT "GTK_BUTTONBOX_EDGE" "GtkButtonBoxStyle")
;;; 3.96.0 (CINT "GTK_BUTTONBOX_START" "GtkButtonBoxStyle")
;;; 3.96.0 (CINT "GTK_BUTTONBOX_END" "GtkButtonBoxStyle")
;;; 3.96.0 (CINT "GTK_BUTTONBOX_CENTER" "GtkButtonBoxStyle")
;;; (CINT "GTK_CURVE_TYPE_LINEAR" "GtkCurveType")
;;; (CINT "GTK_CURVE_TYPE_SPLINE" "GtkCurveType")
;;; (CINT "GTK_CURVE_TYPE_FREE" "GtkCurveType")
(CINT "GTK_DELETE_CHARS" "GtkDeleteType")
(CINT "GTK_DELETE_WORD_ENDS" "GtkDeleteType")
(CINT "GTK_DELETE_WORDS" "GtkDeleteType")
(CINT "GTK_DELETE_DISPLAY_LINES" "GtkDeleteType")
(CINT "GTK_DELETE_DISPLAY_LINE_ENDS" "GtkDeleteType")
(CINT "GTK_DELETE_PARAGRAPH_ENDS" "GtkDeleteType")
(CINT "GTK_DELETE_PARAGRAPHS" "GtkDeleteType")
(CINT "GTK_DELETE_WHITESPACE" "GtkDeleteType")
(CINT "GTK_DIR_TAB_FORWARD" "GtkDirectionType")
(CINT "GTK_DIR_TAB_BACKWARD" "GtkDirectionType")
(CINT "GTK_DIR_UP" "GtkDirectionType")
(CINT "GTK_DIR_DOWN" "GtkDirectionType")
(CINT "GTK_DIR_LEFT" "GtkDirectionType")
(CINT "GTK_DIR_RIGHT" "GtkDirectionType")
;;; 3.15.0 (CINT "GTK_EXPANDER_COLLAPSED" "GtkExpanderStyle")
;;; 3.15.0 (CINT "GTK_EXPANDER_SEMI_COLLAPSED" "GtkExpanderStyle")
;;; 3.15.0 (CINT "GTK_EXPANDER_SEMI_EXPANDED" "GtkExpanderStyle")
;;; 3.15.0 (CINT "GTK_EXPANDER_EXPANDED" "GtkExpanderStyle")

;;; 3.9.8
;;; (CINT "GTK_ICON_SIZE_INVALID" "GtkIconSize")
;;; (CINT "GTK_ICON_SIZE_MENU" "GtkIconSize")
;;; (CINT "GTK_ICON_SIZE_SMALL_TOOLBAR" "GtkIconSize")
;;; (CINT "GTK_ICON_SIZE_LARGE_TOOLBAR" "GtkIconSize")
;;; (CINT "GTK_ICON_SIZE_BUTTON" "GtkIconSize")
;;; (CINT "GTK_ICON_SIZE_DND" "GtkIconSize")
;;; (CINT "GTK_ICON_SIZE_DIALOG" "GtkIconSize")
(CINT "GTK_TEXT_DIR_NONE" "GtkTextDirection")
(CINT "GTK_TEXT_DIR_LTR" "GtkTextDirection")
(CINT "GTK_TEXT_DIR_RTL" "GtkTextDirection")
(CINT "GTK_JUSTIFY_LEFT" "GtkJustification")
(CINT "GTK_JUSTIFY_RIGHT" "GtkJustification")
(CINT "GTK_JUSTIFY_CENTER" "GtkJustification")
(CINT "GTK_JUSTIFY_FILL" "GtkJustification")
(CINT "GTK_MENU_DIR_PARENT" "GtkMenuDirectionType")
(CINT "GTK_MENU_DIR_CHILD" "GtkMenuDirectionType")
(CINT "GTK_MENU_DIR_NEXT" "GtkMenuDirectionType")
(CINT "GTK_MENU_DIR_PREV" "GtkMenuDirectionType")
;;; 2.91.5 (CINT "GTK_PIXELS" "GtkMetricType")
;;; 2.91.5 (CINT "GTK_INCHES" "GtkMetricType")
;;; 2.91.5 (CINT "GTK_CENTIMETERS" "GtkMetricType")
(CINT "GTK_MOVEMENT_LOGICAL_POSITIONS" "GtkMovementStep")
(CINT "GTK_MOVEMENT_VISUAL_POSITIONS" "GtkMovementStep")
(CINT "GTK_MOVEMENT_WORDS" "GtkMovementStep")
(CINT "GTK_MOVEMENT_DISPLAY_LINES" "GtkMovementStep")
(CINT "GTK_MOVEMENT_DISPLAY_LINE_ENDS" "GtkMovementStep")
(CINT "GTK_MOVEMENT_PARAGRAPHS" "GtkMovementStep")
(CINT "GTK_MOVEMENT_PARAGRAPH_ENDS" "GtkMovementStep")
(CINT "GTK_MOVEMENT_PAGES" "GtkMovementStep")
(CINT "GTK_MOVEMENT_BUFFER_ENDS" "GtkMovementStep")
(CINT "GTK_ORIENTATION_HORIZONTAL" "GtkOrientation")
(CINT "GTK_ORIENTATION_VERTICAL" "GtkOrientation")
(CINT "GTK_CORNER_TOP_LEFT" "GtkCornerType")
(CINT "GTK_CORNER_BOTTOM_LEFT" "GtkCornerType")
(CINT "GTK_CORNER_TOP_RIGHT" "GtkCornerType")
(CINT "GTK_CORNER_BOTTOM_RIGHT" "GtkCornerType")
(CINT "GTK_PACK_START" "GtkPackType")
(CINT "GTK_PACK_END" "GtkPackType")
;;; 3.15.0 (CINT "GTK_PATH_PRIO_LOWEST" "GtkPathPriorityType")
;;; 3.15.0 (CINT "GTK_PATH_PRIO_GTK")
;;; 3.15.0 (CINT "GTK_PATH_PRIO_APPLICATION" "GtkPathPriorityType")
;;; 3.15.0 (CINT "GTK_PATH_PRIO_THEME" "GtkPathPriorityType")
;;; 3.15.0 (CINT "GTK_PATH_PRIO_RC" "GtkPathPriorityType")
;;; 3.15.0 (CINT "GTK_PATH_PRIO_HIGHEST" "GtkPathPriorityType")
;;; 3.15.0 (CINT "GTK_PATH_PRIO_MASK")
;;; 3.15.0 (CINT "GTK_PATH_WIDGET" "GtkPathType")
;;; 3.15.0 (CINT "GTK_PATH_WIDGET_CLASS" "GtkPathType")
;;; 3.15.0 (CINT "GTK_PATH_CLASS" "GtkPathType")
(CINT "GTK_POLICY_ALWAYS" "GtkPolicyType")
(CINT "GTK_POLICY_AUTOMATIC" "GtkPolicyType")
(CINT "GTK_POLICY_NEVER" "GtkPolicyType")
(CINT "GTK_POS_LEFT" "GtkPositionType") ; 0...
(CINT "GTK_POS_RIGHT" "GtkPositionType")
(CINT "GTK_POS_TOP" "GtkPositionType")
(CINT "GTK_POS_BOTTOM" "GtkPositionType")
(CINT "GTK_RELIEF_NORMAL" "GtkReliefStyle")
;;; 3.92.1?? (CINT "GTK_RELIEF_HALF" "GtkReliefStyle")
(CINT "GTK_RELIEF_NONE" "GtkReliefStyle")
;;; 3.92.1 (CINT "GTK_RESIZE_PARENT" "GtkResizeMode")
;;; 3.92.1 (CINT "GTK_RESIZE_QUEUE" "GtkResizeMode")
;;; 3.92.1 (CINT "GTK_RESIZE_IMMEDIATE" "GtkResizeMode")
(CINT "GTK_SCROLL_NONE" "GtkScrollType")
(CINT "GTK_SCROLL_JUMP" "GtkScrollType")
(CINT "GTK_SCROLL_STEP_BACKWARD" "GtkScrollType")
(CINT "GTK_SCROLL_STEP_FORWARD" "GtkScrollType")
(CINT "GTK_SCROLL_PAGE_BACKWARD" "GtkScrollType")
(CINT "GTK_SCROLL_PAGE_FORWARD" "GtkScrollType")
(CINT "GTK_SCROLL_STEP_UP" "GtkScrollType")
(CINT "GTK_SCROLL_STEP_DOWN" "GtkScrollType")
(CINT "GTK_SCROLL_PAGE_UP" "GtkScrollType")
(CINT "GTK_SCROLL_PAGE_DOWN" "GtkScrollType")
(CINT "GTK_SCROLL_STEP_LEFT" "GtkScrollType")
(CINT "GTK_SCROLL_STEP_RIGHT" "GtkScrollType")
(CINT "GTK_SCROLL_PAGE_LEFT" "GtkScrollType")
(CINT "GTK_SCROLL_PAGE_RIGHT" "GtkScrollType")
(CINT "GTK_SCROLL_START" "GtkScrollType")
(CINT "GTK_SCROLL_END" "GtkScrollType")
(CINT "GTK_SELECTION_NONE" "GtkSelectionMode")
(CINT "GTK_SELECTION_SINGLE" "GtkSelectionMode")
(CINT "GTK_SELECTION_BROWSE" "GtkSelectionMode")
(CINT "GTK_SELECTION_MULTIPLE" "GtkSelectionMode")
;;; 2.90.7 (CINT "GTK_SELECTION_EXTENDED" "GtkSelectionMode")
(CINT "GTK_SHADOW_NONE" "GtkShadowType")
(CINT "GTK_SHADOW_IN" "GtkShadowType")
(CINT "GTK_SHADOW_OUT" "GtkShadowType")
(CINT "GTK_SHADOW_ETCHED_IN" "GtkShadowType")
(CINT "GTK_SHADOW_ETCHED_OUT" "GtkShadowType")
;(CINT "GTK_STATE_NORMAL" "GtkStateType")
;(CINT "GTK_STATE_ACTIVE" "GtkStateType")
;(CINT "GTK_STATE_PRELIGHT" "GtkStateType")
;(CINT "GTK_STATE_SELECTED" "GtkStateType")
;(CINT "GTK_STATE_INSENSITIVE" "GtkStateType")
;(CINT-3.0 "GTK_STATE_INCONSISTENT" "GtkStateType")
;(CINT-3.0 "GTK_STATE_FOCUSED" "GtkStateType")

(CINT "GTK_TOOLBAR_ICONS" "GtkToolbarStyle")
(CINT "GTK_TOOLBAR_TEXT" "GtkToolbarStyle")
(CINT "GTK_TOOLBAR_BOTH" "GtkToolbarStyle")
(CINT "GTK_TOOLBAR_BOTH_HORIZ" "GtkToolbarStyle")
;;; (CINT-gtk2 "GTK_UPDATE_CONTINUOUS" "GtkUpdateType")
;;; (CINT-gtk2 "GTK_UPDATE_DISCONTINUOUS" "GtkUpdateType")
;;; (CINT-gtk2 "GTK_UPDATE_DELAYED" "GtkUpdateType")
;(CINT "GTK_VISIBILITY_NONE" "GtkVisibility")
;(CINT "GTK_VISIBILITY_PARTIAL" "GtkVisibility")
;(CINT "GTK_VISIBILITY_FULL" "GtkVisibility")
;these are from clist/ctree (deprecated widgets)
(CINT "GTK_WIN_POS_NONE" "GtkWindowPosition")
(CINT "GTK_WIN_POS_CENTER" "GtkWindowPosition")
(CINT "GTK_WIN_POS_MOUSE" "GtkWindowPosition")
(CINT "GTK_WIN_POS_CENTER_ALWAYS" "GtkWindowPosition")
(CINT "GTK_WIN_POS_CENTER_ON_PARENT" "GtkWindowPosition")
(CINT "GTK_WINDOW_TOPLEVEL" "GtkWindowType")
(CINT "GTK_WINDOW_POPUP" "GtkWindowType")
(CINT "GTK_WRAP_NONE" "GtkWrapMode")
(CINT "GTK_WRAP_CHAR" "GtkWrapMode")
(CINT "GTK_WRAP_WORD" "GtkWrapMode")
(CINT "GTK_SORT_ASCENDING" "GtkSortType")
(CINT "GTK_SORT_DESCENDING" "GtkSortType")
;;; 3.91.2 (CCAST "GTK_EVENT_BOX(obj)" "GtkEventBox*")
;;; 3.91.2 (CCHK "GTK_IS_EVENT_BOX(obj)" "GtkEventBox*")
;;;;(CFNC "GType gtk_event_box_get_type void")
;;; 3.91.2 (CFNC "GtkWidget* gtk_event_box_new void")

;;; entire thing deprecated 2.11.0
;;; (CCAST "GTK_FILE_SELECTION(obj)" "GtkFileSelection*")
;;; (CCHK "GTK_IS_FILE_SELECTION(obj)" "GtkFileSelection*")
;;; ;;;;(CFNC "GType gtk_file_selection_get_type void")
;;; (CFNC "GtkWidget* gtk_file_selection_new gchar* title")
;;; (CFNC "void gtk_file_selection_set_filename GtkFileSelection* filesel gchar* filename")
;;; (CFNC "gchar* gtk_file_selection_get_filename GtkFileSelection* filesel")
;;; (CFNC "void gtk_file_selection_complete GtkFileSelection* filesel gchar* pattern")
;;; (CFNC "void gtk_file_selection_show_fileop_buttons GtkFileSelection* filesel")
;;; (CFNC "void gtk_file_selection_hide_fileop_buttons GtkFileSelection* filesel")
;;; ;;; added 1.3.15:
;;; (CFNC "gchar** gtk_file_selection_get_selections GtkFileSelection* filesel") ; FREE (g_strfreev)
;;; (CFNC "void gtk_file_selection_set_select_multiple GtkFileSelection* filesel gboolean select_multiple")
;;; (CFNC "gboolean gtk_file_selection_get_select_multiple GtkFileSelection* filesel")

;;; added 2.0.0
;;; 2.91.6 (CLNG "GTK_TYPE_ICON_SET")
;;; 2.91.6 (CLNG "GTK_TYPE_ICON_SOURCE")
;;; 2.91.6 (CLNG "GTK_TYPE_SELECTION_DATA")
;;; 2.91.6 (CLNG "GTK_TYPE_BORDER")
;;; 2.91.6 (CLNG "GTK_TYPE_TREE_ITER")
;;; 2.91.6 (CLNG "GTK_TYPE_TREE_PATH")
;;; 2.91.6 (CLNG "GTK_TYPE_IDENTIFIER")
;;; 2.91.6 (CLNG "GTK_TYPE_REQUISITION")
;;;;(CFNC "GType gtk_icon_set_get_type void")
;;;;(CFNC "GType gtk_icon_source_get_type void")
;;;;(CFNC "GType gtk_selection_data_get_type void")
;;;;(CFNC "GType gtk_border_get_type void")
;;;;(CFNC "GType gtk_tree_path_get_type void")
;;;;(CFNC "GType gtk_tree_iter_get_type void")
;;;;(CFNC "GType gtk_identifier_get_type void")
;;;;(CFNC "GType gtk_requisition_get_type void")
;;;;
(CCAST "GTK_FIXED(obj)" "GtkFixed*")
(CCHK "GTK_IS_FIXED(obj)" "GtkFixed*")
;;;;(CFNC "GType gtk_fixed_get_type void")
(CFNC "GtkWidget* gtk_fixed_new void")
(CFNC "void gtk_fixed_put GtkFixed* fixed GtkWidget* widget gint x gint y")
(CFNC "void gtk_fixed_move GtkFixed* fixed GtkWidget* widget gint x gint y")
;;; out 2.19.3 (CFNC "void gtk_fixed_set_has_window GtkFixed* fixed gboolean has_window")
;;; (CFNC "gboolean gtk_fixed_get_has_window GtkFixed* fixed")

;;; (CCAST-gtk2 "GTK_FONT_SELECTION(obj)" "GtkFontSelection*")
;;; (CCHK-gtk2 "GTK_IS_FONT_SELECTION(obj)" "GtkFontSelection*")
;;; (CCAST-gtk2 "GTK_FONT_SELECTION_DIALOG(obj)" "GtkFontSelectionDialog*")
;;; (CCHK-gtk2 "GTK_IS_FONT_SELECTION_DIALOG(obj)" "GtkFontSelectionDialog*")
;;; (CFNC-gtk2 "GtkWidget* gtk_font_selection_new void")
;;; (CFNC-gtk2 "gchar* gtk_font_selection_get_font_name GtkFontSelection* fontsel" 'free)
;;; (CFNC-gtk2 "gboolean gtk_font_selection_set_font_name GtkFontSelection* fontsel gchar* fontname")
;;; (CFNC-gtk2 "gchar* gtk_font_selection_get_preview_text GtkFontSelection* fontsel")
;;; (CFNC-gtk2 "void gtk_font_selection_set_preview_text GtkFontSelection* fontsel gchar* text")
;;; (CFNC-gtk2 "GtkWidget* gtk_font_selection_dialog_new gchar* title")
;;; (CFNC-gtk2 "gchar* gtk_font_selection_dialog_get_font_name GtkFontSelectionDialog* fsd" 'free)
;;; (CFNC-gtk2 "gboolean gtk_font_selection_dialog_set_font_name GtkFontSelectionDialog* fsd gchar* fontname")
;;; (CFNC-gtk2 "gchar* gtk_font_selection_dialog_get_preview_text GtkFontSelectionDialog* fsd")
;;; (CFNC-gtk2 "void gtk_font_selection_dialog_set_preview_text GtkFontSelectionDialog* fsd gchar* text")

(CCAST "GTK_FRAME(obj)" "GtkFrame*")
(CCHK "GTK_IS_FRAME(obj)" "GtkFrame*")
;;;;(CFNC "GType gtk_frame_get_type void")
(CFNC "GtkWidget* gtk_frame_new gchar* label")
(CFNC "void gtk_frame_set_label GtkFrame* frame gchar* label")
(CFNC "gchar* gtk_frame_get_label GtkFrame* frame")
(CFNC "void gtk_frame_set_label_widget GtkFrame* frame GtkWidget* label_widget")
(CFNC "GtkWidget* gtk_frame_get_label_widget GtkFrame* frame")
;;; 3.96.0 (CFNC "void gtk_frame_set_label_align GtkFrame* frame gfloat xalign gfloat yalign")
;;; 3.96.0 (CFNC "void gtk_frame_get_label_align GtkFrame* frame gfloat* [xalign] gfloat* [yalign]")
(CFNC "void gtk_frame_set_shadow_type GtkFrame* frame GtkShadowType type")
(CFNC "GtkShadowType gtk_frame_get_shadow_type GtkFrame* frame")
;;; (CCAST "GTK_GAMMA_CURVE(obj)" "GtkGammaCurve*")
;;; (CCHK "GTK_IS_GAMMA_CURVE(obj)" "GtkGammaCurve*")
;;;;(CFNC "GType gtk_gamma_curve_get_type void")
;;; (CFNC "GtkWidget* gtk_gamma_curve_new void")
;;; 2.90.6 (CFNC "GdkGC* gtk_gc_get gint depth GdkColormap* colormap GdkGCValues* values GdkGCValuesMask values_mask")
;;; 2.90.6 (CFNC "void gtk_gc_release GdkGC* gc")
;;; 3.3.2 (CCAST "GTK_HANDLE_BOX(obj)" "GtkHandleBox*")
;;; 3.3.2 (CCHK "GTK_IS_HANDLE_BOX(obj)" "GtkHandleBox*")
;;;;(CFNC "GType gtk_handle_box_get_type void")
;;; 3.3.2 (CFNC "GtkWidget* gtk_handle_box_new void")
;;; 3.3.2 (CFNC "void gtk_handle_box_set_shadow_type GtkHandleBox* handle_box GtkShadowType type")
;;; 3.3.2 (CFNC "GtkShadowType gtk_handle_box_get_shadow_type GtkHandleBox* handle_box")
;;; 3.3.2 (CFNC "void gtk_handle_box_set_handle_position GtkHandleBox* handle_box GtkPositionType position")
;;; 3.3.2 (CFNC "GtkPositionType gtk_handle_box_get_handle_position GtkHandleBox* handle_box")
;;; 3.3.2 (CFNC "void gtk_handle_box_set_snap_edge GtkHandleBox* handle_box GtkPositionType edge")
;;; 3.3.2 (CFNC "GtkPositionType gtk_handle_box_get_snap_edge GtkHandleBox* handle_box")
;;; 3.1.6 (CCAST "GTK_HBUTTON_BOX(obj)" "GtkHButtonBox*")
;;; 3.1.6 (CCHK "GTK_IS_HBUTTON_BOX(obj)" "GtkHButtonBox*")
;;; 3.1.6 ;;;;(CFNC "GType gtk_hbutton_box_get_type void")
;;; 3.1.6 (CFNC "GtkWidget* gtk_hbutton_box_new void")
;;; 3.1.6 (CCAST "GTK_HBOX(obj)" "GtkHBox*")
;;; 3.1.6 (CCHK "GTK_IS_HBOX(obj)" "GtkHBox*")
;;; 3.1.6 ;;;;(CFNC "GType gtk_hbox_get_type void")
;;; 3.1.6 (CFNC "GtkWidget* gtk_hbox_new gboolean homogeneous gint spacing")
;;; 3.1.6 (CCAST "GTK_HPANED(obj)" "GtkHPaned*")
;;; 3.1.6 (CCHK "GTK_IS_HPANED(obj)" "GtkHPaned*")
;;; 3.1.6 ;;;;(CFNC "GType gtk_hpaned_get_type void")
;;; 3.1.6 (CFNC "GtkWidget* gtk_hpaned_new void")
;;; 2.91.5 (CCAST "GTK_HRULER(obj)" "GtkHRuler*")
;;; 2.91.5 (CCHK "GTK_IS_HRULER(obj)" "GtkHRuler*")
;;;;(CFNC "GType gtk_hruler_get_type void")
;;; 2.91.5 (CFNC "GtkWidget* gtk_hruler_new void")
;;; 3.1.6 (CCAST "GTK_HSCALE(obj)" "GtkHScale*")
;;; 3.1.6 (CCHK "GTK_IS_HSCALE(obj)" "GtkHScale*")
;;; 3.1.6 ;;;;(CFNC "GType gtk_hscale_get_type void")
;;; 3.1.6 (CFNC "GtkWidget* gtk_hscale_new GtkAdjustment* @adjustment")
;;; 3.1.6 (CFNC "GtkWidget* gtk_hscale_new_with_range gdouble min gdouble max gdouble step")
;;; 3.1.6 (CCAST "GTK_HSCROLLBAR(obj)" "GtkHScrollbar*")
;;; 3.1.6 (CCHK "GTK_IS_HSCROLLBAR(obj)" "GtkHScrollbar*")
;;; 3.1.6 ;;;;(CFNC "GType gtk_hscrollbar_get_type void")
;;; 3.1.6 (CFNC "GtkWidget* gtk_hscrollbar_new GtkAdjustment* @adjustment")
;;; 3.1.6 (CCAST "GTK_HSEPARATOR(obj)" "GtkHSeparator*")
;;; 3.1.6 (CCHK "GTK_IS_HSEPARATOR(obj)" "GtkHSeparator*")
;;; 3.1.6 ;;;;(CFNC "GType gtk_hseparator_get_type void")
;;; 3.1.6 (CFNC "GtkWidget* gtk_hseparator_new void")

;;; all of these deprecated 3.9.8
;;; (CCAST "GTK_ICON_FACTORY(object)" "GtkIconFactory*")
;;; (CCHK "GTK_IS_ICON_FACTORY(object)" "GtkIconFactory*")
;;;;(CFNC "GType gtk_icon_factory_get_type void")
;;; (CFNC "GtkIconFactory* gtk_icon_factory_new void")
;;; (CFNC "void gtk_icon_factory_add GtkIconFactory* factory gchar* stock_id GtkIconSet* icon_set")
;;; (CFNC "GtkIconSet* gtk_icon_factory_lookup GtkIconFactory* factory gchar* stock_id")
;;; (CFNC "void gtk_icon_factory_add_default GtkIconFactory* factory")
;;; (CFNC "void gtk_icon_factory_remove_default GtkIconFactory* factory")
;;; (CFNC "GtkIconSet* gtk_icon_factory_lookup_default gchar* stock_id")
;;; (CFNC "gboolean gtk_icon_size_lookup GtkIconSize size gint* [width] gint* [height]")
;;; (CFNC "GtkIconSize gtk_icon_size_register gchar* name gint width gint height")
;;; (CFNC "void gtk_icon_size_register_alias gchar* alias GtkIconSize target")
;;; (CFNC "GtkIconSize gtk_icon_size_from_name gchar* name") ; null = segfault
;;; (CFNC "gchar* gtk_icon_size_get_name GtkIconSize size")
;;; (CFNC "GtkIconSet* gtk_icon_set_new void")
;;; (CFNC "GtkIconSet* gtk_icon_set_new_from_pixbuf GdkPixbuf* pixbuf")
;;; (CFNC "GtkIconSet* gtk_icon_set_ref GtkIconSet* icon_set")
;;; (CFNC "void gtk_icon_set_unref GtkIconSet* icon_set")
;;; (CFNC "GtkIconSet* gtk_icon_set_copy GtkIconSet* icon_set")
;;; ;;; (CFNC-gtk2 "GdkPixbuf* gtk_icon_set_render_icon GtkIconSet* icon_set GtkStyle* @style GtkTextDirection direction GtkStateType state GtkIconSize size GtkWidget* @widget char* detail")
;;; (CFNC "void gtk_icon_set_add_source GtkIconSet* icon_set GtkIconSource* source")
;;; (CFNC "void gtk_icon_set_get_sizes GtkIconSet* icon_set GtkIconSize** [sizes] gint* [n_sizes]")
;;; (CFNC "GtkIconSource* gtk_icon_source_new void")
;;; (CFNC "GtkIconSource* gtk_icon_source_copy GtkIconSource* source")
;;; (CFNC "void gtk_icon_source_free GtkIconSource* source")
;;; (CFNC "void gtk_icon_source_set_filename GtkIconSource* source gchar* filename")
;;; (CFNC "void gtk_icon_source_set_pixbuf GtkIconSource* source GdkPixbuf* @pixbuf")
;;; (CFNC "gchar* gtk_icon_source_get_filename GtkIconSource* source")
;;; (CFNC "GdkPixbuf* gtk_icon_source_get_pixbuf GtkIconSource* source")
;;; (CFNC "void gtk_icon_source_set_direction_wildcarded GtkIconSource* source gboolean setting")
;;; (CFNC "void gtk_icon_source_set_state_wildcarded GtkIconSource* source gboolean setting")
;;; (CFNC "void gtk_icon_source_set_size_wildcarded GtkIconSource* source gboolean setting")
;;; (CFNC "gboolean gtk_icon_source_get_size_wildcarded GtkIconSource* source")
;;; (CFNC "gboolean gtk_icon_source_get_state_wildcarded GtkIconSource* source")
;;; (CFNC "gboolean gtk_icon_source_get_direction_wildcarded GtkIconSource* source")
;;; (CFNC "void gtk_icon_source_set_direction GtkIconSource* source GtkTextDirection direction")
;;; (CFNC "void gtk_icon_source_set_state GtkIconSource* source GtkStateType state")
;;; (CFNC "void gtk_icon_source_set_size GtkIconSource* source GtkIconSize size")
;;; (CFNC "GtkTextDirection gtk_icon_source_get_direction GtkIconSource* source")
;;; (CFNC "GtkStateType gtk_icon_source_get_state GtkIconSource* source")
;;; (CFNC "GtkIconSize gtk_icon_source_get_size GtkIconSource* source")
;;; !!

(CCAST "GTK_IMAGE(obj)" "GtkImage*")
(CCHK "GTK_IS_IMAGE(obj)" "GtkImage*")
(CINT "GTK_IMAGE_EMPTY" "GtkImageType")
;;; 2.91.0 (CINT "GTK_IMAGE_PIXMAP" "GtkImageType")
;;; 2.90.6 (CINT "GTK_IMAGE_IMAGE" "GtkImageType")
;;; 3.93.0 (CINT "GTK_IMAGE_PIXBUF" "GtkImageType")
;;; 3.92.1 (CINT "GTK_IMAGE_STOCK" "GtkImageType")
;;; 3.92.1 (CINT "GTK_IMAGE_ICON_SET" "GtkImageType")
;;; 3.93.0 (CINT "GTK_IMAGE_ANIMATION" "GtkImageType")
;;;;(CFNC "GType gtk_image_get_type void")
(CFNC "GtkWidget* gtk_image_new void")
;;; 2.91.0 (CFNC "GtkWidget* gtk_image_new_from_pixmap GdkPixmap* @pixmap GdkBitmap* @mask")
;;; 2.90.6 (CFNC "GtkWidget* gtk_image_new_from_image GdkImage* @image GdkBitmap* @mask")
(CFNC "GtkWidget* gtk_image_new_from_file gchar* filename")
(CFNC "GtkWidget* gtk_image_new_from_pixbuf GdkPixbuf* @pixbuf")
;;; (CFNC "GtkWidget* gtk_image_new_from_stock gchar* stock_id GtkIconSize size")
;;; (CFNC "GtkWidget* gtk_image_new_from_icon_set GtkIconSet* icon_set GtkIconSize size")
;;; 3.93.0 (CFNC "GtkWidget* gtk_image_new_from_animation GdkPixbufAnimation* animation")
;;; 2.91.0 (CFNC "void gtk_image_set_from_pixmap GtkImage* image GdkPixmap* @pixmap GdkBitmap* @mask")
;;; 2.90.6 (CFNC "void gtk_image_set_from_image GtkImage* image GdkImage* @gdk_image GdkBitmap* @mask")
(CFNC "void gtk_image_set_from_file GtkImage* image gchar* filename")
(CFNC "void gtk_image_set_from_pixbuf GtkImage* image GdkPixbuf* @pixbuf")
;;; (CFNC "void gtk_image_set_from_stock GtkImage* image gchar* stock_id GtkIconSize size")
;;; (CFNC "void gtk_image_set_from_icon_set GtkImage* image GtkIconSet* icon_set GtkIconSize size")
;;; 3.93.0 (CFNC "void gtk_image_set_from_animation GtkImage* image GdkPixbufAnimation* @animation")
(CFNC "GtkImageType gtk_image_get_storage_type GtkImage* image")
;;; 2.91.0 (CFNC "void gtk_image_get_pixmap GtkImage* image GdkPixmap** [pixmap] GdkBitmap** [mask]")
;;; 2.90.6 (CFNC "void gtk_image_get_image GtkImage* image GdkImage** [gdk_image] GdkBitmap** [mask]")
;;; 3.93.0 (CFNC "GdkPixbuf* gtk_image_get_pixbuf GtkImage* image")
;;; (CFNC "void gtk_image_get_stock GtkImage* image gchar** [stock_id] GtkIconSize* [size]")
;;; (CFNC "void gtk_image_get_icon_set GtkImage* image GtkIconSet** [icon_set] GtkIconSize* [size]")
;;; 3.93.0 (CFNC "GdkPixbufAnimation* gtk_image_get_animation GtkImage* image")

;;; out 3.9.8
;;; (CCAST "GTK_IMAGE_MENU_ITEM(obj)" "GtkImageMenuItem*")
;;; (CCHK "GTK_IS_IMAGE_MENU_ITEM(obj)" "GtkImageMenuItem*")
;;; ;;;;(CFNC "GType gtk_image_menu_item_get_type void")
;;; (CFNC "GtkWidget* gtk_image_menu_item_new void")
;;; (CFNC "GtkWidget* gtk_image_menu_item_new_with_label gchar* label") ; null = segfault
;;; (CFNC "GtkWidget* gtk_image_menu_item_new_with_mnemonic gchar* label")
;;; (CFNC "GtkWidget* gtk_image_menu_item_new_from_stock gchar* stock_id GtkAccelGroup* @accel_group")
;;; (CFNC "void gtk_image_menu_item_set_image GtkImageMenuItem* image_menu_item GtkWidget* image")
;;; (CFNC "GtkWidget* gtk_image_menu_item_get_image GtkImageMenuItem* image_menu_item")

(CCAST "GTK_IM_CONTEXT(obj)" "GtkIMContext*")
(CCHK "GTK_IS_IM_CONTEXT(obj)" "GtkIMContext*")
;;;;(CFNC "GType gtk_im_context_get_type void")
(CFNC "void gtk_im_context_get_preedit_string GtkIMContext* context gchar** [str] PangoAttrList** [attrs] gint* [cursor_pos]") ; FREE (str)
(CFNC "gboolean gtk_im_context_filter_keypress GtkIMContext* context GdkEventKey* event")
(CFNC "void gtk_im_context_focus_in GtkIMContext* context")
(CFNC "void gtk_im_context_focus_out GtkIMContext* context")
(CFNC "void gtk_im_context_reset GtkIMContext* context")
(CFNC "void gtk_im_context_set_cursor_location GtkIMContext* context GdkRectangle* area")
(CFNC "void gtk_im_context_set_use_preedit GtkIMContext* context gboolean use_preedit")
(CFNC "void gtk_im_context_set_surrounding GtkIMContext* context gchar* text gint len gint cursor_index")
(CFNC "gboolean gtk_im_context_get_surrounding GtkIMContext* context gchar** [text] gint* [cursor_index]")
(CFNC "gboolean gtk_im_context_delete_surrounding GtkIMContext* context gint offset gint n_chars")
(CCAST "GTK_IM_CONTEXT_SIMPLE(obj)" "GtkIMContextSimple*")
(CCHK "GTK_IS_IM_CONTEXT_SIMPLE(obj)" "GtkIMContextSimple*")
(CINT "GTK_MAX_COMPOSE_LEN")
;;;;(CFNC "GType gtk_im_context_simple_get_type void")
(CFNC "GtkIMContext* gtk_im_context_simple_new void")
(CFNC "void gtk_im_context_simple_add_table GtkIMContextSimple* context_simple guint16* data gint max_seq_len gint n_seqs")
;;; (CCAST "GTK_IM_MULTICONTEXT(obj)" "GtkIMMulticontext*")
;;; (CCHK "GTK_IS_IM_MULTICONTEXT(obj)" "GtkIMMulticontext*")
;;;;(CFNC "GType gtk_im_multicontext_get_type void")
;;; (CFNC "GtkIMContext* gtk_im_multicontext_new void")
;;; 3.11 (CFNC "void gtk_im_multicontext_append_menuitems GtkIMMulticontext* context GtkMenuShell* menushell")
;;; (CCAST "GTK_INPUT_DIALOG(obj)" "GtkInputDialog*")
;;; (CCHK "GTK_IS_INPUT_DIALOG(obj)" "GtkInputDialog*")
;;;;(CFNC "GType gtk_input_dialog_get_type void")
;;; (CFNC "GtkWidget* gtk_input_dialog_new void")
;;; 3.96.0 (CCAST "GTK_INVISIBLE(obj)" "GtkInvisible*")
;;; 3.96.0 (CCHK "GTK_IS_INVISIBLE(obj)" "GtkInvisible*")
;;;;(CFNC "GType gtk_invisible_get_type void")
;;; 3.96.0 (CFNC "GtkWidget* gtk_invisible_new void")
;;; out 2.3 (CCAST "GTK_ITEM_FACTORY(object)" "GtkItemFactory*")
;;; out 2.3 (CCHK "GTK_IS_ITEM_FACTORY(object)" "GtkItemFactory*")
;;;;;;; out 2.3 (CFNC "GType gtk_item_factory_get_type void")
;;; out 2.3 (CFNC "GtkItemFactory* gtk_item_factory_new GType container_type gchar* path GtkAccelGroup* @accel_group")
;;; out 2.3 (CFNC "void gtk_item_factory_construct GtkItemFactory* ifactory GType container_type gchar* path GtkAccelGroup* @accel_group")
;;; out 2.3 (CFNC "void gtk_item_factory_add_foreign GtkWidget* accel_widget gchar* full_path GtkAccelGroup* accel_group guint keyval GdkModifierType modifiers;;; out 2.3 ")
;;; out 2.3 (CFNC "GtkItemFactory* gtk_item_factory_from_widget GtkWidget* widget")
;;; out 2.3 (CFNC "gchar* gtk_item_factory_path_from_widget GtkWidget* widget")
;;; out 2.3 (CFNC "GtkWidget* gtk_item_factory_get_item GtkItemFactory* ifactory gchar* path")
;;; out 2.3 (CFNC "GtkWidget* gtk_item_factory_get_widget GtkItemFactory* ifactory gchar* path")
;;; out 2.3 (CFNC "GtkWidget* gtk_item_factory_get_widget_by_action GtkItemFactory* ifactory guint action")
;;; out 2.3 (CFNC "GtkWidget* gtk_item_factory_get_item_by_action GtkItemFactory* ifactory guint action")
;;; out 2.3 (CFNC "void gtk_item_factory_create_item GtkItemFactory* ifactory GtkItemFactoryEntry* entry gpointer callback_data guint callback_type")
;;; out 2.3 (CFNC "void gtk_item_factory_create_items GtkItemFactory* ifactory guint n_entries GtkItemFactoryEntry* entries gpointer callback_data")
;;; out 2.3 (CFNC "void gtk_item_factory_delete_item GtkItemFactory* ifactory gchar* path")
;;; out 2.3 (CFNC "void gtk_item_factory_delete_entry GtkItemFactory* ifactory GtkItemFactoryEntry* entry")
;;; out 2.3 (CFNC "void gtk_item_factory_delete_entries GtkItemFactory* ifactory guint n_entries GtkItemFactoryEntry* entries")
;;; out 2.3 (CFNC "void gtk_item_factory_popup GtkItemFactory* ifactory guint x guint y guint mouse_button guint32 time")
;;; out 2.3 (CFNC "void gtk_item_factory_popup_with_data GtkItemFactory* ifactory lambda_data @func_info GtkDestroyNotify destroy guint x guint y guint mouse_button guint32 time")
;;; out 2.3 (CFNC "gpointer gtk_item_factory_popup_data GtkItemFactory* ifactory")
;;; out 2.3 (CFNC "gpointer gtk_item_factory_popup_data_from_widget GtkWidget* widget")
;;; out 2.3 (CFNC "void gtk_item_factory_set_translate_func GtkItemFactory* ifactory GtkTranslateFunc func lambda_data @func_info GtkDestroyNotify notify")
;;; 2.90.7 (CCAST "GTK_ITEM(obj)" "GtkItem*")
;;; 2.90.7 (CCHK "GTK_IS_ITEM(obj)" "GtkItem*")
;;; 2.90.7 ;;;;(CFNC "GType gtk_item_get_type void")
;;; 2.90.7 (CFNC "void gtk_item_select GtkItem* item")
;;; 2.90.7 (CFNC "void gtk_item_deselect GtkItem* item")
;;; 2.90.7 (CFNC "void gtk_item_toggle GtkItem* item")
(CCAST "GTK_LABEL(obj)" "GtkLabel*")
(CCHK "GTK_IS_LABEL(obj)" "GtkLabel*")
;;;;(CFNC "GType gtk_label_get_type void")
(CFNC "GtkWidget* gtk_label_new char* str")
(CFNC "GtkWidget* gtk_label_new_with_mnemonic char* str")
(CFNC "void gtk_label_set_text GtkLabel* label char* str")
(CFNC "gchar* gtk_label_get_text GtkLabel* label")
(CFNC "void gtk_label_set_attributes GtkLabel* label PangoAttrList* attrs")
(CFNC "PangoAttrList* gtk_label_get_attributes GtkLabel* label")
(CFNC "void gtk_label_set_label GtkLabel* label gchar* str")
(CFNC "gchar* gtk_label_get_label GtkLabel* label")
(CFNC "void gtk_label_set_markup GtkLabel* label gchar* str")
(CFNC "void gtk_label_set_use_markup GtkLabel* label gboolean setting")
(CFNC "gboolean gtk_label_get_use_markup GtkLabel* label")
(CFNC "void gtk_label_set_use_underline GtkLabel* label gboolean setting")
(CFNC "gboolean gtk_label_get_use_underline GtkLabel* label")
(CFNC "void gtk_label_set_markup_with_mnemonic GtkLabel* label gchar* str")
(CFNC "guint gtk_label_get_mnemonic_keyval GtkLabel* label")
(CFNC "void gtk_label_set_mnemonic_widget GtkLabel* label GtkWidget* widget")
(CFNC "GtkWidget* gtk_label_get_mnemonic_widget GtkLabel* label")
(CFNC "void gtk_label_set_text_with_mnemonic GtkLabel* label gchar* str")
(CFNC "void gtk_label_set_justify GtkLabel* label GtkJustification jtype")
(CFNC "GtkJustification gtk_label_get_justify GtkLabel* label")
(CFNC "void gtk_label_set_pattern GtkLabel* label gchar* pattern")
(CFNC "void gtk_label_set_line_wrap GtkLabel* label gboolean wrap")
(CFNC "gboolean gtk_label_get_line_wrap GtkLabel* label")
(CFNC "void gtk_label_set_selectable GtkLabel* label gboolean setting")
(CFNC "gboolean gtk_label_get_selectable GtkLabel* label")
(CFNC "void gtk_label_select_region GtkLabel* label gint start_offset gint end_offset")
(CFNC "gboolean gtk_label_get_selection_bounds GtkLabel* label gint* [start] gint* [end]")
(CFNC "PangoLayout* gtk_label_get_layout GtkLabel* label")
(CFNC "void gtk_label_get_layout_offsets GtkLabel* label gint* [x] gint* [y]")
;;; 3.96.0 (CCAST "GTK_LAYOUT(obj)" "GtkLayout*")
;;; 3.96.0 (CCHK "GTK_IS_LAYOUT(obj)" "GtkLayout*")
;;;;(CFNC "GType gtk_layout_get_type void")
;;; 3.96.0 (CFNC "GtkWidget* gtk_layout_new GtkAdjustment* @hadjustment GtkAdjustment* @vadjustment")
;;; 3.96.0 (CFNC "void gtk_layout_put GtkLayout* layout GtkWidget* child_widget gint x gint y")
;;; 3.96.0 (CFNC "void gtk_layout_move GtkLayout* layout GtkWidget* child_widget gint x gint y")
;;; 3.96.0 (CFNC "void gtk_layout_set_size GtkLayout* layout guint width guint height")
;;; 3.96.0 (CFNC "void gtk_layout_get_size GtkLayout* layout guint* [width] guint* [height]")
;;; 2.91.2 (CFNC "GtkAdjustment* gtk_layout_get_hadjustment GtkLayout* layout")
;;; 2.91.2 (CFNC "GtkAdjustment* gtk_layout_get_vadjustment GtkLayout* layout")
;;; 2.91.2 (CFNC "void gtk_layout_set_hadjustment GtkLayout* layout GtkAdjustment* @adjustment")
;;; 2.91.2 (CFNC "void gtk_layout_set_vadjustment GtkLayout* layout GtkAdjustment* @adjustment")
(CCAST "GTK_LIST_STORE(obj)" "GtkListStore*")
(CCHK "GTK_IS_LIST_STORE(obj)" "GtkListStore*")
;;;;(CFNC "GType gtk_list_store_get_type void")
(CFNC-PA "GtkListStore* gtk_list_store_new gint n_columns etc types" 1 6 '("GType"))
(CFNC "GtkListStore* gtk_list_store_newv gint n_columns GType* types")
(CFNC "void gtk_list_store_set_column_types GtkListStore* list_store gint n_columns GType* types")
;(CFNC "void gtk_list_store_set_value GtkListStore* list_store GtkTreeIter* iter gint column GValue* value")
(CFNC-PA "void gtk_list_store_set GtkListStore* list_store GtkTreeIter* iter etc values" 2 10 '("int" "gchar*")) ; just string values for now
;;; ideally any types here
;;;;(CFNC "void gtk_list_store_set_valist GtkListStore* list_store GtkTreeIter* iter va_list var_args")
;;; (CFNC "void gtk_list_store_remove GtkListStore* list_store GtkTreeIter* iter")
;;; this now returns gboolean!
(CFNC "void gtk_list_store_insert GtkListStore* list_store GtkTreeIter* iter gint position")
(CFNC "void gtk_list_store_insert_before GtkListStore* list_store GtkTreeIter* iter GtkTreeIter* @sibling")
(CFNC "void gtk_list_store_insert_after GtkListStore* list_store GtkTreeIter* iter GtkTreeIter* @sibling")
(CFNC "void gtk_list_store_prepend GtkListStore* list_store GtkTreeIter* iter")
(CFNC "void gtk_list_store_append GtkListStore* list_store GtkTreeIter* iter")
(CFNC "void gtk_list_store_clear GtkListStore* list_store")
(CINT "GTK_PRIORITY_RESIZE")
(CFNC "gchar* gtk_check_version guint required_major guint required_minor guint required_micro" 'const-return)

;;; (CFNC "void gtk_init int* {argc} char*** |argv|")
;;; (CFNC "gboolean gtk_init_check int* {argc} char*** |argv|")
;;;   these two are done by hand in makexg.scm to improve error handling
;;; both out gtk 4???

;(CFNC "void gtk_init_abi_check int* argc char*** argv int num_checks size_t sizeof_GtkWindow")
;(CFNC "gboolean gtk_init_check_abi_check int* argc char*** argv int num_checks size_t sizeof_GtkWindow")
(CFNC "void gtk_disable_setlocale void")
;;; (CFNC-gtk2 "gchar* gtk_set_locale void")
(CFNC "PangoLanguage* gtk_get_default_language void")
(CFNC "gint gtk_events_pending void")
(CFNC "void gtk_main_do_event GdkEvent* event")
(CFNC "void gtk_main void")
(CFNC "guint gtk_main_level void")
(CFNC "void gtk_main_quit void")
(CFNC "gboolean gtk_main_iteration void")
(CFNC "gboolean gtk_main_iteration_do gboolean blocking")
;;; 3.94.0 (CFNC "gboolean gtk_true void")
;;; 3.94.0 (CFNC "gboolean gtk_false void")
(CFNC "void gtk_grab_add GtkWidget* widget")
(CFNC "GtkWidget* gtk_grab_get_current void")
(CFNC "void gtk_grab_remove GtkWidget* widget")
;;; 2.91.1 (CFNC "void gtk_init_add GtkFunction func lambda_data @func_info")
;;; 2.91.1 (CFNC "void gtk_quit_add_destroy guint main_level GtkObject* object")
;;; 2.91.1 (CFNC "guint gtk_quit_add guint main_level GtkFunction func lambda_data @func_info")
;;; 2.91.1 (CFNC "guint gtk_quit_add_full guint main_level GtkFunction func GtkCallbackMarshal marshal lambda_data @func_info GtkDestroyNotify destroy")
;;; 2.91.1 (CFNC "void gtk_quit_remove guint quit_handler_id")
;;; 2.91.1 (CFNC "void gtk_quit_remove_by_data xen data")
;;; out 2.3 (CFNC "guint gtk_timeout_add guint32 interval GtkTimeoutFunction func lambda_data @func_info")
;;; out 2.3 ;(CFNC "guint gtk_timeout_add_full guint32 interval GtkTimeoutFunction func GtkCallbackMarshal marshal lambda_data @func_info GtkDestroyNotify destroy")
;;; out 2.3 (CFNC "void gtk_timeout_remove guint timeout_handler_id")
;;; out 2.3 (CFNC "guint gtk_idle_add GtkFunction func lambda_data @func_info")
;;; out 2.3 (CFNC "guint gtk_idle_add_priority gint priority GtkFunction func lambda_data @func_info")
;;; out 2.3 ;(CFNC "guint gtk_idle_add_full gint priority GtkFunction func GtkCallbackMarshal marshal lambda_data @func_info GtkDestroyNotify destroy")
;;; out 2.3 (CFNC "void gtk_idle_remove guint idle_handler_id")
;;; out 2.3 (CFNC "void gtk_idle_remove_by_data xen data")
;;; out 2.3 ;(CFNC "guint gtk_input_add_full gint source GdkInputCondition condition GdkInputFunction func GtkCallbackMarshal marshal lambda_data @func_info GtkDestroyNotify destroy")
;;; out 2.3 (CFNC "void gtk_input_remove guint input_handler_id")
;;; 3.3.8 (CFNC "guint gtk_key_snooper_install GtkKeySnoopFunc func lambda_data @func_info")
;;; 3.3.8 (CFNC "void gtk_key_snooper_remove guint snooper_handler_id")
(CFNC "GdkEvent* gtk_get_current_event void")
(CFNC "guint32 gtk_get_current_event_time void")
(CFNC "gboolean gtk_get_current_event_state GdkModifierType* [state]")
(CFNC "GtkWidget* gtk_get_event_widget GdkEvent* @event")
(CFNC "void gtk_propagate_event GtkWidget* widget GdkEvent* event")
;;;;(CFNC "GType gtk_menu_bar_get_type void")
(CCAST "GTK_MENU_BAR(obj)" "GtkMenuBar*")
(CCHK "GTK_IS_MENU_BAR(obj)" "GtkMenuBar*")
(CFNC "GtkWidget* gtk_menu_bar_new void")
(CCAST "GTK_MENU(obj)" "GtkMenu*")
(CCHK "GTK_IS_MENU(obj)" "GtkMenu*")
;;;;(CFNC "GType gtk_menu_get_type void")
(CFNC "GtkWidget* gtk_menu_new void")
;;; 3.22.2 (CFNC "void gtk_menu_popup GtkMenu* menu GtkWidget* @parent_menu_shell GtkWidget* @parent_menu_item GtkMenuPositionFunc func lambda_data @func_info guint button guint32 activate_time")
(CFNC "void gtk_menu_reposition GtkMenu* menu")
(CFNC "void gtk_menu_popdown GtkMenu* menu")
(CFNC "GtkWidget* gtk_menu_get_active GtkMenu* menu")
(CFNC "void gtk_menu_set_active GtkMenu* menu guint index")
(CFNC "void gtk_menu_set_accel_group GtkMenu* menu GtkAccelGroup* @accel_group")
(CFNC "GtkAccelGroup* gtk_menu_get_accel_group GtkMenu* menu")
(CFNC "void gtk_menu_set_accel_path GtkMenu* menu gchar* accel_path") ; 1.3.13
;;(CFNC "void gtk_menu_attach_to_widget GtkMenu* menu GtkWidget* attach_widget GtkMenuDetachFunc func")
;; see note in makexg.scm -- no user data here, so this requires special handling
(CFNC "void gtk_menu_detach GtkMenu* menu")
(CFNC "GtkWidget* gtk_menu_get_attach_widget GtkMenu* menu")
;;; 3.3.2 (CFNC "void gtk_menu_set_tearoff_state GtkMenu* menu gboolean torn_off")
;;; 3.3.2 (CFNC "gboolean gtk_menu_get_tearoff_state GtkMenu* menu")
;;; 3.10 (CFNC "void gtk_menu_set_title GtkMenu* menu gchar* title")
;;; 3.10 (CFNC "gchar* gtk_menu_get_title GtkMenu* menu")
(CFNC "void gtk_menu_reorder_child GtkMenu* menu GtkWidget* child gint position")
(CFNC "void gtk_menu_set_monitor GtkMenu* menu gint monitor_num")
(CCAST "GTK_MENU_ITEM(obj)" "GtkMenuItem*")
(CCHK "GTK_IS_MENU_ITEM(obj)" "GtkMenuItem*")
;;;;(CFNC "GType gtk_menu_item_get_type void")
(CFNC "GtkWidget* gtk_menu_item_new void")
(CFNC "GtkWidget* gtk_menu_item_new_with_label gchar* label") ; null -> segfault
(CFNC "GtkWidget* gtk_menu_item_new_with_mnemonic gchar* label")
(CFNC "void gtk_menu_item_set_submenu GtkMenuItem* menu_item GtkWidget* submenu")
(CFNC "GtkWidget* gtk_menu_item_get_submenu GtkMenuItem* menu_item")
;;; (CFNC "void gtk_menu_item_remove_submenu GtkMenuItem* menu_item") ; out 2.11.3
(CFNC "void gtk_menu_item_select GtkMenuItem* menu_item")
(CFNC "void gtk_menu_item_deselect GtkMenuItem* menu_item")
(CFNC "void gtk_menu_item_activate GtkMenuItem* menu_item")
(CFNC "void gtk_menu_item_toggle_size_request GtkMenuItem* menu_item gint* requisition")
(CFNC "void gtk_menu_item_toggle_size_allocate GtkMenuItem* menu_item gint allocation")
;;; 3.1.4 (CFNC "void gtk_menu_item_set_right_justified GtkMenuItem* menu_item gboolean right_justified")
;;; 3.1.4 (CFNC "gboolean gtk_menu_item_get_right_justified GtkMenuItem* menu_item")
(CFNC "void gtk_menu_item_set_accel_path GtkMenuItem* menu_item gchar* accel_path")
(CCAST "GTK_MENU_SHELL(obj)" "GtkMenuShell*")
(CCHK "GTK_IS_MENU_SHELL(obj)" "GtkMenuShell*")
;;;;(CFNC "GType gtk_menu_shell_get_type void")
(CFNC "void gtk_menu_shell_append GtkMenuShell* menu_shell GtkWidget* child")
(CFNC "void gtk_menu_shell_prepend GtkMenuShell* menu_shell GtkWidget* child")
(CFNC "void gtk_menu_shell_insert GtkMenuShell* menu_shell GtkWidget* child gint position")
(CFNC "void gtk_menu_shell_deactivate GtkMenuShell* menu_shell")
(CFNC "void gtk_menu_shell_select_item GtkMenuShell* menu_shell GtkWidget* menu_item")
(CFNC "void gtk_menu_shell_deselect GtkMenuShell* menu_shell")
(CFNC "void gtk_menu_shell_activate_item GtkMenuShell* menu_shell GtkWidget* menu_item gboolean force_deactivate")
(CINT "GTK_MESSAGE_INFO" "GtkMessageType")
(CINT "GTK_MESSAGE_WARNING" "GtkMessageType")
(CINT "GTK_MESSAGE_QUESTION" "GtkMessageType")
(CINT "GTK_MESSAGE_ERROR" "GtkMessageType")
(CINT "GTK_BUTTONS_NONE" "GtkButtonsType")
(CINT "GTK_BUTTONS_OK" "GtkButtonsType")
(CINT "GTK_BUTTONS_CLOSE" "GtkButtonsType")
(CINT "GTK_BUTTONS_CANCEL" "GtkButtonsType")
(CINT "GTK_BUTTONS_YES_NO" "GtkButtonsType")
(CINT "GTK_BUTTONS_OK_CANCEL" "GtkButtonsType")
;(CCAST "GTK_MESSAGE_DIALOG(obj)" "GtkMessageDialog*")
;(CCHK "GTK_IS_MESSAGE_DIALOG(obj)" "GtkMessageDialog*")
;;;;(CFNC "GType gtk_message_dialog_get_type void")
;;;(CFNC "GtkWidget* gtk_message_dialog_new GtkWindow* parent GtkDialogFlags flags GtkMessageType type GtkButtonsType buttons gchar* message_format ...")
;;; the ... arg here would have to be a vnprintf style arg
;;; 3.13.2 (CCAST "GTK_MISC(obj)" "GtkMisc*")
;;; 3.13.2 (CCHK "GTK_IS_MISC(obj)" "GtkMisc*")
;;; 3.13.2 ;;;;(CFNC "GType gtk_misc_get_type void")
;;; 3.13.2 (CFNC "void gtk_misc_set_alignment GtkMisc* misc gfloat xalign gfloat yalign")
;;; 3.13.2 (CFNC "void gtk_misc_get_alignment GtkMisc* misc gfloat* [xalign] gfloat* [yalign]")
;;; 3.13.2 (CFNC "void gtk_misc_set_padding GtkMisc* misc gint xpad gint ypad")
;;; 3.13.2 (CFNC "void gtk_misc_get_padding GtkMisc* misc gint* [xpad] gint* [ypad]")
(CCAST "GTK_NOTEBOOK(obj)" "GtkNotebook*")
(CCHK "GTK_IS_NOTEBOOK(obj)" "GtkNotebook*")
(CINT "GTK_NOTEBOOK_TAB_FIRST" "GtkNotebookTab")
(CINT "GTK_NOTEBOOK_TAB_LAST" "GtkNotebookTab")
;;;;(CFNC "GType gtk_notebook_get_type void")
(CFNC "GtkWidget* gtk_notebook_new void")
(CFNC "void gtk_notebook_remove_page GtkNotebook* notebook gint page_num")
(CFNC "gint gtk_notebook_get_current_page GtkNotebook* notebook")
(CFNC "GtkWidget* gtk_notebook_get_nth_page GtkNotebook* notebook gint page_num")
(CFNC "gint gtk_notebook_page_num GtkNotebook* notebook GtkWidget* child")
(CFNC "void gtk_notebook_set_current_page GtkNotebook* notebook gint page_num")
(CFNC "void gtk_notebook_next_page GtkNotebook* notebook")
(CFNC "void gtk_notebook_prev_page GtkNotebook* notebook")
(CFNC "void gtk_notebook_set_show_border GtkNotebook* notebook gboolean show_border")
(CFNC "gboolean gtk_notebook_get_show_border GtkNotebook* notebook")
(CFNC "void gtk_notebook_set_show_tabs GtkNotebook* notebook gboolean show_tabs")
(CFNC "gboolean gtk_notebook_get_show_tabs GtkNotebook* notebook")
(CFNC "void gtk_notebook_set_tab_pos GtkNotebook* notebook GtkPositionType pos")
(CFNC "GtkPositionType gtk_notebook_get_tab_pos GtkNotebook* notebook")
(CFNC "void gtk_notebook_set_scrollable GtkNotebook* notebook gboolean scrollable")
(CFNC "gboolean gtk_notebook_get_scrollable GtkNotebook* notebook")
(CFNC "void gtk_notebook_popup_enable GtkNotebook* notebook")
(CFNC "void gtk_notebook_popup_disable GtkNotebook* notebook")
(CFNC "GtkWidget* gtk_notebook_get_tab_label GtkNotebook* notebook GtkWidget* child")
(CFNC "void gtk_notebook_set_tab_label GtkNotebook* notebook GtkWidget* child GtkWidget* @tab_label")
(CFNC "void gtk_notebook_set_tab_label_text GtkNotebook* notebook GtkWidget* child gchar* tab_text")
(CFNC "gchar* gtk_notebook_get_tab_label_text GtkNotebook* notebook GtkWidget* child")
(CFNC "GtkWidget* gtk_notebook_get_menu_label GtkNotebook* notebook GtkWidget* child")
(CFNC "void gtk_notebook_set_menu_label GtkNotebook* notebook GtkWidget* child GtkWidget* menu_label")
(CFNC "void gtk_notebook_set_menu_label_text GtkNotebook* notebook GtkWidget* child gchar* menu_text")
(CFNC "gchar* gtk_notebook_get_menu_label_text GtkNotebook* notebook GtkWidget* child")
;;; out 2.19.0 (CFNC "void gtk_notebook_query_tab_label_packing GtkNotebook* notebook GtkWidget* child gboolean* [expand] gboolean* [fill] GtkPackType* [pack_type]")
;;; (CFNC "void gtk_notebook_set_tab_label_packing GtkNotebook* notebook GtkWidget* child gboolean expand gboolean fill GtkPackType pack_type")
(CFNC "void gtk_notebook_reorder_child GtkNotebook* notebook GtkWidget* child gint position")
;;; the following changed returned type 2.3.2
(CFNC "gint gtk_notebook_append_page GtkNotebook* notebook GtkWidget* child GtkWidget* @tab_label")
(CFNC "gint gtk_notebook_append_page_menu GtkNotebook* notebook GtkWidget* child GtkWidget* @tab_label GtkWidget* @menu_label")
(CFNC "gint gtk_notebook_prepend_page GtkNotebook* notebook GtkWidget* child GtkWidget* @tab_label")
(CFNC "gint gtk_notebook_prepend_page_menu GtkNotebook* notebook GtkWidget* child GtkWidget* @tab_label GtkWidget* @menu_label")
(CFNC "gint gtk_notebook_insert_page GtkNotebook* notebook GtkWidget* child GtkWidget* @tab_label gint position")
(CFNC "gint gtk_notebook_insert_page_menu GtkNotebook* notebook GtkWidget* child GtkWidget* @tab_label GtkWidget* @menu_label gint position")

;;; 2.91.0 (CCAST "GTK_OBJECT(object)" "GtkObject*")
;;; 2.91.0 (CCHK "GTK_IS_OBJECT(object)" "GtkObject*")

;;; (CCAST-gtk2 "GTK_OBJECT(object)" "GtkObject*")
;;; (CCHK-gtk2 "GTK_IS_OBJECT(object)" "GtkObject*")

;;; 2.91.0 ;(CCAST2 "GTK_OBJECT_TYPE(object)")
;;; 2.19.3 (CFNC "char* GTK_OBJECT_TYPE_NAME GtkObject* object")
;;;(CINT "GTK_IN_DESTRUCTION") ; out 2.90.3
;(CINT "GTK_FLOATING") ; out 2.9.0
;(CINT "GTK_RESERVED_1")
;(CINT "GTK_RESERVED_2")
;;;(CFNC "int GTK_OBJECT_FLAGS GtkObject* obj") ; 2.90.3
;(CFNC "gboolean GTK_OBJECT_FLOATING GtkObject* obj") ; out 2.9.0
;;;(CFNC "void GTK_OBJECT_SET_FLAGS GtkObject* obj int flag")
;;;(CFNC "void GTK_OBJECT_UNSET_FLAGS GtkObject* obj int flag")
;;;;(CFNC "GType gtk_object_get_type void")
;;; out 2.3 (CFNC "GtkObject* gtk_object_new GType type gchar* first_property_name etc")
;;; out 2.9.0 (CFNC "void gtk_object_sink GtkObject* object")
;;; 2.91.0 (CFNC "void gtk_object_destroy GtkObject* object")
;;; out 2.3 (CCAST "GTK_OPTION_MENU(obj)" "GtkOptionMenu*")
;;; out 2.3 (CCHK "GTK_IS_OPTION_MENU(obj)" "GtkOptionMenu*")
;;;;;;; out 2.3 (CFNC "GType gtk_option_menu_get_type void")
;;; out 2.3 (CFNC "GtkWidget* gtk_option_menu_new void")
;;; out 2.3 (CFNC "GtkWidget* gtk_option_menu_get_menu GtkOptionMenu* option_menu")
;;; out 2.3 (CFNC "void gtk_option_menu_set_menu GtkOptionMenu* option_menu GtkWidget* menu")
;;; out 2.3 (CFNC "void gtk_option_menu_remove_menu GtkOptionMenu* option_menu")
;;; out 2.3 (CFNC "gint gtk_option_menu_get_history GtkOptionMenu* option_menu")
;;; out 2.3 (CFNC "void gtk_option_menu_set_history GtkOptionMenu* option_menu guint index")
(CCAST "GTK_PANED(obj)" "GtkPaned*")
(CCHK "GTK_IS_PANED(obj)" "GtkPaned*")
;;;;(CFNC "GType gtk_paned_get_type void")
(CFNC "void gtk_paned_add1 GtkPaned* paned GtkWidget* child")
(CFNC "void gtk_paned_add2 GtkPaned* paned GtkWidget* child")
(CFNC "void gtk_paned_pack1 GtkPaned* paned GtkWidget* child gboolean resize gboolean shrink")
(CFNC "void gtk_paned_pack2 GtkPaned* paned GtkWidget* child gboolean resize gboolean shrink")
(CFNC "gint gtk_paned_get_position GtkPaned* paned")
(CFNC "void gtk_paned_set_position GtkPaned* paned gint position")
;;; out 2.3 (CFNC "void gtk_paned_compute_position GtkPaned* paned gint allocation gint child1_req gint child2_req")
;;; 2.99.3 (CCAST "GTK_PLUG(obj)" "GtkPlug*")
;;; 2.99.3 (CCHK "GTK_IS_PLUG(obj)" "GtkPlug*")
;;;;(CFNC "GType gtk_plug_get_type void")
;;; 2.99.3 (CFNC "void gtk_plug_construct GtkPlug* plug GdkNativeWindow socket_id")
;;; 2.99.3 (CFNC "GtkWidget* gtk_plug_new GdkNativeWindow socket_id")
;;; 2.99.3 (CFNC "GdkNativeWindow gtk_plug_get_id GtkPlug* plug")
(CCAST "GTK_PROGRESS_BAR(obj)" "GtkProgressBar*")
(CCHK "GTK_IS_PROGRESS_BAR(obj)" "GtkProgressBar*")
;(CINT "GTK_PROGRESS_CONTINUOUS" "GtkProgressBarStyle")
;(CINT "GTK_PROGRESS_DISCRETE" "GtkProgressBarStyle")
;deprecated 2.4
; out 2.90.7
;(CINT "GTK_PROGRESS_LEFT_TO_RIGHT" "GtkProgressBarOrientation")
;(CINT "GTK_PROGRESS_RIGHT_TO_LEFT" "GtkProgressBarOrientation")
;(CINT "GTK_PROGRESS_BOTTOM_TO_TOP" "GtkProgressBarOrientation")
;(CINT "GTK_PROGRESS_TOP_TO_BOTTOM" "GtkProgressBarOrientation")
;;;;(CFNC "GType gtk_progress_bar_get_type void")
(CFNC "GtkWidget* gtk_progress_bar_new void")
(CFNC "void gtk_progress_bar_pulse GtkProgressBar* pbar")
(CFNC "void gtk_progress_bar_set_text GtkProgressBar* pbar gchar* text")
(CFNC "void gtk_progress_bar_set_fraction GtkProgressBar* pbar gdouble fraction")
(CFNC "void gtk_progress_bar_set_pulse_step GtkProgressBar* pbar gdouble fraction")
;;; 2.90.7 (CFNC "void gtk_progress_bar_set_orientation GtkProgressBar* pbar GtkProgressBarOrientation orientation")
(CFNC "gchar* gtk_progress_bar_get_text GtkProgressBar* pbar")
(CFNC "gdouble gtk_progress_bar_get_fraction GtkProgressBar* pbar")
(CFNC "gdouble gtk_progress_bar_get_pulse_step GtkProgressBar* pbar")
;;; 2.90.7 (CFNC "GtkProgressBarOrientation gtk_progress_bar_get_orientation GtkProgressBar* pbar")
(CCAST "GTK_RADIO_BUTTON(obj)" "GtkRadioButton*")
(CCHK "GTK_IS_RADIO_BUTTON(obj)" "GtkRadioButton*")
;;;;(CFNC "GType gtk_radio_button_get_type void")
(CFNC "GtkWidget* gtk_radio_button_new GSList* @group")
(CFNC "GtkWidget* gtk_radio_button_new_from_widget GtkRadioButton* group")
(CFNC "GtkWidget* gtk_radio_button_new_with_label GSList* @group gchar* label")
(CFNC "GtkWidget* gtk_radio_button_new_with_label_from_widget GtkRadioButton* group gchar* label")
(CFNC "GtkWidget* gtk_radio_button_new_with_mnemonic GSList* @group gchar* label")
(CFNC "GtkWidget* gtk_radio_button_new_with_mnemonic_from_widget GtkRadioButton* group gchar* label")
(CFNC "GSList* gtk_radio_button_get_group GtkRadioButton* radio_button")
(CFNC "void gtk_radio_button_set_group GtkRadioButton* radio_button GSList* @group")
(CCAST "GTK_RADIO_MENU_ITEM(obj)" "GtkRadioMenuItem*")
(CCHK "GTK_IS_RADIO_MENU_ITEM(obj)" "GtkRadioMenuItem*")
;;;;(CFNC "GType gtk_radio_menu_item_get_type void")
(CFNC "GtkWidget* gtk_radio_menu_item_new GSList* @group")
(CFNC "GtkWidget* gtk_radio_menu_item_new_with_label GSList* @group gchar* label")
(CFNC "GtkWidget* gtk_radio_menu_item_new_with_mnemonic GSList* @group gchar* label")
(CFNC "GSList* gtk_radio_menu_item_get_group GtkRadioMenuItem* radio_menu_item")
(CFNC "void gtk_radio_menu_item_set_group GtkRadioMenuItem* radio_menu_item GSList* @group")
(CCAST "GTK_RANGE(obj)" "GtkRange*")
(CCHK "GTK_IS_RANGE(obj)" "GtkRange*")
;;;;(CFNC "GType gtk_range_get_type void")
(CFNC "void gtk_range_set_adjustment GtkRange* range GtkAdjustment* @adjustment")
(CFNC "GtkAdjustment* gtk_range_get_adjustment GtkRange* range")
(CFNC "void gtk_range_set_inverted GtkRange* range gboolean setting")
(CFNC "gboolean gtk_range_get_inverted GtkRange* range")
(CFNC "void gtk_range_set_increments GtkRange* range gdouble step gdouble page")
(CFNC "void gtk_range_set_range GtkRange* range gdouble min gdouble max")
(CFNC "void gtk_range_set_value GtkRange* range gdouble value")
(CFNC "gdouble gtk_range_get_value GtkRange* range")
;;; (CFNC-gtk2 "void gtk_range_set_update_policy GtkRange* range GtkUpdateType policy")
;;; (CFNC-gtk2 "GtkUpdateType gtk_range_get_update_policy GtkRange* range")
;(CINT "GTK_RBNODE_BLACK")
;(CINT "GTK_RBNODE_RED")
;(CINT "GTK_RBNODE_IS_PARENT")
;(CINT "GTK_RBNODE_IS_SELECTED")
;(CINT "GTK_RBNODE_IS_PRELIT")
;(CINT "GTK_RBNODE_IS_SEMI_COLLAPSED")
;(CINT "GTK_RBNODE_IS_SEMI_EXPANDED")
;(CINT "GTK_RBNODE_INVALID")
;(CINT "GTK_RBNODE_COLUMN_INVALID")
;(CINT "GTK_RBNODE_DESCENDANTS_INVALID")
;(CINT "GTK_RBNODE_NON_COLORS")
;(CCAST2 "GTK_RBNODE_GET_COLOR(node)")
;(CCAST4 "GTK_RBNODE_SET_COLOR(node color)")
;(CCAST2 "GTK_RBNODE_GET_HEIGHT(node)")
;(CCAST2 "GTK_RBNODE_SET_FLAG(node")
;(CCAST2 "GTK_RBNODE_UNSET_FLAG(node")
;(CCAST2 "GTK_RBNODE_FLAG_SET(node")
;;; (CCAST "GTK_RC_STYLE(object)" "GtkRcStyle*")
;;; this collides with GTK_RC_STYLE defined in gtkwidget.h!
;;; (CCHK-gtk2 "GTK_IS_RC_STYLE(object)" "GtkRcStyle*")
;;; (CINT-gtk2 "GTK_RC_FG")
;;; (CINT-gtk2 "GTK_RC_BG")
;;; (CINT-gtk2 "GTK_RC_TEXT")
;;; (CINT-gtk2 "GTK_RC_BASE")
;;; (CFNC-gtk2 "void gtk_rc_add_default_file gchar* filename")
;;; (CFNC-gtk2 "void gtk_rc_set_default_files gchar** filenames")
;;; (CFNC-gtk2 "gchar** gtk_rc_get_default_files void")
;;; (CFNC-gtk2 "GtkStyle* gtk_rc_get_style GtkWidget* widget")
;(CFNC "GtkStyle* gtk_rc_get_style_by_paths GtkSettings* settings char* widget_path char* class_path GType type")
;(CFNC "gboolean gtk_rc_reparse_all_for_settings GtkSettings* settings gboolean force_load")
;(CFNC "gchar* gtk_rc_find_pixmap_in_path GtkSettings* settings GScanner* @scanner gchar* pixmap_file")
;;; (CFNC-gtk2 "void gtk_rc_parse gchar* filename")
;;; (CFNC-gtk2 "void gtk_rc_parse_string gchar* rc_string")
;;; (CFNC-gtk2 "gboolean gtk_rc_reparse_all void")
;;; ;;;;(CFNC-gtk2 "GType gtk_rc_style_get_type void")
;;; (CFNC-gtk2 "GtkRcStyle* gtk_rc_style_new void")
;;; (CFNC-gtk2 "GtkRcStyle* gtk_rc_style_copy GtkRcStyle* orig")
;;; ;;;-gtk2 (CFNC "void gtk_rc_style_ref GtkRcStyle* rc_style") ; out 2.11.0
;;; ;;;-gtk2 (CFNC "void gtk_rc_style_unref GtkRcStyle* rc_style")
;;; (CFNC-gtk2 "gchar* gtk_rc_find_module_in_path gchar* module_file" 'free)
;;; (CFNC-gtk2 "gchar* gtk_rc_get_theme_dir void" 'free)
;;; (CFNC-gtk2 "gchar* gtk_rc_get_module_dir void" 'free)
;;; (CFNC-gtk2 "gchar* gtk_rc_get_im_module_path void" 'free)
;;; (CFNC-gtk2 "gchar* gtk_rc_get_im_module_file void" 'free)

;; these are for "theme engines" -- I can't see any use for them in this context (deprecated 2.91.6)
;(CINT "GTK_RC_TOKEN_INVALID" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_INCLUDE" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_NORMAL" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_ACTIVE" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_PRELIGHT" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_SELECTED" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_INSENSITIVE" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_FG" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_BG" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_TEXT" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_BASE" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_XTHICKNESS" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_YTHICKNESS" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_FONT" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_FONTSET" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_FONT_NAME" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_BG_PIXMAP" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_PIXMAP_PATH" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_STYLE" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_BINDING" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_BIND" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_WIDGET" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_WIDGET_CLASS" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_CLASS" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_LOWEST" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_GTK" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_APPLICATION" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_THEME" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_RC" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_HIGHEST" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_ENGINE" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_MODULE_PATH" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_IM_MODULE_PATH" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_IM_MODULE_FILE" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_STOCK" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_LTR" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_RTL" "GtkRcTokenType")
;(CINT "GTK_RC_TOKEN_LAST" "GtkRcTokenType")
;(CFNC "GScanner* gtk_rc_scanner_new void")
;(CFNC "guint gtk_rc_parse_color GScanner* scanner GdkColor* color")
;(CFNC "guint gtk_rc_parse_state GScanner* scanner GtkStateType* [state]")
;(CFNC "guint gtk_rc_parse_priority GScanner* scanner GtkPathPriorityType* [priority]")
;(CFNC "gchar* gtk_win32_get_installation_directory void")

;;; 2.91.5 (CCAST "GTK_RULER(obj)" "GtkRuler*")
;;; 2.91.5 (CCHK "GTK_IS_RULER(obj)" "GtkRuler*")
;;;;(CFNC "GType gtk_ruler_get_type void")
;;; 2.91.5 (CFNC "void gtk_ruler_set_metric GtkRuler* ruler GtkMetricType metric")
;;; 2.91.5 (CFNC "void gtk_ruler_set_range GtkRuler* ruler gdouble lower gdouble upper gdouble position gdouble max_size")
;;; ;;; 2.91.5 (CFNC-gtk2 "void gtk_ruler_draw_ticks GtkRuler* ruler")
;;; ;;; 2.91.5 (CFNC-gtk2 "void gtk_ruler_draw_pos GtkRuler* ruler")
;;; 2.91.5 (CFNC "GtkMetricType gtk_ruler_get_metric GtkRuler* ruler")
;;; 2.91.5 (CFNC "void gtk_ruler_get_range GtkRuler* ruler gdouble* [lower] gdouble* [upper] gdouble* [position] gdouble* [max_size]")
(CCAST "GTK_SCALE(obj)" "GtkScale*")
(CCHK "GTK_IS_SCALE(obj)" "GtkScale*")
;;;;(CFNC "GType gtk_scale_get_type void")
(CFNC "void gtk_scale_set_digits GtkScale* scale gint digits")
(CFNC "gint gtk_scale_get_digits GtkScale* scale")
(CFNC "void gtk_scale_set_draw_value GtkScale* scale gboolean draw_value")
(CFNC "gboolean gtk_scale_get_draw_value GtkScale* scale")
(CFNC "void gtk_scale_set_value_pos GtkScale* scale GtkPositionType pos")
(CFNC "GtkPositionType gtk_scale_get_value_pos GtkScale* scale")
(CCAST "GTK_SCROLLBAR(obj)" "GtkScrollbar*")
(CCHK "GTK_IS_SCROLLBAR(obj)" "GtkScrollbar*")
;;;;(CFNC "GType gtk_scrollbar_get_type void")
(CCAST "GTK_SCROLLED_WINDOW(obj)" "GtkScrolledWindow*")
(CCHK "GTK_IS_SCROLLED_WINDOW(obj)" "GtkScrolledWindow*")
;;;;(CFNC "GType gtk_scrolled_window_get_type void")
(CFNC "GtkWidget* gtk_scrolled_window_new GtkAdjustment* @hadjustment GtkAdjustment* @vadjustment")
(CFNC "void gtk_scrolled_window_set_hadjustment GtkScrolledWindow* scrolled_window GtkAdjustment* @hadjustment")
(CFNC "void gtk_scrolled_window_set_vadjustment GtkScrolledWindow* scrolled_window GtkAdjustment* @hadjustment")
(CFNC "GtkAdjustment* gtk_scrolled_window_get_hadjustment GtkScrolledWindow* scrolled_window")
(CFNC "GtkAdjustment* gtk_scrolled_window_get_vadjustment GtkScrolledWindow* scrolled_window")
(CFNC "void gtk_scrolled_window_set_policy GtkScrolledWindow* scrolled_window GtkPolicyType hscrollbar_policy GtkPolicyType vscrollbar_policy")
(CFNC "void gtk_scrolled_window_get_policy GtkScrolledWindow* scrolled_window GtkPolicyType* [hscrollbar_policy] GtkPolicyType* [vscrollbar_policy]")
(CFNC "void gtk_scrolled_window_set_placement GtkScrolledWindow* scrolled_window GtkCornerType window_placement")
(CFNC "GtkCornerType gtk_scrolled_window_get_placement GtkScrolledWindow* scrolled_window")
(CFNC "void gtk_scrolled_window_set_shadow_type GtkScrolledWindow* scrolled_window GtkShadowType type")
(CFNC "GtkShadowType gtk_scrolled_window_get_shadow_type GtkScrolledWindow* scrolled_window")
;;; 3.8 (CFNC "void gtk_scrolled_window_add_with_viewport GtkScrolledWindow* scrolled_window GtkWidget* child")
;;; 3.93.0 (CFNC "GtkTargetList* gtk_target_list_new GtkTargetEntry* @targets guint ntargets")
;;; return type changed 290
;;;(CFNC "void gtk_target_list_ref GtkTargetList* list")
;;; 3.93.0 (CFNC "void gtk_target_list_unref GtkTargetList* list")
;;; 3.93.0 (CFNC "void gtk_target_list_add GtkTargetList* list GdkAtom target guint flags guint info")
;;; 3.93.0 (CFNC "void gtk_target_list_add_table GtkTargetList* list GtkTargetEntry* targets guint ntargets")
;;; 3.93.0 (CFNC "void gtk_target_list_remove GtkTargetList* list GdkAtom target")
;;; 3.93.0 (CFNC "gboolean gtk_target_list_find GtkTargetList* list GdkAtom target guint* [info]")
;;; 3.93.0 (CFNC "gboolean gtk_selection_owner_set GtkWidget* @widget GdkAtom selection guint32 time")
;;; 3.93.0 (CFNC "void gtk_selection_add_target GtkWidget* widget GdkAtom selection GdkAtom target guint info")
;;; 3.93.0 (CFNC "void gtk_selection_add_targets GtkWidget* widget GdkAtom selection GtkTargetEntry* targets guint ntargets")
;;; 3.93.0 (CFNC "void gtk_selection_clear_targets GtkWidget* widget GdkAtom selection")
;;; 3.93.0 (CFNC "gboolean gtk_selection_convert GtkWidget* widget GdkAtom selection GdkAtom target guint32 time")
;;; 3.93.0 (CFNC "void gtk_selection_data_set GtkSelectionData* selection_data GdkAtom type gint format guchar* data gint length")
;;; 3.93.0 (CFNC "gboolean gtk_selection_data_set_text GtkSelectionData* selection_data gchar* str gint len")
;;; 3.93.0 (CFNC "guchar* gtk_selection_data_get_text GtkSelectionData* selection_data" 'free)
;;; 3.93.0 (CFNC "gboolean gtk_selection_data_get_targets GtkSelectionData* selection_data GdkAtom** [targets] gint* [n_atoms]") ; FREE (targets)
;;; 3.93.0 (CFNC "gboolean gtk_selection_data_targets_include_text GtkSelectionData* selection_data")
;;; 3.93.0 (CFNC "void gtk_selection_remove_all GtkWidget* widget")
;;; out 2.3 (CFNC "gboolean gtk_selection_clear GtkWidget* widget GdkEventSelection* event")
;;; removed 2.1 (CFNC "gboolean gtk_selection_request GtkWidget* widget GdkEventSelection* event")
;;; removed 2.1 (CFNC "gboolean gtk_selection_notify GtkWidget* widget GdkEventSelection* event")
;;; removed 2.1 (CFNC "gboolean gtk_selection_property_notify GtkWidget* widget GdkEventProperty* event")
(CFNC "GtkSelectionData* gtk_selection_data_copy GtkSelectionData* data")
(CFNC "void gtk_selection_data_free GtkSelectionData* data")
(CCAST "GTK_SEPARATOR(obj)" "GtkSeparator*")
(CCHK "GTK_IS_SEPARATOR(obj)" "GtkSeparator*")
;;;;(CFNC "GType gtk_separator_get_type void")
(CCAST "GTK_SEPARATOR_MENU_ITEM(obj)" "GtkSeparatorMenuItem*")
(CCHK "GTK_IS_SEPARATOR_MENU_ITEM(obj)" "GtkSeparatorMenuItem*")
;;;;(CFNC "GType gtk_separator_menu_item_get_type void")
(CFNC "GtkWidget* gtk_separator_menu_item_new void")
(CCAST "GTK_SETTINGS(obj)" "GtkSettings*")
(CCHK "GTK_IS_SETTINGS(obj)" "GtkSettings*")
;;;;;(CFNC "GType gtk_settings_get_type void")
(CFNC "GtkSettings* gtk_settings_get_default void")
;(CFNC "void gtk_settings_install_property GParamSpec* pspec")
;(CFNC "void gtk_settings_install_property_parser GParamSpec* pspec GtkRcPropertyParser parser")
;(CFNC "gboolean gtk_rc_property_parse_color GParamSpec* pspec GString* gstring GValue* property_value")
;(CFNC "gboolean gtk_rc_property_parse_enum GParamSpec* pspec GString* gstring GValue* property_value")
;(CFNC "gboolean gtk_rc_property_parse_flags GParamSpec* pspec GString* gstring GValue* property_value")
;(CFNC "gboolean gtk_rc_property_parse_requisition GParamSpec* pspec GString* gstring GValue* property_value")
;(CFNC "gboolean gtk_rc_property_parse_border GParamSpec* pspec GString* gstring GValue* property_value")
;(CFNC "void gtk_settings_set_property_value GtkSettings* settings gchar* name GtkSettingsValue* svalue")
;(CFNC "void gtk_settings_set_string_property GtkSettings* settings gchar* name gchar* v_string gchar* origin")
;(CFNC "void gtk_settings_set_long_property GtkSettings* settings gchar* name glong v_long gchar* origin")
;(CFNC "void gtk_settings_set_double_property GtkSettings* settings gchar* name gdouble v_double gchar* origin")
(CCAST "GTK_SIZE_GROUP(obj)" "GtkSizeGroup*")
(CCHK "GTK_IS_SIZE_GROUP(obj)" "GtkSizeGroup*")
(CINT "GTK_SIZE_GROUP_NONE" "GtkSizeGroupMode")
(CINT "GTK_SIZE_GROUP_HORIZONTAL" "GtkSizeGroupMode")
(CINT "GTK_SIZE_GROUP_VERTICAL" "GtkSizeGroupMode")
(CINT "GTK_SIZE_GROUP_BOTH" "GtkSizeGroupMode")
;;;;(CFNC "GType gtk_size_group_get_type void")
(CFNC "GtkSizeGroup* gtk_size_group_new GtkSizeGroupMode mode")
(CFNC "void gtk_size_group_set_mode GtkSizeGroup* size_group GtkSizeGroupMode mode")
(CFNC "GtkSizeGroupMode gtk_size_group_get_mode GtkSizeGroup* size_group")
(CFNC "void gtk_size_group_add_widget GtkSizeGroup* size_group GtkWidget* widget")
(CFNC "void gtk_size_group_remove_widget GtkSizeGroup* size_group GtkWidget* widget")
;;; 2.99.3 (CCAST "GTK_SOCKET(obj)" "GtkSocket*")
;;; 2.99.3 (CCHK "GTK_IS_SOCKET(obj)" "GtkSocket*")
;;; 2.99.3 (CFNC "GtkWidget* gtk_socket_new void")
;;; 2.99.3 ;;;;(CFNC "GType gtk_socket_get_type void")
;;; 2.99.3 (CFNC "void gtk_socket_add_id GtkSocket* socket GdkNativeWindow window_id")
;;; 2.99.3 (CFNC "GdkNativeWindow gtk_socket_get_id GtkSocket* socket")
(CCAST "GTK_SPIN_BUTTON(obj)" "GtkSpinButton*")
(CCHK "GTK_IS_SPIN_BUTTON(obj)" "GtkSpinButton*")
(CINT "GTK_INPUT_ERROR")
(CINT "GTK_UPDATE_ALWAYS" "GtkSpinButtonUpdatePolicy")
(CINT "GTK_UPDATE_IF_VALID" "GtkSpinButtonUpdatePolicy")
(CINT "GTK_SPIN_STEP_FORWARD" "GtkSpinType")
(CINT "GTK_SPIN_STEP_BACKWARD" "GtkSpinType")
(CINT "GTK_SPIN_PAGE_FORWARD" "GtkSpinType")
(CINT "GTK_SPIN_PAGE_BACKWARD" "GtkSpinType")
(CINT "GTK_SPIN_HOME" "GtkSpinType")
(CINT "GTK_SPIN_END" "GtkSpinType")
(CINT "GTK_SPIN_USER_DEFINED")
;;;;(CFNC "GType gtk_spin_button_get_type void")
(CFNC "void gtk_spin_button_configure GtkSpinButton* spin_button GtkAdjustment* @adjustment gdouble climb_rate guint digits")
(CFNC "GtkWidget* gtk_spin_button_new GtkAdjustment* @adjustment gdouble climb_rate guint digits")
(CFNC "GtkWidget* gtk_spin_button_new_with_range gdouble min gdouble max gdouble step")
(CFNC "void gtk_spin_button_set_adjustment GtkSpinButton* spin_button GtkAdjustment* @adjustment")
(CFNC "GtkAdjustment* gtk_spin_button_get_adjustment GtkSpinButton* spin_button")
(CFNC "void gtk_spin_button_set_digits GtkSpinButton* spin_button guint digits")
(CFNC "guint gtk_spin_button_get_digits GtkSpinButton* spin_button")
(CFNC "void gtk_spin_button_set_increments GtkSpinButton* spin_button gdouble step gdouble page")
(CFNC "void gtk_spin_button_get_increments GtkSpinButton* spin_button gdouble* [step] gdouble* [page]")
(CFNC "void gtk_spin_button_set_range GtkSpinButton* spin_button gdouble min gdouble max")
(CFNC "void gtk_spin_button_get_range GtkSpinButton* spin_button gdouble* [min] gdouble* [max]")
(CFNC "gdouble gtk_spin_button_get_value GtkSpinButton* spin_button")
(CFNC "gint gtk_spin_button_get_value_as_int GtkSpinButton* spin_button")
(CFNC "void gtk_spin_button_set_value GtkSpinButton* spin_button gdouble value")
(CFNC "void gtk_spin_button_set_update_policy GtkSpinButton* spin_button GtkSpinButtonUpdatePolicy policy")
(CFNC "GtkSpinButtonUpdatePolicy gtk_spin_button_get_update_policy GtkSpinButton* spin_button")
(CFNC "void gtk_spin_button_set_numeric GtkSpinButton* spin_button gboolean numeric")
(CFNC "gboolean gtk_spin_button_get_numeric GtkSpinButton* spin_button")
(CFNC "void gtk_spin_button_spin GtkSpinButton* spin_button GtkSpinType direction gdouble increment")
(CFNC "void gtk_spin_button_set_wrap GtkSpinButton* spin_button gboolean wrap")
(CFNC "gboolean gtk_spin_button_get_wrap GtkSpinButton* spin_button")
(CFNC "void gtk_spin_button_set_snap_to_ticks GtkSpinButton* spin_button gboolean snap_to_ticks")
(CFNC "gboolean gtk_spin_button_get_snap_to_ticks GtkSpinButton* spin_button")
(CFNC "void gtk_spin_button_update GtkSpinButton* spin_button")
(CCAST "GTK_STATUSBAR(obj)" "GtkStatusbar*")
(CCHK "GTK_IS_STATUSBAR(obj)" "GtkStatusbar*")
;;;;(CFNC "GType gtk_statusbar_get_type void")
(CFNC "GtkWidget* gtk_statusbar_new void")
(CFNC "guint gtk_statusbar_get_context_id GtkStatusbar* statusbar gchar* context_description")
(CFNC "guint gtk_statusbar_push GtkStatusbar* statusbar guint context_id gchar* text")
(CFNC "void gtk_statusbar_pop GtkStatusbar* statusbar guint context_id")
(CFNC "void gtk_statusbar_remove GtkStatusbar* statusbar guint context_id guint message_id")
;;; 2.91.1 (CFNC "void gtk_statusbar_set_has_resize_grip GtkStatusbar* statusbar gboolean setting")
;;; 2.91.1 (CFNC "gboolean gtk_statusbar_get_has_resize_grip GtkStatusbar* statusbar")

;;; all out 3.9.8
;;; (CFNC "void gtk_stock_add GtkStockItem* items guint n_items")
;;; (CFNC "void gtk_stock_add_static GtkStockItem* items guint n_items")
;;; (CFNC "gboolean gtk_stock_lookup gchar* stock_id GtkStockItem* item")
;;; (CFNC "GSList* gtk_stock_list_ids void")
;;; (CFNC "GtkStockItem* gtk_stock_item_copy GtkStockItem* item")
;;; (CFNC "void gtk_stock_item_free GtkStockItem* item")
;;; (CSTR "GTK_STOCK_DIALOG_INFO")
;;; (CSTR "GTK_STOCK_DIALOG_WARNING")
;;; (CSTR "GTK_STOCK_DIALOG_ERROR")
;;; (CSTR "GTK_STOCK_DIALOG_QUESTION")
;;; (CSTR "GTK_STOCK_DND")
;;; (CSTR "GTK_STOCK_DND_MULTIPLE")
;;; (CSTR "GTK_STOCK_ADD")
;;; (CSTR "GTK_STOCK_APPLY")
;;; (CSTR "GTK_STOCK_BOLD")
;;; (CSTR "GTK_STOCK_CANCEL")
;;; (CSTR "GTK_STOCK_CDROM")
;;; (CSTR "GTK_STOCK_CLEAR")
;;; (CSTR "GTK_STOCK_CLOSE")
;;; (CSTR "GTK_STOCK_COLOR_PICKER")
;;; (CSTR "GTK_STOCK_CONVERT")
;;; (CSTR "GTK_STOCK_COPY")
;;; (CSTR "GTK_STOCK_CUT")
;;; (CSTR "GTK_STOCK_DELETE")
;;; (CSTR "GTK_STOCK_EXECUTE")
;;; (CSTR "GTK_STOCK_FIND")
;;; (CSTR "GTK_STOCK_FIND_AND_REPLACE")
;;; (CSTR "GTK_STOCK_FLOPPY")
;;; (CSTR "GTK_STOCK_GOTO_BOTTOM")
;;; (CSTR "GTK_STOCK_GOTO_FIRST")
;;; (CSTR "GTK_STOCK_GOTO_LAST")
;;; (CSTR "GTK_STOCK_GOTO_TOP")
;;; (CSTR "GTK_STOCK_GO_BACK")
;;; (CSTR "GTK_STOCK_GO_DOWN")
;;; (CSTR "GTK_STOCK_GO_FORWARD")
;;; (CSTR "GTK_STOCK_GO_UP")
;;; (CSTR "GTK_STOCK_HARDDISK")
;;; (CSTR "GTK_STOCK_HELP")
;;; (CSTR "GTK_STOCK_HOME")
;;; (CSTR "GTK_STOCK_INDEX")
;;; (CSTR "GTK_STOCK_ITALIC")
;;; (CSTR "GTK_STOCK_INDENT")
;;; (CSTR "GTK_STOCK_UNINDENT")
;;; (CSTR "GTK_STOCK_NETWORK")
;;; (CSTR "GTK_STOCK_JUMP_TO")
;;; (CSTR "GTK_STOCK_JUSTIFY_CENTER")
;;; (CSTR "GTK_STOCK_JUSTIFY_FILL")
;;; (CSTR "GTK_STOCK_JUSTIFY_LEFT")
;;; (CSTR "GTK_STOCK_JUSTIFY_RIGHT")
;;; (CSTR "GTK_STOCK_MISSING_IMAGE")
;;; (CSTR "GTK_STOCK_NEW")
;;; (CSTR "GTK_STOCK_NO")
;;; (CSTR "GTK_STOCK_OK")
;;; (CSTR "GTK_STOCK_OPEN")
;;; (CSTR "GTK_STOCK_PASTE")
;;; (CSTR "GTK_STOCK_PREFERENCES")
;;; (CSTR "GTK_STOCK_PRINT")
;;; (CSTR "GTK_STOCK_PRINT_PREVIEW")
;;; (CSTR "GTK_STOCK_PROPERTIES")
;;; (CSTR "GTK_STOCK_QUIT")
;;; (CSTR "GTK_STOCK_REDO")
;;; (CSTR "GTK_STOCK_REFRESH")
;;; (CSTR "GTK_STOCK_REMOVE")
;;; (CSTR "GTK_STOCK_REVERT_TO_SAVED")
;;; (CSTR "GTK_STOCK_SAVE")
;;; (CSTR "GTK_STOCK_SAVE_AS")
;;; (CSTR "GTK_STOCK_SELECT_COLOR")
;;; (CSTR "GTK_STOCK_SELECT_FONT")
;;; (CSTR "GTK_STOCK_SORT_ASCENDING")
;;; (CSTR "GTK_STOCK_SORT_DESCENDING")
;;; (CSTR "GTK_STOCK_SPELL_CHECK")
;;; (CSTR "GTK_STOCK_STOP")
;;; (CSTR "GTK_STOCK_STRIKETHROUGH")
;;; (CSTR "GTK_STOCK_UNDELETE")
;;; (CSTR "GTK_STOCK_UNDERLINE")
;;; (CSTR "GTK_STOCK_UNDO")
;;; (CSTR "GTK_STOCK_YES")
;;; (CSTR "GTK_STOCK_ZOOM_100")
;;; (CSTR "GTK_STOCK_ZOOM_FIT")
;;; (CSTR "GTK_STOCK_ZOOM_IN")
;;; (CSTR "GTK_STOCK_ZOOM_OUT")
;;; 
;;; ;(CSTR "GTK_STOCK_DIALOG_AUTHENTICATION")
;;; (CSTR "GTK_STOCK_ABOUT")
;;; (CSTR "GTK_STOCK_CONNECT")
;;; (CSTR "GTK_STOCK_DIRECTORY")
;;; (CSTR "GTK_STOCK_DISCONNECT")
;;; (CSTR "GTK_STOCK_EDIT")
;;; (CSTR "GTK_STOCK_FILE")
;;; (CSTR "GTK_STOCK_MEDIA_FORWARD")
;;; (CSTR "GTK_STOCK_MEDIA_NEXT")
;;; (CSTR "GTK_STOCK_MEDIA_PAUSE")
;;; (CSTR "GTK_STOCK_MEDIA_PLAY")
;;; (CSTR "GTK_STOCK_MEDIA_PREVIOUS")
;;; (CSTR "GTK_STOCK_MEDIA_RECORD")
;;; (CSTR "GTK_STOCK_MEDIA_REWIND")
;;; (CSTR "GTK_STOCK_MEDIA_STOP")
;;; 
;;; (CSTR "GTK_STOCK_FULLSCREEN")
;;; (CSTR "GTK_STOCK_INFO")
;;; (CSTR "GTK_STOCK_LEAVE_FULLSCREEN")
;;; 
;;; (CSTR "GTK_STOCK_ORIENTATION_PORTRAIT")
;;; (CSTR "GTK_STOCK_ORIENTATION_LANDSCAPE")
;;; (CSTR "GTK_STOCK_ORIENTATION_REVERSE_LANDSCAPE")
;;; (CSTR "GTK_STOCK_SELECT_ALL")
;;; 
;;; (CSTR "GTK_STOCK_ORIENTATION_REVERSE_PORTRAIT")

;;; (CCAST-gtk2 "GTK_STYLE(object)" "GtkStyle*")
;;; (CCHK-gtk2 "GTK_IS_STYLE(object)" "GtkStyle*")
;;; ;(CCAST2-gtk2 "GTK_STYLE_ATTACHED(style)")
;;; ;;;;(CFNC-gtk2 "GType gtk_style_get_type void")
;;; (CFNC-gtk2 "GtkStyle* gtk_style_new void")
;;; (CFNC-gtk2 "GtkStyle* gtk_style_copy GtkStyle* style")
;;; (CFNC-gtk2 "void gtk_style_detach GtkStyle* style")
;;; ;;; (CFNC-gtk2 "GtkIconSet* gtk_style_lookup_icon_set GtkStyle* style gchar* stock_id")
;;; ;;; (CFNC-gtk2 "GdkPixbuf* gtk_style_render_icon GtkStyle* style GtkIconSource* source GtkTextDirection direction GtkStateType state GtkIconSize size GtkWidget* widget gchar* detail")
;;; ;;; (CFNC-gtk2 "GtkBorder* gtk_border_copy GtkBorder* border")
;;; ;;; (CFNC-gtk2 "void gtk_border_free GtkBorder* border")
;;; 3.3.2 (CCAST "GTK_TABLE(obj)" "GtkTable*")
;;; 3.3.2 (CCHK "GTK_IS_TABLE(obj)" "GtkTable*")
;;; 3.3.2 ;;;;(CFNC "GType gtk_table_get_type void")
;;; 3.3.2 (CFNC "GtkWidget* gtk_table_new guint rows guint columns gboolean homogeneous")
;;; 3.3.2 (CFNC "void gtk_table_resize GtkTable* table guint rows guint columns")
;;; 3.3.2 (CFNC "void gtk_table_attach GtkTable* table GtkWidget* child guint left_attach guint right_attach guint top_attach guint bottom_attach GtkAttachOptions xoptions GtkAttachOptions yoptions guint xpadding guint ypadding")
;;; 3.3.2 (CFNC "void gtk_table_attach_defaults GtkTable* table GtkWidget* widget guint left_attach guint right_attach guint top_attach guint bottom_attach")
;;; 3.3.2 (CFNC "void gtk_table_set_row_spacing GtkTable* table guint row guint spacing")
;;; 3.3.2 (CFNC "guint gtk_table_get_row_spacing GtkTable* table guint row")
;;; 3.3.2 (CFNC "void gtk_table_set_col_spacing GtkTable* table guint column guint spacing")
;;; 3.3.2 (CFNC "guint gtk_table_get_col_spacing GtkTable* table guint column")
;;; 3.3.2 (CFNC "void gtk_table_set_row_spacings GtkTable* table guint spacing")
;;; 3.3.2 (CFNC "guint gtk_table_get_default_row_spacing GtkTable* table")
;;; 3.3.2 (CFNC "void gtk_table_set_col_spacings GtkTable* table guint spacing")
;;; 3.3.2 (CFNC "guint gtk_table_get_default_col_spacing GtkTable* table")
;;; 3.3.2 (CFNC "void gtk_table_set_homogeneous GtkTable* table gboolean homogeneous")
;;; 3.3.2 (CFNC "gboolean gtk_table_get_homogeneous GtkTable* table")
;;; 3.3.2 (CCAST "GTK_TEAROFF_MENU_ITEM(obj)" "GtkTearoffMenuItem*")
;;; 3.3.2 (CCHK "GTK_IS_TEAROFF_MENU_ITEM(obj)" "GtkTearoffMenuItem*")
;;; 3.3.2 ;;;;(CFNC "GType gtk_tearoff_menu_item_get_type void")
;;; 3.3.2 (CFNC "GtkWidget* gtk_tearoff_menu_item_new void")
(CCAST "GTK_TEXT_BUFFER(obj)" "GtkTextBuffer*")
(CCHK "GTK_IS_TEXT_BUFFER(obj)" "GtkTextBuffer*")
;;;;(CFNC "GType gtk_text_buffer_get_type void")
(CFNC "GtkTextBuffer* gtk_text_buffer_new GtkTextTagTable* @table")
(CFNC "gint gtk_text_buffer_get_line_count GtkTextBuffer* buffer")
(CFNC "gint gtk_text_buffer_get_char_count GtkTextBuffer* buffer")
(CFNC "GtkTextTagTable* gtk_text_buffer_get_tag_table GtkTextBuffer* buffer")
(CFNC "void gtk_text_buffer_set_text GtkTextBuffer* buffer gchar* text gint len")
(CFNC "void gtk_text_buffer_insert GtkTextBuffer* buffer GtkTextIter* iter gchar* text gint len")
(CFNC "void gtk_text_buffer_insert_at_cursor GtkTextBuffer* buffer gchar* text gint len")
(CFNC "gboolean gtk_text_buffer_insert_interactive GtkTextBuffer* buffer GtkTextIter* iter gchar* text gint len gboolean default_editable")
(CFNC "gboolean gtk_text_buffer_insert_interactive_at_cursor GtkTextBuffer* buffer gchar* text gint len gboolean default_editable")
(CFNC "void gtk_text_buffer_insert_range GtkTextBuffer* buffer GtkTextIter* iter GtkTextIter* start GtkTextIter* end")
(CFNC "gboolean gtk_text_buffer_insert_range_interactive GtkTextBuffer* buffer GtkTextIter* iter GtkTextIter* start GtkTextIter* end gboolean default_editable")
(CFNC-PA "void gtk_text_buffer_insert_with_tags GtkTextBuffer* buffer GtkTextIter* iter gchar* text gint len etc tags" 1 6 '("GtkTextTag*"))
(CFNC-PA "void gtk_text_buffer_insert_with_tags_by_name GtkTextBuffer* buffer GtkTextIter* iter gchar* text gint len etc tags" 1 6 '("gchar*" "int"))
(CFNC "void gtk_text_buffer_delete GtkTextBuffer* buffer GtkTextIter* start GtkTextIter* end")
(CFNC "gboolean gtk_text_buffer_delete_interactive GtkTextBuffer* buffer GtkTextIter* start_iter GtkTextIter* end_iter gboolean default_editable")
(CFNC "gchar* gtk_text_buffer_get_text GtkTextBuffer* buffer GtkTextIter* start GtkTextIter* end gboolean include_hidden_chars" 'free)
(CFNC "gchar* gtk_text_buffer_get_slice GtkTextBuffer* buffer GtkTextIter* start GtkTextIter* end gboolean include_hidden_chars" 'free)
;;; 3.93.0 (CFNC "void gtk_text_buffer_insert_pixbuf GtkTextBuffer* buffer GtkTextIter* iter GdkPixbuf* pixbuf")
(CFNC "void gtk_text_buffer_insert_child_anchor GtkTextBuffer* buffer GtkTextIter* iter GtkTextChildAnchor* anchor")
(CFNC "GtkTextChildAnchor* gtk_text_buffer_create_child_anchor GtkTextBuffer* buffer GtkTextIter* iter")
(CFNC "GtkTextMark* gtk_text_buffer_create_mark GtkTextBuffer* buffer gchar* mark_name GtkTextIter* where gboolean left_gravity")
(CFNC "void gtk_text_buffer_move_mark GtkTextBuffer* buffer GtkTextMark* mark GtkTextIter* where")
(CFNC "void gtk_text_buffer_delete_mark GtkTextBuffer* buffer GtkTextMark* mark")
(CFNC "GtkTextMark* gtk_text_buffer_get_mark GtkTextBuffer* buffer gchar* name")
(CFNC "void gtk_text_buffer_move_mark_by_name GtkTextBuffer* buffer gchar* name GtkTextIter* where")
(CFNC "void gtk_text_buffer_delete_mark_by_name GtkTextBuffer* buffer gchar* name")
(CFNC "GtkTextMark* gtk_text_buffer_get_insert GtkTextBuffer* buffer")
(CFNC "GtkTextMark* gtk_text_buffer_get_selection_bound GtkTextBuffer* buffer")
(CFNC "void gtk_text_buffer_place_cursor GtkTextBuffer* buffer GtkTextIter* where")
(CFNC "void gtk_text_buffer_apply_tag GtkTextBuffer* buffer GtkTextTag* tag GtkTextIter* start GtkTextIter* end")
(CFNC "void gtk_text_buffer_remove_tag GtkTextBuffer* buffer GtkTextTag* tag GtkTextIter* start GtkTextIter* end")
(CFNC "void gtk_text_buffer_apply_tag_by_name GtkTextBuffer* buffer gchar* name GtkTextIter* start GtkTextIter* end")
(CFNC "void gtk_text_buffer_remove_tag_by_name GtkTextBuffer* buffer gchar* name GtkTextIter* start GtkTextIter* end")
(CFNC "void gtk_text_buffer_remove_all_tags GtkTextBuffer* buffer GtkTextIter* start GtkTextIter* end")
(CFNC-PA "GtkTextTag* gtk_text_buffer_create_tag GtkTextBuffer* buffer gchar* tag_name etc #tags" 0 6 '("gchar*" "any"))
(CFNC "void gtk_text_buffer_get_iter_at_line_offset GtkTextBuffer* buffer GtkTextIter* iter gint line_number gint char_offset")
(CFNC "void gtk_text_buffer_get_iter_at_line_index GtkTextBuffer* buffer GtkTextIter* iter gint line_number gint byte_index")
(CFNC "void gtk_text_buffer_get_iter_at_offset GtkTextBuffer* buffer GtkTextIter* iter gint char_offset")
(CFNC "void gtk_text_buffer_get_iter_at_line GtkTextBuffer* buffer GtkTextIter* iter gint line_number")
(CFNC "void gtk_text_buffer_get_start_iter GtkTextBuffer* buffer GtkTextIter* iter")
(CFNC "void gtk_text_buffer_get_end_iter GtkTextBuffer* buffer GtkTextIter* iter")
(CFNC "void gtk_text_buffer_get_bounds GtkTextBuffer* buffer GtkTextIter* start GtkTextIter* end")
(CFNC "void gtk_text_buffer_get_iter_at_mark GtkTextBuffer* buffer GtkTextIter* iter GtkTextMark* mark")
(CFNC "void gtk_text_buffer_get_iter_at_child_anchor GtkTextBuffer* buffer GtkTextIter* iter GtkTextChildAnchor* anchor")
(CFNC "gboolean gtk_text_buffer_get_modified GtkTextBuffer* buffer")
(CFNC "void gtk_text_buffer_set_modified GtkTextBuffer* buffer gboolean setting")
;;; 3.93.0 (CFNC "void gtk_text_buffer_add_selection_clipboard GtkTextBuffer* buffer GtkClipboard* clipboard")
;;; 3.93.0 (CFNC "void gtk_text_buffer_remove_selection_clipboard GtkTextBuffer* buffer GtkClipboard* clipboard")
;;; 3.93.0 (CFNC "void gtk_text_buffer_cut_clipboard GtkTextBuffer* buffer GtkClipboard* clipboard gboolean default_editable")
;;; 3.93.0 (CFNC "void gtk_text_buffer_copy_clipboard GtkTextBuffer* buffer GtkClipboard* clipboard")
;;; 3.93.0 (CFNC "void gtk_text_buffer_paste_clipboard GtkTextBuffer* buffer GtkClipboard* clipboard GtkTextIter* @override_location gboolean default_editable")
(CFNC "gboolean gtk_text_buffer_get_selection_bounds GtkTextBuffer* buffer GtkTextIter* start GtkTextIter* end")
(CFNC "gboolean gtk_text_buffer_delete_selection GtkTextBuffer* buffer gboolean interactive gboolean default_editable") 
(CFNC "void gtk_text_buffer_begin_user_action GtkTextBuffer* buffer")
(CFNC "void gtk_text_buffer_end_user_action GtkTextBuffer* buffer")
(CCAST "GTK_TEXT_CHILD_ANCHOR(object)" "GtkTextChildAnchor*")
(CCHK "GTK_IS_TEXT_CHILD_ANCHOR(object)" "GtkTextChildAnchor*")
;;;;(CFNC "GType gtk_text_child_anchor_get_type void")
(CFNC "GtkTextChildAnchor* gtk_text_child_anchor_new void")
(CFNC "GList* gtk_text_child_anchor_get_widgets GtkTextChildAnchor* anchor")
(CFNC "gboolean gtk_text_child_anchor_get_deleted GtkTextChildAnchor* anchor")
(CFNC "GtkTextBuffer* gtk_text_iter_get_buffer GtkTextIter* iter")
(CFNC "GtkTextIter* gtk_text_iter_copy GtkTextIter* iter")
(CFNC "void gtk_text_iter_free GtkTextIter* iter")
(CFNC "gint gtk_text_iter_get_offset GtkTextIter* iter")
(CFNC "gint gtk_text_iter_get_line GtkTextIter* iter")
(CFNC "gint gtk_text_iter_get_line_offset GtkTextIter* iter")
(CFNC "gint gtk_text_iter_get_line_index GtkTextIter* iter")
(CFNC "gint gtk_text_iter_get_visible_line_offset GtkTextIter* iter")
(CFNC "gint gtk_text_iter_get_visible_line_index GtkTextIter* iter")
(CFNC "gunichar gtk_text_iter_get_char GtkTextIter* iter")
(CFNC "gchar* gtk_text_iter_get_slice GtkTextIter* start GtkTextIter* end" 'free)
(CFNC "gchar* gtk_text_iter_get_text GtkTextIter* start GtkTextIter* end" 'free)
(CFNC "gchar* gtk_text_iter_get_visible_slice GtkTextIter* start GtkTextIter* end" 'free)
(CFNC "gchar* gtk_text_iter_get_visible_text GtkTextIter* start GtkTextIter* end" 'free)
;;; 3.93.0 (CFNC "GdkPixbuf* gtk_text_iter_get_pixbuf GtkTextIter* iter")
(CFNC "GSList* gtk_text_iter_get_marks GtkTextIter* iter")
(CFNC "GtkTextChildAnchor* gtk_text_iter_get_child_anchor GtkTextIter* iter")
(CFNC "GSList* gtk_text_iter_get_toggled_tags GtkTextIter* iter gboolean toggled_on")
;;; 3.19.5 (CFNC "gboolean gtk_text_iter_begins_tag GtkTextIter* iter GtkTextTag* @tag")
(CFNC "gboolean gtk_text_iter_ends_tag GtkTextIter* iter GtkTextTag* @tag")
(CFNC "gboolean gtk_text_iter_toggles_tag GtkTextIter* iter GtkTextTag* @tag")
(CFNC "gboolean gtk_text_iter_has_tag GtkTextIter* iter GtkTextTag* tag")
(CFNC "GSList* gtk_text_iter_get_tags GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_editable GtkTextIter* iter gboolean default_setting")
(CFNC "gboolean gtk_text_iter_can_insert GtkTextIter* iter gboolean default_editability")
(CFNC "gboolean gtk_text_iter_starts_word GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_ends_word GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_inside_word GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_starts_sentence GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_ends_sentence GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_inside_sentence GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_starts_line GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_ends_line GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_is_cursor_position GtkTextIter* iter")
(CFNC "gint gtk_text_iter_get_chars_in_line GtkTextIter* iter")
(CFNC "gint gtk_text_iter_get_bytes_in_line GtkTextIter* iter")
;;; 3.89 (CFNC "gboolean gtk_text_iter_get_attributes GtkTextIter* iter GtkTextAttributes* values")
(CFNC "PangoLanguage* gtk_text_iter_get_language GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_is_end GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_is_start GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_forward_char GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_backward_char GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_forward_chars GtkTextIter* iter gint count")
(CFNC "gboolean gtk_text_iter_backward_chars GtkTextIter* iter gint count")
(CFNC "gboolean gtk_text_iter_forward_line GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_backward_line GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_forward_lines GtkTextIter* iter gint count")
(CFNC "gboolean gtk_text_iter_backward_lines GtkTextIter* iter gint count")
(CFNC "gboolean gtk_text_iter_forward_word_end GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_backward_word_start GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_forward_word_ends GtkTextIter* iter gint count")
(CFNC "gboolean gtk_text_iter_backward_word_starts GtkTextIter* iter gint count")
(CFNC "gboolean gtk_text_iter_forward_sentence_end GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_backward_sentence_start GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_forward_sentence_ends GtkTextIter* iter gint count")
(CFNC "gboolean gtk_text_iter_backward_sentence_starts GtkTextIter* iter gint count")
(CFNC "gboolean gtk_text_iter_forward_cursor_position GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_backward_cursor_position GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_forward_cursor_positions GtkTextIter* iter gint count")
(CFNC "gboolean gtk_text_iter_backward_cursor_positions GtkTextIter* iter gint count")
(CFNC "void gtk_text_iter_set_offset GtkTextIter* iter gint char_offset")
(CFNC "void gtk_text_iter_set_line GtkTextIter* iter gint line_number")
(CFNC "void gtk_text_iter_set_line_offset GtkTextIter* iter gint char_on_line")
(CFNC "void gtk_text_iter_set_line_index GtkTextIter* iter gint byte_on_line")
(CFNC "void gtk_text_iter_forward_to_end GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_forward_to_line_end GtkTextIter* iter")
(CFNC "void gtk_text_iter_set_visible_line_offset GtkTextIter* iter gint char_on_line")
(CFNC "void gtk_text_iter_set_visible_line_index GtkTextIter* iter gint byte_on_line")
(CFNC "gboolean gtk_text_iter_forward_to_tag_toggle GtkTextIter* iter GtkTextTag* @tag")
(CFNC "gboolean gtk_text_iter_backward_to_tag_toggle GtkTextIter* iter GtkTextTag* @tag")
(CFNC "gboolean gtk_text_iter_forward_find_char GtkTextIter* iter GtkTextCharPredicate pred lambda_data @func_info GtkTextIter* @limit")
(CFNC "gboolean gtk_text_iter_backward_find_char GtkTextIter* iter GtkTextCharPredicate pred lambda_data @func_info GtkTextIter* @limit")
(CFNC "gboolean gtk_text_iter_forward_search GtkTextIter* iter gchar* str GtkTextSearchFlags flags GtkTextIter* @match_start GtkTextIter* @match_end GtkTextIter* @limit")
(CFNC "gboolean gtk_text_iter_backward_search GtkTextIter* iter gchar* str GtkTextSearchFlags flags GtkTextIter* @match_start GtkTextIter* @match_end GtkTextIter* @limit")
(CINT "GTK_TEXT_SEARCH_VISIBLE_ONLY" "GtkTextSearchFlags")
(CINT "GTK_TEXT_SEARCH_TEXT_ONLY" "GtkTextSearchFlags")
(CFNC "gboolean gtk_text_iter_equal GtkTextIter* lhs GtkTextIter* rhs")
(CFNC "gint gtk_text_iter_compare GtkTextIter* lhs GtkTextIter* rhs")
(CFNC "gboolean gtk_text_iter_in_range GtkTextIter* iter GtkTextIter* start GtkTextIter* end")
(CFNC "void gtk_text_iter_order GtkTextIter* first GtkTextIter* second")
(CCAST "GTK_TEXT_MARK(object)" "GtkTextMark*")
(CCHK "GTK_IS_TEXT_MARK(object)" "GtkTextMark*")
;;;;(CFNC "GType gtk_text_mark_get_type void")
(CFNC "void gtk_text_mark_set_visible GtkTextMark* mark gboolean setting")
(CFNC "gboolean gtk_text_mark_get_visible GtkTextMark* mark")
(CFNC "char* gtk_text_mark_get_name GtkTextMark* mark")
(CFNC "gboolean gtk_text_mark_get_deleted GtkTextMark* mark")
(CFNC "GtkTextBuffer* gtk_text_mark_get_buffer GtkTextMark* mark")
(CFNC "gboolean gtk_text_mark_get_left_gravity GtkTextMark* mark")
(CCAST "GTK_TEXT_TAG(obj)" "GtkTextTag*")
(CCHK "GTK_IS_TEXT_TAG(obj)" "GtkTextTag*")
;;;;(CFNC "GType gtk_text_tag_get_type void")
(CFNC "GtkTextTag* gtk_text_tag_new gchar* name")
(CFNC "gint gtk_text_tag_get_priority GtkTextTag* tag")
(CFNC "void gtk_text_tag_set_priority GtkTextTag* tag gint priority")
;;; 3.93.0 (CFNC "gboolean gtk_text_tag_event GtkTextTag* tag GObject* event_object GdkEvent* event GtkTextIter* iter")
;;; 3.92.1 (CFNC "GtkTextAttributes* gtk_text_attributes_new void")
;;; 3.92.1 (CFNC "GtkTextAttributes* gtk_text_attributes_copy GtkTextAttributes* src")
;;; 3.92.1 (CFNC "void gtk_text_attributes_copy_values GtkTextAttributes* src GtkTextAttributes* dest")
;;; 3.92.1 (CFNC "void gtk_text_attributes_unref GtkTextAttributes* values")

;;;(CFNC "void gtk_text_attributes_ref GtkTextAttributes* values")
;;; return type changed 2.8.6

(CCAST "GTK_TEXT_TAG_TABLE(obj)" "GtkTextTagTable*")
(CCHK "GTK_IS_TEXT_TAG_TABLE(obj)" "GtkTextTagTable*")
;;;;(CFNC "GType gtk_text_tag_table_get_type void")
(CFNC "GtkTextTagTable* gtk_text_tag_table_new void")
(CFNC "void gtk_text_tag_table_add GtkTextTagTable* table GtkTextTag* tag")
(CFNC "void gtk_text_tag_table_remove GtkTextTagTable* table GtkTextTag* tag")
(CFNC "GtkTextTag* gtk_text_tag_table_lookup GtkTextTagTable* table gchar* name")
(CFNC "void gtk_text_tag_table_foreach GtkTextTagTable* table GtkTextTagTableForeach func lambda_data @func_info")
(CFNC "gint gtk_text_tag_table_get_size GtkTextTagTable* table")
;(CFNC "gboolean gtk_text_byte_begins_utf8_char gchar* byte")
(CCAST "GTK_TEXT_VIEW(obj)" "GtkTextView*")
(CCHK "GTK_IS_TEXT_VIEW(obj)" "GtkTextView*")
(CINT "GTK_TEXT_WINDOW_PRIVATE" "GtkTextWindowType")
(CINT "GTK_TEXT_WINDOW_WIDGET" "GtkTextWindowType")
(CINT "GTK_TEXT_WINDOW_TEXT" "GtkTextWindowType")
(CINT "GTK_TEXT_WINDOW_LEFT" "GtkTextWindowType")
(CINT "GTK_TEXT_WINDOW_RIGHT" "GtkTextWindowType")
(CINT "GTK_TEXT_WINDOW_TOP" "GtkTextWindowType")
(CINT "GTK_TEXT_WINDOW_BOTTOM" "GtkTextWindowType")
(CINT "GTK_TEXT_VIEW_PRIORITY_VALIDATE")
;;;;(CFNC "GType gtk_text_view_get_type void")
(CFNC "GtkWidget* gtk_text_view_new void")
(CFNC "GtkWidget* gtk_text_view_new_with_buffer GtkTextBuffer* buffer")
(CFNC "void gtk_text_view_set_buffer GtkTextView* text_view GtkTextBuffer* buffer")
(CFNC "GtkTextBuffer* gtk_text_view_get_buffer GtkTextView* text_view")
(CFNC "gboolean gtk_text_view_scroll_to_iter GtkTextView* text_view GtkTextIter* iter gdouble within_margin gboolean use_align gdouble xalign gdouble yalign")
(CFNC "void gtk_text_view_scroll_to_mark GtkTextView* text_view GtkTextMark* mark gdouble within_margin gboolean use_align gdouble xalign gdouble yalign")
(CFNC "void gtk_text_view_scroll_mark_onscreen GtkTextView* text_view GtkTextMark* mark")
(CFNC "gboolean gtk_text_view_move_mark_onscreen GtkTextView* text_view GtkTextMark* mark")
(CFNC "gboolean gtk_text_view_place_cursor_onscreen GtkTextView* text_view")
(CFNC "void gtk_text_view_get_visible_rect GtkTextView* text_view GdkRectangle* visible_rect")
(CFNC "void gtk_text_view_set_cursor_visible GtkTextView* text_view gboolean setting")
(CFNC "gboolean gtk_text_view_get_cursor_visible GtkTextView* text_view")
(CFNC "void gtk_text_view_get_iter_location GtkTextView* text_view GtkTextIter* iter GdkRectangle* location")
;;; (CFNC "void gtk_text_view_get_iter_at_location GtkTextView* text_view GtkTextIter* iter gint x gint y")
;;; gboolean return in 3.20
(CFNC "void gtk_text_view_get_line_yrange GtkTextView* text_view GtkTextIter* iter gint* [y] gint* [height]")
(CFNC "void gtk_text_view_get_line_at_y GtkTextView* text_view GtkTextIter* target_iter gint y gint* [line_top]")
;;; 3.96.0 (CFNC "void gtk_text_view_buffer_to_window_coords GtkTextView* text_view GtkTextWindowType win gint buffer_x gint buffer_y gint* [window_x] gint* [window_y]")
(CFNC "void gtk_text_view_window_to_buffer_coords GtkTextView* text_view GtkTextWindowType win gint window_x gint window_y gint* [buffer_x] gint* [buffer_y]")
(CFNC "void gtk_text_view_set_border_window_size GtkTextView* text_view GtkTextWindowType type gint size")
(CFNC "gint gtk_text_view_get_border_window_size GtkTextView* text_view GtkTextWindowType type")
(CFNC "gboolean gtk_text_view_forward_display_line GtkTextView* text_view GtkTextIter* iter")
(CFNC "gboolean gtk_text_view_backward_display_line GtkTextView* text_view GtkTextIter* iter")
(CFNC "gboolean gtk_text_view_forward_display_line_end GtkTextView* text_view GtkTextIter* iter")
(CFNC "gboolean gtk_text_view_backward_display_line_start GtkTextView* text_view GtkTextIter* iter")
(CFNC "gboolean gtk_text_view_starts_display_line GtkTextView* text_view GtkTextIter* iter")
(CFNC "gboolean gtk_text_view_move_visually GtkTextView* text_view GtkTextIter* iter gint count")
(CFNC "void gtk_text_view_add_child_at_anchor GtkTextView* text_view GtkWidget* child GtkTextChildAnchor* anchor")
(CFNC "void gtk_text_view_add_child_in_window GtkTextView* text_view GtkWidget* child GtkTextWindowType which_window gint xpos gint ypos")
(CFNC "void gtk_text_view_move_child GtkTextView* text_view GtkWidget* child gint xpos gint ypos")
(CFNC "void gtk_text_view_set_wrap_mode GtkTextView* text_view GtkWrapMode wrap_mode")
(CFNC "GtkWrapMode gtk_text_view_get_wrap_mode GtkTextView* text_view")
(CFNC "void gtk_text_view_set_editable GtkTextView* text_view gboolean setting")
(CFNC "gboolean gtk_text_view_get_editable GtkTextView* text_view")
(CFNC "void gtk_text_view_set_pixels_above_lines GtkTextView* text_view gint pixels_above_lines")
(CFNC "gint gtk_text_view_get_pixels_above_lines GtkTextView* text_view")
(CFNC "void gtk_text_view_set_pixels_below_lines GtkTextView* text_view gint pixels_below_lines")
(CFNC "gint gtk_text_view_get_pixels_below_lines GtkTextView* text_view")
(CFNC "void gtk_text_view_set_pixels_inside_wrap GtkTextView* text_view gint pixels_inside_wrap")
(CFNC "gint gtk_text_view_get_pixels_inside_wrap GtkTextView* text_view")
(CFNC "void gtk_text_view_set_justification GtkTextView* text_view GtkJustification justification")
(CFNC "GtkJustification gtk_text_view_get_justification GtkTextView* text_view")
(CFNC "void gtk_text_view_set_left_margin GtkTextView* text_view gint left_margin")
(CFNC "gint gtk_text_view_get_left_margin GtkTextView* text_view")
(CFNC "void gtk_text_view_set_right_margin GtkTextView* text_view gint right_margin")
(CFNC "gint gtk_text_view_get_right_margin GtkTextView* text_view")
(CFNC "void gtk_text_view_set_indent GtkTextView* text_view gint indent")
(CFNC "gint gtk_text_view_get_indent GtkTextView* text_view")
(CFNC "void gtk_text_view_set_tabs GtkTextView* text_view PangoTabArray* @tabs")
(CFNC "PangoTabArray* gtk_text_view_get_tabs GtkTextView* text_view")
;;; 3.89 (CFNC "GtkTextAttributes* gtk_text_view_get_default_attributes GtkTextView* text_view")
;(CCAST "GTK_THEME_ENGINE(theme_engine)" "GtkThemeEngine*")
;(CCHK "GTK_IS_THEME_ENGINE(theme_engine)" "GtkThemeEngine*")
;;;;;(CFNC "GType gtk_theme_engine_get_type void")
;(CFNC "GtkThemeEngine* gtk_theme_engine_get gchar* name")
;;; ;(CFNC-gtk2 "GtkRcStyle* gtk_theme_engine_create_rc_style GtkThemeEngine* engine")
(CCAST "GTK_TOGGLE_BUTTON(obj)" "GtkToggleButton*")
(CCHK "GTK_IS_TOGGLE_BUTTON(obj)" "GtkToggleButton*")
;;;;(CFNC "GType gtk_toggle_button_get_type void")
(CFNC "GtkWidget* gtk_toggle_button_new void")
(CFNC "GtkWidget* gtk_toggle_button_new_with_label gchar* label")
(CFNC "GtkWidget* gtk_toggle_button_new_with_mnemonic gchar* label")
;;; gtk 4 (CFNC "void gtk_toggle_button_set_mode GtkToggleButton* toggle_button gboolean draw_indicator")
;;; gtk 4 (CFNC "gboolean gtk_toggle_button_get_mode GtkToggleButton* toggle_button")
(CFNC "void gtk_toggle_button_set_active GtkToggleButton* toggle_button gboolean is_active")
(CFNC "gboolean gtk_toggle_button_get_active GtkToggleButton* toggle_button")
(CFNC "void gtk_toggle_button_toggled GtkToggleButton* toggle_button")
;;; gtk 4 (CFNC "void gtk_toggle_button_set_inconsistent GtkToggleButton* toggle_button gboolean setting")
;;; gtk 4 (CFNC "gboolean gtk_toggle_button_get_inconsistent GtkToggleButton* toggle_button")
(CCAST "GTK_TOOLBAR(obj)" "GtkToolbar*")
(CCHK "GTK_IS_TOOLBAR(obj)" "GtkToolbar*")
;;; out 2.3 (CINT "GTK_TOOLBAR_CHILD_SPACE" "GtkToolbarChildType")
;;; out 2.3 (CINT "GTK_TOOLBAR_CHILD_BUTTON" "GtkToolbarChildType")
;;; out 2.3 (CINT "GTK_TOOLBAR_CHILD_TOGGLEBUTTON" "GtkToolbarChildType")
;;; out 2.3 (CINT "GTK_TOOLBAR_CHILD_RADIOBUTTON" "GtkToolbarChildType")
;;; out 2.3 (CINT "GTK_TOOLBAR_CHILD_WIDGET" "GtkToolbarChildType")
;;; out 2.3 (CINT "GTK_TOOLBAR_SPACE_EMPTY" "GtkToolbarSpaceStyle")
;;; out 2.3 (CINT "GTK_TOOLBAR_SPACE_LINE" "GtkToolbarSpaceStyle")
;;;;(CFNC "GType gtk_toolbar_get_type void")
(CFNC "GtkWidget* gtk_toolbar_new void")

;;; out 2.3 (CFNC "GtkWidget* gtk_toolbar_append_item GtkToolbar* toolbar char* text char* tooltip_text char* tooltip_private_text GtkWidget* icon GCallback func lambda_data @func_info")
;;; out 2.3 (CFNC "GtkWidget* gtk_toolbar_prepend_item GtkToolbar* toolbar char* text char* tooltip_text char* tooltip_private_text GtkWidget* icon GCallback func lambda_data @func_info")
;;; out 2.3 (CFNC "GtkWidget* gtk_toolbar_insert_item GtkToolbar* toolbar char* text char* tooltip_text char* tooltip_private_text GtkWidget* icon GCallback func lambda_data @func_info gint position")
;;; out 2.3 (CFNC "GtkWidget* gtk_toolbar_insert_stock GtkToolbar* toolbar gchar* stock_id char* tooltip_text char* tooltip_private_text GCallback func lambda_data @func_info gint position")
;;; out 2.3 (CFNC "void gtk_toolbar_append_space GtkToolbar* toolbar")
;;; out 2.3 (CFNC "void gtk_toolbar_prepend_space GtkToolbar* toolbar")
;;; out 2.3 (CFNC "void gtk_toolbar_insert_space GtkToolbar* toolbar gint position")
;;; out 2.3 (CFNC "void gtk_toolbar_remove_space GtkToolbar* toolbar gint position")
;;; out 2.3 (CFNC "GtkWidget* gtk_toolbar_append_element GtkToolbar* toolbar GtkToolbarChildType type GtkWidget* widget char* text char* tooltip_text char* tooltip_private_text GtkWidget* icon GCallback func lambda_data @func_info")
;;; out 2.3 (CFNC "GtkWidget* gtk_toolbar_prepend_element GtkToolbar* toolbar GtkToolbarChildType type GtkWidget* widget char* text char* tooltip_text char* tooltip_private_text GtkWidget* icon GCallback func lambda_data @func_info")
;;; out 2.3 (CFNC "GtkWidget* gtk_toolbar_insert_element GtkToolbar* toolbar GtkToolbarChildType type GtkWidget* @widget char* text char* tooltip_text char* tooltip_private_text GtkWidget* icon GCallback func lambda_data @func_info gint position")
;;; out 2.3 (CFNC "void gtk_toolbar_append_widget GtkToolbar* toolbar GtkWidget* widget char* tooltip_text char* tooltip_private_text")
;;; out 2.3 (CFNC "void gtk_toolbar_prepend_widget GtkToolbar* toolbar GtkWidget* widget char* tooltip_text char* tooltip_private_text")
;;; out 2.3 (CFNC "void gtk_toolbar_insert_widget GtkToolbar* toolbar GtkWidget* widget char* tooltip_text char* tooltip_private_text gint position")

;;; out 2.15.0 (CFNC "void gtk_toolbar_set_orientation GtkToolbar* toolbar GtkOrientation orientation")
(CFNC "void gtk_toolbar_set_style GtkToolbar* toolbar GtkToolbarStyle style")
(CFNC "void gtk_toolbar_unset_style GtkToolbar* toolbar")
;;; out 2.3 (CFNC "void gtk_toolbar_unset_icon_size GtkToolbar* toolbar")
;;; out 2.15.0 (CFNC "GtkOrientation gtk_toolbar_get_orientation GtkToolbar* toolbar")
(CFNC "GtkToolbarStyle gtk_toolbar_get_style GtkToolbar* toolbar")
;;; (CFNC "GtkIconSize gtk_toolbar_get_icon_size GtkToolbar* toolbar")
;;; out 2.13.4 (CFNC "gboolean gtk_toolbar_get_tooltips GtkToolbar* toolbar")
;;; out 2.13.4 (CFNC "void gtk_toolbar_set_tooltips GtkToolbar* toolbar gboolean enable")

;;; 2.11.6 (CCAST "GTK_TOOLTIPS(obj)" "GtkTooltips*")
;;; 2.11.6 (CCHK "GTK_IS_TOOLTIPS(obj)" "GtkTooltips*")
;;; 2.11.6 ;;;;(CFNC "GType gtk_tooltips_get_type void")
;;; 2.11.6 (CFNC "GtkTooltips* gtk_tooltips_new void")
;;; 2.11.6 (CFNC "void gtk_tooltips_enable GtkTooltips* tooltips")
;;; 2.11.6 (CFNC "void gtk_tooltips_disable GtkTooltips* tooltips")
;;; 2.11.6 (CFNC "void gtk_tooltips_set_tip GtkTooltips* tooltips GtkWidget* widget gchar* tip_text gchar* tip_private")
;;; 2.11.6 (CFNC "GtkTooltipsData* gtk_tooltips_data_get GtkWidget* widget")
;;; 2.11.6 (CFNC "void gtk_tooltips_force_window GtkTooltips* tooltips")

(CCAST "GTK_TREE_DRAG_SOURCE(obj)" "GtkTreeDragSource*")
(CCHK "GTK_IS_TREE_DRAG_SOURCE(obj)" "GtkTreeDragSource*")
;;;;(CFNC "GType gtk_tree_drag_source_get_type void")
(CFNC "gboolean gtk_tree_drag_source_row_draggable GtkTreeDragSource* drag_source GtkTreePath* path")
(CFNC "gboolean gtk_tree_drag_source_drag_data_delete GtkTreeDragSource* drag_source GtkTreePath* path")
(CFNC "gboolean gtk_tree_drag_source_drag_data_get GtkTreeDragSource* drag_source GtkTreePath* path GtkSelectionData* selection_data")
(CCAST "GTK_TREE_DRAG_DEST(obj)" "GtkTreeDragDest*")
(CCHK "GTK_IS_TREE_DRAG_DEST(obj)" "GtkTreeDragDest*")
;;;;(CFNC "GType gtk_tree_drag_dest_get_type void")
(CFNC "gboolean gtk_tree_drag_dest_drag_data_received GtkTreeDragDest* drag_dest GtkTreePath* dest GtkSelectionData* selection_data")
(CFNC "gboolean gtk_tree_drag_dest_row_drop_possible GtkTreeDragDest* drag_dest GtkTreePath* dest_path GtkSelectionData* selection_data")
(CFNC "gboolean gtk_tree_set_row_drag_data GtkSelectionData* selection_data GtkTreeModel* tree_model GtkTreePath* path")
(CFNC "gboolean gtk_tree_get_row_drag_data GtkSelectionData* selection_data GtkTreeModel** [tree_model] GtkTreePath** [path]")
(CCAST "GTK_TREE_MODEL(obj)" "GtkTreeModel*")
(CCHK "GTK_IS_TREE_MODEL(obj)" "GtkTreeModel*")
(CINT "GTK_TREE_MODEL_ITERS_PERSIST" "GtkTreeModelFlags")
(CINT "GTK_TREE_MODEL_LIST_ONLY" "GtkTreeModelFlags")
(CFNC "GtkTreePath* gtk_tree_path_new void")
(CFNC "GtkTreePath* gtk_tree_path_new_from_string gchar* path") ; FREE
(CFNC "gchar* gtk_tree_path_to_string GtkTreePath* path" 'free)
;;;(CFNC "GtkTreePath* gtk_tree_path_new_root void")
;;; gone 2.3.2
(CFNC "GtkTreePath* gtk_tree_path_new_first void")
(CFNC "void gtk_tree_path_append_index GtkTreePath* path gint index")
(CFNC "void gtk_tree_path_prepend_index GtkTreePath* path gint index")
(CFNC "gint gtk_tree_path_get_depth GtkTreePath* path")
(CFNC "gint* gtk_tree_path_get_indices GtkTreePath* path")
(CFNC "void gtk_tree_path_free GtkTreePath* path")
(CFNC "GtkTreePath* gtk_tree_path_copy GtkTreePath* path")
(CFNC "gint gtk_tree_path_compare GtkTreePath* a GtkTreePath* b")
(CFNC "void gtk_tree_path_next GtkTreePath* path")
(CFNC "gboolean gtk_tree_path_prev GtkTreePath* path")
(CFNC "gboolean gtk_tree_path_up GtkTreePath* path")
(CFNC "void gtk_tree_path_down GtkTreePath* path")
(CFNC "gboolean gtk_tree_path_is_ancestor GtkTreePath* path GtkTreePath* descendant")
(CFNC "gboolean gtk_tree_path_is_descendant GtkTreePath* path GtkTreePath* ancestor")
(CFNC "GtkTreeRowReference* gtk_tree_row_reference_new GtkTreeModel* model GtkTreePath* path") ; FREE
;;;;;;; where is this function? (CFNC "GType gtk_tree_row_reference_get_type void")
(CFNC "GtkTreeRowReference* gtk_tree_row_reference_new_proxy GObject* proxy GtkTreeModel* model GtkTreePath* path") ; FREE
(CFNC "GtkTreePath* gtk_tree_row_reference_get_path GtkTreeRowReference* reference")
(CFNC "gboolean gtk_tree_row_reference_valid GtkTreeRowReference* reference")
(CFNC "void gtk_tree_row_reference_free GtkTreeRowReference* reference")
(CFNC "void gtk_tree_row_reference_inserted GObject* proxy GtkTreePath* path")
(CFNC "void gtk_tree_row_reference_deleted GObject* proxy GtkTreePath* path")
(CFNC "void gtk_tree_row_reference_reordered GObject* proxy GtkTreePath* path GtkTreeIter* iter gint* new_order")
(CFNC "GtkTreeIter* gtk_tree_iter_copy GtkTreeIter* iter")
(CFNC "void gtk_tree_iter_free GtkTreeIter* iter")
;;;;(CFNC "GType gtk_tree_model_get_type void")
(CFNC "GtkTreeModelFlags gtk_tree_model_get_flags GtkTreeModel* tree_model")
(CFNC "gint gtk_tree_model_get_n_columns GtkTreeModel* tree_model")
(CFNC "GType gtk_tree_model_get_column_type GtkTreeModel* tree_model gint index")
(CFNC "gboolean gtk_tree_model_get_iter GtkTreeModel* tree_model GtkTreeIter* iter GtkTreePath* path")
(CFNC "gboolean gtk_tree_model_get_iter_from_string GtkTreeModel* tree_model GtkTreeIter* iter gchar* path_string")
;;; (CFNC "gboolean gtk_tree_model_get_iter_root GtkTreeModel* tree_model GtkTreeIter* iter")
;;; deprecated 2.3.2
(CFNC "gboolean gtk_tree_model_get_iter_first GtkTreeModel* tree_model GtkTreeIter* iter")
(CFNC "GtkTreePath* gtk_tree_model_get_path GtkTreeModel* tree_model GtkTreeIter* iter")
;(CFNC "void gtk_tree_model_get_value GtkTreeModel* tree_model GtkTreeIter* iter gint column GValue* value")
(CFNC "gboolean gtk_tree_model_iter_next GtkTreeModel* tree_model GtkTreeIter* iter")
(CFNC "gboolean gtk_tree_model_iter_children GtkTreeModel* tree_model GtkTreeIter* iter GtkTreeIter* @parent")
(CFNC "gboolean gtk_tree_model_iter_has_child GtkTreeModel* tree_model GtkTreeIter* iter")
(CFNC "gint gtk_tree_model_iter_n_children GtkTreeModel* tree_model GtkTreeIter* @iter")
(CFNC "gboolean gtk_tree_model_iter_nth_child GtkTreeModel* tree_model GtkTreeIter* iter GtkTreeIter* @parent gint n")
(CFNC "gboolean gtk_tree_model_iter_parent GtkTreeModel* tree_model GtkTreeIter* iter GtkTreeIter* child")
(CFNC "void gtk_tree_model_ref_node GtkTreeModel* tree_model GtkTreeIter* iter")
(CFNC "void gtk_tree_model_unref_node GtkTreeModel* tree_model GtkTreeIter* iter")
;;; (CFNC "void gtk_tree_model_get GtkTreeModel* tree_model GtkTreeIter* iter ...")
;;;;(CFNC "void gtk_tree_model_get_valist GtkTreeModel* tree_model GtkTreeIter* iter va_list var_args")
(CFNC "void gtk_tree_model_foreach GtkTreeModel* model GtkTreeModelForeachFunc func lambda_data @func_info")
(CFNC "void gtk_tree_model_row_changed GtkTreeModel* tree_model GtkTreePath* path GtkTreeIter* iter")
(CFNC "void gtk_tree_model_row_inserted GtkTreeModel* tree_model GtkTreePath* path GtkTreeIter* iter")
(CFNC "void gtk_tree_model_row_has_child_toggled GtkTreeModel* tree_model GtkTreePath* path GtkTreeIter* iter")
(CFNC "void gtk_tree_model_row_deleted GtkTreeModel* tree_model GtkTreePath* path")
(CFNC "void gtk_tree_model_rows_reordered GtkTreeModel* tree_model GtkTreePath* path GtkTreeIter* iter gint* new_order")
(CCAST "GTK_TREE_MODEL_SORT(obj)" "GtkTreeModelSort*")
(CCHK "GTK_IS_TREE_MODEL_SORT(obj)" "GtkTreeModelSort*")
;;;;(CFNC "GType gtk_tree_model_sort_get_type void")
(CFNC "GtkTreeModel* gtk_tree_model_sort_new_with_model GtkTreeModel* child_model")
(CFNC "GtkTreeModel* gtk_tree_model_sort_get_model GtkTreeModelSort* tree_model")
(CFNC "GtkTreePath* gtk_tree_model_sort_convert_child_path_to_path GtkTreeModelSort* tree_model_sort GtkTreePath* child_path") ; FREE
(CFNC "void gtk_tree_model_sort_convert_child_iter_to_iter GtkTreeModelSort* tree_model_sort GtkTreeIter* sort_iter GtkTreeIter* child_iter")
(CFNC "GtkTreePath* gtk_tree_model_sort_convert_path_to_child_path GtkTreeModelSort* tree_model_sort GtkTreePath* sorted_path") ; FREE
(CFNC "void gtk_tree_model_sort_convert_iter_to_child_iter GtkTreeModelSort* tree_model_sort GtkTreeIter* child_iter GtkTreeIter* sorted_iter")
(CFNC "void gtk_tree_model_sort_reset_default_sort_func GtkTreeModelSort* tree_model_sort")
(CFNC "void gtk_tree_model_sort_clear_cache GtkTreeModelSort* tree_model_sort")
(CCAST "GTK_TREE_SELECTION(obj)" "GtkTreeSelection*")
(CCHK "GTK_IS_TREE_SELECTION(obj)" "GtkTreeSelection*")
;;;;(CFNC "GType gtk_tree_selection_get_type void")
(CFNC "void gtk_tree_selection_set_mode GtkTreeSelection* selection GtkSelectionMode type")
(CFNC "GtkSelectionMode gtk_tree_selection_get_mode GtkTreeSelection* selection")
(CFNC "void gtk_tree_selection_set_select_function GtkTreeSelection* selection GtkTreeSelectionFunc func lambda_data @func_info GtkDestroyNotify destroy")
(CFNC "gpointer gtk_tree_selection_get_user_data GtkTreeSelection* selection")
(CFNC "GtkTreeView* gtk_tree_selection_get_tree_view GtkTreeSelection* selection")
(CFNC "gboolean gtk_tree_selection_get_selected GtkTreeSelection* selection GtkTreeModel** model GtkTreeIter* iter")
(CFNC "void gtk_tree_selection_selected_foreach GtkTreeSelection* selection GtkTreeSelectionForeachFunc func lambda_data @func_info")
(CFNC "void gtk_tree_selection_select_path GtkTreeSelection* selection GtkTreePath* path")
(CFNC "void gtk_tree_selection_unselect_path GtkTreeSelection* selection GtkTreePath* path")
(CFNC "void gtk_tree_selection_select_iter GtkTreeSelection* selection GtkTreeIter* iter")
(CFNC "void gtk_tree_selection_unselect_iter GtkTreeSelection* selection GtkTreeIter* iter")
(CFNC "gboolean gtk_tree_selection_path_is_selected GtkTreeSelection* selection GtkTreePath* path")
(CFNC "gboolean gtk_tree_selection_iter_is_selected GtkTreeSelection* selection GtkTreeIter* iter")
(CFNC "void gtk_tree_selection_select_all GtkTreeSelection* selection")
(CFNC "void gtk_tree_selection_unselect_all GtkTreeSelection* selection")
(CFNC "void gtk_tree_selection_select_range GtkTreeSelection* selection GtkTreePath* start_path GtkTreePath* end_path")
(CCAST "GTK_TREE_SORTABLE(obj)" "GtkTreeSortable*")
(CCHK "GTK_IS_TREE_SORTABLE(obj)" "GtkTreeSortable*")
;;;;(CFNC "GType gtk_tree_sortable_get_type void")
(CFNC "void gtk_tree_sortable_sort_column_changed GtkTreeSortable* sortable")
(CFNC "gboolean gtk_tree_sortable_get_sort_column_id GtkTreeSortable* sortable gint* [sort_column_id] GtkSortType* [order]")
(CFNC "void gtk_tree_sortable_set_sort_column_id GtkTreeSortable* sortable gint sort_column_id GtkSortType order")
(CFNC "void gtk_tree_sortable_set_sort_func GtkTreeSortable* sortable gint sort_column_id GtkTreeIterCompareFunc func lambda_data @func_info GtkDestroyNotify destroy")
;;       typedef void (*GtkCallbackMarshal) (GtkObject *object,gpointer data,guint n_args,GtkArg *args)
(CFNC "void gtk_tree_sortable_set_default_sort_func GtkTreeSortable* sortable GtkTreeIterCompareFunc func lambda_data @func_info GtkDestroyNotify destroy")
(CFNC "gboolean gtk_tree_sortable_has_default_sort_func GtkTreeSortable* sortable")
(CCAST "GTK_TREE_STORE(obj)" "GtkTreeStore*")
(CCHK "GTK_IS_TREE_STORE(obj)" "GtkTreeStore*")
;;;;(CFNC "GType gtk_tree_store_get_type void")
(CFNC-PA "GtkTreeStore* gtk_tree_store_new gint n_columns etc types" 1 6 '("GType"))
(CFNC "GtkTreeStore* gtk_tree_store_newv gint n_columns GType* types")
(CFNC "void gtk_tree_store_set_column_types GtkTreeStore* tree_store gint n_columns GType* types")
;(CFNC "void gtk_tree_store_set_value GtkTreeStore* tree_store GtkTreeIter* iter gint column GValue* value")
(CFNC-PA "void gtk_tree_store_set GtkTreeStore* tree_store GtkTreeIter* iter etc values" 2 10 '("int" "gchar*")) ; just string values for now
;;; any type values here, ideally
;;;;(CFNC "void gtk_tree_store_set_valist GtkTreeStore* tree_store GtkTreeIter* iter va_list var_args")
(CFNC "void gtk_tree_store_remove GtkTreeStore* tree_store GtkTreeIter* iter")
(CFNC "void gtk_tree_store_insert GtkTreeStore* tree_store GtkTreeIter* iter GtkTreeIter* @parent gint position")
(CFNC "void gtk_tree_store_insert_before GtkTreeStore* tree_store GtkTreeIter* iter GtkTreeIter* @parent GtkTreeIter* @sibling")
(CFNC "void gtk_tree_store_insert_after GtkTreeStore* tree_store GtkTreeIter* iter GtkTreeIter* @parent GtkTreeIter* @sibling")
(CFNC "void gtk_tree_store_prepend GtkTreeStore* tree_store GtkTreeIter* iter GtkTreeIter* @parent")
(CFNC "void gtk_tree_store_append GtkTreeStore* tree_store GtkTreeIter* iter GtkTreeIter* @parent")
(CFNC "gboolean gtk_tree_store_is_ancestor GtkTreeStore* tree_store GtkTreeIter* iter GtkTreeIter* descendant")
(CFNC "gint gtk_tree_store_iter_depth GtkTreeStore* tree_store GtkTreeIter* iter")
(CFNC "void gtk_tree_store_clear GtkTreeStore* tree_store")
(CCAST "GTK_TREE_VIEW_COLUMN(obj)" "GtkTreeViewColumn*")
(CCHK "GTK_IS_TREE_VIEW_COLUMN(obj)" "GtkTreeViewColumn*")
(CINT "GTK_TREE_VIEW_COLUMN_GROW_ONLY" "GtkTreeViewColumnSizing")
(CINT "GTK_TREE_VIEW_COLUMN_AUTOSIZE" "GtkTreeViewColumnSizing")
(CINT "GTK_TREE_VIEW_COLUMN_FIXED" "GtkTreeViewColumnSizing")
;;;;(CFNC "GType gtk_tree_view_column_get_type void")
(CFNC "GtkTreeViewColumn* gtk_tree_view_column_new void")
(CFNC-PA "GtkTreeViewColumn* gtk_tree_view_column_new_with_attributes gchar* title GtkCellRenderer* cell etc attributes" 2 10 '("gchar*" "int"))
(CFNC "void gtk_tree_view_column_pack_start GtkTreeViewColumn* tree_column GtkCellRenderer* cell gboolean expand")
(CFNC "void gtk_tree_view_column_pack_end GtkTreeViewColumn* tree_column GtkCellRenderer* cell gboolean expand")
(CFNC "void gtk_tree_view_column_clear GtkTreeViewColumn* tree_column")
;;; out 2.17.2 (CFNC "GList* gtk_tree_view_column_get_cell_renderers GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_add_attribute GtkTreeViewColumn* tree_column GtkCellRenderer* cell_renderer gchar* attribute gint column")
(CFNC-PA "void gtk_tree_view_column_set_attributes GtkTreeViewColumn* tree_column GtkCellRenderer* cell_renderer etc attributes" 2 10 '("gchar*" "int"))
(CFNC "void gtk_tree_view_column_set_cell_data_func GtkTreeViewColumn* tree_column GtkCellRenderer* cell_renderer GtkTreeCellDataFunc func lambda_data @func_info GtkDestroyNotify destroy")
(CFNC "void gtk_tree_view_column_clear_attributes GtkTreeViewColumn* tree_column GtkCellRenderer* cell_renderer")
(CFNC "void gtk_tree_view_column_set_spacing GtkTreeViewColumn* tree_column gint spacing")
(CFNC "gint gtk_tree_view_column_get_spacing GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_set_visible GtkTreeViewColumn* tree_column gboolean visible")
(CFNC "gboolean gtk_tree_view_column_get_visible GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_set_resizable GtkTreeViewColumn* tree_column gboolean resizable")
(CFNC "gboolean gtk_tree_view_column_get_resizable GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_set_sizing GtkTreeViewColumn* tree_column GtkTreeViewColumnSizing type")
(CFNC "GtkTreeViewColumnSizing gtk_tree_view_column_get_sizing GtkTreeViewColumn* tree_column")
(CFNC "gint gtk_tree_view_column_get_width GtkTreeViewColumn* tree_column")
(CFNC "gint gtk_tree_view_column_get_fixed_width GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_set_fixed_width GtkTreeViewColumn* tree_column gint fixed_width")
(CFNC "void gtk_tree_view_column_set_min_width GtkTreeViewColumn* tree_column gint min_width")
(CFNC "gint gtk_tree_view_column_get_min_width GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_set_max_width GtkTreeViewColumn* tree_column gint max_width")
(CFNC "gint gtk_tree_view_column_get_max_width GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_clicked GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_set_title GtkTreeViewColumn* tree_column gchar* title")
(CFNC "gchar* gtk_tree_view_column_get_title GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_set_clickable GtkTreeViewColumn* tree_column gboolean clickable")
(CFNC "gboolean gtk_tree_view_column_get_clickable GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_set_widget GtkTreeViewColumn* tree_column GtkWidget* @widget")
(CFNC "GtkWidget* gtk_tree_view_column_get_widget GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_set_alignment GtkTreeViewColumn* tree_column gfloat xalign")
(CFNC "gfloat gtk_tree_view_column_get_alignment GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_set_reorderable GtkTreeViewColumn* tree_column gboolean reorderable")
(CFNC "gboolean gtk_tree_view_column_get_reorderable GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_set_sort_column_id GtkTreeViewColumn* tree_column gint sort_column_id")
(CFNC "gint gtk_tree_view_column_get_sort_column_id GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_set_sort_indicator GtkTreeViewColumn* tree_column gboolean setting")
(CFNC "gboolean gtk_tree_view_column_get_sort_indicator GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_set_sort_order GtkTreeViewColumn* tree_column GtkSortType order")
(CFNC "GtkSortType gtk_tree_view_column_get_sort_order GtkTreeViewColumn* tree_column")
(CFNC "void gtk_tree_view_column_cell_set_cell_data GtkTreeViewColumn* tree_column GtkTreeModel* tree_model GtkTreeIter* iter gboolean is_expander gboolean is_expanded")
(CFNC "void gtk_tree_view_column_cell_get_size GtkTreeViewColumn* tree_column GdkRectangle* cell_area gint* [x_offset] gint* [y_offset] gint* [width] gint* [height]")
;(CFNC "gboolean gtk_tree_view_column_cell_focus GtkTreeViewColumn* tree_column gint direction")
(CFNC "gboolean gtk_tree_view_column_cell_is_visible GtkTreeViewColumn* tree_column")
;(CFNC "void gtk_tree_view_column_cell_set_dirty GtkTreeViewColumn* tree_column")
(CFNC "gboolean gtk_tree_view_column_cell_get_position GtkTreeViewColumn* tree_column GtkCellRenderer* cell_renderer gint* [start_pos] gint* [width]")
(CINT "GTK_TREE_VIEW_DROP_BEFORE" "GtkTreeViewDropPosition")
(CINT "GTK_TREE_VIEW_DROP_AFTER" "GtkTreeViewDropPosition")
(CINT "GTK_TREE_VIEW_DROP_INTO_OR_BEFORE" "GtkTreeViewDropPosition")
(CINT "GTK_TREE_VIEW_DROP_INTO_OR_AFTER" "GtkTreeViewDropPosition")
(CCAST "GTK_TREE_VIEW(obj)" "GtkTreeView*")
(CCHK "GTK_IS_TREE_VIEW(obj)" "GtkTreeView*")
;;;;(CFNC "GType gtk_tree_view_get_type void")
(CFNC "GtkWidget* gtk_tree_view_new void")
(CFNC "GtkWidget* gtk_tree_view_new_with_model GtkTreeModel* model")
(CFNC "GtkTreeModel* gtk_tree_view_get_model GtkTreeView* tree_view")
(CFNC "void gtk_tree_view_set_model GtkTreeView* tree_view GtkTreeModel* @model")
(CFNC "GtkTreeSelection* gtk_tree_view_get_selection GtkTreeView* tree_view")
;;; 2.91.2 (CFNC "GtkAdjustment* gtk_tree_view_get_hadjustment GtkTreeView* tree_view")
;;; 2.91.2 (CFNC "void gtk_tree_view_set_hadjustment GtkTreeView* tree_view GtkAdjustment* @adjustment")
;;; 2.91.2 (CFNC "GtkAdjustment* gtk_tree_view_get_vadjustment GtkTreeView* tree_view")
;;; 2.91.2 (CFNC "void gtk_tree_view_set_vadjustment GtkTreeView* tree_view GtkAdjustment* @adjustment")
(CFNC "gboolean gtk_tree_view_get_headers_visible GtkTreeView* tree_view")
(CFNC "void gtk_tree_view_set_headers_visible GtkTreeView* tree_view gboolean headers_visible")
(CFNC "void gtk_tree_view_columns_autosize GtkTreeView* tree_view")
(CFNC "void gtk_tree_view_set_headers_clickable GtkTreeView* tree_view gboolean setting")
;;; 3.13.6 (CFNC "void gtk_tree_view_set_rules_hint GtkTreeView* tree_view gboolean setting")
;;; 3.13.6 (CFNC "gboolean gtk_tree_view_get_rules_hint GtkTreeView* tree_view")
(CFNC "gint gtk_tree_view_append_column GtkTreeView* tree_view GtkTreeViewColumn* column")
(CFNC "gint gtk_tree_view_remove_column GtkTreeView* tree_view GtkTreeViewColumn* column")
(CFNC "gint gtk_tree_view_insert_column GtkTreeView* tree_view GtkTreeViewColumn* column gint position")
(CFNC-PA "gint gtk_tree_view_insert_column_with_attributes GtkTreeView* tree_view gint position gchar* title GtkCellRenderer* cell etc attributes" 2 10 '("gchar*" "int"))
(CFNC "gint gtk_tree_view_insert_column_with_data_func GtkTreeView* tree_view gint position gchar* title GtkCellRenderer* cell GtkTreeCellDataFunc func lambda_data @func_info GtkDestroyNotify dnotify")
(CFNC "GtkTreeViewColumn* gtk_tree_view_get_column GtkTreeView* tree_view gint n")
(CFNC "GList* gtk_tree_view_get_columns GtkTreeView* tree_view")
(CFNC "void gtk_tree_view_move_column_after GtkTreeView* tree_view GtkTreeViewColumn* column GtkTreeViewColumn* @base_column")
(CFNC "void gtk_tree_view_set_expander_column GtkTreeView* tree_view GtkTreeViewColumn* @column")
(CFNC "GtkTreeViewColumn* gtk_tree_view_get_expander_column GtkTreeView* tree_view")
(CFNC "void gtk_tree_view_set_column_drag_function GtkTreeView* tree_view GtkTreeViewColumnDropFunc func lambda_data @func_info GtkDestroyNotify destroy")
(CFNC "void gtk_tree_view_scroll_to_point GtkTreeView* tree_view gint tree_x gint tree_y")
(CFNC "void gtk_tree_view_scroll_to_cell GtkTreeView* tree_view GtkTreePath* @path GtkTreeViewColumn* @column gboolean use_align gfloat row_align gfloat col_align")
(CFNC "void gtk_tree_view_row_activated GtkTreeView* tree_view GtkTreePath* path GtkTreeViewColumn* column")
(CFNC "void gtk_tree_view_expand_all GtkTreeView* tree_view")
(CFNC "void gtk_tree_view_collapse_all GtkTreeView* tree_view")
(CFNC "gboolean gtk_tree_view_expand_row GtkTreeView* tree_view GtkTreePath* path gboolean open_all")
(CFNC "gboolean gtk_tree_view_collapse_row GtkTreeView* tree_view GtkTreePath* path")
(CFNC "void gtk_tree_view_map_expanded_rows GtkTreeView* tree_view GtkTreeViewMappingFunc func lambda_data @func_info")
(CFNC "gboolean gtk_tree_view_row_expanded GtkTreeView* tree_view GtkTreePath* path")
(CFNC "void gtk_tree_view_set_reorderable GtkTreeView* tree_view gboolean reorderable")
(CFNC "gboolean gtk_tree_view_get_reorderable GtkTreeView* tree_view")
(CFNC "void gtk_tree_view_set_cursor GtkTreeView* tree_view GtkTreePath* path GtkTreeViewColumn* focus_column gboolean start_editing")
(CFNC "void gtk_tree_view_get_cursor GtkTreeView* tree_view GtkTreePath** [path] GtkTreeViewColumn** [focus_column]")
(CFNC "gboolean gtk_tree_view_get_path_at_pos GtkTreeView* tree_view gint x gint y GtkTreePath** [path] GtkTreeViewColumn** [column] gint* [cell_x] gint* [cell_y]")
(CFNC "void gtk_tree_view_get_cell_area GtkTreeView* tree_view GtkTreePath* @path GtkTreeViewColumn* @column GdkRectangle* rect")
(CFNC "void gtk_tree_view_get_background_area GtkTreeView* tree_view GtkTreePath* @path GtkTreeViewColumn* @column GdkRectangle* rect")
(CFNC "void gtk_tree_view_get_visible_rect GtkTreeView* tree_view GdkRectangle* visible_rect")
;;; (out 2.11.3) (CFNC "void gtk_tree_view_widget_to_tree_coords GtkTreeView* tree_view gint wx gint wy gint* [tx] gint* [ty]")
;;; (out 2.11.3) (CFNC "void gtk_tree_view_tree_to_widget_coords GtkTreeView* tree_view gint tx gint ty gint* [wx] gint* [wy]")
;;; 3.93.0 (CFNC "void gtk_tree_view_enable_model_drag_source GtkTreeView* tree_view GdkModifierType start_button_mask GtkTargetEntry* targets gint n_targets GdkDragAction actions")
;;; 3.93.0 (CFNC "void gtk_tree_view_enable_model_drag_dest GtkTreeView* tree_view GtkTargetEntry* targets gint n_targets GdkDragAction actions")
(CFNC "void gtk_tree_view_unset_rows_drag_source GtkTreeView* tree_view")
(CFNC "void gtk_tree_view_unset_rows_drag_dest GtkTreeView* tree_view")
(CFNC "void gtk_tree_view_set_drag_dest_row GtkTreeView* tree_view GtkTreePath* path GtkTreeViewDropPosition pos")
(CFNC "void gtk_tree_view_get_drag_dest_row GtkTreeView* tree_view GtkTreePath** [path] GtkTreeViewDropPosition* [pos]")
(CFNC "gboolean gtk_tree_view_get_dest_row_at_pos GtkTreeView* tree_view gint drag_x gint drag_y GtkTreePath** [path] GtkTreeViewDropPosition* [pos]")
;;; (CFNC-gtk2 "GdkPixmap* gtk_tree_view_create_row_drag_icon GtkTreeView* tree_view GtkTreePath* path")
(CFNC "void gtk_tree_view_set_enable_search GtkTreeView* tree_view gboolean enable_search")
(CFNC "gboolean gtk_tree_view_get_enable_search GtkTreeView* tree_view")
(CFNC "gint gtk_tree_view_get_search_column GtkTreeView* tree_view")
(CFNC "void gtk_tree_view_set_search_column GtkTreeView* tree_view gint column")
(CFNC "GtkTreeViewSearchEqualFunc gtk_tree_view_get_search_equal_func GtkTreeView* tree_view")
(CFNC "void gtk_tree_view_set_search_equal_func GtkTreeView* tree_view GtkTreeViewSearchEqualFunc func lambda_data @func_info GtkDestroyNotify search_destroy")
;;;;(CFNC "void gtk_tree_view_set_destroy_count_func GtkTreeView* tree_view GtkTreeDestroyCountFunc func lambda_data @func_info GtkDestroyNotify destroy")
;(CCAST2 "GTK_CLASS_NAME(class)")
;(CCAST2 "GTK_CLASS_TYPE(class)")
;(CCAST2 "GTK_FUNDAMENTAL_TYPE")
;(CINT"GTK_STRUCT_OFFSET")
;(CINT "GTK_CHECK_CAST")
;(CINT "GTK_CHECK_CLASS_CAST")
;(CINT "GTK_CHECK_GET_CLASS")
;(CINT "GTK_CHECK_TYPE")
;(CINT "GTK_CHECK_CLASS_TYPE")
;(CFNC "gpointer gtk_type_class GType type")
;(CFNC "GType gtk_type_unique GType parent_type GTypeInfo* gtkinfo")
;(CFNC "gpointer gtk_type_new GType type")
;(CFNC "GtkEnumValue* gtk_type_enum_get_values GType enum_type")
;(CFNC "GtkFlagValue* gtk_type_flags_get_values GType flags_type")
;(CFNC "GtkEnumValue* gtk_type_enum_find_value GType enum_type gchar* value_name")
;(CFNC "GtkFlagValue* gtk_type_flags_find_value GType flags_type gchar* value_name")
;;; 3.1.6 (CCAST "GTK_VBUTTON_BOX(obj)" "GtkVButtonBox*")
;;; 3.1.6 (CCHK "GTK_IS_VBUTTON_BOX(obj)" "GtkVButtonBox*")
;;; 3.1.6 ;;;;(CFNC "GType gtk_vbutton_box_get_type void")
;;; 3.1.6 (CFNC "GtkWidget* gtk_vbutton_box_new void")
(CINT "GTK_MAJOR_VERSION")
(CINT "GTK_MINOR_VERSION")
(CINT "GTK_MICRO_VERSION")
;;;; (CINT "GTK_BINARY_AGE")
;;;; (CINT "GTK_INTERFACE_AGE")
(CCAST "GTK_VIEWPORT(obj)" "GtkViewport*")
(CCHK "GTK_IS_VIEWPORT(obj)" "GtkViewport*")
;;;;(CFNC "GType gtk_viewport_get_type void")
(CFNC "GtkWidget* gtk_viewport_new GtkAdjustment* @hadjustment GtkAdjustment* @vadjustment")
;;; 2.91.2 (CFNC "GtkAdjustment* gtk_viewport_get_hadjustment GtkViewport* viewport")
;;; 2.91.2 (CFNC "GtkAdjustment* gtk_viewport_get_vadjustment GtkViewport* viewport")
;;; 2.91.2 (CFNC "void gtk_viewport_set_hadjustment GtkViewport* viewport GtkAdjustment* @adjustment")
;;; 2.91.2 (CFNC "void gtk_viewport_set_vadjustment GtkViewport* viewport GtkAdjustment* @adjustment")
(CFNC "void gtk_viewport_set_shadow_type GtkViewport* viewport GtkShadowType type")
(CFNC "GtkShadowType gtk_viewport_get_shadow_type GtkViewport* viewport")
;;; 3.1.6 (CCAST "GTK_VPANED(obj)" "GtkVPaned*")
;;; 3.1.6 (CCHK "GTK_IS_VPANED(obj)" "GtkVPaned*")
;;; 3.1.6 ;;;;(CFNC "GType gtk_vpaned_get_type void")
;;; 3.1.6 (CFNC "GtkWidget* gtk_vpaned_new void")
;;; 2.91.5 (CCAST "GTK_VRULER(obj)" "GtkVRuler*")
;;; 2.91.5 (CCHK "GTK_IS_VRULER(obj)" "GtkVRuler*")
;;;;(CFNC "GType gtk_vruler_get_type void")
;;; 2.91.5 (CFNC "GtkWidget* gtk_vruler_new void")
;;; 3.1.6 (CCAST "GTK_VSCALE(obj)" "GtkVScale*")
;;; 3.1.6 (CCHK "GTK_IS_VSCALE(obj)" "GtkVScale*")
;;; 3.1.6 ;;;;(CFNC "GType gtk_vscale_get_type void")
;;; 3.1.6 (CFNC "GtkWidget* gtk_vscale_new GtkAdjustment* @adjustment")
;;; 3.1.6 (CFNC "GtkWidget* gtk_vscale_new_with_range gdouble min gdouble max gdouble step")
;;; 3.1.6 (CCAST "GTK_VSCROLLBAR(obj)" "GtkVScrollbar*")
;;; 3.1.6 (CCHK "GTK_IS_VSCROLLBAR(obj)" "GtkVScrollbar*")
;;; 3.1.6 ;;;;(CFNC "GType gtk_vscrollbar_get_type void")
;;; 3.1.6 (CFNC "GtkWidget* gtk_vscrollbar_new GtkAdjustment* @adjustment")
;;; 3.1.6 (CCAST "GTK_VSEPARATOR(obj)" "GtkVSeparator*")
;;; 3.1.6 (CCHK "GTK_IS_VSEPARATOR(obj)" "GtkVSeparator*")
;;;;(CFNC "GType gtk_vseparator_get_type void")
;;; 3.1.6 (CFNC "GtkWidget* gtk_vseparator_new void")


;;; all out 2.90.3 ?
;;; 2.91.0 (CINT "GTK_TOPLEVEL" "GtkWidgetFlags")
;;; 2.91.0 (CINT "GTK_NO_WINDOW" "GtkWidgetFlags")
;;; 2.91.0 (CINT "GTK_REALIZED" "GtkWidgetFlags")
;;; 2.91.0 (CINT "GTK_MAPPED" "GtkWidgetFlags")
;;; 2.91.0 (CINT "GTK_VISIBLE" "GtkWidgetFlags")
;;; 2.91.0 (CINT "GTK_SENSITIVE" "GtkWidgetFlags")
;;; 2.91.0 (CINT "GTK_PARENT_SENSITIVE" "GtkWidgetFlags")
;;; 2.91.0 (CINT "GTK_CAN_FOCUS" "GtkWidgetFlags")
;;; 2.91.0 (CINT "GTK_HAS_FOCUS" "GtkWidgetFlags")
;;; 2.91.0 (CINT "GTK_CAN_DEFAULT" "GtkWidgetFlags")
;;; 2.91.0 (CINT "GTK_HAS_DEFAULT" "GtkWidgetFlags")
;;; 2.91.0 (CINT "GTK_HAS_GRAB" "GtkWidgetFlags")
;;; 2.91.0 (CINT "GTK_RC_STYLE" "GtkWidgetFlags")
;;; this is also defined in gtkrc.h
;;; 2.91.0 (CINT "GTK_COMPOSITE_CHILD" "GtkWidgetFlags")
;;; out 2.90.2 (CINT "GTK_NO_REPARENT" "GtkWidgetFlags")
;;; 2.91.0 (CINT "GTK_APP_PAINTABLE" "GtkWidgetFlags")
;;; 2.91.0 (CINT "GTK_RECEIVES_DEFAULT" "GtkWidgetFlags")
;;; 2.91.0 (CINT "GTK_DOUBLE_BUFFERED" "GtkWidgetFlags")


;;; 2.91.0 (CINT "GTK_WIDGET_HELP_TOOLTIP" "GtkWidgetHelpType")
;;; 2.91.0 (CINT "GTK_WIDGET_HELP_WHATS_THIS" "GtkWidgetHelpType")
(CCAST "GTK_WIDGET(widget)" "GtkWidget*")
(CCHK "GTK_IS_WIDGET(widget)" "GtkWidget*")
;(CCAST2 "GTK_WIDGET_TYPE(wid)")
;;; 2.19.3 (CFNC "int GTK_WIDGET_STATE GtkWidget* wid")
;;;        (CFNC "int GTK_WIDGET_SAVED_STATE GtkWidget* wid")
;;; (CFNC "int GTK_WIDGET_FLAGS GtkWidget* wid")
;;;        (CFNC "gboolean GTK_WIDGET_TOPLEVEL GtkWidget* wid")
;;;        (CFNC "gboolean GTK_WIDGET_NO_WINDOW GtkWidget* wid")
;;; (CFNC "gboolean GTK_WIDGET_REALIZED GtkWidget* wid")
;;; (CFNC "gboolean GTK_WIDGET_MAPPED GtkWidget* wid")
;;; (CFNC "gboolean GTK_WIDGET_VISIBLE GtkWidget* wid")
;;; (CFNC "gboolean GTK_WIDGET_DRAWABLE GtkWidget* wid")
;;; (CFNC "gboolean GTK_WIDGET_SENSITIVE GtkWidget* wid")
;;; (CFNC "gboolean GTK_WIDGET_PARENT_SENSITIVE GtkWidget* wid")
;;; (CFNC "gboolean GTK_WIDGET_IS_SENSITIVE GtkWidget* wid")
;;;        (CFNC "gboolean GTK_WIDGET_CAN_FOCUS GtkWidget* wid")
;;; (CFNC "gboolean GTK_WIDGET_HAS_FOCUS GtkWidget* wid")
;;;        (CFNC "gboolean GTK_WIDGET_CAN_DEFAULT GtkWidget* wid")
;;;        (CFNC "gboolean GTK_WIDGET_HAS_DEFAULT GtkWidget* wid")
;;;        (CFNC "gboolean GTK_WIDGET_HAS_GRAB GtkWidget* wid")
;;;        (CFNC "gboolean GTK_WIDGET_RC_STYLE GtkWidget* wid")
;;;        (CFNC "gboolean GTK_WIDGET_COMPOSITE_CHILD GtkWidget* wid")
;;;        (CFNC "gboolean GTK_WIDGET_APP_PAINTABLE GtkWidget* wid")
;;;        (CFNC "gboolean GTK_WIDGET_RECEIVES_DEFAULT GtkWidget* wid")
;;;        (CFNC "gboolean GTK_WIDGET_DOUBLE_BUFFERED GtkWidget* wid")
;;; (CFNC "void GTK_WIDGET_SET_FLAGS GtkWidget* wid int flag")
;;; (CFNC "void GTK_WIDGET_UNSET_FLAGS GtkWidget* wid int flag")
;;;;(CFNC "GType gtk_widget_get_type void")
;;; (CFNC "GtkWidget* gtk_widget_new GType type gchar* first_property_name ...")
;;; any type vals here
;;; (out 2.11.3) (CFNC "GtkWidget* gtk_widget_ref GtkWidget* widget")
;;; (out 2.11.3) (CFNC "void gtk_widget_unref GtkWidget* widget")
(CFNC "void gtk_widget_destroy GtkWidget* widget")
(CFNC "void gtk_widget_destroyed GtkWidget* widget GtkWidget** [widget_pointer]")
(CFNC "void gtk_widget_unparent GtkWidget* widget")
(CFNC "void gtk_widget_show GtkWidget* widget")
;;; 3.94.0 (CFNC "void gtk_widget_show_now GtkWidget* widget")
(CFNC "void gtk_widget_hide GtkWidget* widget")
;;; gtk 4 (CFNC "void gtk_widget_show_all GtkWidget* widget")
;;; (CFNC-gtk2 "void gtk_widget_hide_all GtkWidget* widget")
(CFNC "void gtk_widget_map GtkWidget* widget")
(CFNC "void gtk_widget_unmap GtkWidget* widget")
(CFNC "void gtk_widget_realize GtkWidget* widget")
(CFNC "void gtk_widget_unrealize GtkWidget* widget")
(CFNC "void gtk_widget_queue_draw GtkWidget* widget")
;;; 3.96.0 (CFNC "void gtk_widget_queue_draw_area GtkWidget* widget gint x gint y gint width gint height")
(CFNC "void gtk_widget_queue_resize GtkWidget* widget")
;;; (CFNC-gtk2 "void gtk_widget_size_request GtkWidget* widget GtkRequisition* requisition")
;;; 3.91.2 (CFNC "void gtk_widget_size_allocate GtkWidget* widget GtkAllocation* allocation")
;;; (CFNC-gtk2 "void gtk_widget_get_child_requisition GtkWidget* widget GtkRequisition* requisition")
(CFNC "void gtk_widget_add_accelerator GtkWidget* widget gchar* accel_signal GtkAccelGroup* accel_group guint accel_key GdkModifierType accel_mods GtkAccelFlags accel_flags")
(CFNC "gboolean gtk_widget_remove_accelerator GtkWidget* widget GtkAccelGroup* accel_group guint accel_key GdkModifierType accel_mods")
(CFNC "GList* gtk_widget_list_accel_closures GtkWidget* widget") ; FREE (g_list_free)
(CFNC "gboolean gtk_widget_mnemonic_activate GtkWidget* widget gboolean group_cycling")
(CFNC "gboolean gtk_widget_event GtkWidget* widget GdkEvent* event")
;;; 3.21.3 (CFNC "gint gtk_widget_send_expose GtkWidget* widget GdkEvent* event")
(CFNC "gboolean gtk_widget_activate GtkWidget* widget")
;;; 2.91.2 (CFNC "gboolean gtk_widget_set_scroll_adjustments GtkWidget* widget GtkAdjustment* @hadjustment GtkAdjustment* @vadjustment")
;;; 3.13.2 (CFNC "void gtk_widget_reparent GtkWidget* widget GtkWidget* new_parent")
;;; 3.96.0 (CFNC "gboolean gtk_widget_intersect GtkWidget* widget GdkRectangle* area GdkRectangle* @intersection")
;;; 3.13.2 ;;; (CFNC "GdkRegion* gtk_widget_region_intersect GtkWidget* widget GdkRegion* region") ; FREE
;;; 3.96.0 (CFNC "void gtk_widget_freeze_child_notify GtkWidget* widget")
;;; 3.96.0 (CFNC "void gtk_widget_child_notify GtkWidget* widget gchar* child_property")
;;; 3.96.0 (CFNC "void gtk_widget_thaw_child_notify GtkWidget* widget")
(CFNC "gboolean gtk_widget_is_focus GtkWidget* widget")
(CFNC "void gtk_widget_grab_focus GtkWidget* widget")
;;; 3.96.0 (CFNC "void gtk_widget_grab_default GtkWidget* widget")
(CFNC "void gtk_widget_set_name GtkWidget* widget gchar* name")
(CFNC "gchar* gtk_widget_get_name GtkWidget* widget")
;;; (CFNC "void gtk_widget_set_state GtkWidget* widget GtkStateType state")
(CFNC "void gtk_widget_set_sensitive GtkWidget* widget gboolean sensitive")
;;; 3.89 (CFNC "void gtk_widget_set_app_paintable GtkWidget* widget gboolean app_paintable")
;;; 3.13.3 (CFNC "void gtk_widget_set_double_buffered GtkWidget* widget gboolean double_buffered")
;;; 3.92.1 (CFNC "void gtk_widget_set_redraw_on_allocate GtkWidget* widget gboolean redraw_on_allocate")
(CFNC "void gtk_widget_set_parent GtkWidget* widget GtkWidget* parent")
(CFNC "void gtk_widget_set_child_visible GtkWidget* widget gboolean is_visible")
(CFNC "void gtk_widget_set_accel_path GtkWidget* widget gchar* accel_path GtkAccelGroup* accel_group")
(CFNC "gboolean gtk_widget_get_child_visible GtkWidget* widget")
(CFNC "GtkWidget* gtk_widget_get_parent GtkWidget* widget")
(CFNC "gboolean gtk_widget_child_focus GtkWidget* widget GtkDirectionType direction")
(CFNC "void gtk_widget_set_size_request GtkWidget* widget gint width gint height")
(CFNC "void gtk_widget_get_size_request GtkWidget* widget gint* [width] gint* [height]")
;;; 3.91.1 (CFNC "void gtk_widget_set_events GtkWidget* widget gint events")
;;; 3.91.1 (CFNC "void gtk_widget_add_events GtkWidget* widget gint events")
;;;; (CFNC "void gtk_widget_set_extension_events GtkWidget* widget GdkExtensionMode mode")
;;;; (CFNC "GdkExtensionMode gtk_widget_get_extension_events GtkWidget* widget")
(CFNC "GtkWidget* gtk_widget_get_toplevel GtkWidget* widget")
(CFNC "GtkWidget* gtk_widget_get_ancestor GtkWidget* widget GType widget_type")
;;; (CFNC-gtk2 "GdkColormap* gtk_widget_get_colormap GtkWidget* widget")
;;; 3.89 (CFNC "GdkVisual* gtk_widget_get_visual GtkWidget* widget")
(CFNC "GtkSettings* gtk_widget_get_settings GtkWidget* widget")
(CFNC "AtkObject* gtk_widget_get_accessible GtkWidget* widget")
;;; (CFNC-gtk2 "void gtk_widget_set_colormap GtkWidget* widget GdkColormap* colormap")
;;; 3.91.1 (CFNC "gint gtk_widget_get_events GtkWidget* widget")
;;; (CFNC-gtk2 "void gtk_widget_get_pointer GtkWidget* widget gint* [x] gint* [y]")
(CFNC "gboolean gtk_widget_is_ancestor GtkWidget* widget GtkWidget* ancestor")
(CFNC "gboolean gtk_widget_translate_coordinates GtkWidget* src_widget GtkWidget* dest_widget gint src_x gint src_y gint* [dest_x] gint* [dest_y]")
;;; 3.96.0 (CFNC "gboolean gtk_widget_hide_on_delete GtkWidget* widget")
;;; (CFNC-gtk2 "void gtk_widget_set_style GtkWidget* widget GtkStyle* @style")
;;; (CFNC-gtk2 "void gtk_widget_ensure_style GtkWidget* widget")
;;; (CFNC-gtk2 "GtkStyle* gtk_widget_get_style GtkWidget* widget")
;;; (CFNC-gtk2 "void gtk_widget_modify_style GtkWidget* widget GtkRcStyle* style")
;;; (CFNC-gtk2 "GtkRcStyle* gtk_widget_get_modifier_style GtkWidget* widget")
;;; (CFNC-gtk2 "void gtk_widget_modify_fg GtkWidget* widget GtkStateType state GdkColor* color")
;;; (CFNC-gtk2 "void gtk_widget_modify_bg GtkWidget* widget GtkStateType state GdkColor* color")
;;; (CFNC-gtk2 "void gtk_widget_modify_text GtkWidget* widget GtkStateType state GdkColor* color")
;;; (CFNC-gtk2 "void gtk_widget_modify_base GtkWidget* widget GtkStateType state GdkColor* color")
;;; (CFNC-gtk2 "void gtk_widget_modify_font GtkWidget* widget PangoFontDescription* font_desc")
(CFNC "PangoContext* gtk_widget_create_pango_context GtkWidget* widget")
(CFNC "PangoContext* gtk_widget_get_pango_context GtkWidget* widget")
(CFNC "PangoLayout* gtk_widget_create_pango_layout GtkWidget* widget gchar* text")
;;; ;;; (CFNC-gtk2 "GdkPixbuf* gtk_widget_render_icon GtkWidget* widget gchar* stock_id GtkIconSize size gchar* detail")
;;; 3.9.0 (CFNC "void gtk_widget_set_composite_name GtkWidget* widget gchar* name")
;;; 3.9.0 (CFNC "gchar* gtk_widget_get_composite_name GtkWidget* widget")
;;; (CFNC-gtk2 "void gtk_widget_reset_rc_styles GtkWidget* widget")
;;; (CFNC-gtk2 "void gtk_widget_push_colormap GdkColormap* cmap")
;;; 3.9.0 (CFNC "void gtk_widget_push_composite_child void")
;;; 3.9.0 (CFNC "void gtk_widget_pop_composite_child void")
;;; (CFNC-gtk2 "void gtk_widget_pop_colormap void")
;(CFNC "void gtk_widget_class_install_style_property GtkWidgetClass* klass GParamSpec* pspec")
;(CFNC "void gtk_widget_class_install_style_property_parser GtkWidgetClass* klass GParamSpec* pspec GtkRcPropertyParser parser")
;(CFNC "void gtk_widget_style_get_property GtkWidget* widget gchar* property_name GValue* value")
;;;;(CFNC "void gtk_widget_style_get_valist GtkWidget* widget gchar* first_property_name va_list var_args")
;;; (CFNC "void gtk_widget_style_get GtkWidget* widget gchar* first_property_name ...")
;;; gtype vals
;;; (CFNC-gtk2 "void gtk_widget_set_default_colormap GdkColormap* colormap")
;;; (CFNC-gtk2 "GtkStyle* gtk_widget_get_default_style void")
;;; (CFNC-gtk2 "GdkColormap* gtk_widget_get_default_colormap void")
;;; (CFNC-gtk2 "GdkVisual* gtk_widget_get_default_visual void")
(CFNC "void gtk_widget_set_direction GtkWidget* widget GtkTextDirection dir")
(CFNC "GtkTextDirection gtk_widget_get_direction GtkWidget* widget")
(CFNC "void gtk_widget_set_default_direction GtkTextDirection dir")
(CFNC "GtkTextDirection gtk_widget_get_default_direction void")
;;; (CFNC-gtk2 "void gtk_widget_shape_combine_mask GtkWidget* widget GdkBitmap* @shape_mask gint offset_x gint offset_y")
;;; (CFNC-gtk2 "void gtk_widget_reset_shapes GtkWidget* widget")
;;; ;;; (CFNC-gtk2 "void gtk_widget_path GtkWidget* widget guint* path_length gchar** [path] gchar** [path_reversed]")
;;; ;;; (CFNC-gtk2 "void gtk_widget_class_path GtkWidget* widget guint* path_length gchar** [path] gchar** [path_reversed]")
;;; (CFNC-gtk2 "GtkRequisition* gtk_requisition_copy GtkRequisition* requisition")
;;; (CFNC-gtk2 "void gtk_requisition_free GtkRequisition* requisition")
;;;(CFNC "GtkWidgetAuxInfo* _gtk_widget_get_aux_info GtkWidget* widget gboolean create")
;(CFNC "void gtk_decorated_window_init GtkWindow* window")
;(CFNC "void gtk_decorated_window_calculate_frame_size GtkWindow* window")
;(CFNC "void gtk_decorated_window_set_title GtkWindow* window gchar* title")
;(CFNC "void gtk_decorated_window_move_resize_window GtkWindow* window gint x gint y gint width gint height")
(CFNC "gboolean gtk_widget_can_activate_accel GtkWidget* widget guint signal_id")
(CFNC "gboolean gtk_window_is_active GtkWindow* window")
;;; 3.90.0 (CFNC "gboolean gtk_window_has_toplevel_focus GtkWindow* window")
(CCAST "GTK_WINDOW(obj)" "GtkWindow*")
(CCHK "GTK_IS_WINDOW(obj)" "GtkWindow*")
;;;;(CFNC "GType gtk_window_get_type void")
(CFNC "GtkWidget* gtk_window_new GtkWindowType type")
(CFNC "void gtk_window_set_title GtkWindow* window gchar* title")
(CFNC "void gtk_window_set_auto_startup_notification gboolean setting")
(CFNC "gchar* gtk_window_get_title GtkWindow* window")
;;; 3.22.2 (CFNC "void gtk_window_set_wmclass GtkWindow* window gchar* wmclass_name gchar* wmclass_class")
;;; 3.96.0 (CFNC "void gtk_window_set_role GtkWindow* window gchar* role")
;;; 3.96.0 (CFNC "gchar* gtk_window_get_role GtkWindow* window")
(CFNC "void gtk_window_add_accel_group GtkWindow* window GtkAccelGroup* accel_group")
(CFNC "void gtk_window_remove_accel_group GtkWindow* window GtkAccelGroup* accel_group")
(CFNC "void gtk_window_set_position GtkWindow* window GtkWindowPosition position")
;;; 3.96.0 (CFNC "gboolean gtk_window_activate_focus GtkWindow* window")
(CFNC "void gtk_window_set_focus GtkWindow* window GtkWidget* @focus")
(CFNC "GtkWidget* gtk_window_get_focus GtkWindow* window")
;;; 3.96.0 (CFNC "void gtk_window_set_default GtkWindow* window GtkWidget* @default_widget")
;;; 3.96.0 (CFNC "gboolean gtk_window_activate_default GtkWindow* window")
(CFNC "void gtk_window_set_transient_for GtkWindow* window GtkWindow* @parent")
(CFNC "GtkWindow* gtk_window_get_transient_for GtkWindow* window")
(CFNC "void gtk_window_set_destroy_with_parent GtkWindow* window gboolean setting")
(CFNC "gboolean gtk_window_get_destroy_with_parent GtkWindow* window")
(CFNC "void gtk_window_set_resizable GtkWindow* window gboolean resizable")
(CFNC "gboolean gtk_window_get_resizable GtkWindow* window")
;;; 3.96.0 (CFNC "void gtk_window_set_gravity GtkWindow* window GdkGravity gravity")
;;; 3.96.0 (CFNC "GdkGravity gtk_window_get_gravity GtkWindow* window")
;;; (CFNC-gtk2 "void gtk_window_set_has_frame GtkWindow* window gboolean setting")
;;; (CFNC-gtk2 "gboolean gtk_window_get_has_frame GtkWindow* window")
;;; (CFNC-gtk2 "void gtk_window_set_frame_dimensions GtkWindow* window gint left gint top gint right gint bottom")
;;; (CFNC-gtk2 "void gtk_window_get_frame_dimensions GtkWindow* window gint* [left] gint* [top] gint* [right] gint* [bottom]")
(CFNC "void gtk_window_set_decorated GtkWindow* window gboolean setting")
(CFNC "gboolean gtk_window_get_decorated GtkWindow* window")
;;; 3.96.0 (CFNC "void gtk_window_set_icon_list GtkWindow* window GList* @list")
;;; 3.93.0 (CFNC "GList* gtk_window_get_icon_list GtkWindow* window")
;;; 3.93.0 (CFNC "void gtk_window_set_icon GtkWindow* window GdkPixbuf* @icon")
;;; 3.93.0 (CFNC "GdkPixbuf* gtk_window_get_icon GtkWindow* window")
;;; 3.93.0 (CFNC "void gtk_window_set_default_icon_list GList* @list")
;;; 3.96.0 (CFNC "GList* gtk_window_get_default_icon_list void")
(CFNC "void gtk_window_set_modal GtkWindow* window gboolean modal")
(CFNC "gboolean gtk_window_get_modal GtkWindow* window")
(CFNC "GList* gtk_window_list_toplevels void")
(CFNC "void gtk_window_add_mnemonic GtkWindow* window guint keyval GtkWidget* target")
(CFNC "void gtk_window_remove_mnemonic GtkWindow* window guint keyval GtkWidget* target")
(CFNC "gboolean gtk_window_mnemonic_activate GtkWindow* window guint keyval GdkModifierType modifier")
(CFNC "void gtk_window_set_mnemonic_modifier GtkWindow* window GdkModifierType modifier")
(CFNC "GdkModifierType gtk_window_get_mnemonic_modifier GtkWindow* window")
(CFNC "void gtk_window_present GtkWindow* window")
(CFNC "void gtk_window_iconify GtkWindow* window")
(CFNC "void gtk_window_deiconify GtkWindow* window")
(CFNC "void gtk_window_stick GtkWindow* window")
(CFNC "void gtk_window_unstick GtkWindow* window")
(CFNC "void gtk_window_maximize GtkWindow* window")
(CFNC "void gtk_window_unmaximize GtkWindow* window")
(CFNC "void gtk_window_begin_move_drag GtkWindow* window gint button gint root_x gint root_y guint32 timestamp")
(CFNC "void gtk_window_set_default_size GtkWindow* window gint width gint height")
(CFNC "void gtk_window_get_default_size GtkWindow* window gint* [width] gint* [height]")
(CFNC "void gtk_window_resize GtkWindow* window gint width gint height")
(CFNC "void gtk_window_get_size GtkWindow* window gint* [width] gint* [height]")
;;; 3.96.0 (CFNC "void gtk_window_move GtkWindow* window gint x gint y")
;;; 3.96.0 (CFNC "void gtk_window_get_position GtkWindow* window gint* [root_x] gint* [root_y]")
;;; 3.19.8 (CFNC "gboolean gtk_window_parse_geometry GtkWindow* window gchar* geometry")
;;; (CFNC "void gtk_window_reshow_with_initial_size GtkWindow* window")

;;; (CFNC-gtk2 "void gtk_window_remove_embedded_xid GtkWindow* window guint xid")
;;; (CFNC-gtk2 "void gtk_window_add_embedded_xid GtkWindow* window guint xid")

;;;;(CFNC "GType pango_color_get_type void")
(CFNC "PangoColor* pango_color_copy PangoColor* src")
(CFNC "void pango_color_free PangoColor* color")
(CFNC "gboolean pango_color_parse PangoColor* color char* spec")
(CINT "PANGO_ATTR_INVALID" "PangoAttrType")
(CINT "PANGO_ATTR_LANGUAGE" "PangoAttrType")
(CINT "PANGO_ATTR_FAMILY" "PangoAttrType")
(CINT "PANGO_ATTR_STYLE" "PangoAttrType")
(CINT "PANGO_ATTR_WEIGHT" "PangoAttrType")
(CINT "PANGO_ATTR_VARIANT" "PangoAttrType")
(CINT "PANGO_ATTR_STRETCH" "PangoAttrType")
(CINT "PANGO_ATTR_SIZE" "PangoAttrType")
(CINT "PANGO_ATTR_FONT_DESC" "PangoAttrType")
(CINT "PANGO_ATTR_FOREGROUND" "PangoAttrType")
(CINT "PANGO_ATTR_BACKGROUND" "PangoAttrType")
(CINT "PANGO_ATTR_UNDERLINE" "PangoAttrType")
(CINT "PANGO_ATTR_STRIKETHROUGH" "PangoAttrType")
(CINT "PANGO_ATTR_RISE" "PangoAttrType")
(CINT "PANGO_ATTR_SHAPE" "PangoAttrType")
(CINT "PANGO_ATTR_SCALE" "PangoAttrType")
(CINT "PANGO_UNDERLINE_NONE" "PangoUnderline")
(CINT "PANGO_UNDERLINE_SINGLE" "PangoUnderline")
(CINT "PANGO_UNDERLINE_DOUBLE" "PangoUnderline")
(CINT "PANGO_UNDERLINE_LOW" "PangoUnderline")
(CFNC "PangoAttrType pango_attr_type_register gchar* name")
(CFNC "PangoAttribute* pango_attribute_copy PangoAttribute* attr") ; FREE
(CFNC "void pango_attribute_destroy PangoAttribute* attr")
(CFNC "gboolean pango_attribute_equal PangoAttribute* attr1 PangoAttribute* attr2")
(CFNC "PangoAttribute* pango_attr_language_new PangoLanguage* language")
(CFNC "PangoAttribute* pango_attr_family_new char* family")
(CFNC "PangoAttribute* pango_attr_foreground_new guint16 red guint16 green guint16 blue")
(CFNC "PangoAttribute* pango_attr_background_new guint16 red guint16 green guint16 blue")
(CFNC "PangoAttribute* pango_attr_size_new int size")
(CFNC "PangoAttribute* pango_attr_style_new PangoStyle style")
(CFNC "PangoAttribute* pango_attr_weight_new PangoWeight weight")
(CFNC "PangoAttribute* pango_attr_variant_new PangoVariant variant")
(CFNC "PangoAttribute* pango_attr_stretch_new PangoStretch stretch")
(CFNC "PangoAttribute* pango_attr_font_desc_new PangoFontDescription* desc")
(CFNC "PangoAttribute* pango_attr_underline_new PangoUnderline underline")
(CFNC "PangoAttribute* pango_attr_strikethrough_new gboolean strikethrough")
(CFNC "PangoAttribute* pango_attr_rise_new int rise")
(CFNC "PangoAttribute* pango_attr_shape_new PangoRectangle* ink_rect PangoRectangle* logical_rect") ; FREE
(CFNC "PangoAttribute* pango_attr_scale_new double scale_factor")
;;;;(CFNC "GType pango_attr_list_get_type void")
(CFNC "PangoAttrList* pango_attr_list_new void") ; FREE
;;; (CFNC "void pango_attr_list_ref PangoAttrList* list")
;;; changed in 1.9.1
(CFNC "void pango_attr_list_unref PangoAttrList* list")
(CFNC "PangoAttrList* pango_attr_list_copy PangoAttrList* list")
(CFNC "void pango_attr_list_insert PangoAttrList* list PangoAttribute* attr")
(CFNC "void pango_attr_list_insert_before PangoAttrList* list PangoAttribute* attr")
(CFNC "void pango_attr_list_change PangoAttrList* list PangoAttribute* attr")
(CFNC "void pango_attr_list_splice PangoAttrList* list PangoAttrList* other gint pos gint len")
(CFNC "PangoAttrIterator* pango_attr_list_get_iterator PangoAttrList* list")
(CFNC "void pango_attr_iterator_range PangoAttrIterator* iterator gint* [start] gint* [end]")
(CFNC "gboolean pango_attr_iterator_next PangoAttrIterator* iterator")
(CFNC "PangoAttrIterator* pango_attr_iterator_copy PangoAttrIterator* iterator")
(CFNC "void pango_attr_iterator_destroy PangoAttrIterator* iterator")
(CFNC "PangoAttribute* pango_attr_iterator_get PangoAttrIterator* iterator PangoAttrType type")
(CFNC "void pango_attr_iterator_get_font PangoAttrIterator* iterator PangoFontDescription* desc PangoLanguage** [language] GSList** [extra_attrs]")
(CFNC "gboolean pango_parse_markup char* markup_text int length gunichar accel_marker PangoAttrList** attr_list char** text gunichar* accel_char GError** [error]")
;;; 30-Oct-19 (CFNC "void pango_break gchar* text int length PangoAnalysis* analysis PangoLogAttr* attrs int attrs_len")
(CFNC "void pango_find_paragraph_boundary gchar* text gint length gint* [paragraph_delimiter_index] gint* [next_paragraph_start]")
(CFNC "void pango_get_log_attrs char* text int length int level PangoLanguage* language PangoLogAttr* log_attrs int attrs_len")
;(CFNC-extra "void pango_default_break gchar* text int length PangoAnalysis* analysis PangoLogAttr* attrs int attrs_len")
(CCAST "PANGO_CONTEXT(object)" "PangoContext*")
;(cdef "PANGO_CONTEXT_CLASS(klass)")
(CCHK "PANGO_IS_CONTEXT(object)" "PangoContext*")
;(cdef "PANGO_CONTEXT_GET_CLASS(obj)")
;;;;(CFNC "GType pango_context_get_type void")
;;; (CFNC "PangoContext* pango_context_new void") ;backend
(CFNC "void pango_context_list_families PangoContext* context PangoFontFamily*** [families] int* [n_families]") ; FREE (families)
(CFNC "PangoFont* pango_context_load_font PangoContext* context PangoFontDescription* desc")
(CFNC "PangoFontset* pango_context_load_fontset PangoContext* context PangoFontDescription* desc PangoLanguage* language")
(CFNC "PangoFontMetrics* pango_context_get_metrics PangoContext* context PangoFontDescription* desc PangoLanguage* language")
(CFNC "void pango_context_set_font_description PangoContext* context PangoFontDescription* desc")
(CFNC "PangoFontDescription* pango_context_get_font_description PangoContext* context")
(CFNC "PangoLanguage* pango_context_get_language PangoContext* context")
(CFNC "void pango_context_set_language PangoContext* context PangoLanguage* language")
(CFNC "void pango_context_set_base_dir PangoContext* context PangoDirection direction")
(CFNC "PangoDirection pango_context_get_base_dir PangoContext* context")
(CFNC "GList* pango_itemize PangoContext* context char* text int start_index int length PangoAttrList* attrs PangoAttrIterator* cached_iter")
(CINT "PANGO_COVERAGE_NONE" "PangoCoverageLevel")
(CINT "PANGO_COVERAGE_FALLBACK" "PangoCoverageLevel")
(CINT "PANGO_COVERAGE_APPROXIMATE" "PangoCoverageLevel")
(CINT "PANGO_COVERAGE_EXACT" "PangoCoverageLevel")
(CFNC "PangoCoverage* pango_coverage_new void")
(CFNC "PangoCoverage* pango_coverage_ref PangoCoverage* coverage")
(CFNC "void pango_coverage_unref PangoCoverage* coverage")
(CFNC "PangoCoverage* pango_coverage_copy PangoCoverage* coverage")
(CFNC "PangoCoverageLevel pango_coverage_get PangoCoverage* coverage int index")
(CFNC "void pango_coverage_set PangoCoverage* coverage int index PangoCoverageLevel level")
;;; 30-Oct-19 (CFNC "void pango_coverage_max PangoCoverage* coverage PangoCoverage* other")
;;; 30-Oct-19 (CFNC "void pango_coverage_to_bytes PangoCoverage* coverage guchar** [bytes] int* [n_bytes]") ; FREE (bytes)
;;; 30-Oct-19 (CFNC "PangoCoverage* pango_coverage_from_bytes guchar* bytes int n_bytes") ; FREE
;(CSTR-extra "PANGO_ENGINE_TYPE_LANG")
;(CSTR-extra "PANGO_ENGINE_TYPE_SHAPE")
;(CSTR-extra "PANGO_RENDER_TYPE_NONE")
;(CFNC "void script_engine_list PangoEngineInfo** [engines] int* [n_engines]")
;(CFNC "PangoEngine* script_engine_load char* id")
;(CFNC "void script_engine_unload PangoEngine* engine")
;;;;(CFNC "GType pango_attr_type_get_type void")
;;;;(CFNC "GType pango_underline_get_type void")
;;;;(CFNC "GType pango_coverage_level_get_type void")
;;;;(CFNC "GType pango_style_get_type void")
;;;;(CFNC "GType pango_variant_get_type void")
;;;;(CFNC "GType pango_weight_get_type void")
;;;;(CFNC "GType pango_stretch_get_type void")
;;;;(CFNC "GType pango_font_mask_get_type void")
;;;;(CFNC "GType pango_alignment_get_type void")
;;;;(CFNC "GType pango_wrap_mode_get_type void")
;;;;(CFNC "GType pango_tab_align_get_type void")
;;;;(CFNC "GType pango_direction_get_type void")
(CINT "PANGO_STYLE_NORMAL" "PangoStyle")
(CINT "PANGO_STYLE_OBLIQUE" "PangoStyle")
(CINT "PANGO_STYLE_ITALIC" "PangoStyle")
(CINT "PANGO_VARIANT_NORMAL" "PangoVariant")
(CINT "PANGO_VARIANT_SMALL_CAPS" "PangoVariant")
(CINT "PANGO_WEIGHT_ULTRALIGHT" "PangoWeight")
(CINT "PANGO_WEIGHT_LIGHT" "PangoWeight")
(CINT "PANGO_WEIGHT_NORMAL" "PangoWeight")
(CINT "PANGO_WEIGHT_BOLD" "PangoWeight")
(CINT "PANGO_WEIGHT_ULTRABOLD" "PangoWeight")
(CINT "PANGO_WEIGHT_HEAVY" "PangoWeight")
(CINT "PANGO_STRETCH_ULTRA_CONDENSED" "PangoStretch")
(CINT "PANGO_STRETCH_EXTRA_CONDENSED" "PangoStretch")
(CINT "PANGO_STRETCH_CONDENSED" "PangoStretch")
(CINT "PANGO_STRETCH_SEMI_CONDENSED" "PangoStretch")
(CINT "PANGO_STRETCH_NORMAL" "PangoStretch")
(CINT "PANGO_STRETCH_SEMI_EXPANDED" "PangoStretch")
(CINT "PANGO_STRETCH_EXPANDED" "PangoStretch")
(CINT "PANGO_STRETCH_EXTRA_EXPANDED" "PangoStretch")
(CINT "PANGO_STRETCH_ULTRA_EXPANDED" "PangoStretch")
(CINT "PANGO_FONT_MASK_FAMILY" "PangoFontMask")
(CINT "PANGO_FONT_MASK_STYLE" "PangoFontMask")
(CINT "PANGO_FONT_MASK_VARIANT" "PangoFontMask")
(CINT "PANGO_FONT_MASK_WEIGHT" "PangoFontMask")
(CINT "PANGO_FONT_MASK_STRETCH" "PangoFontMask")
(CINT "PANGO_FONT_MASK_SIZE" "PangoFontMask")
(CDBL "PANGO_SCALE_XX_SMALL")
(CDBL "PANGO_SCALE_X_SMALL")
(CDBL "PANGO_SCALE_SMALL")
(CDBL "PANGO_SCALE_MEDIUM")
(CDBL "PANGO_SCALE_LARGE")
(CDBL "PANGO_SCALE_X_LARGE")
(CDBL "PANGO_SCALE_XX_LARGE")
;;;;(CFNC "GType pango_font_description_get_type void")
(CFNC "PangoFontDescription* pango_font_description_new void")
(CFNC "PangoFontDescription* pango_font_description_copy PangoFontDescription* desc") ; FREE with pango_font_description_free
(CFNC "PangoFontDescription* pango_font_description_copy_static PangoFontDescription* desc") ; FREE with pango_font_description_free
(CFNC "guint pango_font_description_hash PangoFontDescription* desc")
(CFNC "gboolean pango_font_description_equal PangoFontDescription* desc1 PangoFontDescription* desc2")
(CFNC "void pango_font_description_free PangoFontDescription* desc")
(CFNC "void pango_font_descriptions_free PangoFontDescription** descs int n_descs")
(CFNC "void pango_font_description_set_family PangoFontDescription* desc char* family")
(CFNC "void pango_font_description_set_family_static PangoFontDescription* desc char* family")
(CFNC "char* pango_font_description_get_family PangoFontDescription* desc")
(CFNC "void pango_font_description_set_style PangoFontDescription* desc PangoStyle style")
(CFNC "PangoStyle pango_font_description_get_style PangoFontDescription* desc")
(CFNC "void pango_font_description_set_variant PangoFontDescription* desc PangoVariant variant")
(CFNC "PangoVariant pango_font_description_get_variant PangoFontDescription* desc")
(CFNC "void pango_font_description_set_weight PangoFontDescription* desc PangoWeight weight")
(CFNC "PangoWeight pango_font_description_get_weight PangoFontDescription* desc")
(CFNC "void pango_font_description_set_stretch PangoFontDescription* desc PangoStretch stretch")
(CFNC "PangoStretch pango_font_description_get_stretch PangoFontDescription* desc")
(CFNC "void pango_font_description_set_size PangoFontDescription* desc gint size")
(CFNC "gint pango_font_description_get_size PangoFontDescription* desc")
(CFNC "PangoFontMask pango_font_description_get_set_fields PangoFontDescription* desc")
(CFNC "void pango_font_description_unset_fields PangoFontDescription* desc PangoFontMask to_unset")
(CFNC "void pango_font_description_merge PangoFontDescription* desc PangoFontDescription* desc_to_merge gboolean replace_existing")
(CFNC "void pango_font_description_merge_static PangoFontDescription* desc PangoFontDescription* desc_to_merge gboolean replace_existing")
(CFNC "gboolean pango_font_description_better_match PangoFontDescription* desc PangoFontDescription* old_match PangoFontDescription* new_match")
(CFNC "PangoFontDescription* pango_font_description_from_string char* str")
(CFNC "char* pango_font_description_to_string PangoFontDescription* desc" 'free)
(CFNC "char* pango_font_description_to_filename PangoFontDescription* desc" 'free)
;;;;(CFNC "GType pango_font_metrics_get_type void")
(CFNC "PangoFontMetrics* pango_font_metrics_ref PangoFontMetrics* metrics")
(CFNC "void pango_font_metrics_unref PangoFontMetrics* metrics")
(CFNC "int pango_font_metrics_get_ascent PangoFontMetrics* metrics")
(CFNC "int pango_font_metrics_get_descent PangoFontMetrics* metrics")
(CFNC "int pango_font_metrics_get_approximate_char_width PangoFontMetrics* metrics")
(CFNC "int pango_font_metrics_get_approximate_digit_width PangoFontMetrics* metrics")
;;; (CFNC "PangoFontMetrics* pango_font_metrics_new void") ; backend
(CCAST "PANGO_FONT_FAMILY(object)" "PangoFontFamily*")
(CCHK "PANGO_IS_FONT_FAMILY(object)" "PangoFontFamily*")
;;;;(CFNC "GType pango_font_family_get_type void")
(CFNC "void pango_font_family_list_faces PangoFontFamily* family PangoFontFace*** [faces] int* [n_faces]")
(CFNC "char* pango_font_family_get_name PangoFontFamily* family")
(CCAST "PANGO_FONT_FACE(object)" "PangoFontFace*")
(CCHK "PANGO_IS_FONT_FACE(object)" "PangoFontFace*")
;;;;(CFNC "GType pango_font_face_get_type void")
(CFNC "PangoFontDescription* pango_font_face_describe PangoFontFace* face")
(CFNC "char* pango_font_face_get_face_name PangoFontFace* face")
(CCAST "PANGO_FONT(object)" "PangoFont*")
(CCHK "PANGO_IS_FONT(object)" "PangoFont*")
;;;;(CFNC "GType pango_font_get_type void")
(CFNC "PangoFontDescription* pango_font_describe PangoFont* font")
(CFNC "PangoCoverage* pango_font_get_coverage PangoFont* font PangoLanguage* language")
;(CFNC "PangoEngineShape* pango_font_find_shaper PangoFont* font PangoLanguage* language guint32 ch")
(CFNC "PangoFontMetrics* pango_font_get_metrics PangoFont* font PangoLanguage* language")
(CFNC "void pango_font_get_glyph_extents PangoFont* font PangoGlyph glyph PangoRectangle* ink_rect PangoRectangle* logical_rect")
(CCAST "PANGO_FONT_MAP(object)" "PangoFontMap*")
(CCHK "PANGO_IS_FONT_MAP(object)" "PangoFontMap*")
;;;;(CFNC "GType pango_font_map_get_type void")
(CFNC "PangoFont* pango_font_map_load_font PangoFontMap* fontmap PangoContext* context PangoFontDescription* desc")
(CFNC "PangoFontset* pango_font_map_load_fontset PangoFontMap* fontmap PangoContext* context PangoFontDescription* desc PangoLanguage* language")
(CFNC "void pango_font_map_list_families PangoFontMap* fontmap PangoFontFamily*** [families] int* [n_families]") ; FREE (families)
;;; (CFNC "void pango_context_set_font_map PangoContext* context PangoFontMap* font_map") ;backend
(CFNC "PangoGlyphString* pango_glyph_string_new void")
(CFNC "void pango_glyph_string_set_size PangoGlyphString* string gint new_len")
;;;;(CFNC "GType pango_glyph_string_get_type void")
(CFNC "PangoGlyphString* pango_glyph_string_copy PangoGlyphString* string")
(CFNC "void pango_glyph_string_free PangoGlyphString* string")
(CFNC "void pango_glyph_string_extents PangoGlyphString* glyphs PangoFont* font PangoRectangle* ink_rect PangoRectangle* logical_rect")
(CFNC "void pango_glyph_string_extents_range PangoGlyphString* glyphs int start int end PangoFont* font PangoRectangle* ink_rect PangoRectangle* logical_rect")
(CFNC "void pango_glyph_string_get_logical_widths PangoGlyphString* glyphs char* text int length int embedding_level int* [logical_widths]")
(CFNC "void pango_glyph_string_index_to_x PangoGlyphString* glyphs char* text int length PangoAnalysis* analysis int index gboolean trailing int* [x_pos]")
(CFNC "void pango_glyph_string_x_to_index PangoGlyphString* glyphs char* text int length PangoAnalysis* analysis int x_pos int* [index] int* [trailing]")
(CFNC "void pango_shape gchar* text gint length PangoAnalysis* analysis PangoGlyphString* glyphs")
(CFNC "GList* pango_reorder_items GList* logical_items")
(CFNC "PangoItem* pango_item_new void")
(CFNC "PangoItem* pango_item_copy PangoItem* item")
(CFNC "void pango_item_free PangoItem* item")
(CFNC "PangoItem* pango_item_split PangoItem* orig int split_index int split_offset")
(CINT "PANGO_ALIGN_LEFT" "PangoAlignment")
(CINT "PANGO_ALIGN_CENTER" "PangoAlignment")
(CINT "PANGO_ALIGN_RIGHT" "PangoAlignment")
(CINT "PANGO_WRAP_WORD" "PangoWrapMode")
(CINT "PANGO_WRAP_CHAR" "PangoWrapMode")
(CCAST "PANGO_LAYOUT(object)" "PangoLayout*")
(CCHK "PANGO_IS_LAYOUT(object)" "PangoLayout*")
;;;;(CFNC "GType pango_layout_get_type void")
(CFNC "PangoLayout* pango_layout_new PangoContext* context")
(CFNC "PangoLayout* pango_layout_copy PangoLayout* src")
(CFNC "PangoContext* pango_layout_get_context PangoLayout* layout")
(CFNC "void pango_layout_set_attributes PangoLayout* layout PangoAttrList* attrs")
(CFNC "PangoAttrList* pango_layout_get_attributes PangoLayout* layout")
(CFNC "void pango_layout_set_text PangoLayout* layout char* text int length")
(CFNC "char* pango_layout_get_text PangoLayout* layout")
(CFNC "void pango_layout_set_markup PangoLayout* layout char* markup int length")
(CFNC "void pango_layout_set_markup_with_accel PangoLayout* layout char* markup int length gunichar accel_marker gunichar* accel_char")
(CFNC "void pango_layout_set_font_description PangoLayout* layout PangoFontDescription* desc")
(CFNC "void pango_layout_set_width PangoLayout* layout int width")
(CFNC "int pango_layout_get_width PangoLayout* layout")
(CFNC "void pango_layout_set_wrap PangoLayout* layout PangoWrapMode wrap")
(CFNC "PangoWrapMode pango_layout_get_wrap PangoLayout* layout")
(CFNC "void pango_layout_set_indent PangoLayout* layout int indent")
(CFNC "int pango_layout_get_indent PangoLayout* layout")
(CFNC "void pango_layout_set_spacing PangoLayout* layout int spacing")
(CFNC "int pango_layout_get_spacing PangoLayout* layout")
(CFNC "void pango_layout_set_justify PangoLayout* layout gboolean justify")
(CFNC "gboolean pango_layout_get_justify PangoLayout* layout")
(CFNC "void pango_layout_set_alignment PangoLayout* layout PangoAlignment alignment")
(CFNC "PangoAlignment pango_layout_get_alignment PangoLayout* layout")
(CFNC "void pango_layout_set_tabs PangoLayout* layout PangoTabArray* @tabs")
(CFNC "PangoTabArray* pango_layout_get_tabs PangoLayout* layout")
(CFNC "void pango_layout_set_single_paragraph_mode PangoLayout* layout gboolean setting")
(CFNC "gboolean pango_layout_get_single_paragraph_mode PangoLayout* layout")
(CFNC "void pango_layout_context_changed PangoLayout* layout")
(CFNC "void pango_layout_get_log_attrs PangoLayout* layout PangoLogAttr** [attrs] gint* [n_attrs]") ; FREE (attrs)
(CFNC "void pango_layout_index_to_pos PangoLayout* layout int index PangoRectangle* pos")
(CFNC "void pango_layout_get_cursor_pos PangoLayout* layout int index PangoRectangle* strong_pos PangoRectangle* weak_pos")
(CFNC "void pango_layout_move_cursor_visually PangoLayout* layout gboolean strong int old_index int old_trailing int direction int* new_index int* new_trailing")
(CFNC "gboolean pango_layout_xy_to_index PangoLayout* layout int x int y int* [index] int* [trailing]")
(CFNC "void pango_layout_get_extents PangoLayout* layout PangoRectangle* ink_rect PangoRectangle* logical_rect")
(CFNC "void pango_layout_get_pixel_extents PangoLayout* layout PangoRectangle* ink_rect PangoRectangle* logical_rect")
(CFNC "void pango_layout_get_size PangoLayout* layout int* [width] int* [height]")
(CFNC "void pango_layout_get_pixel_size PangoLayout* layout int* [width] int* [height]")
(CFNC "int pango_layout_get_line_count PangoLayout* layout")
(CFNC "PangoLayoutLine* pango_layout_get_line PangoLayout* layout int line")
(CFNC "GSList* pango_layout_get_lines PangoLayout* layout")
;;; (CFNC "void pango_layout_line_ref PangoLayoutLine* line")
;;; changed 1.9 or thereabouts
(CFNC "void pango_layout_line_unref PangoLayoutLine* line")
(CFNC "gboolean pango_layout_line_x_to_index PangoLayoutLine* line int x_pos int* [index] int* [trailing]")
(CFNC "void pango_layout_line_index_to_x PangoLayoutLine* line int index gboolean trailing int* [x_pos]")
(CFNC "void pango_layout_line_get_x_ranges PangoLayoutLine* line int start_index int end_index int** [ranges] int* [n_ranges]") ; FREE (ranges)
(CFNC "void pango_layout_line_get_extents PangoLayoutLine* line PangoRectangle* ink_rect PangoRectangle* logical_rect")
(CFNC "void pango_layout_line_get_pixel_extents PangoLayoutLine* layout_line PangoRectangle* ink_rect PangoRectangle* logical_rect")
(CFNC "PangoLayoutIter* pango_layout_get_iter PangoLayout* layout")
(CFNC "void pango_layout_iter_free PangoLayoutIter* iter")
(CFNC "int pango_layout_iter_get_index PangoLayoutIter* iter")
(CFNC "PangoLayoutRun* pango_layout_iter_get_run PangoLayoutIter* iter")
(CFNC "PangoLayoutLine* pango_layout_iter_get_line PangoLayoutIter* iter")
(CFNC "gboolean pango_layout_iter_at_last_line PangoLayoutIter* iter")
(CFNC "gboolean pango_layout_iter_next_char PangoLayoutIter* iter")
(CFNC "gboolean pango_layout_iter_next_cluster PangoLayoutIter* iter")
(CFNC "gboolean pango_layout_iter_next_run PangoLayoutIter* iter")
(CFNC "gboolean pango_layout_iter_next_line PangoLayoutIter* iter")
(CFNC "void pango_layout_iter_get_char_extents PangoLayoutIter* iter PangoRectangle* logical_rect")
(CFNC "void pango_layout_iter_get_cluster_extents PangoLayoutIter* iter PangoRectangle* ink_rect PangoRectangle* logical_rect")
(CFNC "void pango_layout_iter_get_run_extents PangoLayoutIter* iter PangoRectangle* ink_rect PangoRectangle* logical_rect")
(CFNC "void pango_layout_iter_get_line_extents PangoLayoutIter* iter PangoRectangle* ink_rect PangoRectangle* logical_rect")
(CFNC "void pango_layout_iter_get_line_yrange PangoLayoutIter* iter int* [y0] int* [y1]")
(CFNC "void pango_layout_iter_get_layout_extents PangoLayoutIter* iter PangoRectangle* ink_rect PangoRectangle* logical_rect")
(CFNC "int pango_layout_iter_get_baseline PangoLayoutIter* iter")
;(CFNC "int PANGO_ASCENT PangoRectangle rect)")
;(CFNC "int PANGO_DESCENT PangoRectangle rect)")
;(CFNC "int PANGO_LBEARING PangoRectangle rect)")
;(CFNC "int PANGO_RBEARING PangoRectangle rect)")
(CINT "PANGO_DIRECTION_LTR" "PangoDirection")
(CINT "PANGO_DIRECTION_RTL" "PangoDirection")
(CINT "PANGO_DIRECTION_TTB_LTR" "PangoDirection")
(CINT "PANGO_DIRECTION_TTB_RTL" "PangoDirection")
;;;;(CFNC "GType pango_language_get_type void")
(CFNC "PangoLanguage* pango_language_from_string char* language")
(CFNC "gboolean pango_language_matches PangoLanguage* language char* range_list")


;;; are these of any use?? 
;;; 2.91.6 (CLNG "GTK_TYPE_ACCEL_GROUP")
;;; 2.91.6 (CLNG "GTK_TYPE_ACCEL_LABEL")
;;; 2.91.6 (CLNG "GTK_TYPE_ACCESSIBLE")
;;; 2.91.6 (CLNG "GTK_TYPE_ADJUSTMENT")
;;; 2.91.6 (CLNG "GTK_TYPE_ALIGNMENT")
;;; 2.91.6 (CLNG "GTK_TYPE_ARROW")
;;; 2.91.6 (CLNG "GTK_TYPE_ASPECT_FRAME")
;;; 2.91.6 (CLNG "GTK_TYPE_BUTTON_BOX")
;;; 2.91.6 (CLNG "GTK_TYPE_BIN")
;;; 2.91.6 (CLNG "GTK_TYPE_BOX")
;;; 2.91.6 (CLNG "GTK_TYPE_BUTTON")
;;; 2.91.6 (CLNG "GTK_TYPE_CALENDAR")
;;; 2.91.6 (CLNG "GTK_TYPE_CELL_EDITABLE")
;;; 2.91.6 (CLNG "GTK_TYPE_CELL_RENDERER")
;;; 2.91.6 (CLNG "GTK_TYPE_CELL_RENDERER_PIXBUF")
;;; 2.91.6 (CLNG "GTK_TYPE_CELL_RENDERER_TEXT")
;;; 2.91.6 (CLNG "GTK_TYPE_CELL_RENDERER_TOGGLE")
;;; 2.91.6 (CLNG "GTK_TYPE_CHECK_BUTTON")
;;; 2.91.6 (CLNG "GTK_TYPE_CHECK_MENU_ITEM")
;;; 2.91.6 (CLNG "GTK_TYPE_COLOR_SELECTION_DIALOG")
;;; 2.91.6 (CLNG "GTK_TYPE_COLOR_SELECTION")
;;; 2.91.6 ;;; out 2.3 (CLNG "GTK_TYPE_COMBO")
;;; 2.91.6 (CLNG "GTK_TYPE_CONTAINER")
;;; 2.91.6 ;;; (CLNG "GTK_TYPE_CURVE")
;;; 2.91.6 (CLNG "GTK_TYPE_DIALOG")
;;; 2.91.6 (CLNG "GTK_TYPE_DRAWING_AREA")
;;; 2.91.6 (CLNG "GTK_TYPE_EDITABLE")
;;; 2.91.6 (CLNG "GTK_TYPE_ENTRY")
;;; 2.91.6 (CLNG "GTK_TYPE_EVENT_BOX")
;;; 2.91.6 ;;; (CLNG "GTK_TYPE_FILE_SELECTION")
;;; 2.91.6 (CLNG "GTK_TYPE_FIXED")
;;; 2.91.6 (CLNG "GTK_TYPE_FONT_SELECTION")
;;; 2.91.6 (CLNG "GTK_TYPE_FONT_SELECTION_DIALOG")
;;; 2.91.6 (CLNG "GTK_TYPE_FRAME")
;;; 2.91.6 ;;; (CLNG "GTK_TYPE_GAMMA_CURVE")
;;; 2.91.6 (CLNG "GTK_TYPE_HANDLE_BOX")
;;; 2.91.6 (CLNG "GTK_TYPE_HBUTTON_BOX")
;;; 2.91.6 (CLNG "GTK_TYPE_HBOX")
;;; 2.91.6 (CLNG "GTK_TYPE_HPANED")
;;; 2.91.6 ;;; 2.91.5 (CLNG "GTK_TYPE_HRULER")
;;; 2.91.6 (CLNG "GTK_TYPE_HSCALE")
;;; 2.91.6 (CLNG "GTK_TYPE_HSCROLLBAR")
;;; 2.91.6 (CLNG "GTK_TYPE_HSEPARATOR")
;;; 2.91.6 ;;; out 2.3 (CLNG "GTK_TYPE_ICON_FACTORY")
;;; 2.91.6 (CLNG "GTK_TYPE_IMAGE")
;;; 2.91.6 (CLNG "GTK_TYPE_IMAGE_MENU_ITEM")
;;; 2.91.6 (CLNG "GTK_TYPE_IM_CONTEXT")
;;; 2.91.6 (CLNG "GTK_TYPE_IM_CONTEXT_SIMPLE")
;;; 2.91.6 (CLNG "GTK_TYPE_IM_MULTICONTEXT")
;;; 2.91.6 ;;; (CLNG "GTK_TYPE_INPUT_DIALOG")
;;; 2.91.6 (CLNG "GTK_TYPE_INVISIBLE")
;;; 2.91.6 ;;; out 2.3 (CLNG "GTK_TYPE_ITEM_FACTORY")
;;; 2.91.6 ;;; 2.90.7 (CLNG "GTK_TYPE_ITEM")
;;; 2.91.6 (CLNG "GTK_TYPE_LABEL")
;;; 2.91.6 (CLNG "GTK_TYPE_LAYOUT")
;;; 2.91.6 (CLNG "GTK_TYPE_LIST_STORE")
;;; 2.91.6 (CLNG "GTK_TYPE_MENU_BAR")
;;; 2.91.6 (CLNG "GTK_TYPE_MENU")
;;; 2.91.6 (CLNG "GTK_TYPE_MENU_ITEM")
;;; 2.91.6 (CLNG "GTK_TYPE_MENU_SHELL")
;;; 2.91.6 (CLNG "GTK_TYPE_MESSAGE_DIALOG")
;;; 2.91.6 (CLNG "GTK_TYPE_MISC")
;;; 2.91.6 (CLNG "GTK_TYPE_NOTEBOOK")
;;; 2.91.6 ;;; 2.91.0 (CLNG "GTK_TYPE_OBJECT")
;;; 2.91.6 ;;; out 2.3 (CLNG "GTK_TYPE_OPTION_MENU")
;;; 2.91.6 (CLNG "GTK_TYPE_PANED")
;;; 2.91.6 (CLNG "GTK_TYPE_PLUG")
;;; 2.91.6 (CLNG "GTK_TYPE_PROGRESS_BAR")
;;; 2.91.6 (CLNG "GTK_TYPE_RADIO_BUTTON")
;;; 2.91.6 (CLNG "GTK_TYPE_RADIO_MENU_ITEM")
;;; 2.91.6 (CLNG "GTK_TYPE_RANGE")
;;; 2.91.6 (CLNG "GTK_TYPE_RC_STYLE")
;;; 2.91.6 ;;; 2.91.5 (CLNG "GTK_TYPE_RULER")
;;; 2.91.6 (CLNG "GTK_TYPE_SCALE")
;;; 2.91.6 (CLNG "GTK_TYPE_SCROLLBAR")
;;; 2.91.6 (CLNG "GTK_TYPE_SCROLLED_WINDOW")
;;; 2.91.6 (CLNG "GTK_TYPE_SEPARATOR")
;;; 2.91.6 (CLNG "GTK_TYPE_SEPARATOR_MENU_ITEM")
;;; 2.91.6 ;(CLNG "GTK_TYPE_SETTINGS")
;;; 2.91.6 (CLNG "GTK_TYPE_SIZE_GROUP")
;;; 2.91.6 (CLNG "GTK_TYPE_SOCKET")
;;; 2.91.6 (CLNG "GTK_TYPE_SPIN_BUTTON")
;;; 2.91.6 (CLNG "GTK_TYPE_STATUSBAR")
;;; 2.91.6 (CLNG "GTK_TYPE_STYLE")
;;; 2.91.6 (CLNG "GTK_TYPE_TABLE")
;;; 2.91.6 (CLNG "GTK_TYPE_TEAROFF_MENU_ITEM")
;;; 2.91.6 (CLNG "GTK_TYPE_TEXT_BUFFER")
;;; 2.91.6 (CLNG "GTK_TYPE_TEXT_CHILD_ANCHOR")
;;; 2.91.6 (CLNG "GTK_TYPE_TEXT_MARK")
;;; 2.91.6 (CLNG "GTK_TYPE_TEXT_TAG")
;;; 2.91.6 (CLNG "GTK_TYPE_TEXT_TAG_TABLE")
;;; 2.91.6 (CLNG "GTK_TYPE_TEXT_VIEW")
;;; 2.91.6 (CLNG "GTK_TYPE_TOGGLE_BUTTON")
;;; 2.91.6 (CLNG "GTK_TYPE_TOOLBAR")
;;; 2.91.6 ;;; (CLNG "GTK_TYPE_TOOLTIPS")
;;; 2.91.6 (CLNG "GTK_TYPE_TREE_DRAG_SOURCE")
;;; 2.91.6 (CLNG "GTK_TYPE_TREE_DRAG_DEST")
;;; 2.91.6 (CLNG "GTK_TYPE_TREE_MODEL")
;;; 2.91.6 (CLNG "GTK_TYPE_TREE_MODEL_SORT")
;;; 2.91.6 (CLNG "GTK_TYPE_TREE_SELECTION")
;;; 2.91.6 (CLNG "GTK_TYPE_TREE_SORTABLE")
;;; 2.91.6 (CLNG "GTK_TYPE_TREE_STORE")
;;; 2.91.6 (CLNG "GTK_TYPE_TREE_VIEW_COLUMN")
;;; 2.91.6 (CLNG "GTK_TYPE_TREE_VIEW")
;;; 2.91.6 (CLNG "GTK_TYPE_VBUTTON_BOX")
;;; 3.1.6 ;;; 2.91.6 (CLNG "GTK_TYPE_VBOX")
;;; 2.91.6 (CLNG "GTK_TYPE_VIEWPORT")
;;; 2.91.6 (CLNG "GTK_TYPE_VPANED")
;;; 2.91.6 ;;; 2.91.5 (CLNG "GTK_TYPE_VRULER")
;;; 2.91.6 (CLNG "GTK_TYPE_VSCALE")
;;; 2.91.6 (CLNG "GTK_TYPE_VSCROLLBAR")
;;; 2.91.6 (CLNG "GTK_TYPE_VSEPARATOR")
;;; 2.91.6 (CLNG "GTK_TYPE_WIDGET")
;;; 2.91.6 (CLNG "GTK_TYPE_WINDOW")
;;; 2.91.6 (CLNG "GTK_TYPE_WINDOW_GROUP")
;;; 2.91.6 ;;; 2.91.0 (CLNG "GDK_TYPE_COLORMAP")
;;; 2.91.6 (CLNG "GDK_TYPE_COLOR")
;;; 2.91.6 (CLNG "GDK_TYPE_CURSOR")
;;; 2.91.6 (CLNG "GDK_TYPE_DRAG_CONTEXT")
;;; 2.91.6 ;;; (CLNG "GDK_TYPE_DRAWABLE")
;;; 2.91.6 (CLNG "GDK_TYPE_CURSOR_TYPE")
;;; 2.91.6 (CLNG "GDK_TYPE_DRAG_ACTION")
;;; 2.91.6 (CLNG "GDK_TYPE_DRAG_PROTOCOL")
;;; 2.91.6 (CLNG "GDK_TYPE_FILTER_RETURN")
;;; 2.91.6 (CLNG "GDK_TYPE_EVENT_TYPE")
;;; 2.91.6 (CLNG "GDK_TYPE_EVENT_MASK")
;;; 2.91.6 (CLNG "GDK_TYPE_VISIBILITY_STATE")
;;; 2.91.6 (CLNG "GDK_TYPE_SCROLL_DIRECTION")
;;; 2.91.6 (CLNG "GDK_TYPE_NOTIFY_TYPE")
;;; 2.91.6 (CLNG "GDK_TYPE_CROSSING_MODE")
;;; 2.91.6 (CLNG "GDK_TYPE_PROPERTY_STATE")
;;; 2.91.6 (CLNG "GDK_TYPE_WINDOW_STATE")
;;; 2.91.6 (CLNG "GDK_TYPE_SETTING_ACTION")
;;; 2.91.6 ;;; (CLNG "GDK_TYPE_FONT_TYPE")
;;; 2.91.6 ;;; 2.90.6 (CLNG "GDK_TYPE_CAP_STYLE")
;;; 2.91.6 ;;; 2.90.6 (CLNG "GDK_TYPE_FILL")
;;; 2.91.6 ;;; 2.90.6 (CLNG "GDK_TYPE_FUNCTION")
;;; 2.91.6 ;;; 2.90.6 (CLNG "GDK_TYPE_JOIN_STYLE")
;;; 2.91.6 ;;; 2.90.6 (CLNG "GDK_TYPE_LINE_STYLE")
;;; 2.91.6 ;;; 2.90.6 (CLNG "GDK_TYPE_SUBWINDOW_MODE")
;;; 2.91.6 ;;; 2.90.6 (CLNG "GDK_TYPE_GC_VALUES_MASK")
;;; 2.91.6 ;;; 2.90.6 (CLNG "GDK_TYPE_IMAGE_TYPE")
;;; 2.91.6 (CLNG "GDK_TYPE_EXTENSION_MODE")
;;; 2.91.6 (CLNG "GDK_TYPE_INPUT_SOURCE")
;;; 2.91.6 (CLNG "GDK_TYPE_INPUT_MODE")
;;; 2.91.6 (CLNG "GDK_TYPE_AXIS_USE")
;;; 2.91.6 (CLNG "GDK_TYPE_PROP_MODE")
;;; 2.91.6 ;;; (CLNG "GDK_TYPE_FILL_RULE")
;;; 2.91.6 ;;; (CLNG "GDK_TYPE_OVERLAP_TYPE")
;;; 2.91.6 ;;; 2.90.6 (CLNG "GDK_TYPE_RGB_DITHER")
;;; 2.91.6 (CLNG "GDK_TYPE_BYTE_ORDER")
;;; 2.91.6 (CLNG "GDK_TYPE_MODIFIER_TYPE")
;;; 2.91.6 ;;; (CLNG "GDK_TYPE_INPUT_CONDITION")
;;; 2.91.6 (CLNG "GDK_TYPE_STATUS")
;;; 2.91.6 (CLNG "GDK_TYPE_GRAB_STATUS")
;;; 2.91.6 (CLNG "GDK_TYPE_VISUAL_TYPE")
;;; 2.91.6 ;;; (CLNG "GDK_TYPE_WINDOW_CLASS")
;;; 2.91.6 (CLNG "GDK_TYPE_WINDOW_TYPE")
;;; 2.91.6 (CLNG "GDK_TYPE_WINDOW_ATTRIBUTES_TYPE")
;;; 2.91.6 (CLNG "GDK_TYPE_WINDOW_HINTS")
;;; 2.91.6 (CLNG "GDK_TYPE_WINDOW_TYPE_HINT")
;;; 2.91.6 (CLNG "GDK_TYPE_WM_DECORATION")
;;; 2.91.6 (CLNG "GDK_TYPE_WM_FUNCTION")
;;; 2.91.6 (CLNG "GDK_TYPE_GRAVITY")
;;; 2.91.6 (CLNG "GDK_TYPE_WINDOW_EDGE")
;;; 2.91.6 (CLNG "GDK_TYPE_EVENT")
;;; 2.91.6 ;;; 2.90.6 (CLNG "GDK_TYPE_GC")
;;; 2.91.6 (CLNG "GDK_TYPE_RECTANGLE")
;;; 2.91.6 ;;; 2.90.6 (CLNG "GDK_TYPE_IMAGE")
;;; 2.91.6 (CLNG "GDK_TYPE_DEVICE")
;;; 2.91.6 (CLNG "GDK_TYPE_KEYMAP")
;;; 2.91.6 ;;; 2.91.0 (CLNG "GDK_TYPE_PIXMAP")
;;; 2.91.6 (CLNG "GDK_TYPE_VISUAL")
;;; 2.91.6 (CLNG "GDK_TYPE_WINDOW")

(CCAST "G_OBJECT(object)" "GObject*")
(CFNC "GType G_OBJECT_TYPE GObject* object") 
(CCHK "G_IS_OBJECT(object)" "GObject*")

#|
;;; where are these used? gtk_binding_entry_add_signal, but that is commented out
(CLNG "G_TYPE_IO_CONDITION")
;(CLNG "G_TYPE_FUNDAMENTAL(type)")
;(CLNG "G_TYPE_FUNDAMENTAL_MAX")
(CLNG "G_TYPE_INVALID")
(CLNG "G_TYPE_NONE")
(CLNG "G_TYPE_INTERFACE")
(CLNG "G_TYPE_CHAR")
(CLNG "G_TYPE_UCHAR")
(CLNG "G_TYPE_BOOLEAN")
(CLNG "G_TYPE_INT")
(CLNG "G_TYPE_UINT")
(CLNG "G_TYPE_LONG")
(CLNG "G_TYPE_ULONG")
(CLNG "G_TYPE_INT64")
(CLNG "G_TYPE_UINT64")
(CLNG "G_TYPE_ENUM")
(CLNG "G_TYPE_FLAGS")
(CLNG "G_TYPE_FLOAT")
(CLNG "G_TYPE_DOUBLE")
(CLNG "G_TYPE_STRING")
(CLNG "G_TYPE_POINTER")
(CLNG "G_TYPE_BOXED")
(CLNG "G_TYPE_PARAM")
(CLNG "G_TYPE_OBJECT")
|#


;;; 2.90.6 (CFNC "void gdk_draw_pixbuf GdkDrawable* drawable GdkGC* gc GdkPixbuf* pixbuf int src_x int src_y int dest_x int dest_y int width int height GdkRgbDither dither int x_dither int y_dither")
(CFNC "gchar* gtk_tree_model_get_string_from_iter GtkTreeModel* tree_model GtkTreeIter* iter" 'free)
(CFNC "gboolean gtk_tree_model_sort_iter_is_valid GtkTreeModelSort* tree_model_sort GtkTreeIter* iter")
(CFNC "void gtk_tree_view_expand_to_path GtkTreeView* tree_view GtkTreePath* path")
(CFNC "GList* gtk_tree_selection_get_selected_rows GtkTreeSelection* selection GtkTreeModel** model")
(CFNC "int gtk_tree_selection_count_selected_rows GtkTreeSelection* selection")
(CFNC "void gtk_menu_shell_select_first GtkMenuShell* menu_shell gboolean search_sensitive")
(CFNC "int gtk_notebook_get_n_pages GtkNotebook* notebook")
(CFNC "void gtk_list_store_reorder GtkListStore* store int* new_order")
(CFNC "void gtk_list_store_swap GtkListStore* store GtkTreeIter* a GtkTreeIter* b")
(CFNC "void gtk_list_store_move_after GtkListStore* store GtkTreeIter* iter GtkTreeIter* @position")
(CFNC "void gtk_list_store_move_before GtkListStore* store GtkTreeIter* iter GtkTreeIter* @position")
(CFNC "void gtk_tree_store_reorder GtkTreeStore* tree_store GtkTreeIter* parent int* new_order")
(CFNC "void gtk_tree_store_swap GtkTreeStore* tree_store GtkTreeIter* a GtkTreeIter* b")
;;; removed in 2.2 (CFNC "void gtk_tree_store_move GtkTreeStore* tree_store GtkTreeIter* iter GtkTreePath* position")

;;;;(CFNC "GType gdk_display_get_type void")
(CFNC "GdkDisplay* gdk_display_open gchar* display_name")
(CFNC "gchar* gdk_display_get_name GdkDisplay* display")
;;; 3.9.0 (CFNC "int gdk_display_get_n_screens GdkDisplay* display")
;;; 3.20 (CFNC "GdkScreen* gdk_display_get_screen GdkDisplay* display int screen_num")
;;; 3.93.0 (CFNC "GdkScreen* gdk_display_get_default_screen GdkDisplay* display")
;;; 2.99.0 (CFNC "void gdk_display_pointer_ungrab GdkDisplay* display guint32 time")
;;; 2.99.0 (CFNC "void gdk_display_keyboard_ungrab GdkDisplay* display guint32 time")
;;; 2.99.0 (CFNC "gboolean gdk_display_pointer_is_grabbed GdkDisplay* display")
(CFNC "void gdk_display_beep GdkDisplay* display")
(CFNC "void gdk_display_sync GdkDisplay* display")
(CFNC "void gdk_display_close GdkDisplay* display")
;;;; 2-90.1 (CFNC "GList* gdk_display_list_devices GdkDisplay* display")
(CFNC "GdkEvent* gdk_display_get_event GdkDisplay* display")
(CFNC "GdkEvent* gdk_display_peek_event GdkDisplay* display")
(CFNC "void gdk_display_put_event GdkDisplay* display GdkEvent* event")
;;; 2.99.3 (CFNC "void gdk_display_add_client_message_filter GdkDisplay* display GdkAtom message_type GdkFilterFunc func lambda_data @func_info")
;;; 3.93.0 (CFNC "void gdk_display_set_double_click_time GdkDisplay* display guint msec")
(CFNC "GdkDisplay* gdk_display_get_default void")
;;;; (CFNC "GdkDevice* gdk_display_get_core_pointer GdkDisplay* display")
;;; 2.99.0 (CFNC "void gdk_display_get_pointer GdkDisplay* display GdkScreen** [screen] int* [x] int* [y] GdkModifierType* [mask]")
;;; 2.99.0 (CFNC "GdkDisplayPointerHooks* gdk_display_set_pointer_hooks GdkDisplay* display GdkDisplayPointerHooks* new_hooks")
;;;;(CFNC "GType gdk_screen_get_type void")
;;; (CFNC-gtk2 "GdkColormap* gdk_screen_get_default_colormap GdkScreen* screen")
;;; (CFNC-gtk2 "void gdk_screen_set_default_colormap GdkScreen* screen GdkColormap* colormap")
;;; (CFNC-gtk2 "GdkColormap* gdk_screen_get_system_colormap GdkScreen* screen")
;;; 3.89 (CFNC "GdkVisual* gdk_screen_get_system_visual GdkScreen* screen")
;;; 2.90.6 (CFNC "GdkColormap* gdk_screen_get_rgb_colormap GdkScreen* screen")
;;; 2.90.6 (CFNC "GdkVisual* gdk_screen_get_rgb_visual GdkScreen* screen")
;;; 3.93.0 (CFNC "GdkDisplay* gdk_screen_get_display GdkScreen* screen")
;;; 3.22.2 (CFNC "int gdk_screen_get_number GdkScreen* screen")
;;; 3.22.2 (CFNC "int gdk_screen_get_width GdkScreen* screen")
;;; 3.22.2 (CFNC "int gdk_screen_get_height GdkScreen* screen")
;;; 3.22.2 (CFNC "int gdk_screen_get_width_mm GdkScreen* screen")
;;; 3.22.2 (CFNC "int gdk_screen_get_height_mm GdkScreen* screen")
;;; 3.89 (CFNC "GList* gdk_screen_list_visuals GdkScreen* screen")
;;; 3.93.0 (CFNC "GList* gdk_screen_get_toplevel_windows GdkScreen* screen")
;;; 3.22.2 (CFNC "gchar* gdk_screen_make_display_name GdkScreen* screen" 'free)
;;; 3.22.2 (CFNC "int gdk_screen_get_n_monitors GdkScreen* screen")
;;; 3.22.2 (CFNC "void gdk_screen_get_monitor_geometry GdkScreen* screen int monitor_num GdkRectangle* dest")
;;; 3.22.2 (CFNC "int gdk_screen_get_monitor_at_point GdkScreen* screen int x int y")
;;; 2.99.3 (CFNC "void gdk_screen_broadcast_client_message GdkScreen* screen GdkEvent* event")
;;; 3.93.0 (CFNC "GdkScreen* gdk_screen_get_default void")
;(CFNC "gboolean gdk_screen_get_setting GdkScreen* screen gchar* name GValue* value")

;;; 2.91.6 (CLNG "GDK_TYPE_SCREEN")
;;; 2.91.6 (CLNG "GDK_TYPE_DISPLAY")
;;; 3.93.0 (CCAST "GDK_SCREEN(object)" "GdkScreen*")
;GDK_SCREEN_CLASS(klass)
;;; 3.93.0 (CCHK "GDK_IS_SCREEN(object)" "GdkScreen*")
;GDK_IS_SCREEN_CLASS(klass)
;GDK_SCREEN_GET_CLASS(obj)
(CCAST "GDK_DISPLAY_OBJECT(object)" "GdkDisplay*")
;GDK_DISPLAY_CLASS(klass)
(CCHK "GDK_IS_DISPLAY(object)" "GdkDisplay*")
;GDK_IS_DISPLAY_CLASS(klass)
;GDK_DISPLAY_GET_CLASS(obj)

;;; 3.93.0 (CFNC "GtkClipboard* gtk_clipboard_get_for_display GdkDisplay* display GdkAtom selection")
;;; 3.93.0 (CFNC "GdkDisplay* gtk_clipboard_get_display GtkClipboard* clipboard")
;;; 3.93.0 (CFNC "GdkScreen* gtk_widget_get_screen GtkWidget* widget")
;;; 3.93.0 (CFNC "gboolean gtk_widget_has_screen GtkWidget* widget")
(CFNC "GdkDisplay* gtk_widget_get_display GtkWidget* widget")
;;; 3.93.0 (CFNC "GtkClipboard* gtk_widget_get_clipboard GtkWidget* widget GdkAtom selection")

;;; -------- end gtk 2.1 additions


;;; glist additions

(CFNC "void g_list_free GList* list")
(CFNC "GList* g_list_reverse GList* @list")
(CFNC "GList* g_list_copy GList* @list")
(CFNC "GList* g_list_last GList* list")
(CFNC "GList* g_list_first GList* list")
(CFNC "guint g_list_length GList* @list")
(CFNC "void g_free gpointer mem")
(CFNC "GList* g_list_remove_link GList* list GList* llink")
(CFNC "gpointer g_object_get_data GObject* object gchar* key" 'const)
(CFNC "void g_object_set_data GObject* object gchar* key gpointer data" 'const)

;(CCAST "GPOINTER(obj)" "gpointer") ; do this by hand...
(CCAST "GDK_EVENT(obj)" "GdkEvent*")
(CCAST "GDK_EVENT_ANY(obj)" "GdkEventAny*")
(CCAST "GDK_EVENT_EXPOSE(obj)" "GdkEventExpose*")
(CCAST "GDK_EVENT_NOEXPOSE(obj)" "GdkEventNoExpose*")
(CCAST "GDK_EVENT_VISIBILITY(obj)" "GdkEventVisibility*")
(CCAST "GDK_EVENT_MOTION(obj)" "GdkEventMotion*")
(CCAST "GDK_EVENT_BUTTON(obj)" "GdkEventButton*")
;;; 3.96.0 (CCAST "GDK_EVENT_SCROLL(obj)" "GdkEventScroll*")
(CCAST "GDK_EVENT_KEY(obj)" "GdkEventKey*")
(CCAST "GDK_EVENT_CROSSING(obj)" "GdkEventCrossing*")
(CCAST "GDK_EVENT_FOCUS(obj)" "GdkEventFocus*")
(CCAST "GDK_EVENT_CONFIGURE(obj)" "GdkEventConfigure*")
(CCAST "GDK_EVENT_PROPERTY(obj)" "GdkEventProperty*")
(CCAST "GDK_EVENT_SELECTION(obj)" "GdkEventSelection*")
(CCAST "GDK_EVENT_PROXIMITY(obj)" "GdkEventProximity*")
(CCAST "GDK_EVENT_SETTING(obj)" "GdkEventSetting*")
(CCAST "GDK_EVENT_WINDOWSTATE(obj)" "GdkEventWindowState*")
(CCAST "GDK_EVENT_DND(obj)" "GdkEventDND*")



;;; -------- begin gtk 2.3 additions

;;; 3.93.0 (CFNC "GdkCursor* gdk_cursor_new_from_pixbuf GdkDisplay* display GdkPixbuf* pixbuf gint x gint y")
(CFNC "void gdk_display_flush GdkDisplay* display")
;;; 3.96.0 (CFNC "gboolean gdk_display_supports_cursor_alpha GdkDisplay* display")
;;; 3.96.0 (CFNC "gboolean gdk_display_supports_cursor_color GdkDisplay* display")
;;; 3.96.0 (CFNC "guint gdk_display_get_default_cursor_size GdkDisplay* display")
;;; 3.96.0 (CFNC "void gdk_display_get_maximal_cursor_size GdkDisplay* display guint* [width] guint* [height]")
;;; (CFNC "void gtk_alignment_set_padding GtkAlignment* alignment guint padding_top guint padding_bottom guint padding_left guint padding_right")
;;; (CFNC "void gtk_alignment_get_padding GtkAlignment* alignment guint* [padding_top] guint* [padding_bottom] guint* [padding_left] guint* [padding_right]")
;;; 3.96.0 (CFNC "gboolean gtk_button_box_get_child_secondary GtkButtonBox* widget GtkWidget* child")
;;; 3.19.2 (CFNC "void gtk_button_set_focus_on_click GtkButton* button gboolean focus_on_click")
;;; 3.19.2 (CFNC "gboolean gtk_button_get_focus_on_click GtkButton* button")
(CFNC "void gtk_calendar_set_display_options GtkCalendar* calendar GtkCalendarDisplayOptions flags")
(CFNC "GtkCalendarDisplayOptions gtk_calendar_get_display_options GtkCalendar* calendar")
(CFNC "void gtk_check_menu_item_set_draw_as_radio GtkCheckMenuItem* check_menu_item gboolean draw_as_radio")
(CFNC "gboolean gtk_check_menu_item_get_draw_as_radio GtkCheckMenuItem* check_menu_item")
(CFNC "void gtk_entry_set_completion GtkEntry* entry GtkEntryCompletion* completion")
(CFNC "GtkEntryCompletion* gtk_entry_get_completion GtkEntry* entry")
;;; 3.91.2 (CFNC "gboolean gtk_event_box_get_visible_window GtkEventBox* event_box")
;;; 3.91.2 (CFNC "void gtk_event_box_set_visible_window GtkEventBox* event_box gboolean visible_window")
;;; 3.91.2 (CFNC "gboolean gtk_event_box_get_above_child GtkEventBox* event_box")
;;; 3.91.2 (CFNC "void gtk_event_box_set_above_child GtkEventBox* event_box gboolean above_child")
;;; (CFNC "void gtk_icon_source_set_icon_name GtkIconSource* source gchar* icon_name")
;;; (CFNC "gchar* gtk_icon_source_get_icon_name GtkIconSource* source") ;const return
;;; 3.96.0 (CFNC "void gtk_menu_attach GtkMenu* menu GtkWidget* child guint left_attach guint right_attach guint top_attach guint bottom_attach")
(CFNC "void gtk_text_buffer_select_range GtkTextBuffer* buffer GtkTextIter* ins GtkTextIter* bound")
(CFNC "void gtk_text_view_set_overwrite GtkTextView* text_view gboolean overwrite")
(CFNC "gboolean gtk_text_view_get_overwrite GtkTextView* text_view")
(CFNC "void gtk_text_view_set_accepts_tab GtkTextView* text_view gboolean accepts_tab")
(CFNC "gboolean gtk_text_view_get_accepts_tab GtkTextView* text_view")
(CFNC "void gtk_toolbar_insert GtkToolbar* toolbar GtkToolItem* item gint pos")
(CFNC "gint gtk_toolbar_get_item_index GtkToolbar* toolbar GtkToolItem* item")
(CFNC "gint gtk_toolbar_get_n_items GtkToolbar* toolbar")
(CFNC "GtkToolItem* gtk_toolbar_get_nth_item GtkToolbar* toolbar gint n")
(CFNC "void gtk_toolbar_set_show_arrow GtkToolbar* toolbar gboolean show_arrow")
(CFNC "gboolean gtk_toolbar_get_show_arrow GtkToolbar* toolbar")
;;; 3.89 (CFNC "GtkReliefStyle gtk_toolbar_get_relief_style GtkToolbar* toolbar")
(CFNC "gint gtk_toolbar_get_drop_index GtkToolbar* toolbar gint x gint y")
;;;(CFNC "void gtk_toolbar_highlight_drop_location GtkToolbar* toolbar gint x gint y gint width gint height")
;;;(CFNC "void gtk_toolbar_unhighlight_drop_location GtkToolbar* toolbar")
(CFNC "void gtk_tree_view_column_set_expand GtkTreeViewColumn* tree_column gboolean expand")
(CFNC "gboolean gtk_tree_view_column_get_expand GtkTreeViewColumn* tree_column")
;;; gtk 4 (CFNC "void gtk_widget_set_no_show_all GtkWidget* widget gboolean no_show_all")
;;; gtk 4 (CFNC "gboolean gtk_widget_get_no_show_all GtkWidget* widget")
(CFNC "void gtk_widget_queue_resize_no_redraw GtkWidget* widget")
;;; 3.93.0 (CFNC "void gtk_window_set_default_icon GdkPixbuf* icon")
(CFNC "void gtk_window_set_keep_above GtkWindow* window gboolean setting")
(CFNC "void gtk_window_set_keep_below GtkWindow* window gboolean setting")

(CINT "GTK_MOVEMENT_HORIZONTAL_PAGES" "GtkMovementStep")
(CINT "GTK_SCROLL_STEPS" "GtkScrollStep")
(CINT "GTK_SCROLL_PAGES" "GtkScrollStep")
(CINT "GTK_SCROLL_ENDS" "GtkScrollStep")
(CINT "GTK_SCROLL_HORIZONTAL_STEPS" "GtkScrollStep")
(CINT "GTK_SCROLL_HORIZONTAL_PAGES" "GtkScrollStep")
(CINT "GTK_SCROLL_HORIZONTAL_ENDS" "GtkScrollStep")
(CINT "GTK_WRAP_WORD_CHAR" "GtkWrapMode")
;;; 2.91.0 (CINT "GTK_NO_SHOW_ALL" "GtkWidgetFlags")

;;; 2.91.6 (CLNG "GTK_TYPE_FILE_CHOOSER_DIALOG")
;;; 2.91.6 (CLNG "GTK_TYPE_FILE_CHOOSER_WIDGET")
;;; 2.91.6 (CLNG "GTK_TYPE_TREE_MODEL_FILTER")
;;; 2.91.6 (CLNG "GTK_TYPE_ACTION")
;;; 2.91.6 (CLNG "GTK_TYPE_ACTION_GROUP")
;;; 2.91.6 (CLNG "GTK_TYPE_COMBO_BOX")
;;; 2.91.6 ;;; 2.91.1 (CLNG "GTK_TYPE_COMBO_BOX_ENTRY")
;;; 2.91.6 (CLNG "GTK_TYPE_EXPANDER")
;;; 2.91.6 (CLNG "GTK_TYPE_FONT_BUTTON")
;;; 2.91.6 (CLNG "GTK_TYPE_COLOR_BUTTON")
;;; 2.91.6 (CLNG "GTK_TYPE_ENTRY_COMPLETION")
;;; 2.91.6 (CLNG "GTK_TYPE_UI_MANAGER")
;;; 2.91.6 (CLNG "GTK_TYPE_RADIO_TOOL_BUTTON")
;;; 2.91.6 (CLNG "GTK_TYPE_RADIO_ACTION")
;;; 2.91.6 (CLNG "GTK_TYPE_SEPARATOR_TOOL_ITEM")
;;; 2.91.6 (CLNG "GTK_TYPE_TOGGLE_ACTION")
;;; 2.91.6 (CLNG "GTK_TYPE_TOGGLE_TOOL_BUTTON")
;;; 2.91.6 (CLNG "GTK_TYPE_FILE_FILTER")
;;; 2.91.6 (CLNG "GTK_TYPE_CELL_LAYOUT")
;;; 2.91.6 (CLNG "GTK_TYPE_CLIPBOARD")
;;; 2.91.6 (CLNG "GTK_TYPE_FILE_CHOOSER")
;;; 2.91.6 (CLNG "GTK_TYPE_ICON_INFO")
;;; 2.91.6 (CLNG "GTK_TYPE_ICON_THEME")
;;; 2.91.6 (CLNG "GTK_TYPE_TOOL_BUTTON")
;;; 2.91.6 (CLNG "GTK_TYPE_TOOL_ITEM")

(CCAST "GTK_FILE_CHOOSER_DIALOG(obj)" "GtkFileChooserDialog*")
(CCHK "GTK_IS_FILE_CHOOSER_DIALOG(obj)" "GtkFileChooserDialog*")
(CCAST "GTK_FILE_CHOOSER_WIDGET(obj)" "GtkFileChooserWidget*")
(CCHK "GTK_IS_FILE_CHOOSER_WIDGET(obj)" "GtkFileChooserWidget*")
(CCAST "GTK_TREE_MODEL_FILTER(obj)" "GtkTreeModelFilter*")
(CCHK "GTK_IS_TREE_MODEL_FILTER(obj)" "GtkTreeModelFilter*")
;;; 3.9.8 (CCAST "GTK_ACTION(obj)" "GtkAction*")
;;; (CCHK "GTK_IS_ACTION(obj)" "GtkAction*")
;;; (CCAST "GTK_ACTION_GROUP(obj)" "GtkActionGroup*")
;;; (CCHK "GTK_IS_ACTION_GROUP(obj)" "GtkActionGroup*")
(CCAST "GTK_COMBO_BOX(obj)" "GtkComboBox*")
(CCHK "GTK_IS_COMBO_BOX(obj)" "GtkComboBox*")
;;; 2.91.1 (CCAST "GTK_COMBO_BOX_ENTRY(obj)" "GtkComboBoxEntry*")
;;; 2.91.1 (CCHK "GTK_IS_COMBO_BOX_ENTRY(obj)" "GtkComboBoxEntry*")
(CCAST "GTK_EXPANDER(obj)" "GtkExpander*")
(CCHK "GTK_IS_EXPANDER(obj)" "GtkExpander*")
(CCAST "GTK_FONT_BUTTON(obj)" "GtkFontButton*")
(CCHK "GTK_IS_FONT_BUTTON(obj)" "GtkFontButton*")
(CCAST "GTK_COLOR_BUTTON(obj)" "GtkColorButton*")
(CCHK "GTK_IS_COLOR_BUTTON(obj)" "GtkColorButton*")
(CCAST "GTK_ENTRY_COMPLETION(obj)" "GtkEntryCompletion*")
(CCHK "GTK_IS_ENTRY_COMPLETION(obj)" "GtkEntryCompletion*")
;(CCAST "GTK_UI_MANAGER(obj)" "GtkUIManager*")
;(CCHK "GTK_IS_UI_MANAGER(obj)" "GtkUIManager*")
(CCAST "GTK_RADIO_TOOL_BUTTON(obj)" "GtkRadioToolButton*")
(CCHK "GTK_IS_RADIO_TOOL_BUTTON(obj)" "GtkRadioToolButton*")
;;; (CCAST "GTK_RADIO_ACTION(obj)" "GtkRadioAction*")
;;; (CCHK "GTK_IS_RADIO_ACTION(obj)" "GtkRadioAction*")
(CCAST "GTK_SEPARATOR_TOOL_ITEM(obj)" "GtkSeparatorToolItem*")
(CCHK "GTK_IS_SEPARATOR_TOOL_ITEM(obj)" "GtkSeparatorToolItem*")
;;; (CCAST "GTK_TOGGLE_ACTION(obj)" "GtkToggleAction*")
;;; (CCHK "GTK_IS_TOGGLE_ACTION(obj)" "GtkToggleAction*")
(CCAST "GTK_TOGGLE_TOOL_BUTTON(obj)" "GtkToggleToolButton*")
(CCHK "GTK_IS_TOGGLE_TOOL_BUTTON(obj)" "GtkToggleToolButton*")
(CCAST "GTK_FILE_FILTER(obj)" "GtkFileFilter*")
(CCHK "GTK_IS_FILE_FILTER(obj)" "GtkFileFilter*")
(CCAST "GTK_CELL_LAYOUT(obj)" "GtkCellLayout*")
(CCHK "GTK_IS_CELL_LAYOUT(obj)" "GtkCellLayout*")
;;; 3.93.0 (CCAST "GTK_CLIPBOARD(obj)" "GtkClipboard*")
;;; 3.93.0 (CCHK "GTK_IS_CLIPBOARD(obj)" "GtkClipboard*")
(CCAST "GTK_FILE_CHOOSER(obj)" "GtkFileChooser*")
(CCHK "GTK_IS_FILE_CHOOSER(obj)" "GtkFileChooser*")
(CCAST "GTK_ICON_THEME(obj)" "GtkIconTheme*")
(CCHK "GTK_IS_ICON_THEME(obj)" "GtkIconTheme*")
(CCAST "GTK_TOOL_BUTTON(obj)" "GtkToolButton*")
(CCHK "GTK_IS_TOOL_BUTTON(obj)" "GtkToolButton*")
(CCAST "GTK_TOOL_ITEM(o)" "GtkToolItem*")
(CCHK "GTK_IS_TOOL_ITEM(o)" "GtkToolItem*")

;;; out 3.9.8
;(CINT "GTK_UI_MANAGER_AUTO" "GtkUIManagerItemType")
;(CINT "GTK_UI_MANAGER_MENUBAR" "GtkUIManagerItemType")
;(CINT "GTK_UI_MANAGER_MENU" "GtkUIManagerItemType")
;(CINT "GTK_UI_MANAGER_TOOLBAR" "GtkUIManagerItemType")
;(CINT "GTK_UI_MANAGER_PLACEHOLDER" "GtkUIManagerItemType")
;(CINT "GTK_UI_MANAGER_POPUP" "GtkUIManagerItemType")
;(CINT "GTK_UI_MANAGER_MENUITEM" "GtkUIManagerItemType")
;(CINT "GTK_UI_MANAGER_TOOLITEM" "GtkUIManagerItemType")
;(CINT "GTK_UI_MANAGER_SEPARATOR" "GtkUIManagerItemType")
;(CINT "GTK_UI_MANAGER_ACCELERATOR" "GtkUIManagerItemType")

(CINT "GTK_FILE_FILTER_FILENAME" "GtkFileFilterFlags")
(CINT "GTK_FILE_FILTER_URI" "GtkFileFilterFlags")
(CINT "GTK_FILE_FILTER_DISPLAY_NAME" "GtkFileFilterFlags")
(CINT "GTK_FILE_FILTER_MIME_TYPE" "GtkFileFilterFlags")

(CINT "GTK_ICON_LOOKUP_NO_SVG" "GtkIconLookupFlags")
(CINT "GTK_ICON_LOOKUP_FORCE_SVG" "GtkIconLookupFlags")
(CINT "GTK_ICON_LOOKUP_USE_BUILTIN" "GtkIconLookupFlags")
(CINT "GTK_ICON_LOOKUP_GENERIC_FALLBACK" "GtkIconLookupFlags")

(CINT "GTK_FILE_CHOOSER_ACTION_OPEN" "GtkFileChooserAction")
(CINT "GTK_FILE_CHOOSER_ACTION_SAVE" "GtkFileChooserAction")

(CFNC-PA "GtkWidget* gtk_file_chooser_dialog_new gchar* title GtkWindow* @parent GtkFileChooserAction action etc #buttons" 0 10 '("gchar*" "int"))

;;;;(CFNC "GType gtk_file_chooser_dialog_get_type void") 
;;;;(CFNC "GType gtk_file_chooser_widget_get_type void") 
(CFNC "GtkWidget* gtk_file_chooser_widget_new GtkFileChooserAction action") 
;;;;(CFNC "GType gtk_tree_model_filter_get_type void") 
(CFNC "GtkTreeModel* gtk_tree_model_filter_new GtkTreeModel* child_model GtkTreePath* @root") 
;(CFNC "void gtk_tree_model_filter_set_visible_func GtkTreeModelFilter* filter GtkTreeModelFilterVisibleFunc func lambda_data @func_info GtkDestroyNotify destroy") 
;(CFNC "void gtk_tree_model_filter_set_modify_func GtkTreeModelFilter* filter gint n_columns GType* types GtkTreeModelFilterModifyFunc func lambda_data @func_info GtkDestroyNotify destroy") 
(CFNC "void gtk_tree_model_filter_set_visible_column GtkTreeModelFilter* filter gint column") 
(CFNC "GtkTreeModel* gtk_tree_model_filter_get_model GtkTreeModelFilter* filter") 
;(CFNC "void gtk_tree_model_filter_convert_child_iter_to_iter GtkTreeModelFilter* filter GtkTreeIter* filter_iter GtkTreeIter* child_iter") 
; rtn type change 210
(CFNC "void gtk_tree_model_filter_convert_iter_to_child_iter GtkTreeModelFilter* filter GtkTreeIter* child_iter GtkTreeIter* filter_iter") 
(CFNC "GtkTreePath* gtk_tree_model_filter_convert_child_path_to_path GtkTreeModelFilter* filter GtkTreePath* child_path")  ; FREE
(CFNC "GtkTreePath* gtk_tree_model_filter_convert_path_to_child_path GtkTreeModelFilter* path GtkTreePath* filter_path")  ; FREE
(CFNC "void gtk_tree_model_filter_refilter GtkTreeModelFilter* filter") 
(CFNC "void gtk_tree_model_filter_clear_cache GtkTreeModelFilter* filter") 

;;; 3.9.8
;;;;(CFNC "GType gtk_action_get_type void") 
;;; (CFNC "gchar* gtk_action_get_name GtkAction* action") 
;;; (CFNC "void gtk_action_activate GtkAction* action") 
;;; (CFNC "GtkWidget* gtk_action_create_icon GtkAction* action GtkIconSize icon_size") 
;;; (CFNC "GtkWidget* gtk_action_create_menu_item GtkAction* action") 
;;; (CFNC "GtkWidget* gtk_action_create_tool_item GtkAction* action") 
;;; out 2.15.1 (CFNC "void gtk_action_connect_proxy GtkAction* action GtkWidget* proxy") 
;;; (CFNC "void gtk_action_disconnect_proxy GtkAction* action GtkWidget* proxy") 
;;; (CFNC "GSList* gtk_action_get_proxies GtkAction* action") 
;;; (CFNC "void gtk_action_connect_accelerator GtkAction* action") 
;;; (CFNC "void gtk_action_disconnect_accelerator GtkAction* action") 
;;;;(CFNC "GType gtk_action_group_get_type void") 
;;; (CFNC "GtkActionGroup* gtk_action_group_new gchar* name") 
;;; (CFNC "gchar* gtk_action_group_get_name GtkActionGroup* action_group") 
;;; (CFNC "GtkAction* gtk_action_group_get_action GtkActionGroup* action_group gchar* action_name") 
;;; (CFNC "GList* gtk_action_group_list_actions GtkActionGroup* action_group") 
;;; (CFNC "void gtk_action_group_add_action GtkActionGroup* action_group GtkAction* action") 
;;; (CFNC "void gtk_action_group_remove_action GtkActionGroup* action_group GtkAction* action") 
;;; (CFNC "void gtk_action_group_add_actions GtkActionGroup* action_group GtkActionEntry* entries guint n_entries gpointer user_data") 
;;; (CFNC "void gtk_action_group_add_toggle_actions GtkActionGroup* action_group GtkToggleActionEntry* entries guint n_entries gpointer user_data") 
;;; ;(CFNC "void gtk_action_group_add_radio_actions GtkActionGroup* action_group GtkRadioActionEntry* entries guint n_entries gint value GCallback on_change gpointer user_data") 
;;; ;(CFNC "void gtk_action_group_add_actions_full GtkActionGroup* action_group GtkActionEntry* entries guint n_entries lambda_data @func_info GtkDestroyNotify destroy") 
;;; (CFNC "void gtk_action_group_add_toggle_actions_full GtkActionGroup* action_group GtkToggleActionEntry* entries guint n_entries lambda_data @func_info GtkDestroyNotify destroy") 
;;; ;(CFNC "void gtk_action_group_add_radio_actions_full GtkActionGroup* action_group GtkRadioActionEntry* entries guint n_entries gint value GCallback on_change gpointer user_data GtkDestroyNotify destroy") 
;;; ;(CFNC "void gtk_action_group_set_translate_func GtkActionGroup* action_group GtkTranslateFunc func lambda_data @func_info GtkDestroyNotify notify") 
;;; (CFNC "void gtk_action_group_set_translation_domain GtkActionGroup* action_group gchar* domain") 

;;;;(CFNC "GType gtk_combo_box_get_type void") 
;;; (CFNC "GtkWidget* gtk_combo_box_new GtkTreeModel* model") 
;;; changed 2.3.1
(CFNC "GtkWidget* gtk_combo_box_new void") 
(CFNC "GtkWidget* gtk_combo_box_new_with_model GtkTreeModel* model") 
(CFNC "void gtk_combo_box_set_model GtkComboBox* combo_box GtkTreeModel* @model")
;;; 2.91.1 (CFNC "void gtk_combo_box_remove_text GtkComboBox* combo_box gint position")
;;; 3.96.0 (CFNC "void gtk_combo_box_set_wrap_width GtkComboBox* combo_box gint width") 
;;; 3.96.0 (CFNC "void gtk_combo_box_set_row_span_column GtkComboBox* combo_box gint row_span") 
;;; 3.96.0 (CFNC "void gtk_combo_box_set_column_span_column GtkComboBox* combo_box gint column_span") 
(CFNC "gint gtk_combo_box_get_active GtkComboBox* combo_box") 
(CFNC "void gtk_combo_box_set_active GtkComboBox* combo_box gint index") 
(CFNC "gboolean gtk_combo_box_get_active_iter GtkComboBox* combo_box GtkTreeIter* iter") 
(CFNC "void gtk_combo_box_set_active_iter GtkComboBox* combo_box GtkTreeIter* iter") 
(CFNC "GtkTreeModel* gtk_combo_box_get_model GtkComboBox* combo_box") 
;;; 2.91.1 (CFNC "GtkWidget* gtk_combo_box_new_text void") 
;;; 2.91.1 (CFNC "void gtk_combo_box_append_text GtkComboBox* combo_box gchar* text") 
;;; 2.91.1 (CFNC "void gtk_combo_box_insert_text GtkComboBox* combo_box gint position gchar* text") 
;;; 2.91.1 (CFNC "void gtk_combo_box_prepend_text GtkComboBox* combo_box gchar* text") 
;;;;(CFNC "GType gtk_combo_box_entry_get_type void") 
;;; (CFNC "GtkWidget* gtk_combo_box_entry_new GtkTreeModel* model gint text_column")
;;; changed in 2.3.1
;;; 2.91.1 (CFNC "GtkWidget* gtk_combo_box_entry_new void")
;;; 2.91.1 (CFNC "GtkWidget* gtk_combo_box_entry_new_with_model GtkTreeModel* model gint text_column")
;;; 2.91.1 (CFNC "void gtk_combo_box_entry_set_text_column GtkComboBoxEntry* entry_box gint text_column")
;;; 2.91.1 (CFNC "gint gtk_combo_box_entry_get_text_column GtkComboBoxEntry* entry_box") 
;;;;(CFNC "GType gtk_expander_get_type void") 
(CFNC "GtkWidget* gtk_expander_new gchar* label") 
(CFNC "GtkWidget* gtk_expander_new_with_mnemonic gchar* label") 
(CFNC "void gtk_expander_set_expanded GtkExpander* expander gboolean expanded") 
(CFNC "gboolean gtk_expander_get_expanded GtkExpander* expander") 
;;; 3.89 (CFNC "void gtk_expander_set_spacing GtkExpander* expander gint spacing") 
;;; 3.89 (CFNC "gint gtk_expander_get_spacing GtkExpander* expander") 
(CFNC "void gtk_expander_set_label GtkExpander* expander gchar* label") 
(CFNC "gchar* gtk_expander_get_label GtkExpander* expander") 
(CFNC "void gtk_expander_set_use_underline GtkExpander* expander gboolean use_underline") 
(CFNC "gboolean gtk_expander_get_use_underline GtkExpander* expander") 
(CFNC "void gtk_expander_set_label_widget GtkExpander* expander GtkWidget* label_widget") 
(CFNC "GtkWidget* gtk_expander_get_label_widget GtkExpander* expander") 
(CFNC "void gtk_expander_set_use_markup GtkExpander* expander gboolean use_markup")
(CFNC "gboolean gtk_expander_get_use_markup GtkExpander* expander")
;;;;(CFNC "GType gtk_font_button_get_type void")
(CFNC "GtkWidget* gtk_font_button_new void") 
(CFNC "GtkWidget* gtk_font_button_new_with_font gchar* fontname") 
(CFNC "gchar* gtk_font_button_get_title GtkFontButton* font_button") 
(CFNC "void gtk_font_button_set_title GtkFontButton* font_button gchar* title") 
(CFNC "gboolean gtk_font_button_get_use_font GtkFontButton* font_button") 
(CFNC "void gtk_font_button_set_use_font GtkFontButton* font_button gboolean use_font") 
(CFNC "gboolean gtk_font_button_get_use_size GtkFontButton* font_button") 
(CFNC "void gtk_font_button_set_use_size GtkFontButton* font_button gboolean use_size") 
;;; 3.93.0 (CFNC "gchar* gtk_font_button_get_font_name GtkFontButton* font_button") 
;;; 3.93.0 (CFNC "gboolean gtk_font_button_set_font_name GtkFontButton* font_button gchar* fontname") 
;;; 3.96.0 (CFNC "gboolean gtk_font_button_get_show_style GtkFontButton* font_button") 
;;; 3.96.0 (CFNC "void gtk_font_button_set_show_style GtkFontButton* font_button gboolean show_style") 
;;; 3.96.0 (CFNC "gboolean gtk_font_button_get_show_size GtkFontButton* font_button") 
;;; 3.96.0 (CFNC "void gtk_font_button_set_show_size GtkFontButton* font_button gboolean show_size") 
;;;;(CFNC "GType gtk_color_button_get_type void")
;;; ;;; 3.3.16 (CFNC-gtk2 "GtkWidget* gtk_color_button_new void") 
;;; ;;; 3.3.16 (CFNC-gtk2 "GtkWidget* gtk_color_button_new_with_color GdkColor* color") 
;;; 3.3.16 (CFNC "void gtk_color_button_set_alpha GtkColorButton* color_button guint16 alpha") 
;;; ;;; 3.3.16 (CFNC-gtk2 "void gtk_color_button_set_color GtkColorButton* color_button GdkColor* color") 
;;; ;;; 3.3.16 (CFNC-gtk2 "void gtk_color_button_get_color GtkColorButton* color_button GdkColor* color") 
;;; 3.3.16 (CFNC "guint16 gtk_color_button_get_alpha GtkColorButton* color_button") 
;;; 3.3.16 (CFNC "void gtk_color_button_set_use_alpha GtkColorButton* color_button gboolean use_alpha") 
;;; 3.3.16 (CFNC "gboolean gtk_color_button_get_use_alpha GtkColorButton* color_button") 
;;; ;;; 3.3.16 (CFNC-gtk2 "void gtk_color_button_set_title GtkColorButton* color_button gchar* title") 
;;; ;;; 3.3.16 (CFNC-gtk2 "gchar* gtk_color_button_get_title GtkColorButton* color_button") 
;;;;(CFNC "GType gtk_entry_completion_get_type void") 
(CFNC "GtkEntryCompletion* gtk_entry_completion_new void") 
(CFNC "GtkWidget* gtk_entry_completion_get_entry GtkEntryCompletion* entry") 
(CFNC "void gtk_entry_completion_set_model GtkEntryCompletion* completion GtkTreeModel* @model") 
(CFNC "GtkTreeModel* gtk_entry_completion_get_model GtkEntryCompletion* completion") 
(CFNC "void gtk_entry_completion_set_match_func GtkEntryCompletion* completion GtkEntryCompletionMatchFunc func lambda_data @func_info GtkDestroyNotify func_notify") 
(CFNC "void gtk_entry_completion_set_minimum_key_length GtkEntryCompletion* completion gint length") 
(CFNC "gint gtk_entry_completion_get_minimum_key_length GtkEntryCompletion* completion") 
(CFNC "void gtk_entry_completion_complete GtkEntryCompletion* completion") 
(CFNC "void gtk_entry_completion_insert_action_text GtkEntryCompletion* completion gint index gchar* text") 
(CFNC "void gtk_entry_completion_insert_action_markup GtkEntryCompletion* completion gint index gchar* markup") 
(CFNC "void gtk_entry_completion_delete_action GtkEntryCompletion* completion gint index") 
(CFNC "void gtk_entry_completion_set_text_column GtkEntryCompletion* completion gint column") 
;;;;(CFNC "GType gtk_ui_manager_get_type void") 
;(CFNC "GtkUIManager* gtk_ui_manager_new void") 
;;; 3.3.2 ;(CFNC "void gtk_ui_manager_set_add_tearoffs GtkUIManager* self gboolean add_tearoffs") 
;;; 3.3.2 ;(CFNC "gboolean gtk_ui_manager_get_add_tearoffs GtkUIManager* self") 
;(CFNC "void gtk_ui_manager_insert_action_group GtkUIManager* self GtkActionGroup* action_group gint pos") 
;(CFNC "void gtk_ui_manager_remove_action_group GtkUIManager* self GtkActionGroup* action_group") 
;(CFNC "GList* gtk_ui_manager_get_action_groups GtkUIManager* self") 
;(CFNC "GtkAccelGroup* gtk_ui_manager_get_accel_group GtkUIManager* self") 
;(CFNC "GtkWidget* gtk_ui_manager_get_widget GtkUIManager* self gchar* path") 
;(CFNC "GtkAction* gtk_ui_manager_get_action GtkUIManager* self gchar* path") 
;(CFNC "guint gtk_ui_manager_add_ui_from_string GtkUIManager* self gchar* buffer gssize length GError** [error]") 
;(CFNC "guint gtk_ui_manager_add_ui_from_file GtkUIManager* self gchar* filename GError** [error]") 
;(CFNC "void gtk_ui_manager_add_ui GtkUIManager* self guint merge_id gchar* path gchar* name gchar* action GtkUIManagerItemType type gboolean top") 
;(CFNC "void gtk_ui_manager_remove_ui GtkUIManager* self guint merge_id") 
;(CFNC "gchar* gtk_ui_manager_get_ui GtkUIManager* self" 'free)
;(CFNC "void gtk_ui_manager_ensure_update GtkUIManager* self") 
;(CFNC "guint gtk_ui_manager_new_merge_id GtkUIManager* self") 
;;;;(CFNC "GType gtk_radio_tool_button_get_type void")
(CFNC "GtkToolItem* gtk_radio_tool_button_new GSList* @group") 
;;; (CFNC "GtkToolItem* gtk_radio_tool_button_new_from_stock GSList* @group gchar* stock_id") 
;;; (CFNC "GtkToolItem* gtk_radio_tool_button_new_from_widget GtkWidget* group") 
;;; changed 2.3.1
(CFNC "GtkToolItem* gtk_radio_tool_button_new_from_widget GtkRadioToolButton* group") 
;;; (CFNC "GtkToolItem* gtk_radio_tool_button_new_with_stock_from_widget GtkRadioToolButton* group gchar* stock_id") 
;;; arg1 type changed 2.3.2
(CFNC "GSList* gtk_radio_tool_button_get_group GtkRadioToolButton* button") 
(CFNC "void gtk_radio_tool_button_set_group GtkRadioToolButton* button GSList* @group")
;;;;(CFNC "GType gtk_radio_action_get_type void") 
;;; (CFNC "GSList* gtk_radio_action_get_group GtkRadioAction* action") 
;;; (CFNC "void gtk_radio_action_set_group GtkRadioAction* action GSList* @group") 
;;; (CFNC "gint gtk_radio_action_get_current_value GtkRadioAction* action") 
;;;;(CFNC "GType gtk_separator_tool_item_get_type void")
(CFNC "GtkToolItem* gtk_separator_tool_item_new void") 
(CFNC "gboolean gtk_separator_tool_item_get_draw GtkSeparatorToolItem* item")
(CFNC "void gtk_separator_tool_item_set_draw GtkSeparatorToolItem* tool_item gboolean draw")
;;;;(CFNC "GType gtk_toggle_action_get_type void") 
;;; (CFNC "void gtk_toggle_action_toggled GtkToggleAction* action") 
;;; (CFNC "void gtk_toggle_action_set_active GtkToggleAction* action gboolean is_active") 
;;; (CFNC "gboolean gtk_toggle_action_get_active GtkToggleAction* action") 
;;; (CFNC "void gtk_toggle_action_set_draw_as_radio GtkToggleAction* action gboolean draw_as_radio") 
;;; (CFNC "gboolean gtk_toggle_action_get_draw_as_radio GtkToggleAction* action") 
;;; ;;;;(CFNC "GType gtk_toggle_tool_button_get_type void")
(CFNC "GtkToolItem* gtk_toggle_tool_button_new void") 
;;; (CFNC "GtkToolItem* gtk_toggle_tool_button_new_from_stock gchar* stock_id") 
(CFNC "void gtk_toggle_tool_button_set_active GtkToggleToolButton* button gboolean is_active") 
(CFNC "gboolean gtk_toggle_tool_button_get_active GtkToggleToolButton* button") 
(CFNC "guint g_timeout_add_full gint priority guint interval GSourceFunc func lambda_data @func_info GtkDestroyNotify notify") 
(CFNC "guint g_timeout_add guint interval GSourceFunc func lambda_data @func_info") 
(CFNC "guint g_idle_add GSourceFunc func lambda_data @func_info") 
(CFNC "guint g_idle_add_full gint priority GSourceFunc func lambda_data @func_info GtkDestroyNotify notify") 
(CFNC "gboolean g_idle_remove_by_data gpointer data") 
(CFNC "gboolean g_source_remove guint tag")
;;;;(CFNC "GType gtk_file_filter_get_type void") 
(CFNC "GtkFileFilter* gtk_file_filter_new void") 
(CFNC "void gtk_file_filter_set_name GtkFileFilter* filter gchar* name") 
(CFNC "gchar* gtk_file_filter_get_name GtkFileFilter* filter") 
(CFNC "void gtk_file_filter_add_mime_type GtkFileFilter* filter gchar* mime_type") 
(CFNC "void gtk_file_filter_add_pattern GtkFileFilter* filter gchar* pattern") 
(CFNC "void gtk_file_filter_add_custom GtkFileFilter* filter GtkFileFilterFlags needed GtkFileFilterFunc func lambda_data @func_info GtkDestroyNotify notify") 
(CFNC "GtkFileFilterFlags gtk_file_filter_get_needed GtkFileFilter* filter") 
(CFNC "gboolean gtk_file_filter_filter GtkFileFilter* filter GtkFileFilterInfo* filter_info") 
;;;;(CFNC "GType gtk_cell_layout_get_type void") 
(CFNC "void gtk_cell_layout_pack_start GtkCellLayout* cell_layout GtkCellRenderer* cell gboolean expand") 
(CFNC "void gtk_cell_layout_pack_end GtkCellLayout* cell_layout GtkCellRenderer* cell gboolean expand") 
(CFNC "void gtk_cell_layout_clear GtkCellLayout* cell_layout") 
(CFNC-PA "void gtk_cell_layout_set_attributes GtkCellLayout* cell_layout GtkCellRenderer* cell etc attributes" 2 10 '("gchar*" "int"))
(CFNC "void gtk_cell_layout_add_attribute GtkCellLayout* cell_layout GtkCellRenderer* cell gchar* attribute gint column") 
(CFNC "void gtk_cell_layout_set_cell_data_func GtkCellLayout* cell_layout GtkCellRenderer* cell GtkCellLayoutDataFunc func lambda_data @func_info GtkDestroyNotify destroy") 
(CFNC "void gtk_cell_layout_clear_attributes GtkCellLayout* cell_layout GtkCellRenderer* cell") 
;;;;(CFNC "GType gtk_file_chooser_get_type void") 
(CFNC "void gtk_file_chooser_set_action GtkFileChooser* chooser GtkFileChooserAction action") 
(CFNC "GtkFileChooserAction gtk_file_chooser_get_action GtkFileChooser* chooser") 
;;; (CFNC "void gtk_file_chooser_set_folder_mode GtkFileChooser* chooser gboolean folder_mode") 
;;; (CFNC "gboolean gtk_file_chooser_get_folder_mode GtkFileChooser* chooser") 
;;; 2.3.5
(CFNC "void gtk_file_chooser_set_local_only GtkFileChooser* chooser gboolean files_only") 
(CFNC "gboolean gtk_file_chooser_get_local_only GtkFileChooser* chooser") 
(CFNC "void gtk_file_chooser_set_select_multiple GtkFileChooser* chooser gboolean select_multiple") 
(CFNC "gboolean gtk_file_chooser_get_select_multiple GtkFileChooser* chooser") 
(CFNC "void gtk_file_chooser_set_current_name GtkFileChooser* chooser gchar* name") 
(CFNC "gchar* gtk_file_chooser_get_filename GtkFileChooser* chooser" 'free)
(CFNC "gboolean gtk_file_chooser_set_filename GtkFileChooser* chooser char* filename") 
(CFNC "gboolean gtk_file_chooser_select_filename GtkFileChooser* chooser char* filename") 
(CFNC "void gtk_file_chooser_unselect_filename GtkFileChooser* chooser char* filename") 
(CFNC "void gtk_file_chooser_select_all GtkFileChooser* chooser") 
(CFNC "void gtk_file_chooser_unselect_all GtkFileChooser* chooser") 
(CFNC "GSList* gtk_file_chooser_get_filenames GtkFileChooser* chooser")  ; FREE and result with g_slist_free
(CFNC "gboolean gtk_file_chooser_set_current_folder GtkFileChooser* chooser gchar* filename") 
(CFNC "gchar* gtk_file_chooser_get_current_folder GtkFileChooser* chooser" 'free)
(CFNC "gchar* gtk_file_chooser_get_uri GtkFileChooser* chooser" 'free)
(CFNC "gboolean gtk_file_chooser_set_uri GtkFileChooser* chooser char* uri") 
(CFNC "gboolean gtk_file_chooser_select_uri GtkFileChooser* chooser char* uri") 
(CFNC "void gtk_file_chooser_unselect_uri GtkFileChooser* chooser char* uri") 
(CFNC "GSList* gtk_file_chooser_get_uris GtkFileChooser* chooser")  ; FREE (g_slist_free)
(CFNC "gboolean gtk_file_chooser_set_current_folder_uri GtkFileChooser* chooser gchar* uri") 
(CFNC "gchar* gtk_file_chooser_get_current_folder_uri GtkFileChooser* chooser" 'free)
(CFNC "void gtk_file_chooser_set_preview_widget GtkFileChooser* chooser GtkWidget* preview_widget") 
(CFNC "GtkWidget* gtk_file_chooser_get_preview_widget GtkFileChooser* chooser") 
(CFNC "void gtk_file_chooser_set_preview_widget_active GtkFileChooser* chooser gboolean active") 
(CFNC "gboolean gtk_file_chooser_get_preview_widget_active GtkFileChooser* chooser") 
(CFNC "char* gtk_file_chooser_get_preview_filename GtkFileChooser* file_chooser" 'free)
(CFNC "char* gtk_file_chooser_get_preview_uri GtkFileChooser* file_chooser" 'free)
(CFNC "void gtk_file_chooser_set_extra_widget GtkFileChooser* chooser GtkWidget* extra_widget") 
(CFNC "GtkWidget* gtk_file_chooser_get_extra_widget GtkFileChooser* chooser") 
(CFNC "void gtk_file_chooser_add_filter GtkFileChooser* chooser GtkFileFilter* filter") 
(CFNC "void gtk_file_chooser_remove_filter GtkFileChooser* chooser GtkFileFilter* filter") 
(CFNC "GSList* gtk_file_chooser_list_filters GtkFileChooser* chooser") 
(CFNC "void gtk_file_chooser_set_filter GtkFileChooser* chooser GtkFileFilter* filter") 
(CFNC "GtkFileFilter* gtk_file_chooser_get_filter GtkFileChooser* chooser") 
(CFNC "gboolean gtk_file_chooser_add_shortcut_folder GtkFileChooser* chooser char* folder GError** [error]") 
(CFNC "gboolean gtk_file_chooser_remove_shortcut_folder GtkFileChooser* chooser char* folder GError** [error]") 
(CFNC "GSList* gtk_file_chooser_list_shortcut_folders GtkFileChooser* chooser") 
(CFNC "gboolean gtk_file_chooser_add_shortcut_folder_uri GtkFileChooser* chooser char* folder GError** [error]") 
(CFNC "gboolean gtk_file_chooser_remove_shortcut_folder_uri GtkFileChooser* chooser char* folder GError** [error]") 
(CFNC "GSList* gtk_file_chooser_list_shortcut_folder_uris GtkFileChooser* chooser") 
;;;;(CFNC "GType gtk_icon_theme_get_type void") 
(CFNC "GtkIconTheme* gtk_icon_theme_new void") 
(CFNC "GtkIconTheme* gtk_icon_theme_get_default void") 
;;; 3.93.0 (CFNC "GtkIconTheme* gtk_icon_theme_get_for_screen GdkScreen* screen") 
;;; 3.93.0 (CFNC "void gtk_icon_theme_set_screen GtkIconTheme* icon_theme GdkScreen* @screen") 
;(CFNC "void gtk_icon_theme_set_search_path GtkIconTheme* icon_theme gchar** path gint n_elements") 
(CFNC "void gtk_icon_theme_get_search_path GtkIconTheme* icon_theme gchar*** [path] gint* [n_elements]") 
(CFNC "void gtk_icon_theme_append_search_path GtkIconTheme* icon_theme gchar* path") 
(CFNC "void gtk_icon_theme_prepend_search_path GtkIconTheme* icon_theme gchar* path") 
(CFNC "void gtk_icon_theme_set_custom_theme GtkIconTheme* icon_theme gchar* theme_name") 
(CFNC "gboolean gtk_icon_theme_has_icon GtkIconTheme* icon_theme gchar* icon_name") 
(CFNC "GtkIconInfo* gtk_icon_theme_lookup_icon GtkIconTheme* icon_theme gchar* icon_name gint size GtkIconLookupFlags flags") 
(CFNC "GdkPixbuf* gtk_icon_theme_load_icon GtkIconTheme* icon_theme gchar* icon_name gint size GtkIconLookupFlags flags GError** [error]") 
(CFNC "GList* gtk_icon_theme_list_icons GtkIconTheme* icon_theme gchar* context") 
(CFNC "char* gtk_icon_theme_get_example_icon_name GtkIconTheme* icon_theme") 
(CFNC "gboolean gtk_icon_theme_rescan_if_needed GtkIconTheme* icon_theme") 
;;; 3.13.4 (CFNC "void gtk_icon_theme_add_builtin_icon gchar* icon_name gint size GdkPixbuf* pixbuf") 
;;;;(CFNC "GType gtk_icon_info_get_type void") 
;;; 3.7.10 (CFNC "GtkIconInfo* gtk_icon_info_copy GtkIconInfo* icon_info") 
;;; 3.7.10 (CFNC "void gtk_icon_info_free GtkIconInfo* icon_info") 
(CFNC "gint gtk_icon_info_get_base_size GtkIconInfo* icon_info") 
(CFNC "gchar* gtk_icon_info_get_filename GtkIconInfo* icon_info") 
;;; 3.13.4 (CFNC "GdkPixbuf* gtk_icon_info_get_builtin_pixbuf GtkIconInfo* icon_info") 
(CFNC "GdkPixbuf* gtk_icon_info_load_icon GtkIconInfo* icon_info GError** [error]") 
;;; 3.13.3 (CFNC "void gtk_icon_info_set_raw_coordinates GtkIconInfo* icon_info gboolean raw_coordinates") 
;;; 3.13.3 (CFNC "gboolean gtk_icon_info_get_embedded_rect GtkIconInfo* icon_info GdkRectangle* rectangle") 
;;; 3.13.3 ;;; (CFNC "gboolean gtk_icon_info_get_attach_points GtkIconInfo* icon_info GdkPoint** [points] gint* [n_points]") 
;;; 3.13.3 (CFNC "gchar* gtk_icon_info_get_display_name GtkIconInfo* icon_info") 
;;;;(CFNC "GType gtk_tool_button_get_type void") 
(CFNC "GtkToolItem* gtk_tool_button_new GtkWidget* @icon_widget gchar* label") 
;;; (CFNC "GtkToolItem* gtk_tool_button_new_from_stock gchar* stock_id") 
(CFNC "void gtk_tool_button_set_label GtkToolButton* button gchar* label") 
(CFNC "gchar* gtk_tool_button_get_label GtkToolButton* button") 
(CFNC "void gtk_tool_button_set_use_underline GtkToolButton* button gboolean use_underline") 
(CFNC "gboolean gtk_tool_button_get_use_underline GtkToolButton* button") 
;;; (CFNC "void gtk_tool_button_set_stock_id GtkToolButton* button gchar* stock_id") 
;;; (CFNC "gchar* gtk_tool_button_get_stock_id GtkToolButton* button") 
(CFNC "void gtk_tool_button_set_icon_widget GtkToolButton* button GtkWidget* @icon_widget") 
(CFNC "GtkWidget* gtk_tool_button_get_icon_widget GtkToolButton* button") 
(CFNC "void gtk_tool_button_set_label_widget GtkToolButton* button GtkWidget* @label_widget") 
(CFNC "GtkWidget* gtk_tool_button_get_label_widget GtkToolButton* button") 
;;;;(CFNC "GType gtk_tool_item_get_type void") 
(CFNC "GtkToolItem* gtk_tool_item_new void") 
(CFNC "void gtk_tool_item_set_homogeneous GtkToolItem* tool_item gboolean homogeneous") 
(CFNC "gboolean gtk_tool_item_get_homogeneous GtkToolItem* tool_item") 
(CFNC "void gtk_tool_item_set_expand GtkToolItem* tool_item gboolean expand") 
(CFNC "gboolean gtk_tool_item_get_expand GtkToolItem* tool_item") 
;;;(CFNC "void gtk_tool_item_set_pack_end GtkToolItem* tool_item gboolean pack_end") 
;;;(CFNC "gboolean gtk_tool_item_get_pack_end GtkToolItem* tool_item") 
;;; out 2.11.6 (CFNC "void gtk_tool_item_set_tooltip GtkToolItem* tool_item GtkTooltips* tooltips gchar* tip_text gchar* tip_private") 
;;; 3.91.1 (CFNC "void gtk_tool_item_set_use_drag_window GtkToolItem* toolitem gboolean use_drag_window") 
;;; 3.91.1 (CFNC "gboolean gtk_tool_item_get_use_drag_window GtkToolItem* toolitem") 
(CFNC "void gtk_tool_item_set_visible_horizontal GtkToolItem* toolitem gboolean visible_horizontal") 
(CFNC "gboolean gtk_tool_item_get_visible_horizontal GtkToolItem* toolitem") 
(CFNC "void gtk_tool_item_set_visible_vertical GtkToolItem* toolitem gboolean visible_vertical") 
(CFNC "gboolean gtk_tool_item_get_visible_vertical GtkToolItem* toolitem") 
(CFNC "gboolean gtk_tool_item_get_is_important GtkToolItem* tool_item") 
(CFNC "void gtk_tool_item_set_is_important GtkToolItem* tool_item gboolean is_important")
;;; (CFNC "GtkIconSize gtk_tool_item_get_icon_size GtkToolItem* tool_item") 
(CFNC "GtkOrientation gtk_tool_item_get_orientation GtkToolItem* tool_item") 
(CFNC "GtkToolbarStyle gtk_tool_item_get_toolbar_style GtkToolItem* tool_item") 
;;; 3.89 (CFNC "GtkReliefStyle gtk_tool_item_get_relief_style GtkToolItem* tool_item") 
(CFNC "GtkWidget* gtk_tool_item_retrieve_proxy_menu_item GtkToolItem* tool_item") 
(CFNC "GtkWidget* gtk_tool_item_get_proxy_menu_item GtkToolItem* tool_item gchar* menu_item_id") 
(CFNC "void gtk_tool_item_set_proxy_menu_item GtkToolItem* @tool_item gchar* menu_item_id GtkWidget* @menu_item") 

(CFNC "gboolean gtk_list_store_remove GtkListStore* list_store GtkTreeIter* iter")
;;; type changed at some point

;;; 3.93.0 (CFNC "void gdk_display_set_double_click_distance GdkDisplay* display guint distance")

;;; 3.9.8
;;; (CFNC "gboolean gtk_action_group_get_sensitive GtkActionGroup* action_group")
;;; (CFNC "void gtk_action_group_set_sensitive GtkActionGroup* action_group gboolean sensitive")
;;; (CFNC "gboolean gtk_action_group_get_visible GtkActionGroup* action_group")
;;; (CFNC "void gtk_action_group_set_visible GtkActionGroup* action_group gboolean visible")
;;; (CFNC "void gtk_action_group_add_action_with_accel GtkActionGroup* action_group GtkAction* action gchar* accelerator")
;;; (CFNC "GtkAction* gtk_action_new gchar* name gchar* label gchar* tooltip gchar* stock_id")
;;; (CFNC "gboolean gtk_action_is_sensitive GtkAction* action")
;;; (CFNC "gboolean gtk_action_get_sensitive GtkAction* action")
;;; (CFNC "gboolean gtk_action_is_visible GtkAction* action")
;;; (CFNC "gboolean gtk_action_get_visible GtkAction* action")

;;; 3.13.2 (CFNC "void gtk_button_set_alignment GtkButton* button gfloat xalign gfloat yalign")
;;; 3.13.2 (CFNC "void gtk_button_get_alignment GtkButton* button gfloat* [xalign] gfloat* [yalign]")
(CFNC "void gtk_cell_layout_reorder GtkCellLayout* cell_layout GtkCellRenderer* cell gint position")
;;; 3.93.0 (CFNC "void gtk_clipboard_request_targets GtkClipboard* clipboard GtkClipboardTargetsReceivedFunc func lambda_data @func_info")
;;; 3.93.0 (CFNC "gboolean gtk_clipboard_wait_for_targets GtkClipboard* clipboard GdkAtom** [targets] gint* [n_targets]") ; FREE (targets)
(CFNC "void gtk_menu_shell_cancel GtkMenuShell* menu_shell")
(CFNC "GtkWidget* gtk_paned_get_child1 GtkPaned* paned")
(CFNC "GtkWidget* gtk_paned_get_child2 GtkPaned* paned")
;;; (CFNC "GtkRadioAction* gtk_radio_action_new gchar* name gchar* label gchar* tooltip gchar* stock_id gint value")
;;; (CFNC "GtkToggleAction* gtk_toggle_action_new gchar* name gchar* label gchar* tooltip gchar* stock_id")
(CFNC "void gtk_window_set_accept_focus GtkWindow* window gboolean setting")
(CFNC "gboolean gtk_window_get_accept_focus GtkWindow* window")

(CFNC "gpointer g_list_nth_data GList* list guint n")

(CCAST "GTK_ACCEL_MAP(obj)" "GtkAccelMap")
(CCHK "GTK_IS_ACCEL_MAP(obj)" "GtkAccelMap")

;;;;(CFNC "GType gtk_accel_map_get_type void")
(CFNC "GtkAccelMap* gtk_accel_map_get void")
(CFNC "void gtk_combo_box_popup GtkComboBox* combo_box")
(CFNC "void gtk_combo_box_popdown GtkComboBox* combo_box")
(CFNC "GtkWidget* gtk_radio_menu_item_new_from_widget GtkRadioMenuItem* group")
(CFNC "GtkWidget* gtk_radio_menu_item_new_with_mnemonic_from_widget GtkRadioMenuItem* group gchar* label")
(CFNC "GtkWidget* gtk_radio_menu_item_new_with_label_from_widget GtkRadioMenuItem* group gchar* label")
(CFNC "PangoLayout* gtk_scale_get_layout GtkScale* scale")
(CFNC "void gtk_scale_get_layout_offsets GtkScale* scale gint* [x] gint* [y]")
;;; (CFNC "gboolean gtk_tooltips_get_info_from_tip_window GtkWindow* tip_window GtkTooltips** [tooltips] GtkWidget** [current_widget]")


(CINT "GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER" "GtkFileChooserAction")
(CINT "GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER" "GtkFileChooserAction")

;;; 2.91.1 (CFNC "GtkWidget* gtk_combo_box_entry_new_text void")
;;; 3.93.0 (CFNC "GtkTargetList* gtk_drag_source_get_target_list GtkWidget* widget")
;;; 3.93.0 (CFNC "void gtk_drag_source_set_target_list GtkWidget* widget GtkTargetList* @target_list")
(CFNC "void gtk_entry_set_alignment GtkEntry* entry gfloat xalign")
(CFNC "gfloat gtk_entry_get_alignment GtkEntry* entry")
(CFNC "void gtk_file_chooser_set_use_preview_label GtkFileChooser* chooser gboolean use_label")
(CFNC "gboolean gtk_file_chooser_get_use_preview_label GtkFileChooser* chooser")
;;; 2.13.6. (CFNC "GtkWidget* gtk_file_chooser_widget_new_with_backend GtkFileChooserAction action gchar* backend")
;;; ;(CFNC-gtk2 "void gtk_rc_reset_styles GtkSettings* settings")
;;;(CFNC "void gtk_text_layout_set_keyboard_direction GtkTextLayout* layout GtkTextDirection keyboard_dir")
;;;GtkTextLayout is buggy (and now gone)
(CFNC "GList* gtk_widget_list_mnemonic_labels GtkWidget* widget") ; FREE (g_list_free)
(CFNC "void gtk_widget_add_mnemonic_label GtkWidget* widget GtkWidget* label")
(CFNC "void gtk_widget_remove_mnemonic_label GtkWidget* widget GtkWidget* label")
(CFNC "gboolean gtk_window_activate_key GtkWindow* window GdkEventKey* event")
(CFNC "gboolean gtk_window_propagate_key_event GtkWindow* window GdkEventKey* event")

(CINT "G_PRIORITY_HIGH" "gint")
(CINT "G_PRIORITY_DEFAULT" "gint")
(CINT "G_PRIORITY_HIGH_IDLE" "gint")
(CINT "G_PRIORITY_DEFAULT_IDLE" "gint")
(CINT "G_PRIORITY_LOW" "gint")

(CFNC "GQuark g_quark_from_string gchar* string")
(CFNC "gchar* g_quark_to_string GQuark quark")



;;; 2.91.6 (CLNG "GTK_TYPE_CELL_VIEW")
(CCAST "GTK_CELL_VIEW(obj)" "GtkCellView*")
(CCHK "GTK_IS_CELL_VIEW(obj)" "GtkCellView*")
;;; 2.91.6 (CLNG "GTK_TYPE_ABOUT_DIALOG")
(CCAST "GTK_ABOUT_DIALOG(obj)" "GtkAboutDialog*")
(CCHK "GTK_IS_ABOUT_DIALOG(obj)" "GtkAboutDialog*")
;;; 2.91.6 (CLNG "GTK_TYPE_CELL_RENDERER_COMBO")
(CCAST "GTK_CELL_RENDERER_COMBO(obj)" "GtkCellRendererCombo*")
(CCHK "GTK_IS_CELL_RENDERER_COMBO(obj)" "GtkCellRendererCombo*")
;;; 2.91.6 (CLNG "GTK_TYPE_CELL_RENDERER_PROGRESS")
(CCAST "GTK_CELL_RENDERER_PROGRESS(obj)" "GtkCellRendererProgress*")
(CCHK "GTK_IS_CELL_RENDERER_PROGRESS(obj)" "GtkCellRendererProgress*")
;;; 2.91.6 (CLNG "GTK_TYPE_ICON_VIEW")
(CCAST "GTK_ICON_VIEW(obj)" "GtkIconView*")
(CCHK "GTK_IS_ICON_VIEW(obj)" "GtkIconView*")

;;;;(CFNC "GType gtk_cell_view_get_type void")
(CFNC "GtkWidget* gtk_cell_view_new void")
(CFNC "GtkWidget* gtk_cell_view_new_with_text gchar* text")
(CFNC "GtkWidget* gtk_cell_view_new_with_markup gchar* markup")
;;; 3.93.0 (CFNC "GtkWidget* gtk_cell_view_new_with_pixbuf GdkPixbuf* pixbuf")
;;;(CFNC "void gtk_cell_view_set_value GtkCellView* cell_view GtkCellRenderer* renderer gchar* property GValue* value")
;;;(CFNC "void gtk_cell_view_set_values GtkCellView* cell_view GtkCellRenderer* renderer ...")
(CFNC "void gtk_cell_view_set_model GtkCellView* cell_view GtkTreeModel* @model")
(CFNC "void gtk_cell_view_set_displayed_row GtkCellView* cell_view GtkTreePath* path")
(CFNC "GtkTreePath* gtk_cell_view_get_displayed_row GtkCellView* cell_view")
;;; (CFNC-gtk2 "gboolean gtk_cell_view_get_size_of_row GtkCellView* cell_view GtkTreePath* path GtkRequisition* requisition") ; assumes requisition is alloc'd
;;; (CFNC-gtk2 "void gtk_cell_view_set_background_color GtkCellView* cell_view GdkColor* color")
;;; out 2.5.6 (CFNC "void gtk_cell_view_set_cell_data GtkCellView* cellview")
;;; out 2.17.2 (CFNC "GList* gtk_cell_view_get_cell_renderers GtkCellView* cellview") ; FREE (g_list_free)

;;;(CFNC "gchar* gtk_action_group_translate_string GtkActionGroup* action_group gchar* string") -- out 2.5.2

;;; 3.96.0 (CFNC "gint gtk_combo_box_get_wrap_width GtkComboBox* combo_box")
;;; 3.96.0 (CFNC "gint gtk_combo_box_get_row_span_column GtkComboBox* combo_box")
;;; 3.96.0 (CFNC "gint gtk_combo_box_get_column_span_column GtkComboBox* combo_box")
;;; 3.3.2 (CFNC "gboolean gtk_combo_box_get_add_tearoffs GtkComboBox* combo_box")
;;; 3.3.2 (CFNC "void gtk_combo_box_set_add_tearoffs GtkComboBox* combo_box gboolean add_tearoffs")
;;; (CFNC "void gtk_combo_box_set_row_separator_column GtkComboBox* combo_box gint column")
;;; (CFNC "gint gtk_combo_box_get_row_separator_column GtkComboBox* combo_box")
;;; changed in 2.5.1
;;; 2.91.1 (CFNC "gchar* gtk_combo_box_get_active_text GtkComboBox* combo_box" 'free)
(CFNC "void gtk_drag_dest_add_text_targets GtkWidget* widget")
(CFNC "void gtk_drag_source_add_text_targets GtkWidget* widget")
(CFNC "void gtk_entry_completion_insert_prefix GtkEntryCompletion* completion")
(CFNC "void gtk_entry_completion_set_inline_completion GtkEntryCompletion* completion gboolean inline_completion")
(CFNC "gboolean gtk_entry_completion_get_inline_completion GtkEntryCompletion* completion")
(CFNC "void gtk_entry_completion_set_popup_completion GtkEntryCompletion* completion gboolean popup_completion")
(CFNC "gboolean gtk_entry_completion_get_popup_completion GtkEntryCompletion* completion")
(CFNC "gint gtk_entry_completion_get_text_column GtkEntryCompletion* completion")
(CFNC "gint* gtk_icon_theme_get_icon_sizes GtkIconTheme* icon_theme gchar* icon_name") ; FREE
(CFNC "GList* gtk_menu_get_for_attach_widget GtkWidget* widget ")
;;; (CFNC "void gtk_target_list_add_text_targets GtkTargetList* list") -- added arg in 2.5.4
(CFNC "void gtk_tree_view_set_fixed_height_mode GtkTreeView* tree_view gboolean enable")
(CFNC "gboolean gtk_tree_view_get_fixed_height_mode GtkTreeView* tree_view")
(CFNC "void gtk_tree_view_set_hover_selection GtkTreeView* tree_view gboolean hover")
(CFNC "gboolean gtk_tree_view_get_hover_selection GtkTreeView* tree_view")
;;; this can't work in this context without more effort than its worth
;;; (CFNC "GtkTreeViewRowSeparatorFunc gtk_tree_view_get_row_separator_func GtkTreeView* tree_view")
(CFNC "void gtk_tree_view_set_row_separator_func GtkTreeView* tree_view GtkTreeViewRowSeparatorFunc func lambda_data @func_info GtkDestroyNotify destroy")
(CFNC "void gtk_window_set_focus_on_map GtkWindow* window gboolean setting")
(CFNC "gboolean gtk_window_get_focus_on_map GtkWindow* window")
(CFNC "void gtk_window_set_icon_name GtkWindow* window gchar* name")
(CFNC "gchar* gtk_window_get_icon_name GtkWindow* window")
(CFNC "void gtk_window_set_default_icon_name gchar* name")
;;;;(CFNC "GType gtk_about_dialog_get_type void")
(CFNC "GtkWidget* gtk_about_dialog_new void")
;;; (CFNC "gchar* gtk_about_dialog_get_name GtkAboutDialog* about") ; name changed in 2.11.0
;;; (CFNC "void gtk_about_dialog_set_name GtkAboutDialog* about gchar* name")

(CFNC "gchar* gtk_about_dialog_get_version GtkAboutDialog* about")
(CFNC "void gtk_about_dialog_set_version GtkAboutDialog* about gchar* version")
(CFNC "gchar* gtk_about_dialog_get_copyright GtkAboutDialog* about")
(CFNC "void gtk_about_dialog_set_copyright GtkAboutDialog* about gchar* copyright")
(CFNC "gchar* gtk_about_dialog_get_comments GtkAboutDialog* about")
(CFNC "void gtk_about_dialog_set_comments GtkAboutDialog* about gchar* comments")
;(CFNC "gchar* gtk_about_dialog_get_license GtkAboutDialog* about")
;(CFNC "void gtk_about_dialog_set_license GtkAboutDialog* about gchar* license")
(CFNC "gchar* gtk_about_dialog_get_website GtkAboutDialog* about")
(CFNC "void gtk_about_dialog_set_website GtkAboutDialog* about gchar* website")
(CFNC "gchar* gtk_about_dialog_get_website_label GtkAboutDialog* about")
(CFNC "void gtk_about_dialog_set_website_label GtkAboutDialog* about gchar* website_label")
(CFNC "gchar** gtk_about_dialog_get_authors GtkAboutDialog* about" 'const-return)
(CFNC "void gtk_about_dialog_set_authors GtkAboutDialog* about gchar** authors" 'const)
(CFNC "gchar** gtk_about_dialog_get_documenters GtkAboutDialog* about" 'const-return)
(CFNC "void gtk_about_dialog_set_documenters GtkAboutDialog* about gchar** documenters" 'const)
(CFNC "gchar** gtk_about_dialog_get_artists GtkAboutDialog* about" 'const-return)
(CFNC "void gtk_about_dialog_set_artists GtkAboutDialog* about gchar** artists" 'const)
(CFNC "gchar* gtk_about_dialog_get_translator_credits GtkAboutDialog* about")
(CFNC "void gtk_about_dialog_set_translator_credits GtkAboutDialog* about gchar* translator_credits")
;;; 3.93.0 (CFNC "GdkPixbuf* gtk_about_dialog_get_logo GtkAboutDialog* about")
;;; 3.93.0 (CFNC "void gtk_about_dialog_set_logo GtkAboutDialog* about GdkPixbuf* @logo")

;;; order matters here
(CFNC "gchar* gtk_about_dialog_get_program_name GtkAboutDialog* about")
(CFNC "void gtk_about_dialog_set_program_name GtkAboutDialog* about gchar* name")

;;;;(CFNC "GType gtk_icon_view_get_type void")
(CFNC "GtkWidget* gtk_icon_view_new void")
(CFNC "GtkWidget* gtk_icon_view_new_with_model GtkTreeModel* model")
(CFNC "void gtk_icon_view_set_model GtkIconView* icon_view GtkTreeModel* @model")
(CFNC "GtkTreeModel* gtk_icon_view_get_model GtkIconView* icon_view")
(CFNC "void gtk_icon_view_set_text_column GtkIconView* icon_view gint column")
(CFNC "gint gtk_icon_view_get_text_column GtkIconView* icon_view")
(CFNC "void gtk_icon_view_set_markup_column GtkIconView* icon_view gint column")
(CFNC "gint gtk_icon_view_get_markup_column GtkIconView* icon_view")
(CFNC "void gtk_icon_view_set_pixbuf_column GtkIconView* icon_view gint column")
(CFNC "gint gtk_icon_view_get_pixbuf_column GtkIconView* icon_view")
;;; 2.90.7 (CFNC "void gtk_icon_view_set_orientation GtkIconView* icon_view GtkOrientation orientation")
;;; 2.90.7 (CFNC "GtkOrientation gtk_icon_view_get_orientation GtkIconView* icon_view")
(CFNC "GtkTreePath* gtk_icon_view_get_path_at_pos GtkIconView* icon_view gint x gint y")
(CFNC "void gtk_icon_view_selected_foreach GtkIconView* icon_view GtkIconViewForeachFunc func lambda_data @func_info")
(CFNC "void gtk_icon_view_set_selection_mode GtkIconView* icon_view GtkSelectionMode mode")
(CFNC "GtkSelectionMode gtk_icon_view_get_selection_mode GtkIconView* icon_view")
;;;; these two are in the header file but not the c file -- out 2.5.2
;;; (CFNC "gboolean gtk_icon_view_get_text_beside_icon GtkIconView* icon_view")
;;; (CFNC "void gtk_icon_view_set_text_beside_icon GtkIconView* icon_view gboolean text_beside_icon")
(CFNC "void gtk_icon_view_select_path GtkIconView* icon_view GtkTreePath* path")
(CFNC "void gtk_icon_view_unselect_path GtkIconView* icon_view GtkTreePath* path")
(CFNC "gboolean gtk_icon_view_path_is_selected GtkIconView* icon_view GtkTreePath* path")
(CFNC "GList* gtk_icon_view_get_selected_items GtkIconView* icon_view")
(CFNC "void gtk_icon_view_select_all GtkIconView* icon_view")
(CFNC "void gtk_icon_view_unselect_all GtkIconView* icon_view")
(CFNC "void gtk_icon_view_item_activated GtkIconView* icon_view GtkTreePath* path")
;;;;(CFNC "GType gtk_cell_renderer_combo_get_type void")
(CFNC "GtkCellRenderer* gtk_cell_renderer_combo_new void")
;;;;(CFNC "GType gtk_cell_renderer_progress_get_type void")
(CFNC "GtkCellRenderer* gtk_cell_renderer_progress_new void")

(CFNC "void gtk_combo_box_set_row_separator_func GtkComboBox* combo_box GtkTreeViewRowSeparatorFunc func lambda_data @func_info GtkDestroyNotify destroy")
(CFNC "void gtk_label_set_ellipsize GtkLabel* label PangoEllipsizeMode mode")
(CFNC "PangoEllipsizeMode gtk_label_get_ellipsize GtkLabel* label")

(CINT "PANGO_ATTR_FALLBACK" "PangoAttrType")
(CINT "PANGO_ATTR_LETTER_SPACING" "PangoAttrType")

(CINT "PANGO_UNDERLINE_ERROR" "PangoUnderline")

(CINT "PANGO_WRAP_WORD_CHAR" "PangoWrapMode")

(CINT "PANGO_ELLIPSIZE_NONE" "PangoEllipsizeMode")
(CINT "PANGO_ELLIPSIZE_START" "PangoEllipsizeMode")
(CINT "PANGO_ELLIPSIZE_MIDDLE" "PangoEllipsizeMode")
(CINT "PANGO_ELLIPSIZE_END" "PangoEllipsizeMode")

(CINT "PANGO_SCRIPT_INVALID_CODE" "PangoScript")
(CINT "PANGO_SCRIPT_COMMON" "PangoScript")
(CINT "PANGO_SCRIPT_INHERITED" "PangoScript")
(CINT "PANGO_SCRIPT_ARABIC" "PangoScript")
(CINT "PANGO_SCRIPT_ARMENIAN" "PangoScript")
(CINT "PANGO_SCRIPT_BENGALI" "PangoScript")
(CINT "PANGO_SCRIPT_BOPOMOFO" "PangoScript")
(CINT "PANGO_SCRIPT_CHEROKEE" "PangoScript")
(CINT "PANGO_SCRIPT_COPTIC" "PangoScript")
(CINT "PANGO_SCRIPT_CYRILLIC" "PangoScript")
(CINT "PANGO_SCRIPT_DESERET" "PangoScript")
(CINT "PANGO_SCRIPT_DEVANAGARI" "PangoScript")
(CINT "PANGO_SCRIPT_ETHIOPIC" "PangoScript")
(CINT "PANGO_SCRIPT_GEORGIAN" "PangoScript")
(CINT "PANGO_SCRIPT_GOTHIC" "PangoScript")
(CINT "PANGO_SCRIPT_GREEK" "PangoScript")
(CINT "PANGO_SCRIPT_GUJARATI" "PangoScript")
(CINT "PANGO_SCRIPT_GURMUKHI" "PangoScript")
(CINT "PANGO_SCRIPT_HAN" "PangoScript")
(CINT "PANGO_SCRIPT_HANGUL" "PangoScript")
(CINT "PANGO_SCRIPT_HEBREW" "PangoScript")
(CINT "PANGO_SCRIPT_HIRAGANA" "PangoScript")
(CINT "PANGO_SCRIPT_KANNADA" "PangoScript")
(CINT "PANGO_SCRIPT_KATAKANA" "PangoScript")
(CINT "PANGO_SCRIPT_KHMER" "PangoScript")
(CINT "PANGO_SCRIPT_LAO" "PangoScript")
(CINT "PANGO_SCRIPT_LATIN" "PangoScript")
(CINT "PANGO_SCRIPT_MALAYALAM" "PangoScript")
(CINT "PANGO_SCRIPT_MONGOLIAN" "PangoScript")
(CINT "PANGO_SCRIPT_MYANMAR" "PangoScript")
(CINT "PANGO_SCRIPT_OGHAM" "PangoScript")
(CINT "PANGO_SCRIPT_OLD_ITALIC" "PangoScript")
(CINT "PANGO_SCRIPT_ORIYA" "PangoScript")
(CINT "PANGO_SCRIPT_RUNIC" "PangoScript")
(CINT "PANGO_SCRIPT_SINHALA" "PangoScript")
(CINT "PANGO_SCRIPT_SYRIAC" "PangoScript")
(CINT "PANGO_SCRIPT_TAMIL" "PangoScript")
(CINT "PANGO_SCRIPT_TELUGU" "PangoScript")
(CINT "PANGO_SCRIPT_THAANA" "PangoScript")
(CINT "PANGO_SCRIPT_THAI" "PangoScript")
(CINT "PANGO_SCRIPT_TIBETAN" "PangoScript")
(CINT "PANGO_SCRIPT_CANADIAN_ABORIGINAL" "PangoScript")
(CINT "PANGO_SCRIPT_YI" "PangoScript")
(CINT "PANGO_SCRIPT_TAGALOG" "PangoScript")
(CINT "PANGO_SCRIPT_HANUNOO" "PangoScript")
(CINT "PANGO_SCRIPT_BUHID" "PangoScript")
(CINT "PANGO_SCRIPT_TAGBANWA" "PangoScript")
(CINT "PANGO_SCRIPT_BRAILLE" "PangoScript")
(CINT "PANGO_SCRIPT_CYPRIOT" "PangoScript")
(CINT "PANGO_SCRIPT_LIMBU" "PangoScript")
(CINT "PANGO_SCRIPT_OSMANYA" "PangoScript")
(CINT "PANGO_SCRIPT_SHAVIAN" "PangoScript")
(CINT "PANGO_SCRIPT_LINEAR_B" "PangoScript")
(CINT "PANGO_SCRIPT_TAI_LE" "PangoScript")
(CINT "PANGO_SCRIPT_UGARITIC" "PangoScript")

(CINT "PANGO_TAB_LEFT" "PangoTabAlign")

(CINT "PANGO_DIRECTION_WEAK_LTR" "PangoDirection")
(CINT "PANGO_DIRECTION_WEAK_RTL" "PangoDirection")
(CINT "PANGO_DIRECTION_NEUTRAL" "PangoDirection")

;; picked up from various headers -- not necessarily new in 1.5.2
(CFNC "PangoAttribute* pango_attr_fallback_new gboolean enable_fallback")
(CFNC "PangoAttribute* pango_attr_letter_spacing_new int letter_spacing")
(CFNC "PangoAttrList* pango_attr_list_filter PangoAttrList* list PangoAttrFilterFunc func gpointer data") ; FREE
(CFNC "GSList* pango_attr_iterator_get_attrs PangoAttrIterator* iterator")
;; (CFNC "PangoFontMap* pango_context_get_font_map PangoContext* context")
;;; see below (CFNC "void pango_context_set_matrix PangoContext* context PangoMatrix* matrix")
;;; -- needs const on return I think (CFNC "PangoMatrix* pango_context_get_matrix PangoContext* context")
(CFNC "int pango_font_metrics_get_underline_position PangoFontMetrics* metrics")
(CFNC "int pango_font_metrics_get_underline_thickness PangoFontMetrics* metrics")
(CFNC "int pango_font_metrics_get_strikethrough_position PangoFontMetrics* metrics")
(CFNC "int pango_font_metrics_get_strikethrough_thickness PangoFontMetrics* metrics")
(CFNC "gboolean pango_font_family_is_monospace PangoFontFamily* family")
(CFNC "void pango_font_face_list_sizes PangoFontFace* face int** [sizes] int* [n_sizes]")
;; (CFNC "void pango_fontset_foreach PangoFontset* fontset PangoFontsetForeachFunc func gpointer data")
(CFNC "void pango_layout_set_auto_dir PangoLayout* layout gboolean auto_dir")
(CFNC "gboolean pango_layout_get_auto_dir PangoLayout* layout")
;;;;;;; (CFNC "GType pango_matrix_get_type void")
;;; changed my mind -- these matrix functions appear to be internal (pango-utils.h) (need PANGO_MATRIX_INIT to get new (static) struct)
;;;(CFNC "PangoMatrix* pango_matrix_copy PangoMatrix* matrix")
;;;(CFNC "void pango_matrix_free PangoMatrix* matrix")
;;;(CFNC "void pango_matrix_translate PangoMatrix* matrix double tx double ty")
;;;(CFNC "void pango_matrix_scale PangoMatrix* matrix double scale_x double scale_y")
;;;(CFNC "void pango_matrix_rotate PangoMatrix* matrix double degrees")
;;;(CFNC "void pango_matrix_concat PangoMatrix* matrix PangoMatrix* new_matrix")
;;; 30-Oct-19 (CFNC "PangoScript pango_script_for_unichar gunichar ch")
(CFNC "PangoScriptIter* pango_script_iter_new char* text int length")
(CFNC "void pango_script_iter_get_range PangoScriptIter* iter char** [start] char** [end] PangoScript* [script]" 'const)
(CFNC "gboolean pango_script_iter_next PangoScriptIter* iter")
(CFNC "void pango_script_iter_free PangoScriptIter* iter")
;;; (CFNC "PangoLanguage* pango_script_get_sample_language PangoScript script")
;;; (CFNC "gboolean pango_language_includes_script PangoLanguage* language PangoScript script")

(CINT "GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID" "void")

;;; 2.91.6 (CLNG "GTK_TYPE_FILE_CHOOSER_BUTTON")
(CCAST "GTK_FILE_CHOOSER_BUTTON(obj)" "GtkFileChooserButton*")
(CCHK "GTK_IS_FILE_CHOOSER_BUTTON(obj)" "GtkFileChooserButton*")

;;;;(CFNC "GType gtk_file_chooser_button_get_type void")
;;; (CFNC "GtkWidget* gtk_file_chooser_button_new gchar* title")
;;; args changed 2.6.0
;;; (CFNC "GtkWidget* gtk_file_chooser_button_new_with_backend gchar* title gchar* backend")
(CFNC "GtkWidget* gtk_file_chooser_button_new_with_dialog GtkWidget* dialog")
(CFNC "gchar* gtk_file_chooser_button_get_title GtkFileChooserButton* button")
(CFNC "void gtk_file_chooser_button_set_title GtkFileChooserButton* button gchar* title")
;;; out in 256 (CFNC "gboolean gtk_file_chooser_button_get_active GtkFileChooserButton* button")
;;; ditto      (CFNC "void gtk_file_chooser_button_set_active GtkFileChooserButton* button gboolean is_active")
;;; 3.96.0 (CFNC "gboolean gdk_drag_drop_succeeded GdkDrag* context")
;;; 2.90.6 (CFNC "gboolean gdk_rgb_colormap_ditherable GdkColormap* cmap")
;;; (CFNC "void gtk_action_set_sensitive GtkAction* action gboolean sensitive")
;;; (CFNC "void gtk_action_set_visible GtkAction* action gboolean visible")
;;; 3.19.2 (CFNC "gboolean gtk_combo_box_get_focus_on_click GtkComboBox* combo")
;;; 3.19.2 (CFNC "void gtk_combo_box_set_focus_on_click GtkComboBox* combo gboolean focus_on_click")
;;; already included? (CFNC "PangoLayout* gtk_entry_get_layout GtkEntry* entry")
;;; 3.96.0 (CFNC "gint gtk_entry_layout_index_to_text_index GtkEntry* entry gint layout_index")
;;; 3.96.0 (CFNC "gint gtk_entry_text_index_to_layout_index GtkEntry* entry gint text_index")
(CFNC "void gtk_file_chooser_set_show_hidden GtkFileChooser* chooser gboolean show_hidden")
(CFNC "gboolean gtk_file_chooser_get_show_hidden GtkFileChooser* chooser")
(CFNC "void gtk_tree_view_set_hover_expand GtkTreeView* tree_view gboolean expand")
(CFNC "gboolean gtk_tree_view_get_hover_expand GtkTreeView* tree_view")


;;; actually 2.5.3 here
(CFNC "void gtk_tool_item_rebuild_menu GtkToolItem* tool_item")
(CINT "GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID" "void")
;;; there was also gtk_init_with_args

;;; 2.5.4
(CINT "GTK_IMAGE_ICON_NAME" "GtkImageType")
;;; 2.91.6 (CLNG "GTK_TYPE_MENU_TOOL_BUTTON")
(CCAST "GTK_MENU_TOOL_BUTTON(obj)" "GtkMenuToolButton*")
(CCHK "GTK_IS_MENU_TOOL_BUTTON(obj)" "GtkMenuToolButton*")

;;;;(CFNC "GType gtk_menu_tool_button_get_type void")
(CFNC "GtkToolItem* gtk_menu_tool_button_new GtkWidget* @icon_widget gchar* label")
;;; (CFNC "GtkToolItem* gtk_menu_tool_button_new_from_stock gchar* stock_id")
(CFNC "void gtk_menu_tool_button_set_menu GtkMenuToolButton* button GtkWidget* menu")
(CFNC "GtkWidget* gtk_menu_tool_button_get_menu GtkMenuToolButton* button")
;;; out 2.11.6 (CFNC "void gtk_menu_tool_button_set_arrow_tooltip GtkMenuToolButton* button GtkTooltips* tooltips gchar* tip_text gchar* tip_private")
;;; 3.93.0 (CFNC "gboolean gdk_display_supports_clipboard_persistence GdkDisplay* display")
(CFNC "gchar* gtk_about_dialog_get_logo_icon_name GtkAboutDialog* about")
(CFNC "void gtk_about_dialog_set_logo_icon_name GtkAboutDialog* about gchar* icon_name")
(CFNC "gchar* gtk_accelerator_get_label guint accelerator_key GdkModifierType accelerator_mods" 'free)
;;; 3.93.0 (CFNC "gboolean gtk_clipboard_wait_is_target_available GtkClipboard* clipboard GdkAtom target")
;;; 3.93.0 (CFNC "void gtk_clipboard_set_can_store GtkClipboard* clipboard GtkTargetEntry* @targets gint n_targets")
;;; 3.93.0 (CFNC "void gtk_clipboard_store GtkClipboard* clipboard")
;;; 3.12? (CFNC "gboolean gtk_alternative_dialog_button_order GdkScreen* @screen")
;;;(CFNC "void gtk_dialog_set_alternative_button_order GtkDialog* dialog gint first_response_id ...")
(CFNC "void gtk_drag_dest_add_image_targets GtkWidget* widget")
(CFNC "void gtk_drag_dest_add_uri_targets GtkWidget* widget")
(CFNC "void gtk_drag_source_add_image_targets GtkWidget* widget")
(CFNC "void gtk_drag_source_add_uri_targets GtkWidget* widget")
(CFNC "gint gtk_file_chooser_button_get_width_chars GtkFileChooserButton* button")
(CFNC "void gtk_file_chooser_button_set_width_chars GtkFileChooserButton* button gint n_chars")
;;; (CFNC "GtkWidget* gtk_image_new_from_icon_name gchar* icon_name GtkIconSize size")
;;; (CFNC "void gtk_image_set_from_icon_name GtkImage* image gchar* icon_name GtkIconSize size")
(CFNC "void gtk_image_set_pixel_size GtkImage* image gint pixel_size")
;;;(CFNC "void gtk_image_get_icon_name GtkImage* image gchar** [icon_name] GtkIconSize* [size]" 'const) ;; no free here -- need const
(CFNC "gint gtk_image_get_pixel_size GtkImage* image")
(CFNC "void gtk_label_set_width_chars GtkLabel* label gint n_chars")
(CFNC "gint gtk_label_get_width_chars GtkLabel* label")
;;;(CFNC "void gtk_message_dialog_format_secondary_text GtkMessageDialog* message_dialog gchar* message_format ...")
;;;(CFNC "void gtk_message_dialog_format_secondary_markup GtkMessageDialog* message_dialog gchar* message_format ...")
;;; 3.93.0 (CFNC "void gtk_target_list_add_text_targets GtkTargetList* list guint info")
;;; 3.93.0 (CFNC "void gtk_target_list_add_image_targets GtkTargetList* list guint info gboolean writable")
;;; 3.93.0 (CFNC "void gtk_target_list_add_uri_targets GtkTargetList* list guint info")
;;; 3.93.0 (CFNC "gboolean gtk_selection_data_set_pixbuf GtkSelectionData* selection_data GdkPixbuf* pixbuf")
;;; 3.93.0 (CFNC "GdkPixbuf* gtk_selection_data_get_pixbuf GtkSelectionData* selection_data") ; FREE with g_object_unref
;;; 3.93.0 (CFNC "gboolean gtk_selection_data_set_uris GtkSelectionData* selection_data gchar** uris")
;;; 3.93.0 (CFNC "gchar** gtk_selection_data_get_uris GtkSelectionData* selection_data") ; FREE with g_strfreev
(CFNC "gboolean gtk_text_buffer_backspace GtkTextBuffer* buffer GtkTextIter* iter gboolean interactive gboolean default_editable")


;;; 3.93.0 (CFNC "void gtk_clipboard_set_image GtkClipboard* clipboard GdkPixbuf* pixbuf")
;;; 3.93.0 (CFNC "void gtk_clipboard_request_image GtkClipboard* clipboard GtkClipboardImageReceivedFunc func lambda_data @func_info")
;;; 3.93.0 (CFNC "GdkPixbuf* gtk_clipboard_wait_for_image GtkClipboard* clipboard")
;;; 3.93.0 (CFNC "gboolean gtk_clipboard_wait_is_image_available GtkClipboard* clipboard")
(CFNC "void gtk_file_filter_add_pixbuf_formats GtkFileFilter* filter")
(CFNC "void gtk_label_set_single_line_mode GtkLabel* label gboolean single_line_mode")
(CFNC "gboolean gtk_label_get_single_line_mode GtkLabel* label")
(CFNC "void gtk_progress_bar_set_ellipsize GtkProgressBar* pbar PangoEllipsizeMode mode")
(CFNC "PangoEllipsizeMode gtk_progress_bar_get_ellipsize GtkProgressBar* pbar")
(CFNC "gboolean gtk_selection_data_targets_include_image GtkSelectionData* selection_data gboolean writable")


;;; 2.91.6 ;;; 2.90.6 (CLNG "GDK_TYPE_PANGO_RENDERER")
;;; 2.90.6 (CCAST "GDK_PANGO_RENDERER" "GdkPangoRenderer")
;;; 2.90.6 (CCHK "GDK_IS_PANGO_RENDERER" "GdkPangoRenderer")
;;; 2.90.6 (CLNG "PANGO_TYPE_RENDERER")
;;; 2.90.6 (CCAST "PANGO_RENDERER" "PangoRenderer")
;;; 2.90.6 (CCHK "PANGO_IS_RENDERER" "PangoRenderer")
;;; 2.90.6 (CLNG "PANGO_TYPE_RENDER_PART")

;;; -- not defined? (CFNC "void gdk_display_add_client_message_filter_full GdkDisplay* display GdkAtom message_type GdkFilterFunc func lambda_data @func_info GtkDestroyNotify destroy")
;;; actually GDestroyNotify
;;; 2.90.6 (CFNC "void gdk_draw_glyphs_transformed GdkDrawable* drawable GdkGC* gc PangoMatrix* matrix PangoFont* font gint x gint y PangoGlyphString* glyphs") 
;;; 2.90.6 (CFNC "void gdk_draw_trapezoids GdkDrawable* drawable GdkGC* gc GdkTrapezoid* trapezoids gint n_trapezoids") 
;;;;(CFNC "GType gdk_pango_renderer_get_type void") 
;;; 2.90.6 (CFNC "PangoRenderer* gdk_pango_renderer_new GdkScreen* screen") 
;;; 2.90.6 (CFNC "PangoRenderer* gdk_pango_renderer_get_default GdkScreen* screen") 
;;; 2.90.6 (CFNC "void gdk_pango_renderer_set_drawable GdkPangoRenderer* gdk_renderer GdkDrawable* drawable") 
;;; 2.90.6 (CFNC "void gdk_pango_renderer_set_gc GdkPangoRenderer* gdk_renderer GdkGC* gc") 
;;; 2.90.6 (CFNC "void gdk_pango_renderer_set_stipple GdkPangoRenderer* gdk_renderer PangoRenderPart part GdkBitmap* stipple") 
;;; 2.90.6 (CFNC "void gdk_pango_renderer_set_override_color GdkPangoRenderer* gdk_renderer PangoRenderPart part GdkColor* color") 

;;; 3.89 (CFNC "void gtk_button_set_image GtkButton* button GtkWidget* image") 
;;; 3.89 (CFNC "GtkWidget* gtk_button_get_image GtkButton* button") 
;;; 3.12? (CFNC "void gtk_dialog_set_alternative_button_order_from_array GtkDialog* dialog gint n_params gint* new_order") 
;;; 3.91.0 (CFNC "void gtk_label_set_angle GtkLabel* label gdouble angle") 
;;; 3.91.0 (CFNC "gdouble gtk_label_get_angle GtkLabel* label") 

;;; missed earlier somehow
;;; 3.93.0 (CFNC "void gtk_menu_set_screen GtkMenu* menu GdkScreen* @screen")

(CINT "PANGO_ATTR_UNDERLINE_COLOR" "PangoAttrType")
(CINT "PANGO_ATTR_STRIKETHROUGH_COLOR" "PangoAttrType")
(CINT "PANGO_RENDER_PART_FOREGROUND" "PangoRenderPart")
(CINT "PANGO_RENDER_PART_BACKGROUND" "PangoRenderPart")
(CINT "PANGO_RENDER_PART_UNDERLINE" "PangoRenderPart")
(CINT "PANGO_RENDER_PART_STRIKETHROUGH" "PangoRenderPart")

(CFNC "PangoAttribute* pango_attr_underline_color_new guint16 red guint16 green guint16 blue")
(CFNC "PangoAttribute* pango_attr_strikethrough_color_new guint16 red guint16 green guint16 blue")
;;;;(CFNC "GType pango_render_part_get_type void")
;;;;(CFNC "GType pango_renderer_get_type void")
(CFNC "void pango_renderer_draw_layout PangoRenderer* renderer PangoLayout* layout int x int y")
(CFNC "void pango_renderer_draw_layout_line PangoRenderer* renderer PangoLayoutLine* line int x int y")
(CFNC "void pango_renderer_draw_glyphs PangoRenderer* renderer PangoFont* font PangoGlyphString* glyphs int x int y")
(CFNC "void pango_renderer_draw_rectangle PangoRenderer* renderer PangoRenderPart part int x int y int width int height")
(CFNC "void pango_renderer_draw_error_underline PangoRenderer* renderer int x int y int width int height")
(CFNC "void pango_renderer_draw_trapezoid PangoRenderer* renderer PangoRenderPart part double y1 double x11 double x21 double y2 double x12 double x22")
(CFNC "void pango_renderer_draw_glyph PangoRenderer* renderer PangoFont* font PangoGlyph glyph double x double y")
(CFNC "void pango_renderer_activate PangoRenderer* renderer")
(CFNC "void pango_renderer_deactivate PangoRenderer* renderer")
(CFNC "void pango_renderer_part_changed PangoRenderer* renderer PangoRenderPart part")
(CFNC "void pango_renderer_set_color PangoRenderer* renderer PangoRenderPart part PangoColor* color")
(CFNC "PangoColor* pango_renderer_get_color PangoRenderer* renderer PangoRenderPart part")
(CFNC "void pango_renderer_set_matrix PangoRenderer* renderer PangoMatrix* matrix")
;;; (needs const on return) (CFNC "PangoMatrix* pango_renderer_get_matrix PangoRenderer* renderer")


(CINT "G_LOG_FLAG_RECURSION" "GLogLevelFlags")
(CINT "G_LOG_FLAG_FATAL" "GLogLevelFlags")
(CINT "G_LOG_LEVEL_ERROR" "GLogLevelFlags")
(CINT "G_LOG_LEVEL_CRITICAL" "GLogLevelFlags")
(CINT "G_LOG_LEVEL_WARNING" "GLogLevelFlags")
(CINT "G_LOG_LEVEL_MESSAGE" "GLogLevelFlags")
(CINT "G_LOG_LEVEL_INFO" "GLogLevelFlags")
(CINT "G_LOG_LEVEL_DEBUG" "GLogLevelFlags")
(CINT "G_LOG_LEVEL_MASK" "GLogLevelFlags")
(CINT "G_LOG_FATAL_MASK" "GLogLevelFlags")

(CFNC "guint g_log_set_handler gchar* log_domain GLogLevelFlags log_levels GLogFunc func lambda_data @func_info")
(CFNC "void g_log_remove_handler gchar* log_domain guint handler_id")


(CFNC "void gtk_cell_renderer_stop_editing GtkCellRenderer* cell gboolean canceled")
(CFNC "GtkWidget* gtk_file_chooser_button_new gchar* title GtkFileChooserAction action" 'const)
;;; 2.13.6 (CFNC "GtkWidget* gtk_file_chooser_button_new_with_backend gchar* title GtkFileChooserAction action gchar* backend" 'const)
(CFNC "void gtk_icon_view_set_columns GtkIconView* icon_view gint columns")
(CFNC "gint gtk_icon_view_get_columns GtkIconView* icon_view")
(CFNC "void gtk_icon_view_set_item_width GtkIconView* icon_view gint item_width")
(CFNC "gint gtk_icon_view_get_item_width GtkIconView* icon_view")
(CFNC "void gtk_icon_view_set_spacing GtkIconView* icon_view gint spacing")
(CFNC "gint gtk_icon_view_get_spacing GtkIconView* icon_view")
(CFNC "void gtk_icon_view_set_row_spacing GtkIconView* icon_view gint row_spacing")
(CFNC "gint gtk_icon_view_get_row_spacing GtkIconView* icon_view")
(CFNC "void gtk_icon_view_set_column_spacing GtkIconView* icon_view gint column_spacing")
(CFNC "gint gtk_icon_view_get_column_spacing GtkIconView* icon_view")
(CFNC "void gtk_icon_view_set_margin GtkIconView* icon_view gint margin")
(CFNC "gint gtk_icon_view_get_margin GtkIconView* icon_view")
(CFNC "void gtk_label_set_max_width_chars GtkLabel* label gint n_chars")
(CFNC "gint gtk_label_get_max_width_chars GtkLabel* label")
(CFNC "void gtk_list_store_insert_with_values GtkListStore* list_store GtkTreeIter* iter gint position ...")
(CFNC "void gtk_list_store_insert_with_valuesv GtkListStore* list_store GtkTreeIter* iter gint position gint* columns GValue* values gint n_values")
;;; (CFNC "void gtk_text_layout_get_iter_at_position GtkTextLayout* layout GtkTextIter* iter gint* [trailing] gint x gint y")
;;; apparently buggy
;;; (CFNC "void gtk_text_view_get_iter_at_position GtkTextView* text_view GtkTextIter* iter gint* [trailing] gint x gint y")
;;; gboolean in 3.20

(CFNC "PangoAttribute* pango_attr_size_new_absolute int size")
(CFNC "void pango_font_description_set_absolute_size PangoFontDescription* desc double size")
;;; (CFNC "gboolean pango_font_description_get_size_is_absolute const PangoFontDescription* desc")
(CFNC "PangoFontDescription* pango_layout_get_font_description PangoLayout* layout" 'const-return)

(CINT "PANGO_WEIGHT_SEMIBOLD")


;;; 3.96.0 (CINT "GTK_PACK_DIRECTION_LTR" "GtkPackDirection")
;;; 3.96.0 (CINT "GTK_PACK_DIRECTION_RTL" "GtkPackDirection")
;;; 3.96.0 (CINT "GTK_PACK_DIRECTION_TTB" "GtkPackDirection")
;;; 3.96.0 (CINT "GTK_PACK_DIRECTION_BTT" "GtkPackDirection")

(CINT "GTK_ICON_VIEW_NO_DROP" "GtkIconViewDropPosition")
(CINT "GTK_ICON_VIEW_DROP_INTO" "GtkIconViewDropPosition")
(CINT "GTK_ICON_VIEW_DROP_LEFT" "GtkIconViewDropPosition")
(CINT "GTK_ICON_VIEW_DROP_RIGHT" "GtkIconViewDropPosition")
(CINT "GTK_ICON_VIEW_DROP_ABOVE" "GtkIconViewDropPosition")
(CINT "GTK_ICON_VIEW_DROP_BELOW" "GtkIconViewDropPosition")

;;; 3.93.0 (CFNC "GdkCursor* gdk_cursor_new_from_name GdkDisplay* display gchar* name" 'const)
;;; 3.93.0 (CFNC "GdkPixbuf* gdk_cursor_get_image GdkCursor* cursor")
;;; 2.99.0 (CFNC "void gdk_display_warp_pointer GdkDisplay* display GdkScreen* screen gint x gint y")
;;; 2.91.0 (CFNC "GdkColormap* gdk_screen_get_rgba_colormap GdkScreen* screen")
;;; 3.89 (CFNC "GdkVisual* gdk_screen_get_rgba_visual GdkScreen* screen")
;;; (CFNC "GClosure* gtk_action_get_accel_closure GtkAction* action")
(CFNC "gint gtk_dialog_get_response_for_widget GtkDialog* dialog GtkWidget* widget")
(CFNC "void gtk_drag_source_set_icon_name GtkWidget* widget gchar* icon_name" 'const)
(CFNC "void gtk_entry_completion_set_popup_set_width GtkEntryCompletion* completion gboolean popup_set_width")
(CFNC "gboolean gtk_entry_completion_get_popup_set_width GtkEntryCompletion* completion")
(CFNC "void gtk_entry_completion_set_popup_single_match GtkEntryCompletion* completion gboolean popup_single_match")
(CFNC "gboolean gtk_entry_completion_get_popup_single_match GtkEntryCompletion* completion")
(CFNC "gboolean gtk_icon_view_get_item_at_pos GtkIconView* icon_view gint x gint y GtkTreePath** [path] GtkCellRenderer** [cell]")
(CFNC "gboolean gtk_icon_view_get_visible_range GtkIconView* icon_view GtkTreePath** [start_path] GtkTreePath** [end_path]")
(CFNC "void gtk_icon_view_set_cursor GtkIconView* icon_view GtkTreePath* path GtkCellRenderer* cell gboolean start_editing")
(CFNC "gboolean gtk_icon_view_get_cursor GtkIconView* icon_view GtkTreePath** [path] GtkCellRenderer** [cell]")
(CFNC "void gtk_icon_view_scroll_to_path GtkIconView* icon_view GtkTreePath* path gboolean use_align gfloat row_align gfloat col_align")
;;; 3.93.0 (CFNC "void gtk_icon_view_enable_model_drag_source GtkIconView* icon_view GdkModifierType start_button_mask GtkTargetEntry* targets gint n_targets GdkDragAction actions")
;;; 3.93.0 (CFNC "void gtk_icon_view_enable_model_drag_dest GtkIconView* icon_view GtkTargetEntry* targets gint n_targets GdkDragAction actions")
(CFNC "void gtk_icon_view_unset_model_drag_source GtkIconView* icon_view")
(CFNC "void gtk_icon_view_unset_model_drag_dest GtkIconView* icon_view")
(CFNC "void gtk_icon_view_set_reorderable GtkIconView* icon_view gboolean reorderable")
(CFNC "gboolean gtk_icon_view_get_reorderable GtkIconView* icon_view")
(CFNC "void gtk_icon_view_set_drag_dest_item GtkIconView* icon_view GtkTreePath* path GtkIconViewDropPosition pos")
(CFNC "void gtk_icon_view_get_drag_dest_item GtkIconView* icon_view GtkTreePath** [path] GtkIconViewDropPosition* [pos]")
(CFNC "gboolean gtk_icon_view_get_dest_item_at_pos GtkIconView* icon_view gint drag_x gint drag_y GtkTreePath** [path] GtkIconViewDropPosition* [pos]")
;;; 2.91.0 (CFNC "GdkPixmap* gtk_icon_view_create_drag_icon GtkIconView* icon_view GtkTreePath* path")
(CFNC "void gtk_image_clear GtkImage* image")
;;; 3.96.0 (CFNC "GtkPackDirection gtk_menu_bar_get_pack_direction GtkMenuBar* menubar")
;;; 3.96.0 (CFNC "void gtk_menu_bar_set_pack_direction GtkMenuBar* menubar GtkPackDirection pack_dir")
;;; 3.96.0 (CFNC "GtkPackDirection gtk_menu_bar_get_child_pack_direction GtkMenuBar* menubar")
;;; 3.96.0 (CFNC "void gtk_menu_bar_set_child_pack_direction GtkMenuBar* menubar GtkPackDirection child_pack_dir")
(CFNC "gboolean gtk_menu_shell_get_take_focus GtkMenuShell* menu_shell")
(CFNC "void gtk_menu_shell_set_take_focus GtkMenuShell* menu_shell gboolean take_focus")
;;; 3.1.6 (CFNC "GtkWidget* gtk_scrolled_window_get_hscrollbar GtkScrolledWindow* scrolled_window")
;;; 3.1.6 (CFNC "GtkWidget* gtk_scrolled_window_get_vscrollbar GtkScrolledWindow* scrolled_window")
;;; 3.21.3 (CFNC "void gtk_size_group_set_ignore_hidden GtkSizeGroup* size_group gboolean ignore_hidden")
;;; 3.21.3 (CFNC "gboolean gtk_size_group_get_ignore_hidden GtkSizeGroup* size_group")
;(CFNC "void gtk_stock_set_translate_func gchar* domain GtkTranslateFunc func lambda_data @func_info GtkDestroyNotify notify" 'const)
(CFNC "gboolean gtk_text_iter_forward_visible_line GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_backward_visible_line GtkTextIter* iter")
(CFNC "gboolean gtk_text_iter_forward_visible_lines GtkTextIter* iter gint count")
(CFNC "gboolean gtk_text_iter_backward_visible_lines GtkTextIter* iter gint count")
(CFNC "void gtk_tool_button_set_icon_name GtkToolButton* button gchar* icon_name" 'const)
(CFNC "gchar* gtk_tool_button_get_icon_name GtkToolButton* button" 'const-return)
;;; 3.96.0 (CFNC "void gtk_window_set_urgency_hint GtkWindow* window gboolean setting")
;;; 3.96.0 (CFNC "gboolean gtk_window_get_urgency_hint GtkWindow* window")
(CFNC "void gtk_window_present_with_time GtkWindow* window guint32 timestamp")
;(CFNC "PangoFontMap* pango_font_get_font_map PangoFont* font")


;;; from gtkitemfactory:
;typedef gchar * (*GtkTranslateFunc)	   (const gchar		*path,
;					    gpointer             func_info);
; sets label translation func -- not sure how to handle this
; currently all uses are commented out

;;; gtk 2.7.2

;(CFNC "gboolean gtk_about_dialog_get_wrap_license GtkAboutDialog* about")
;(CFNC "void gtk_about_dialog_set_wrap_license GtkAboutDialog* about gboolean wrap_license")


;;; 2.7.3

(CINT "GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM" "GtkFileChooserConfirmation")
(CINT "GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME" "GtkFileChooserConfirmation")
(CINT "GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN" "GtkFileChooserConfirmation")
;;; (CINT "GTK_FILE_CHOOSER_PROP_DO_OVERWRITE_CONFIRMATION" "GtkFileChooserProp")

;;; (CINT "GTK_FILE_CHOOSER_ACTION" "GtkFileChooserProp")
;;; (CINT "GTK_FILE_CHOOSER_PROP_FILE_SYSTEM_BACKEND" "GtkFileChooserProp")
;;; (CINT "GTK_FILE_CHOOSER_PROP_FILTER" "GtkFileChooserProp")
;;; (CINT "GTK_FILE_CHOOSER_PROP_FOLDER_MODE" "GtkFileChooserProp")
;;; (CINT "GTK_FILE_CHOOSER_PROP_LOCAL_ONLY" "GtkFileChooserProp")
;;; (CINT "GTK_FILE_CHOOSER_PROP_PREVIEW_WIDGET" "GtkFileChooserProp")
;;; (CINT "GTK_FILE_CHOOSER_PROP_PREVIEW_WIDGET_ACTIVE" "GtkFileChooserProp")
;;; (CINT "GTK_FILE_CHOOSER_PROP_EXTRA_WIDGET" "GtkFileChooserProp")
;;; (CINT "GTK_FILE_CHOOSER_PROP_SELECT_MULTIPLE" "GtkFileChooserProp")
;;; (CINT "GTK_FILE_CHOOSER_PROP_SHOW_HIDDEN" "GtkFileChooserProp")

(CFNC "void gtk_file_chooser_set_do_overwrite_confirmation GtkFileChooser* chooser gboolean do_overwrite_confirmation")
(CFNC "gboolean gtk_file_chooser_get_do_overwrite_confirmation GtkFileChooser* chooser")
(CFNC "GtkTreeModel* gtk_tree_row_reference_get_model GtkTreeRowReference* reference")
(CFNC "void gtk_tree_view_column_queue_resize GtkTreeViewColumn* tree_column")
(CFNC "gboolean gtk_tree_view_get_visible_range GtkTreeView* tree_view GtkTreePath** [start_path] GtkTreePath** [end_path]")



;;; 3.92.1 (CFNC "GtkTextAttributes* gtk_text_attributes_ref GtkTextAttributes* values")

(CINT "PANGO_SCRIPT_NEW_TAI_LUE" "PangoScript")
(CINT "PANGO_SCRIPT_BUGINESE" "PangoScript")
(CINT "PANGO_SCRIPT_GLAGOLITIC" "PangoScript")
(CINT "PANGO_SCRIPT_TIFINAGH" "PangoScript")
(CINT "PANGO_SCRIPT_SYLOTI_NAGRI" "PangoScript")
(CINT "PANGO_SCRIPT_OLD_PERSIAN" "PangoScript")
(CINT "PANGO_SCRIPT_KHAROSHTHI" "PangoScript")

;;; (CLNG "PANGO_TYPE_ITEM")
;;; (CLNG "PANGO_TYPE_LAYOUT_LINE")

;; 11.2: + double pango_matrix_get_font_scale_factor (PangoMatrix *matrix);

(CFNC "PangoAttrList* pango_attr_list_ref PangoAttrList* list")
;;;;(CFNC "GType pango_item_get_type void")
;;;;(CFNC "GType pango_layout_line_get_type void")
(CFNC "PangoLayoutLine* pango_layout_line_ref PangoLayoutLine* line")
;(CFNC "gboolean pango_is_zero_width gunichar ch" 'const-return)

(CFNC "void pango_layout_index_to_line_x PangoLayout* layout int index_ gboolean trailing int* [line] int* [x_pos]")

;;; 2.91.6 (CLNG "GTK_TYPE_RECENT_INFO")
;;; 2.91.6 (CLNG "GTK_TYPE_CELL_RENDERER_ACCEL")
;;; 2.91.6 (CLNG "GTK_TYPE_ASSISTANT")
;;; 2.91.6 (CLNG "GTK_TYPE_CELL_RENDERER_SPIN")
;;; 2.91.6 (CLNG "GTK_TYPE_LINK_BUTTON")
;;; 2.91.6 (CLNG "GTK_TYPE_RECENT_CHOOSER_DIALOG")
;;; 2.91.6 (CLNG "GTK_TYPE_RECENT_CHOOSER")
;;; 2.91.6 (CLNG "GTK_TYPE_RECENT_CHOOSER_MENU")
;;; 2.91.6 (CLNG "GTK_TYPE_RECENT_CHOOSER_WIDGET")
;;; 2.91.6 (CLNG "GTK_TYPE_STATUS_ICON")
;;; 2.91.6 (CLNG "GTK_TYPE_RECENT_MANAGER")
;;; 2.91.6 (CLNG "GTK_TYPE_RECENT_FILTER")
(CCAST "GTK_ASSISTANT(obj)" "GtkAssistant*")
(CCHK "GTK_IS_ASSISTANT(obj)" "GtkAssistant*")
(CCAST "GTK_CELL_RENDERER_ACCEL(obj)" "GtkCellRendererAccel*")
(CCHK "GTK_IS_CELL_RENDERER_ACCEL(obj)" "GtkCellRendererAccel*")
(CCAST "GTK_CELL_RENDERER_SPIN(obj)" "GtkCellRendererSpin*")
(CCHK "GTK_IS_CELL_RENDERER_SPIN(obj)" "GtkCellRendererSpin*")
(CCAST "GTK_LINK_BUTTON(obj)" "GtkLinkButton*")
(CCHK "GTK_IS_LINK_BUTTON(obj)" "GtkLinkButton*")
;;; 3.94.0 (CCAST "GTK_RECENT_CHOOSER_DIALOG(obj)" "GtkRecentChooserDialog*")
;;; 3.94.0 (CCHK "GTK_IS_RECENT_CHOOSER_DIALOG(obj)" "GtkRecentChooserDialog*")
;;; 3.94.0 (CCAST "GTK_RECENT_CHOOSER(obj)" "GtkRecentChooser*")
;;; 3.94.0 (CCHK "GTK_IS_RECENT_CHOOSER(obj)" "GtkRecentChooser*")
;;; 3.94.0 (CCAST "GTK_RECENT_CHOOSER_MENU(obj)" "GtkRecentChooserMenu*")
;;; 3.94.0 (CCHK "GTK_IS_RECENT_CHOOSER_MENU(obj)" "GtkRecentChooserMenu*")
;;; 3.94.0 (CCAST "GTK_RECENT_CHOOSER_WIDGET(obj)" "GtkRecentChooserWidget*")
;;; 3.94.0 (CCHK "GTK_IS_RECENT_CHOOSER_WIDGET(obj)" "GtkRecentChooserWidget*")
;;; 3.96.0 (CCAST "GTK_RECENT_FILTER(obj)" "GtkRecentFilter*")
;;; 3.96.0 (CCHK "GTK_IS_RECENT_FILTER(obj)" "GtkRecentFilter*")
(CCAST "GTK_RECENT_MANAGER(obj)" "GtkRecentManager*")
(CCHK "GTK_IS_RECENT_MANAGER(obj)" "GtkRecentManager*")
;;; 3.14.0 (CCAST "GTK_STATUS_ICON(obj)" "GtkStatusIcon*")
;;; 3.14.0 (CCHK "GTK_IS_STATUS_ICON(obj)" "GtkStatusIcon*")

;;; 3.93.0 (CFNC "GtkTargetList* gtk_target_list_ref GtkTargetList* list")

(CINT "GDK_SUPER_MASK" "GdkModifierType")
(CINT "GDK_HYPER_MASK" "GdkModifierType")
(CINT "GDK_META_MASK" "GdkModifierType")
(CINT "GTK_SENSITIVITY_AUTO" "GtkSensitivityType")
(CINT "GTK_SENSITIVITY_ON" "GtkSensitivityType")
(CINT "GTK_SENSITIVITY_OFF" "GtkSensitivityType")
(CINT "GTK_TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS" "GtkTextBufferTargetInfo")
(CINT "GTK_TEXT_BUFFER_TARGET_INFO_RICH_TEXT" "GtkTextBufferTargetInfo")
(CINT "GTK_TEXT_BUFFER_TARGET_INFO_TEXT" "GtkTextBufferTargetInfo")
(CINT "GTK_ASSISTANT_PAGE_CONTENT" "GtkAssistantPageType")
(CINT "GTK_ASSISTANT_PAGE_INTRO" "GtkAssistantPageType")
(CINT "GTK_ASSISTANT_PAGE_CONFIRM" "GtkAssistantPageType")
(CINT "GTK_ASSISTANT_PAGE_SUMMARY" "GtkAssistantPageType")
(CINT "GTK_ASSISTANT_PAGE_PROGRESS" "GtkAssistantPageType")
(CINT "GTK_CELL_RENDERER_ACCEL_MODE_GTK" "GtkCellRendererAccelMode")
(CINT "GTK_CELL_RENDERER_ACCEL_MODE_OTHER" "GtkCellRendererAccelMode")
;;; 3.94.0 (CINT "GTK_RECENT_SORT_NONE" "GtkRecentSortType")
;;; 3.94.0 (CINT "GTK_RECENT_SORT_MRU" "GtkRecentSortType")
;;; 3.94.0 (CINT "GTK_RECENT_SORT_LRU" "GtkRecentSortType")
;;; 3.94.0 (CINT "GTK_RECENT_SORT_CUSTOM" "GtkRecentSortType")
;;; 3.94.0 (CINT "GTK_RECENT_CHOOSER_ERROR_NOT_FOUND" "GtkRecentChooserError")
;;; 3.94.0 (CINT "GTK_RECENT_CHOOSER_ERROR_INVALID_URI" "GtkRecentChooserError")
;(CINT "GTK_RECENT_FILTER_URI" "GtkRecentFilterFlags")
;(CINT "GTK_RECENT_FILTER_DISPLAY_NAME" "GtkRecentFilterFlags")
;(CINT "GTK_RECENT_FILTER_MIME_TYPE" "GtkRecentFilterFlags")
;(CINT "GTK_RECENT_FILTER_APPLICATION" "GtkRecentFilterFlags")
;(CINT "GTK_RECENT_FILTER_GROUP" "GtkRecentFilterFlags")
;(CINT "GTK_RECENT_FILTER_AGE" "GtkRecentFilterFlags")
(CINT "GTK_RECENT_MANAGER_ERROR_NOT_FOUND" "GtkRecentManagerError")
(CINT "GTK_RECENT_MANAGER_ERROR_INVALID_URI" "GtkRecentManagerError")
;out 2.9.1 (CINT "GTK_RECENT_MANAGER_ERROR_INVALID_MIME" "GtkRecentManagerError")
(CINT "GTK_RECENT_MANAGER_ERROR_INVALID_ENCODING" "GtkRecentManagerError")
(CINT "GTK_RECENT_MANAGER_ERROR_NOT_REGISTERED" "GtkRecentManagerError")
;out 2.9.1 (CINT "GTK_RECENT_MANAGER_ERROR_BAD_EXEC_STRING" "GtkRecentManagerError")
(CINT "GTK_RECENT_MANAGER_ERROR_READ" "GtkRecentManagerError")
(CINT "GTK_RECENT_MANAGER_ERROR_WRITE" "GtkRecentManagerError")
(CINT "GTK_RECENT_MANAGER_ERROR_UNKNOWN" "GtkRecentManagerError")
;;;void gtk_tree_store_insert_with_values GtkTreeStore* tree_store GtkTreeIter* iter GtkTreeIter* parent gint position ...


(CFNC "gboolean gdk_display_supports_shapes GdkDisplay* display")
(CFNC "gboolean gdk_display_supports_input_shapes GdkDisplay* display")
;;; 3.89 (CFNC "gboolean gdk_screen_is_composited GdkScreen* screen")
;;; 3.93.0 (CFNC "void gdk_screen_set_resolution GdkScreen* screen gdouble dpi")
;;; 3.93.0 (CFNC "gdouble gdk_screen_get_resolution GdkScreen* screen")
;;; 3.89 (CFNC "GList* gdk_screen_get_window_stack GdkScreen* screen")
;;; 3.93.0 (CFNC "void gtk_clipboard_request_rich_text GtkClipboard* clipboard GtkTextBuffer* buffer GtkClipboardRichTextReceivedFunc func lambda_data @func_info")
;;; 3.93.0 (CFNC "guint8* gtk_clipboard_wait_for_rich_text GtkClipboard* clipboard GtkTextBuffer* buffer GdkAtom* format gsize* [length]")
;;; 3.93.0 (CFNC "gboolean gtk_clipboard_wait_is_rich_text_available GtkClipboard* clipboard GtkTextBuffer* buffer")
;;; 3.10 (CFNC "gchar* gtk_combo_box_get_title GtkComboBox* combo_box") ; 'const
;;; 3.10 (CFNC "void gtk_combo_box_set_title GtkComboBox* combo_box gchar* title")
(CFNC "void gtk_drag_dest_set_track_motion GtkWidget* widget gboolean track_motion")
(CFNC "gboolean gtk_drag_dest_get_track_motion GtkWidget* widget")
;(CFNC "GtkBorder* gtk_entry_get_inner_border GtkEntry* entry") ; 'const
;(CFNC "void gtk_entry_set_inner_border GtkEntry* entry GtkBorder* border") ; arg is const
;;; 3.19.2 (CFNC "gboolean gtk_file_chooser_button_get_focus_on_click GtkFileChooserButton* button")
;;; 3.19.2 (CFNC "void gtk_file_chooser_button_set_focus_on_click GtkFileChooserButton* button gboolean focus_on_click")
;(CFNC "void gtk_file_info_set_icon_name GtkFileInfo* info gchar* con_name")
;(CFNC "gchar* gtk_file_info_get_icon_name GtkFileInfo* info") ; 'const
;(CFNC "GdkPixbuf* gtk_file_info_render_icon GtkFileInfo* info GtkWidget* widget gint pixel_size GError** [error]")

;;; (CFNC "void gtk_notebook_set_group_id GtkNotebook* notebook gint group_id") ; out 2.11.0
;;; (CFNC "gint gtk_notebook_get_group_id GtkNotebook* notebook")
;;; 2.91.0 (CFNC "void gtk_notebook_set_group GtkNotebook* notebook gpointer group")
;;; 2.91.0 (CFNC "gpointer gtk_notebook_get_group GtkNotebook* notebook")

(CFNC "gboolean gtk_notebook_get_tab_reorderable GtkNotebook* notebook GtkWidget* child")
(CFNC "void gtk_notebook_set_tab_reorderable GtkNotebook* notebook GtkWidget* child gboolean reorderable")
(CFNC "gboolean gtk_notebook_get_tab_detachable GtkNotebook* notebook GtkWidget* child")
(CFNC "void gtk_notebook_set_tab_detachable GtkNotebook* notebook GtkWidget* child gboolean detachable")
;;; (CFNC "void gtk_radio_action_set_current_value GtkRadioAction* action gint current_value")
;;; the next four are still in gtkrange.h, but have been removed from gtkrange.c??
;;; 3.92.1??? (CFNC "void gtk_range_set_lower_stepper_sensitivity GtkRange* range GtkSensitivityType sensitivity")
;;; 3.92.1??? (CFNC "GtkSensitivityType gtk_range_get_lower_stepper_sensitivity GtkRange* range")
;;; 3.92.1??? (CFNC "void gtk_range_set_upper_stepper_sensitivity GtkRange* range GtkSensitivityType sensitivity")
;;; 3.92.1??? (CFNC "GtkSensitivityType gtk_range_get_upper_stepper_sensitivity GtkRange* range")
(CFNC "void gtk_scrolled_window_unset_placement GtkScrolledWindow* scrolled_window")
;;; 3.93.0 (CFNC "void gtk_target_list_add_rich_text_targets GtkTargetList* list guint info gboolean deserializable GtkTextBuffer* buffer")
;;; 3.93.0 (CFNC "GtkTargetEntry* gtk_target_table_new_from_list GtkTargetList* list gint* [n_targets]")
;;; 3.93.0 (CFNC "void gtk_target_table_free GtkTargetEntry* targets gint n_targets")
;;; 3.93.0 (CFNC "gboolean gtk_selection_data_targets_include_rich_text GtkSelectionData* selection_data GtkTextBuffer* buffer")
;;; 3.93.0 (CFNC "gboolean gtk_selection_data_targets_include_uri GtkSelectionData* selection_data")
;;; 3.93.0 (CFNC "gboolean gtk_targets_include_text GdkAtom* targets gint n_targets")
;;; 3.93.0 (CFNC "gboolean gtk_targets_include_rich_text GdkAtom* targets gint n_targets GtkTextBuffer* buffer")
;;; 3.93.0 (CFNC "gboolean gtk_targets_include_image GdkAtom* targets gint n_targets gboolean writable")
;;; 3.93.0 (CFNC "gboolean gtk_targets_include_uri GdkAtom* targets gint n_targets")
;;; 3.93.0 ;;;;(CFNC "GType gtk_target_list_get_type void")
(CFNC "GSList* gtk_size_group_get_widgets GtkSizeGroup* size_group")
;;; (CFNC-gtk2 "gboolean gtk_style_lookup_color GtkStyle* style gchar* color_name GdkColor* color")
(CFNC "gboolean gtk_text_buffer_get_has_selection GtkTextBuffer* buffer")
;;; 3.93.0 (CFNC "GtkTargetList* gtk_text_buffer_get_copy_target_list GtkTextBuffer* buffer")
;;; 3.93.0 (CFNC "GtkTargetList* gtk_text_buffer_get_paste_target_list GtkTextBuffer* buffer")
;(CFNC "void gtk_tree_store_insert_with_valuesv GtkTreeStore* tree_store GtkTreeIter* iter GtkTreeIter* parent gint position gint* columns GValue* values gint n_values")
(CFNC "gboolean gtk_tree_view_get_headers_clickable GtkTreeView* tree_view")
;;; 3.96.0 (CFNC "GtkEntry* gtk_tree_view_get_search_entry GtkTreeView* tree_view")
;;; 3.96.0 (CFNC "void gtk_tree_view_set_search_entry GtkTreeView* tree_view GtkEntry* entry")
(CFNC "GtkTreeViewSearchPositionFunc gtk_tree_view_get_search_position_func GtkTreeView* tree_view")
(CFNC "void gtk_tree_view_set_search_position_func GtkTreeView* tree_view GtkTreeViewSearchPositionFunc func lambda_data @func_info GDestroyNotify destroy")

;;; 3.22.3 (CFNC "gboolean gtk_widget_is_composited GtkWidget* widget")
;;; 2.91.0 (CFNC "void gtk_widget_input_shape_combine_mask GtkWidget* widget GdkBitmap* shape_mask gint offset_x gint offset_y")
(CFNC "void gtk_window_set_deletable GtkWindow* window gboolean setting")
(CFNC "gboolean gtk_window_get_deletable GtkWindow* window")
;;;;(CFNC "GType gtk_assistant_get_type void")
(CFNC "GtkWidget* gtk_assistant_new void")
(CFNC "gint gtk_assistant_get_current_page GtkAssistant* assistant")
(CFNC "void gtk_assistant_set_current_page GtkAssistant* assistant gint page_num")
(CFNC "gint gtk_assistant_get_n_pages GtkAssistant* assistant")
(CFNC "GtkWidget* gtk_assistant_get_nth_page GtkAssistant* assistant gint page_num")
(CFNC "gint gtk_assistant_prepend_page GtkAssistant* assistant GtkWidget* page")
(CFNC "gint gtk_assistant_append_page GtkAssistant* assistant GtkWidget* page")
(CFNC "gint gtk_assistant_insert_page GtkAssistant* assistant GtkWidget* page gint position")
(CFNC "void gtk_assistant_set_forward_page_func GtkAssistant* assistant GtkAssistantPageFunc page_func lambda_data @func_info GDestroyNotify destroy")

(CFNC "void gtk_assistant_set_page_type GtkAssistant* assistant GtkWidget* page GtkAssistantPageType type")
(CFNC "GtkAssistantPageType gtk_assistant_get_page_type GtkAssistant* assistant GtkWidget* page")
(CFNC "void gtk_assistant_set_page_title GtkAssistant* assistant GtkWidget* page gchar* title")
(CFNC "gchar* gtk_assistant_get_page_title GtkAssistant* assistant GtkWidget* page") ; 'const
;;; 3.1.4 (CFNC "void gtk_assistant_set_page_header_image GtkAssistant* assistant GtkWidget* page GdkPixbuf* pixbuf")
;;; 3.1.4 (CFNC "GdkPixbuf* gtk_assistant_get_page_header_image GtkAssistant* assistant GtkWidget* page")
;;; 3.1.4 (CFNC "void gtk_assistant_set_page_side_image GtkAssistant* assistant GtkWidget* page GdkPixbuf* pixbuf")
;;; 3.1.4 (CFNC "GdkPixbuf* gtk_assistant_get_page_side_image GtkAssistant* assistant GtkWidget* page")
(CFNC "void gtk_assistant_set_page_complete GtkAssistant* assistant GtkWidget* page gboolean complete")
(CFNC "gboolean gtk_assistant_get_page_complete GtkAssistant* assistant GtkWidget* page")
(CFNC "void gtk_assistant_add_action_widget GtkAssistant* assistant GtkWidget* child")
(CFNC "void gtk_assistant_remove_action_widget GtkAssistant* assistant GtkWidget* child")
(CFNC "void gtk_assistant_update_buttons_state GtkAssistant* assistant")
;;;;(CFNC "GType gtk_cell_renderer_accel_get_type void")
(CFNC "GtkCellRenderer* gtk_cell_renderer_accel_new void")
;;;;(CFNC "GType gtk_cell_renderer_spin_get_type void")
(CFNC "GtkCellRenderer* gtk_cell_renderer_spin_new void")
;;;;(CFNC "GType gtk_link_button_get_type void")
(CFNC "GtkWidget* gtk_link_button_new gchar* uri")
(CFNC "GtkWidget* gtk_link_button_new_with_label gchar* uri gchar* label")
(CFNC "gchar* gtk_link_button_get_uri GtkLinkButton* link_button") ; 'const
(CFNC "void gtk_link_button_set_uri GtkLinkButton* link_button gchar* uri")
;;; 2.90.1 (CFNC "GtkLinkButtonUriFunc gtk_link_button_set_uri_hook GtkLinkButtonUriFunc func lambda_data @func_info GDestroyNotify destroy")

;;;;(CFNC "GType gtk_recent_chooser_dialog_get_type void")
;;;(CFNC "GtkWidget* gtk_recent_chooser_dialog_new gchar* title GtkWindow* parent gchar* first_button_text ... G_GNUC_NULL_TERMINATED")
;;;(CFNC "GtkWidget* gtk_recent_chooser_dialog_new_for_manager gchar* title GtkWindow* parent GtkRecentManager* manager gchar* first_button_text ... G_GNUC_NULL_TERMINATED")
;;; 3.96.0 (CFNC "GQuark gtk_recent_chooser_error_quark void")
;;; 3.94.0 (CFNC "void gtk_recent_chooser_set_show_private GtkRecentChooser* chooser gboolean show_private")
;;; 3.94.0 (CFNC "gboolean gtk_recent_chooser_get_show_private GtkRecentChooser* chooser")
;;; 3.94.0 (CFNC "void gtk_recent_chooser_set_show_not_found GtkRecentChooser* chooser gboolean show_not_found")
;;; 3.94.0 (CFNC "gboolean gtk_recent_chooser_get_show_not_found GtkRecentChooser* chooser")
;;; 3.94.0 (CFNC "void gtk_recent_chooser_set_select_multiple GtkRecentChooser* chooser gboolean select_multiple")
;;; 3.94.0 (CFNC "gboolean gtk_recent_chooser_get_select_multiple GtkRecentChooser* chooser")
;;; 3.94.0 (CFNC "void gtk_recent_chooser_set_limit GtkRecentChooser* chooser gint limit")
;;; 3.94.0 (CFNC "gint gtk_recent_chooser_get_limit GtkRecentChooser* chooser")
;;; 3.94.0 (CFNC "void gtk_recent_chooser_set_local_only GtkRecentChooser* chooser gboolean local_only")
;;; 3.94.0 (CFNC "gboolean gtk_recent_chooser_get_local_only GtkRecentChooser* chooser")
;;; 3.94.0 (CFNC "void gtk_recent_chooser_set_show_tips GtkRecentChooser* chooser gboolean show_tips")
;;; 3.94.0 (CFNC "gboolean gtk_recent_chooser_get_show_tips GtkRecentChooser* chooser")
;;; 3.94.0 ;;; out 12.0 (CFNC "void gtk_recent_chooser_set_show_numbers GtkRecentChooser* chooser gboolean show_numbers")
;;; 3.94.0 ;;;          (CFNC "gboolean gtk_recent_chooser_get_show_numbers GtkRecentChooser* chooser")
;;; 3.94.0 (CFNC "void gtk_recent_chooser_set_show_icons GtkRecentChooser* chooser gboolean show_icons")
;;; 3.94.0 (CFNC "gboolean gtk_recent_chooser_get_show_icons GtkRecentChooser* chooser")
;;; 3.94.0 (CFNC "void gtk_recent_chooser_set_sort_type GtkRecentChooser* chooser GtkRecentSortType sort_type")
;;; 3.94.0 (CFNC "GtkRecentSortType gtk_recent_chooser_get_sort_type GtkRecentChooser* chooser")
;;; 3.94.0 (CFNC "void gtk_recent_chooser_set_sort_func GtkRecentChooser* chooser GtkRecentSortFunc func lambda_data @func_info GDestroyNotify data_destroy")
;;; 3.94.0 
;;; 3.94.0 (CFNC "gboolean gtk_recent_chooser_set_current_uri GtkRecentChooser* chooser gchar* uri GError** [error]")
;;; 3.94.0 (CFNC "gchar* gtk_recent_chooser_get_current_uri GtkRecentChooser* chooser")
;;; 3.94.0 (CFNC "GtkRecentInfo* gtk_recent_chooser_get_current_item GtkRecentChooser* chooser")
;;; 3.94.0 (CFNC "gboolean gtk_recent_chooser_select_uri GtkRecentChooser* chooser gchar* uri GError** [error]")
;;; 3.94.0 (CFNC "void gtk_recent_chooser_unselect_uri GtkRecentChooser* chooser gchar* uri")
;;; 3.94.0 (CFNC "void gtk_recent_chooser_select_all GtkRecentChooser* chooser")
;;; 3.94.0 (CFNC "void gtk_recent_chooser_unselect_all GtkRecentChooser* chooser")
;;; 3.94.0 (CFNC "GList* gtk_recent_chooser_get_items GtkRecentChooser* chooser")
;;; 3.94.0 (CFNC "gchar** gtk_recent_chooser_get_uris GtkRecentChooser* chooser gsize* [length]")
;;; 3.94.0 (CFNC "void gtk_recent_chooser_add_filter GtkRecentChooser* chooser GtkRecentFilter* filter")
;;; 3.94.0 (CFNC "void gtk_recent_chooser_remove_filter GtkRecentChooser* chooser GtkRecentFilter* filter")
;;; 3.94.0 (CFNC "GSList* gtk_recent_chooser_list_filters GtkRecentChooser* chooser")
;;; 3.94.0 (CFNC "void gtk_recent_chooser_set_filter GtkRecentChooser* chooser GtkRecentFilter* filter")
;;; 3.94.0 (CFNC "GtkRecentFilter* gtk_recent_chooser_get_filter GtkRecentChooser* chooser")
;;;;(CFNC "GType gtk_recent_chooser_menu_get_type void")
;;; 3.96.0 (CFNC "GtkWidget* gtk_recent_chooser_menu_new void")
;;; 3.96.0 (CFNC "GtkWidget* gtk_recent_chooser_menu_new_for_manager GtkRecentManager* manager")
;;; 3.94.0 (CFNC "gboolean gtk_recent_chooser_menu_get_show_numbers GtkRecentChooserMenu* menu")
;;; 3.94.0 (CFNC "void gtk_recent_chooser_menu_set_show_numbers GtkRecentChooserMenu* menu gboolean show_numbers")
;;; 3.94.0 ;;;;(CFNC "GType gtk_recent_chooser_widget_get_type void")
;;; 3.94.0 (CFNC "GtkWidget* gtk_recent_chooser_widget_new void")
;;; 3.94.0 (CFNC "GtkWidget* gtk_recent_chooser_widget_new_for_manager GtkRecentManager* manager")
;;;;(CFNC "GType gtk_recent_filter_get_type void")
;;; 3.96.0 (CFNC "GtkRecentFilter* gtk_recent_filter_new void")
;;; 3.96.0 (CFNC "void gtk_recent_filter_set_name GtkRecentFilter* filter gchar* name")
;;; 3.96.0 (CFNC "gchar* gtk_recent_filter_get_name GtkRecentFilter* filter" 'const-return) 
;;; 3.96.0 (CFNC "void gtk_recent_filter_add_mime_type GtkRecentFilter* filter gchar* mime_type")
;;; 3.96.0 (CFNC "void gtk_recent_filter_add_pattern GtkRecentFilter* filter gchar* pattern")
;;; 3.96.0 (CFNC "void gtk_recent_filter_add_pixbuf_formats GtkRecentFilter* filter")
;;; 3.96.0 (CFNC "void gtk_recent_filter_add_application GtkRecentFilter* filter gchar* application")
;;; 3.96.0 (CFNC "void gtk_recent_filter_add_group GtkRecentFilter* filter gchar* group")
;;; 3.96.0 (CFNC "void gtk_recent_filter_add_age GtkRecentFilter* filter gint days")
;(CFNC "void gtk_recent_filter_add_custom GtkRecentFilter* filter GtkRecentFilterFlags needed GtkRecentFilterFunc func lambda_data @func_info GDestroyNotify data_destroy")
;(CFNC "GtkRecentFilterFlags gtk_recent_filter_get_needed GtkRecentFilter* filter")
;(CFNC "gboolean gtk_recent_filter_filter GtkRecentFilter* filter GtkRecentFilterInfo* filter_info")
(CFNC "GQuark gtk_recent_manager_error_quark void")
;;;;(CFNC "GType gtk_recent_manager_get_type void")
(CFNC "GtkRecentManager* gtk_recent_manager_new void")
(CFNC "GtkRecentManager* gtk_recent_manager_get_default void")
;;; out 2.11.4 (CFNC "GtkRecentManager* gtk_recent_manager_get_for_screen GdkScreen* screen")
;;; out 2.11.4 (CFNC "void gtk_recent_manager_set_screen GtkRecentManager* manager GdkScreen* screen")
(CFNC "gboolean gtk_recent_manager_remove_item GtkRecentManager* manager gchar* uri GError** [error]")
(CFNC "GtkRecentInfo* gtk_recent_manager_lookup_item GtkRecentManager* manager gchar* uri GError** [error]")
(CFNC "gboolean gtk_recent_manager_has_item GtkRecentManager* manager gchar* uri")
(CFNC "gboolean gtk_recent_manager_move_item GtkRecentManager* manager gchar* uri gchar* new_uri GError** [error]")
;;; 2.90.6 (CFNC "void gtk_recent_manager_set_limit GtkRecentManager* manager gint limit")
;;; 2.90.6 (CFNC "gint gtk_recent_manager_get_limit GtkRecentManager* manager")
(CFNC "GList* gtk_recent_manager_get_items GtkRecentManager* manager")
(CFNC "gint gtk_recent_manager_purge_items GtkRecentManager* manager GError** [error]")
;;;;(CFNC "GType gtk_recent_info_get_type void")
(CFNC "GtkRecentInfo* gtk_recent_info_ref GtkRecentInfo* info")
(CFNC "void gtk_recent_info_unref GtkRecentInfo* info")
(CFNC "gchar* gtk_recent_info_get_uri GtkRecentInfo* info") ; 'const
(CFNC "gchar* gtk_recent_info_get_display_name GtkRecentInfo* info" 'const-return)
(CFNC "gchar* gtk_recent_info_get_description GtkRecentInfo* info" 'const-return)
(CFNC "gchar* gtk_recent_info_get_mime_type GtkRecentInfo* info" 'const-return)
(CFNC "time_t gtk_recent_info_get_added GtkRecentInfo* info")
(CFNC "time_t gtk_recent_info_get_modified GtkRecentInfo* info")
(CFNC "time_t gtk_recent_info_get_visited GtkRecentInfo* info")
(CFNC "gboolean gtk_recent_info_get_private_hint GtkRecentInfo* info")
;(CFNC "gboolean gtk_recent_info_get_application_info GtkRecentInfo* info gchar* app_name gchar** [app_exec] guint* [count] time_t* [time]") ; const args
(CFNC "gchar** gtk_recent_info_get_applications GtkRecentInfo* info gsize* [length]")
(CFNC "gchar* gtk_recent_info_last_application GtkRecentInfo* info")
(CFNC "gboolean gtk_recent_info_has_application GtkRecentInfo* info gchar* app_name")
(CFNC "gchar** gtk_recent_info_get_groups GtkRecentInfo* info gsize* [length]")
(CFNC "gboolean gtk_recent_info_has_group GtkRecentInfo* info gchar* group_name")
;;; 3.93.0 (CFNC "GdkPixbuf* gtk_recent_info_get_icon GtkRecentInfo* info gint size")
(CFNC "gchar* gtk_recent_info_get_short_name GtkRecentInfo* info")
(CFNC "gchar* gtk_recent_info_get_uri_display GtkRecentInfo* info")
(CFNC "gint gtk_recent_info_get_age GtkRecentInfo* info")
(CFNC "gboolean gtk_recent_info_is_local GtkRecentInfo* info")
(CFNC "gboolean gtk_recent_info_exists GtkRecentInfo* info")
(CFNC "gboolean gtk_recent_info_match GtkRecentInfo* info_a GtkRecentInfo* info_b")
;;;;(CFNC "GType gtk_status_icon_get_type void")
;;; 3.14.0 (CFNC "GtkStatusIcon* gtk_status_icon_new void")
;;; 3.14.0 (CFNC "GtkStatusIcon* gtk_status_icon_new_from_pixbuf GdkPixbuf* pixbuf")
;;; 3.14.0 (CFNC "GtkStatusIcon* gtk_status_icon_new_from_file gchar* filename")
;;; 3.14.0 ;;; (CFNC "GtkStatusIcon* gtk_status_icon_new_from_stock gchar* stock_id")
;;; 3.14.0 (CFNC "GtkStatusIcon* gtk_status_icon_new_from_icon_name gchar* icon_name")
;;; 3.14.0 (CFNC "void gtk_status_icon_set_from_pixbuf GtkStatusIcon* status_icon GdkPixbuf* pixbuf")
;;; 3.14.0 (CFNC "void gtk_status_icon_set_from_file GtkStatusIcon* status_icon gchar* filename")
;;; 3.14.0 ;;; (CFNC "void gtk_status_icon_set_from_stock GtkStatusIcon* status_icon gchar* stock_id")
;;; 3.14.0 (CFNC "void gtk_status_icon_set_from_icon_name GtkStatusIcon* status_icon gchar* icon_name")
;;; 3.14.0 (CFNC "GtkImageType gtk_status_icon_get_storage_type GtkStatusIcon* status_icon")
;;; 3.14.0 (CFNC "GdkPixbuf* gtk_status_icon_get_pixbuf GtkStatusIcon* status_icon")
;;; 3.14.0 ;;; (CFNC "gchar* gtk_status_icon_get_stock GtkStatusIcon* status_icon") ; 'const
;;; 3.14.0 (CFNC "gchar* gtk_status_icon_get_icon_name GtkStatusIcon* status_icon") ; 'const
;;; 3.14.0 (CFNC "gint gtk_status_icon_get_size GtkStatusIcon* status_icon")
;;; 3.14.0 ;;; out 2.15.0 (CFNC "void gtk_status_icon_set_tooltip GtkStatusIcon* status_icon gchar* tooltip_text")
;;; 3.14.0 (CFNC "void gtk_status_icon_set_visible GtkStatusIcon* status_icon gboolean visible")
;;; 3.14.0 (CFNC "gboolean gtk_status_icon_get_visible GtkStatusIcon* status_icon")
;;; 3.14.0 ;;; 2.90.7 (CFNC "void gtk_status_icon_set_blinking GtkStatusIcon* status_icon gboolean blinking")
;;; 3.14.0 ;;; 2.90.7 (CFNC "gboolean gtk_status_icon_get_blinking GtkStatusIcon* status_icon")
;;; 3.14.0 (CFNC "gboolean gtk_status_icon_is_embedded GtkStatusIcon* status_icon")
;;; 3.14.0 (CFNC "void gtk_status_icon_position_menu GtkMenu* menu gint* [x] gint* [y] gboolean* [push_in] gpointer user_data")
;;; 3.93.0 (CFNC "GdkAtom gtk_text_buffer_register_serialize_format GtkTextBuffer* buffer gchar* mime_type GtkTextBufferSerializeFunc function gpointer user_data GDestroyNotify user_data_destroy")
;;; 3.93.0 (CFNC "GdkAtom gtk_text_buffer_register_serialize_tagset GtkTextBuffer* buffer gchar* tagset_name")
;;; 3.93.0 (CFNC "GdkAtom gtk_text_buffer_register_deserialize_format GtkTextBuffer* buffer gchar* mime_type GtkTextBufferDeserializeFunc function gpointer user_data GDestroyNotify user_data_destroy")
;;; 3.93.0 (CFNC "GdkAtom gtk_text_buffer_register_deserialize_tagset GtkTextBuffer* buffer gchar* tagset_name")
;;; 3.93.0 (CFNC "void gtk_text_buffer_unregister_serialize_format GtkTextBuffer* buffer GdkAtom format")
;;; 3.93.0 (CFNC "void gtk_text_buffer_unregister_deserialize_format GtkTextBuffer* buffer GdkAtom format")
;;; 3.93.0 (CFNC "void gtk_text_buffer_deserialize_set_can_create_tags GtkTextBuffer* buffer GdkAtom format gboolean can_create_tags")
;;; 3.93.0 (CFNC "gboolean gtk_text_buffer_deserialize_get_can_create_tags GtkTextBuffer* buffer GdkAtom format")
;;; 3.93.0 (CFNC "GdkAtom* gtk_text_buffer_get_serialize_formats GtkTextBuffer* buffer gint* [n_formats]")
;;; 3.93.0 (CFNC "GdkAtom* gtk_text_buffer_get_deserialize_formats GtkTextBuffer* buffer gint* [n_formats]")
;;; 3.93.0 (CFNC "guint8* gtk_text_buffer_serialize GtkTextBuffer* register_buffer GtkTextBuffer* content_buffer GdkAtom format GtkTextIter* start GtkTextIter* end gsize* [length]")
;;; 3.93.0 (CFNC "gboolean gtk_text_buffer_deserialize GtkTextBuffer* register_buffer GtkTextBuffer* content_buffer GdkAtom format GtkTextIter* iter guint8* data gsize length GError** [error]")



;;; 2.90.1 (CFNC "void gtk_notebook_set_window_creation_hook GtkNotebookWindowCreationFunc func gpointer data GDestroyNotify destroy")
;; destroy arg added later
(CFNC "gboolean gtk_recent_manager_add_item GtkRecentManager* manager gchar* uri")
(CFNC "gboolean gtk_recent_manager_add_full GtkRecentManager* manager gchar* uri GtkRecentData* recent_data")
;; error arg removed

(CINT "GTK_MESSAGE_OTHER" "GtkMessageType")
;(CFNC "void gtk_message_dialog_set_image GtkMessageDialog* dialog GtkWidget* image")
;; messagedialog is commented out above so this needs to wait until it is "real"

;; 2.9.2:
;(CFNC "gboolean gtk_status_icon_get_geometry GtkStatusIcon* status_icon GdkScreen** [screen] GdkRectangle* [area] GtkOrientation* [orientation]")
;rectangle ref arg to xen needs explicit conversion here
;(CFNC "gboolean gdk_color_parse gchar* spec GdkColor* color"); -- need both versions somehow (gint above)

;; 2.9.3:
(CINT "GTK_TREE_VIEW_GRID_LINES_NONE" "GtkTreeViewGridLines")
(CINT "GTK_TREE_VIEW_GRID_LINES_HORIZONTAL" "GtkTreeViewGridLines")
(CINT "GTK_TREE_VIEW_GRID_LINES_VERTICAL" "GtkTreeViewGridLines")
(CINT "GTK_TREE_VIEW_GRID_LINES_BOTH" "GtkTreeViewGridLines")

;;; rtn type
(CFNC "gboolean gtk_tree_model_filter_convert_child_iter_to_iter GtkTreeModelFilter* filter GtkTreeIter* filter_iter GtkTreeIter* child_iter")

(CFNC "GtkTreeViewGridLines gtk_tree_view_get_grid_lines GtkTreeView* tree_view")
(CFNC "void gtk_tree_view_set_grid_lines GtkTreeView* tree_view GtkTreeViewGridLines grid_lines")
(CFNC "gboolean gtk_tree_view_get_enable_tree_lines GtkTreeView* tree_view")
(CFNC "void gtk_tree_view_set_enable_tree_lines GtkTreeView* tree_view gboolean enabled")
  
;; 2.9.4:
(CFNC "void gtk_label_set_line_wrap_mode GtkLabel* label PangoWrapMode wrap_mode")
(CFNC "PangoWrapMode gtk_label_get_line_wrap_mode GtkLabel* label")


;;; printer stuff -- only include gtkprintoperation for now (it's in gtk.h) -> settings context preview as well

;(CCAST "GTK_PRINTER(obj)" "GtkPrinter*")
;(CCHK "GTK_IS_PRINTER(obj)" "GtkPrinter*")

;(CCAST "GTK_PRINTER_OPTION_WIDGET(obj)" "GtkPrinterOptionWidget*")
;(CCHK "GTK_IS_PRINTER_OPTION_WIDGET(obj)" "GtkPrinterOptionWidget*")

(CCAST "GTK_PRINT_CONTEXT(obj)" "GtkPrintContext*")
(CCHK "GTK_IS_PRINT_CONTEXT(obj)" "GtkPrintContext*")

;(CCAST "GTK_PRINT_JOB(obj)" "GtkPrintJob*")
;(CCHK "GTK_IS_PRINT_JOB(obj)" "GtkPrintJob*")

(CCAST "GTK_PRINT_OPERATION(obj)" "GtkPrintOperation*")
(CCHK "GTK_IS_PRINT_OPERATION(obj)" "GtkPrintOperation*")

;(CCAST "GTK_PRINT_OPERATION_PREVIEW(obj)" "GtkPrintOperationPreview*")
;(CCHK "GTK_IS_PRINT_OPERATION_PREVIEW(obj)" "GtkPrintOperationPreview*")

(CCAST "GTK_PRINT_SETTINGS(obj)" "GtkPrintSettings*")
(CCHK "GTK_IS_PRINT_SETTINGS(obj)" "GtkPrintSettings*")

;(CCAST "GTK_PRINT_UNIX_DIALOG(obj)" "GtkPrintUnixDialog*")
;(CCHK "GTK_IS_PRINT_UNIX_DIALOG(obj)" "GtkPrintUnixDialog*")

;(CINT "GTK_PRINT_CAPABILITY_PAGE_SET" "GtkPrintCapabilities")
;(CINT "GTK_PRINT_CAPABILITY_COPIES" "GtkPrintCapabilities")
;(CINT "GTK_PRINT_CAPABILITY_COLLATE" "GtkPrintCapabilities")
;(CINT "GTK_PRINT_CAPABILITY_REVERSE" "GtkPrintCapabilities")
;(CINT "GTK_PRINT_CAPABILITY_SCALE" "GtkPrintCapabilities")
;(CINT "GTK_PRINT_CAPABILITY_GENERATE_PDF" "GtkPrintCapabilities")
;(CINT "GTK_PRINT_CAPABILITY_GENERATE_PS" "GtkPrintCapabilities")
;(CINT "GTK_PRINT_CAPABILITY_PREVIEW" "GtkPrintCapabilities")

(CINT "GTK_PRINT_STATUS_INITIAL" "GtkPrintStatus")
(CINT "GTK_PRINT_STATUS_PREPARING" "GtkPrintStatus")
(CINT "GTK_PRINT_STATUS_GENERATING_DATA" "GtkPrintStatus")
(CINT "GTK_PRINT_STATUS_SENDING_DATA" "GtkPrintStatus")
(CINT "GTK_PRINT_STATUS_PENDING" "GtkPrintStatus")
(CINT "GTK_PRINT_STATUS_PENDING_ISSUE" "GtkPrintStatus")
(CINT "GTK_PRINT_STATUS_PRINTING" "GtkPrintStatus")
(CINT "GTK_PRINT_STATUS_FINISHED" "GtkPrintStatus")
(CINT "GTK_PRINT_STATUS_FINISHED_ABORTED" "GtkPrintStatus")

(CINT "GTK_PRINT_OPERATION_RESULT_ERROR" "GtkPrintOperationResult")
(CINT "GTK_PRINT_OPERATION_RESULT_APPLY" "GtkPrintOperationResult")
(CINT "GTK_PRINT_OPERATION_RESULT_CANCEL" "GtkPrintOperationResult")
(CINT "GTK_PRINT_OPERATION_RESULT_IN_PROGRESS" "GtkPrintOperationResult")

(CINT "GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG" "GtkPrintOperationAction")
(CINT "GTK_PRINT_OPERATION_ACTION_PRINT" "GtkPrintOperationAction")
(CINT "GTK_PRINT_OPERATION_ACTION_PREVIEW" "GtkPrintOperationAction")
(CINT "GTK_PRINT_OPERATION_ACTION_EXPORT" "GtkPrintOperationAction")

(CINT "GTK_PRINT_ERROR_GENERAL" "GtkPrintError")
(CINT "GTK_PRINT_ERROR_INTERNAL_ERROR" "GtkPrintError")
(CINT "GTK_PRINT_ERROR_NOMEM" "GtkPrintError")

(CINT "GTK_PRINT_ERROR_INVALID_FILE" "GtkPrintError")

(CSTR "GTK_PRINT_SETTINGS_PRINTER")
(CSTR "GTK_PRINT_SETTINGS_ORIENTATION")
(CSTR "GTK_PRINT_SETTINGS_PAPER_FORMAT")
(CSTR "GTK_PRINT_SETTINGS_PAPER_WIDTH")
(CSTR "GTK_PRINT_SETTINGS_PAPER_HEIGHT")
(CSTR "GTK_PRINT_SETTINGS_N_COPIES")
(CSTR "GTK_PRINT_SETTINGS_DEFAULT_SOURCE")
(CSTR "GTK_PRINT_SETTINGS_QUALITY")
(CSTR "GTK_PRINT_SETTINGS_RESOLUTION")
(CSTR "GTK_PRINT_SETTINGS_USE_COLOR")
(CSTR "GTK_PRINT_SETTINGS_DUPLEX")
(CSTR "GTK_PRINT_SETTINGS_COLLATE")
(CSTR "GTK_PRINT_SETTINGS_REVERSE")
(CSTR "GTK_PRINT_SETTINGS_MEDIA_TYPE")
(CSTR "GTK_PRINT_SETTINGS_DITHER")
(CSTR "GTK_PRINT_SETTINGS_SCALE")
(CSTR "GTK_PRINT_SETTINGS_PRINT_PAGES")
(CSTR "GTK_PRINT_SETTINGS_PAGE_RANGES")
(CSTR "GTK_PRINT_SETTINGS_PAGE_SET")
(CSTR "GTK_PRINT_SETTINGS_FINISHINGS")
(CSTR "GTK_PRINT_SETTINGS_NUMBER_UP")
(CSTR "GTK_PRINT_SETTINGS_OUTPUT_BIN")
(CSTR "GTK_PRINT_SETTINGS_OUTPUT_FILE_FORMAT")
(CSTR "GTK_PRINT_SETTINGS_OUTPUT_URI")



(CAIRO-FUNC "cairo_t* cairo_create cairo_surface_t* target") ; try to make cairo_t declaration independent of 210


;;;;;(CFNC "GType gtk_printer_get_type void")
;(CFNC "GtkPrinter* gtk_printer_new gchar* name GtkPrintBackend* backend gboolean virtual_")
;(CFNC "GtkPrintBackend* gtk_printer_get_backend GtkPrinter* printer")
;(CFNC "gchar* gtk_printer_get_name GtkPrinter* printer")
;(CFNC "gchar* gtk_printer_get_state_message GtkPrinter* printer")
;(CFNC "gchar* gtk_printer_get_description GtkPrinter* printer")
;(CFNC "gchar* gtk_printer_get_location GtkPrinter* printer")
;(CFNC "gchar* gtk_printer_get_icon_name GtkPrinter* printer")
;(CFNC "gint gtk_printer_get_job_count GtkPrinter* printer")
;(CFNC "gboolean gtk_printer_is_active GtkPrinter* printer")
;(CFNC "gboolean gtk_printer_is_virtual GtkPrinter* printer")
;(CFNC "gboolean gtk_printer_is_default GtkPrinter* printer")
;(CFNC "gboolean gtk_printer_accepts_pdf GtkPrinter* printer")
;(CFNC "gboolean gtk_printer_accepts_ps GtkPrinter* printer")
;(CFNC "gint gtk_printer_compare GtkPrinter* a GtkPrinter* b")
;(CFNC "void gtk_enumerate_printers GtkPrinterFunc func gpointer data GDestroyNotify destroy gboolean wait")
;;;;(CFNC "GType gtk_print_context_get_type void")
(CFNC "cairo_t* gtk_print_context_get_cairo_context GtkPrintContext* context")
(CFNC "GtkPageSetup* gtk_print_context_get_page_setup GtkPrintContext* context")
(CFNC "gdouble gtk_print_context_get_width GtkPrintContext* context")
(CFNC "gdouble gtk_print_context_get_height GtkPrintContext* context")
(CFNC "gdouble gtk_print_context_get_dpi_x GtkPrintContext* context")
(CFNC "gdouble gtk_print_context_get_dpi_y GtkPrintContext* context")
;(CFNC "PangoFontMap* gtk_print_context_get_pango_fontmap GtkPrintContext* context")
(CFNC "PangoContext* gtk_print_context_create_pango_context GtkPrintContext* context")
(CFNC "PangoLayout* gtk_print_context_create_pango_layout GtkPrintContext* context")
(CFNC "void gtk_print_context_set_cairo_context GtkPrintContext* context cairo_t* cr double dpi_x double dpi_y")
;;;;;(CFNC "GType gtk_printer_option_widget_get_type void")
;(CFNC "GtkWidget* gtk_printer_option_widget_new GtkPrinterOption* source")
;(CFNC "void gtk_printer_option_widget_set_source GtkPrinterOptionWidget* setting GtkPrinterOption* source")
;(CFNC "gboolean gtk_printer_option_widget_has_external_label GtkPrinterOptionWidget* setting")
;(CFNC "GtkWidget* gtk_printer_option_widget_get_external_label GtkPrinterOptionWidget* setting")
;(CFNC "gchar* gtk_printer_option_widget_get_value GtkPrinterOptionWidget* setting") ; const return
;;;;;(CFNC "GType gtk_print_job_get_type void")
;(CFNC "GtkPrintJob* gtk_print_job_new gchar* title GtkPrinter* printer GtkPrintSettings* settings GtkPageSetup* page_setup")
;(CFNC "GtkPrintSettings* gtk_print_job_get_settings GtkPrintJob* job")
;(CFNC "GtkPrinter* gtk_print_job_get_printer GtkPrintJob* job")
;(CFNC "gchar* gtk_print_job_get_title GtkPrintJob* job")
;(CFNC "GtkPrintStatus gtk_print_job_get_status GtkPrintJob* job")
;(CFNC "gboolean gtk_print_job_set_source_file GtkPrintJob* job gchar* filename GError** [error]")
;(CFNC "cairo_surface_t* gtk_print_job_get_surface GtkPrintJob* job GError** [error]")
;(CFNC "void gtk_print_job_set_track_print_status GtkPrintJob* job gboolean track_status")
;(CFNC "gboolean gtk_print_job_get_track_print_status GtkPrintJob* job")
;(CFNC "void gtk_print_job_send GtkPrintJob* job GtkPrintJobCompleteFunc callback gpointer user_data GDestroyNotify dnotify")
;;;;;(CFNC "GType gtk_print_capabilities_get_type void")
;(CFNC "GQuark gtk_print_error_quark void")
;;;;(CFNC "GType gtk_print_operation_get_type void")
(CFNC "GtkPrintOperation* gtk_print_operation_new void")
(CFNC "void gtk_print_operation_set_default_page_setup GtkPrintOperation* op GtkPageSetup* default_page_setup")
(CFNC "GtkPageSetup* gtk_print_operation_get_default_page_setup GtkPrintOperation* op")
(CFNC "void gtk_print_operation_set_print_settings GtkPrintOperation* op GtkPrintSettings* print_settings")
(CFNC "GtkPrintSettings* gtk_print_operation_get_print_settings GtkPrintOperation* op")
(CFNC "void gtk_print_operation_set_job_name GtkPrintOperation* op gchar* job_name")
(CFNC "void gtk_print_operation_set_n_pages GtkPrintOperation* op gint n_pages")
(CFNC "void gtk_print_operation_set_current_page GtkPrintOperation* op gint current_page")
(CFNC "void gtk_print_operation_set_use_full_page GtkPrintOperation* op gboolean full_page")
(CFNC "void gtk_print_operation_set_unit GtkPrintOperation* op GtkUnit unit")
(CFNC "void gtk_print_operation_set_export_filename GtkPrintOperation* op gchar* filename")
(CFNC "void gtk_print_operation_set_track_print_status GtkPrintOperation* op gboolean track_status")
(CFNC "void gtk_print_operation_set_show_progress GtkPrintOperation* op gboolean show_progress")
(CFNC "void gtk_print_operation_set_allow_async GtkPrintOperation* op gboolean allow_async")
(CFNC "void gtk_print_operation_set_custom_tab_label GtkPrintOperation* op gchar* label")
(CFNC "GtkPrintOperationResult gtk_print_operation_run GtkPrintOperation* op GtkPrintOperationAction action GtkWindow* parent GError** [error]")
(CFNC "void gtk_print_operation_get_error GtkPrintOperation* op GError** [error]")
(CFNC "GtkPrintStatus gtk_print_operation_get_status GtkPrintOperation* op")
(CFNC "gchar* gtk_print_operation_get_status_string GtkPrintOperation* op")
(CFNC "gboolean gtk_print_operation_is_finished GtkPrintOperation* op")
(CFNC "void gtk_print_operation_cancel GtkPrintOperation* op")
(CFNC "GtkPageSetup* gtk_print_run_page_setup_dialog GtkWindow* parent GtkPageSetup* page_setup GtkPrintSettings* settings")
(CFNC "void gtk_print_run_page_setup_dialog_async GtkWindow* parent GtkPageSetup* page_setup GtkPrintSettings* settings GtkPageSetupDoneFunc done_cb gpointer data")
;;;;(CFNC "GType gtk_print_operation_preview_get_type void")

;(CFNC "void gtk_print_operation_preview_render_page GtkPrintOperationPreview* preview gint page_nr")
;(CFNC "void gtk_print_operation_preview_end_preview GtkPrintOperationPreview* preview")
;(CFNC "gboolean gtk_print_operation_preview_is_selected GtkPrintOperationPreview* preview gint page_nr")

;;;;(CFNC "GType gtk_print_settings_get_type void")
(CFNC "GtkPrintSettings* gtk_print_settings_new void")
(CFNC "GtkPrintSettings* gtk_print_settings_copy GtkPrintSettings* other")
(CFNC "gboolean gtk_print_settings_has_key GtkPrintSettings* settings gchar* key")
(CFNC "gchar* gtk_print_settings_get GtkPrintSettings* settings gchar* key")
(CFNC "void gtk_print_settings_set GtkPrintSettings* settings gchar* key gchar* value")
(CFNC "void gtk_print_settings_unset GtkPrintSettings* settings gchar* key")
(CFNC "void gtk_print_settings_foreach GtkPrintSettings* settings GtkPrintSettingsFunc func gpointer user_data")
(CFNC "gboolean gtk_print_settings_get_bool GtkPrintSettings* settings gchar* key")
(CFNC "void gtk_print_settings_set_bool GtkPrintSettings* settings gchar* key gboolean value")
(CFNC "gdouble gtk_print_settings_get_double GtkPrintSettings* settings gchar* key")
(CFNC "gdouble gtk_print_settings_get_double_with_default GtkPrintSettings* settings gchar* key gdouble def")
(CFNC "void gtk_print_settings_set_double GtkPrintSettings* settings gchar* key gdouble value")
(CFNC "gdouble gtk_print_settings_get_length GtkPrintSettings* settings gchar* key GtkUnit unit")
(CFNC "void gtk_print_settings_set_length GtkPrintSettings* settings gchar* key gdouble value GtkUnit unit")
(CFNC "gint gtk_print_settings_get_int GtkPrintSettings* settings gchar* key")
(CFNC "gint gtk_print_settings_get_int_with_default GtkPrintSettings* settings gchar* key gint def")
(CFNC "void gtk_print_settings_set_int GtkPrintSettings* settings gchar* key gint value")
(CFNC "gchar* gtk_print_settings_get_printer GtkPrintSettings* settings")
(CFNC "void gtk_print_settings_set_printer GtkPrintSettings* settings gchar* printer")
(CFNC "GtkPageOrientation gtk_print_settings_get_orientation GtkPrintSettings* settings")
(CFNC "void gtk_print_settings_set_orientation GtkPrintSettings* settings GtkPageOrientation orientation")
(CFNC "GtkPaperSize* gtk_print_settings_get_paper_size GtkPrintSettings* settings")
(CFNC "void gtk_print_settings_set_paper_size GtkPrintSettings* settings GtkPaperSize* paper_size")
(CFNC "gdouble gtk_print_settings_get_paper_width GtkPrintSettings* settings GtkUnit unit")
(CFNC "void gtk_print_settings_set_paper_width GtkPrintSettings* settings gdouble width GtkUnit unit")
(CFNC "gdouble gtk_print_settings_get_paper_height GtkPrintSettings* settings GtkUnit unit")
(CFNC "void gtk_print_settings_set_paper_height GtkPrintSettings* settings gdouble height GtkUnit unit")
(CFNC "gboolean gtk_print_settings_get_use_color GtkPrintSettings* settings")
(CFNC "void gtk_print_settings_set_use_color GtkPrintSettings* settings gboolean use_color")
(CFNC "gboolean gtk_print_settings_get_collate GtkPrintSettings* settings")
(CFNC "void gtk_print_settings_set_collate GtkPrintSettings* settings gboolean collate")
(CFNC "gboolean gtk_print_settings_get_reverse GtkPrintSettings* settings")
(CFNC "void gtk_print_settings_set_reverse GtkPrintSettings* settings gboolean reverse")
(CFNC "GtkPrintDuplex gtk_print_settings_get_duplex GtkPrintSettings* settings")
(CFNC "void gtk_print_settings_set_duplex GtkPrintSettings* settings GtkPrintDuplex duplex")
(CFNC "GtkPrintQuality gtk_print_settings_get_quality GtkPrintSettings* settings")
(CFNC "void gtk_print_settings_set_quality GtkPrintSettings* settings GtkPrintQuality quality")
(CFNC "gint gtk_print_settings_get_n_copies GtkPrintSettings* settings")
(CFNC "void gtk_print_settings_set_n_copies GtkPrintSettings* settings gint num_copies")
(CFNC "gint gtk_print_settings_get_number_up GtkPrintSettings* settings")
(CFNC "void gtk_print_settings_set_number_up GtkPrintSettings* settings gint number_up")
(CFNC "gint gtk_print_settings_get_resolution GtkPrintSettings* settings")
(CFNC "void gtk_print_settings_set_resolution GtkPrintSettings* settings gint resolution")
(CFNC "gdouble gtk_print_settings_get_scale GtkPrintSettings* settings")
(CFNC "void gtk_print_settings_set_scale GtkPrintSettings* settings gdouble scale")
(CFNC "GtkPrintPages gtk_print_settings_get_print_pages GtkPrintSettings* settings")
(CFNC "void gtk_print_settings_set_print_pages GtkPrintSettings* settings GtkPrintPages pages")
(CFNC "GtkPageRange* gtk_print_settings_get_page_ranges GtkPrintSettings* settings gint* num_ranges")
(CFNC "void gtk_print_settings_set_page_ranges GtkPrintSettings* settings GtkPageRange* page_ranges gint num_ranges")
(CFNC "GtkPageSet gtk_print_settings_get_page_set GtkPrintSettings* settings")
(CFNC "void gtk_print_settings_set_page_set GtkPrintSettings* settings GtkPageSet page_set")
(CFNC "gchar* gtk_print_settings_get_default_source GtkPrintSettings* settings")
(CFNC "void gtk_print_settings_set_default_source GtkPrintSettings* settings gchar* default_source")
(CFNC "gchar* gtk_print_settings_get_media_type GtkPrintSettings* settings")
(CFNC "void gtk_print_settings_set_media_type GtkPrintSettings* settings gchar* media_type")
(CFNC "gchar* gtk_print_settings_get_dither GtkPrintSettings* settings")
(CFNC "void gtk_print_settings_set_dither GtkPrintSettings* settings gchar* dither")
(CFNC "gchar* gtk_print_settings_get_finishings GtkPrintSettings* settings")
(CFNC "void gtk_print_settings_set_finishings GtkPrintSettings* settings gchar* finishings")
(CFNC "gchar* gtk_print_settings_get_output_bin GtkPrintSettings* settings")
(CFNC "void gtk_print_settings_set_output_bin GtkPrintSettings* settings gchar* output_bin")
;;;;;(CFNC "GType gtk_print_unix_dialog_get_type void")
;(CFNC "GtkWidget* gtk_print_unix_dialog_new gchar* title GtkWindow* parent")
;(CFNC "void gtk_print_unix_dialog_set_page_setup GtkPrintUnixDialog* dialog GtkPageSetup* page_setup")
;(CFNC "GtkPageSetup* gtk_print_unix_dialog_get_page_setup GtkPrintUnixDialog* dialog")
;(CFNC "void gtk_print_unix_dialog_set_current_page GtkPrintUnixDialog* dialog gint current_page")
;(CFNC "gint gtk_print_unix_dialog_get_current_page GtkPrintUnixDialog* dialog")
;(CFNC "void gtk_print_unix_dialog_set_settings GtkPrintUnixDialog* dialog GtkPrintSettings* settings")
;(CFNC "GtkPrintSettings* gtk_print_unix_dialog_get_settings GtkPrintUnixDialog* dialog")
;(CFNC "GtkPrinter* gtk_print_unix_dialog_get_selected_printer GtkPrintUnixDialog* dialog")
;(CFNC "void gtk_print_unix_dialog_add_custom_tab GtkPrintUnixDialog* dialog GtkWidget* child GtkWidget* tab_label")
;(CFNC "void gtk_print_unix_dialog_set_manual_capabilities GtkPrintUnixDialog* dialog GtkPrintCapabilities capabilities")



;;; 3.93.0 (CFNC "GtkSettings* gtk_settings_get_for_screen GdkScreen* screen")


;;; maybe someday...
;(CFNC "gboolean G_VALUE_HOLDS_CHAR GValue* value")
;(CFNC "gboolean G_VALUE_HOLDS_UCHAR GValue* value")
;(CFNC "gboolean G_VALUE_HOLDS_BOOLEAN GValue* value")
;(CFNC "gboolean G_VALUE_HOLDS_INT GValue* value")
;(CFNC "gboolean G_VALUE_HOLDS_UINT GValue* value")
;(CFNC "gboolean G_VALUE_HOLDS_LONG GValue* value")
;(CFNC "gboolean G_VALUE_HOLDS_ULONG GValue* value")
;(CFNC "gboolean G_VALUE_HOLDS_INT64 GValue* value")
;(CFNC "gboolean G_VALUE_HOLDS_UINT64 GValue* value")
;(CFNC "gboolean G_VALUE_HOLDS_FLOAT GValue* value")
;(CFNC "gboolean G_VALUE_HOLDS_DOUBLE GValue* value")
;(CFNC "gboolean G_VALUE_HOLDS_STRING GValue* value")
;(CFNC "gboolean G_VALUE_HOLDS_POINTER GValue* value")

;(CFNC "gchar g_value_get_char GValue* value" 'const)
;(CFNC "guchar g_value_get_uchar GValue* value" 'const)
;(CFNC "gboolean g_value_get_boolean GValue* value" 'const)
;(CFNC "gint g_value_get_int GValue* value" 'const)
;(CFNC "guint g_value_get_uint GValue* value" 'const)
;(CFNC "glong g_value_get_long GValue* value" 'const)
;(CFNC "gulong g_value_get_ulong GValue* value" 'const)
;(CFNC "gint64 g_value_get_int64 GValue* value" 'const)
;(CFNC "guint64 g_value_get_uint64 GValue* value" 'const)
;(CFNC "gfloat g_value_get_float GValue* value" 'const)
;(CFNC "gdouble g_value_get_double GValue* value" 'const)
;(CFNC "gpointer g_value_get_pointer GValue* value" 'const)
;(CFNC "gchar* g_value_get_string GValue* value" 'const)

;;; cairo 1.2.6

(CAIRO-INT "CAIRO_STATUS_SUCCESS" "cairo_status_t")
(CAIRO-INT "CAIRO_STATUS_NO_MEMORY" "cairo_status_t")
(CAIRO-INT "CAIRO_STATUS_INVALID_RESTORE" "cairo_status_t")
(CAIRO-INT "CAIRO_STATUS_INVALID_POP_GROUP" "cairo_status_t")
(CAIRO-INT "CAIRO_STATUS_NO_CURRENT_POINT" "cairo_status_t")
(CAIRO-INT "CAIRO_STATUS_INVALID_MATRIX" "cairo_status_t")
(CAIRO-INT "CAIRO_STATUS_INVALID_STATUS" "cairo_status_t")
(CAIRO-INT "CAIRO_STATUS_NULL_POINTER" "cairo_status_t")
(CAIRO-INT "CAIRO_STATUS_INVALID_STRING" "cairo_status_t")
(CAIRO-INT "CAIRO_STATUS_INVALID_PATH_DATA" "cairo_status_t")
(CAIRO-INT "CAIRO_STATUS_READ_ERROR" "cairo_status_t")
(CAIRO-INT "CAIRO_STATUS_WRITE_ERROR" "cairo_status_t")
(CAIRO-INT "CAIRO_STATUS_SURFACE_FINISHED" "cairo_status_t")
(CAIRO-INT "CAIRO_STATUS_SURFACE_TYPE_MISMATCH" "cairo_status_t")
(CAIRO-INT "CAIRO_STATUS_PATTERN_TYPE_MISMATCH" "cairo_status_t")
(CAIRO-INT "CAIRO_STATUS_INVALID_CONTENT" "cairo_status_t")
(CAIRO-INT "CAIRO_STATUS_INVALID_FORMAT" "cairo_status_t")
(CAIRO-INT "CAIRO_STATUS_INVALID_VISUAL" "cairo_status_t")
(CAIRO-INT "CAIRO_STATUS_FILE_NOT_FOUND" "cairo_status_t")
(CAIRO-INT "CAIRO_STATUS_INVALID_DASH" "cairo_status_t")
(CAIRO-INT "CAIRO_STATUS_INVALID_DSC_COMMENT" "cairo_status_t")

(CAIRO-INT "CAIRO_STATUS_INVALID_INDEX" "cairo_status_t")
(CAIRO-INT "CAIRO_STATUS_CLIP_NOT_REPRESENTABLE" "cairo_status_t")

(CAIRO-INT "CAIRO_STATUS_TEMP_FILE_ERROR" "cairo_status_t")
(CAIRO-INT "CAIRO_STATUS_INVALID_STRIDE" "cairo_status_t")

(CAIRO-INT "CAIRO_CONTENT_COLOR" "cairo_content_t")
(CAIRO-INT "CAIRO_CONTENT_ALPHA" "cairo_content_t")
(CAIRO-INT "CAIRO_CONTENT_COLOR_ALPHA" "cairo_content_t")

(CAIRO-INT "CAIRO_OPERATOR_CLEAR" "cairo_operator_t")
(CAIRO-INT "CAIRO_OPERATOR_SOURCE" "cairo_operator_t")
(CAIRO-INT "CAIRO_OPERATOR_OVER" "cairo_operator_t")
(CAIRO-INT "CAIRO_OPERATOR_IN" "cairo_operator_t")
(CAIRO-INT "CAIRO_OPERATOR_OUT" "cairo_operator_t")
(CAIRO-INT "CAIRO_OPERATOR_ATOP" "cairo_operator_t")
(CAIRO-INT "CAIRO_OPERATOR_DEST" "cairo_operator_t")
(CAIRO-INT "CAIRO_OPERATOR_DEST_OVER" "cairo_operator_t")
(CAIRO-INT "CAIRO_OPERATOR_DEST_IN" "cairo_operator_t")
(CAIRO-INT "CAIRO_OPERATOR_DEST_OUT" "cairo_operator_t")
(CAIRO-INT "CAIRO_OPERATOR_DEST_ATOP" "cairo_operator_t")
(CAIRO-INT "CAIRO_OPERATOR_XOR" "cairo_operator_t")
(CAIRO-INT "CAIRO_OPERATOR_ADD" "cairo_operator_t")
(CAIRO-INT "CAIRO_OPERATOR_SATURATE" "cairo_operator_t")

(CAIRO-INT "CAIRO_ANTIALIAS_DEFAULT" "cairo_antialias_t")
(CAIRO-INT "CAIRO_ANTIALIAS_NONE" "cairo_antialias_t")
(CAIRO-INT "CAIRO_ANTIALIAS_GRAY" "cairo_antialias_t")
(CAIRO-INT "CAIRO_ANTIALIAS_SUBPIXEL" "cairo_antialias_t")

(CAIRO-INT "CAIRO_FILL_RULE_WINDING" "cairo_fill_rule_t")
(CAIRO-INT "CAIRO_FILL_RULE_EVEN_ODD" "cairo_fill_rule_t")

(CAIRO-INT "CAIRO_LINE_CAP_BUTT" "cairo_line_cap_t")
(CAIRO-INT "CAIRO_LINE_CAP_ROUND" "cairo_line_cap_t")
(CAIRO-INT "CAIRO_LINE_CAP_SQUARE" "cairo_line_cap_t")

(CAIRO-INT "CAIRO_LINE_JOIN_MITER" "cairo_line_join_t")
(CAIRO-INT "CAIRO_LINE_JOIN_ROUND" "cairo_line_join_t")
(CAIRO-INT "CAIRO_LINE_JOIN_BEVEL" "cairo_line_join_t")

(CAIRO-INT "CAIRO_FONT_SLANT_NORMAL" "cairo_font_slant_t")
(CAIRO-INT "CAIRO_FONT_SLANT_ITALIC" "cairo_font_slant_t")
(CAIRO-INT "CAIRO_FONT_SLANT_OBLIQUE" "cairo_font_slant_t")

(CAIRO-INT "CAIRO_FONT_WEIGHT_NORMAL" "cairo_font_weight_t")
(CAIRO-INT "CAIRO_FONT_WEIGHT_BOLD" "cairo_font_weight_t")

(CAIRO-INT "CAIRO_SUBPIXEL_ORDER_DEFAULT" "cairo_subpixel_order_t")
(CAIRO-INT "CAIRO_SUBPIXEL_ORDER_RGB" "cairo_subpixel_order_t")
(CAIRO-INT "CAIRO_SUBPIXEL_ORDER_BGR" "cairo_subpixel_order_t")
(CAIRO-INT "CAIRO_SUBPIXEL_ORDER_VRGB" "cairo_subpixel_order_t")
(CAIRO-INT "CAIRO_SUBPIXEL_ORDER_VBGR" "cairo_subpixel_order_t")

(CAIRO-INT "CAIRO_HINT_STYLE_DEFAULT" "cairo_hint_style_t")
(CAIRO-INT "CAIRO_HINT_STYLE_NONE" "cairo_hint_style_t")
(CAIRO-INT "CAIRO_HINT_STYLE_SLIGHT" "cairo_hint_style_t")
(CAIRO-INT "CAIRO_HINT_STYLE_MEDIUM" "cairo_hint_style_t")
(CAIRO-INT "CAIRO_HINT_STYLE_FULL" "cairo_hint_style_t")

(CAIRO-INT "CAIRO_HINT_METRICS_DEFAULT" "cairo_hint_metrics_t")
(CAIRO-INT "CAIRO_HINT_METRICS_OFF" "cairo_hint_metrics_t")
(CAIRO-INT "CAIRO_HINT_METRICS_ON" "cairo_hint_metrics_t")

(CAIRO-INT "CAIRO_FONT_TYPE_TOY" "cairo_font_type_t")
(CAIRO-INT "CAIRO_FONT_TYPE_FT" "cairo_font_type_t")
(CAIRO-INT "CAIRO_FONT_TYPE_WIN32" "cairo_font_type_t")
;;; (CAIRO-INT "CAIRO_FONT_TYPE_ATSUI" "cairo_font_type_t") ; replaced by QUARTZ in 1.6.4
(CAIRO-INT "CAIRO_FONT_TYPE_QUARTZ" "cairo_font_type_t")

(CAIRO-INT "CAIRO_PATH_MOVE_TO" "cairo_path_data_type_t")
(CAIRO-INT "CAIRO_PATH_LINE_TO" "cairo_path_data_type_t")
(CAIRO-INT "CAIRO_PATH_CURVE_TO" "cairo_path_data_type_t")
(CAIRO-INT "CAIRO_PATH_CLOSE_PATH" "cairo_path_data_type_t")

(CAIRO-INT "CAIRO_SURFACE_TYPE_IMAGE" "cairo_surface_type_t")
(CAIRO-INT "CAIRO_SURFACE_TYPE_PDF" "cairo_surface_type_t")
(CAIRO-INT "CAIRO_SURFACE_TYPE_PS" "cairo_surface_type_t")
(CAIRO-INT "CAIRO_SURFACE_TYPE_XLIB" "cairo_surface_type_t")
(CAIRO-INT "CAIRO_SURFACE_TYPE_XCB" "cairo_surface_type_t")
(CAIRO-INT "CAIRO_SURFACE_TYPE_GLITZ" "cairo_surface_type_t")
(CAIRO-INT "CAIRO_SURFACE_TYPE_QUARTZ" "cairo_surface_type_t")
(CAIRO-INT "CAIRO_SURFACE_TYPE_WIN32" "cairo_surface_type_t")
(CAIRO-INT "CAIRO_SURFACE_TYPE_BEOS" "cairo_surface_type_t")
(CAIRO-INT "CAIRO_SURFACE_TYPE_DIRECTFB" "cairo_surface_type_t")
(CAIRO-INT "CAIRO_SURFACE_TYPE_SVG" "cairo_surface_type_t")

(CAIRO-INT "CAIRO_SURFACE_TYPE_OS2" "cairo_surface_type_t")

(CAIRO-INT "CAIRO_SURFACE_TYPE_WIN32_PRINTING" "cairo_surface_type_t")
(CAIRO-INT "CAIRO_SURFACE_TYPE_QUARTZ_IMAGE" "cairo_surface_type_t")

(CAIRO-INT "CAIRO_FORMAT_ARGB32" "cairo_format_t")
(CAIRO-INT "CAIRO_FORMAT_RGB24" "cairo_format_t")
(CAIRO-INT "CAIRO_FORMAT_A8" "cairo_format_t")
(CAIRO-INT "CAIRO_FORMAT_A1" "cairo_format_t")
;;; (CAIRO-INT "CAIRO_FORMAT_RGB16_565" "cairo_format_t") ; out 1.4.0

(CAIRO-INT "CAIRO_PATTERN_TYPE_SOLID" "cairo_pattern_type_t")
(CAIRO-INT "CAIRO_PATTERN_TYPE_SURFACE" "cairo_pattern_type_t")
(CAIRO-INT "CAIRO_PATTERN_TYPE_LINEAR" "cairo_pattern_type_t")
(CAIRO-INT "CAIRO_PATTERN_TYPE_RADIAL" "cairo_pattern_type_t")

(CAIRO-INT "CAIRO_EXTEND_NONE" "cairo_extend_t")
(CAIRO-INT "CAIRO_EXTEND_REPEAT" "cairo_extend_t")
(CAIRO-INT "CAIRO_EXTEND_REFLECT" "cairo_extend_t")
(CAIRO-INT "CAIRO_EXTEND_PAD" "cairo_extend_t")

(CAIRO-INT "CAIRO_FILTER_FAST" "cairo_filter_t")
(CAIRO-INT "CAIRO_FILTER_GOOD" "cairo_filter_t")
(CAIRO-INT "CAIRO_FILTER_BEST" "cairo_filter_t")
(CAIRO-INT "CAIRO_FILTER_NEAREST" "cairo_filter_t")
(CAIRO-INT "CAIRO_FILTER_BILINEAR" "cairo_filter_t")
(CAIRO-INT "CAIRO_FILTER_GAUSSIAN" "cairo_filter_t")


;typedef void(*cairo_destroy_func_t)(void *data)

;typedef struct { unsigned long index double x double y} cairo_glyph_t
;typedef struct { double x_bearing double y_bearing double width double height double x_advance double y_advance} cairo_text_extents_t
;typedef struct { double ascent double descent double height double max_x_advance double max_y_advance} cairo_font_extents_t
;typedef struct cairo_path { cairo_status_t status cairo_path_data_t *data int num_data} cairo_path_t


(CAIRO-FUNC "int cairo_version void")
(CAIRO-FUNC "char* cairo_version_string void" 'const)
;moved up a ways to get cairo_t under HAVE_CAIRO_CREATE (CAIRO-FUNC "cairo_t* cairo_create cairo_surface_t* target")
(CAIRO-FUNC "cairo_t* cairo_reference cairo_t* cr")
(CAIRO-FUNC "void cairo_destroy cairo_t* cr")
(CAIRO-FUNC "void cairo_save cairo_t* cr")
(CAIRO-FUNC "void cairo_restore cairo_t* cr")
(CAIRO-FUNC "void cairo_push_group cairo_t* cr")
(CAIRO-FUNC "void cairo_push_group_with_content cairo_t* cr cairo_content_t content")
(CAIRO-FUNC "cairo_pattern_t* cairo_pop_group cairo_t* cr")
(CAIRO-FUNC "void cairo_pop_group_to_source cairo_t* cr")
(CAIRO-FUNC "void cairo_set_operator cairo_t* cr cairo_operator_t op")
(CAIRO-FUNC "void cairo_set_source cairo_t* cr cairo_pattern_t* source")
(CAIRO-FUNC "void cairo_set_source_rgb cairo_t* cr double red double green double blue")
(CAIRO-FUNC "void cairo_set_source_rgba cairo_t* cr double red double green double blue double alpha")
(CAIRO-FUNC "void cairo_set_source_surface cairo_t* cr cairo_surface_t* surface double x double y")
(CAIRO-FUNC "void cairo_set_tolerance cairo_t* cr double tolerance")
(CAIRO-FUNC "void cairo_set_antialias cairo_t* cr cairo_antialias_t antialias")
(CAIRO-FUNC "void cairo_set_fill_rule cairo_t* cr cairo_fill_rule_t fill_rule")
(CAIRO-FUNC "void cairo_set_line_width cairo_t* cr double width")
(CAIRO-FUNC "void cairo_set_line_cap cairo_t* cr cairo_line_cap_t line_cap")
(CAIRO-FUNC "void cairo_set_line_join cairo_t* cr cairo_line_join_t line_join")
(CAIRO-FUNC "void cairo_set_dash cairo_t* cr gdouble* dashes int num_dashes double offset")
(CAIRO-FUNC "void cairo_set_miter_limit cairo_t* cr double limit")
(CAIRO-FUNC "void cairo_translate cairo_t* cr double tx double ty")
(CAIRO-FUNC "void cairo_scale cairo_t* cr double sx double sy")
(CAIRO-FUNC "void cairo_rotate cairo_t* cr double angle")
(CAIRO-FUNC "void cairo_transform cairo_t* cr cairo_matrix_t* matrix")
(CAIRO-FUNC "void cairo_set_matrix cairo_t* cr cairo_matrix_t* matrix")
(CAIRO-FUNC "void cairo_identity_matrix cairo_t* cr")
(CAIRO-FUNC "void cairo_user_to_device cairo_t* cr gdouble* [x] gdouble* [y]")
(CAIRO-FUNC "void cairo_user_to_device_distance cairo_t* cr gdouble* [dx] gdouble* [dy]")
(CAIRO-FUNC "void cairo_device_to_user cairo_t* cr gdouble* [x] gdouble* [y]")
(CAIRO-FUNC "void cairo_device_to_user_distance cairo_t* cr gdouble* [dx] gdouble* [dy]")
(CAIRO-FUNC "void cairo_new_path cairo_t* cr")
(CAIRO-FUNC "void cairo_move_to cairo_t* cr double x double y")
(CAIRO-FUNC "void cairo_new_sub_path cairo_t* cr")
(CAIRO-FUNC "void cairo_line_to cairo_t* cr double x double y")
(CAIRO-FUNC "void cairo_curve_to cairo_t* cr double x1 double y1 double x2 double y2 double x3 double y3")
(CAIRO-FUNC "void cairo_arc cairo_t* cr double xc double yc double radius double angle1 double angle2")
(CAIRO-FUNC "void cairo_arc_negative cairo_t* cr double xc double yc double radius double angle1 double angle2")
(CAIRO-FUNC "void cairo_rel_move_to cairo_t* cr double dx double dy")
(CAIRO-FUNC "void cairo_rel_line_to cairo_t* cr double dx double dy")
(CAIRO-FUNC "void cairo_rel_curve_to cairo_t* cr double dx1 double dy1 double dx2 double dy2 double dx3 double dy3")
(CAIRO-FUNC "void cairo_rectangle cairo_t* cr double x double y double width double height")
(CAIRO-FUNC "void cairo_close_path cairo_t* cr")
(CAIRO-FUNC "void cairo_paint cairo_t* cr")
(CAIRO-FUNC "void cairo_paint_with_alpha cairo_t* cr double alpha")
(CAIRO-FUNC "void cairo_mask cairo_t* cr cairo_pattern_t* pattern")
(CAIRO-FUNC "void cairo_mask_surface cairo_t* cr cairo_surface_t* surface double surface_x double surface_y")
(CAIRO-FUNC "void cairo_stroke cairo_t* cr")
(CAIRO-FUNC "void cairo_stroke_preserve cairo_t* cr")
(CAIRO-FUNC "void cairo_fill cairo_t* cr")
(CAIRO-FUNC "void cairo_fill_preserve cairo_t* cr")
(CAIRO-FUNC "void cairo_copy_page cairo_t* cr")
(CAIRO-FUNC "void cairo_show_page cairo_t* cr")
(CAIRO-FUNC "bool cairo_in_stroke cairo_t* cr double x double y")
(CAIRO-FUNC "bool cairo_in_fill cairo_t* cr double x double y")
;(CAIRO-FUNC "void cairo_stroke_extents cairo_t* cr double* x1 double* y1 double* x2 double* y2")
;(CAIRO-FUNC "void cairo_fill_extents cairo_t* cr double* x1 double* y1 double* x2 double* y2")
(CAIRO-FUNC "void cairo_reset_clip cairo_t* cr")
(CAIRO-FUNC "void cairo_clip cairo_t* cr")
(CAIRO-FUNC "void cairo_clip_preserve cairo_t* cr")
(CAIRO-FUNC "cairo_font_options_t* cairo_font_options_create void")
(CAIRO-FUNC "cairo_font_options_t* cairo_font_options_copy cairo_font_options_t* original")
(CAIRO-FUNC "void cairo_font_options_destroy cairo_font_options_t* options")
(CAIRO-FUNC "cairo_status_t cairo_font_options_status cairo_font_options_t* options")
(CAIRO-FUNC "void cairo_font_options_merge cairo_font_options_t* options cairo_font_options_t* other")
(CAIRO-FUNC "bool cairo_font_options_equal cairo_font_options_t* options cairo_font_options_t* other")
(CAIRO-FUNC "gulong cairo_font_options_hash cairo_font_options_t* options")
(CAIRO-FUNC "void cairo_font_options_set_antialias cairo_font_options_t* options cairo_antialias_t antialias")
(CAIRO-FUNC "cairo_antialias_t cairo_font_options_get_antialias cairo_font_options_t* options")
(CAIRO-FUNC "void cairo_font_options_set_subpixel_order cairo_font_options_t* options cairo_subpixel_order_t subpixel_order")
(CAIRO-FUNC "cairo_subpixel_order_t cairo_font_options_get_subpixel_order cairo_font_options_t* options")
(CAIRO-FUNC "void cairo_font_options_set_hint_style cairo_font_options_t* options cairo_hint_style_t hint_style")
(CAIRO-FUNC "cairo_hint_style_t cairo_font_options_get_hint_style cairo_font_options_t* options")
(CAIRO-FUNC "void cairo_font_options_set_hint_metrics cairo_font_options_t* options cairo_hint_metrics_t hint_metrics")
(CAIRO-FUNC "cairo_hint_metrics_t cairo_font_options_get_hint_metrics cairo_font_options_t* options")
(CAIRO-FUNC "void cairo_select_font_face cairo_t* cr char* family cairo_font_slant_t slant cairo_font_weight_t weight")
(CAIRO-FUNC "void cairo_set_font_size cairo_t* cr double size")
(CAIRO-FUNC "void cairo_set_font_matrix cairo_t* cr cairo_matrix_t* matrix")
(CAIRO-FUNC "void cairo_get_font_matrix cairo_t* cr cairo_matrix_t* matrix")
(CAIRO-FUNC "void cairo_set_font_options cairo_t* cr cairo_font_options_t* options")
(CAIRO-FUNC "void cairo_get_font_options cairo_t* cr cairo_font_options_t* options")
(CAIRO-FUNC "void cairo_set_scaled_font cairo_t* cr cairo_scaled_font_t* scaled_font")
(CAIRO-FUNC "void cairo_show_text cairo_t* cr char* utf8")
(CAIRO-FUNC "void cairo_show_glyphs cairo_t* cr cairo_glyph_t* glyphs int num_glyphs")
(CAIRO-FUNC "cairo_font_face_t* cairo_get_font_face cairo_t* cr")
(CAIRO-FUNC "void cairo_font_extents cairo_t* cr cairo_font_extents_t* extents")
(CAIRO-FUNC "void cairo_set_font_face cairo_t* cr cairo_font_face_t* font_face")
(CAIRO-FUNC "void cairo_text_extents cairo_t* cr char* utf8 cairo_text_extents_t* extents")
(CAIRO-FUNC "void cairo_glyph_extents cairo_t* cr cairo_glyph_t* glyphs int num_glyphs cairo_text_extents_t* extents")
(CAIRO-FUNC "void cairo_text_path cairo_t* cr char* utf8")
(CAIRO-FUNC "void cairo_glyph_path cairo_t* cr cairo_glyph_t* glyphs int num_glyphs")
(CAIRO-FUNC "cairo_font_face_t* cairo_font_face_reference cairo_font_face_t* font_face")
(CAIRO-FUNC "void cairo_font_face_destroy cairo_font_face_t* font_face")
(CAIRO-FUNC "cairo_status_t cairo_font_face_status cairo_font_face_t* font_face")
(CAIRO-FUNC "gpointer cairo_font_face_get_user_data cairo_font_face_t* font_face cairo_user_data_key_t* key")
(CAIRO-FUNC "cairo_status_t cairo_font_face_set_user_data cairo_font_face_t* font_face cairo_user_data_key_t* key gpointer user_data cairo_destroy_func_t destroy")
(CAIRO-FUNC "cairo_scaled_font_t* cairo_scaled_font_create cairo_font_face_t* font_face cairo_matrix_t* font_matrix cairo_matrix_t* ctm cairo_font_options_t* options")
(CAIRO-FUNC "cairo_scaled_font_t* cairo_scaled_font_reference cairo_scaled_font_t* scaled_font")
(CAIRO-FUNC "void cairo_scaled_font_destroy cairo_scaled_font_t* scaled_font")
(CAIRO-FUNC "cairo_status_t cairo_scaled_font_status cairo_scaled_font_t* scaled_font")
(CAIRO-FUNC "void cairo_scaled_font_extents cairo_scaled_font_t* scaled_font cairo_font_extents_t* extents")
(CAIRO-FUNC "void cairo_scaled_font_text_extents cairo_scaled_font_t* scaled_font char* utf8 cairo_text_extents_t* extents")
(CAIRO-FUNC "void cairo_scaled_font_glyph_extents cairo_scaled_font_t* scaled_font cairo_glyph_t* glyphs int num_glyphs cairo_text_extents_t* extents")
(CAIRO-FUNC "cairo_font_face_t* cairo_scaled_font_get_font_face cairo_scaled_font_t* scaled_font")
(CAIRO-FUNC "void cairo_scaled_font_get_font_matrix cairo_scaled_font_t* scaled_font cairo_matrix_t* font_matrix")
(CAIRO-FUNC "void cairo_scaled_font_get_ctm cairo_scaled_font_t* scaled_font cairo_matrix_t* ctm")
(CAIRO-FUNC "void cairo_scaled_font_get_font_options cairo_scaled_font_t* scaled_font cairo_font_options_t* options")
(CAIRO-FUNC "cairo_operator_t cairo_get_operator cairo_t* cr")
(CAIRO-FUNC "cairo_pattern_t* cairo_get_source cairo_t* cr")
(CAIRO-FUNC "gdouble cairo_get_tolerance cairo_t* cr")
(CAIRO-FUNC "cairo_antialias_t cairo_get_antialias cairo_t* cr")
(CAIRO-FUNC "void cairo_get_current_point cairo_t* cr gdouble* [x] gdouble* [y]")
(CAIRO-FUNC "cairo_fill_rule_t cairo_get_fill_rule cairo_t* cr")
(CAIRO-FUNC "gdouble cairo_get_line_width cairo_t* cr")
(CAIRO-FUNC "cairo_line_cap_t cairo_get_line_cap cairo_t* cr")
(CAIRO-FUNC "cairo_line_join_t cairo_get_line_join cairo_t* cr")
(CAIRO-FUNC "gdouble cairo_get_miter_limit cairo_t* cr")
(CAIRO-FUNC "void cairo_get_matrix cairo_t* cr cairo_matrix_t* matrix")
(CAIRO-FUNC "cairo_surface_t* cairo_get_target cairo_t* cr")
(CAIRO-FUNC "cairo_surface_t* cairo_get_group_target cairo_t* cr")
(CAIRO-FUNC "cairo_path_t* cairo_copy_path cairo_t* cr")
(CAIRO-FUNC "cairo_path_t* cairo_copy_path_flat cairo_t* cr")
(CAIRO-FUNC "void cairo_append_path cairo_t* cr cairo_path_t* path")
(CAIRO-FUNC "void cairo_path_destroy cairo_path_t* path")
(CAIRO-FUNC "cairo_status_t cairo_status cairo_t* cr")
(CAIRO-FUNC "char* cairo_status_to_string cairo_status_t status" 'const)
(CAIRO-FUNC "cairo_surface_t* cairo_surface_create_similar cairo_surface_t* other cairo_content_t content int width int height")
(CAIRO-FUNC "cairo_surface_t* cairo_surface_reference cairo_surface_t* surface")
(CAIRO-FUNC "void cairo_surface_finish cairo_surface_t* surface")
(CAIRO-FUNC "void cairo_surface_destroy cairo_surface_t* surface")
(CAIRO-FUNC "cairo_status_t cairo_surface_status cairo_surface_t* surface")
(CAIRO-FUNC "cairo_content_t cairo_surface_get_content cairo_surface_t* surface")
;;; 3.96.0 (CAIRO-FUNC "gpointer cairo_surface_get_user_data cairo_surface_t* surface cairo_user_data_key_t* key")
;;; 3.96.0 (CAIRO-FUNC "cairo_status_t cairo_surface_set_user_data cairo_surface_t* surface cairo_user_data_key_t* key gpointer user_data cairo_destroy_func_t destroy")
(CAIRO-FUNC "void cairo_surface_get_font_options cairo_surface_t* surface cairo_font_options_t* options")
(CAIRO-FUNC "void cairo_surface_flush cairo_surface_t* surface")
(CAIRO-FUNC "void cairo_surface_mark_dirty cairo_surface_t* surface")
(CAIRO-FUNC "void cairo_surface_mark_dirty_rectangle cairo_surface_t* surface int x int y int width int height")
(CAIRO-FUNC "void cairo_surface_set_device_offset cairo_surface_t* surface double x_offset double y_offset")
(CAIRO-FUNC "void cairo_surface_get_device_offset cairo_surface_t* surface gdouble* [x_offset] gdouble* [y_offset]")
(CAIRO-FUNC "void cairo_surface_set_fallback_resolution cairo_surface_t* surface double x_pixels_per_inch double y_pixels_per_inch")
(CAIRO-FUNC "cairo_surface_t* cairo_image_surface_create cairo_format_t format int width int height")
(CAIRO-FUNC "cairo_surface_t* cairo_image_surface_create_for_data guchar* data cairo_format_t format int width int height int stride")
(CAIRO-FUNC "guchar* cairo_image_surface_get_data cairo_surface_t* surface")
(CAIRO-FUNC "cairo_format_t cairo_image_surface_get_format cairo_surface_t* surface")
(CAIRO-FUNC "int cairo_image_surface_get_width cairo_surface_t* surface")
(CAIRO-FUNC "int cairo_image_surface_get_height cairo_surface_t* surface")
(CAIRO-FUNC "int cairo_image_surface_get_stride cairo_surface_t* surface")
(CAIRO-FUNC "cairo_pattern_t* cairo_pattern_create_rgb double red double green double blue")
(CAIRO-FUNC "cairo_pattern_t* cairo_pattern_create_rgba double red double green double blue double alpha")
(CAIRO-FUNC "cairo_pattern_t* cairo_pattern_create_for_surface cairo_surface_t* surface")
(CAIRO-FUNC "cairo_pattern_t* cairo_pattern_create_linear double x0 double y0 double x1 double y1")
(CAIRO-FUNC "cairo_pattern_t* cairo_pattern_create_radial double cx0 double cy0 double radius0 double cx1 double cy1 double radius1")
(CAIRO-FUNC "cairo_pattern_t* cairo_pattern_reference cairo_pattern_t* pattern")
(CAIRO-FUNC "void cairo_pattern_destroy cairo_pattern_t* pattern")
(CAIRO-FUNC "cairo_status_t cairo_pattern_status cairo_pattern_t* pattern")
(CAIRO-FUNC "void cairo_pattern_add_color_stop_rgb cairo_pattern_t* pattern double offset double red double green double blue")
(CAIRO-FUNC "void cairo_pattern_add_color_stop_rgba cairo_pattern_t* pattern double offset double red double green double blue double alpha")
(CAIRO-FUNC "void cairo_pattern_set_matrix cairo_pattern_t* pattern cairo_matrix_t* matrix")
(CAIRO-FUNC "void cairo_pattern_get_matrix cairo_pattern_t* pattern cairo_matrix_t* matrix")
(CAIRO-FUNC "void cairo_pattern_set_extend cairo_pattern_t* pattern cairo_extend_t extend")
(CAIRO-FUNC "cairo_extend_t cairo_pattern_get_extend cairo_pattern_t* pattern")
(CAIRO-FUNC "void cairo_pattern_set_filter cairo_pattern_t* pattern cairo_filter_t filter")
(CAIRO-FUNC "cairo_filter_t cairo_pattern_get_filter cairo_pattern_t* pattern")
(CAIRO-FUNC "void cairo_matrix_init cairo_matrix_t* matrix double xx double yx double xy double yy double x0 double y0")
(CAIRO-FUNC "void cairo_matrix_init_identity cairo_matrix_t* matrix")
(CAIRO-FUNC "void cairo_matrix_init_translate cairo_matrix_t* matrix double tx double ty")
(CAIRO-FUNC "void cairo_matrix_init_scale cairo_matrix_t* matrix double sx double sy")
(CAIRO-FUNC "void cairo_matrix_init_rotate cairo_matrix_t* matrix double radians")
(CAIRO-FUNC "void cairo_matrix_translate cairo_matrix_t* matrix double tx double ty")
(CAIRO-FUNC "void cairo_matrix_scale cairo_matrix_t* matrix double sx double sy")
(CAIRO-FUNC "void cairo_matrix_rotate cairo_matrix_t* matrix double radians")
(CAIRO-FUNC "cairo_status_t cairo_matrix_invert cairo_matrix_t* matrix")
(CAIRO-FUNC "void cairo_matrix_multiply cairo_matrix_t* result cairo_matrix_t* a cairo_matrix_t* b")
(CAIRO-FUNC "void cairo_matrix_transform_distance cairo_matrix_t* matrix gdouble* [dx] gdouble* [dy]")
(CAIRO-FUNC "void cairo_matrix_transform_point cairo_matrix_t* matrix gdouble* [x] gdouble* [y]")

;(CAIRO-STRUCT-make "cairo_matrix_t")


(CAIRO-PNG-FUNC "cairo_surface_t* cairo_image_surface_create_from_png char* filename" 'const)
(CAIRO-PNG-FUNC "cairo_status_t cairo_surface_write_to_png cairo_surface_t* surface char* filename" 'const)

(CFNC "PangoLayout* pango_cairo_create_layout cairo_t* cr")
(CFNC "void pango_cairo_update_layout cairo_t* cr PangoLayout* layout")
(CFNC "void pango_cairo_update_context cairo_t* cr PangoContext* context")
(CFNC "void pango_cairo_context_set_font_options PangoContext* context cairo_font_options_t* options")
(CFNC "cairo_font_options_t* pango_cairo_context_get_font_options PangoContext* context" 'const-return)
(CFNC "void pango_cairo_context_set_resolution PangoContext* context gdouble dpi")
(CFNC "gdouble pango_cairo_context_get_resolution PangoContext* context")
(CFNC "void pango_cairo_show_glyph_string cairo_t* cr PangoFont* font PangoGlyphString* glyphs")
(CFNC "void pango_cairo_show_layout_line cairo_t* cr PangoLayoutLine* line")
(CFNC "void pango_cairo_show_layout cairo_t* cr PangoLayout* layout")
(CFNC "void pango_cairo_show_error_underline cairo_t* cr gdouble x gdouble y gdouble width gdouble height")
(CFNC "void pango_cairo_glyph_string_path cairo_t* cr PangoFont* font PangoGlyphString* glyphs")
(CFNC "void pango_cairo_layout_line_path cairo_t* cr PangoLayoutLine* line")
(CFNC "void pango_cairo_layout_path cairo_t* cr PangoLayout* layout")
(CFNC "void pango_cairo_error_underline_path cairo_t* cr gdouble x gdouble y gdouble width gdouble height")

;;; (CFNC-gtk2 "void gdk_cairo_set_source_color cairo_t* cr GdkColor* color")
(CFNC "void gdk_cairo_set_source_pixbuf cairo_t* cr GdkPixbuf* pixbuf gdouble pixbuf_x gdouble pixbuf_y")
;;; 2.91.0 (CFNC "void gdk_cairo_set_source_pixmap cairo_t* cr GdkPixmap* pixmap double pixmap_x double pixmap_y")
(CFNC "void gdk_cairo_rectangle cairo_t* cr GdkRectangle* rectangle")
;;; (CFNC "void gdk_cairo_region cairo_t* cr GdkRegion* region")



(CAIRO-FUNC "guint cairo_get_reference_count cairo_t* cr")
(CAIRO-FUNC "void* cairo_get_user_data cairo_t* cr cairo_user_data_key_t* key")
(CAIRO-FUNC "cairo_status_t cairo_set_user_data cairo_t* cr cairo_user_data_key_t* key void* user_data cairo_destroy_func_t destroy")
(CAIRO-FUNC "void cairo_clip_extents cairo_t* cr double* [x1] double* [y1] double* [x2] double* [y2]")
(CAIRO-FUNC "cairo_rectangle_list_t* cairo_copy_clip_rectangle_list cairo_t* cr")
(CAIRO-FUNC "void cairo_rectangle_list_destroy cairo_rectangle_list_t* rectangle_list")
(CAIRO-FUNC "guint cairo_font_face_get_reference_count cairo_font_face_t* font_face")
(CAIRO-FUNC "guint cairo_scaled_font_get_reference_count cairo_scaled_font_t* scaled_font")
(CAIRO-FUNC "void* cairo_scaled_font_get_user_data cairo_scaled_font_t* scaled_font cairo_user_data_key_t* key")
(CAIRO-FUNC "cairo_status_t cairo_scaled_font_set_user_data cairo_scaled_font_t* scaled_font cairo_user_data_key_t* key void* user_data cairo_destroy_func_t destroy")
(CAIRO-FUNC "int cairo_get_dash_count cairo_t* cr")
(CAIRO-FUNC "void cairo_get_dash cairo_t* cr double* [dashes] double* [offset]")
(CAIRO-FUNC "guint cairo_surface_get_reference_count cairo_surface_t* surface")
(CAIRO-FUNC "guint cairo_pattern_get_reference_count cairo_pattern_t* pattern")
(CAIRO-FUNC "void* cairo_pattern_get_user_data cairo_pattern_t* pattern cairo_user_data_key_t* key")
(CAIRO-FUNC "cairo_status_t cairo_pattern_set_user_data cairo_pattern_t* pattern cairo_user_data_key_t* key void* user_data cairo_destroy_func_t destroy")
(CAIRO-FUNC "cairo_status_t cairo_pattern_get_rgba cairo_pattern_t* pattern double* [red] double* [green] double* [blue] double* [alpha]")
(CAIRO-FUNC "cairo_status_t cairo_pattern_get_surface cairo_pattern_t* pattern cairo_surface_t** [surface]")
(CAIRO-FUNC "cairo_status_t cairo_pattern_get_color_stop_rgba cairo_pattern_t* pattern int index double* [offset] double* [red] double* [green] double* [blue] double* [alpha]")
(CAIRO-FUNC "cairo_status_t cairo_pattern_get_color_stop_count cairo_pattern_t* pattern int* [count]")
(CAIRO-FUNC "cairo_status_t cairo_pattern_get_linear_points cairo_pattern_t* pattern double* [x0] double* [y0] double* [x1] double* [y1]")
(CAIRO-FUNC "cairo_status_t cairo_pattern_get_radial_circles cairo_pattern_t* pattern double* [x0] double* [y0] double* [r0] double* [x1] double* [y1] double* [r1]")
(CAIRO-FUNC "cairo_scaled_font_t* cairo_get_scaled_font cairo_t* cr")




(CINT "GTK_DRAG_RESULT_SUCCESS" "GtkDragResult")
(CINT "GTK_DRAG_RESULT_NO_TARGET" "GtkDragResult")
(CINT "GTK_DRAG_RESULT_USER_CANCELLED" "GtkDragResult")
(CINT "GTK_DRAG_RESULT_TIMEOUT_EXPIRED" "GtkDragResult")
(CINT "GTK_DRAG_RESULT_GRAB_BROKEN" "GtkDragResult")
(CINT "GTK_DRAG_RESULT_ERROR" "GtkDragResult")


;;; (CFNC-gtk2 "gchar* gdk_color_to_string GdkColor* color")
;;; 3.93.0 (CFNC "void gdk_event_request_motions GdkEventMotion* event")
;;; 3.93.0 (CFNC "void gdk_notify_startup_complete_with_id gchar* startup_id")

;;; 3.96.0 (CFNC "guint gdk_threads_add_idle_full gint priority GSourceFunc func lambda_data @func_info GDestroyNotify notify")
;;; 3.96.0 (CFNC "guint gdk_threads_add_idle GSourceFunc func lambda_data @func_info")
;;; 3.96.0 (CFNC "guint gdk_threads_add_timeout_full gint priority guint interval GSourceFunc func lambda_data @func_info GDestroyNotify notify")
;;; 3.96.0 (CFNC "guint gdk_threads_add_timeout guint interval GSourceFunc func lambda_data @func_info")

;;; (CFNC "GtkWidget* gtk_action_create_menu GtkAction* action")
(CFNC "void gtk_binding_entry_skip GtkBindingSet* binding_set guint keyval GdkModifierType modifiers")
(CFNC "GList* gtk_cell_layout_get_cells GtkCellLayout* cell_layout")
(CFNC "void gtk_entry_completion_set_inline_selection GtkEntryCompletion* completion gboolean inline_selection")
(CFNC "gboolean gtk_entry_completion_get_inline_selection GtkEntryCompletion* completion")
(CFNC "gchar* gtk_entry_completion_get_completion_prefix GtkEntryCompletion* completion" 'const)
;;; 3.96.0 (CFNC "void gtk_entry_set_cursor_hadjustment GtkEntry* entry GtkAdjustment* adjustment")
;;; 3.96.0 (CFNC "GtkAdjustment* gtk_entry_get_cursor_hadjustment GtkEntry* entry")
(CFNC "GList* gtk_icon_theme_list_contexts GtkIconTheme* icon_theme")
;(CFNC "GtkPageSetup* gtk_page_setup_new_from_file gchar* file_name GError** [error]")
;(CFNC "gboolean gtk_page_setup_to_file GtkPageSetup* setup char* file_name GError** [error]")
;(CFNC "GtkPageSetup* gtk_page_setup_new_from_key_file GKeyFile* key_file gchar* group_name GError** [error]")
;(CFNC "void gtk_page_setup_to_key_file GtkPageSetup* setup GKeyFile* key_file gchar* group_name")
;(CFNC "GtkPaperSize* gtk_paper_size_new_from_key_file GKeyFile* key_file gchar* group_name GError** [error]")
;(CFNC "void gtk_paper_size_to_key_file GtkPaperSize* size GKeyFile* key_file gchar* group_name")
;(CFNC "GList* gtk_printer_list_papers GtkPrinter* printer")
;(CFNC "gboolean gtk_printer_has_details GtkPrinter* printer")
;(CFNC "void gtk_printer_request_details GtkPrinter* printer")
;(CFNC "GtkPrintCapabilities gtk_printer_get_capabilities GtkPrinter* printer")
(CFNC "GtkPrintSettings* gtk_print_settings_new_from_file gchar* file_name GError** [error]")
(CFNC "gboolean gtk_print_settings_to_file GtkPrintSettings* settings gchar* file_name GError** [error]")
;(CFNC "GtkPrintSettings* gtk_print_settings_new_from_key_file GKeyFile* key_file gchar* group_name GError** [error]")
;(CFNC "void gtk_print_settings_to_key_file GtkPrintSettings* settings GKeyFile* key_file gchar* group_name")
(CFNC "void gtk_range_set_show_fill_level GtkRange* range  gboolean show_fill_level")
(CFNC "gboolean gtk_range_get_show_fill_level GtkRange* range")
(CFNC "void gtk_range_set_restrict_to_fill_level GtkRange* range  gboolean restrict_to_fill_level")
(CFNC "gboolean gtk_range_get_restrict_to_fill_level GtkRange* range")
(CFNC "void gtk_range_set_fill_level GtkRange* range  gdouble fill_level")
(CFNC "gdouble gtk_range_get_fill_level GtkRange* range")
;;; 3.14.0 (CFNC "void gtk_status_icon_set_screen GtkStatusIcon* status_icon GdkScreen* screen")
;;; 3.14.0 (CFNC "GdkScreen* gtk_status_icon_get_screen GtkStatusIcon* status_icon")
(CFNC "void gtk_tree_view_set_show_expanders GtkTreeView* tree_view gboolean enabled")
(CFNC "gboolean gtk_tree_view_get_show_expanders GtkTreeView* tree_view")
(CFNC "void gtk_tree_view_set_level_indentation GtkTreeView* tree_view gint indentation")
(CFNC "gint gtk_tree_view_get_level_indentation GtkTreeView* tree_view")
(CFNC "gboolean gtk_widget_keynav_failed GtkWidget* widget GtkDirectionType direction")
(CFNC "void gtk_widget_error_bell GtkWidget* widget")
(CFNC "void gtk_widget_set_tooltip_window GtkWidget* widget GtkWindow* custom_window")
(CFNC "GtkWindow* gtk_widget_get_tooltip_window GtkWidget* widget")
(CFNC "void gtk_widget_trigger_tooltip_query GtkWidget* widget")
(CFNC "void gtk_window_set_startup_id GtkWindow* window gchar* startup_id")
;;; 3.7.10 (CFNC "void gtk_window_set_opacity GtkWindow* window gdouble opacity")
;;; 3.7.10 (CFNC "gdouble gtk_window_get_opacity GtkWindow* window")


;;; for 2.11.1:

;;; 3.15 (CFNC "gboolean gdk_display_supports_composite GdkDisplay* display")
(CFNC "void gtk_text_buffer_add_mark GtkTextBuffer* buffer GtkTextMark* mark GtkTextIter* where")
;;;(CFNC "void gtk_text_layout_invalidate_cursors GtkTextLayout* layout GtkTextIter* start GtkTextIter* end")
;;;(CFNC "void gtk_text_layout_cursors_changed GtkTextLayout* layout gint y gint old_height gint new_height")
(CFNC "GtkTextMark* gtk_text_mark_new gchar* name gboolean left_gravity")
;;; this enum is commented out above (CINT "GTK_PRINT_CAPABILITY_NUMBER_UP" "GtkPrintCapabilities")


;;; for 2.11.2:

(CFNC "GtkWidget* gtk_tree_view_column_get_tree_view GtkTreeViewColumn* tree_column")


;;; for 2.11.3
;;; new headers gtkbuildable builder (XML UI builder -- not important)

;;; (CSTR "GTK_STOCK_DISCARD")
;;;(CFNC "void gtk_text_layout_set_overwrite_mode GtkTextLayout* layout gboolean overwrite")
(CFNC "void gtk_tooltip_set_text GtkTooltip* tooltip gchar* text" 'const)
(CFNC "void gtk_tree_view_convert_widget_to_tree_coords GtkTreeView* tree_view gint wx gint wy gint* [tx] gint* [ty]")
(CFNC "void gtk_tree_view_convert_tree_to_widget_coords GtkTreeView* tree_view gint tx gint ty gint* [wx] gint* [wy]")
(CFNC "void gtk_tree_view_convert_widget_to_bin_window_coords GtkTreeView* tree_view gint wx gint wy gint* [bx] gint* [by]")
(CFNC "void gtk_tree_view_convert_bin_window_to_widget_coords GtkTreeView* tree_view gint bx gint by gint* [wx] gint* [wy]")
(CFNC "void gtk_tree_view_convert_tree_to_bin_window_coords GtkTreeView* tree_view gint tx gint ty gint* [bx] gint* [by]")
(CFNC "void gtk_tree_view_convert_bin_window_to_tree_coords GtkTreeView* tree_view gint bx gint by gint* [tx] gint* [ty]")
;;; ;this could be added when 211 is required (CFNC-gtk2 "void gtk_widget_modify_cursor GtkWidget* widget GdkColor* primary GdkColor* secondary")
(CFNC "void gtk_widget_set_tooltip_text GtkWidget* widget gchar* text" 'const)
(CFNC "gchar* gtk_widget_get_tooltip_text GtkWidget* widget")
(CFNC "void gtk_widget_set_tooltip_markup GtkWidget* widget gchar* markup" 'const)
(CFNC "gchar* gtk_widget_get_tooltip_markup GtkWidget* widget")

;;; for 2.11.5
(CFNC "gboolean gtk_tree_view_is_rubber_banding_active GtkTreeView* tree_view")

;;; for 2.11.6
;;; 3.91.2 (CFNC "void gtk_icon_view_convert_widget_to_bin_window_coords GtkIconView* icon_view gint wx gint wy gint* [bx] gint* [by]")
(CFNC "void gtk_icon_view_set_tooltip_item GtkIconView* icon_view GtkTooltip* tooltip GtkTreePath* path")
(CFNC "void gtk_icon_view_set_tooltip_cell GtkIconView* icon_view GtkTooltip* tooltip GtkTreePath* path GtkCellRenderer* cell")
(CFNC "gboolean gtk_icon_view_get_tooltip_context GtkIconView* icon_view gint* [x] gint* [y] gboolean keyboard_tip GtkTreeModel** [model] GtkTreePath** [path] GtkTreeIter* @iter")
(CFNC "void gtk_icon_view_set_tooltip_column GtkIconView* icon_view gint column")
(CFNC "gint gtk_icon_view_get_tooltip_column GtkIconView* icon_view ")
(CFNC "void gtk_menu_tool_button_set_arrow_tooltip_text GtkMenuToolButton* button gchar* text" 'const)
(CFNC "void gtk_menu_tool_button_set_arrow_tooltip_markup GtkMenuToolButton* button gchar* markup" 'const)
(CFNC "void gtk_tool_item_set_tooltip_text GtkToolItem* tool_item gchar* text" 'const)
(CFNC "void gtk_tool_item_set_tooltip_markup GtkToolItem* tool_item gchar* markup" 'const)
(CFNC "void gtk_tooltip_set_tip_area GtkTooltip* tooltip GdkRectangle* rect")
(CFNC "void gtk_tree_view_set_tooltip_row GtkTreeView* tree_view GtkTooltip* tooltip GtkTreePath* path")
(CFNC "void gtk_tree_view_set_tooltip_cell GtkTreeView* tree_view GtkTooltip* tooltip GtkTreePath* path GtkTreeViewColumn* column GtkCellRenderer* cell")
(CFNC "gboolean gtk_tree_view_get_tooltip_context GtkTreeView* tree_view gint* [x] gint* [y] gboolean keyboard_tip GtkTreeModel** [model] GtkTreePath** [path] GtkTreeIter* @iter")
(CFNC "void gtk_tree_view_set_tooltip_column GtkTreeView* tree_view gint column")
(CFNC "gint gtk_tree_view_get_tooltip_column GtkTreeView* tree_view ")
(CFNC "void gtk_widget_set_has_tooltip GtkWidget* widget gboolean has_tooltip")
(CFNC "gboolean gtk_widget_get_has_tooltip GtkWidget* widget")

;;; 2.91.6 (CLNG "GTK_TYPE_TOOLTIP")
(CCAST "GTK_TOOLTIP(obj)" "GtkTooltip*")
(CCHK "GTK_IS_TOOLTIP(obj)" "GtkTooltip*")


;;; for 2.13.0, mostly deprecated in 3.19
(CINT "GTK_CALENDAR_SHOW_DETAILS" "GtkCalendarDisplayOptions")
(CFNC "void gtk_calendar_set_detail_func GtkCalendar* calendar GtkCalendarDetailFunc func lambda_data @func_info GDestroyNotify destroy")
(CFNC "void gtk_calendar_set_detail_width_chars GtkCalendar* calendar gint chars")
(CFNC "void gtk_calendar_set_detail_height_rows GtkCalendar* calendar gint rows")
(CFNC "gint gtk_calendar_get_detail_width_chars GtkCalendar* calendar")
(CFNC "gint gtk_calendar_get_detail_height_rows GtkCalendar* calendar")
;;; 3.22.2 (CFNC "gint gdk_screen_get_monitor_width_mm GdkScreen* screen gint monitor_num")
;;; 3.22.2 (CFNC "gint gdk_screen_get_monitor_height_mm GdkScreen* screen gint monitor_num")
;;; 3.22.2 (CFNC "gchar* gdk_screen_get_monitor_plug_name GdkScreen* screen gint monitor_num")
;;; (CFNC "void gtk_tooltip_set_icon_from_icon_name GtkTooltip* tooltip gchar* icon_name GtkIconSize size" 'const)

;(CFNC "void gtk_test_init int* argcp char*** argvp ...")
;(CFNC "GtkWidget* gtk_test_find_widget GtkWidget* widget gchar* label_pattern GType widget_type" 'const)
;(CFNC "GtkWidget* gtk_test_create_widget GType widget_type gchar* first_property_name ..." 'const)
;(CFNC "GtkWidget* gtk_test_create_simple_window gchar* window_title gchar* dialog_text" 'const)
;(CFNC "GtkWidget* gtk_test_display_button_window gchar* window_title gchar* dialog_text ..." 'const)
;(CFNC "void gtk_test_slider_set_perc GtkWidget* widget double percentage")
;(CFNC "double gtk_test_slider_get_value GtkWidget* widget")
;(CFNC "gboolean gtk_test_spin_button_click GtkSpinButton* widget guint button gboolean upwards")
;(CFNC "gboolean gtk_test_widget_click GtkWidget* widget guint button GdkModifierType modifiers")
;(CFNC "gboolean gtk_test_widget_send_key GtkWidget* widget guint keyval GdkModifierType modifiers")
;(CFNC "void gtk_test_text_set GtkWidget* widget gchar* string" 'const)
;(CFNC "gchar* gtk_test_text_get GtkWidget* widget")


(CAIRO-FUNC "void cairo_path_extents cairo_t* cr double* [x1] double* [y1] double* [x2] double* [y2]")
(CAIRO-FUNC "bool cairo_has_current_point cairo_t* cr")
(CAIRO-FUNC "void cairo_surface_copy_page cairo_surface_t* surface")
(CAIRO-FUNC "void cairo_surface_show_page cairo_surface_t* surface")
(CAIRO-FUNC "int cairo_format_stride_for_width cairo_format_t format int width")



;;; someday, get configure switches and incorporate these changes in Pango:
;;; pango 1.15.0
;;; (CINT-2108 "PANGO_FONT_MASK_GRAVITY")

;;; pango 1.15.4:
;;; (CINT-2108 "PANGO_ATTR_ABSOLUTE_SIZE" "PangoAttrType")
;;; (CINT-2108 "PANGO_ATTR_GRAVITY" "PangoAttrType")
;;; (CINT-2108 "PANGO_ATTR_GRAVITY_HINT" "PangoAttrType")
;;; (CFNC-2108 "gboolean pango_layout_is_wrapped PangoLayout* layout")
;;; (CFNC-2108 "gboolean pango_layout_is_ellipsized PangoLayout* layout")

;;; pango 19.3:
;(CFNC-2xx "void pango_layout_set_height PangoLayout* layout int height")
;(CFNC-2xx "int pango_layout_get_height PangoLayout* layout")

;;; Pango 1.21.0
;;; (CFNC-2xx "PangoContext* pango_cairo_create_context cairo_t* cr")
;;; (CFNC-2xx "int pango_layout_get_baseline PangoLayout* layout")



;;; gtk 2.13.4

(CFNC "gboolean gtk_accel_group_get_is_locked GtkAccelGroup* accel_group")
;;; 3.3.16 (CFNC "GtkWidget* gtk_color_selection_dialog_get_color_selection GtkColorSelectionDialog* colorsel")
;;; 3.90.0 (CFNC "GtkWidget* gtk_container_get_focus_child GtkContainer* container")
;;; 3.12? (CFNC "GtkWidget* gtk_dialog_get_action_area GtkDialog* dialog")
(CFNC "GtkWidget* gtk_dialog_get_content_area GtkDialog* dialog")
(CFNC "void gtk_entry_set_overwrite_mode GtkEntry* entry gboolean overwrite")
(CFNC "gboolean gtk_entry_get_overwrite_mode GtkEntry* entry")
(CFNC "guint16 gtk_entry_get_text_length GtkEntry* entry")

;;; out 2.13.7 (CFNC "GtkWidget* gtk_font_selection_get_family_entry GtkFontSelection* fontsel")
;;; 3.1.12 (CFNC "GtkWidget* gtk_font_selection_get_family_list GtkFontSelection* fontsel")
;;; out 2.13.7 (CFNC "GtkWidget* gtk_font_selection_get_face_entry GtkFontSelection* fontsel")
;;; 3.1.12 (CFNC "GtkWidget* gtk_font_selection_get_face_list GtkFontSelection* fontsel")
;;; 3.1.12 (CFNC "GtkWidget* gtk_font_selection_get_size_entry GtkFontSelection* fontsel")
;;; 3.1.12 (CFNC "GtkWidget* gtk_font_selection_get_size_list GtkFontSelection* fontsel")
;;; 3.1.12 (CFNC "GtkWidget* gtk_font_selection_get_preview_entry GtkFontSelection* fontsel")
;;; 3.1.12 (CFNC "PangoFontFamily* gtk_font_selection_get_family GtkFontSelection* fontsel")
;;; 3.1.12 (CFNC "PangoFontFace* gtk_font_selection_get_face GtkFontSelection* fontsel")
;;; 3.1.12 (CFNC "gint gtk_font_selection_get_size GtkFontSelection* fontsel")
;;; 3.1.12 (CFNC "GtkWidget* gtk_font_selection_dialog_get_ok_button GtkFontSelectionDialog* fsd")
;;; out 2.15.0 (CFNC "GtkWidget* gtk_font_selection_dialog_get_apply_button GtkFontSelectionDialog* fsd")
;;; 3.1.12 (CFNC "GtkWidget* gtk_font_selection_dialog_get_cancel_button GtkFontSelectionDialog* fsd")

;;; 3.3.2 (CFNC "gboolean gtk_handle_box_get_child_detached GtkHandleBox* handle_box")
(CFNC "gchar* gtk_menu_get_accel_path GtkMenu* menu" 'const)
(CFNC "gint gtk_menu_get_monitor GtkMenu* menu")
(CFNC "gchar* gtk_menu_item_get_accel_path GtkMenuItem* menu_item" 'const)
;(CFNC "GtkWidget* gtk_message_dialog_get_image GtkMessageDialog* dialog")
;;; 2.99.3 (CFNC "gboolean gtk_plug_get_embedded GtkPlug* plug")
;;; out 2.15.1 (CFNC "GtkOrientation gtk_scale_button_get_orientation GtkScaleButton* button")
;;; (CFNC "void gtk_scale_button_set_orientation GtkScaleButton* button GtkOrientation orientation")
(CFNC "GtkWidget* gtk_scale_button_get_plus_button GtkScaleButton* button")
(CFNC "GtkWidget* gtk_scale_button_get_minus_button GtkScaleButton* button")
(CFNC "GtkWidget* gtk_scale_button_get_popup GtkScaleButton* button")
(CFNC "GdkAtom gtk_selection_data_get_target GtkSelectionData* selection_data")
(CFNC "GdkAtom gtk_selection_data_get_data_type GtkSelectionData* selection_data")
(CFNC "gint gtk_selection_data_get_format GtkSelectionData* selection_data")
;;; changed 2.14.1 (CFNC "guchar* gtk_selection_data_get_data GtkSelectionData* selection_data guint* length" 'const)
(CFNC "GdkDisplay* gtk_selection_data_get_display GtkSelectionData* selection_data")
;;out 2.14.1 ;(CFNC "GtkAllocation gtk_widget_get_allocation GtkWidget* widget")
;;; (CFNC "GtkWidget* gtk_window_get_default GtkWindow* window")
(CFNC "GdkModifierType gtk_accel_group_get_modifier_mask GtkAccelGroup* accel_group")


;;; 3.3.8 (STRUCT-make "GdkColor guint32 &pixel guint16 &red guint16 &green guint16 &blue")
;;; out 2.90.4 (STRUCT-make "GdkCursor GdkCursorType type guint ref_count")
;;; (STRUCT-make "GdkPoint gint x gint y")
;;; (STRUCT-make "GdkRectangle gint x gint y gint width gint height")
;;; (STRUCT-make "GtkRequisition gint width gint height")
;;; (STRUCT-make "GtkStockItem")
;(STRUCT-make "GtkTextIter")
;(STRUCT-make "GtkTreeIter")
;;; (STRUCT-make "PangoColor")
;(STRUCT-make "PangoRectangle")
;;; (STRUCT-make "PangoLogAttr")


;;; gtk 1.13.6
(CINT "GDK_CROSSING_GTK_GRAB" "GdkCrossingMode")
(CINT "GDK_CROSSING_GTK_UNGRAB" "GdkCrossingMode")
(CINT "GDK_CROSSING_STATE_CHANGED" "GdkCrossingMode")


;(CFNC "guint gdk_threads_add_timeout_seconds_full gint priority guint interval GSourceFunc function lambda_data @func_info GDestroyNotify notify")
;(CFNC "guint gdk_threads_add_timeout_seconds guint interval GSourceFunc function lambda_data @func_info")
(CFNC "gdouble gtk_adjustment_get_lower GtkAdjustment* adjustment")
(CFNC "void gtk_adjustment_set_lower GtkAdjustment* adjustment gdouble lower")
(CFNC "gdouble gtk_adjustment_get_upper GtkAdjustment* adjustment")
(CFNC "void gtk_adjustment_set_upper GtkAdjustment* adjustment gdouble upper")
(CFNC "gdouble gtk_adjustment_get_step_increment GtkAdjustment* adjustment")
(CFNC "void gtk_adjustment_set_step_increment GtkAdjustment* adjustment gdouble step_increment")
(CFNC "gdouble gtk_adjustment_get_page_increment GtkAdjustment* adjustment")
(CFNC "void gtk_adjustment_set_page_increment GtkAdjustment* adjustment gdouble page_increment")
(CFNC "gdouble gtk_adjustment_get_page_size GtkAdjustment* adjustment")
(CFNC "void gtk_adjustment_set_page_size GtkAdjustment* adjustment gdouble page_size")
(CFNC "void gtk_adjustment_configure GtkAdjustment* adjustment gdouble value gdouble lower gdouble upper gdouble step_increment gdouble page_increment gdouble page_size")
(CFNC "void gtk_combo_box_set_button_sensitivity GtkComboBox* combo_box GtkSensitivityType sensitivity")
(CFNC "GtkSensitivityType gtk_combo_box_get_button_sensitivity GtkComboBox* combo_box")
(CFNC "GFile* gtk_file_chooser_get_file GtkFileChooser* chooser")
(CFNC "gboolean gtk_file_chooser_set_file GtkFileChooser* chooser GFile* file GError** [error]")
(CFNC "gboolean gtk_file_chooser_select_file GtkFileChooser* chooser GFile* file GError** [error]")
(CFNC "void gtk_file_chooser_unselect_file GtkFileChooser* chooser GFile* file")
(CFNC "GSList* gtk_file_chooser_get_files GtkFileChooser* chooser")
(CFNC "gboolean gtk_file_chooser_set_current_folder_file GtkFileChooser* chooser GFile* file GError** [error]")
(CFNC "GFile* gtk_file_chooser_get_current_folder_file GtkFileChooser* chooser")
(CFNC "GFile* gtk_file_chooser_get_preview_file GtkFileChooser* chooser")

(CFNC "GtkWidget* gtk_window_get_default_widget GtkWindow* window")

;;; gtkdestroynotify -> gdestroynotify

(CINT "GTK_ENTRY_ICON_PRIMARY" "GtkEntryIconPosition")
(CINT "GTK_ENTRY_ICON_SECONDARY" "GtkEntryIconPosition")

;;; 3.13.2 (CINT "GTK_ARROWS_BOTH" "GtkArrowPlacement")
;;; 3.13.2 (CINT "GTK_ARROWS_START" "GtkArrowPlacement")
;;; 3.13.2 (CINT "GTK_ARROWS_END" "GtkArrowPlacement")

(CFNC "gboolean gtk_link_button_get_visited GtkLinkButton* link_button")
(CFNC "void gtk_link_button_set_visited GtkLinkButton* link_button bool visited")
(CFNC "gboolean gdk_keymap_get_caps_lock_state GdkKeymap* keymap")
(CFNC "GtkTreeModel* gtk_cell_view_get_model GtkCellView* cell_view")
(CFNC "void gtk_entry_unset_invisible_char GtkEntry* entry")
(CFNC "void gtk_entry_set_progress_fraction GtkEntry* entry gdouble fraction")
(CFNC "gdouble gtk_entry_get_progress_fraction GtkEntry* entry")
(CFNC "void gtk_entry_set_progress_pulse_step GtkEntry* entry gdouble fraction")
(CFNC "gdouble gtk_entry_get_progress_pulse_step GtkEntry* entry")
(CFNC "void gtk_entry_progress_pulse GtkEntry* entry")
;;; 3.93.0 (CFNC "void gtk_entry_set_icon_from_pixbuf GtkEntry* entry GtkEntryIconPosition icon_pos GdkPixbuf* pixbuf")
;;; 3.9.8 (CFNC "void gtk_entry_set_icon_from_stock GtkEntry* entry GtkEntryIconPosition icon_pos gchar* stock_id")
;;; 3.93.0 (CFNC "void gtk_entry_set_icon_from_icon_name GtkEntry* entry GtkEntryIconPosition icon_pos gchar* icon_name")
;;; 3.93.0 (CFNC "void gtk_entry_set_icon_from_gicon GtkEntry* entry GtkEntryIconPosition icon_pos GIcon* icon")
;??? (CFNC "GtkImageType gtk_entry_get_storage_type GtkEntry* entry GtkEntryIconPosition icon_pos")
;??? (CFNC "GdkPixbuf* gtk_entry_get_pixbuf GtkEntry* entry GtkEntryIconPosition icon_pos")
;??? (CFNC "gchar* gtk_entry_get_stock GtkEntry* entry GtkEntryIconPosition icon_pos" 'const)
(CFNC "gchar* gtk_entry_get_icon_name GtkEntry* entry GtkEntryIconPosition icon_pos" 'const)
;??? (CFNC "GIcon* gtk_entry_get_gicon GtkEntry* entry GtkEntryIconPosition icon_pos")
(CFNC "void gtk_entry_set_icon_activatable GtkEntry* entry GtkEntryIconPosition icon_pos gboolean activatable")
(CFNC "gboolean gtk_entry_get_icon_activatable GtkEntry* entry GtkEntryIconPosition icon_pos")
(CFNC "void gtk_entry_set_icon_sensitive GtkEntry* entry GtkEntryIconPosition icon_pos gboolean sensitive")
(CFNC "gboolean gtk_entry_get_icon_sensitive GtkEntry* entry GtkEntryIconPosition icon_pos")
(CFNC "gint gtk_entry_get_icon_at_pos GtkEntry* entry gint x gint y")
(CFNC "void gtk_entry_set_icon_tooltip_text GtkEntry* entry GtkEntryIconPosition icon_pos gchar* tooltip")
(CFNC "void gtk_entry_set_icon_tooltip_markup GtkEntry* entry GtkEntryIconPosition icon_pos gchar* tooltip")
;;; 3.93.0 (CFNC "void gtk_entry_set_icon_drag_source GtkEntry* entry GtkEntryIconPosition icon_pos GtkTargetList* target_list GdkDragAction actions")
;;; 3.93.0 (CFNC "gint gtk_entry_get_current_icon_drag_source GtkEntry* entry")
;;; (CFNC "void gtk_image_menu_item_set_use_stock GtkImageMenuItem* image_menu_item gboolean use_stock")
;;; (CFNC "gboolean gtk_image_menu_item_get_use_stock GtkImageMenuItem* image_menu_item")
;;; (CFNC "void gtk_image_menu_item_set_accel_group GtkImageMenuItem* image_menu_item GtkAccelGroup* accel_group")
(CFNC "void gtk_menu_item_set_label GtkMenuItem* menu_item gchar* label")
(CFNC "gchar* gtk_menu_item_get_label GtkMenuItem* menu_item" 'const)
(CFNC "void gtk_menu_item_set_use_underline GtkMenuItem* menu_item gboolean setting")
(CFNC "gboolean gtk_menu_item_get_use_underline GtkMenuItem* menu_item")
;;; 3.93.0 (CFNC "GdkAtom gtk_selection_data_get_selection GtkSelectionData* selection_data")


;;; 2.15.1
;;; 3.93.0 (CINT "GDK_BLANK_CURSOR " "GdkCursorType")
;;; (CSTR "GTK_STOCK_CAPS_LOCK_WARNING")

;;; 3.9.8
;;; (CFNC "void gtk_action_set_label GtkAction* action gchar* label")
;;; (CFNC "gchar* gtk_action_get_label GtkAction* action")
;;; (CFNC "void gtk_action_set_short_label GtkAction* action gchar* short_label")
;;; (CFNC "gchar* gtk_action_get_short_label GtkAction* action")
;;; (CFNC "void gtk_action_set_tooltip GtkAction* action gchar* tooltip")
;;; (CFNC "gchar* gtk_action_get_tooltip GtkAction* action")
;;; (CFNC "void gtk_action_set_stock_id GtkAction* action gchar* stock_id")
;;; (CFNC "gchar* gtk_action_get_stock_id GtkAction* action")
;;; (CFNC "void gtk_action_set_gicon GtkAction* action GIcon* icon")
;;; (CFNC "GIcon* gtk_action_get_gicon GtkAction* action")
;;; (CFNC "void gtk_action_set_icon_name GtkAction* action gchar* icon_name")
;;; (CFNC "gchar* gtk_action_get_icon_name GtkAction* action")
;;; (CFNC "void gtk_action_set_visible_horizontal GtkAction* action gboolean visible_horizontal")
;;; (CFNC "gboolean gtk_action_get_visible_horizontal GtkAction* action")
;;; (CFNC "void gtk_action_set_visible_vertical GtkAction* action gboolean visible_vertical")
;;; (CFNC "gboolean gtk_action_get_visible_vertical GtkAction* action")
;;; (CFNC "void gtk_action_set_is_important GtkAction* action gboolean is_important")
;;; (CFNC "gboolean gtk_action_get_is_important GtkAction* action")

(CFNC "gchar* gtk_entry_get_icon_tooltip_text GtkEntry* entry GtkEntryIconPosition icon_pos")
(CFNC "gchar* gtk_entry_get_icon_tooltip_markup GtkEntry* entry GtkEntryIconPosition icon_pos")
(CFNC "void gtk_scale_add_mark GtkScale* scale gdouble value GtkPositionType position gchar* markup")
(CFNC "void gtk_scale_clear_marks GtkScale* scale")



;;; 2.15.2 (these on 2.17.2)
;;; (CFNC "void gtk_image_menu_item_set_always_show_image GtkImageMenuItem* image_menu_item gboolean always_show")
;;; (CFNC "gboolean gtk_image_menu_item_get_always_show_image GtkImageMenuItem* image_menu_item")

(CINT "PANGO_WEIGHT_THIN" "PangoWeight")
(CINT "PANGO_WEIGHT_BOOK" "PangoWeight")
(CINT "PANGO_WEIGHT_MEDIUM" "PangoWeight")

;;; 2.15.5
(CFNC "gchar* gtk_window_get_default_icon_name void" 'const)

;;; 2.17.1
(CFNC "gchar* gtk_label_get_current_uri GtkLabel* label" 'const)


;;; 2.17.2
(CCAST "GTK_INFO_BAR(obj)" "GtkInfoBar*")
(CCHK "GTK_IS_INFO_BAR(obj)" "GtkInfoBar*")

(CFNC "GtkWidget* gtk_info_bar_new void")
;(CFNC "GtkWidget* gtk_info_bar_new_with_buttons gchar* first_button_text ...")
(CFNC "GtkWidget* gtk_info_bar_get_action_area GtkInfoBar* info_bar")
(CFNC "GtkWidget* gtk_info_bar_get_content_area GtkInfoBar* info_bar")
(CFNC "void gtk_info_bar_add_action_widget GtkInfoBar* info_bar GtkWidget* child gint response_id")
(CFNC "GtkWidget* gtk_info_bar_add_button GtkInfoBar* info_bar gchar* button_text gint response_id")
;(CFNC "void gtk_info_bar_add_buttons GtkInfoBar* info_bar gchar* first_button_text ...")
(CFNC "void gtk_info_bar_set_response_sensitive GtkInfoBar* info_bar gint response_id gboolean setting") ; const arg
(CFNC "void gtk_info_bar_set_default_response GtkInfoBar* info_bar gint response_id")
(CFNC "void gtk_info_bar_response GtkInfoBar* info_bar gint response_id")
(CFNC "void gtk_info_bar_set_message_type GtkInfoBar* info_bar GtkMessageType message_type")
(CFNC "GtkMessageType gtk_info_bar_get_message_type GtkInfoBar* info_bar")


;;; 2.17.3


;;; (CFNC "gboolean gdk_region_rect_equal GdkRegion* region GdkRectangle* rectangle" 'const)
(CFNC "void gtk_menu_set_reserve_toggle_size GtkMenu* menu gboolean reserve_toggle_size")
(CFNC "gboolean gtk_menu_get_reserve_toggle_size GtkMenu* menu")
;;; 3.14.0 (CFNC "void gtk_status_icon_set_title GtkStatusIcon* status_icon gchar* title")
;;; 3.14.0 (CFNC "gchar* gtk_status_icon_get_title GtkStatusIcon* status_icon")


;;; 2.17.4

(CINT "GTK_ENTRY_BUFFER_MAX_SIZE") ; maxushort in gtk_entry_buffer.h (gint)
;;; 2.91.6 (CLNG "GTK_TYPE_ENTRY_BUFFER")
(CCAST "GTK_ENTRY_BUFFER(obj)" "GtkEntryBuffer*")
(CCHK "GTK_IS_ENTRY_BUFFER(obj)" "GtkEntryBuffer*")

(CFNC "GtkWidget* gtk_entry_new_with_buffer GtkEntryBuffer* buffer")
(CFNC "GtkEntryBuffer* gtk_entry_get_buffer GtkEntry* entry")
(CFNC "void gtk_entry_set_buffer GtkEntry* entry GtkEntryBuffer* buffer")
(CFNC "void gtk_label_set_track_visited_links GtkLabel* label gboolean track_links")
(CFNC "gboolean gtk_label_get_track_visited_links GtkLabel* label")
(CFNC "void gtk_print_operation_set_embed_page_setup GtkPrintOperation* op gboolean embed")
(CFNC "gboolean gtk_print_operation_get_embed_page_setup GtkPrintOperation* op")
(CFNC "GtkEntryBuffer* gtk_entry_buffer_new gchar* initial_chars gint n_initial_chars")
(CFNC "gsize gtk_entry_buffer_get_bytes GtkEntryBuffer* buffer")
(CFNC "guint gtk_entry_buffer_get_length GtkEntryBuffer* buffer")
(CFNC "gchar* gtk_entry_buffer_get_text GtkEntryBuffer* buffer" 'const)
(CFNC "void gtk_entry_buffer_set_text GtkEntryBuffer* buffer gchar* chars gint n_chars")
(CFNC "void gtk_entry_buffer_set_max_length GtkEntryBuffer* buffer guint max_length")
(CFNC "guint gtk_entry_buffer_get_max_length GtkEntryBuffer* buffer")
(CFNC "guint gtk_entry_buffer_insert_text GtkEntryBuffer* buffer guint position gchar* chars gint n_chars")
(CFNC "guint gtk_entry_buffer_delete_text GtkEntryBuffer* buffer guint position gint n_chars")
(CFNC "void gtk_entry_buffer_emit_inserted_text GtkEntryBuffer* buffer guint position gchar* chars guint n_chars")
(CFNC "void gtk_entry_buffer_emit_deleted_text GtkEntryBuffer* buffer guint position guint n_chars")


;;; 2.17.5

(CFNC "void gtk_cell_renderer_set_alignment GtkCellRenderer* cell gfloat xalign gfloat yalign")
(CFNC "void gtk_cell_renderer_get_alignment GtkCellRenderer* cell gfloat* [xalign] gfloat* [yalign]")
(CFNC "void gtk_cell_renderer_set_padding GtkCellRenderer* cell gint xpad gint ypad")
(CFNC "void gtk_cell_renderer_get_padding GtkCellRenderer* cell gint* [xpad] gint* [ypad]")
(CFNC "void gtk_cell_renderer_set_visible GtkCellRenderer* cell gboolean visible")
(CFNC "gboolean gtk_cell_renderer_get_visible GtkCellRenderer* cell")
(CFNC "void gtk_cell_renderer_set_sensitive GtkCellRenderer* cell gboolean sensitive")
(CFNC "gboolean gtk_cell_renderer_get_sensitive GtkCellRenderer* cell")
(CFNC "gboolean gtk_cell_renderer_toggle_get_activatable GtkCellRendererToggle* toggle")
(CFNC "void gtk_cell_renderer_toggle_set_activatable GtkCellRendererToggle* toggle gboolean setting")
(CFNC "void gtk_widget_set_can_focus GtkWidget* widget gboolean can_focus")
(CFNC "gboolean gtk_widget_get_can_focus GtkWidget* widget")
(CFNC "gboolean gtk_widget_has_focus GtkWidget* widget")
;;; 3.96.0 (CFNC "void gtk_widget_set_can_default GtkWidget* widget gboolean can_default")
;;; 3.96.0 (CFNC "gboolean gtk_widget_get_can_default GtkWidget* widget")
(CFNC "gboolean gtk_widget_has_default GtkWidget* widget")
;;; (CFNC "GtkStateType gtk_widget_get_state GtkWidget* widget")
(CFNC "gboolean gtk_widget_get_sensitive GtkWidget* widget")
(CFNC "gboolean gtk_widget_is_sensitive GtkWidget* widget")
;;; 3.96.0 (CFNC "void gtk_widget_set_has_window GtkWidget* widget gboolean has_window")
;;; 3.96.0 (CFNC "gboolean gtk_widget_get_has_window GtkWidget* widget")
;;; 3.89 (CFNC "gboolean gtk_widget_get_app_paintable GtkWidget* widget")
;;; 3.13.3 (CFNC "gboolean gtk_widget_get_double_buffered GtkWidget* widget")


;;; 2.17.7

(CFNC "void gtk_file_chooser_set_create_folders GtkFileChooser* chooser gboolean create_folders")
(CFNC "gboolean gtk_file_chooser_get_create_folders GtkFileChooser* chooser")
(CFNC "void gtk_icon_view_set_item_padding GtkIconView* icon_view gint item_padding")
(CFNC "gint gtk_icon_view_get_item_padding GtkIconView* icon_view")
(CFNC "gboolean gtk_widget_has_grab GtkWidget* widget")
(CFNC "void gtk_widget_set_visible GtkWidget* widget gboolean visible")
(CFNC "gboolean gtk_widget_get_visible GtkWidget* widget")
;(CFNC "void gtk_widget_get_allocation GtkWidget* widget GtkAllocation* [allocation]")
; the struct arg is a problem for makexg.scm

;;; (CINT "GTK_FILE_CHOOSER_PROP_CREATE_FOLDERS" "GtkFileChooserProp")

;;; 2.17.8
;;; 3.91.2 ;(CFNC "void gtk_widget_set_allocation GtkWidget* widget GtkAllocation* allocation")


;;; 2.17.10
(CFNC "void gtk_range_set_flippable GtkRange* range gboolean flippable")
(CFNC "gboolean gtk_range_get_flippable GtkRange* range")
(CFNC "gboolean gtk_widget_is_toplevel GtkWidget* widget")
(CFNC "gboolean gtk_widget_is_drawable GtkWidget* widget")


;;; 2.17.11
(CFNC "void gtk_widget_set_receives_default GtkWidget* widget gboolean receives_default")
(CFNC "gboolean gtk_widget_get_receives_default GtkWidget* widget")

;;; 2.18.0


;;; 2.19.0
(CFNC "GtkWidget* gtk_dialog_get_widget_for_response GtkDialog* dialog gint response_id")
;;; (CFNC "void gtk_tooltip_set_icon_from_gicon GtkTooltip* tooltip GIcon* gicon GtkIconSize size")
(CFNC "GtkWidget* gtk_spinner_new void")
(CFNC "void gtk_spinner_start GtkSpinner* spinner")
(CFNC "void gtk_spinner_stop GtkSpinner* spinner")
(CFNC "GtkCellRenderer* gtk_cell_renderer_spinner_new void") ; surely they mean GtkCellRendererSpinner?

(CCAST "GTK_SPINNER(obj)" "GtkSpinner*")
(CCHK "GTK_IS_SPINNER(obj)" "GtkSpinner*")

(CCAST "GTK_CELL_RENDERER_SPINNER(obj)" "GtkCellRendererSpinner*")
(CCHK "GTK_IS_CELL_RENDERER_SPINNER(obj)" "GtkCellRendererSpinner*")

;;; 2.19.1
;;; 3.94.0 (CCAST "GTK_TOOL_PALETTE(obj)" "GtkToolPalette*")
;;; 3.94.0 (CCHK "GTK_IS_TOOL_PALETTE(obj)" "GtkToolPalette*")
;;; 3.94.0 (CCAST "GTK_TOOL_ITEM_GROUP(obj)" "GtkToolItemGroup*")
;;; 3.94.0 (CCHK "GTK_IS_TOOL_ITEM_GROUP(obj)" "GtkToolItemGroup*")

;;; (CFNC "void gtk_action_set_always_show_image GtkAction* action gboolean always_show")
;;; (CFNC "gboolean gtk_action_get_always_show_image GtkAction* action")
(CFNC "GtkWidget* gtk_notebook_get_action_widget GtkNotebook* notebook GtkPackType pack_type")
(CFNC "void gtk_notebook_set_action_widget GtkNotebook* notebook GtkWidget* widget GtkPackType pack_type")
(CFNC "GtkWidget* gtk_statusbar_get_message_area GtkStatusbar* statusbar")
(CFNC "PangoEllipsizeMode gtk_tool_item_get_ellipsize_mode GtkToolItem* tool_item")
(CFNC "gfloat gtk_tool_item_get_text_alignment GtkToolItem* tool_item")
(CFNC "GtkOrientation gtk_tool_item_get_text_orientation GtkToolItem* tool_item")
(CFNC "GtkSizeGroup* gtk_tool_item_get_text_size_group GtkToolItem* tool_item")
;;; (CFNC "GtkWindowType gtk_window_get_window_type GtkWindow* window")
;;; 3.96.0 (CFNC "GtkWidget* gtk_tool_palette_new void")
;;; 3.94.0 (CFNC "void gtk_tool_palette_set_group_position GtkToolPalette* palette GtkToolItemGroup* group gint position") ; these changed GtkWidget* to GtkToolItemGroup*
;;; 3.94.0 (CFNC "void gtk_tool_palette_set_exclusive GtkToolPalette* palette GtkToolItemGroup* group gboolean exclusive")
;;; 3.94.0 (CFNC "void gtk_tool_palette_set_expand GtkToolPalette* palette GtkToolItemGroup* group gboolean expand")
;;; 3.94.0 (CFNC "gint gtk_tool_palette_get_group_position GtkToolPalette* palette GtkToolItemGroup* group")
;;; 3.94.0 (CFNC "gboolean gtk_tool_palette_get_exclusive GtkToolPalette* palette GtkToolItemGroup* group")
;;; 3.94.0 (CFNC "gboolean gtk_tool_palette_get_expand GtkToolPalette* palette GtkToolItemGroup* group")
;;; 3.94.0 ;;; (CFNC "void gtk_tool_palette_set_icon_size GtkToolPalette* palette GtkIconSize icon_size")
;;; 3.94.0 ;;; 3.93.0 (CFNC "void gtk_tool_palette_unset_icon_size GtkToolPalette* palette")
;;; 3.94.0 (CFNC "void gtk_tool_palette_set_style GtkToolPalette* palette GtkToolbarStyle style")
;;; 3.94.0 (CFNC "void gtk_tool_palette_unset_style GtkToolPalette* palette")
;;; 3.94.0 ;;; (CFNC "GtkIconSize gtk_tool_palette_get_icon_size GtkToolPalette* palette")
;;; 3.94.0 (CFNC "GtkToolbarStyle gtk_tool_palette_get_style GtkToolPalette* palette")
;;; 3.94.0 (CFNC "GtkToolItem* gtk_tool_palette_get_drop_item GtkToolPalette* palette gint x gint y")
;;; 3.94.0 (CFNC "GtkToolItemGroup* gtk_tool_palette_get_drop_group GtkToolPalette* palette gint x gint y")
;;; 3.94.0 (CFNC "GtkWidget* gtk_tool_palette_get_drag_item GtkToolPalette* palette GtkSelectionData* selection")
;;; 3.94.0 (CFNC "void gtk_tool_palette_set_drag_source GtkToolPalette* palette GtkToolPaletteDragTargets targets")
;;; 3.94.0 (CFNC "void gtk_tool_palette_add_drag_dest GtkToolPalette* palette GtkWidget* widget GtkDestDefaults flags GtkToolPaletteDragTargets targets GdkDragAction actions")
;;; 3.94.0 ;;; 2.91.2 (CFNC "GtkAdjustment* gtk_tool_palette_get_hadjustment GtkToolPalette* palette")
;;; 3.94.0 ;;; 2.91.2 (CFNC "GtkAdjustment* gtk_tool_palette_get_vadjustment GtkToolPalette* palette")
;;; 3.94.0 ;;; 3.93.0 (CFNC "GtkTargetEntry* gtk_tool_palette_get_drag_target_item void" 'const-return)
;;; 3.94.0 ;;; 3.93.0 (CFNC "GtkTargetEntry* gtk_tool_palette_get_drag_target_group void" 'const-return)
;;; 3.94.0 (CFNC "GtkWidget* gtk_tool_item_group_new gchar* label" 'const)
;;; 3.94.0 (CFNC "void gtk_tool_item_group_set_label GtkToolItemGroup* group gchar* label" 'const)
;;; 3.94.0 (CFNC "void gtk_tool_item_group_set_label_widget GtkToolItemGroup* group GtkWidget* label_widget")
;;; 3.94.0 (CFNC "void gtk_tool_item_group_set_collapsed GtkToolItemGroup* group gboolean collapsed")
;;; 3.94.0 (CFNC "void gtk_tool_item_group_set_ellipsize GtkToolItemGroup* group PangoEllipsizeMode ellipsize")
;;; 3.94.0 (CFNC "void gtk_tool_item_group_set_header_relief GtkToolItemGroup* group GtkReliefStyle style")
;;; 3.94.0 (CFNC "gchar* gtk_tool_item_group_get_label GtkToolItemGroup* group")
;;; 3.94.0 (CFNC "GtkWidget* gtk_tool_item_group_get_label_widget GtkToolItemGroup* group")
;;; 3.94.0 (CFNC "gboolean gtk_tool_item_group_get_collapsed GtkToolItemGroup* group")
;;; 3.94.0 (CFNC "PangoEllipsizeMode gtk_tool_item_group_get_ellipsize GtkToolItemGroup* group")
;;; 3.94.0 (CFNC "GtkReliefStyle gtk_tool_item_group_get_header_relief GtkToolItemGroup* group")
;;; 3.94.0 (CFNC "void gtk_tool_item_group_insert GtkToolItemGroup* group GtkToolItem* item gint position")
;;; 3.94.0 (CFNC "void gtk_tool_item_group_set_item_position GtkToolItemGroup* group GtkToolItem* item gint position")
;;; 3.94.0 (CFNC "gint gtk_tool_item_group_get_item_position GtkToolItemGroup* group GtkToolItem* item")
;;; 3.94.0 (CFNC "guint gtk_tool_item_group_get_n_items GtkToolItemGroup* group")
;;; 3.94.0 (CFNC "GtkToolItem* gtk_tool_item_group_get_nth_item GtkToolItemGroup* group guint index")
;;; 3.94.0 (CFNC "GtkToolItem* gtk_tool_item_group_get_drop_item GtkToolItemGroup* group gint x gint y")

;;; 2.19.2
;; (CFNC "gboolean gdk_keymap_map_virtual_modifiers GdkKeymap* keymap GdkModifierType *state")
;;  there is no code for this!
;;; 3.22.2 (CFNC "gint gdk_screen_get_primary_monitor GdkScreen* screen")
(CFNC "void gtk_window_set_mnemonics_visible GtkWindow* window gboolean setting")
(CFNC "gboolean gtk_window_get_mnemonics_visible GtkWindow* window")


;;; 2.19.4
(CFNC "void gtk_range_set_slider_size_fixed GtkRange* range gboolean size_fixed")
(CFNC "gboolean gtk_range_get_slider_size_fixed GtkRange* range")
;;; 3.20 (CFNC "void gtk_range_set_min_slider_size GtkRange* range gboolean min_size")
;;; 3.20 (CFNC "gint gtk_range_get_min_slider_size GtkRange* range")
(CFNC "void gtk_range_get_range_rect GtkRange* range GdkRectangle* range_rect")
(CFNC "void gtk_range_get_slider_range GtkRange* range gint* [slider_start] gint* [slider_end]")
;;; 3.14.0 (CFNC "void gtk_status_icon_set_name GtkStatusIcon* status_icon gchar* name") ; const gchar
;;; 2.91.6 (CFNC "gboolean gtk_widget_has_rc_style GtkWidget* widget")

;;; 2.19.5
;;; 2.99.1 (CFNC "void gtk_widget_style_attach GtkWidget* style")
;;; 3.96.0 (CFNC "void gtk_widget_set_realized GtkWidget* widget gboolean realized")
(CFNC "gboolean gtk_widget_get_realized GtkWidget* widget")
;;; 3.89 (CFNC "void gtk_widget_set_mapped GtkWidget* widget gboolean mapped")
(CFNC "gboolean gtk_widget_get_mapped GtkWidget* widget")


;;; 2.19.6
(CFNC-3.0 "void gdk_keymap_add_virtual_modifiers GdkKeymap* keymap GdkModifierType* state")
;(CFNC-3.0 "void gtk_widget_get_requisition GtkWidget* widget GtkRequisition* [requisition]")

;;; 2.21.0
(CFNC-3.0 "GtkWidget* gtk_accessible_get_widget GtkAccessible* accessible")
;;; 2.91.2 (CFNC-3.0 "GtkAdjustment* gtk_text_view_get_hadjustment GtkTextView* text_view")
;;; 2.91.2 (CFNC-3.0 "GtkAdjustment* gtk_text_view_get_vadjustment GtkTextView* text_view")
;;; 3.96.0 (CFNC-3.0 "gboolean gtk_widget_send_focus_change GtkWidget* widget GdkEvent* event")

;;; 2.90.1
;;; 2.99.0 (CFNC-3.0 "void gdk_display_get_device_state GdkDisplay* display GdkDevice* device GdkScreen** [screen] gint* [x] gint* [y] GdkModifierType* [mask]")
;;; 2.91.7 (CFNC-3.0 "void gdk_display_warp_device GdkDisplay* display GdkDevice* device GdkScreen* screen gint x gint y")
;;; 3.19.5 (CFNC-3.0 "GdkDeviceManager* gdk_display_get_device_manager GdkDisplay* display")
;;; 3.93.0 (CFNC-3.0 "void gdk_drag_context_set_device GdkDrag* context GdkDevice* device")
;;; 3.96.0 (CFNC-3.0 "GdkDevice* gdk_drag_context_get_device GdkDrag* context")
;;; 3.93.0 (CFNC-3.0 "GList* gdk_drag_context_list_targets GdkDrag* context")

(CFNC-3.0 "void gdk_event_set_device GdkEvent* event GdkDevice* device")
(CFNC-3.0 "GdkDevice* gdk_event_get_device GdkEvent* event")
(CFNC-3.0 "gboolean gdk_events_get_distance GdkEvent* event1 GdkEvent* event2 gdouble* [distance]")
(CFNC-3.0 "gboolean gdk_events_get_angle GdkEvent* event1 GdkEvent* event2 gdouble* [angle]")
(CFNC-3.0 "gboolean gdk_events_get_center GdkEvent* event1 GdkEvent* event2 gdouble* [x] gdouble* [y]")
;;; 2.90.6 (CFNC-3.0 "GdkVisual* gdk_image_get_visual GdkImage* image")
;;; 2.90.6 (CFNC-3.0 "GdkByteOrder gdk_image_get_byte_order GdkImage* image")
;;; 2.90.6 (CFNC-3.0 "gint gdk_image_get_width GdkImage* image")
;;; 2.90.6 (CFNC-3.0 "gint gdk_image_get_height GdkImage* image")
;;; 2.90.6 (CFNC-3.0 "guint16 gdk_image_get_depth GdkImage* image")
;;; 2.90.6 (CFNC-3.0 "guint16 gdk_image_get_bytes_per_pixel GdkImage* image")
;;; 2.90.6 (CFNC-3.0 "guint16 gdk_image_get_bytes_per_line GdkImage* image")
;;; 2.90.6 (CFNC-3.0 "guint16 gdk_image_get_bits_per_pixel GdkImage* image")
(CFNC-3.0 "void gtk_combo_box_popup_for_device GtkComboBox* combo_box GdkDevice* device")
(CFNC-3.0 "void gtk_device_grab_add GtkWidget* widget GdkDevice* device gboolean block_others")
(CFNC-3.0 "void gtk_device_grab_remove GtkWidget* widget GdkDevice* device")
(CFNC-3.0 "GdkDevice* gtk_get_current_event_device void")
;;; 2.90.1 (CFNC-3.0 "void gtk_menu_popup_for_device GtkMenu* menu GdkDevice* device GtkWidget* parent_menu_shell GtkWidget* parent_menu_item GtkMenuPositionFunc func lambda_data @func_info guint button guint32 activate_time")
(CFNC-3.0 "GtkWidget* gtk_paned_new GtkOrientation orientation")
;;; (CFNC-3.0 "void gtk_radio_action_join_group GtkRadioAction* action GtkRadioAction* group_source")
;;; 2.91.5 (CFNC-3.0 "GtkWidget* gtk_ruler_new GtkOrientation orientation")
(CFNC-3.0 "GtkWidget* gtk_scale_new GtkOrientation orientation GtkAdjustment* adjustment")
(CFNC-3.0 "GtkWidget* gtk_scale_new_with_range GtkOrientation orientation gdouble min gdouble max gdouble step")
(CFNC-3.0 "GtkWidget* gtk_scrollbar_new GtkOrientation orientation GtkAdjustment* adjustment")
(CFNC-3.0 "GtkWidget* gtk_separator_new GtkOrientation orientation")
(CFNC-3.0 "gboolean gtk_widget_device_is_shadowed GtkWidget* widget GdkDevice* device")
;;; 3.91.1 (CFNC-3.0 "void gtk_widget_set_device_events GtkWidget* widget GdkDevice* device GdkEventMask events")
;;; 3.91.1 (CFNC-3.0 "void gtk_widget_add_device_events GtkWidget* widget GdkDevice* device GdkEventMask events")
(CFNC-3.0 "gboolean gtk_widget_get_support_multidevice GtkWidget* widget")
(CFNC-3.0 "void gtk_widget_set_support_multidevice GtkWidget* widget gboolean support_multidevice")
;;; 3.91.1 (CFNC-3.0 "GdkEventMask gtk_widget_get_device_events GtkWidget* widget GdkDevice* device")

;;; 2.91.0 (CINT-3.0 "GTK_MULTIDEVICE" "GtkWidgetFlags")


;;; 2.90.2
(CFNC-3.0 "gint gtk_icon_view_get_item_row GtkIconView* icon_view GtkTreePath* path")
(CFNC-3.0 "gint gtk_icon_view_get_item_column GtkIconView* icon_view GtkTreePath* path")
(CFNC-3.0 "void gtk_statusbar_remove_all GtkStatusbar* statusbar guint context_id")
(CFNC-3.0 "gboolean gtk_window_has_group GtkWindow* window")

;;; 2.90.3
(CFNC-3.0 "void gtk_calendar_select_month GtkCalendar* calendar guint month guint year")
(CFNC-3.0 "void gtk_calendar_mark_day GtkCalendar* calendar guint day")
(CFNC-3.0 "void gtk_calendar_unmark_day GtkCalendar* calendar guint day")

;;; 2.90.4
;;; 2.90.6 (CFNC-3.0 "gpointer gdk_image_get_pixels GdkImage* image")
;;; 3.19.5 ;(CFNC-3.0 "GdkDevice* gdk_device_manager_get_client_pointer GdkDeviceManager* device_manager")
(CFNC-3.0 "void gtk_accessible_set_widget GtkAccessible* accessible GtkWidget* widget")
;;; 3.1.12 (CFNC-3.0 "GtkWidget* gtk_font_selection_dialog_get_font_selection GtkFontSelectionDialog* fsd")
(CFNC-3.0 "GtkWidget* gtk_message_dialog_get_message_area GtkMessageDialog* message_dialog")
;;; 3.3.2 (CFNC-3.0 "void gtk_table_get_size GtkTable* table guint* [rows] guint* [columns]")

(CINT-3.0 "GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH" "GtkSizeRequestMode")
(CINT-3.0 "GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT" "GtkSizeRequestMode")

(CFNC-3.0 "gint gtk_selection_data_get_length GtkSelectionData* selection_data")

;;; 2.90.5 removed all GdkRegion stuff

;;; (CFNC-3.0 "cairo_region_t* gdk_drawable_get_clip_region GdkDrawable* drawable")
;;; (CFNC-3.0 "cairo_region_t* gdk_drawable_get_visible_region GdkDrawable* drawable")
;;; 2.90.6 (CFNC-3.0 "void gdk_gc_set_clip_region GdkGC* gc cairo_region_t* region")
(CFNC-3.0 "cairo_region_t* gdk_pango_layout_line_get_clip_region PangoLayoutLine* line gint x_origin gint y_origin gint* index_ranges gint n_ranges")
(CFNC-3.0 "cairo_region_t* gdk_pango_layout_get_clip_region PangoLayout* layout gint x_origin gint y_origin gint* index_ranges gint n_ranges")

;;; (CFNC-3.0 "cairo_region_t* gtk_widget_region_intersect GtkWidget* widget cairo_region_t* region") ; FREE
(CFNC-3.0 "gboolean gdk_keymap_get_num_lock_state GdkKeymap* keymap")
;;; 3.93.0 (CFNC-3.0 "GdkCursorType gdk_cursor_get_cursor_type GdkCursor* cursor")
(CFNC-3.0 "gboolean gdk_display_is_closed GdkDisplay* display")
;;; 3.96.0 (CFNC-3.0 "void gtk_expander_set_label_fill GtkExpander* expander gboolean label_fill")
;;; 3.96.0 (CFNC-3.0 "gboolean gtk_expander_get_label_fill GtkExpander* expander")
;;; (CFNC-3.0 "guint16 gtk_notebook_get_tab_hborder GtkNotebook* notebook")
;;; (CFNC-3.0 "guint16 gtk_notebook_get_tab_vborder GtkNotebook* notebook")


;;; 2.90.6: HAVE_GTK_EXPANDER_GET_LABEL_FILL
;;; 1.8.0: HAVE_CAIRO_GLYPH_ALLOCATE
;;; 1.9.12: HAVE_CAIRO_REGION_XOR


(CAIRO-INT "CAIRO_STATUS_FONT_TYPE_MISMATCH" "cairo_status_t")
(CAIRO-INT "CAIRO_STATUS_USER_FONT_IMMUTABLE" "cairo_status_t")
(CAIRO-INT "CAIRO_STATUS_USER_FONT_ERROR" "cairo_status_t")
(CAIRO-INT "CAIRO_STATUS_NEGATIVE_COUNT" "cairo_status_t")
(CAIRO-INT "CAIRO_STATUS_INVALID_CLUSTERS" "cairo_status_t")
(CAIRO-INT "CAIRO_STATUS_INVALID_SLANT" "cairo_status_t")
(CAIRO-INT "CAIRO_STATUS_INVALID_WEIGHT" "cairo_status_t")

;;; CAIRO_TEXT_CLUSTER_FLAG_BACKWARD = 0x00000001

(CAIRO-FUNC "cairo_glyph_t* cairo_glyph_allocate int num_glyphs")
(CAIRO-FUNC "void cairo_glyph_free cairo_glyph_t* glyphs")
(CAIRO-FUNC "cairo_text_cluster_t* cairo_text_cluster_allocate int num_clusters")
(CAIRO-FUNC "void cairo_text_cluster_free cairo_text_cluster_t* clusters")
(CAIRO-FUNC "void cairo_show_text_glyphs cairo_t* cr char* utf8 int utf8_len cairo_glyph_t* glyphs int num_glyphs cairo_text_cluster_t* clusters int num_clusters cairo_text_cluster_flags_t cluster_flags" 'const)
(CAIRO-FUNC "cairo_status_t cairo_scaled_font_text_to_glyphs cairo_scaled_font_t* scaled_font double x double y char* utf8 int utf8_len cairo_glyph_t** glyphs int* num_glyphs cairo_text_cluster_t** clusters int* num_clusters cairo_text_cluster_flags_t* cluster_flags" 'const)
(CAIRO-FUNC "void cairo_scaled_font_get_scale_matrix cairo_scaled_font_t* scaled_font cairo_matrix_t* scale_matrix")
(CAIRO-FUNC "cairo_font_face_t* cairo_toy_font_face_create char* family cairo_font_slant_t slant cairo_font_weight_t weight" 'const)
(CAIRO-FUNC "char* cairo_toy_font_face_get_family cairo_font_face_t* font_face" 'const) ; return
(CAIRO-FUNC "cairo_font_slant_t cairo_toy_font_face_get_slant cairo_font_face_t* font_face")
(CAIRO-FUNC "cairo_font_weight_t cairo_toy_font_face_get_weight cairo_font_face_t* font_face")
(CAIRO-FUNC "cairo_font_face_t* cairo_user_font_face_create void")
;(CAIRO-FUNC "void cairo_user_font_face_set_init_func cairo_font_face_t* font_face cairo_user_scaled_font_init_func_t init_func")
;(CAIRO-FUNC "void cairo_user_font_face_set_render_glyph_func cairo_font_face_t* font_face cairo_user_scaled_font_render_glyph_func_t render_glyph_func")
;(CAIRO-FUNC "void cairo_user_font_face_set_text_to_glyphs_func cairo_font_face_t* font_face cairo_user_scaled_font_text_to_glyphs_func_t text_to_glyphs_func")
;(CAIRO-FUNC "void cairo_user_font_face_set_unicode_to_glyph_func cairo_font_face_t* font_face cairo_user_scaled_font_unicode_to_glyph_func_t unicode_to_glyph_func")
;(CAIRO-FUNC "cairo_user_scaled_font_init_func_t cairo_user_font_face_get_init_func cairo_font_face_t* font_face")
;(CAIRO-FUNC "cairo_user_scaled_font_render_glyph_func_t cairo_user_font_face_get_render_glyph_func cairo_font_face_t* font_face")
;(CAIRO-FUNC "cairo_user_scaled_font_text_to_glyphs_func_t cairo_user_font_face_get_text_to_glyphs_func cairo_font_face_t* font_face")
;(CAIRO-FUNC "cairo_user_scaled_font_unicode_to_glyph_func_t cairo_user_font_face_get_unicode_to_glyph_func cairo_font_face_t* font_face")
(CAIRO-FUNC "void cairo_surface_get_fallback_resolution cairo_surface_t* surface double* [x_pixels_per_inch] double* [y_pixels_per_inch]")
(CAIRO-FUNC "cairo_bool_t cairo_surface_has_show_text_glyphs cairo_surface_t* surface")

;;; 1.9

(CAIRO-INT "CAIRO_STATUS_INVALID_SIZE" "cairo_status_t")
(CAIRO-INT "CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED" "cairo_status_t")
(CAIRO-INT "CAIRO_STATUS_DEVICE_TYPE_MISMATCH" "cairo_status_t")
(CAIRO-INT "CAIRO_STATUS_DEVICE_ERROR" "cairo_status_t")

(CAIRO-INT "CAIRO_OPERATOR_MULTIPLY" "cairo_operator_t")
(CAIRO-INT "CAIRO_OPERATOR_SCREEN" "cairo_operator_t")
(CAIRO-INT "CAIRO_OPERATOR_OVERLAY" "cairo_operator_t")
(CAIRO-INT "CAIRO_OPERATOR_DARKEN" "cairo_operator_t")
(CAIRO-INT "CAIRO_OPERATOR_LIGHTEN" "cairo_operator_t")
(CAIRO-INT "CAIRO_OPERATOR_COLOR_DODGE" "cairo_operator_t")
(CAIRO-INT "CAIRO_OPERATOR_COLOR_BURN" "cairo_operator_t")
(CAIRO-INT "CAIRO_OPERATOR_HARD_LIGHT" "cairo_operator_t")
(CAIRO-INT "CAIRO_OPERATOR_SOFT_LIGHT" "cairo_operator_t")
(CAIRO-INT "CAIRO_OPERATOR_DIFFERENCE" "cairo_operator_t")
(CAIRO-INT "CAIRO_OPERATOR_EXCLUSION" "cairo_operator_t")
(CAIRO-INT "CAIRO_OPERATOR_HSL_HUE" "cairo_operator_t")
(CAIRO-INT "CAIRO_OPERATOR_HSL_SATURATION" "cairo_operator_t")
(CAIRO-INT "CAIRO_OPERATOR_HSL_COLOR" "cairo_operator_t")
(CAIRO-INT "CAIRO_OPERATOR_HSL_LUMINOSITY" "cairo_operator_t")

(CAIRO-INT "CAIRO_SURFACE_TYPE_SCRIPT" "cairo_surface_t")
(CAIRO-INT "CAIRO_SURFACE_TYPE_QT" "cairo_surface_t")
(CAIRO-INT "CAIRO_SURFACE_TYPE_RECORDING" "cairo_surface_t")
(CAIRO-INT "CAIRO_SURFACE_TYPE_VG" "cairo_surface_t")
(CAIRO-INT "CAIRO_SURFACE_TYPE_GL" "cairo_surface_t")
(CAIRO-INT "CAIRO_SURFACE_TYPE_DRM" "cairo_surface_t")
(CAIRO-INT "CAIRO_SURFACE_TYPE_TEE" "cairo_surface_t")
(CAIRO-INT "CAIRO_SURFACE_TYPE_XML" "cairo_surface_t")
(CAIRO-INT "CAIRO_SURFACE_TYPE_SKIA" "cairo_surface_t")

(CAIRO-STRING "CAIRO_MIME_TYPE_JPEG") ; "image/jpeg")
(CAIRO-STRING "CAIRO_MIME_TYPE_PNG") ; "image/png")
(CAIRO-STRING "CAIRO_MIME_TYPE_JP2") ; "image/jp2")
(CAIRO-STRING "CAIRO_MIME_TYPE_URI") ; "text/x-uri")

;;;  CAIRO_FORMAT_INVALID = -1 

(CAIRO-FUNC "cairo_bool_t cairo_in_clip cairo_t* cr double x double y")
(CAIRO-FUNC "cairo_device_t* cairo_device_reference cairo_device_t* device")
(CAIRO-FUNC "cairo_status_t cairo_device_status cairo_device_t* device")
(CAIRO-FUNC "cairo_status_t cairo_device_acquire cairo_device_t* device")
(CAIRO-FUNC "void cairo_device_release cairo_device_t* device")
(CAIRO-FUNC "void cairo_device_flush cairo_device_t* device")
(CAIRO-FUNC "void cairo_device_finish cairo_device_t* device")
(CAIRO-FUNC "void cairo_device_destroy cairo_device_t* device")
(CAIRO-FUNC "guint cairo_device_get_reference_count cairo_device_t* device")
(CAIRO-FUNC "void* cairo_device_get_user_data cairo_device_t* device cairo_user_data_key_t* key")
(CAIRO-FUNC "cairo_status_t cairo_device_set_user_data cairo_device_t* device cairo_user_data_key_t* key void* user_data cairo_destroy_func_t destroy")
(CAIRO-FUNC "cairo_surface_t* cairo_surface_create_for_rectangle cairo_surface_t* target double x double y double width double height")
(CAIRO-FUNC "cairo_device_t* cairo_surface_get_device cairo_surface_t* surface")
;;; stupid types (CAIRO-FUNC "void cairo_surface_get_mime_data cairo_surface_t* surface char* mime_type guchar** [data] gulong* [length]" 'const)
(CAIRO-FUNC "cairo_status_t cairo_surface_set_mime_data cairo_surface_t* surface char* mime_type guchar* data gulong length cairo_destroy_func_t destroy void* closure" 'const)
(CAIRO-FUNC "cairo_surface_t* cairo_recording_surface_create cairo_content_t content cairo_rectangle_t* extents")
(CAIRO-FUNC "void cairo_recording_surface_ink_extents cairo_surface_t* surface double* x0 double* y0 double* width double* height")
;;; out in 1.10.0?
;;; (CAIRO-FUNC "cairo_surface_t* cairo_tee_surface_create cairo_surface_t* master")
;;; (CAIRO-FUNC "void cairo_tee_surface_add cairo_surface_t* surface cairo_surface_t* target")
;;; (CAIRO-FUNC "void cairo_tee_surface_remove cairo_surface_t* surface cairo_surface_t* target")
;;; (CAIRO-FUNC "cairo_surface_t* cairo_tee_surface_index cairo_surface_t* surface int index")
(CAIRO-FUNC "cairo_region_t* cairo_region_create void")
(CAIRO-FUNC "cairo_region_t* cairo_region_create_rectangle cairo_rectangle_int_t* rectangle")
(CAIRO-FUNC "cairo_region_t* cairo_region_create_rectangles cairo_rectangle_int_t* rects int count")
(CAIRO-FUNC "cairo_region_t* cairo_region_copy cairo_region_t* original")
(CAIRO-FUNC "cairo_region_t* cairo_region_reference cairo_region_t* region")
(CAIRO-FUNC "void cairo_region_destroy cairo_region_t* region")
(CAIRO-FUNC "cairo_bool_t cairo_region_equal cairo_region_t* a cairo_region_t* b")
(CAIRO-FUNC "cairo_status_t cairo_region_status cairo_region_t* region")
(CAIRO-FUNC "void cairo_region_get_extents cairo_region_t* region cairo_rectangle_int_t* extents")
(CAIRO-FUNC "int cairo_region_num_rectangles cairo_region_t* region")
(CAIRO-FUNC "void cairo_region_get_rectangle cairo_region_t* region int nth cairo_rectangle_int_t* rectangle")
(CAIRO-FUNC "cairo_bool_t cairo_region_is_empty cairo_region_t* region")
(CAIRO-FUNC "cairo_region_overlap_t cairo_region_contains_rectangle cairo_region_t* region cairo_rectangle_int_t* rectangle")
(CAIRO-FUNC "cairo_bool_t cairo_region_contains_point cairo_region_t* region int x int y")
(CAIRO-FUNC "void cairo_region_translate cairo_region_t* region int dx int dy")
(CAIRO-FUNC "cairo_status_t cairo_region_subtract cairo_region_t* dst cairo_region_t* other")
(CAIRO-FUNC "cairo_status_t cairo_region_subtract_rectangle cairo_region_t* dst cairo_rectangle_int_t* rectangle")
(CAIRO-FUNC "cairo_status_t cairo_region_intersect cairo_region_t* dst cairo_region_t* other")
(CAIRO-FUNC "cairo_status_t cairo_region_intersect_rectangle cairo_region_t* dst cairo_rectangle_int_t* rectangle")
(CAIRO-FUNC "cairo_status_t cairo_region_union cairo_region_t* dst cairo_region_t* other")
(CAIRO-FUNC "cairo_status_t cairo_region_union_rectangle cairo_region_t* dst cairo_rectangle_int_t* rectangle")
(CAIRO-FUNC "cairo_status_t cairo_region_xor cairo_region_t* dst cairo_region_t* other")
(CAIRO-FUNC "cairo_status_t cairo_region_xor_rectangle cairo_region_t* dst cairo_rectangle_int_t* rectangle")


;;; 2.91.1 (CINT-3.0 "GTK_WRAP_ALLOCATE_FREE" "GtkWrapAllocationMode")
;;; 2.91.1 (CINT-3.0 "GTK_WRAP_ALLOCATE_ALIGNED" "GtkWrapAllocationMode")
;;; 2.91.1 (CINT-3.0 "GTK_WRAP_ALLOCATE_HOMOGENEOUS" "GtkWrapAllocationMode")
;;; 2.91.1 (CINT-3.0 "GTK_WRAP_BOX_SPREAD_START" "GtkWrapBoxSpreading")
;;; 2.91.1 (CINT-3.0 "GTK_WRAP_BOX_SPREAD_END" "GtkWrapBoxSpreading")
;;; 2.91.1 (CINT-3.0 "GTK_WRAP_BOX_SPREAD_EVEN" "GtkWrapBoxSpreading")
;;; 2.91.1 (CINT-3.0 "GTK_WRAP_BOX_SPREAD_EXPAND" "GtkWrapBoxSpreading")
;;; 2.91.1 (CINT-3.0 "GTK_WRAP_BOX_H_EXPAND" "GtkWrapBoxPacking")
;;; 2.91.1 ;;; 2.91.0 (CINT-3.0 "GTK_WRAP_BOX_H_FILL" "GtkWrapBoxPacking")
;;; 2.91.1 (CINT-3.0 "GTK_WRAP_BOX_V_EXPAND" "GtkWrapBoxPacking")
;;; 2.91.1 ;;; 2.91.0 (CINT-3.0 "GTK_WRAP_BOX_V_FILL" "GtkWrapBoxPacking")

(CFNC-3.0 "gboolean gtk_calendar_get_day_is_marked GtkCalendar* calendar guint day")
;;; 2.99.0 (CFNC-3.0 "void gtk_cell_view_get_desired_width_of_row GtkCellView* cell_view GtkTreePath* path gint* [minimum_size] gint* [natural_size]")
;;; 2.99.0 (CFNC-3.0 "void gtk_cell_view_get_desired_height_for_width_of_row GtkCellView* cell_view GtkTreePath* path gint avail_size gint* [minimum_size] gint* [natural_size]")
(CFNC-3.0 "void gtk_progress_bar_set_inverted GtkProgressBar* pbar gboolean inverted")
(CFNC-3.0 "gboolean gtk_progress_bar_get_inverted GtkProgressBar* pbar")
(CFNC-3.0 "void gtk_radio_button_join_group GtkRadioButton* radio_button GtkRadioButton* group_source")


;;; 2.91.0

;;; 2.91.1 (CCAST-3.0 "GTK_WRAP_BOX(obj)" "GtkWrapBox*")
;;; 2.91.1 (CCHK-3.0 "GTK_IS_WRAP_BOX(obj)" "GtkWrapBox*")

(CFNC-3.0 "GtkAdjustment* gtk_adjustment_new gdouble value gdouble lower gdouble upper gdouble step_increment gdouble page_increment gdouble page_size")
(CFNC-3.0 "gboolean gtk_binding_set_activate GtkBindingSet* binding_set guint keyval GdkModifierType modifiers GObject* object")
(CFNC-3.0 "gboolean gtk_bindings_activate GObject* object guint keyval GdkModifierType modifiers")
(CFNC-3.0 "cairo_surface_t* gtk_icon_view_create_drag_icon GtkIconView* icon_view GtkTreePath* path")
;;; 2.91.1 (CFNC-3.0 "void gtk_quit_add_destroy guint main_level GtkWidget* object")
;;; (CFNC-3.0 "cairo_surface_t* gdk_offscreen_window_get_pixmap GdkOffscreenWindow* window")
;;; ;(CFNC-gtk2 "void gtk_paint_hline GtkStyle* style cairo_t* cr GtkStateType state_type GtkWidget* widget gchar* detail gint x1 gint x2 gint y")
;;; ;(CFNC-gtk2 "void gtk_paint_vline GtkStyle* style cairo_t* cr GtkStateType state_type GtkWidget* widget gchar* detail gint y1 gint y2 gint x")
;;; ;(CFNC-gtk2 "void gtk_paint_shadow GtkStyle* style cairo_t* cr GtkStateType state_type GtkShadowType shadow_type GtkWidget* widget gchar* detail gint x gint y gint width gint height")
;;; ;(CFNC-gtk2 "void gtk_paint_arrow GtkStyle* style cairo_t* cr GtkStateType state_type GtkShadowType shadow_type GtkWidget* widget gchar* detail GtkArrowType arrow_type gboolean fill gint x gint y gint width gint height")
;;; ;(CFNC-gtk2 "void gtk_paint_diamond GtkStyle* style cairo_t* cr GtkStateType state_type GtkShadowType shadow_type GtkWidget* widget gchar* detail gint x gint y gint width gint height")
;;; ;(CFNC-gtk2 "void gtk_paint_box GtkStyle* style cairo_t* cr GtkStateType state_type GtkShadowType shadow_type GtkWidget* widget gchar* detail gint x gint y gint width gint height")
;;; ;(CFNC-gtk2 "void gtk_paint_flat_box GtkStyle* style cairo_t* cr GtkStateType state_type GtkShadowType shadow_type GtkWidget* widget gchar* detail gint x gint y gint width gint height")
;;; ;(CFNC-gtk2 "void gtk_paint_check GtkStyle* style cairo_t* cr GtkStateType state_type GtkShadowType shadow_type GtkWidget* widget gchar* detail gint x gint y gint width gint height")
;;; ;(CFNC-gtk2 "void gtk_paint_option GtkStyle* style cairo_t* cr GtkStateType state_type GtkShadowType shadow_type GtkWidget* widget gchar* detail gint x gint y gint width gint height")
;;; ;(CFNC-gtk2 "void gtk_paint_tab GtkStyle* style cairo_t* cr GtkStateType state_type GtkShadowType shadow_type GtkWidget* widget gchar* detail gint x gint y gint width gint height")
;;; ;(CFNC-gtk2 "void gtk_paint_shadow_gap GtkStyle* style cairo_t* cr GtkStateType state_type GtkShadowType shadow_type GtkWidget* widget gchar* detail gint x gint y gint width gint height GtkPositionType gap_side gint gap_x gint gap_width")
;;; ;(CFNC-gtk2 "void gtk_paint_box_gap GtkStyle* style cairo_t* cr GtkStateType state_type GtkShadowType shadow_type GtkWidget* widget gchar* detail gint x gint y gint width gint height GtkPositionType gap_side gint gap_x gint gap_width")
;;; ;(CFNC-gtk2 "void gtk_paint_extension GtkStyle* style cairo_t* cr GtkStateType state_type GtkShadowType shadow_type GtkWidget* widget gchar* detail gint x gint y gint width gint height GtkPositionType gap_side")
;;; ;(CFNC-gtk2 "void gtk_paint_focus GtkStyle* style cairo_t* cr GtkStateType state_type GtkWidget* widget gchar* detail gint x gint y gint width gint height")
;;; ;(CFNC-gtk2 "void gtk_paint_slider GtkStyle* style cairo_t* cr GtkStateType state_type GtkShadowType shadow_type GtkWidget* widget gchar* detail gint x gint y gint width gint height GtkOrientation orientation")
;;; ;(CFNC-gtk2 "void gtk_paint_handle GtkStyle* style cairo_t* cr GtkStateType state_type GtkShadowType shadow_type GtkWidget* widget gchar* detail gint x gint y gint width gint height GtkOrientation orientation")
;;; ;(CFNC-gtk2 "void gtk_paint_expander GtkStyle* style cairo_t* cr GtkStateType state_type GtkWidget* widget gchar* detail gint x gint y GtkExpanderStyle expander_style")
;;; ;(CFNC-gtk2 "void gtk_paint_layout GtkStyle* style cairo_t* cr GtkStateType state_type gboolean use_text GtkWidget* widget gchar* detail gint x gint y PangoLayout* layout")
(CFNC-3.0 "cairo_surface_t* gtk_tree_view_create_row_drag_icon GtkTreeView* tree_view GtkTreePath* path")

(CFNC-3.0 "gboolean gdk_cairo_get_clip_rectangle cairo_t* cr GdkRectangle* rect")
(CFNC-3.0 "cairo_region_t* gdk_cairo_region_create_from_surface cairo_surface_t* surface")
(CFNC-3.0 "GtkSizeRequestMode gtk_cell_renderer_get_request_mode GtkCellRenderer* cell")
(CFNC-3.0 "void gtk_cell_renderer_get_preferred_width GtkCellRenderer* cell GtkWidget* widget gint* [minimum_size] gint* [natural_size]")
(CFNC-3.0 "void gtk_cell_renderer_get_preferred_height_for_width GtkCellRenderer* cell GtkWidget* widget gint width gint* [minimum_height] gint* [natural_height]")
(CFNC-3.0 "void gtk_cell_renderer_get_preferred_height GtkCellRenderer* cell GtkWidget* widget gint* [minimum_size] gint* [natural_size]")
(CFNC-3.0 "void gtk_cell_renderer_get_preferred_width_for_height GtkCellRenderer* cell GtkWidget* widget gint height gint* [minimum_width] gint* [natural_width]")
;(CFNC-3.0 "void gtk_cell_renderer_get_preferred_size GtkCellRenderer* cell GtkWidget* widget GtkRequisition* [minimum_size] GtkRequisition* [natural_size]")
;;; 3.89 (CFNC-3.0 "void gtk_container_class_handle_border_width GtkContainerClass* klass")
(CFNC-3.0 "void gtk_notebook_set_group_name GtkNotebook* notebook gchar* group_name" 'const)
(CFNC-3.0 "gchar* gtk_notebook_get_group_name GtkNotebook* notebook" 'const-return)
;;; 3.94.0 (CFNC-3.0 "void gtk_widget_draw GtkWidget* widget cairo_t* cr")
(CFNC-3.0 "GtkSizeRequestMode gtk_widget_get_request_mode GtkWidget* widget")
;;; 3.91.0 (CFNC-3.0 "void gtk_widget_get_preferred_width GtkWidget* widget gint* [minimum_width] gint* [natural_width]")
;;; 3.91.0 (CFNC-3.0 "void gtk_widget_get_preferred_height_for_width GtkWidget* widget gint width gint* [minimum_height] gint* [natural_height]")
;;; 3.91.0 (CFNC-3.0 "void gtk_widget_get_preferred_height GtkWidget* widget gint* [minimum_height] gint* [natural_height]")
;;; 3.91.0 (CFNC-3.0 "void gtk_widget_get_preferred_width_for_height GtkWidget* widget gint height gint* [minimum_width] gint* [natural_width]")
;(CFNC-3.0 "void gtk_widget_get_preferred_size GtkWidget* widget GtkRequisition* [minimum_size] GtkRequisition* [natural_size]")
(CFNC-3.0 "int gtk_widget_get_allocated_width GtkWidget* widget")
(CFNC-3.0 "int gtk_widget_get_allocated_height GtkWidget* widget")
;;; 3.89 (CFNC-3.0 "void gtk_widget_set_visual GtkWidget* widget GdkVisual* visual")
(CFNC-3.0 "GtkAlign gtk_widget_get_halign GtkWidget* widget")
(CFNC-3.0 "void gtk_widget_set_halign GtkWidget* widget GtkAlign align")
(CFNC-3.0 "GtkAlign gtk_widget_get_valign GtkWidget* widget")
(CFNC-3.0 "void gtk_widget_set_valign GtkWidget* widget GtkAlign align")
;;; 3.12 (CFNC-3.0 "gint gtk_widget_get_margin_left GtkWidget* widget")
;;; 3.12 (CFNC-3.0 "void gtk_widget_set_margin_left GtkWidget* widget gint margin")
;;; 3.12 (CFNC-3.0 "gint gtk_widget_get_margin_right GtkWidget* widget")
;;; 3.12 (CFNC-3.0 "void gtk_widget_set_margin_right GtkWidget* widget gint margin")
(CFNC-3.0 "gint gtk_widget_get_margin_top GtkWidget* widget")
(CFNC-3.0 "void gtk_widget_set_margin_top GtkWidget* widget gint margin")
(CFNC-3.0 "gint gtk_widget_get_margin_bottom GtkWidget* widget")
(CFNC-3.0 "void gtk_widget_set_margin_bottom GtkWidget* widget gint margin")
;;; 3.96.0 (CFNC-3.0 "void gtk_widget_shape_combine_region GtkWidget* widget cairo_region_t* region")
(CFNC-3.0 "void gtk_widget_input_shape_combine_region GtkWidget* widget cairo_region_t* region")
;;; 2.91.1 (CFNC-3.0 "GtkWidget* gtk_wrap_box_new GtkWrapAllocationMode mode GtkWrapBoxSpreading horizontal_spreading GtkWrapBoxSpreading vertical_spreading guint horizontal_spacing guint vertical_spacing")
;;; 2.91.1 (CFNC-3.0 "void gtk_wrap_box_set_allocation_mode GtkWrapBox* box GtkWrapAllocationMode mode")
;;; 2.91.1 (CFNC-3.0 "GtkWrapAllocationMode gtk_wrap_box_get_allocation_mode GtkWrapBox* box")
;;; 2.91.1 (CFNC-3.0 "void gtk_wrap_box_set_horizontal_spreading GtkWrapBox* box GtkWrapBoxSpreading spreading")
;;; 2.91.1 (CFNC-3.0 "GtkWrapBoxSpreading gtk_wrap_box_get_horizontal_spreading GtkWrapBox* box")
;;; 2.91.1 (CFNC-3.0 "void gtk_wrap_box_set_vertical_spreading GtkWrapBox* box GtkWrapBoxSpreading spreading")
;;; 2.91.1 (CFNC-3.0 "GtkWrapBoxSpreading gtk_wrap_box_get_vertical_spreading GtkWrapBox* box")
;;; 2.91.1 (CFNC-3.0 "void gtk_wrap_box_set_vertical_spacing GtkWrapBox* box guint spacing")
;;; 2.91.1 (CFNC-3.0 "guint gtk_wrap_box_get_vertical_spacing GtkWrapBox* box")
;;; 2.91.1 (CFNC-3.0 "void gtk_wrap_box_set_horizontal_spacing GtkWrapBox* box guint spacing")
;;; 2.91.1 (CFNC-3.0 "guint gtk_wrap_box_get_horizontal_spacing GtkWrapBox* box")
;;; 2.91.1 (CFNC-3.0 "void gtk_wrap_box_set_minimum_line_children GtkWrapBox* box guint n_children")
;;; 2.91.1 (CFNC-3.0 "guint gtk_wrap_box_get_minimum_line_children GtkWrapBox* box")
;;; 2.91.1 (CFNC-3.0 "void gtk_wrap_box_set_natural_line_children GtkWrapBox* box guint n_children")
;;; 2.91.1 (CFNC-3.0 "guint gtk_wrap_box_get_natural_line_children GtkWrapBox* box")
;;; 2.91.1 (CFNC-3.0 "void gtk_wrap_box_insert_child GtkWrapBox* box GtkWidget* widget gint index GtkWrapBoxPacking packing")
;;; 2.91.1 (CFNC-3.0 "void gtk_wrap_box_reorder_child GtkWrapBox* box GtkWidget* widget guint index")


(CFNC-3.0 "GtkWidget* gtk_combo_box_new_with_entry void")
(CFNC-3.0 "gboolean gtk_combo_box_get_has_entry GtkComboBox* combo_box")
(CFNC-3.0 "void gtk_combo_box_set_entry_text_column GtkComboBox* combo_box gint text_column")
(CFNC-3.0 "gint gtk_combo_box_get_entry_text_column GtkComboBox* combo_box")
;;; 3.93.0 (CFNC-3.0 "GtkTargetEntry* gtk_target_entry_new char* target guint flags guint info" 'const)
;;; 3.93.0 (CFNC-3.0 "GtkTargetEntry* gtk_target_entry_copy GtkTargetEntry* data")
;;; 3.93.0 (CFNC-3.0 "void gtk_target_entry_free GtkTargetEntry* data")
(CFNC-3.0 "gboolean gtk_widget_get_hexpand GtkWidget* widget")
(CFNC-3.0 "void gtk_widget_set_hexpand GtkWidget* widget gboolean expand")
(CFNC-3.0 "gboolean gtk_widget_get_hexpand_set GtkWidget* widget")
(CFNC-3.0 "void gtk_widget_set_hexpand_set GtkWidget* widget gboolean set")
(CFNC-3.0 "gboolean gtk_widget_get_vexpand GtkWidget* widget")
(CFNC-3.0 "void gtk_widget_set_vexpand GtkWidget* widget gboolean expand")
(CFNC-3.0 "gboolean gtk_widget_get_vexpand_set GtkWidget* widget")
(CFNC-3.0 "void gtk_widget_set_vexpand_set GtkWidget* widget gboolean set")
(CFNC-3.0 "void gtk_widget_queue_compute_expand GtkWidget* widget")
(CFNC-3.0 "gboolean gtk_widget_compute_expand GtkWidget* widget GtkOrientation orientation")
;;; 3.19.8 (CFNC-3.0 "void gtk_window_set_default_geometry GtkWindow* window gint width gint height")
;;; 3.19.4 (CFNC-3.0 "void gtk_window_resize_to_geometry GtkWindow* window gint width gint height")
;;; 3.13.4 (CFNC-3.0 "void gtk_window_set_has_resize_grip GtkWindow* window gboolean value")
;;; 3.13.4 (CFNC-3.0 "gboolean gtk_window_get_has_resize_grip GtkWindow* window")
;;; 3.13.4 (CFNC-3.0 "gboolean gtk_window_resize_grip_is_visible GtkWindow* window")
;;; 3.13.4 (CFNC-3.0 "gboolean gtk_window_get_resize_grip_area GtkWindow* window GdkRectangle* rect")

(CCAST-3.0 "GTK_COMBO_BOX_TEXT(obj)" "GtkComboBoxText*")
(CCHK-3.0 "GTK_IS_COMBO_BOX_TEXT(obj)" "GtkComboBoxText*")

(CFNC-3.0 "GtkWidget* gtk_combo_box_text_new void")
(CFNC-3.0 "GtkWidget* gtk_combo_box_text_new_with_entry void")
(CFNC-3.0 "void gtk_combo_box_text_append_text GtkComboBoxText* combo_box gchar* text" 'const)
(CFNC-3.0 "void gtk_combo_box_text_insert_text GtkComboBoxText* combo_box gint position gchar* text" 'const)
(CFNC-3.0 "void gtk_combo_box_text_prepend_text GtkComboBoxText* combo_box gchar* text" 'const)
(CFNC-3.0 "void gtk_combo_box_text_remove GtkComboBoxText* combo_box gint position")
(CFNC-3.0 "gchar* gtk_combo_box_text_get_active_text GtkComboBoxText* combo_box")


;;; gtkapplication.h 
;;; 2.91.2

(CCAST-3.0 "GTK_GRID(obj)" "GtkGrid*")
(CCHK-3.0 "GTK_IS_GRID(obj)" "GtkGrid*")
(CCAST-3.0 "GTK_SCROLLABLE(obj)" "GtkScrollable*")
(CCHK-3.0 "GTK_IS_SCROLLABLE(obj)" "GtkScrollable*")

(CCAST-3.0 "GDK_RGBA(object)" "GdkRGBA*")

(CFNC-3.0 "void gdk_cairo_set_source_rgba cairo_t* cr GdkRGBA* rgba" 'const) 
;;; 3.89.2 (CFNC-3.0 "void gtk_cell_view_set_background_rgba GtkCellView* cell_view GdkRGBA* rgba" 'const) 
;;; 3.3.16 (CFNC-3.0 "GtkWidget* gtk_color_button_new_with_rgba GdkRGBA* rgba" 'const) 
;;; 3.3.16 (CFNC-3.0 "void gtk_color_button_set_rgba GtkColorButton* color_button GdkRGBA* rgba" 'const) 
;;; 3.3.16 ;(CFNC-3.0 "void gtk_color_button_get_rgba GtkColorButton* color_button GdkRGBA* [rgba]") 
;;; 3.3.16 (CFNC-3.0 "void gtk_color_selection_set_current_rgba GtkColorSelection* colorsel GdkRGBA* rgba" 'const) 
;;; 3.3.16 ;(CFNC-3.0 "void gtk_color_selection_get_current_rgba GtkColorSelection* colorsel GdkRGBA* [rgba]") 
;;; 3.3.16 (CFNC-3.0 "void gtk_color_selection_set_previous_rgba GtkColorSelection* colorsel GdkRGBA* rgba" 'const) 
;;; 3.3.16 ;(CFNC-3.0 "void gtk_color_selection_get_previous_rgba GtkColorSelection* colorsel GdkRGBA* [rgba]") 
(CFNC-3.0 "void gtk_combo_box_text_remove_all GtkComboBoxText* combo_box") 
(CFNC-3.0 "void gtk_combo_box_set_popup_fixed_width GtkComboBox* combo_box gboolean fixed") 
(CFNC-3.0 "gboolean gtk_combo_box_get_popup_fixed_width GtkComboBox* combo_box") 
;(CFNC-3.0 "GAppInfo*  gtk_recent_info_create_app_info GtkRecentInfo* info gchar* app_name GError** [error]" 'const) 
;(CFNC-3.0 "GIcon*  gtk_recent_info_get_gicon GtkRecentInfo* info") 
(CFNC-3.0 "gint gtk_scrolled_window_get_min_content_width GtkScrolledWindow* scrolled_window") 
(CFNC-3.0 "void gtk_scrolled_window_set_min_content_width GtkScrolledWindow* scrolled_window gint width") 
(CFNC-3.0 "gint gtk_scrolled_window_get_min_content_height GtkScrolledWindow* scrolled_window") 
(CFNC-3.0 "void gtk_scrolled_window_set_min_content_height GtkScrolledWindow* scrolled_window gint height") 
;(CFNC-3.0 "void gtk_widget_queue_draw_region GtkWidget* widget cairo_region_t* [region]") 
(CFNC-3.0 "GtkWidget* gtk_grid_new void") 
(CFNC-3.0 "void gtk_grid_attach GtkGrid* grid GtkWidget* child gint left gint top gint width gint height") 
(CFNC-3.0 "void gtk_grid_attach_next_to GtkGrid* grid GtkWidget* child GtkWidget* sibling GtkPositionType side gint width gint height") 
(CFNC-3.0 "void gtk_grid_set_row_homogeneous GtkGrid* grid gboolean homogeneous") 
(CFNC-3.0 "gboolean gtk_grid_get_row_homogeneous GtkGrid* grid") 
(CFNC-3.0 "void gtk_grid_set_row_spacing GtkGrid* grid guint spacing") 
(CFNC-3.0 "guint gtk_grid_get_row_spacing GtkGrid* grid") 
(CFNC-3.0 "void gtk_grid_set_column_homogeneous GtkGrid* grid gboolean homogeneous") 
(CFNC-3.0 "gboolean gtk_grid_get_column_homogeneous GtkGrid* grid") 
(CFNC-3.0 "void gtk_grid_set_column_spacing GtkGrid* grid guint spacing") 
(CFNC-3.0 "guint gtk_grid_get_column_spacing GtkGrid* grid") 
(CFNC-3.0 "GtkAdjustment* gtk_scrollable_get_hadjustment GtkScrollable* scrollable") 
(CFNC-3.0 "void gtk_scrollable_set_hadjustment GtkScrollable* scrollable GtkAdjustment* hadjustment") 
(CFNC-3.0 "GtkAdjustment* gtk_scrollable_get_vadjustment GtkScrollable* scrollable") 
(CFNC-3.0 "void gtk_scrollable_set_vadjustment GtkScrollable* scrollable GtkAdjustment* vadjustment") 

;;; (CAIRO-INT-110 "CAIRO_SURFACE_TYPE_SUBSURFACE" "cairo_surface_t")

;;; 2.91.3
(CINT-3.0 "GTK_ASSISTANT_PAGE_CUSTOM" "GtkAssistantPageType")
(CINT-3.0 "GTK_TEXT_SEARCH_CASE_INSENSITIVE" "GtkTextSearchFlags")
(CINT-3.0 "GTK_SCROLL_MINIMUM" "GtkScrollablePolicy")
(CINT-3.0 "GTK_SCROLL_NATURAL" "GtkScrollablePolicy")

(CFNC-3.0 "void gtk_assistant_next_page GtkAssistant* assistant")
(CFNC-3.0 "void gtk_assistant_previous_page GtkAssistant* assistant")
(CFNC-3.0 "GtkWidget* gtk_combo_box_new_with_model_and_entry GtkTreeModel* model")
(CFNC-3.0 "GtkScrollablePolicy gtk_scrollable_get_hscroll_policy GtkScrollable* scrollable")
(CFNC-3.0 "void gtk_scrollable_set_hscroll_policy GtkScrollable* scrollable GtkScrollablePolicy policy")
(CFNC-3.0 "GtkScrollablePolicy gtk_scrollable_get_vscroll_policy GtkScrollable* scrollable")
(CFNC-3.0 "void gtk_scrollable_set_vscroll_policy GtkScrollable* scrollable GtkScrollablePolicy policy")

;;; 2.91.5
(CCAST-3.0 "GTK_SWITCH(obj)" "GtkSwitch*")
(CCHK-3.0 "GTK_IS_SWITCH(obj)" "GtkSwitch*")
(CFNC-3.0 "GtkWidget* gtk_switch_new void")
(CFNC-3.0 "void gtk_switch_set_active GtkSwitch* sw gboolean is_active")
(CFNC-3.0 "gboolean gtk_switch_get_active GtkSwitch* sw")


;;; 2.91.6
;;; a lot of this seems unnecessary -- also omitted the chooseapplication stuff and whatnot

(CFNC-3.0 "GtkBorder* gtk_border_new void") 
(CFNC-3.0 "GtkBorder* gtk_border_copy GtkBorder* border_" 'const)
(CFNC-3.0 "void gtk_border_free GtkBorder* border_")
(CFNC-3.0 "gint gtk_combo_box_get_id_column GtkComboBox* combo_box")
(CFNC-3.0 "void gtk_combo_box_set_id_column GtkComboBox* combo_box gint id_column")
(CFNC-3.0 "gchar* gtk_combo_box_get_active_id GtkComboBox* combo_box" 'const)
;;; 3.1.4 changed type (CFNC-3.0 "void gtk_combo_box_set_active_id GtkComboBox* combo_box gchar* active_id" 'const)
(CFNC-3.0 "void gtk_combo_box_text_insert GtkComboBoxText* combo_box gint position gchar* id gchar* text" 'const)
(CFNC-3.0 "void gtk_combo_box_text_append GtkComboBoxText* combo_box gchar* id gchar* text" 'const)
(CFNC-3.0 "void gtk_combo_box_text_prepend GtkComboBoxText* combo_box gchar* id gchar* text" 'const)



;; forgotten?
;;; 3.96.0 (CFNC-3.0 "GtkWidget* gtk_button_box_new GtkOrientation orientation")
(CFNC-3.0 "GtkWidget* gtk_box_new GtkOrientation orientation gint spacing")

; are these leftovers?
;(CCAST-3.0 "GTK_VOLUME_BUTTON" "GtkVolumeButton*")
;(CCHK-3.0 "GTK_IS_VOLUME_BUTTON" "GtkVolumeButton*")
;(CFNC-3.0 "GtkWidget* gtk_volume_button_new void")
;(CCAST-3.0 "GTK_SCALE_BUTTON" "GtkScaleButton*")
;(CCHK-3.0 "GTK_IS_SCALE_BUTTON" "GtkScaleButton*")
;;; ;(CFNC-3.0 "GtkWidget* gtk_scale_button_new GtkIconSize size gdouble min gdouble max gdouble step gchar** icons" 'const)
;(CFNC-3.0 "void gtk_scale_button_set_icons GtkScaleButton* button gchar** icons" 'const)
;(CFNC-3.0 "gdouble gtk_scale_button_get_value GtkScaleButton* button")
;(CFNC-3.0 "void gtk_scale_button_set_value GtkScaleButton* button gdouble value")
;(CFNC-3.0 "GtkAdjustment* gtk_scale_button_get_adjustment GtkScaleButton* button")
;(CFNC-3.0 "void gtk_scale_button_set_adjustment GtkScaleButton* button GtkAdjustment* adjustment")
;(CFNC-3.0 "GtkWidget* gtk_scale_button_get_plus_button GtkScaleButton* button")
;(CFNC-3.0 "GtkWidget* gtk_scale_button_get_minus_button GtkScaleButton* button")
;(CFNC-3.0 "GtkWidget* gtk_scale_button_get_popup GtkScaleButton* button")

;; message dialog depends completely on va lists

;;; (CCAST-3.0 "GTK_ACTIVATABLE" "GtkActivatable*")
;;; (CCHK-3.0 "GTK_IS_ACTIVATABLE" "GtkActivatable*")
;;; (CFNC-3.0 "void gtk_activatable_sync_action_properties GtkActivatable* activatable GtkAction* action")
;;; (CFNC-3.0 "void gtk_activatable_set_related_action GtkActivatable* activatable GtkAction* action")
;;; (CFNC-3.0 "GtkAction* gtk_activatable_get_related_action GtkActivatable* activatable")
;;; (CFNC-3.0 "void gtk_activatable_set_use_action_appearance GtkActivatable* activatable gboolean use_appearance")
;;; (CFNC-3.0 "gboolean gtk_activatable_get_use_action_appearance GtkActivatable* activatable")

;;; 3.93.0 (CINT-3.0 "GTK_TARGET_SAME_APP" "GtkTargetFlags")
;;; 3.93.0 (CINT-3.0 "GTK_TARGET_SAME_WIDGET" "GtkTargetFlags")
;;; 3.93.0 (CINT-3.0 "GTK_TARGET_OTHER_APP" "GtkTargetFlags")
;;; 3.93.0 (CINT-3.0 "GTK_TARGET_OTHER_WIDGET" "GtkTargetFlags")

(CINT-3.0 "GTK_ALIGN_FILL" "GtkAlign")
(CINT-3.0 "GTK_ALIGN_START" "GtkAlign")
(CINT-3.0 "GTK_ALIGN_END" "GtkAlign")
(CINT-3.0 "GTK_ALIGN_CENTER" "GtkAlign")

;;; 3.13.2 (CINT-3.0 "GTK_ARROW_NONE" "GtkArrowType")

;(CINT-3.0 "GTK_IM_PREEDIT_NOTHING" "GtkIMPreeditStyle")
;(CINT-3.0 "GTK_IM_PREEDIT_CALLBACK" "GtkIMPreeditStyle")
;(CINT-3.0 "GTK_IM_PREEDIT_NONE" "GtkIMPreeditStyle")

;(CINT-3.0 "GTK_IM_STATUS_NOTHING" "GtkIMStatusStyle")
;(CINT-3.0 "GTK_IM_STATUS_CALLBACK" "GtkIMStatusStyle")
;(CINT-3.0 "GTK_IM_STATUS_NONE" "GtkIMStatusStyle")

;; printer stuff
;(CINT-3.0 "GTK_PRINT_PAGES_ALL" "GtkPrintPages")
;(CINT-3.0 "GTK_PRINT_PAGES_CURRENT" "GtkPrintPages")
;(CINT-3.0 "GTK_PRINT_PAGES_RANGES" "GtkPrintPages")

;(CINT-3.0 "GTK_PRINT_PAGES_SELECTION" "GtkPrintPages")
;(CINT-3.0 "GTK_PAGE_SET_ALL" "GtkPageSet")
;(CINT-3.0 "GTK_PAGE_SET_EVEN" "GtkPageSet")
;(CINT-3.0 "GTK_PAGE_SET_ODD" "GtkPageSet")

;(CINT-3.0 "GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM" "GtkNumberUpLayout")
;(CINT-3.0 "GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP" "GtkNumberUpLayout")
;(CINT-3.0 "GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM" "GtkNumberUpLayout")
;(CINT-3.0 "GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP" "GtkNumberUpLayout")
;(CINT-3.0 "GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT" "GtkNumberUpLayout")
;(CINT-3.0 "GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT" "GtkNumberUpLayout")
;(CINT-3.0 "GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT" "GtkNumberUpLayout")
;(CINT-3.0 "GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT" "GtkNumberUpLayout")

;(CINT-3.0 "GTK_PAGE_ORIENTATION_PORTRAIT" "GtkPageOrientation")
;(CINT-3.0 "GTK_PAGE_ORIENTATION_LANDSCAPE" "GtkPageOrientation")
;(CINT-3.0 "GTK_PAGE_ORIENTATION_REVERSE_PORTRAIT" "GtkPageOrientation")
;(CINT-3.0 "GTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE" "GtkPageOrientation")

;(CINT-3.0 "GTK_PRINT_QUALITY_LOW" "GtkPrintQuality")
;(CINT-3.0 "GTK_PRINT_QUALITY_NORMAL" "GtkPrintQuality")
;(CINT-3.0 "GTK_PRINT_QUALITY_HIGH" "GtkPrintQuality")
;(CINT-3.0 "GTK_PRINT_QUALITY_DRAFT" "GtkPrintQuality")

;(CINT-3.0 "GTK_PRINT_DUPLEX_SIMPLEX" "GtkPrintDuplex")
;(CINT-3.0 "GTK_PRINT_DUPLEX_HORIZONTAL" "GtkPrintDuplex")
;(CINT-3.0 "GTK_PRINT_DUPLEX_VERTICAL" "GtkPrintDuplex")

;(CINT-3.0 "GTK_UNIT_PIXEL" "GtkUnit")
;(CINT-3.0 "GTK_UNIT_POINTS" "GtkUnit")
;(CINT-3.0 "GTK_UNIT_INCH" "GtkUnit")
;(CINT-3.0 "GTK_UNIT_MM" "GtkUnit")

;;; 3.94.0 (CINT-3.0 "GTK_TOOL_PALETTE_DRAG_ITEMS" "GtkToolPaletteDragTargets")
;;; 3.94.0 (CINT-3.0 "GTK_TOOL_PALETTE_DRAG_GROUPS" "GtkToolPaletteDragTargets")

;;; (CSTR-3.0 "GTK_STOCK_DIALOG_AUTHENTICATION")
;;; (CSTR-3.0 "GTK_STOCK_PAGE_SETUP")
;;; (CSTR-3.0 "GTK_STOCK_PRINT_ERROR")
;;; (CSTR-3.0 "GTK_STOCK_PRINT_PAUSED")
;;; (CSTR-3.0 "GTK_STOCK_PRINT_REPORT")
;;; (CSTR-3.0 "GTK_STOCK_PRINT_WARNING")

(CFNC-3.0 "void gtk_tree_view_set_cursor_on_cell GtkTreeView* tree_view GtkTreePath* path GtkTreeViewColumn* focus_column GtkCellRenderer* focus_cell gboolean start_editing")
(CFNC-3.0 "void gtk_tree_view_set_rubber_banding GtkTreeView* tree_view gboolean enable")
(CFNC-3.0 "gboolean gtk_tree_view_get_rubber_banding GtkTreeView* tree_view")
(CFNC-3.0 "void gtk_tooltip_set_markup GtkTooltip* tooltip gchar* markup" 'const)
;;; 3.93.0 (CFNC-3.0 "void gtk_tooltip_set_icon GtkTooltip* tooltip GdkPixbuf* pixbuf")
;;; (CFNC-3.0 "void gtk_tooltip_set_icon_from_stock GtkTooltip* tooltip gchar* stock_id GtkIconSize size" 'const)
(CFNC-3.0 "void gtk_tooltip_set_custom GtkTooltip* tooltip GtkWidget* custom_widget")
;;; 3.96.0 (CFNC-3.0 "void gtk_tooltip_trigger_tooltip_query GdkDisplay* display")
;;; 3.89 (CFNC-3.0 "void gtk_button_set_image_position GtkButton* button GtkPositionType position")
;;; 3.89 (CFNC-3.0 "GtkPositionType gtk_button_get_image_position GtkButton* button")
;;; 3.89 (CFNC-3.0 "gboolean gtk_show_uri GdkScreen* screen gchar* uri guint32 timestamp GError** [error]" 'const)
(CFNC-3.0 "GtkTreeViewColumn* gtk_tree_view_column_new_with_area GtkCellArea* area")
(CFNC-3.0 "GtkWidget* gtk_tree_view_column_get_button GtkTreeViewColumn* tree_column")
(CFNC-3.0 "void gtk_tree_view_column_focus_cell GtkTreeViewColumn* tree_column GtkCellRenderer* cell")

;(CFNC-3.0 "AtkObject* gtk_combo_box_get_popup_accessible GtkComboBox* combo_box")

;(CFNC-3.0 "void gtk_clipboard_request_uris GtkClipboard* clipboard GtkClipboardURIReceivedFunc callback gpointer user_data")
;;; 3.93.0 ;(CFNC-3.0 "gchar** gtk_clipboard_wait_for_uris GtkClipboard* clipboard")
;;; 3.93.0 (CFNC-3.0 "gboolean gtk_clipboard_wait_is_uris_available GtkClipboard* clipboard")

(CFNC-3.0 "void gtk_toolbar_set_drop_highlight_item GtkToolbar* toolbar GtkToolItem* tool_item gint index")
(CFNC-3.0 "void gtk_tool_item_toolbar_reconfigured GtkToolItem* tool_item")

(CCAST-3.0 "GTK_ORIENTABLE" "GtkOrientable*")
(CCHK-3.0 "GTK_IS_ORIENTABLE" "GtkOrientable*")
(CFNC-3.0 "void gtk_orientable_set_orientation GtkOrientable* orientable GtkOrientation orientation")
(CFNC-3.0 "GtkOrientation gtk_orientable_get_orientation GtkOrientable* orientable")

;;; gtk 4 (CFNC-3.0 "void gtk_parse_args int* {argc} char*** |argv|")
(CFNC-3.0 "guint gtk_get_major_version void" 'const-return)
(CFNC-3.0 "guint gtk_get_minor_version void" 'const-return)
(CFNC-3.0 "guint gtk_get_micro_version void" 'const-return)
(CFNC-3.0 "guint gtk_get_binary_age void" 'const-return)
(CFNC-3.0 "guint gtk_get_interface_age void" 'const-return)
;(CFNC-3.0 "GOptionGroup* gtk_get_option_group gboolean open_default_display")

(CINT-3.0 "GTK_IMAGE_GICON" "GtkImageType")
;;; (CFNC-3.0 "GtkWidget* gtk_image_new_from_gicon GIcon* icon GtkIconSize size")
;;; (CFNC-3.0 "void gtk_image_set_from_gicon GtkImage* image GIcon* icon GtkIconSize size")
;;; (CFNC-3.0 "void gtk_image_get_gicon GtkImage* image GIcon** [gicon] GtkIconSize* [size]")

(CFNC-3.0 "void gtk_progress_bar_set_show_text GtkProgressBar* pbar gboolean show_text")
(CFNC-3.0 "gboolean gtk_progress_bar_get_show_text GtkProgressBar* pbar")
 
;;; 3.93.0 (CFNC-3.0 "GtkWidget* gtk_invisible_new_for_screen GdkScreen* screen")
;;; 3.93.0 (CFNC-3.0 "void gtk_invisible_set_screen GtkInvisible* invisible GdkScreen* screen")
;;; 3.93.0 (CFNC-3.0 "GdkScreen* gtk_invisible_get_screen GtkInvisible* invisible")

(CFNC-3.0 "GtkImageType gtk_entry_get_icon_storage_type GtkEntry* entry GtkEntryIconPosition icon_pos")
;;; 3.93.0 (CFNC-3.0 "GdkPixbuf* gtk_entry_get_icon_pixbuf GtkEntry* entry GtkEntryIconPosition icon_pos")
;;; 3.9.8 (CFNC-3.0 "gchar* gtk_entry_get_icon_stock GtkEntry* entry GtkEntryIconPosition icon_pos" 'const-return)
(CFNC-3.0 "GIcon* gtk_entry_get_icon_gicon GtkEntry* entry GtkEntryIconPosition icon_pos")
;(CFNC-3.0 "void gtk_entry_get_icon_area GtkEntry* entry GtkEntryIconPosition icon_pos GdkRectangle* [icon_area]")
;;; 3.89 (CFNC-3.0 "void gtk_entry_get_text_area GtkEntry* entry GdkRectangle* [text_area]")
;(CFNC-3.0 "gboolean gtk_entry_im_context_filter_keypress GtkEntry* entry GdkEventKey* event")
;(CFNC-3.0 "void gtk_entry_reset_im_context GtkEntry* entry")

;;; 3.92.1 (CFNC-3.0 "void gtk_container_propagate_draw GtkContainer* container GtkWidget* child cairo_t* cr")
;;; (CFNC-3.0 "void gtk_container_set_focus_chain GtkContainer* container GList* focusable_widgets")
;;; (CFNC-3.0 "gboolean gtk_container_get_focus_chain GtkContainer* container GList** [focusable_widgets]")
;;; (CFNC-3.0 "void gtk_container_unset_focus_chain GtkContainer* container")
;;; 3.13.2 (CFNC-3.0 "void gtk_container_set_reallocate_redraws GtkContainer* container gboolean needs_redraws")
;;; 3.90.0 (CFNC-3.0 "void gtk_container_set_focus_child GtkContainer* container GtkWidget* child")
(CFNC-3.0 "void gtk_container_set_focus_vadjustment GtkContainer* container GtkAdjustment* adjustment")
(CFNC-3.0 "GtkAdjustment* gtk_container_get_focus_vadjustment GtkContainer* container")
(CFNC-3.0 "void gtk_container_set_focus_hadjustment GtkContainer* container GtkAdjustment* adjustment")
(CFNC-3.0 "GtkAdjustment* gtk_container_get_focus_hadjustment GtkContainer* container")
;;; 3.9.4 (CFNC-3.0 "void gtk_container_resize_children GtkContainer* container")

(CFNC-3.0 "void gtk_assistant_commit GtkAssistant* assistant")

;;; (CFNC-3.0 "char* gtk_im_multicontext_get_context_id GtkIMMulticontext* context" 'const-return)
;;; (CFNC-3.0 "void gtk_im_multicontext_set_context_id GtkIMMulticontext* context char* context_id" 'const)

; -- this is a "quark" apparently (CINT-3.0 "GTK_FILE_CHOOSER_ERROR" "GtkFileChooserError")
(CINT-3.0 "GTK_FILE_CHOOSER_ERROR_NONEXISTENT" "GtkFileChooserError")
(CINT-3.0 "GTK_FILE_CHOOSER_ERROR_BAD_FILENAME" "GtkFileChooserError")
(CINT-3.0 "GTK_FILE_CHOOSER_ERROR_ALREADY_EXISTS" "GtkFileChooserError")
(CINT-3.0 "GTK_FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME" "GtkFileChooserError")
;gtkfilechooser: gtk_file_chooser_error_quark

;(CFNC-3.0 "void gtk_about_dialog_set_license_type GtkAboutDialog* about GtkLicense license_type")
;(CFNC-3.0 "GtkLicense gtk_about_dialog_get_license_type GtkAboutDialog* about")
;;void gtk_show_about_dialog GtkWindow* parent gchar* first_property_name ...)
;(CINT-3.0 "GTK_LICENSE_UNKNOWN" "GtkLicense")
;(CINT-3.0 "GTK_LICENSE_CUSTOM" "GtkLicense")
;(CINT-3.0 "GTK_LICENSE_GPL_2_0" "GtkLicense")
;(CINT-3.0 "GTK_LICENSE_GPL_3_0" "GtkLicense")
;(CINT-3.0 "GTK_LICENSE_LGPL_2_1" "GtkLicense")
;(CINT-3.0 "GTK_LICENSE_LGPL_3_0" "GtkLicense")
;(CINT-3.0 "GTK_LICENSE_BSD" "GtkLicense")
;(CINT-3.0 "GTK_LICENSE_MIT_X11" "GtkLicense")
;(CINT-3.0 "GTK_LICENSE_ARTISTIC" "GtkLicense")

;;; 3.96.0 (CFNC-3.0 "void gtk_window_set_skip_taskbar_hint GtkWindow* window gboolean setting")
;;; 3.96.0 (CFNC-3.0 "gboolean gtk_window_get_skip_taskbar_hint GtkWindow* window")
;;; 3.96.0 (CFNC-3.0 "void gtk_window_set_skip_pager_hint GtkWindow* window gboolean setting")
;;; 3.96.0 (CFNC-3.0 "gboolean gtk_window_get_skip_pager_hint GtkWindow* window")
;;; 3.93.0 (CFNC-3.0 "void gtk_window_set_screen GtkWindow* window GdkScreen* screen")
;;; 3.93.0 (CFNC-3.0 "GdkScreen* gtk_window_get_screen GtkWindow* window")
;;; 3.96.0 (CFNC-3.0 "gboolean gtk_window_set_icon_from_file GtkWindow* window gchar* filename GError** [err]" 'const)
;;; 3.96.0 (CFNC-3.0 "gboolean gtk_window_set_default_icon_from_file gchar* filename GError** [err]" 'const)
(CFNC-3.0 "void gtk_window_fullscreen GtkWindow* window")
(CFNC-3.0 "void gtk_window_unfullscreen GtkWindow* window")
(CFNC-3.0 "GtkWindowType gtk_window_get_window_type GtkWindow* window")
;GtkApplication *gtk_window_get_application GtkWindow* window)
;void gtk_window_set_application GtkWindow* window GtkApplication* application)

(CCAST-3.0 "GTK_WINDOW_GROUP(object)" "GtkWindowGroup*")
(CCHK-3.0 "GTK_IS_WINDOW_GROUP(object)" "GtkWindowGroup*")
(CFNC-3.0 "void gtk_window_group_add_window GtkWindowGroup* window_group GtkWindow* window")
(CFNC-3.0 "void gtk_window_group_remove_window GtkWindowGroup* window_group GtkWindow* window")
(CFNC-3.0 "GtkWindowGroup* gtk_window_group_new void")
(CFNC-3.0 "GtkWindowGroup* gtk_window_get_group GtkWindow* window")
(CFNC-3.0 "GList* gtk_window_group_list_windows GtkWindowGroup* window_group")
(CFNC-3.0 "GtkWidget* gtk_window_group_get_current_device_grab GtkWindowGroup* window_group GdkDevice* device")
;;;;(CFNC "GType gtk_window_group_get_type void")
(CFNC-3.0 "GtkWidget* gtk_window_group_get_current_grab GtkWindowGroup* window_group")

;;; 3.94.0 ;gtkrecentchooserdialog: gtk_recent_chooser_dialog_new -- these 2 use property lists
;;; 3.94.0 ;gtkrecentchooserdialog: gtk_recent_chooser_dialog_new_for_manager

(CFNC-3.0 "guchar* gtk_selection_data_get_data GtkSelectionData* selection_data" 'const)
;;; 3.93.0 (CFNC-3.0 "gboolean gtk_selection_owner_set_for_display GdkDisplay* display GtkWidget* widget GdkAtom selection guint32 time")

(CCAST-3.0 "GTK_TOOL_SHELL" "GtkToolShell*")
(CCHK-3.0 "GTK_IS_TOOL_SHELL" "GtkToolShell*")
(CFNC-3.0 "GtkOrientation gtk_tool_shell_get_text_orientation GtkToolShell* shell")
(CFNC-3.0 "gfloat gtk_tool_shell_get_text_alignment GtkToolShell* shell")
(CFNC-3.0 "PangoEllipsizeMode gtk_tool_shell_get_ellipsize_mode GtkToolShell* shell")
(CFNC-3.0 "GtkSizeGroup* gtk_tool_shell_get_text_size_group GtkToolShell* shell")
;;; (CFNC-3.0 "GtkIconSize gtk_tool_shell_get_icon_size GtkToolShell* shell")
(CFNC-3.0 "GtkOrientation gtk_tool_shell_get_orientation GtkToolShell* shell")
(CFNC-3.0 "GtkToolbarStyle gtk_tool_shell_get_style GtkToolShell* shell")
;;; 3.89 (CFNC-3.0 "GtkReliefStyle gtk_tool_shell_get_relief_style GtkToolShell* shell")
(CFNC-3.0 "void gtk_tool_shell_rebuild_menu GtkToolShell* shell")

;;; 3.14.0 (CFNC-3.0 "GtkStatusIcon* gtk_status_icon_new_from_gicon GIcon* icon")
;;; 3.14.0 (CFNC-3.0 "void gtk_status_icon_set_from_gicon GtkStatusIcon* status_icon GIcon* icon")
;;; 3.14.0 (CFNC-3.0 "GIcon* gtk_status_icon_get_gicon GtkStatusIcon* status_icon")
;;; 3.14.0 (CFNC-3.0 "void gtk_status_icon_set_has_tooltip GtkStatusIcon* status_icon gboolean has_tooltip")
;;; 3.14.0 (CFNC-3.0 "void gtk_status_icon_set_tooltip_text GtkStatusIcon* status_icon gchar* text" 'const)
;;; 3.14.0 (CFNC-3.0 "void gtk_status_icon_set_tooltip_markup GtkStatusIcon* status_icon gchar* markup" 'const)
;;; 3.14.0 (CFNC-3.0 "gboolean gtk_status_icon_get_has_tooltip GtkStatusIcon* status_icon")
;;; 3.14.0 (CFNC-3.0 "gchar* gtk_status_icon_get_tooltip_text GtkStatusIcon* status_icon")
;;; 3.14.0 (CFNC-3.0 "gchar* gtk_status_icon_get_tooltip_markup GtkStatusIcon* status_icon")

(CFNC-3.0 "void gtk_accel_map_lock_path gchar* accel_path" 'const)
(CFNC-3.0 "void gtk_accel_map_unlock_path gchar* accel_path" 'const)

;;; ;(CFNC-3.0 "gboolean gtk_icon_size_lookup_for_settings GtkSettings* settings GtkIconSize size gint* [width] gint* [height]")
; most of the GtkSettings funcs have been removed above and docs say this func isn't needed

(CINT-3.0 "GTK_ICON_LOOKUP_FORCE_SIZE" "GtkIconLookupFlags")
(CINT-3.0 "GTK_ICON_THEME_NOT_FOUND" "GtkIconThemeError")
(CINT-3.0 "GTK_ICON_THEME_FAILED" "GtkIconThemeError")
;gtkicontheme: gtk_icon_theme_choose_icon -- ref array?
;gtkicontheme: gtk_icon_info_load_symbolic
;gtkicontheme: gtk_icon_info_load_symbolic_for_context
(CFNC-3.0 "GtkIconInfo* gtk_icon_theme_lookup_by_gicon GtkIconTheme* icon_theme GIcon* icon gint size GtkIconLookupFlags flags")
(CFNC-3.0 "GtkIconInfo* gtk_icon_info_new_for_pixbuf GtkIconTheme* icon_theme GdkPixbuf* pixbuf")

;;; 2.99.3 ;gtkplug: gtk_plug_construct_for_display -- GdkNativeWindow 
;;; 2.99.3 ;gtkplug: gtk_plug_new_for_display

(CFNC-3.0 "void gtk_icon_view_set_item_orientation GtkIconView* icon_view GtkOrientation orientation")
(CFNC-3.0 "GtkOrientation gtk_icon_view_get_item_orientation GtkIconView* icon_view")

(CFNC-3.0 "gboolean gtk_text_view_im_context_filter_keypress GtkTextView* text_view GdkEventKey* event")
(CFNC-3.0 "void gtk_text_view_reset_im_context GtkTextView* text_view")

;(CFNC-3.0 "void gtk_text_layout_draw GtkTextLayout* layout GtkWidget* widget cairo_t* cr GList** widgets")

;;; (CFNC-3.0 "gchar* gtk_action_get_accel_path GtkAction* action" 'const-return)
;;; (CFNC-3.0 "void gtk_action_block_activate GtkAction* action")
;;; (CFNC-3.0 "void gtk_action_unblock_activate GtkAction* action")
;;; (CFNC-3.0 "void gtk_action_set_accel_path GtkAction* action gchar* accel_path" 'const)
;;; (CFNC-3.0 "void gtk_action_set_accel_group GtkAction* action GtkAccelGroup* accel_group")

;;; 2.99.0

;;; 3.93.0 (CFNC-3.0 "void gdk_device_get_position GdkDevice* device GdkScreen** screen gint* [x] gint* [y]")
(CFNC-3.0 "gboolean gtk_cell_view_get_draw_sensitive GtkCellView* cell_view")
(CFNC-3.0 "void gtk_cell_view_set_draw_sensitive GtkCellView* cell_view gboolean draw_sensitive")
(CFNC-3.0 "gboolean gtk_cell_view_get_fit_model GtkCellView* cell_view")
(CFNC-3.0 "void gtk_cell_view_set_fit_model GtkCellView* cell_view gboolean fit_model")
;;; gtk 4 (CFNC-3.0 "GtkWidget* gtk_combo_box_new_with_area GtkCellArea* area")
;;; gtk 4 (CFNC-3.0 "GtkWidget* gtk_combo_box_new_with_area_and_entry GtkCellArea* area")
(CFNC-3.0 "GtkWidget* gtk_icon_view_new_with_area GtkCellArea* area")
(CFNC-3.0 "void gtk_menu_item_set_reserve_indicator GtkMenuItem* menu_item gboolean reserve")
(CFNC-3.0 "gboolean gtk_menu_item_get_reserve_indicator GtkMenuItem* menu_item")
(CFNC-3.0 "GtkWidget* gtk_menu_shell_get_selected_item GtkMenuShell* menu_shell")
(CFNC-3.0 "GtkWidget* gtk_menu_shell_get_parent_shell GtkMenuShell* menu_shell")
(CFNC-3.0 "guchar* gtk_selection_data_get_data_with_length GtkSelectionData* selection_data gint* [length]" 'const)
(CFNC-3.0 "gboolean gtk_tree_model_iter_previous GtkTreeModel* tree_model GtkTreeIter* iter")
(CSTR-3.0 "GTK_STYLE_CLASS_HIGHLIGHT")
(CSTR-3.0 "GTK_STYLE_CLASS_FRAME")
(CSTR-3.0 "GTK_STYLE_CLASS_DND")


;;; 2.99.1

(CSTR-3.0 "GTK_STYLE_CLASS_HORIZONTAL")
(CSTR-3.0 "GTK_STYLE_CLASS_VERTICAL")
(CFNC-3.0 "gboolean gtk_tree_view_is_blank_at_pos GtkTreeView* tree_view gint x gint y GtkTreePath** [path] GtkTreeViewColumn** [column] gint* [cell_x] gint* [cell_y]")
;;; 3.93.0 (CFNC-3.0 "void gtk_widget_set_device_enabled GtkWidget* widget GdkDevice* device gboolean enabled")
;;; 3.93.0 (CFNC-3.0 "gboolean gtk_widget_get_device_enabled GtkWidget* widget GdkDevice* device")
(CFNC-3.0 "void gtk_window_set_has_user_ref_count GtkWindow* window gboolean setting")

;;; 2.99.2 -- no changes for xgdata I think
;;; 2.99.3

;(CFNC-3.0 "void gtk_text_view_get_cursor_locations GtkTextView* text_view GtkTextIter* iter GdkRectangle* [strong] GdkRectangle* [weak]")


(CFNC-3.0 "GdkRGBA* gdk_rgba_copy GdkRGBA* rgba" 'const)
(CFNC-3.0 "void gdk_rgba_free GdkRGBA* rgba")
(CFNC-3.0 "gboolean gdk_rgba_parse GdkRGBA* rgba gchar* spec" 'const)
(CFNC-3.0 "gchar* gdk_rgba_to_string GdkRGBA* rgba" 'const)

;(STRUCT-3.0-make "GdkRGBA")

(CINT-3.0 "GTK_STATE_FLAG_NORMAL" "GtkStateFlags")
(CINT-3.0 "GTK_STATE_FLAG_ACTIVE" "GtkStateFlags")
(CINT-3.0 "GTK_STATE_FLAG_PRELIGHT" "GtkStateFlags")
(CINT-3.0 "GTK_STATE_FLAG_SELECTED" "GtkStateFlags")
(CINT-3.0 "GTK_STATE_FLAG_INSENSITIVE" "GtkStateFlags")
(CINT-3.0 "GTK_STATE_FLAG_INCONSISTENT" "GtkStateFlags")
(CINT-3.0 "GTK_STATE_FLAG_FOCUSED" "GtkStateFlags")

(CFNC-3.0 "void gtk_widget_set_state_flags GtkWidget* widget GtkStateFlags flags gboolean clear")
(CFNC-3.0 "void gtk_widget_unset_state_flags GtkWidget* widget GtkStateFlags flags")
(CFNC-3.0 "GtkStateFlags gtk_widget_get_state_flags GtkWidget* widget")
;;; 3.15 (CFNC-3.0 "void gtk_widget_override_color GtkWidget* widget GtkStateFlags state GdkRGBA* color" 'const)
;;; 3.15 (CFNC-3.0 "void gtk_widget_override_background_color GtkWidget* widget GtkStateFlags state GdkRGBA* color" 'const)
;;; 3.15 (CFNC-3.0 "void gtk_widget_override_font GtkWidget* widget PangoFontDescription* font_desc" 'const)
;;; 3.7.4 (CFNC-3.0 "void gtk_widget_override_symbolic_color GtkWidget* widget gchar* name GdkRGBA* color" 'const)
;;; 3.15 (CFNC-3.0 "void gtk_widget_override_cursor GtkWidget* widget GdkRGBA* cursor GdkRGBA* secondary_cursor" 'const)



;;; 3.1.2

(CINT-3.2 "GTK_SIZE_REQUEST_CONSTANT_SIZE" "GtkSizeRequestMode")
;(CINT-3.2 "GDK_RENDERING_MODE_SIMILAR" "GdkRenderingMode")
;(CINT-3.2 "GDK_RENDERING_MODE_IMAGE" "GdkRenderingMode")
;(CINT-3.2 "GDK_RENDERING_MODE_RECORDING" "GdkRenderingMode")
 
(CFNC-3.2 "gchar* gtk_entry_get_placeholder_text GtkEntry* entry" 'const)
(CFNC-3.2 "void gtk_entry_set_placeholder_text GtkEntry* entry gchar* text" 'const)
(CFNC-3.2 "void gtk_expander_set_resize_toplevel GtkExpander* expander gboolean resize_toplevel")
(CFNC-3.2 "gboolean gtk_expander_get_resize_toplevel GtkExpander* expander")
;(CFNC-3.2 "void gtk_widget_queue_draw_region GtkWidget* widget cairo_region_t* [region]" 'const)
(CFNC-3.2 "char* gtk_widget_path_to_string GtkWidgetPath* path" 'const)

;;; 3.1.4
;;; 3.96.0 (CFNC-3.2 "gboolean gtk_button_box_get_child_non_homogeneous GtkButtonBox* widget GtkWidget* child")
;;; 3.96.0 (CFNC-3.2 "void gtk_button_box_set_child_non_homogeneous GtkButtonBox* widget GtkWidget* child gboolean non_homogeneous")
;;; 3.96.0 (CFNC-3.2 "void gtk_container_child_notify GtkContainer* container GtkWidget* child gchar* property_name" 'const)
(CFNC-3.2 "void gtk_drag_source_set_icon_gicon GtkWidget* widget GIcon* icon")
(CFNC-3.2 "gboolean gtk_combo_box_set_active_id GtkComboBox* combo_box gchar* active_id" 'const)


;;; 3.1.6
;(CFNC-3.2 "char* gtk_css_provider_to_string GtkCssProvider* provider")

;;; 3.7.4 (CFNC-3.2 "GtkGradient* gtk_gradient_new_linear gdouble x0 gdouble y0 gdouble x1 gdouble y1")
;;; 3.7.4 (CFNC-3.2 "GtkGradient* gtk_gradient_new_radial gdouble x0 gdouble y0 gdouble radius0 gdouble x1 gdouble y1 gdouble radius1")
;;; 3.7.4 (CFNC-3.2 "void gtk_gradient_add_color_stop GtkGradient* gradient gdouble offset GtkSymbolicColor* color")
;;; 3.7.4 (CFNC-3.2 "GtkGradient* gtk_gradient_ref GtkGradient* gradient")
;;; 3.7.4 (CFNC-3.2 "void gtk_gradient_unref GtkGradient* gradient")
;;; 3.7.4 (CFNC-3.2 "gboolean gtk_gradient_resolve GtkGradient* gradient GtkStyleProperties* props cairo_pattern_t** resolved_gradient")

;;; 3.7.4 (CFNC-3.2 "char* gtk_gradient_to_string GtkGradient* gradient")
;;; 3.7.4 (CFNC-3.2 "char* gtk_symbolic_color_to_string GtkSymbolicColor* color")

(CFNC-3.2 "gint gtk_tree_view_column_get_x_offset GtkTreeViewColumn* tree_column")
;(CFNC-3.2 void gtk_render_icon GtkStyleContext* context cairo_t* cr GdkPixbuf* pixbuf gdouble x gdouble y")

(CCAST-3.2 "GTK_OVERLAY" "GtkOverlay*")
(CCHK-3.2 "GTK_IS_OVERLAY" "GtkOverlay*")
(CFNC-3.2 "GtkWidget* gtk_overlay_new void")
(CFNC-3.2 "void gtk_overlay_add_overlay GtkOverlay* overlay GtkWidget* widget")

;;; 3.1.8: no changes

;;; 3.1.10:
(CFNC-3.2 "gdouble gtk_adjustment_get_minimum_increment GtkAdjustment* adjustment")
;(CFNC-3.2 "void gtk_asssistant_remove_page GtkAssistant* assistant gint page_num")



;;; 3.1.12:
(CCAST-3.2 "GTK_FONT_CHOOSER" "GtkFontChooser*")
(CCHK-3.2 "GTK_IS_FONT_CHOOSER" "GtkFontChooser*")
(CCAST-3.2 "GTK_FONT_CHOOSER_DIALOG" "GtkFontChooserDialog*")
(CCHK-3.2 "GTK_IS_FONT_CHOOSER_DIALOG" "GtkFontChooserDialog*")

;;; typedef gboolean (*GtkFontFilterFunc) (const PangoFontFamily *family, const PangoFontFace *face, gpointer data);
;;; void gtk_font_chooser_set_filter_func(GtkFontChooser *fontchooser, GtkFontFilterFunc filter, gpointer data, GDestroyNotify destroy);

(CFNC-3.2 "void gtk_grid_insert_row GtkGrid* grid gint position")
(CFNC-3.2 "void gtk_grid_insert_column GtkGrid* grid gint position")
(CFNC-3.2 "void gtk_grid_insert_next_to GtkGrid* grid GtkWidget* sibling GtkPositionType side")
(CFNC-3.2 "void gtk_text_iter_assign GtkTextIter* iter GtkTextIter* other") ; const
(CFNC-3.2 "gboolean gtk_widget_has_visible_focus GtkWidget* widget")
(CFNC-3.2 "void gtk_window_set_focus_visible GtkWindow* window gboolean setting")
(CFNC-3.2 "gboolean gtk_window_get_focus_visible GtkWindow* window")

;;; out 3.1.90?
;;; (CFNC-3.2 "GtkWidget* gtk_font_chooser_new void")
;;; (CFNC-3.2 "PangoFontFamily* gtk_font_chooser_get_family GtkFontChooser* fontchooser")
;;; (CFNC-3.2 "PangoFontFace* gtk_font_chooser_get_face GtkFontChooser* fontchooser")
;;; (CFNC-3.2 "gint gtk_font_chooser_get_size GtkFontChooser* fontchooser")
;;; (CFNC-3.2 "gchar* gtk_font_chooser_get_font_name GtkFontChooser* fontchooser")
;;; (CFNC-3.2 "gboolean gtk_font_chooser_set_font_name GtkFontChooser* fontchooser gchar* fontname" 'const)
;;; (CFNC-3.2 "gchar* gtk_font_chooser_get_preview_text GtkFontChooser* fontchooser" 'const-return)
;;; (CFNC-3.2 "void gtk_font_chooser_set_preview_text GtkFontChooser* fontchooser gchar* text" 'const)
;;; (CFNC-3.2 "gboolean gtk_font_chooser_get_show_preview_entry GtkFontChooser* fontchooser")
;;; (CFNC-3.2 "void gtk_font_chooser_set_show_preview_entry GtkFontChooser* fontchooser gboolean show_preview_entry")
;;; (CFNC-3.2 "GtkWidget* gtk_font_chooser_dialog_get_font_chooser GtkFontChooserDialog* fcd")
;;; (CFNC-3.2 "gchar* gtk_font_chooser_dialog_get_font_name GtkFontChooserDialog* fcd")
;;; (CFNC-3.2 "gboolean gtk_font_chooser_dialog_set_font_name GtkFontChooserDialog* fcd gchar* fontname" 'const)
;;; (CFNC-3.2 "gchar* gtk_font_chooser_dialog_get_preview_text GtkFontChooserDialog* fcd" 'const-return)
;;; (CFNC-3.2 "void gtk_font_chooser_dialog_set_preview_text GtkFontChooserDialog* fcd gchar* text" 'const)


(CFNC-3.2 "GtkWidget* gtk_font_chooser_dialog_new gchar* title GtkWindow* window" 'const)

;;; 3.1.16|18
;;; new: gtkcsssection.h

(CFNC-3.2 "gboolean gdk_event_get_button GdkEvent* event guint* button")
(CFNC-3.2 "gboolean gdk_event_get_click_count GdkEvent* event guint* click_count")
(CFNC-3.2 "gboolean gdk_event_get_keyval GdkEvent* event guint* keyval")
(CFNC-3.2 "gboolean gdk_event_get_keycode GdkEvent* event guint16* keycode")
(CFNC-3.2 "gboolean gdk_event_get_scroll_direction GdkEvent* event GdkScrollDirection* [direction]")
(CFNC-3.2 "GtkWidget* gtk_grid_get_child_at GtkGrid* grid gint left gint top")

;;; 3.1.90
(CCAST-3.2 "GTK_FONT_CHOOSER_WIDGET" "GtkFontChooserWidget*")
(CCHK-3.2 "GTK_IS_FONT_CHOOSER_WIDGET" "GtkFontChooserWidget*")

(CFNC-3.2 "PangoFontFamily* gtk_font_chooser_get_font_family GtkFontChooser* fontchooser")
(CFNC-3.2 "PangoFontFace* gtk_font_chooser_get_font_face GtkFontChooser* fontchooser")
(CFNC-3.2 "gint gtk_font_chooser_get_font_size GtkFontChooser* fontchooser")
(CFNC-3.2 "PangoFontDescription* gtk_font_chooser_get_font_desc GtkFontChooser* fontchooser")
(CFNC-3.2 "void gtk_font_chooser_set_font_desc GtkFontChooser* fontchooser PangoFontDescription* font_desc" 'const)
(CFNC-3.2 "gchar* gtk_font_chooser_get_font GtkFontChooser* fontchooser")
(CFNC-3.2 "void gtk_font_chooser_set_font GtkFontChooser* fontchooser gchar* fontname" 'const)
(CFNC-3.2 "gchar* gtk_font_chooser_get_preview_text GtkFontChooser* fontchooser")
(CFNC-3.2 "void gtk_font_chooser_set_preview_text GtkFontChooser* fontchooser gchar* text" 'const)
(CFNC-3.2 "gboolean gtk_font_chooser_get_show_preview_entry GtkFontChooser* fontchooser")
(CFNC-3.2 "void gtk_font_chooser_set_show_preview_entry GtkFontChooser* fontchooser gboolean show_preview_entry")
(CFNC-3.2 "GtkWidget* gtk_font_chooser_widget_new void")

;;; void gtk_font_chooser_set_filter_func GtkFontChooser* fontchooser GtkFontFilterFuncfilter gpointer user_data GDestroyNotify destroy)



;;; gtk 3.3.2
;;; gtk 3.3.6
;;; the scale troughs are changed -- in prefs they're all green or gray now?

(CCAST-3.4 "GTK_APPLICATION" "GtkApplication*")
(CCHK-3.4 "GTK_IS_APPLICATION" "GtkApplication*")

(CCAST-3.4 "GTK_APPLICATION_WINDOW" "GtkApplicationWindow*")
(CCHK-3.4 "GTK_IS_APPLICATION_WINDOW" "GtkApplicationWindow*")

(CINT-3.4 "GDK_MODIFIER_INTENT_PRIMARY_ACCELERATOR" "GdkModifierIntent")
(CINT-3.4 "GDK_MODIFIER_INTENT_CONTEXT_MENU" "GdkModifierIntent")
(CINT-3.4 "GDK_MODIFIER_INTENT_EXTEND_SELECTION" "GdkModifierIntent")
(CINT-3.4 "GDK_MODIFIER_INTENT_MODIFY_SELECTION" "GdkModifierIntent")
(CINT-3.4 "GDK_MODIFIER_INTENT_NO_TEXT_INPUT" "GdkModifierIntent")
(CINT-3.4 "GDK_MODIFIER_INTENT_SHIFT_GROUP" "GdkModifierIntent")

;;; (CINT-3.4 "GTK_REGION_ONLY" "GtkRegionFlags")
;;; (CINT-3.4 "GTK_STATE_FLAG_WINDOW_UNFOCUSED" "GtkStateFlags")
 
(CINT-3.4 "GTK_CELL_RENDERER_EXPANDABLE" "GtkCellRendererState")
(CINT-3.4 "GTK_CELL_RENDERER_EXPANDED" "GtkCellRendererState")

(CFNC-3.4 "GdkModifierType gdk_keymap_get_modifier_mask GdkKeymap* keymap GdkModifierIntent intent")
(CFNC-3.4 "void gtk_accelerator_parse_with_keycode gchar* accelerator guint* accelerator_key guint** accelerator_codes GdkModifierType* accelerator_mods" 'const)
(CFNC-3.4 "gchar* gtk_accelerator_name_with_keycode GdkDisplay* display guint accelerator_key guint keycode GdkModifierType accelerator_mods")
(CFNC-3.4 "gchar* gtk_accelerator_get_label_with_keycode GdkDisplay* display guint accelerator_key guint keycode GdkModifierType accelerator_mods")
;;; 3.22.2 (CFNC-3.4 "void gdk_screen_get_monitor_workarea GdkScreen* screen gint monitor_num GdkRectangle* dest")
(CFNC-3.4 "GMenuModel* gtk_application_get_app_menu GtkApplication* application")
(CFNC-3.4 "void gtk_application_set_app_menu GtkApplication* application GMenuModel* model")
(CFNC-3.4 "GMenuModel* gtk_application_get_menubar GtkApplication* application")
(CFNC-3.4 "void gtk_application_set_menubar GtkApplication* application GMenuModel* model")
;;; 3.14 (CFNC-3.4 "void gtk_application_add_accelerator GtkApplication* application gchar* accelerator gchar* action_name GVariant* parameter" 'const)
;;; 3.14 (CFNC-3.4 "void gtk_application_remove_accelerator GtkApplication* application gchar* action_name GVariant* parameter" 'const)
(CFNC-3.4 "gchar* gtk_entry_completion_compute_prefix GtkEntryCompletion* completion char* key" 'const)
(CFNC-3.4 "void gtk_scale_set_has_origin GtkScale* scale gboolean has_origin")
(CFNC-3.4 "gboolean gtk_scale_get_has_origin GtkScale* scale")
;;; 3.91.0 (CFNC-3.4 "void gtk_window_set_hide_titlebar_when_maximized GtkWindow* window gboolean setting")
;;; 3.91.0 (CFNC-3.4 "gboolean gtk_window_get_hide_titlebar_when_maximized GtkWindow* window")
(CFNC-3.4 "GtkWidget* gtk_application_window_new GtkApplication* application")
(CFNC-3.4 "void gtk_application_window_set_show_menubar GtkApplicationWindow* window gboolean show_menubar")
(CFNC-3.4 "gboolean gtk_application_window_get_show_menubar GtkApplicationWindow* window")


;;; 3.3.8 GdkColor deprecated, so all existing refs above need -gtk2

(CINT-3.4 "GTK_STATE_FLAG_BACKDROP" "GtkStateFlags")

(CFNC-3.4 "GtkWidget* gtk_image_new_from_resource gchar* resource_path" 'const)
(CFNC-3.4 "void gtk_image_set_from_resource GtkImage* image gchar* resource_path" 'const)
(CFNC-3.4 "void gtk_window_set_attached_to GtkWindow* window GtkWidget* attach_widget")
(CFNC-3.4 "GtkWidget* gtk_window_get_attached_to GtkWindow* window")

;;; 3.3.10 nothing new
;;; 3.3.12
(CFNC-3.4 "void gtk_about_dialog_add_credit_section GtkAboutDialog* about gchar* section_name gchar** people" 'const)

;;; 3.3.14 nothing new

;;; 3.3.16 color selection dialog deprecated -- many new headers for color chooser dialog
;;;         colorsel.h and colorseldialog.h gone
;;;         color_button stuff seems also to be deprecated?

(CFNC-3.4 "guint gdk_keymap_get_modifier_state GdkKeymap* keymap")
(CFNC-3.4 "void gtk_hsv_to_rgb gdouble h gdouble s gdouble v gdouble* [r] gdouble* [g] gdouble* [b]")
(CFNC-3.4 "void gtk_rgb_to_hsv gdouble r gdouble g gdouble b gdouble* [h] gdouble* [s] gdouble* [v]")
(CFNC-3.4 "void gtk_color_chooser_get_rgba GtkColorChooser* chooser GdkRGBA* color")
(CFNC-3.4 "void gtk_color_chooser_set_rgba GtkColorChooser* chooser GdkRGBA* color" 'const)
(CFNC-3.4 "gboolean gtk_color_chooser_get_use_alpha GtkColorChooser* chooser")
(CFNC-3.4 "void gtk_color_chooser_set_use_alpha GtkColorChooser* chooser gboolean use_alpha")
(CFNC-3.4 "GtkWidget* gtk_color_chooser_dialog_new gchar* title GtkWindow* parent" 'const)
(CFNC-3.4 "GtkWidget* gtk_color_chooser_widget_new void")

(CCAST-3.4 "GTK_COLOR_CHOOSER_DIALOG" "GtkColorChooserDialog*")
(CCHK-3.4 "GTK_IS_COLOR_CHOOSER_DIALOG" "GtkColorChooserDialog*")
(CCAST-3.4 "GTK_COLOR_CHOOSER_WIDGET" "GtkColorWidget*")
(CCHK-3.4 "GTK_IS_COLOR_CHOOSER_WIDGET" "GtkColorWidget*")

;; also GDK_BUTTON_PRIMARY|MIDDLE|SECONDARY but they are just ints (from gdkevents.h)


;;; 3.3.18

;(CINT-3.6 "GDK_EXTENSION_EVENTS_NONE" "GdkExtensionMode")
;(CINT-3.6 "GDK_EXTENSION_EVENTS_ALL" "GdkExtensionMode")
;(CINT-3.6 "GDK_EXTENSION_EVENTS_CURSOR" "GdkExtensionMode")

(CINT-3.6 "GDK_TOUCH_BEGIN" "GdkEventType")
(CINT-3.6 "GDK_TOUCH_UPDATE" "GdkEventType")
(CINT-3.6 "GDK_TOUCH_END" "GdkEventType")
(CINT-3.6 "GDK_TOUCH_CANCEL" "GdkEventType")

(CINT-3.6 "GDK_SCROLL_SMOOTH" "GdkScrollDirection")

(CINT-3.6 "GDK_CROSSING_TOUCH_BEGIN" "GdkCrossingMode")
(CINT-3.6 "GDK_CROSSING_TOUCH_END" "GdkCrossingMode")
(CINT-3.6 "GDK_CROSSING_DEVICE_SWITCH" "GdkCrossingMode")

;(CINT-3.6 "GDK_EVENT_POINTER_EMULATED" "GdkEventFlags")

(CINT-3.6 "GDK_TOUCH_MASK" "GdkEventMask")
(CINT-3.6 "GDK_SMOOTH_SCROLL_MASK" "GdkEventMask")

(CFNC-3.6 "gboolean gdk_event_get_scroll_deltas GdkEvent* event gdouble* [delta_x] gdouble* [delta_y]")

;;; 3.3.20 -- nothing new but "XI2" requirement -- what is that?? -- apparently some sort of typo
(CFNC-3.6 "void gtk_color_chooser_add_palette GtkColorChooser* chooser GtkOrientation horizontal gint colors_per_line gint n_colors GdkRGBA* colors") ; was gboolean horizontal

;;; 3.4.0|1 -- nothing new
;;; 3.5.2 -- a few deprecations (below)


;;; 3.5.4
;;; 3.89 (CFNC-3.6 "void gtk_button_set_always_show_image GtkButton* button gboolean always_show")
;;; 3.89 (CFNC-3.6 "gboolean gtk_button_get_always_show_image GtkButton* button")
(CFNC-3.6 "guint gtk_tree_view_get_n_columns GtkTreeView* tree_view")


;;; GTK_UNIT_NONE as a GtkUnit (like pixel) but this enum is commented out above

;;; 3.5.6
;(CFNC-3.6 "gboolean gtk_icon_view_get_cell_rect GtkIconView* icon_view GtkTreePath* path GtkCellRenderer* cell GdkRectangle** [rect]")
(CCAST-3.6 "GTK_MENU_BUTTON" "GtkMenuButton*")
(CCHK-3.6 "GTK_IS_MENU_BUTTON" "GtkMenuButton*")
(CFNC-3.6 "GtkWidget* gtk_menu_button_new void")
;;; 3.5.12 (CFNC-3.6 "void gtk_menu_button_set_menu GtkMenuButton* menu_button GtkWidget* menu")
;;; 3.5.12 (CFNC-3.6 "GtkMenu* gtk_menu_button_get_menu GtkMenuButton* menu_button")
;;; 3.13.2 (CFNC-3.6 "void gtk_menu_button_set_direction GtkMenuButton* menu_button GtkArrowType direction")
;;; 3.13.2 (CFNC-3.6 "GtkArrowType gtk_menu_button_get_direction GtkMenuButton* menu_button")
(CFNC-3.6 "void gtk_menu_button_set_menu_model GtkMenuButton* menu_button GMenuModel* menu_model")
(CFNC-3.6 "GMenuModel* gtk_menu_button_get_menu_model GtkMenuButton* menu_button")
(CFNC-3.6 "void gtk_menu_button_set_align_widget GtkMenuButton* menu_button GtkWidget* align_widget")
(CFNC-3.6 "GtkWidget* gtk_menu_button_get_align_widget GtkMenuButton* menu_button")
(CCAST-3.6 "GTK_SEARCH_ENTRY" "GtkWidget*")
(CCHK-3.6 "GTK_IS_SEARCH_ENTRY" "GtkWidget*")
(CFNC-3.6 "GtkWidget* gtk_search_entry_new void")

;;; 3.5.8 (which requires atk-bridge which is not builable!)
(CINT-3.6 "GTK_LEVEL_BAR_MODE_CONTINUOUS" "GtkLevelBarMode")
(CINT-3.6 "GTK_LEVEL_BAR_MODE_DISCRETE" "GtkLevelBarMode")

(CCAST-3.6 "GTK_LEVEL_BAR" "GtkLevelBar*")
(CCHK-3.6 "GTK_IS_LEVEL_BAR" "GtkLevelBar*")

(CFNC-3.6 "GtkWidget* gtk_level_bar_new void")
(CFNC-3.6 "GtkWidget* gtk_level_bar_new_for_interval gdouble min_value gdouble max_value")
(CFNC-3.6 "void gtk_level_bar_set_mode GtkLevelBar* self GtkLevelBarMode mode")
(CFNC-3.6 "GtkLevelBarMode gtk_level_bar_get_mode GtkLevelBar* self")
(CFNC-3.6 "void gtk_level_bar_set_value GtkLevelBar* self gdouble value")
(CFNC-3.6 "gdouble gtk_level_bar_get_value GtkLevelBar* self")
(CFNC-3.6 "void gtk_level_bar_set_min_value GtkLevelBar* self gdouble value")
(CFNC-3.6 "gdouble gtk_level_bar_get_min_value GtkLevelBar* self")
(CFNC-3.6 "void gtk_level_bar_set_max_value GtkLevelBar* self gdouble value")
(CFNC-3.6 "gdouble gtk_level_bar_get_max_value GtkLevelBar* self")
(CFNC-3.6 "void gtk_level_bar_add_offset_value GtkLevelBar* self gchar* name gdouble value" 'const)
(CFNC-3.6 "void gtk_level_bar_remove_offset_value GtkLevelBar* self gchar* name" 'const)
(CFNC-3.6 "gboolean gtk_level_bar_get_offset_value GtkLevelBar* self gchar* name gdouble* [value]" 'const)


;;; 3.5.12
(CFNC-3.6 "GtkWindow* gtk_application_get_active_window GtkApplication* application")
(CFNC-3.6 "void gtk_entry_set_input_purpose GtkEntry* entry GtkInputPurpose purpose")
(CFNC-3.6 "GtkInputPurpose gtk_entry_get_input_purpose GtkEntry* entry")
(CFNC-3.6 "void gtk_entry_set_input_hints GtkEntry* entry GtkInputHints hints")
(CFNC-3.6 "GtkInputHints gtk_entry_get_input_hints GtkEntry* entry")
;;; ?? (CFNC-3.6 "void gtk_menu_button_set_menu GtkMenuButton* menu_button GtkWidget* menu")
(CFNC-3.6 "GtkMenu* gtk_menu_button_get_popup GtkMenuButton* menu_button")
(CFNC-3.6 "void gtk_text_view_set_input_purpose GtkTextView* text_view GtkInputPurpose purpose")
(CFNC-3.6 "GtkInputPurpose gtk_text_view_get_input_purpose GtkTextView* text_view")
(CFNC-3.6 "void gtk_text_view_set_input_hints GtkTextView* text_view GtkInputHints hints")
(CFNC-3.6 "GtkInputHints gtk_text_view_get_input_hints GtkTextView* text_view")
;(CFNC-3.6 "void gtk_widget_insert_action_group GtkWidget* widget gchar* name GActionGroup* group" 'const)

(CINT-3.6 "GTK_INPUT_PURPOSE_FREE_FORM" "GtkInputPurpose")
(CINT-3.6 "GTK_INPUT_PURPOSE_ALPHA" "GtkInputPurpose")
(CINT-3.6 "GTK_INPUT_PURPOSE_DIGITS" "GtkInputPurpose")
(CINT-3.6 "GTK_INPUT_PURPOSE_NUMBER" "GtkInputPurpose")
(CINT-3.6 "GTK_INPUT_PURPOSE_PHONE" "GtkInputPurpose")
(CINT-3.6 "GTK_INPUT_PURPOSE_URL" "GtkInputPurpose")
(CINT-3.6 "GTK_INPUT_PURPOSE_EMAIL" "GtkInputPurpose")
(CINT-3.6 "GTK_INPUT_PURPOSE_NAME" "GtkInputPurpose")
(CINT-3.6 "GTK_INPUT_PURPOSE_PASSWORD" "GtkInputPurpose")
(CINT-3.6 "GTK_INPUT_PURPOSE_PIN" "GtkInputPurpose")

(CINT-3.6 "GTK_INPUT_HINT_NONE" "GtkInputHints")
(CINT-3.6 "GTK_INPUT_HINT_SPELLCHECK" "GtkInputHints")
(CINT-3.6 "GTK_INPUT_HINT_NO_SPELLCHECK" "GtkInputHints")
(CINT-3.6 "GTK_INPUT_HINT_WORD_COMPLETION" "GtkInputHints")
(CINT-3.6 "GTK_INPUT_HINT_LOWERCASE" "GtkInputHints")
(CINT-3.6 "GTK_INPUT_HINT_UPPERCASE_CHARS" "GtkInputHints")
(CINT-3.6 "GTK_INPUT_HINT_UPPERCASE_WORDS" "GtkInputHints")
(CINT-3.6 "GTK_INPUT_HINT_UPPERCASE_SENTENCES" "GtkInputHints")


;;; 3.5.14
(CINT-3.6 "GTK_INPUT_HINT_INHIBIT_OSK" "GtkInputHints")
(CFNC-3.6 "void gtk_entry_set_attributes GtkEntry* entry PangoAttrList* attrs")
(CFNC-3.6 "PangoAttrList* gtk_entry_get_attributes GtkEntry* entry")
 
;;; nothing new in 3.5.16

;;; 3.5.18
(CFNC-3.6 "void gtk_accel_label_set_accel GtkAccelLabel* accel_label guint accelerator_key GdkModifierType accelerator_mods")
;;; (CFNC-3.6 "GtkAccelGroup* gtk_action_group_get_accel_group GtkActionGroup* action_group")
;;; (CFNC-3.6 "void gtk_action_group_set_accel_group GtkActionGroup* action_group GtkAccelGroup* accel_group")
(CFNC-3.6 "void gtk_menu_shell_bind_model GtkMenuShell* menu_shell GMenuModel* model gchar* action_namespace gboolean with_separators" 'const)

;;; nothing new in 3.6.0|1

;;; 3.7.0
(CFNC-3.8 "void gtk_level_bar_set_inverted GtkLevelBar* self gboolean inverted")
(CFNC-3.8 "gboolean gtk_level_bar_get_inverted GtkLevelBar* self")


;;; 3.7.2
(CFNC-3.8 "gboolean gtk_widget_is_visible GtkWidget* widget")


;;; 3.7.4
;;; gtk-gradient is deprecated? and symboliccolor


;;; 3.7.6
(CINT-3.8 "GTK_STATE_FLAG_DIR_LTR" "GtkStateFlags")
(CINT-3.8 "GTK_STATE_FLAG_DIR_RTL" "GtkStateFlags")


;;; 3.7.8
(CINT-3.8 "GDK_FULLSCREEN_ON_CURRENT_MONITOR" "GdkFullscreenMode")
(CINT-3.8 "GDK_FULLSCREEN_ON_ALL_MONITORS" "GdkFullscreenMode")

(CFNC-3.8 "void gtk_icon_view_set_activate_on_single_click GtkIconView* icon_view gboolean single")
(CFNC-3.8 "gboolean gtk_icon_view_get_activate_on_single_click GtkIconView* icon_view")
(CFNC-3.8 "gboolean gtk_tree_view_get_activate_on_single_click GtkTreeView* tree_view")
(CFNC-3.8 "void gtk_tree_view_set_activate_on_single_click GtkTreeView* tree_view gboolean single")


;;; 3.7.10
(CFNC-3.8 "void gtk_widget_set_opacity GtkWidget* widget double opacity")
(CFNC-3.8 "double gtk_widget_get_opacity GtkWidget* widget")
  
;;; 3.7.12:
(CFNC-3.8 "void pango_font_map_changed PangoFontMap* fontmap")

;;; 3.7.14: no changes
;;; 3.8.0: no changes

;;; 3.9.0: lots of changes!  here we go...

;;; (CFNC-3.10 "GdkDisplayManager* gdk_display_manager_peek void")
;;; 3.93.0 (CFNC-3.10 "void gdk_set_allowed_backends gchar* backends" 'const)
(CFNC-3.10 "void gtk_box_set_baseline_position GtkBox* box GtkBaselinePosition position")
(CFNC-3.10 "GtkBaselinePosition gtk_box_get_baseline_position GtkBox* box")
(CFNC-3.10 "void gtk_grid_remove_row GtkGrid* grid gint position")
(CFNC-3.10 "void gtk_grid_remove_column GtkGrid* grid gint position")
(CFNC-3.10 "void gtk_grid_set_row_baseline_position GtkGrid* grid gint row GtkBaselinePosition pos")
(CFNC-3.10 "GtkBaselinePosition gtk_grid_get_row_baseline_position GtkGrid* grid gint row")
(CFNC-3.10 "void gtk_grid_set_baseline_row GtkGrid* grid gint row")
(CFNC-3.10 "gint gtk_grid_get_baseline_row GtkGrid* grid")
;;; 3.91.2 (CFNC-3.10 "void gtk_widget_size_allocate_with_baseline GtkWidget* widget GtkAllocation* allocation gint baseline")
;;; 3.89.2 (CFNC-3.10 "void gtk_widget_get_preferred_height_and_baseline_for_width GtkWidget* widget gint width gint* [minimum_height] gint* [natural_height] gint* [minimum_baseline] gint* [natural_baseline]")
;;; (CFNC-3.10 "void gtk_widget_get_preferred_size_and_baseline GtkWidget* widget GtkRequisition* minimum_size GtkRequisition* natural_size gint* [minimum_baseline] gint* [natural_baseline]")
(CFNC-3.10 "int gtk_widget_get_allocated_baseline GtkWidget* widget")
;;; 3.89.5 (CFNC-3.10 "GtkAlign gtk_widget_get_valign_with_baseline GtkWidget* widget")
(CFNC-3.10 "void gtk_widget_init_template GtkWidget* widget")
;;; (CFNC-3.10 "GObject* gtk_widget_get_automated_child GtkWidget* widget GType widget_type gchar* name" 'const)
;;; GObject* is apparently the problem here
;(CFNC-3.10 "void gtk_widget_class_set_template GtkWidgetClass* widget_class GBytes* template_bytes")
;(CFNC-3.10 "void gtk_widget_class_set_template_from_resource GtkWidgetClass* widget_class gchar* resource_name" 'const)
;;; (CFNC-3.10 "void gtk_widget_class_declare_callback GtkWidgetClass* widget_class gchar* callback_name GCallback callback_symbol" 'const)
;;; (CFNC-3.10 "void gtk_widget_class_automate_child GtkWidgetClass* widget_class gchar* name gboolean internal_child gssize struct_offset" 'const)
(CFNC-3.10 "void gtk_window_set_titlebar GtkWindow* window GtkWidget* titlebar")
;;; 3.96.0 (CFNC-3.10 "GtkWidget* gtk_places_sidebar_new void")
;;; 3.94.0 (CFNC-3.10 "GtkPlacesOpenFlags gtk_places_sidebar_get_open_flags GtkPlacesSidebar* sidebar")
;;; 3.94.0 (CFNC-3.10 "void gtk_places_sidebar_set_open_flags GtkPlacesSidebar* sidebar GtkPlacesOpenFlags flags")
;;; 3.94.0 (CFNC-3.10 "GFile* gtk_places_sidebar_get_location GtkPlacesSidebar* sidebar")
;;; 3.94.0 (CFNC-3.10 "void gtk_places_sidebar_set_location GtkPlacesSidebar* sidebar GFile* location")
;;; 3.94.0 (CFNC-3.10 "gboolean gtk_places_sidebar_get_show_desktop GtkPlacesSidebar* sidebar")
;;; 3.94.0 (CFNC-3.10 "void gtk_places_sidebar_set_show_desktop GtkPlacesSidebar* sidebar gboolean show_desktop")
;;; 3.94.0 ;;; 3.18 (CFNC-3.10 "gboolean gtk_places_sidebar_get_show_connect_to_server GtkPlacesSidebar* sidebar")
;;; 3.94.0 ;;; 3.18 (CFNC-3.10 "void gtk_places_sidebar_set_show_connect_to_server GtkPlacesSidebar* sidebar gboolean show_connect_to_server")
;;; 3.94.0 (CFNC-3.10 "void gtk_places_sidebar_add_shortcut GtkPlacesSidebar* sidebar GFile* location")
;;; 3.94.0 (CFNC-3.10 "void gtk_places_sidebar_remove_shortcut GtkPlacesSidebar* sidebar GFile* location")
;;; 3.94.0 (CFNC-3.10 "GSList* gtk_places_sidebar_list_shortcuts GtkPlacesSidebar* sidebar")
;;; 3.94.0 (CFNC-3.10 "GFile* gtk_places_sidebar_get_nth_bookmark GtkPlacesSidebar* sidebar gint n")
(CFNC-3.10 "GtkWidget* gtk_stack_switcher_new void")
(CFNC-3.10 "void gtk_stack_switcher_set_stack GtkStackSwitcher* switcher GtkStack* stack")
(CFNC-3.10 "GtkStack* gtk_stack_switcher_get_stack GtkStackSwitcher* switcher")
(CFNC-3.10 "GtkWidget* gtk_stack_new void")
(CFNC-3.10 "void gtk_stack_add_named GtkStack* stack GtkWidget* child gchar* name" 'const)
(CFNC-3.10 "void gtk_stack_add_titled GtkStack* stack GtkWidget* child gchar* name gchar* title" 'const)
(CFNC-3.10 "void gtk_stack_set_visible_child GtkStack* stack GtkWidget* child")
(CFNC-3.10 "GtkWidget* gtk_stack_get_visible_child GtkStack* stack")
(CFNC-3.10 "void gtk_stack_set_visible_child_name GtkStack* stack gchar* name" 'const)
(CFNC-3.10 "gchar* gtk_stack_get_visible_child_name GtkStack* stack")
(CFNC-3.10 "void gtk_stack_set_visible_child_full GtkStack* stack gchar* name GtkStackTransitionType transition" 'const)
(CFNC-3.10 "void gtk_stack_set_homogeneous GtkStack* stack gboolean homogeneous")
(CFNC-3.10 "gboolean gtk_stack_get_homogeneous GtkStack* stack")
(CFNC-3.10 "void gtk_stack_set_transition_duration GtkStack* stack guint duration")
(CFNC-3.10 "guint gtk_stack_get_transition_duration GtkStack* stack")
(CFNC-3.10 "void gtk_stack_set_transition_type GtkStack* stack GtkStackTransitionType transition")
(CFNC-3.10 "GtkStackTransitionType gtk_stack_get_transition_type GtkStack* stack")
(CFNC-3.10 "GtkWidget* gtk_revealer_new void")
(CFNC-3.10 "gboolean gtk_revealer_get_reveal_child GtkRevealer* revealer")
(CFNC-3.10 "void gtk_revealer_set_reveal_child GtkRevealer* revealer gboolean reveal_child")
(CFNC-3.10 "gboolean gtk_revealer_get_child_revealed GtkRevealer* revealer")
(CFNC-3.10 "guint gtk_revealer_get_transition_duration GtkRevealer* revealer")
(CFNC-3.10 "void gtk_revealer_set_transition_duration GtkRevealer* revealer guint duration")
(CFNC-3.10 "void gtk_revealer_set_transition_type GtkRevealer* revealer GtkRevealerTransitionType transition")
(CFNC-3.10 "GtkRevealerTransitionType gtk_revealer_get_transition_type GtkRevealer* revealer")
(CFNC-3.10 "GtkWidget* gtk_header_bar_new void")
(CFNC-3.10 "void gtk_header_bar_set_title GtkHeaderBar* bar gchar* title" 'const)
(CFNC-3.10 "gchar* gtk_header_bar_get_title GtkHeaderBar* bar" 'const)
(CFNC-3.10 "void gtk_header_bar_set_subtitle GtkHeaderBar* bar gchar* subtitle" 'const)
(CFNC-3.10 "gchar* gtk_header_bar_get_subtitle GtkHeaderBar* bar" 'const)
(CFNC-3.10 "void gtk_header_bar_set_custom_title GtkHeaderBar* bar GtkWidget* title_widget")
(CFNC-3.10 "GtkWidget* gtk_header_bar_get_custom_title GtkHeaderBar* bar")
(CFNC-3.10 "void gtk_header_bar_pack_start GtkHeaderBar* bar GtkWidget* child")
(CFNC-3.10 "void gtk_header_bar_pack_end GtkHeaderBar* bar GtkWidget* child")

(CINT-3.10 "GTK_ALIGN_BASELINE" "GtkAlign")
(CINT-3.10 "GTK_BASELINE_POSITION_TOP" "GtkBaselinePosition")
(CINT-3.10 "GTK_BASELINE_POSITION_CENTER" "GtkBaselinePosition")
(CINT-3.10 "GTK_BASELINE_POSITION_BOTTOM" "GtkBaselinePosition")
(CINT-3.10 "GTK_PLACES_OPEN_NORMAL" "GtkPlacesOpenFlags")
(CINT-3.10 "GTK_PLACES_OPEN_NEW_TAB" "GtkPlacesOpenFlags")
(CINT-3.10 "GTK_PLACES_OPEN_NEW_WINDOW" "GtkPlacesOpenFlags")
(CINT-3.10 "GTK_STACK_TRANSITION_TYPE_NONE" "GtkStackTransitionType")
(CINT-3.10 "GTK_STACK_TRANSITION_TYPE_CROSSFADE" "GtkStackTransitionType")
(CINT-3.10 "GTK_STACK_TRANSITION_TYPE_SLIDE_RIGHT" "GtkStackTransitionType")
(CINT-3.10 "GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT" "GtkStackTransitionType")
(CINT-3.10 "GTK_STACK_TRANSITION_TYPE_SLIDE_UP" "GtkStackTransitionType")
(CINT-3.10 "GTK_STACK_TRANSITION_TYPE_SLIDE_DOWN" "GtkStackTransitionType")
(CINT-3.10 "GTK_REVEALER_TRANSITION_TYPE_NONE" "GtkRevealerTransitionType")
(CINT-3.10 "GTK_REVEALER_TRANSITION_TYPE_CROSSFADE" "GtkRevealerTransitionType")
(CINT-3.10 "GTK_REVEALER_TRANSITION_TYPE_SLIDE_RIGHT" "GtkRevealerTransitionType")
(CINT-3.10 "GTK_REVEALER_TRANSITION_TYPE_SLIDE_LEFT" "GtkRevealerTransitionType")
(CINT-3.10 "GTK_REVEALER_TRANSITION_TYPE_SLIDE_UP" "GtkRevealerTransitionType")
(CINT-3.10 "GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN" "GtkRevealerTransitionType")

;;; 3.94.0 (CCAST-3.10 "GTK_PLACES_SIDEBAR" "GtkPlacesSidebar*")
;;; 3.94.0 (CCHK-3.10 "GTK_IS_PLACES_SIDEBAR" "GtkPlacesSidebar*")
(CCAST-3.10 "GTK_STACK_SWITCHER" "GtkStackSwitcher*")
(CCHK-3.10 "GTK_IS_STACK_SWITCHER" "GtkStackSwitcher*")
(CCAST-3.10 "GTK_STACK" "GtkStack*")
(CCHK-3.10 "GTK_IS_STACK" "GtkStack*")
(CCAST-3.10 "GTK_REVEALER" "GtkRevealer*")
(CCHK-3.10 "GTK_IS_REVEALER" "GtkRevealer*")
(CCAST-3.10 "GTK_HEADER_BAR" "GtkHeaderBar*")
(CCHK-3.10 "GTK_IS_HEADER_BAR" "GtkHeaderBar*")



;;; 3.9.2


;new files: [gtkactionmuxer|observable|observer] -- not apparently tying these in (see recent action), [gtkmenutrackeritem]

;;; 3.9.4: gtklistbox (slist replacement?) and gtksearchbar

(CCAST-3.10 "GTK_LIST_BOX" "GtkListBox*")
(CCHK-3.10 "GTK_IS_LIST_BOX" "GtkListBox*")

(CCAST-3.10 "GTK_LIST_BOX_ROW" "GtkListBoxRow*")
(CCHK-3.10 "GTK_IS_LIST_BOX_ROW" "GtkListBoxRow*")

(CCAST-3.10 "GTK_SEARCH_BAR" "GtkSearchBar*")
(CCHK-3.10 "GTK_IS_SEARCH_BAR" "GtkSearchBar*")

;typedef gboolean (*GtkListBoxFilterFunc) (GtkListBoxRow *row, gpointer user_data);
;typedef gint (*GtkListBoxSortFunc) (GtkListBoxRow *row1, GtkListBoxRow *row2, gpointer user_data);
;typedef void (*GtkListBoxUpdateHeaderFunc) (GtkListBoxRow *row, GtkListBoxRow *before, gpointer user_data);

(CFNC-3.10 "GtkWidget* gtk_list_box_row_new void")
(CFNC-3.10 "GtkWidget* gtk_list_box_row_get_header GtkListBoxRow* row")
(CFNC-3.10 "void gtk_list_box_row_set_header GtkListBoxRow* row GtkWidget* header")
(CFNC-3.10 "void gtk_list_box_row_changed GtkListBoxRow* row")
(CFNC-3.10 "GtkListBoxRow* gtk_list_box_get_selected_row GtkListBox* list_box")
(CFNC-3.10 "GtkListBoxRow* gtk_list_box_get_row_at_index GtkListBox* list_box gint index_")
(CFNC-3.10 "GtkListBoxRow* gtk_list_box_get_row_at_y GtkListBox* list_box gint y")
(CFNC-3.10 "void gtk_list_box_select_row GtkListBox* list_box GtkListBoxRow* row")
(CFNC-3.10 "void gtk_list_box_set_placeholder GtkListBox* list_box GtkWidget* placeholder")
(CFNC-3.10 "void gtk_list_box_set_adjustment GtkListBox* list_box GtkAdjustment* adjustment")
(CFNC-3.10 "GtkAdjustment* gtk_list_box_get_adjustment GtkListBox* list_box")
(CFNC-3.10 "void gtk_list_box_set_selection_mode GtkListBox* list_box GtkSelectionMode mode")
(CFNC-3.10 "GtkSelectionMode gtk_list_box_get_selection_mode GtkListBox* list_box")
;(CFNC-3.10 "void gtk_list_box_set_filter_func GtkListBox* list_box GtkListBoxFilterFunc filter_func gpointer user_data GDestroyNotify destroy")
;(CFNC-3.10 "void gtk_list_box_set_header_func GtkListBox* list_box GtkListBoxUpdateHeaderFunc update_header gpointer user_data GDestroyNotify destroy")
(CFNC-3.10 "void gtk_list_box_invalidate_filter GtkListBox* list_box")
(CFNC-3.10 "void gtk_list_box_invalidate_sort GtkListBox* list_box")
(CFNC-3.10 "void gtk_list_box_invalidate_headers GtkListBox* list_box")
;(CFNC-3.10 "void gtk_list_box_set_sort_func GtkListBox* list_box GtkListBoxSortFunc sort_func gpointer user_data GDestroyNotify destroy")
(CFNC-3.10 "void gtk_list_box_set_activate_on_single_click GtkListBox* list_box gboolean single")
(CFNC-3.10 "gboolean gtk_list_box_get_activate_on_single_click GtkListBox* list_box")
(CFNC-3.10 "void gtk_list_box_drag_unhighlight_row GtkListBox* list_box")
(CFNC-3.10 "void gtk_list_box_drag_highlight_row GtkListBox* list_box GtkListBoxRow* row")
(CFNC-3.10 "GtkWidget* gtk_list_box_new void")
(CFNC-3.10 "GtkWidget* gtk_search_bar_new void")
;;; 3.96.0 (CFNC-3.10 "void gtk_search_bar_connect_entry GtkSearchBar* bar GtkEntry* entry")
(CFNC-3.10 "gboolean gtk_search_bar_get_search_mode GtkSearchBar* bar")
(CFNC-3.10 "void gtk_search_bar_set_search_mode GtkSearchBar* bar gboolean search_mode")
;;; 3.93.0 (CFNC-3.10 "gboolean gtk_search_bar_get_show_close_button GtkSearchBar* bar")
;;; 3.93.0 (CFNC-3.10 "void gtk_search_bar_set_show_close_button GtkSearchBar* bar gboolean visible")
;;; 3.96.0 (CFNC-3.10 "gboolean gtk_search_bar_handle_event GtkSearchBar* bar GdkEvent* event")


;;; 3.9.6
(CFNC-3.10 "gchar* gtk_file_chooser_get_current_name GtkFileChooser* chooser")


;  Wholly deprecated as part of this effort:
;  GtkIconFactory, GtkIconSet, GtkIconSource, GtkImageMenuItem,
;  GtkAction, GtkUIManager
;
; A number of settings have been deprecated and are ignored now:
; gtk-button-images,  gtk-show-unicode-menu,  gtk-show-input-method-menu,  gtk-enable-mnemonics,  gtk-auto-mnemonics,
;  gtk-color-palette,  gtk-can-change-accels,  cursor blink settings,  gtk-fallback-icon-theme,  gtk-scrolled-window-placement,
;  menu popup delay settings,  gtk-menu-bar-accel,  keynav tweaks,  gtk-touchscreen-mode,  gtk-icon-sizes,  im style tweaks,
;  gtk-file-chooser-backend,  gtk-enable-tooltips,  gtk-visible-focus,  tooltip timeout tweaks,  toolbar style tweaks

;;; 3.9.8:
;;; 3.93.0 (CFNC-3.10 "void gdk_device_get_position_double GdkDevice* device GdkScreen** [screen] gdouble* [x] gdouble* [y]")
;;; 3.22.2 (CFNC-3.10 "gint gdk_screen_get_monitor_scale_factor GdkScreen* screen gint monitor_num")
(CFNC-3.10 "GtkIconInfo* gtk_icon_theme_lookup_icon_for_scale GtkIconTheme* icon_theme gchar* icon_name gint size gint scale GtkIconLookupFlags flags" 'const)
;(CFNC-3.10 "GtkIconInfo* gtk_icon_theme_choose_icon_for_scale GtkIconTheme* icon_theme gchar* icon_names[] gint size gint scale GtkIconLookupFlags flags" 'const)
(CFNC-3.10 "GdkPixbuf* gtk_icon_theme_load_icon_for_scale GtkIconTheme* icon_theme gchar* icon_name gint size gint scale GtkIconLookupFlags flags GError** [error]" 'const)
(CFNC-3.10 "GtkIconInfo* gtk_icon_theme_lookup_by_gicon_for_scale GtkIconTheme* icon_theme GIcon* icon gint size gint scale GtkIconLookupFlags flags")
(CFNC-3.10 "gint gtk_icon_info_get_base_scale GtkIconInfo* icon_info")
;;; 3.96.0 (CFNC-3.10 "GtkWidget* gtk_image_new_from_surface cairo_surface_t* surface")
;;; 3.96.0 (CFNC-3.10 "void gtk_image_set_from_surface GtkImage* image cairo_surface_t* surface")
(CFNC-3.10 "gint gtk_list_box_row_get_index GtkListBoxRow* row")
(CFNC-3.10 "gint gtk_widget_get_scale_factor GtkWidget* widget")
(CFNC-3.10 "void gtk_window_close GtkWindow* window")

;;; 3.9.10:
(CFNC-3.10 "void gtk_info_bar_set_show_close_button GtkInfoBar* info_bar gboolean setting")
(CFNC-3.10 "gboolean gtk_info_bar_get_show_close_button GtkInfoBar* info_bar")
(CFNC-3.10 "void gtk_tree_model_rows_reordered_with_length GtkTreeModel* tree_model GtkTreePath* path GtkTreeIter* iter gint* new_order gint length")


;;; 3.9.12:

;;; 3.93.0 (CFNC-3.10 "GdkCursor* gdk_cursor_new_from_surface GdkDisplay* display cairo_surface_t* surface gdouble x gdouble y")
;;; 3.93.0 (CFNC-3.10 "cairo_surface_t* gdk_cursor_get_surface GdkCursor* cursor gdouble* [x_hot] gdouble* [y_hot]")
(CFNC-3.10 "GdkEventType gdk_event_get_event_type GdkEvent* event" 'const)
;;; (CFNC-3.10 "GtkWidget* gtk_button_new_from_icon_name gchar* icon_name GtkIconSize size" 'const)
(CFNC-3.10 "void gtk_entry_set_tabs GtkEntry* entry PangoTabArray* tabs")
(CFNC-3.10 "PangoTabArray* gtk_entry_get_tabs GtkEntry* entry")
;;; 3.93.0 (CFNC-3.10 "gboolean gtk_header_bar_get_show_close_button GtkHeaderBar* bar")
;;; 3.93.0 (CFNC-3.10 "void gtk_header_bar_set_show_close_button GtkHeaderBar* bar gboolean setting")
(CFNC-3.10 "void gtk_list_box_prepend GtkListBox* list_box GtkWidget* child")
(CFNC-3.10 "void gtk_list_box_insert GtkListBox* list_box GtkWidget* child gint position")

;;; 3.9.14:

(CFNC-3.10 "void gtk_label_set_lines GtkLabel* label gint lines")
(CFNC-3.10 "gint gtk_label_get_lines GtkLabel* label")


;;; 3.9.16:



;;; 3.10.0|1|2 -- nothing new

;;; 3.11.0 flowbox.h
(CINT-3.12 "GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT_RIGHT" "GtkStackTransitionType")
(CINT-3.12 "GTK_STACK_TRANSITION_TYPE_SLIDE_UP_DOWN" "GtkStackTransitionType")
(CINT-3.12 "GTK_STACK_TRANSITION_TYPE_OVER_UP" "GtkStackTransitionType")
(CINT-3.12 "GTK_STACK_TRANSITION_TYPE_OVER_DOWN" "GtkStackTransitionType")
(CINT-3.12 "GTK_STACK_TRANSITION_TYPE_OVER_LEFT" "GtkStackTransitionType")
(CINT-3.12 "GTK_STACK_TRANSITION_TYPE_OVER_RIGHT" "GtkStackTransitionType")
(CINT-3.12 "GTK_STACK_TRANSITION_TYPE_UNDER_UP" "GtkStackTransitionType")
(CINT-3.12 "GTK_STACK_TRANSITION_TYPE_UNDER_DOWN" "GtkStackTransitionType")
(CINT-3.12 "GTK_STACK_TRANSITION_TYPE_UNDER_LEFT" "GtkStackTransitionType")
(CINT-3.12 "GTK_STACK_TRANSITION_TYPE_UNDER_RIGHT" "GtkStackTransitionType")
(CINT-3.12 "GTK_STACK_TRANSITION_TYPE_OVER_UP_DOWN" "GtkStackTransitionType")

(CCAST-3.12 "GTK_FLOW_BOX" "GtkFlowBox*")
(CCHK-3.12 "GTK_IS_FLOW_BOX" "GtkFlowBox*")
(CCAST-3.12 "GTK_FLOW_BOX_CHILD" "GtkFlowBoxChild*")
(CCHK-3.12 "GTK_IS_FLOW_BOX_CHILD" "GtkFlowBoxChild*")

(CFNC-3.12 "GtkWidget* gtk_flow_box_child_new void")
(CFNC-3.12 "gint gtk_flow_box_child_get_index GtkFlowBoxChild* child")
(CFNC-3.12 "gboolean gtk_flow_box_child_is_selected GtkFlowBoxChild* child")
(CFNC-3.12 "void gtk_flow_box_child_changed GtkFlowBoxChild* child")
(CFNC-3.12 "GtkWidget* gtk_flow_box_new void")
(CFNC-3.12 "void gtk_flow_box_set_homogeneous GtkFlowBox* box gboolean homogeneous")
(CFNC-3.12 "gboolean gtk_flow_box_get_homogeneous GtkFlowBox* box")
(CFNC-3.12 "void gtk_flow_box_set_row_spacing GtkFlowBox* box guint spacing")
(CFNC-3.12 "guint gtk_flow_box_get_row_spacing GtkFlowBox* box")
(CFNC-3.12 "void gtk_flow_box_set_column_spacing GtkFlowBox* box guint spacing")
(CFNC-3.12 "guint gtk_flow_box_get_column_spacing GtkFlowBox* box")
(CFNC-3.12 "void gtk_flow_box_set_min_children_per_line GtkFlowBox* box guint n_children")
(CFNC-3.12 "guint gtk_flow_box_get_min_children_per_line GtkFlowBox* box")
(CFNC-3.12 "void gtk_flow_box_set_max_children_per_line GtkFlowBox* box guint n_children")
(CFNC-3.12 "guint gtk_flow_box_get_max_children_per_line GtkFlowBox* box")
(CFNC-3.12 "void gtk_flow_box_set_activate_on_single_click GtkFlowBox* box gboolean single")
(CFNC-3.12 "gboolean gtk_flow_box_get_activate_on_single_click GtkFlowBox* box")
(CFNC-3.12 "void gtk_flow_box_insert GtkFlowBox* box GtkWidget* widget gint position")
(CFNC-3.12 "GtkFlowBoxChild* gtk_flow_box_get_child_at_index GtkFlowBox* box gint idx")
(CFNC-3.12 "GList* gtk_flow_box_get_selected_children GtkFlowBox* box")
(CFNC-3.12 "void gtk_flow_box_select_child GtkFlowBox* box GtkFlowBoxChild* child")
(CFNC-3.12 "void gtk_flow_box_unselect_child GtkFlowBox* box GtkFlowBoxChild* child")
(CFNC-3.12 "void gtk_flow_box_select_all GtkFlowBox* box")
(CFNC-3.12 "void gtk_flow_box_unselect_all GtkFlowBox* box")
(CFNC-3.12 "void gtk_flow_box_set_selection_mode GtkFlowBox* box GtkSelectionMode mode")
(CFNC-3.12 "GtkSelectionMode gtk_flow_box_get_selection_mode GtkFlowBox* box")
(CFNC-3.12 "void gtk_flow_box_set_hadjustment GtkFlowBox* box GtkAdjustment* adjustment")
(CFNC-3.12 "void gtk_flow_box_set_vadjustment GtkFlowBox* box GtkAdjustment* adjustment")
(CFNC-3.12 "void gtk_flow_box_invalidate_filter GtkFlowBox* box")
(CFNC-3.12 "void gtk_flow_box_invalidate_sort GtkFlowBox* box")

;void gtk_flow_box_selected_foreach GtkFlowBox* box GtkFlowBoxForeachFunc func lambda_data @func_info)
;void gtk_flow_box_set_sort_func GtkFlowBox* box GtkFlowBoxSortFunc sort_func gpointer user_data GDestroyNotify destroy)
;void gtk_flow_box_set_filter_func GtkFlowBox* box GtkFlowBoxFilterFunc filter_func gpointer user_data GDestroyNotify destroy)


;;; 3.11.2 -- these are internal to gdk
;;; (CINT-3.12 "GDK_EVENT_FLUSHED" "GdkEventFlags")
;;; (CINT-3.12 "GTK_STATE_FLAG_LINK" "GtkStateFlags")
;;; (CINT-3.12 "GTK_STATE_FLAG_VISITED" "GtkStateFlags")

;;; (CFNC-3.12 "gboolean gtk_header_bar_get_show_fallback_app_menu GtkHeaderBar* bar")
;;; (CFNC-3.12 "void gtk_header_bar_set_show_fallback_app_menu GtkHeaderBar* bar gboolean setting")
;;; 3.94.0 (CFNC-3.12 "void gtk_places_sidebar_set_local_only GtkPlacesSidebar* sidebar gboolean local_only")
;;; 3.94.0 (CFNC-3.12 "gboolean gtk_places_sidebar_get_local_only GtkPlacesSidebar* sidebar")
(CFNC-3.12 "gboolean gtk_stack_get_transition_running GtkStack* stack")
(CFNC-3.12 "gint gtk_widget_get_margin_start GtkWidget* widget")
(CFNC-3.12 "void gtk_widget_set_margin_start GtkWidget* widget gint margin")
(CFNC-3.12 "gint gtk_widget_get_margin_end GtkWidget* widget")
(CFNC-3.12 "void gtk_widget_set_margin_end GtkWidget* widget gint margin")

;;; 3.11.4

(CCAST-3.12 "GTK_ACTION_BAR" "GtkActionBar*")
(CCHK-3.12 "GTK_IS_ACTION_BAR" "GtkActionBar*")
(CFNC-3.12 "void gtk_accel_label_get_accel GtkAccelLabel* accel_label guint* [accelerator_key] GdkModifierType* [accelerator_mods]")
(CFNC-3.12 "GtkWidget* gtk_action_bar_new void")
(CFNC-3.12 "GtkWidget* gtk_action_bar_get_center_widget GtkActionBar* bar")
(CFNC-3.12 "void gtk_action_bar_set_center_widget GtkActionBar* bar GtkWidget* center_widget")
(CFNC-3.12 "void gtk_action_bar_pack_start GtkActionBar* bar GtkWidget* child")
(CFNC-3.12 "void gtk_action_bar_pack_end GtkActionBar* bar GtkWidget* child")
(CFNC-3.12 "void gtk_header_bar_set_has_subtitle GtkHeaderBar* bar gboolean setting")
(CFNC-3.12 "gboolean gtk_header_bar_get_has_subtitle GtkHeaderBar* bar")
(CFNC-3.12 "void gtk_header_bar_set_decoration_layout GtkHeaderBar* bar gchar* layout" 'const)
(CFNC-3.12 "gchar* gtk_header_bar_get_decoration_layout GtkHeaderBar* bar" 'const)
(CFNC-3.12 "gboolean gtk_icon_info_is_symbolic GtkIconInfo* icon_info")
(CFNC-3.12 "GtkTextDirection gtk_get_locale_direction void")
;(CFNC-3.12 "GtkTreePath* gtk_tree_path_new_from_indicesv gint* indices gsize length")
(CFNC-3.12 "gboolean gtk_window_is_maximized GtkWindow* window")


;;; 3.11.5

(CCAST-3.12 "GTK_POPOVER" "GtkPopover*")
(CCHK-3.12 "GTK_IS_POPOVER" "GtkPopover*")
;;; ?? (CFNC-3.12 "GdkVisual* gdk_screen_get_preferred_visual GdkScreen* screen")
(CFNC-3.12 "GtkWidget* gtk_dialog_get_header_bar GtkDialog* dialog")
(CFNC-3.12 "GtkWidget* gtk_popover_new GtkWidget* relative_to")
(CFNC-3.12 "void gtk_popover_set_relative_to GtkPopover* popover GtkWidget* relative_to")
(CFNC-3.12 "GtkWidget* gtk_popover_get_relative_to GtkPopover* popover")
;(CFNC-3.12 "void gtk_popover_set_pointing_to GtkPopover* popover GdkRectangle *rect")
;(CFNC-3.12 "gboolean gtk_popover_get_pointing_to GtkPopover* popover GdkRectangle* [rect]")
(CFNC-3.12 "void gtk_popover_set_position GtkPopover* popover GtkPositionType position")
(CFNC-3.12 "GtkPositionType gtk_popover_get_position GtkPopover* popover")
(CFNC-3.12 "void gtk_popover_set_modal GtkPopover* popover gboolean modal")
(CFNC-3.12 "gboolean gtk_popover_get_modal GtkPopover* popover")


;;; 3.11.6
;;; gtkmodelbutton.h

;;; 3.91.0 (CFNC-3.12 "void gtk_box_set_center_widget GtkBox* box GtkWidget* widget")
;;; 3.91.0 (CFNC-3.12 "GtkWidget* gtk_box_get_center_widget GtkBox* box")
;;; 3.96.0 (CFNC-3.12 "void gtk_entry_set_max_width_chars GtkEntry* entry gint n_chars")
;;; 3.96.0 (CFNC-3.12 "gint gtk_entry_get_max_width_chars GtkEntry* entry")


;;; 3.11.9

;;; 3.12.0 -- no changes

;;; 3.12.1 -- no changes? 

;;; 3.13.1
(CFNC-3.14 "gboolean gtk_list_box_row_is_selected GtkListBoxRow* row")
;(CFNC-3.14 "void gtk_list_box_selected_foreach (GtkListBox* box GtkListBoxForeachFunc func lambda_data @func_info")
;(CFNC-3.14 "GList *gtk_list_box_get_selected_rows GtkListBox* box")
(CFNC-3.14 "void gtk_list_box_unselect_row GtkListBox* box GtkListBoxRow* row")
(CFNC-3.14 "void gtk_list_box_select_all GtkListBox* box")
(CFNC-3.14 "void gtk_list_box_unselect_all GtkListBox* box")
;;; 3.94.0 (CFNC-3.14 "gboolean gtk_places_sidebar_get_show_enter_location GtkPlacesSidebar* sidebar")
;;; 3.94.0 (CFNC-3.14 "void gtk_places_sidebar_set_show_enter_location GtkPlacesSidebar* sidebar gboolean show_enter_location")
(CFNC-3.14 "void gtk_switch_set_state GtkSwitch* sw gboolean state")
(CFNC-3.14 "gboolean gtk_switch_get_state GtkSwitch* sw")

;;; is this exported?
; GTK_MENU_SECTION_BOX(inst)
; GTK_IS_MENU_SECTION_BOX(inst)
; void gtk_menu_section_box_new_toplevel GtkStack* stack GMenuModel* model const gchar* action_namespace)


;;; 3.13.2:

;;; 3.91.2 (CFNC-3.14 "void gtk_widget_set_clip GtkWidget* widget GtkAllocation* clip" 'const)
;;; 3.96.0 (CFNC-3.14 "void gtk_widget_get_clip GtkWidget* widget GtkAllocation* clip")

(CCAST-3.14 "GTK_GESTURE" "GtkGesture*")
(CCHK-3.14 "GTK_IS_GESTURE" "GtkGesture*")
(CCAST-3.14 "GTK_GESTURE_DRAG" "GtkGestureDrag*")
(CCHK-3.14 "GTK_IS_GESTURE_DRAG" "GtkGestureDrag*")
(CCAST-3.14 "GTK_GESTURE_LONG_PRESS" "GtkGestureLongPress*")
(CCHK-3.14 "GTK_IS_GESTURE_LONG_PRESS" "GtkGestureLongPress*")
(CCAST-3.14 "GTK_GESTURE_ZOOM" "GtkGestureZoom*")
(CCHK-3.14 "GTK_IS_GESTURE_ZOOM" "GtkGestureZoom*")
(CCAST-3.14 "GTK_GESTURE_SWIPE" "GtkGestureSwipe*")
(CCHK-3.14 "GTK_IS_GESTURE_SWIPE" "GtkGestureSwipe*")
(CCAST-3.14 "GTK_GESTURE_SINGLE" "GtkGestureSingle*")
(CCHK-3.14 "GTK_IS_GESTURE_SINGLE" "GtkGestureSingle*")
(CCAST-3.14 "GTK_GESTURE_PAN" "GtkGesturePan*")
(CCHK-3.14 "GTK_IS_GESTURE_PAN" "GtkGesturePan*")
(CCAST-3.14 "GTK_GESTURE_MULTI_PRESS" "GtkGestureMultiPress*")
(CCHK-3.14 "GTK_IS_GESTURE_MULTI_PRESS" "GtkGestureMultiPress*")
(CCAST-3.14 "GTK_GESTURE_ROTATE" "GtkGestureRotate*")
(CCHK-3.14 "GTK_IS_GESTURE_ROTATE" "GtkGestureRotate*")

(CFNC-3.14 "GdkDevice* gtk_gesture_get_device GtkGesture* gesture")
(CFNC-3.14 "gboolean gtk_gesture_set_state GtkGesture* gesture GtkEventSequenceState state")
(CFNC-3.14 "GtkEventSequenceState gtk_gesture_get_sequence_state GtkGesture* gesture GdkEventSequence* sequence")
(CFNC-3.14 "gboolean gtk_gesture_set_sequence_state GtkGesture* gesture GdkEventSequence* sequence GtkEventSequenceState state")
(CFNC-3.14 "GList* gtk_gesture_get_sequences GtkGesture* gesture")
(CFNC-3.14 "GdkEventSequence* gtk_gesture_get_last_updated_sequence GtkGesture* gesture")
(CFNC-3.14 "gboolean gtk_gesture_handles_sequence GtkGesture* gesture GdkEventSequence* sequence")
(CFNC-3.14 "GdkEvent* gtk_gesture_get_last_event GtkGesture* gesture GdkEventSequence* sequence" 'const-return)
(CFNC-3.14 "gboolean gtk_gesture_get_point GtkGesture* gesture GdkEventSequence* sequence gdouble* [x] gdouble* [y]")
(CFNC-3.14 "gboolean gtk_gesture_get_bounding_box GtkGesture* gesture GdkRectangle* rect")
(CFNC-3.14 "gboolean gtk_gesture_get_bounding_box_center GtkGesture* gesture gdouble* [x] gdouble* [y]")
(CFNC-3.14 "gboolean gtk_gesture_is_active GtkGesture* gesture")
(CFNC-3.14 "gboolean gtk_gesture_is_recognized GtkGesture* gesture")
(CFNC-3.14 "void gtk_gesture_group GtkGesture* group_gesture GtkGesture* gesture")
(CFNC-3.14 "void gtk_gesture_ungroup GtkGesture* gesture")
(CFNC-3.14 "GList* gtk_gesture_get_group GtkGesture* gesture")
(CFNC-3.14 "gboolean gtk_gesture_is_grouped_with GtkGesture* gesture GtkGesture* other")
;;; 3.96.0 (CFNC-3.14 "GtkGesture* gtk_gesture_drag_new GtkWidget* widget")
(CFNC-3.14 "gboolean gtk_gesture_drag_get_start_point GtkGestureDrag* gesture gdouble* [x] gdouble* [y]")
(CFNC-3.14 "gboolean gtk_gesture_drag_get_offset GtkGestureDrag* gesture gdouble* [x] gdouble* [y]")
;;; 3.96.0 (CFNC-3.14 "GtkGesture* gtk_gesture_long_press_new GtkWidget* widget")
;;; 3.96.0 (CFNC-3.14 "GtkGesture* gtk_gesture_pan_new GtkWidget* widget GtkOrientation orientation")
(CFNC-3.14 "GtkOrientation gtk_gesture_pan_get_orientation GtkGesturePan* gesture")
(CFNC-3.14 "void gtk_gesture_pan_set_orientation GtkGesturePan* gesture GtkOrientation orientation")
;;; 3.96.0 (CFNC-3.14 "GtkGesture* gtk_gesture_multi_press_new GtkWidget* widget")
(CFNC-3.14 "void gtk_gesture_multi_press_set_area GtkGestureMultiPress* gesture GdkRectangle* rect")
(CFNC-3.14 "gboolean gtk_gesture_multi_press_get_area GtkGestureMultiPress* gesture GdkRectangle* rect")
;;; 3.96.0 (CFNC-3.14 "GtkGesture* gtk_gesture_rotate_new GtkWidget* widget")
(CFNC-3.14 "gdouble gtk_gesture_rotate_get_angle_delta GtkGestureRotate* gesture")
(CFNC-3.14 "gboolean gtk_gesture_single_get_touch_only GtkGestureSingle* gesture")
(CFNC-3.14 "void gtk_gesture_single_set_touch_only GtkGestureSingle* gesture gboolean touch_only")
(CFNC-3.14 "gboolean gtk_gesture_single_get_exclusive GtkGestureSingle* gesture")
(CFNC-3.14 "void gtk_gesture_single_set_exclusive GtkGestureSingle* gesture gboolean exclusive")
(CFNC-3.14 "guint gtk_gesture_single_get_button GtkGestureSingle* gesture")
(CFNC-3.14 "void gtk_gesture_single_set_button GtkGestureSingle* gesture guint button")
(CFNC-3.14 "guint gtk_gesture_single_get_current_button GtkGestureSingle* gesture")
(CFNC-3.14 "GdkEventSequence* gtk_gesture_single_get_current_sequence GtkGestureSingle* gesture")
;;; 3.96.0 (CFNC-3.14 "GtkGesture* gtk_gesture_swipe_new GtkWidget* widget")
(CFNC-3.14 "gboolean gtk_gesture_swipe_get_velocity GtkGestureSwipe* gesture gdouble* [velocity_x] gdouble* [velocity_y]")
;;; 3.96.0 (CFNC-3.14 "GtkGesture* gtk_gesture_zoom_new GtkWidget* widget")
(CFNC-3.14 "gdouble gtk_gesture_zoom_get_scale_delta GtkGestureZoom* gesture")

;;; 3.94.0 (CCAST-3.14 "GTK_EVENT_CONTROLLER" "GtkEventController*")
;;; 3.94.0 (CCHK-3.14 "GTK_IS_EVENT_CONTROLLER" "GtkEventController*")
;;; 3.94.0 (CFNC-3.14 "GtkWidget* gtk_event_controller_get_widget GtkEventController* controller")
;;; 3.94.0 (CFNC-3.14 "gboolean gtk_event_controller_handle_event GtkEventController* controller GdkEvent* event")
;;; 3.94.0 (CFNC-3.14 "void gtk_event_controller_reset GtkEventController* controller")
;;; 3.94.0 (CFNC-3.14 "GtkPropagationPhase gtk_event_controller_get_propagation_phase GtkEventController* controller")
;;; 3.94.0 (CFNC-3.14 "void gtk_event_controller_set_propagation_phase GtkEventController* controller GtkPropagationPhase phase")

(CINT-3.14 "GTK_PHASE_NONE" "GtkPropagationPhase")
(CINT-3.14 "GTK_PHASE_CAPTURE" "GtkPropagationPhase")
(CINT-3.14 "GTK_PHASE_BUBBLE" "GtkPropagationPhase")
(CINT-3.14 "GTK_PHASE_TARGET" "GtkPropagationPhase")

;;; 3.13.3: nothing new

;;; 3.13.4:
(CFNC-3.14 "void gtk_icon_theme_add_resource_path GtkIconTheme* icon_theme gchar* path" 'const)
(CFNC-3.14 "void gtk_list_box_row_set_activatable GtkListBoxRow* row gboolean activatable")
(CFNC-3.14 "gboolean gtk_list_box_row_get_activatable GtkListBoxRow* row")

;;; 3.13.5:
(CFNC-3.14 "void gtk_list_box_row_set_selectable GtkListBoxRow* row gboolean selectable")
(CFNC-3.14 "gboolean gtk_list_box_row_get_selectable GtkListBoxRow* row")
(CFNC-3.14 "GtkStateFlags gtk_widget_path_iter_get_state GtkWidgetPath* path gint pos" 'const)
(CFNC-3.14 "void gtk_widget_path_iter_set_state GtkWidgetPath* path gint pos GtkStateFlags state")

;;; 3.13.6:
;;; 3.96.0 (CINT-3.14 "GTK_TEXT_VIEW_LAYER_BELOW" "GtkTextViewLayer")
;;; 3.96.0 (CINT-3.14 "GTK_TEXT_VIEW_LAYER_ABOVE" "GtkTextViewLayer")

;;; 3.13.7: nothing new (GtkStatusIcon deprecated)
;;; 3.13.8: nothing new
;;; 3.13.9: nothing new, but GDK_KEY changes
;;; 3.14.0: nothing new
;;; 3.14.1: nothing new
;;; 3.14.2: nothing new
;;; 3.14.3: nothing new
;;; 3.14.4: nothing new

;;; 3.15.0:

(CINT-3.16 "GTK_POLICY_EXTERNAL" "GtkPolicyType")
;(CINT-3.16 "GDK_GL_PROFILE_DEFAULT" "GdkGLProfile")
;(CINT-3.16 "GDK_GL_PROFILE_LEGACY" "GdkGLProfile")
;(CINT-3.16 "GDK_GL_PROFILE_3_2_CORE" "GdkGLProfile")
;(CINT-3.16 "GDK_GL_ERROR_NOT_AVAILABLE" "GdkGLError")
;(CINT-3.16 "GDK_GL_ERROR_UNSUPPORTED_FORMAT" "GdkGLError")
;(CINT-3.16 "GDK_GL_ERROR_UNSUPPORTED_PROFIL" "GdkGLError")

(CCAST-3.16 "GTK_GL_AREA(object)" "GtkGLArea*")
(CCAST-3.16 "GDK_GL_CONTEXT(object)" "GdkGLContext*")

(CCHK-3.16 "GTK_IS_GL_AREA(object)" "GtkGLArea*")
(CCHK-3.16 "GDK_IS_GL_CONTEXT(object)" "GdkGLContext*")

;(CFNC-3.16 "void gtk_css_provider_load_from_resource GtkCssProvider* css_provider gchar* resource_path" 'const)
(CFNC-3.16 "void gtk_label_set_xalign GtkLabel* label gfloat xalign")
(CFNC-3.16 "gfloat gtk_label_get_xalign GtkLabel* label")
(CFNC-3.16 "void gtk_label_set_yalign GtkLabel* label gfloat xalign")
(CFNC-3.16 "gfloat gtk_label_get_yalign GtkLabel* label")
(CFNC-3.16 "void gtk_paned_set_wide_handle GtkPaned* paned gboolean wide")
(CFNC-3.16 "gboolean gtk_paned_get_wide_handle GtkPaned* paned")
(CFNC-3.16 "void gtk_scrolled_window_set_overlay_scrolling GtkScrolledWindow* scrolled_window gboolean overlay_scrolling")
(CFNC-3.16 "gboolean gtk_scrolled_window_get_overlay_scrolling GtkScrolledWindow* scrolled_window")
(CFNC-3.16 "void gtk_text_view_set_monospace GtkTextView* text_view gboolean monospace")
(CFNC-3.16 "gboolean gtk_text_view_get_monospace GtkTextView* text_view")
(CFNC-3.16 "GtkWidget* gtk_window_get_titlebar GtkWindow* window")
(CFNC-3.16 "GtkWidget* gtk_gl_area_new void")
;;; 3.96.0 (CFNC-3.16 "gboolean gtk_gl_area_get_has_alpha GtkGLArea* area")
;;; 3.96.0 (CFNC-3.16 "void gtk_gl_area_set_has_alpha GtkGLArea* area gboolean has_alpha")
(CFNC-3.16 "gboolean gtk_gl_area_get_has_depth_buffer GtkGLArea* area")
(CFNC-3.16 "void gtk_gl_area_set_has_depth_buffer GtkGLArea* area gboolean has_depth_buffer")
(CFNC-3.16 "GdkGLContext* gtk_gl_area_get_context GtkGLArea* area")
(CFNC-3.16 "void gtk_gl_area_make_current GtkGLArea* area")
(CFNC-3.16 "void gtk_render_check GtkStyleContext* context cairo_t* cr gdouble x gdouble y gdouble width gdouble height")
(CFNC-3.16 "void gtk_render_option GtkStyleContext* context cairo_t* cr gdouble x gdouble y gdouble width gdouble height")
(CFNC-3.16 "void gtk_render_arrow GtkStyleContext* context cairo_t* cr gdouble angle gdouble x gdouble y gdouble size")
(CFNC-3.16 "void gtk_render_background GtkStyleContext* context cairo_t* cr gdouble x gdouble y gdouble width gdouble height")
(CFNC-3.16 "void gtk_render_frame GtkStyleContext* context cairo_t* cr gdouble x gdouble y gdouble width gdouble height")
(CFNC-3.16 "void gtk_render_expander GtkStyleContext* context cairo_t* cr gdouble x gdouble y gdouble width gdouble height")
(CFNC-3.16 "void gtk_render_focus GtkStyleContext* context cairo_t* cr gdouble x gdouble y gdouble width gdouble height")
(CFNC-3.16 "void gtk_render_layout GtkStyleContext* context cairo_t* cr gdouble x gdouble y PangoLayout* layout")
(CFNC-3.16 "void gtk_render_line GtkStyleContext* context cairo_t* cr gdouble x0 gdouble y0 gdouble x1 gdouble y1")
;;; 3.96.0 (CFNC-3.16 "void gtk_render_slider GtkStyleContext* context cairo_t* cr gdouble x gdouble y gdouble width gdouble height GtkOrientation orientation")
;;; (CFNC-3.16 "void gtk_render_frame_gap GtkStyleContext* context cairo_t* cr gdouble x gdouble y gdouble width gdouble height GtkPositionType gap_side gdouble xy0_gap gdouble xy1_gap")
;;; 3.92.1 (CFNC-3.16 "void gtk_render_extension GtkStyleContext* context cairo_t* cr gdouble x gdouble y gdouble width gdouble height GtkPositionType gap_side")
(CFNC-3.16 "void gtk_render_handle GtkStyleContext* context cairo_t* cr gdouble x gdouble y gdouble width gdouble height")
(CFNC-3.16 "void gtk_render_activity GtkStyleContext* context cairo_t* cr gdouble x gdouble y gdouble width gdouble height")
;;; 3.93.0 (CFNC-3.16 "void gtk_render_icon GtkStyleContext* context cairo_t* cr GdkPixbuf* pixbuf gdouble x gdouble y")
;;; 3.94.0 (CFNC-3.16 "void gtk_render_icon_surface GtkStyleContext* context cairo_t* cr cairo_surface_t* surface gdouble x gdouble y")
;;; 3.15.2 (CFNC-3.16 "GdkVisual* gdk_gl_context_get_visual GdkGLContext* context")
(CFNC-3.16 "void gdk_gl_context_make_current GdkGLContext* context")
(CFNC-3.16 "GdkGLContext* gdk_gl_context_get_current void")
(CFNC-3.16 "void gdk_gl_context_clear_current void")


;;; 3.15.1:

(CFNC-3.16 "void gtk_stack_set_hhomogeneous GtkStack* stack gboolean hhomogeneous")
(CFNC-3.16 "gboolean gtk_stack_get_hhomogeneous GtkStack* stack")
(CFNC-3.16 "void gtk_stack_set_vhomogeneous GtkStack* stack gboolean vhomogeneous")
(CFNC-3.16 "gboolean gtk_stack_get_vhomogeneous GtkStack* stack")

;;; pango 1.36.8
(CINT-3.16 "PANGO_WEIGHT_SEMILIGHT" "PangoWeight")

#|
;;; cairo 1.14.0:
(CFNC-3.16 "void cairo_surface_set_device_scale cairo_surface_t* surface double x_scale double y_scale")
(CFNC-3.16 "void cairo_surface_get_device_scale cairo_surface_t* surface double* [x_scale] double* [y_scale]")
|#

;;; 3.15.2:

;(CINT-3.16 "GDK_GL_DISABLE" "GdkGLFlags")
;(CINT-3.16 "GDK_GL_ALWAYS" "GdkGLFlags")
;(CINT-3.16 "GDK_GL_SOFTWARE_DRAW_GL" "GdkGLFlags")
;(CINT-3.16 "GDK_GL_SOFTWARE_DRAW_SURFACE" "GdkGLFlags")
;(CINT-3.16 "GDK_GL_TEXTURE_RECTANGLE" "GdkGLFlags")

(CCAST-3.16 "GTK_POPOVER_MENU(object)" "GtkPopoverMenu*")
(CCHK-3.16 "GTK_IS_POPOVER_MENU(object)" "GtkPopoverMenu*")

(CFNC-3.16 "GdkDisplay* gdk_gl_context_get_display GdkGLContext* context")
;(CFNC-3.16 "GdkGLProfile gdk_gl_context_get_profile GdkGLContext* context")
;(CFNC-3.16 "GdkGLProfile gtk_gl_area_get_profile GtkGLArea* area")
;(CFNC-3.16 "void gtk_gl_area_set_profile GtkGLArea* area GdkGLProfile profile")
(CFNC-3.16 "gboolean gtk_gl_area_get_has_stencil_buffer GtkGLArea* area")
(CFNC-3.16 "void gtk_gl_area_set_has_stencil_buffer GtkGLArea* area gboolean has_stencil_buffer")
(CFNC-3.16 "gboolean gtk_gl_area_get_auto_render GtkGLArea* area")
(CFNC-3.16 "void gtk_gl_area_set_auto_render GtkGLArea* area gboolean auto_render")
(CFNC-3.16 "void gtk_gl_area_queue_render GtkGLArea* area")
(CFNC-3.16 "void gtk_gl_area_attach_buffers GtkGLArea* area")
;(CFNC-3.16 "void gtk_gl_area_set_error GtkGLArea* area GError *error" 'const)
(CFNC-3.16 "GError* gtk_gl_area_get_error GtkGLArea* area")
(CFNC-3.16 "GtkWidget* gtk_popover_menu_new void")
;;; 3.96.0 (CFNC-3.16 "void gtk_popover_menu_open_submenu GtkPopoverMenu* popover gchar* name" 'const)

;;; 3.15.3:

(CFNC-3.16 "void gtk_entry_grab_focus_without_selecting GtkEntry* entry")
(CFNC-3.16 "gboolean gtk_scrollable_get_border GtkScrollable* scrollable GtkBorder* border")
(CFNC-3.16 "void gtk_text_buffer_insert_markup GtkTextBuffer* buffer GtkTextIter* iter gchar* markup gint len" 'const)

;(CFNC-3.16 "GActionGroup* gtk_widget_get_action_group GtkWidget* widget gchar* prefix" 'const)
;(CNFC-3.16 "gchar** gtk_widget_list_action_prefixes GtkWidget* widget" 'const)

;;; 3.15.4:

(CFNC-3.16 "gchar* gdk_device_get_vendor_id GdkDevice* device" 'const-return)
(CFNC-3.16 "gchar* gdk_device_get_product_id GdkDevice* device" 'const-return)

(CINT-3.16 "GTK_TEXT_EXTEND_SELECTION_WORD" "GtkTextExtendSelection")
(CINT-3.16 "GTK_TEXT_EXTEND_SELECTION_LINE" "GtkTextExtendSelection")

;;; 3.15.5:

(CFNC-3.16 "GdkGLContext* gdk_gl_context_get_shared_context GdkGLContext* context")
(CFNC-3.16 "void gdk_gl_context_set_required_version GdkGLContext* context int major int minor")
(CFNC-3.16 "void gdk_gl_context_get_required_version GdkGLContext* context int* [major] int* [minor]")
(CFNC-3.16 "void gdk_gl_context_set_debug_enabled GdkGLContext* context gboolean enabled")
(CFNC-3.16 "gboolean gdk_gl_context_get_debug_enabled GdkGLContext* context")
(CFNC-3.16 "void gdk_gl_context_set_forward_compatible GdkGLContext* context gboolean compatible")
(CFNC-3.16 "gboolean gdk_gl_context_get_forward_compatible GdkGLContext* context")
(CFNC-3.16 "gboolean gdk_gl_context_realize GdkGLContext* context GError** [error]")

;;; 3.93.0 (CFNC-3.16 "GtkClipboard* gtk_clipboard_get_default GdkDisplay* display")
;;; 3.96.0 (CFNC-3.16 "gboolean gtk_search_entry_handle_event GtkSearchEntry* entry GdkEvent* event")

;;; 3.15.7:

(CFNC-3.16 "void gdk_gl_context_get_version GdkGLContext* context int* [major] int* [minor]")
(CFNC-3.16 "void gtk_gl_area_set_required_version GtkGLArea* area gint major gint minor")
(CFNC-3.16 "void gtk_gl_area_get_required_version GtkGLArea* area gint* [major] gint* [minor]")
;(CFNC-3.16 "void gtk_list_box_bind_model GtkListBox* box GListModel* model GtkListBoxCreateWidgetFunc create_widget_func gpointer user_data GDestroyNotify user_data_free_func")
(CFNC-3.16 "void gtk_notebook_detach_tab GtkNotebook* notebook GtkWidget* child")

(CCAST-3.16 "GTK_STACK_SIDEBAR(object)" "GtkStackSidebar*")
(CCHK-3.16 "GTK_IS_STACK_SIDEBAR(object)" "GtkStackSidebar*")
(CFNC-3.16 "GtkWidget* gtk_stack_sidebar_new void")
(CFNC-3.16 "void gtk_stack_sidebar_set_stack GtkStackSidebar* sidebar GtkStack* stack")
(CFNC-3.16 "GtkStack* gtk_stack_sidebar_get_stack GtkStackSidebar* sidebar")

;;; 3.15.8:

;;; 3.21.5 (CFNC-3.16 "void gtk_popover_set_transitions_enabled GtkPopover* popover gboolean transitions_enabled")
;;; 3.21.5 (CFNC-3.16 "gboolean gtk_popover_get_transitions_enabled GtkPopover* popover")

;;; 3.16.0
;;; 3.16.1
;;; 3.16.2:

;;; 3.17.1

(CFNC-3.18 "gboolean gdk_keymap_get_scroll_lock_state GdkKeymap* keymap")
(CFNC-3.18 "void gtk_radio_menu_item_join_group GtkRadioMenuItem* radio_menu_item GtkRadioMenuItem* group_source")

;;; 3.17.2:

(CFNC-3.18 "void gtk_font_chooser_set_font_map GtkFontChooser* fontchooser PangoFontMap* fontmap")
(CFNC-3.18 "PangoFontMap* gtk_font_chooser_get_font_map GtkFontChooser* fontchooser")
(CFNC-3.18 "void gtk_popover_set_default_widget GtkPopover* popover GtkWidget* widget")
(CFNC-3.18 "GtkWidget* gtk_popover_get_default_widget GtkPopover* popover")

;;; 3.17.4:

;;; 3.96.0 (CFNC-3.18 "void gtk_overlay_reorder_overlay GtkOverlay* overlay GtkWidget* child gint position")
;;; 3.96.0 (CFNC-3.18 "gboolean gtk_overlay_get_overlay_pass_through GtkOverlay* overlay GtkWidget* widget")
;;; 3.96.0 (CFNC-3.18 "void gtk_overlay_set_overlay_pass_through GtkOverlay* overlay GtkWidget* widget gboolean pass_through")
;;; 3.94.0 (CFNC-3.18 "gboolean gtk_places_sidebar_get_show_recent GtkPlacesSidebar* sidebar")
;;; 3.94.0 (CFNC-3.18 "void gtk_places_sidebar_set_show_recent GtkPlacesSidebar* sidebar gboolean show_recent")
;;; 3.94.0 (CFNC-3.18 "void gtk_places_sidebar_set_drop_targets_visible GtkPlacesSidebar* sidebar gboolean visible GdkDrag* context")

;;; 3.17.5:

;;; 3.94.0 (CFNC-3.18 "gboolean gtk_places_sidebar_get_show_trash GtkPlacesSidebar* sidebar")
;;; 3.94.0 (CFNC-3.18 "void gtk_places_sidebar_set_show_trash GtkPlacesSidebar* sidebar gboolean show_trash")
;;; 3.94.0 (CFNC-3.18 "void gtk_places_sidebar_set_show_other_locations GtkPlacesSidebar* sidebar gboolean show_other_locations")
;;; 3.94.0 (CFNC-3.18 "gboolean gtk_places_sidebar_get_show_other_locations GtkPlacesSidebar* sidebar")
(CFNC-3.18 "void gtk_stack_set_interpolate_size GtkStack* stack gboolean interpolate_size")
(CFNC-3.18 "gboolean gtk_stack_get_interpolate_size GtkStack* stack")
(CFNC-3.18 "void gtk_widget_set_font_options GtkWidget* widget cairo_font_options_t* options" 'const)
(CFNC-3.18 "cairo_font_options_t* gtk_widget_get_font_options GtkWidget* widget" 'const-return)
(CFNC-3.18 "void gtk_widget_set_font_map GtkWidget* widget PangoFontMap* fontmap")
(CFNC-3.18 "PangoFontMap* gtk_widget_get_font_map GtkWidget* widget")

;;; 3.17.6:

;;; 3.93.0 (CFNC-3.18 "void gtk_window_fullscreen_on_monitor GtkWindow* window GdkScreen* screen gint monitor")

;;; 3.17.7:

(CINT-3.18 "GDK_TOUCHPAD_SWIPE" "GdkEventType")
(CINT-3.18 "GDK_TOUCHPAD_PINCH" "GdkEventType")

(CINT-3.18 "GDK_TOUCHPAD_GESTURE_PHASE_BEGIN" "GdkTouchpadGesturePhase")
(CINT-3.18 "GDK_TOUCHPAD_GESTURE_PHASE_UPDATE" "GdkTouchpadGesturePhase")
(CINT-3.18 "GDK_TOUCHPAD_GESTURE_PHASE_END" "GdkTouchpadGesturePhase")
(CINT-3.18 "GDK_TOUCHPAD_GESTURE_PHASE_CANCEL" "GdkTouchpadGesturePhase")

(CINT-3.18 "GDK_TOUCHPAD_GESTURE_MASK" "GdkEventMask")

;(CFNC-3.18 "void gtk_flow_box_bind_model GtkFlowBox* box GListModel* model GtkFlowBoxCreateWidgetFunc create_widget_func gpointer user_data GDestroyNotify user_data_free_func")

(CFNC-3.18 "void gtk_text_view_set_top_margin GtkTextView* text_view gint top_margin")
(CFNC-3.18 "gint gtk_text_view_get_top_margin GtkTextView* text_view")
(CFNC-3.18 "void gtk_text_view_set_bottom_margin GtkTextView* text_view gint bottom_margin")
(CFNC-3.18 "gint gtk_text_view_get_bottom_margin GtkTextView* text_view")

;;; 3.17.8|9:

(CINT-3.18 "GDK_MODIFIER_INTENT_DEFAULT_MOD_MASK" "GdkModifierIntent")

;;; 3.18.0
;;; 3.18.1


;;; 3.19.1:

(CFNC-3.20 "gboolean gdk_gl_context_is_legacy GdkGLContext* context")
(CFNC-3.20 "gboolean gdk_rectangle_equal GdkRectangle* rect1 GdkRectangle* rect2" 'const)
(CFNC-3.20 "void gtk_application_window_set_help_overlay GtkApplicationWindow* window GtkShortcutsWindow* help_overlay")
;;; (CFNC-3.20 "GtkShortcutsWindow* gtk_application_window_get_help_overlay GtkApplicationWindow* window")
(CFNC-3.20 "void gtk_settings_reset_property GtkSettings* settings gchar* name" 'const)
(CFNC-3.20 "void gtk_text_tag_changed GtkTextTag* tag gboolean size_changed")
;;; (CFNC-3.20 "void gtk_widget_class_set_css_name GtkWidgetClass* widget_class char* name" 'const)
;;; (CFNC-3.20 "char* gtk_widget_class_get_css_name GtkWidgetClass* widget_class" 'const-return)
(CFNC-3.20 "char* gtk_widget_path_iter_get_object_name GtkWidgetPath* path gint pos" 'const-return)
(CFNC-3.20 "void gtk_widget_path_iter_set_object_name GtkWidgetPath* path gint pos char* name" 'const)


;;; 3.19.2:

(CFNC-3.20 "void gtk_widget_queue_allocate GtkWidget* widget")
(CFNC-3.20 "void gtk_widget_set_focus_on_click GtkWidget* widget gboolean focus_on_click")
(CFNC-3.20 "gboolean gtk_widget_get_focus_on_click GtkWidget* widget")
;(CFNC-3.20 "void gtk_widget_get_allocated_size GtkWidget* widget GtkAllocation* [allocation] int* [baseline]")
  

;;; 3.19.3:

(CINT-3.20 "GTK_SHORTCUT_ACCELERATOR" "GtkShortcutType")
(CINT-3.20 "GTK_SHORTCUT_GESTURE_PINCH" "GtkShortcutType")
(CINT-3.20 "GTK_SHORTCUT_GESTURE_STRETCH" "GtkShortcutType")
(CINT-3.20 "GTK_SHORTCUT_GESTURE_ROTATE_CLOCKWISE" "GtkShortcutType")
(CINT-3.20 "GTK_SHORTCUT_GESTURE_ROTATE_COUNTERCLOCKWISE" "GtkShortcutType")
(CINT-3.20 "GTK_SHORTCUT_GESTURE_TWO_FINGER_SWIPE_LEFT" "GtkShortcutType")
(CINT-3.20 "GTK_SHORTCUT_GESTURE_TWO_FINGER_SWIPE_RIGHT" "GtkShortcutType")
(CINT-3.20 "GTK_SHORTCUT_GESTURE" "GtkShortcutType")

;;; 3.19.4:

(CFNC-3.20 "void gtk_popover_set_constrain_to GtkPopover* popover GtkPopoverConstraint constraint")
(CFNC-3.20 "GtkPopoverConstraint gtk_popover_get_constrain_to GtkPopover* popover")
;;; 3-19.6 (CINT-3.20 "GTK_STATE_FLAG_DND" "GtkStateFlags")
(CINT-3.20 "GTK_POPOVER_CONSTRAINT_NONE" "GtkPopoverConstraint")
(CINT-3.20 "GTK_POPOVER_CONSTRAINT_WINDOW" "GtkPopoverConstraint")

;;; 3.19.5:


(CFNC-3.20 "gboolean gtk_text_iter_starts_tag GtkTextIter* iter GtkTextTag* @tag")


(CCAST-3.20 "GDK_SEAT(object)" "GdkSeat*")
(CCHK-3.20 "GDK_IS_SEAT(object)" "GdkSeat*")

(CINT-3.20 "GDK_SEAT_CAPABILITY_NONE" "GdkSeatCapabilities")
(CINT-3.20 "GDK_SEAT_CAPABILITY_POINTER" "GdkSeatCapabilities")
(CINT-3.20 "GDK_SEAT_CAPABILITY_TOUCH" "GdkSeatCapabilities")
(CINT-3.20 "GDK_SEAT_CAPABILITY_TABLET_STYLUS" "GdkSeatCapabilities")
(CINT-3.20 "GDK_SEAT_CAPABILITY_KEYBOARD" "GdkSeatCapabilities")
(CINT-3.20 "GDK_SEAT_CAPABILITY_ALL_POINTING" "GdkSeatCapabilities")
(CINT-3.20 "GDK_SEAT_CAPABILITY_ALL" "GdkSeatCapabilities")

(CFNC-3.20 "GdkSeat* gdk_device_get_seat GdkDevice* device")
(CFNC-3.20 "GdkSeat* gdk_display_get_default_seat GdkDisplay* display")
(CFNC-3.20 "GList* gdk_display_list_seats GdkDisplay* display")
;;; 3.96.0 (CFNC-3.20 "void gdk_drag_drop_done GdkDrag* context gboolean success")
;;; 3.96.0 (CFNC-3.20 "void gdk_drag_context_set_hotspot GdkDrag* context gint hot_x gint hot_y")
(CFNC-3.20 "void gdk_seat_ungrab GdkSeat* seat")
(CFNC-3.20 "GdkDisplay* gdk_seat_get_display GdkSeat* seat")
(CFNC-3.20 "GdkSeatCapabilities gdk_seat_get_capabilities GdkSeat* seat")
(CFNC-3.20 "GList* gdk_seat_get_slaves GdkSeat* seat GdkSeatCapabilities capabilities")
(CFNC-3.20 "GdkDevice* gdk_seat_get_pointer GdkSeat* seat")
(CFNC-3.20 "GdkDevice* gdk_seat_get_keyboard GdkSeat* seat")


;;; 3.19.6:

(CINT-3.20 "GTK_STATE_FLAG_DROP_ACTIVE" "GtkStateFlags")

;;; 3.19.7:

(CFNC-3.20 "gboolean gdk_event_is_scroll_stop_event GdkEvent* event" 'const)
(CFNC-3.20 "void gtk_text_view_reset_cursor_blink GtkTextView* text_view")

;;; 3.19.8:

;(CFNC-3.20 "void gtk_render_background_get_clip GtkStyleContext* context gdouble x gdouble y gdouble width gdouble height GdkRectangle* [out_clip]")


;;; 3.19.9:

(CSTR-3.20 "GTK_LEVEL_BAR_OFFSET_FULL")
;;; 3.96.0 (CINT-3.20 "GDK_DRAG_CANCEL_NO_TARGET" "GdkDragCancelReason")
;;; 3.96.0 (CINT-3.20 "GDK_DRAG_CANCEL_USER_CANCELLED" "GdkDragCancelReason")
;;; 3.96.0 (CINT-3.20 "GDK_DRAG_CANCEL_ERROR" "GdkDragCancelReason")

;;; (CFNC-3.20 "gboolean gtk_text_layout_get_iter_at_pixel GtkTextLayout* layout GtkTextIter* iter gint x gint y")
;;; (CFNC-3.20 "gboolean gtk_text_layout_get_iter_at_position GtkTextLayout* layout GtkTextIter* iter gint* [trailing] gint x gint y")
;;; GtkTextLayout is private for GtkTextView

;;; these two used to return void so we do them by hand in makexg.scm
;;; (CFNC-3.20 "gboolean gtk_text_view_get_iter_at_position GtkTextView* text_view GtkTextIter* iter gint* [trailing] gint x gint y")
;;; (CFNC-3.20 "gboolean gtk_text_view_get_iter_at_location GtkTextView* text_view GtkTextIter* iter gint x gint y")


;;; 3.19.10 -- nothing new
;;; 3.19.11 -- same
;;; 3.19.12 -- same
;;; 3.20.0|1|2|3  -- same

;;; 3.21.1:

(CINT-3.22 "GDK_AXIS_IGNORE" "GdkAxisUse")
(CINT-3.22 "GDK_AXIS_X" "GdkAxisUse")
(CINT-3.22 "GDK_AXIS_Y" "GdkAxisUse")
(CINT-3.22 "GDK_AXIS_PRESSURE" "GdkAxisUse")
(CINT-3.22 "GDK_AXIS_XTILT" "GdkAxisUse")
(CINT-3.22 "GDK_AXIS_YTILT" "GdkAxisUse")
(CINT-3.22 "GDK_AXIS_WHEEL" "GdkAxisUse")
(CINT-3.22 "GDK_AXIS_LAST" "GdkAxisUse")

(CINT-3.22 "GDK_AXIS_FLAG_X" "GdkAxisFlags")
(CINT-3.22 "GDK_AXIS_FLAG_Y" "GdkAxisFlags")
(CINT-3.22 "GDK_AXIS_FLAG_PRESSURE" "GdkAxisFlags")
(CINT-3.22 "GDK_AXIS_FLAG_XTILT" "GdkAxisFlags")
(CINT-3.22 "GDK_AXIS_FLAG_YTILT" "GdkAxisFlags")
(CINT-3.22 "GDK_AXIS_FLAG_WHEEL" "GdkAxisFlags")
(CINT-3.22 "GDK_AXIS_FLAG_DISTANCE" "GdkAxisFlags")
(CINT-3.22 "GDK_AXIS_FLAG_ROTATION" "GdkAxisFlags")
(CINT-3.22 "GDK_AXIS_FLAG_SLIDER" "GdkAxisFlags")

(CINT-3.22 "GDK_DEVICE_TOOL_TYPE_UNKNOWN" "GdkDeviceToolType")
(CINT-3.22 "GDK_DEVICE_TOOL_TYPE_PEN" "GdkDeviceToolType")
(CINT-3.22 "GDK_DEVICE_TOOL_TYPE_ERASER" "GdkDeviceToolType")
(CINT-3.22 "GDK_DEVICE_TOOL_TYPE_BRUSH" "GdkDeviceToolType")
(CINT-3.22 "GDK_DEVICE_TOOL_TYPE_PENCIL" "GdkDeviceToolType")
(CINT-3.22 "GDK_DEVICE_TOOL_TYPE_AIRBRUSH" "GdkDeviceToolType")
(CINT-3.22 "GDK_DEVICE_TOOL_TYPE_MOUSE" "GdkDeviceToolType")
(CINT-3.22 "GDK_DEVICE_TOOL_TYPE_LENS" "GdkDeviceToolType")

(CCAST-3.22 "GDK_DEVICE_TOOL(object)" "GdkDeviceTool*")
(CCHK-3.22 "GDK_IS_DEVICE_TOOL(object)" "GdkDeviceTool*")

(CFNC-3.22 "GdkAxisFlags gdk_device_get_axes GdkDevice* device")
(CFNC-3.22 "GdkDeviceTool* gdk_event_get_device_tool GdkEvent* event")
(CFNC-3.22 "void gdk_event_set_device_tool GdkEvent* event GdkDeviceTool* tool")
(CFNC-3.22 "int gdk_event_get_scancode GdkEvent* event")
(CFNC-3.22 "void gdk_gl_context_set_use_es GdkGLContext* context int use_es")
(CFNC-3.22 "gboolean gdk_gl_context_get_use_es GdkGLContext* context")
;;; 3.93.0 (CFNC-3.22 "PangoContext* gdk_pango_context_get_for_display GdkDisplay* display")
;;; 3.93.0 (CFNC-3.22 "GdkAtom gtk_clipboard_get_selection GtkClipboard* clipboard")
(CFNC-3.22 "void gtk_gl_area_set_use_es GtkGLArea* area gboolean use_es")
(CFNC-3.22 "gboolean gtk_gl_area_get_use_es GtkGLArea* area")
(CFNC-3.22 "guint gdk_device_tool_get_serial GdkDeviceTool* tool")


;;; 3.21.2:

(CCAST-3.22 "GDK_MONITOR(object)" "GdkMonitor*")
(CCHK-3.22 "GDK_IS_MONITOR(object)" "GdkMonitor*")

(CINT-3.22 "GDK_SUBPIXEL_LAYOUT_UNKNOWN" "GdkSubpixelLayout")
(CINT-3.22 "GDK_SUBPIXEL_LAYOUT_NONE" "GdkSubpixelLayout")
(CINT-3.22 "GDK_SUBPIXEL_LAYOUT_HORIZONTAL_RGB" "GdkSubpixelLayout")
(CINT-3.22 "GDK_SUBPIXEL_LAYOUT_HORIZONTAL_BGR" "GdkSubpixelLayout")
(CINT-3.22 "GDK_SUBPIXEL_LAYOUT_VERTICAL_RGB" "GdkSubpixelLayout")
(CINT-3.22 "GDK_SUBPIXEL_LAYOUT_VERTICAL_BGR" "GdkSubpixelLayout")

(CFNC-3.22 "int gdk_display_get_n_monitors GdkDisplay* display")
(CFNC-3.22 "GdkMonitor* gdk_display_get_monitor GdkDisplay* display int monitor_num")
(CFNC-3.22 "GdkMonitor* gdk_display_get_primary_monitor GdkDisplay* display")
(CFNC-3.22 "GdkMonitor* gdk_display_get_monitor_at_point GdkDisplay* display int x int y")
(CFNC-3.22 "gboolean gdk_event_get_pointer_emulated GdkEvent* event")
(CFNC-3.22 "void gtk_menu_place_on_monitor GtkMenu* menu GdkMonitor* monitor")
(CFNC-3.22 "GdkDisplay* gdk_monitor_get_display GdkMonitor* monitor")
(CFNC-3.22 "void gdk_monitor_get_geometry GdkMonitor* monitor GdkRectangle* geometry")
(CFNC-3.22 "void gdk_monitor_get_workarea GdkMonitor* monitor GdkRectangle* workarea")
(CFNC-3.22 "int gdk_monitor_get_width_mm GdkMonitor* monitor")
(CFNC-3.22 "int gdk_monitor_get_height_mm GdkMonitor* monitor")
(CFNC-3.22 "char* gdk_monitor_get_manufacturer GdkMonitor* monitor" 'const)
(CFNC-3.22 "char* gdk_monitor_get_model GdkMonitor* monitor" 'const)
(CFNC-3.22 "int gdk_monitor_get_scale_factor GdkMonitor* monitor")
(CFNC-3.22 "int gdk_monitor_get_refresh_rate GdkMonitor* monitor")
(CFNC-3.22 "GdkSubpixelLayout gdk_monitor_get_subpixel_layout GdkMonitor* monitor")
(CFNC-3.22 "gboolean gdk_monitor_is_primary GdkMonitor* monitor")


;;; 3.21.3:

;;; GDK_SOURCE_TRACKPOINT "GdkInputSource"

;;; 3.94.0 (CCAST-3.22 "GDK_DRAWING_CONTEXT(object)" "GdkDrawingContext*")
;;; 3.94.0 (CCHK-3.22 "GDK_IS_DRAWING_CONTEXT(object)" "GdkDrawingContext*")

;;; 3.94.0 (CFNC-3.22 "cairo_region_t* gdk_drawing_context_get_clip GdkDrawingContext* context")
;;; 3.94.0 (CFNC-3.22 "gboolean gdk_drawing_context_is_valid GdkDrawingContext* context")
;;; 3.94.0 (CFNC-3.22 "cairo_t* gdk_drawing_context_get_cairo_context GdkDrawingContext* context")
;;; 3.94.0 (CFNC-3.22 "GdkDrawingContext* gdk_cairo_get_drawing_context cairo_t* cr")
(CFNC-3.22 "void gtk_scrolled_window_set_max_content_width GtkScrolledWindow* scrolled_window gint width")
(CFNC-3.22 "gint gtk_scrolled_window_get_max_content_width GtkScrolledWindow* scrolled_window")
(CFNC-3.22 "void gtk_scrolled_window_set_max_content_height GtkScrolledWindow* scrolled_window gint height")
(CFNC-3.22 "gint gtk_scrolled_window_get_max_content_height GtkScrolledWindow* scrolled_window")


;;; 3.21.4:

(CFNC-3.22 "void gtk_file_chooser_add_choice GtkFileChooser* chooser char* id char* label char** options char** option_labels" 'const) ; both are const
(CFNC-3.22 "void gtk_file_chooser_remove_choice GtkFileChooser* chooser char* id")
(CFNC-3.22 "void gtk_file_chooser_set_choice GtkFileChooser* chooser char* id char* option")
(CFNC-3.22 "char* gtk_file_chooser_get_choice GtkFileChooser* chooser char* id" 'const)
;;; GVariant *gtk_file_filter_to_gvariant (GtkFileFilter *filter
;;; GtkFileFilter *gtk_file_filter_new_from_gvariant (GVariant *variant


;;; 3.21.5:

;;; GDK_SOURCE_TABLET_PAD "GdkInputSource"

(CCAST-3.22 "GDK_DEVICE_PAD(object)" "GdkDevicePad*")
(CCHK-3.22 "GDK_IS_DEVICE_PAD(object)" "GdkDevicePad*")

(CINT-3.22 "GDK_DEVICE_PAD_FEATURE_BUTTON" "GdkDevicePadFeature")
(CINT-3.22 "GDK_DEVICE_PAD_FEATURE_RING" "GdkDevicePadFeature")
(CINT-3.22 "GDK_DEVICE_PAD_FEATURE_STRIP" "GdkDevicePadFeature")

(CINT-3.22 "GDK_PAD_BUTTON_PRESS" "GdkEventType")
(CINT-3.22 "GDK_PAD_BUTTON_RELEASE" "GdkEventType")
(CINT-3.22 "GDK_PAD_RING" "GdkEventType")
(CINT-3.22 "GDK_PAD_STRIP" "GdkEventType")
(CINT-3.22 "GDK_PAD_GROUP_MODE" "GdkEventType")

(CINT-3.22 "GDK_TABLET_PAD_MASK" "GdkEventMask")

(CINT-3.22 "GDK_ANCHOR_FLIP_X" "GdkAnchorHints")
(CINT-3.22 "GDK_ANCHOR_FLIP_Y" "GdkAnchorHints")
(CINT-3.22 "GDK_ANCHOR_SLIDE_X" "GdkAnchorHints")
(CINT-3.22 "GDK_ANCHOR_SLIDE_Y" "GdkAnchorHints")
(CINT-3.22 "GDK_ANCHOR_RESIZE_X" "GdkAnchorHints")
(CINT-3.22 "GDK_ANCHOR_RESIZE_Y" "GdkAnchorHints")
(CINT-3.22 "GDK_ANCHOR_FLIP" "GdkAnchorHints")
(CINT-3.22 "GDK_ANCHOR_SLIDE" "GdkAnchorHints")
(CINT-3.22 "GDK_ANCHOR_RESIZE" "GdkAnchorHints")

(CCAST-3.22 "GTK_PAD_CONTROLLER(object)" "GtkPadController*")
(CCHK-3.22 "GTK_IS_PAD_CONTROLLER(object)" "GtkPadController*")

(CINT-3.22 "GTK_PAD_ACTION_BUTTON" "GtkPadActionType")
(CINT-3.22 "GTK_PAD_ACTION_RING" "GtkPadActionType")
(CINT-3.22 "GTK_PAD_ACTION_STRIP" "GtkPadActionType")

(CCAST-3.22 "GTK_SHORTCUT_LABEL(obj)" "GtkShortcutLabel*")
(CCHK-3.22 "GTK_IS_SHORTCUT_LABEL(obj)" "GtkShortcutLabel*")

(CFNC-3.22 "gint gdk_device_pad_get_n_groups GdkDevicePad* pad")
(CFNC-3.22 "gint gdk_device_pad_get_group_n_modes GdkDevicePad* pad gint group_idx")
(CFNC-3.22 "gint gdk_device_pad_get_n_features GdkDevicePad* pad GdkDevicePadFeature feature")
(CFNC-3.22 "gint gdk_device_pad_get_feature_group GdkDevicePad* pad GdkDevicePadFeature feature gint feature_idx")
(CFNC-3.22 "void gtk_menu_popup_at_widget GtkMenu* menu GtkWidget* widget GdkGravity widget_anchor GdkGravity menu_anchor GdkEvent* trigger_event")
(CFNC-3.22 "void gtk_menu_popup_at_pointer GtkMenu* menu GdkEvent* trigger_event")
;;; 3.96.0 (CFNC-3.22 "GtkPadController* gtk_pad_controller_new GtkWindow* window GActionGroup* group GdkDevice* pad")
(CFNC-3.22 "void gtk_pad_controller_set_action_entries GtkPadController* controller GtkPadActionEntry* entries gint n_entries")
(CFNC-3.22 "void gtk_pad_controller_set_action GtkPadController* controller GtkPadActionType type gint index gint mode gchar* label gchar* action_name" 'const)
(CFNC-3.22 "void gtk_popover_popup GtkPopover* popover")
(CFNC-3.22 "void gtk_popover_popdown GtkPopover* popover")
(CFNC-3.22 "GtkWidget* gtk_shortcut_label_new gchar* accelerator" 'const)
(CFNC-3.22 "gchar* gtk_shortcut_label_get_accelerator GtkShortcutLabel* self" 'const-return)
(CFNC-3.22 "void gtk_shortcut_label_set_accelerator GtkShortcutLabel* self gchar* accelerator" 'const)
(CFNC-3.22 "gchar* gtk_shortcut_label_get_disabled_text GtkShortcutLabel* self" 'const-return)
(CFNC-3.22 "void gtk_shortcut_label_set_disabled_text GtkShortcutLabel* self gchar* disabled_text" 'const)


;;; 3.21.6:

(CFNC-3.22 "void gtk_scrolled_window_set_propagate_natural_width GtkScrolledWindow* scrolled_window gboolean propagate")
(CFNC-3.22 "gboolean gtk_scrolled_window_get_propagate_natural_width GtkScrolledWindow* scrolled_window")
(CFNC-3.22 "void gtk_scrolled_window_set_propagate_natural_height GtkScrolledWindow* scrolled_window gboolean propagate")
(CFNC-3.22 "gboolean gtk_scrolled_window_get_propagate_natural_height GtkScrolledWindow* scrolled_window")


;;; 3.22.0: no changes
;;; 3.22.1: no changes
;;; 3.22.2: nothing new (many deprecations)
;;; 3.22.3: same
;;; 3.22.4: no changes
;;; 3.22 reports gtk_show_uri is deprecated, but it isn't??

;;; 3.89.1: 

(CINT-3.92 "GTK_SHORTCUT_GESTURE_SWIPE_LEFT" "GtkShortcutType")
(CINT-3.92 "GTK_SHORTCUT_GESTURE_SWIPE_RIGHT" "GtkShortcutType")

(CFNC-3.92 "gboolean gdk_display_is_composited GdkDisplay* display")
(CFNC-3.92 "gboolean gdk_display_is_rgba GdkDisplay* display")
(CFNC-3.92 "void gtk_button_set_icon_name GtkButton* button char* icon_name")
(CFNC-3.92 "char* gtk_button_get_icon_name GtkButton* button" 'const)
(CFNC-3.92 "void gtk_drawing_area_set_content_width GtkDrawingArea* self int width")
(CFNC-3.92 "int gtk_drawing_area_get_content_width GtkDrawingArea* self")
(CFNC-3.92 "void gtk_drawing_area_set_content_height GtkDrawingArea* self int height")
(CFNC-3.92 "int gtk_drawing_area_get_content_height GtkDrawingArea* self")
(CFNC-3.92 "void gtk_drawing_area_set_draw_func GtkDrawingArea* self GtkDrawingAreaDrawFunc func lambda_data @func_info GDestroyNotify destroy")

;;; 3.89.2

;;; ignoring the vulkan context stuff and gtk snapshot
;;;   the snapshot functions are for widget writers, I think

;;; 3.96.0 (CFNC-3.92 "GdkDrawContext* gdk_drawing_context_get_paint_context GdkDrawingContext* context")
;;; 3.96.0 (CFNC-3.92 "cairo_region_t* gdk_gl_context_get_damage GdkGLContext* context")
(CFNC-3.92 "gboolean gdk_rgba_is_clear GdkRGBA* rgba")
(CFNC-3.92 "gboolean gdk_rgba_is_opaque GdkRGBA* rgba")
(CFNC-3.92 "GtkFlowBoxChild* gtk_flow_box_get_child_at_pos GtkFlowBox* box gint x gint y")

;;; 3.89.4

;; widget_show_all gone

(CFNC-3.92 "gchar* gtk_about_dialog_get_system_information GtkAboutDialog* about" 'const-return)
(CFNC-3.92 "void gtk_about_dialog_set_system_information GtkAboutDialog* about gchar* system_information" 'const)
(CFNC-3.92 "void gtk_action_bar_set_revealed GtkActionBar* action_bar gboolean revealed")
(CFNC-3.92 "gboolean gtk_action_bar_get_revealed GtkActionBar* action_bar")
(CFNC-3.92 "void gtk_check_button_set_draw_indicator GtkCheckButton* check_button gboolean draw_indicator")
(CFNC-3.92 "gboolean gtk_check_button_get_draw_indicator GtkCheckButton* check_button")
(CFNC-3.92 "void gtk_check_button_set_inconsistent GtkCheckButton* check_button gboolean inconsistent")
(CFNC-3.92 "gboolean gtk_check_button_get_inconsistent GtkCheckButton* check_button")
(CFNC-3.92 "void gtk_info_bar_set_revealed GtkInfoBar* info_bar gboolean revealed")
(CFNC-3.92 "gboolean gtk_info_bar_get_revealed GtkInfoBar* info_bar")
;(CFNC-3.92 "void gtk_init void")
;(CFNC-3.92 "gboolean gtk_init_check void")
;handled in makexg.scm
(CFNC-3.92 "GtkWidget* gtk_widget_get_first_child GtkWidget* widget")
(CFNC-3.92 "GtkWidget* gtk_widget_get_last_child GtkWidget* widget")
(CFNC-3.92 "GtkWidget* gtk_widget_get_next_sibling GtkWidget* widget")
(CFNC-3.92 "GtkWidget* gtk_widget_get_prev_sibling GtkWidget* widget")
(CFNC-3.92 "void gtk_widget_set_focus_child GtkWidget* widget GtkWidget* child")
;(CFNC-3.92 "void gtk_widget_snapshot_child GtkWidget* widget GtkWidget* child GtkSnapshot* snapshot")

;;; 3.89.5

(CFNC-3.92 "gboolean gtk_show_uri_on_window GtkWindow* parent char* uri guint32 timestamp GError** [error]" 'const)

;;; 3.90.0
;;; 3.91.0

;;; 3.96.0 (CFNC-3.92 "void gtk_box_pack_start GtkBox* box GtkWidget* child")
;;; 3.96.0 (CFNC-3.92 "void gtk_box_pack_end GtkBox* box GtkWidget* child")
(CFNC-3.92 "void gtk_widget_insert_after GtkWidget* widget GtkWidget* parent GtkWidget* previous_sibling")
(CFNC-3.92 "void gtk_widget_insert_before GtkWidget* widget GtkWidget* parent GtkWidget* next_sibling")


;;; 3.91.1
(CCAST-3.92 "GTK_CENTER_BOX(obj)" "GtkCenterBox*")
(CCHK-3.92 "GTK_IS_CENTER_BOX(obj)" "GtkCenterBox*")

(CFNC-3.92 "GtkWidget* gtk_center_box_new void")
(CFNC-3.92 "void gtk_center_box_set_start_widget GtkCenterBox* self GtkWidget* child")
(CFNC-3.92 "void gtk_center_box_set_center_widget GtkCenterBox* self GtkWidget* child")
(CFNC-3.92 "void gtk_center_box_set_end_widget GtkCenterBox* self GtkWidget* child")
(CFNC-3.92 "GtkWidget* gtk_center_box_get_start_widget GtkCenterBox* self")
(CFNC-3.92 "GtkWidget* gtk_center_box_get_center_widget GtkCenterBox* self")
(CFNC-3.92 "GtkWidget* gtk_center_box_get_end_widget GtkCenterBox* self")
(CFNC-3.92 "void gtk_center_box_set_baseline_position GtkCenterBox* self GtkBaselinePosition position")
(CFNC-3.92 "GtkBaselinePosition gtk_center_box_get_baseline_position GtkCenterBox* self")
(CFNC-3.92 "void gdk_event_set_coords GdkEvent* event gdouble x gdouble y")
;;; 3.96.0 (CFNC-3.92 "void gdk_event_set_user_data GdkEvent* event GObject* user_data")
;;; ??? not in 3.93.0 (CFNC-3.92 "GObject* gdk_event_get_user_data GdkEvent* event")
(CFNC-3.92 "gboolean gdk_rectangle_contains_point GdkRectangle* rect int x int y")
(CFNC-3.92 "GtkWidget* gtk_get_event_target GdkEvent* event")
;;; GtkWidget* gtk_get_event_target_with_type GdkEvent* event GType type


;;; 3.91.2

(CFNC-3.92 "void gtk_accel_label_set_label GtkAccelLabel* accel_label char* text" 'const)
(CFNC-3.92 "char* gtk_accel_label_get_label GtkAccelLabel* accel_label" 'const-return)
(CFNC-3.92 "void gtk_accel_label_set_use_underline GtkAccelLabel* accel_label gboolean setting")
(CFNC-3.92 "gboolean gtk_accel_label_get_use_underline GtkAccelLabel* accel_label")
(CFNC-3.92 "void gtk_scrollbar_set_adjustment GtkScrollbar* self GtkAdjustment* adjustment")
(CFNC-3.92 "GtkAdjustment* gtk_scrollbar_get_adjustment GtkScrollbar* self")
;;; 3.96.0 (CFNC-3.92 "double gtk_scrollbar_get_wheel_delta GtkScrollbar* self GdkEventScroll* event" 'const)
;;; 3.96.0 (CFNC-3.92 "char* gtk_spin_button_get_text GtkSpinButton* spin_button" 'const-return)
;;; 3.96.0 (CFNC-3.92 "void gtk_spin_button_set_text GtkSpinButton* spin_button char* text" 'const)
;;; 3.96.0 (CFNC-3.92 "int gtk_spin_button_get_max_width_chars GtkSpinButton* spin_button")
;;; 3.96.0 (CFNC-3.92 "void gtk_spin_button_set_max_width_chars GtkSpinButton* spin_button int max_width_chars")
;;; 3.96.0 (CFNC-3.92 "int gtk_spin_button_get_width_chars GtkSpinButton* spin_button")
;;; 3.96.0 (CFNC-3.92 "void gtk_spin_button_set_width_chars GtkSpinButton* spin_button int width_chars")
;;; 3.96.0 (CFNC-3.92 "void gtk_widget_size_allocate GtkWidget* widget GtkAllocation* allocation int baseline GtkAllocation* out_clip")


;;; ../test/gtk+-3.93.0/gtk/gtkstylecontext.h
;;; ../test/gtk+-3.93.0/gtk/gtkstyleprovider.h
;;; ../test/gtk+-3.93.0/gtk/gtkcssprovider.h
;;; properties are in gtkcssstylepropertyimpl.c

(CCAST-3.92 "GTK_STYLE_CONTEXT(object)" "GtkStyleContext*")
(CCHK-3.92 "GTK_IS_STYLE_CONTEXT(object)" "GtkStyleContext*")

(CCAST-3.92 "GTK_STYLE_PROVIDER(object)" "GtkStyleProvider*")
(CCHK-3.92 "GTK_IS_STYLE_PROVIDER(object)" "GtkStyleProvider*")

(CCAST-3.92 "GTK_CSS_PROVIDER(object)" "GtkCssProvider*")
(CCHK-3.92 "GTK_IS_CSS_PROVIDER(object)" "GtkCssProvider*")

(CSTR-3.92 "GTK_STYLE_PROPERTY_BACKGROUND_COLOR")
(CSTR-3.92 "GTK_STYLE_PROPERTY_COLOR")
(CSTR-3.92 "GTK_STYLE_PROPERTY_FONT")
(CSTR-3.92 "GTK_STYLE_PROPERTY_PADDING")
(CSTR-3.92 "GTK_STYLE_PROPERTY_BORDER_WIDTH")
(CSTR-3.92 "GTK_STYLE_PROPERTY_MARGIN")
(CSTR-3.92 "GTK_STYLE_PROPERTY_BORDER_RADIUS")
(CSTR-3.92 "GTK_STYLE_PROPERTY_BORDER_STYLE")
(CSTR-3.92 "GTK_STYLE_PROPERTY_BORDER_COLOR")
(CSTR-3.92 "GTK_STYLE_PROPERTY_BACKGROUND_IMAGE")
(CSTR-3.92 "GTK_STYLE_CLASS_CELL")
(CSTR-3.92 "GTK_STYLE_CLASS_DIM_LABEL")
(CSTR-3.92 "GTK_STYLE_CLASS_ENTRY")
(CSTR-3.92 "GTK_STYLE_CLASS_LABEL")
(CSTR-3.92 "GTK_STYLE_CLASS_COMBOBOX_ENTRY")
(CSTR-3.92 "GTK_STYLE_CLASS_BUTTON")
(CSTR-3.92 "GTK_STYLE_CLASS_LIST")
(CSTR-3.92 "GTK_STYLE_CLASS_LIST_ROW")
(CSTR-3.92 "GTK_STYLE_CLASS_CALENDAR")
(CSTR-3.92 "GTK_STYLE_CLASS_SLIDER")
(CSTR-3.92 "GTK_STYLE_CLASS_BACKGROUND")
(CSTR-3.92 "GTK_STYLE_CLASS_RUBBERBAND")
(CSTR-3.92 "GTK_STYLE_CLASS_CSD")
(CSTR-3.92 "GTK_STYLE_CLASS_TOOLTIP")
(CSTR-3.92 "GTK_STYLE_CLASS_MENU")
(CSTR-3.92 "GTK_STYLE_CLASS_CONTEXT_MENU")
(CSTR-3.92 "GTK_STYLE_CLASS_TOUCH_SELECTION")
(CSTR-3.92 "GTK_STYLE_CLASS_MENUBAR")
(CSTR-3.92 "GTK_STYLE_CLASS_MENUITEM")
(CSTR-3.92 "GTK_STYLE_CLASS_TOOLBAR")
(CSTR-3.92 "GTK_STYLE_CLASS_PRIMARY_TOOLBAR")
(CSTR-3.92 "GTK_STYLE_CLASS_INLINE_TOOLBAR")
(CSTR-3.92 "GTK_STYLE_CLASS_STATUSBAR")
(CSTR-3.92 "GTK_STYLE_CLASS_RADIO")
(CSTR-3.92 "GTK_STYLE_CLASS_CHECK")
(CSTR-3.92 "GTK_STYLE_CLASS_DEFAULT")
(CSTR-3.92 "GTK_STYLE_CLASS_TROUGH")
(CSTR-3.92 "GTK_STYLE_CLASS_SCROLLBAR")
(CSTR-3.92 "GTK_STYLE_CLASS_SCROLLBARS_JUNCTION")
(CSTR-3.92 "GTK_STYLE_CLASS_SCALE")
(CSTR-3.92 "GTK_STYLE_CLASS_SCALE_HAS_MARKS_ABOVE")
(CSTR-3.92 "GTK_STYLE_CLASS_SCALE_HAS_MARKS_BELOW")
(CSTR-3.92 "GTK_STYLE_CLASS_HEADER")
(CSTR-3.92 "GTK_STYLE_CLASS_ACCELERATOR")
(CSTR-3.92 "GTK_STYLE_CLASS_RAISED")
(CSTR-3.92 "GTK_STYLE_CLASS_LINKED")
(CSTR-3.92 "GTK_STYLE_CLASS_DOCK")
(CSTR-3.92 "GTK_STYLE_CLASS_PROGRESSBAR")
(CSTR-3.92 "GTK_STYLE_CLASS_SPINNER")
(CSTR-3.92 "GTK_STYLE_CLASS_MARK")
(CSTR-3.92 "GTK_STYLE_CLASS_EXPANDER")
(CSTR-3.92 "GTK_STYLE_CLASS_SPINBUTTON")
(CSTR-3.92 "GTK_STYLE_CLASS_NOTEBOOK")
(CSTR-3.92 "GTK_STYLE_CLASS_VIEW")
(CSTR-3.92 "GTK_STYLE_CLASS_SIDEBAR")
(CSTR-3.92 "GTK_STYLE_CLASS_IMAGE")
;(CSTR-3.92 "GTK_STYLE_CLASS_HIGHLIGHT")
;(CSTR-3.92 "GTK_STYLE_CLASS_FRAME")
;(CSTR-3.92 "GTK_STYLE_CLASS_DND")
(CSTR-3.92 "GTK_STYLE_CLASS_PANE_SEPARATOR")
(CSTR-3.92 "GTK_STYLE_CLASS_SEPARATOR")
(CSTR-3.92 "GTK_STYLE_CLASS_INFO")
(CSTR-3.92 "GTK_STYLE_CLASS_WARNING")
(CSTR-3.92 "GTK_STYLE_CLASS_QUESTION")
(CSTR-3.92 "GTK_STYLE_CLASS_ERROR")
;(CSTR-3.92 "GTK_STYLE_CLASS_HORIZONTAL")
;(CSTR-3.92 "GTK_STYLE_CLASS_VERTICAL")
(CSTR-3.92 "GTK_STYLE_CLASS_TOP")
(CSTR-3.92 "GTK_STYLE_CLASS_BOTTOM")
(CSTR-3.92 "GTK_STYLE_CLASS_LEFT")
(CSTR-3.92 "GTK_STYLE_CLASS_RIGHT")
(CSTR-3.92 "GTK_STYLE_CLASS_PULSE")
(CSTR-3.92 "GTK_STYLE_CLASS_ARROW")
(CSTR-3.92 "GTK_STYLE_CLASS_OSD")
(CSTR-3.92 "GTK_STYLE_CLASS_LEVEL_BAR")
(CSTR-3.92 "GTK_STYLE_CLASS_CURSOR_HANDLE")
(CSTR-3.92 "GTK_STYLE_CLASS_INSERTION_CURSOR")
(CSTR-3.92 "GTK_STYLE_CLASS_TITLEBAR")
(CSTR-3.92 "GTK_STYLE_CLASS_TITLE")
(CSTR-3.92 "GTK_STYLE_CLASS_SUBTITLE")
(CSTR-3.92 "GTK_STYLE_CLASS_NEEDS_ATTENTION")
(CSTR-3.92 "GTK_STYLE_CLASS_SUGGESTED_ACTION")
(CSTR-3.92 "GTK_STYLE_CLASS_DESTRUCTIVE_ACTION")
(CSTR-3.92 "GTK_STYLE_CLASS_POPOVER")
(CSTR-3.92 "GTK_STYLE_CLASS_POPUP")
(CSTR-3.92 "GTK_STYLE_CLASS_MESSAGE_DIALOG")
(CSTR-3.92 "GTK_STYLE_CLASS_FLAT")
(CSTR-3.92 "GTK_STYLE_CLASS_READ_ONLY")
(CSTR-3.92 "GTK_STYLE_CLASS_OVERSHOOT")
(CSTR-3.92 "GTK_STYLE_CLASS_UNDERSHOOT")
(CSTR-3.92 "GTK_STYLE_CLASS_PAPER")
(CSTR-3.92 "GTK_STYLE_CLASS_MONOSPACE")
(CSTR-3.92 "GTK_STYLE_CLASS_WIDE")

(CINT-3.92 "GTK_STYLE_PROVIDER_PRIORITY_FALLBACK")
(CINT-3.92 "GTK_STYLE_PROVIDER_PRIORITY_THEME")
(CINT-3.92 "GTK_STYLE_PROVIDER_PRIORITY_SETTINGS")
(CINT-3.92 "GTK_STYLE_PROVIDER_PRIORITY_APPLICATION")
(CINT-3.92 "GTK_STYLE_PROVIDER_PRIORITY_USER")

(CINT-3.92 "GTK_STYLE_CONTEXT_PRINT_NONE" "GtkStyleContextPrintFlags")
(CINT-3.92 "GTK_STYLE_CONTEXT_PRINT_RECURSE" "GtkStyleContextPrintFlags")
(CINT-3.92 "GTK_STYLE_CONTEXT_PRINT_SHOW_STYLE" "GtkStyleContextPrintFlags")

;;; 3.96.0 (CINT-3.92 "GTK_CSS_PROVIDER_ERROR_FAILED" "GtkCssProviderError")
;;; 3.96.0 (CINT-3.92 "GTK_CSS_PROVIDER_ERROR_SYNTAX" "GtkCssProviderError")
;;; 3.96.0 (CINT-3.92 "GTK_CSS_PROVIDER_ERROR_IMPORT" "GtkCssProviderError")
;;; 3.96.0 (CINT-3.92 "GTK_CSS_PROVIDER_ERROR_NAME" "GtkCssProviderError")
;;; 3.96.0 (CINT-3.92 "GTK_CSS_PROVIDER_ERROR_DEPRECATED" "GtkCssProviderError")
;;; 3.96.0 (CINT-3.92 "GTK_CSS_PROVIDER_ERROR_UNKNOWN_VALUE" "GtkCssProviderError")

(CFNC-3.92 "GtkStyleContext* gtk_style_context_new void")
(CFNC-3.92 "void gtk_style_context_add_provider GtkStyleContext* context GtkStyleProvider* provider guint priority")
(CFNC-3.92 "void gtk_style_context_save GtkStyleContext* context")
(CFNC-3.92 "void gtk_style_context_restore GtkStyleContext* context")
(CFNC-3.92 "GtkCssSection* gtk_style_context_get_section GtkStyleContext* context gchar* property" 'const)
(CFNC-3.92 "void gtk_style_context_get_property GtkStyleContext* context gchar* property GValue* value")
;(CFNC-3.92 "void gtk_style_context_get_valist GtkStyleContext* context char* first_property_name va_list args" 'const)
;(CFNC-3.92 "void gtk_style_context_get GtkStyleContext* context char* first_property_name ... " 'const)
(CFNC-3.92 "void gtk_style_context_set_state GtkStyleContext* context GtkStateFlags flags")
(CFNC-3.92 "GtkStateFlags gtk_style_context_get_state GtkStyleContext* context")
(CFNC-3.92 "void gtk_style_context_set_scale GtkStyleContext* context gint scale")
(CFNC-3.92 "gint gtk_style_context_get_scale GtkStyleContext* context")
(CFNC-3.92 "void gtk_style_context_set_path GtkStyleContext* context GtkWidgetPath* path")
(CFNC-3.92 "GtkWidgetPath* gtk_style_context_get_path GtkStyleContext* context" 'const-return)
(CFNC-3.92 "void gtk_style_context_set_parent GtkStyleContext* context GtkStyleContext* parent")
(CFNC-3.92 "GtkStyleContext* gtk_style_context_get_parent GtkStyleContext* context")
(CFNC-3.92 "GList* gtk_style_context_list_classes GtkStyleContext* context")
(CFNC-3.92 "void gtk_style_context_add_class GtkStyleContext* context gchar* class_name" 'const)
(CFNC-3.92 "void gtk_style_context_remove_class GtkStyleContext* context gchar* class_name" 'const)
(CFNC-3.92 "gboolean gtk_style_context_has_class GtkStyleContext* context gchar* class_name" 'const)
;;; 3.96.0 (CFNC-3.92 "void gtk_style_context_set_frame_clock GtkStyleContext* context GdkFrameClock* frame_clock")
;;; 3.96.0 (CFNC-3.92 "GdkFrameClock* gtk_style_context_get_frame_clock GtkStyleContext* context")
(CFNC-3.92 "gboolean gtk_style_context_lookup_color GtkStyleContext* context gchar* color_name GdkRGBA* color" 'const)
(CFNC-3.92 "void gtk_style_context_get_color GtkStyleContext* context GdkRGBA* color")
(CFNC-3.92 "void gtk_style_context_get_border GtkStyleContext* context GtkBorder* border")
(CFNC-3.92 "void gtk_style_context_get_padding GtkStyleContext* context GtkBorder* padding")
(CFNC-3.92 "void gtk_style_context_get_margin GtkStyleContext* context GtkBorder* margin")
(CFNC-3.92 "void gtk_render_insertion_cursor GtkStyleContext* context cairo_t* cr gdouble x gdouble y PangoLayout* layout int index PangoDirection direction")
(CFNC-3.92 "char* gtk_style_context_to_string GtkStyleContext* context GtkStyleContextPrintFlags flags")
(CFNC-3.92 "GtkCssProvider* gtk_css_provider_new void")
(CFNC-3.92 "char* gtk_css_provider_to_string GtkCssProvider* provider")
(CFNC-3.92 "void gtk_css_provider_load_from_data GtkCssProvider* css_provider gchar* data gssize length" 'const)
(CFNC-3.92 "void gtk_css_provider_load_from_file GtkCssProvider* css_provider GFile* file")
(CFNC-3.92 "void gtk_css_provider_load_from_path GtkCssProvider* css_provider gchar* path" 'const)
(CFNC-3.92 "void gtk_css_provider_load_from_resource GtkCssProvider* css_provider gchar* resource_path" 'const)
;;; 3.96.0 (CFNC-3.92 "GtkCssProvider* gtk_css_provider_get_default void")
;;; 3.96.0 (CFNC-3.92 "GtkCssProvider* gtk_css_provider_get_named gchar* name gchar* variant" 'const)

 
;;; 3.92.1

(CFNC-3.94 "GtkGesture* gtk_gesture_drag_new void")
(CFNC-3.94 "GtkGesture* gtk_gesture_long_press_new void")
(CFNC-3.94 "GtkGesture* gtk_gesture_pan_new GtkOrientation orientation")
(CFNC-3.94 "GtkGesture* gtk_gesture_multi_press_new void")
(CFNC-3.94 "GtkGesture* gtk_gesture_rotate_new void")
(CFNC-3.94 "GtkGesture* gtk_gesture_swipe_new void")
(CFNC-3.94 "GtkGesture* gtk_gesture_zoom_new void")

(CINT-3.94 "GTK_INPUT_HINT_VERTICAL_WRITING" "GtkInputHints")
(CINT-3.94 "GTK_INPUT_HINT_EMOJI" "GtkInputHints")
(CINT-3.94 "GTK_INPUT_HINT_NO_EMOJI" "GtkInputHints")

;;; 3.96.0 (CCHK-3.94 "GTK_IS_EMOJI_CHOOSER(obj)" "GtkEmojiChooser*")
;;; 3.96.0 (CCAST-3.94 "GTK_EMOJI_CHOOSER(obj)" "GtkEmojiChooser*")

(CCHK-3.94 "GTK_IS_EVENT_CONTROLLER_SCROLL(o)" "GtkEventControllerScroll*")
(CCAST-3.94 "GTK_EVENT_CONTROLLER_SCROLL(o)" "GtkEventControllerScroll*")

(CINT-3.94 "GTK_EVENT_CONTROLLER_SCROLL_NONE" "GtkEventControllerScrollFlags")
(CINT-3.94 "GTK_EVENT_CONTROLLER_SCROLL_VERTICAL" "GtkEventControllerScrollFlags")
(CINT-3.94 "GTK_EVENT_CONTROLLER_SCROLL_HORIZONTAL" "GtkEventControllerScrollFlags")
(CINT-3.94 "GTK_EVENT_CONTROLLER_SCROLL_DISCRETE" "GtkEventControllerScrollFlags")
(CINT-3.94 "GTK_EVENT_CONTROLLER_SCROLL_KINETIC" "GtkEventControllerScrollFlags")
(CINT-3.94 "GTK_EVENT_CONTROLLER_SCROLL_BOTH_AXES" "GtkEventControllerScrollFlags")

(CFNC-3.94 "void gdk_event_set_keyval GdkEvent* event guint keyval")
(CFNC-3.94 "gboolean gdk_event_get_key_is_modifier GdkEvent* event gboolean* [is_modifier]")
(CFNC-3.94 "gboolean gdk_event_get_key_group GdkEvent* event guint* [group]")
;;; 3.96.0 (CFNC-3.94 "gboolean gdk_event_get_string GdkEvent* event char** [string]" 'const)
;;; 3.96.0 (CFNC-3.94 "gboolean gdk_event_get_setting GdkEvent* event char** [setting]" 'const)
(CFNC-3.94 "gboolean gdk_event_is_sent GdkEvent* event")
;;; 3.96.0 (CFNC-3.94 "gboolean gdk_event_get_drag_context GdkEvent* event GdkDrag** [context]")
(CFNC-3.94 "gboolean gdk_event_get_crossing_mode GdkEvent* event GdkCrossingMode* [mode]")
(CFNC-3.94 "gboolean gdk_event_get_crossing_detail GdkEvent* event GdkNotifyType* [detail]")
(CFNC-3.94 "gboolean gdk_event_get_touchpad_gesture_phase GdkEvent* event GdkTouchpadGesturePhase* [phase]")
(CFNC-3.94 "gboolean gdk_event_get_touchpad_gesture_n_fingers GdkEvent* event guint* [n_fingers]")
(CFNC-3.94 "gboolean gdk_event_get_touchpad_deltas GdkEvent* event double* [dx] double* [dy]")
(CFNC-3.94 "gboolean gdk_event_get_touchpad_angle_delta GdkEvent* event double* [delta]")
(CFNC-3.94 "gboolean gdk_event_get_touchpad_scale GdkEvent* event double* [scale]")
(CFNC-3.94 "gboolean gdk_event_get_touch_emulating_pointer GdkEvent* event gboolean* [emulating]")
(CFNC-3.94 "gboolean gdk_event_get_focus_in GdkEvent* event gboolean* [focus_in]")
(CFNC-3.94 "gboolean gdk_event_get_pad_group_mode GdkEvent* event guint* [group] guint* [mode]")
(CFNC-3.94 "gboolean gdk_event_get_pad_button GdkEvent* event guint* [button]")
(CFNC-3.94 "gboolean gdk_event_get_pad_axis_value GdkEvent* event guint* [index] gdouble* [value]")
;;; 3.93.0 (CFNC-3.94 "gboolean gdk_event_get_property GdkEvent* event GdkAtom* [property] GdkPropertyState* [state]")
;;; 3.93.0 (CFNC-3.94 "gboolean gdk_event_get_selection GdkEvent* event GdkAtom* [selection]")
(CFNC-3.94 "gboolean gdk_event_get_axes GdkEvent* event gdouble** [axes] guint* [n_axes]")
;;; 3.96.0 (CFNC-3.94 "void gtk_snapshot_push_blur GtkSnapshot* snapshot double radius char* name" 'const)
;;; 3.96.0 (CFNC-3.94 "GtkWidget* gtk_emoji_chooser_new void")
(CFNC-3.94 "GtkEventController* gtk_event_controller_scroll_new GtkEventControllerScrollFlags flags")
(CFNC-3.94 "void gtk_event_controller_scroll_set_flags GtkEventControllerScroll* controller GtkEventControllerScrollFlags flags")
(CFNC-3.94 "GtkEventControllerScrollFlags gtk_event_controller_scroll_get_flags GtkEventControllerScroll* controller")


;;; 3.93.0

(CINT-3.94 "GDK_DEVICE_TYPE_MASTER" "GdkDeviceType")
(CINT-3.94 "GDK_DEVICE_TYPE_SLAVE" "GdkDeviceType")
(CINT-3.94 "GDK_DEVICE_TYPE_FLOATING" "GdkDeviceType")
(CINT-3.94 "GDK_SEAT_CAPABILITY_TABLET_PAD" "GdkSeatCapabilities")
(CINT-3.94 "GTK_ICON_SIZE_INHERIT" "GtkIconSize")
(CINT-3.94 "GTK_ICON_SIZE_NORMAL" "GtkIconSize")
(CINT-3.94 "GTK_ICON_SIZE_LARGE" "GtkIconSize")
(CINT-3.94 "GTK_STATE_FLAG_FOCUS_VISIBLE" "GtkStateFlags")
;;; 3.96.0 (CINT-3.94 "GTK_IMAGE_SURFACE" "GtkImageType")
;;; 3.96.0 (CINT-3.94 "GTK_IMAGE_TEXTURE" "GtkImageType")

(CCHK-3.94 "GTK_IS_EVENT_CONTROLLER_MOTION" "GtkEventControllerMotion*")
(CCAST-3.94 "GTK_EVENT_CONTROLLER_MOTION" "GtkEventControllerMotion*")
(CCHK-3.94 "GDK_IS_TEXTURE" "GdkTexture*")
(CCAST-3.94 "GDK_TEXTURE" "GdkTexture*")
(CCHK-3.94 "GDK_IS_EVENT" "GdkEvent*")
;;; already declared (CCAST-3.94 "GDK_EVENT" "GdkEvent*")
(CCHK-3.94 "GDK_IS_APP_LAUNCH_CONTEXT" "GdkAppLaunchContext*")
(CCAST-3.94 "GDK_APP_LAUNCH_CONTEXT" "GdkAppLaunchContext*")
(CCHK-3.94 "GDK_IS_CLIPBOARD" "GdkClipboard*")
(CCAST-3.94 "GDK_CLIPBOARD" "GdkClipboard*")
(CCHK-3.94 "GDK_IS_CONTENT_PROVIDER" "GdkContentProvider*")
(CCAST-3.94 "GDK_CONTENT_PROVIDER" "GdkContentProvider*")
(CCHK-3.94 "GDK_IS_CONTENT_SERIALIZER" "GdkContentSerializer*")
(CCAST-3.94 "GDK_CONTENT_SERIALIZER" "GdkContentSerializer*")
(CCHK-3.94 "GDK_IS_CONTENT_DESERIALIZER" "GdkContentDeserializer*")
(CCAST-3.94 "GDK_CONTENT_DESERIALIZER" "GdkContentDeserializer*")

(CFNC-3.94 "void gdk_app_launch_context_set_desktop GdkAppLaunchContext* context gint desktop")
(CFNC-3.94 "void gdk_app_launch_context_set_timestamp GdkAppLaunchContext* context guint32 timestamp")
(CFNC-3.94 "void gdk_app_launch_context_set_icon GdkAppLaunchContext* context GIcon* icon")
(CFNC-3.94 "void gdk_app_launch_context_set_icon_name GdkAppLaunchContext* context char* icon_name" 'const)
(CFNC-3.94 "GdkDisplay* gdk_clipboard_get_display GdkClipboard* clipboard")
(CFNC-3.94 "GdkContentFormats* gdk_clipboard_get_formats GdkClipboard* clipboard")
(CFNC-3.94 "gboolean gdk_clipboard_is_local GdkClipboard* clipboard")
(CFNC-3.94 "GdkContentProvider* gdk_clipboard_get_content GdkClipboard* clipboard")
(CFNC-3.94 "void gdk_clipboard_store_async GdkClipboard* clipboard int io_priority GCancellable* cancellable GAsyncReadyCallback callback gpointer user_data")
(CFNC-3.94 "gboolean gdk_clipboard_store_finish GdkClipboard* clipboard GAsyncResult* result GError** [error]")
(CFNC-3.94 "void gdk_clipboard_read_async GdkClipboard* clipboard char** mime_types int io_priority GCancellable* cancellable GAsyncReadyCallback callback gpointer user_data" 'const)
(CFNC-3.94 "void gdk_clipboard_read_value_async GdkClipboard* clipboard GType type int io_priority GCancellable* cancellable GAsyncReadyCallback callback gpointer user_data")
(CFNC-3.94 "GValue* gdk_clipboard_read_value_finish GdkClipboard* clipboard GAsyncResult* result GError** [error]" 'const-return)
(CFNC-3.94 "void gdk_clipboard_read_texture_async GdkClipboard* clipboard GCancellable* cancellable GAsyncReadyCallback callback gpointer user_data")
(CFNC-3.94 "GdkTexture* gdk_clipboard_read_texture_finish GdkClipboard* clipboard GAsyncResult* result GError** [error]")
(CFNC-3.94 "void gdk_clipboard_read_text_async GdkClipboard* clipboard GCancellable* cancellable GAsyncReadyCallback callback gpointer user_data")
(CFNC-3.94 "char* gdk_clipboard_read_text_finish GdkClipboard* clipboard GAsyncResult* result GError** [error]")
(CFNC-3.94 "gboolean gdk_clipboard_set_content GdkClipboard* clipboard GdkContentProvider* provider")
(CFNC-3.94 "void gdk_clipboard_set GdkClipboard* clipboard GType type ...")
;(CFNC-3.94 "void gdk_clipboard_set_valist GdkClipboard* clipboard GType type va_list args")
(CFNC-3.94 "void gdk_clipboard_set_value GdkClipboard* clipboard GValue* value")
(CFNC-3.94 "void gdk_clipboard_set_text GdkClipboard* clipboard char* text")
(CFNC-3.94 "void gdk_clipboard_set_texture GdkClipboard* clipboard GdkTexture* texture")
(CFNC-3.94 "char* gdk_intern_mime_type char* string" 'const)
(CFNC-3.94 "GdkContentFormats* gdk_content_formats_new char** mime_types guint n_mime_types" 'const)
(CFNC-3.94 "GdkContentFormats* gdk_content_formats_new_for_gtype GType type")
(CFNC-3.94 "GdkContentFormats* gdk_content_formats_ref GdkContentFormats* formats")
(CFNC-3.94 "void gdk_content_formats_unref GdkContentFormats* formats")
(CFNC-3.94 "void gdk_content_formats_print GdkContentFormats* formats GString* string")
(CFNC-3.94 "char* gdk_content_formats_to_string GdkContentFormats* formats")
(CFNC-3.94 "GType* gdk_content_formats_get_gtypes GdkContentFormats* formats gsize* [n_gtypes]" 'const-return)
(CFNC-3.94 "char** gdk_content_formats_get_mime_types GdkContentFormats* formats gsize* [n_mime_types]" 'const-return)
(CFNC-3.94 "GdkContentFormats* gdk_content_formats_union GdkContentFormats* first GdkContentFormats* second")
(CFNC-3.94 "gboolean gdk_content_formats_match GdkContentFormats* first GdkContentFormats* second")
(CFNC-3.94 "GType gdk_content_formats_match_gtype GdkContentFormats* first GdkContentFormats* second")
(CFNC-3.94 "char* gdk_content_formats_match_mime_type GdkContentFormats* first GdkContentFormats* second" 'const-return)
(CFNC-3.94 "gboolean gdk_content_formats_contain_gtype GdkContentFormats* formats GType type")
(CFNC-3.94 "gboolean gdk_content_formats_contain_mime_type GdkContentFormats* formats char* mime_type" 'const)
(CFNC-3.94 "GdkContentFormatsBuilder* gdk_content_formats_builder_new void")
;;; 3.96.0 (CFNC-3.94 "GdkContentFormats* gdk_content_formats_builder_free GdkContentFormatsBuilder* builder")
(CFNC-3.94 "void gdk_content_formats_builder_add_formats GdkContentFormatsBuilder* builder GdkContentFormats* formats")
(CFNC-3.94 "void gdk_content_formats_builder_add_mime_type GdkContentFormatsBuilder* builder char* mime_type" 'const)
(CFNC-3.94 "void gdk_content_formats_builder_add_gtype GdkContentFormatsBuilder* builder GType type")
(CFNC-3.94 "GdkContentFormats* gdk_content_provider_ref_formats GdkContentProvider* provider")
(CFNC-3.94 "GdkContentFormats* gdk_content_provider_ref_storable_formats GdkContentProvider* provider")
(CFNC-3.94 "void gdk_content_provider_content_changed GdkContentProvider* provider")
(CFNC-3.94 "void gdk_content_provider_write_mime_type_async GdkContentProvider* provider char* mime_type GOutputStream* stream int io_priority GCancellable* cancellable GAsyncReadyCallback callback gpointer user_data" 'const)
(CFNC-3.94 "gboolean gdk_content_provider_write_mime_type_finish GdkContentProvider* provider GAsyncResult* result GError** [error]")
(CFNC-3.94 "gboolean gdk_content_provider_get_value GdkContentProvider* provider GValue* value GError** [error]")
(CFNC-3.94 "char* gdk_content_serializer_get_mime_type GdkContentSerializer* serializer" 'const-return)
(CFNC-3.94 "GValue* gdk_content_serializer_get_value GdkContentSerializer* serializer" 'const-return)
(CFNC-3.94 "GOutputStream* gdk_content_serializer_get_output_stream GdkContentSerializer* serializer")
(CFNC-3.94 "int gdk_content_serializer_get_priority GdkContentSerializer* serializer")
(CFNC-3.94 "GCancellable* gdk_content_serializer_get_cancellable GdkContentSerializer* serializer")
(CFNC-3.94 "gpointer gdk_content_serializer_get_user_data GdkContentSerializer* serializer")
;;; no func_info? (CFNC-3.94 "void gdk_content_serializer_set_task_data GdkContentSerializer* serializer gpointer data GDestroyNotify notify")
(CFNC-3.94 "gpointer gdk_content_serializer_get_task_data GdkContentSerializer* serializer")
(CFNC-3.94 "void gdk_content_serializer_return_success GdkContentSerializer* serializer")
(CFNC-3.94 "void gdk_content_serializer_return_error GdkContentSerializer* serializer GError* error")
(CFNC-3.94 "GdkContentFormats* gdk_content_formats_union_serialize_gtypes GdkContentFormats* formats")
(CFNC-3.94 "GdkContentFormats* gdk_content_formats_union_serialize_mime_types GdkContentFormats* formats")
;;; above (CFNC-3.94 "void gdk_content_register_serializer GType type char* mime_type GdkContentSerializeFunc serialize gpointer data GDestroyNotify notify" 'const)
;;; above (CFNC-3.94 "void gdk_content_serialize_async GOutputStream* stream char* mime_type GValue* value int io_priority GCancellable* cancellable GAsyncReadyCallback callback gpointer user_data" 'const)
(CFNC-3.94 "gboolean gdk_content_serialize_finish GAsyncResult* result GError** [error]")
(CFNC-3.94 "char* gdk_content_deserializer_get_mime_type GdkContentDeserializer* deserializer" 'const-return)
(CFNC-3.94 "GValue* gdk_content_deserializer_get_value GdkContentDeserializer* deserializer")
(CFNC-3.94 "GInputStream* gdk_content_deserializer_get_input_stream GdkContentDeserializer* deserializer")
(CFNC-3.94 "int gdk_content_deserializer_get_priority GdkContentDeserializer* deserializer")
(CFNC-3.94 "GCancellable* gdk_content_deserializer_get_cancellable GdkContentDeserializer* deserializer")
(CFNC-3.94 "gpointer gdk_content_deserializer_get_user_data GdkContentDeserializer* deserializer")
;;; above (CFNC-3.94 "void gdk_content_deserializer_set_task_data GdkContentDeserializer* deserializer gpointer data GDestroyNotify notify")
(CFNC-3.94 "gpointer gdk_content_deserializer_get_task_data GdkContentDeserializer* deserializer")
(CFNC-3.94 "void gdk_content_deserializer_return_success GdkContentDeserializer* deserializer")
(CFNC-3.94 "void gdk_content_deserializer_return_error GdkContentDeserializer* deserializer GError* error")
(CFNC-3.94 "GdkContentFormats* gdk_content_formats_union_deserialize_gtypes GdkContentFormats* formats")
(CFNC-3.94 "GdkContentFormats* gdk_content_formats_union_deserialize_mime_types GdkContentFormats* formats")
;;; above (CFNC-3.94 "void gdk_content_register_deserializer char* mime_type GType type GdkContentDeserializeFunc deserialize gpointer data GDestroyNotify notify")
;;; above (CFNC-3.94 "void gdk_content_deserialize_async GInputStream* stream char* mime_type GType type int io_priority GCancellable* cancellable GAsyncReadyCallback callback gpointer user_data")
(CFNC-3.94 "gboolean gdk_content_deserialize_finish GAsyncResult* result GValue* value GError** [error]")
(CFNC-3.94 "GdkContentProvider* gdk_content_provider_new_for_value GValue* value")
(CFNC-3.94 "GdkContentProvider* gdk_content_provider_new_for_bytes char* mime_type GBytes* bytes" 'const)
;;; (CFNC-3.94 "GtkWidget* gtk_event_controller_get_widget GtkEventController* controller")
;;; (CFNC-3.94 "gboolean gtk_event_controller_handle_event GtkEventController* controller GdkEvent* event")
;;; (CFNC-3.94 "void gtk_event_controller_reset GtkEventController* controller")
;;; (CFNC-3.94 "GtkPropagationPhase gtk_event_controller_get_propagation_phase GtkEventController* controller")
;;; (CFNC-3.94 "void gtk_event_controller_set_propagation_phase GtkEventController* controller GtkPropagationPhase phase")
(CFNC-3.94 "GtkEventController* gtk_event_controller_motion_new void")
;;; 3.96.0 (CFNC-3.94 "GdkTexture* gdk_texture_new_for_data guchar* data int width int height int stride")
(CFNC-3.94 "GdkTexture* gdk_texture_new_for_pixbuf GdkPixbuf* pixbuf")
(CFNC-3.94 "GdkTexture* gdk_texture_new_from_resource char* resource_path" 'const)
(CFNC-3.94 "GdkTexture* gdk_texture_new_from_file GFile* file GError** [error]")
(CFNC-3.94 "int gdk_texture_get_width GdkTexture* texture")
(CFNC-3.94 "int gdk_texture_get_height GdkTexture* texture")
(CFNC-3.94 "void gdk_texture_download GdkTexture* texture guchar* data gsize stride")
(CFNC-3.94 "GdkCursor* gdk_cursor_new_from_texture GdkTexture* texture int hotspot_x int hotspot_y GdkCursor* fallback")
(CFNC-3.94 "GdkCursor* gdk_cursor_new_from_name gchar* name GdkCursor* fallback" 'const)
(CFNC-3.94 "GdkCursor* gdk_cursor_get_fallback GdkCursor* cursor")
(CFNC-3.94 "char* gdk_cursor_get_name GdkCursor* cursor" 'cons-return)
(CFNC-3.94 "GdkTexture* gdk_cursor_get_texture GdkCursor* cursor")
(CFNC-3.94 "int gdk_cursor_get_hotspot_x GdkCursor* cursor")
(CFNC-3.94 "int gdk_cursor_get_hotspot_y GdkCursor* cursor")
(CFNC-3.94 "GdkClipboard* gdk_display_get_clipboard GdkDisplay* display")
(CFNC-3.94 "GdkClipboard* gdk_display_get_primary_clipboard GdkDisplay* display")
(CFNC-3.94 "GdkKeymap* gdk_display_get_keymap GdkDisplay* display")
;;; consts (CFNC-3.94 "gboolean gdk_display_get_setting GdkDisplay* display char* name GValue* [value]" 'const)
;;; 3.96.0 (CFNC-3.94 "GdkDisplay* gdk_drag_context_get_display GdkDrag* context")
;;; 3.96.0 (CFNC-3.94 "GdkContentFormats* gdk_drag_context_get_formats GdkDrag* context")
(CFNC-3.94 "gboolean gdk_monitor_is_valid GdkMonitor* monitor")
(CFNC-3.94 "GList* gdk_seat_get_master_pointers GdkSeat* seat GdkSeatCapabilities capabilities")
;;; 3.96.0 (CFNC-3.94 "GdkDrag* gtk_drag_begin_with_coordinates GtkWidget* widget GdkDevice* device GdkContentFormats* targets GdkDragAction actions gint x gint y")
;;; 3.96.0 (CFNC-3.94 "void gtk_drag_source_set_icon_surface GtkWidget* widget cairo_surface_t* surface")
;;; 3.96.0 (CFNC-3.94 "void gtk_entry_set_icon_from_texture GtkEntry* entry GtkEntryIconPosition icon_pos GdkTexture* texture")
;;; 3.96.0 (CFNC-3.94 "GdkTexture* gtk_entry_get_icon_texture GtkEntry* entry GtkEntryIconPosition icon_pos")
(CFNC-3.94 "void gtk_entry_set_icon_drag_source GtkEntry* entry GtkEntryIconPosition icon_pos GdkContentFormats* formats GdkDragAction actions")
(CFNC-3.94 "gboolean gtk_header_bar_get_show_title_buttons GtkHeaderBar* bar")
(CFNC-3.94 "void gtk_header_bar_set_show_title_buttons GtkHeaderBar* bar gboolean setting")
(CFNC-3.94 "GtkIconTheme* gtk_icon_theme_get_for_display GdkDisplay* display")
(CFNC-3.94 "void gtk_icon_theme_set_display GtkIconTheme* icon_theme GdkDisplay* display")
(CFNC-3.94 "GdkTexture* gtk_icon_info_load_texture GtkIconInfo* icon_info")
;;; 3.96.0 (CFNC-3.94 "GtkWidget* gtk_image_new_from_texture GdkTexture* texture")
(CFNC-3.94 "GtkWidget* gtk_image_new_from_icon_name gchar* icon_name" 'const)
(CFNC-3.94 "GtkWidget* gtk_image_new_from_gicon GIcon* icon")
;;; 3.96.0 (CFNC-3.94 "void gtk_image_set_from_texture GtkImage* image GdkTexture* texture")
(CFNC-3.94 "void gtk_image_set_from_icon_name GtkImage* image gchar* icon_name" 'const)
(CFNC-3.94 "void gtk_image_set_from_gicon GtkImage* image GIcon* icon")
(CFNC-3.94 "void gtk_image_set_icon_size GtkImage* image GtkIconSize icon_size")
;;; 3.96.0 (CFNC-3.94 "cairo_surface_t* gtk_image_get_surface GtkImage* image")
;;; 3.96.0 (CFNC-3.94 "GdkTexture* gtk_image_get_texture GtkImage* image")
(CFNC-3.94 "GtkIconSize gtk_image_get_icon_size GtkImage* image")
(CFNC-3.94 "char* gtk_image_get_icon_name GtkImage* image" 'const-return)
(CFNC-3.94 "GIcon* gtk_image_get_gicon GtkImage* image")
;;; 3.96.0 (CFNC-3.94 "GtkWidget* gtk_invisible_new_for_display GdkDisplay* display")
;;; 3.96.0 (CFNC-3.94 "void gtk_invisible_set_display GtkInvisible* invisible GdkDisplay* display")
;;; 3.96.0 (CFNC-3.94 "GdkDisplay*gtk_invisible_get_display GtkInvisible* invisible")
;;; 3.96.0 (CFNC-3.94 "void gtk_menu_set_display GtkMenu* menu GdkDisplay* display")
(CFNC-3.94 "void gtk_render_icon GtkStyleContext* context cairo_t* cr GdkTexture* texture gdouble x gdouble y")
(CFNC-3.94 "GdkContentFormats* gtk_content_formats_add_text_targets GdkContentFormats* list")
(CFNC-3.94 "GdkContentFormats* gtk_content_formats_add_image_targets GdkContentFormats* list gboolean writable")
(CFNC-3.94 "GdkContentFormats* gtk_content_formats_add_uri_targets GdkContentFormats* list")
;;; (CFNC-3.94 "GdkAtom gtk_selection_data_get_target GtkSelectionData* selection_data")
;;; (CFNC-3.94 "GdkAtom gtk_selection_data_get_data_type GtkSelectionData* selection_data")
;;; (CFNC-3.94 "gint gtk_selection_data_get_format GtkSelectionData* selection_data")
;;; (CFNC-3.94 "guchar* gtk_selection_data_get_data GtkSelectionData* selection_data" 'const-return)
;;; (CFNC-3.94 "gint gtk_selection_data_get_length GtkSelectionData* selection_data")
;;; (CFNC-3.94 "guchar* gtk_selection_data_get_data_with_length GtkSelectionData* selection_data gint* [length]" 'const-return)
;;; (CFNC-3.94 "GdkDisplay* gtk_selection_data_get_display GtkSelectionData* selection_data")
(CFNC-3.94 "void gtk_selection_data_set GtkSelectionData* selection_data GdkAtom type gint format guchar* data gint length")
(CFNC-3.94 "gboolean gtk_selection_data_set_text GtkSelectionData* selection_data gchar* str gint len" 'const)
(CFNC-3.94 "guchar* gtk_selection_data_get_text GtkSelectionData* selection_data")
(CFNC-3.94 "gboolean gtk_selection_data_set_pixbuf GtkSelectionData* selection_data GdkPixbuf* pixbuf")
;;; 3.96.0 (CFNC-3.94 "cairo_surface_t* gtk_selection_data_get_surface GtkSelectionData* selection_data")
;;; 3.96.0 (CFNC-3.94 "gboolean gtk_selection_data_set_surface GtkSelectionData* selection_data cairo_surface_t* surface")
(CFNC-3.94 "GdkPixbuf* gtk_selection_data_get_pixbuf GtkSelectionData* selection_data")
(CFNC-3.94 "gboolean gtk_selection_data_set_texture GtkSelectionData* selection_data GdkTexture* texture")
(CFNC-3.94 "GdkTexture* gtk_selection_data_get_texture GtkSelectionData* selection_data")
(CFNC-3.94 "gboolean gtk_selection_data_set_uris GtkSelectionData* selection_data gchar** uris")
(CFNC-3.94 "gchar** gtk_selection_data_get_uris GtkSelectionData* selection_data")
(CFNC-3.94 "gboolean gtk_selection_data_get_targets GtkSelectionData* selection_data GdkAtom** [targets] gint* [natoms]")
(CFNC-3.94 "gboolean gtk_selection_data_targets_include_text GtkSelectionData* selection_data")
;;; (CFNC-3.94 "gboolean gtk_selection_data_targets_include_image GtkSelectionData* selection_data gboolean writable")
(CFNC-3.94 "gboolean gtk_selection_data_targets_include_uri GtkSelectionData* selection_data")
(CFNC-3.94 "gboolean gtk_targets_include_text GdkAtom* targets gint n_targets")
(CFNC-3.94 "gboolean gtk_targets_include_image GdkAtom* targets gint n_targets gboolean writable")
(CFNC-3.94 "gboolean gtk_targets_include_uri GdkAtom* targets gint n_targets")
;;; (CFNC-3.94 "GtkSelectionData* gtk_selection_data_copy GtkSelectionData* data")
;;; (CFNC-3.94 "void gtk_selection_data_free GtkSelectionData* data")
(CFNC-3.94 "GtkSettings* gtk_settings_get_for_display GdkDisplay* display")
(CFNC-3.94 "void gtk_style_context_add_provider_for_display GdkDisplay* display GtkStyleProvider* provider guint priority")
(CFNC-3.94 "void gtk_style_context_remove_provider_for_display GdkDisplay* display GtkStyleProvider* provider")
(CFNC-3.94 "void gtk_style_context_set_display GtkStyleContext* context GdkDisplay* display")
(CFNC-3.94 "GdkDisplay* gtk_style_context_get_display GtkStyleContext* context")
(CFNC-3.94 "void gtk_style_context_reset_widgets GdkDisplay* display")
(CFNC-3.94 "void gtk_text_buffer_insert_texture GtkTextBuffer* buffer GtkTextIter* iter GdkTexture* texture")
(CFNC-3.94 "void gtk_text_buffer_add_selection_clipboard GtkTextBuffer* buffer GdkClipboard* clipboard")
(CFNC-3.94 "void gtk_text_buffer_remove_selection_clipboard GtkTextBuffer* buffer GdkClipboard* clipboard")
(CFNC-3.94 "void gtk_text_buffer_cut_clipboard GtkTextBuffer* buffer GdkClipboard* clipboard gboolean default_editable")
(CFNC-3.94 "void gtk_text_buffer_copy_clipboard GtkTextBuffer* buffer GdkClipboard* clipboard")
(CFNC-3.94 "void gtk_text_buffer_paste_clipboard GtkTextBuffer* buffer GdkClipboard* clipboard GtkTextIter* override_location gboolean default_editable")
;;; 3.96.0 (CFNC-3.94 "char* gtk_tool_palette_get_drag_target_item void" 'const-return)
;;; 3.96.0 (CFNC-3.94 "char* gtk_tool_palette_get_drag_target_group void" 'const-return)
(CFNC-3.94 "void gtk_tooltip_set_icon GtkTooltip* tooltip GdkPaintable* paintable")
(CFNC-3.94 "void gtk_tooltip_set_icon_from_icon_name GtkTooltip* tooltip gchar* icon_name" 'const)
(CFNC-3.94 "void gtk_tooltip_set_icon_from_gicon GtkTooltip* tooltip GIcon* gicon")
(CFNC-3.94 "void gtk_tree_view_enable_model_drag_source GtkTreeView* tree_view GdkModifierType start_button_mask GdkContentFormats* formats GdkDragAction actions")
(CFNC-3.94 "void gtk_tree_view_enable_model_drag_dest GtkTreeView* tree_view GdkContentFormats* formats GdkDragAction actions")
(CFNC-3.94 "int gtk_widget_get_width GtkWidget* widget")
(CFNC-3.94 "int gtk_widget_get_height GtkWidget* widget")
(CFNC-3.94 "GdkClipboard* gtk_widget_get_clipboard GtkWidget* widget")
(CFNC-3.94 "GdkClipboard* gtk_widget_get_primary_clipboard GtkWidget* widget")
(CFNC-3.94 "gboolean gtk_widget_contains GtkWidget* widget gdouble x gdouble y")
;;; 3.96.0 (CFNC-3.94 "GtkWidget* gtk_widget_pick GtkWidget* widget gdouble x gdouble y")
(CFNC-3.94 "void gtk_widget_set_cursor GtkWidget* widget GdkCursor* cursor")
(CFNC-3.94 "void gtk_widget_set_cursor_from_name GtkWidget* widget char* name" 'const)
(CFNC-3.94 "GdkCursor* gtk_widget_get_cursor GtkWidget* widget")
(CFNC-3.94 "void gtk_window_set_display GtkWindow* window GdkDisplay* display")
;;; 3.96.0 (CFNC-3.94 "void gtk_window_set_icon GtkWindow* window GdkTexture* icon")
;;; 3.96.0 (CFNC-3.94 "GdkTexture* gtk_window_get_icon GtkWindow* window")
;;; 3.96.0 (CFNC-3.94 "void gtk_window_set_default_icon GdkTexture* icon")
(CFNC-3.94 "void gtk_window_fullscreen_on_monitor GtkWindow* window GdkMonitor* monitor")
(CFNC-3.94 "GdkTexture* gtk_text_iter_get_texture GtkTextIter* iter")
(CFNC-3.94 "void gtk_icon_view_enable_model_drag_source GtkIconView* icon_view GdkModifierType start_button_mask GdkContentFormats* targets GdkDragAction actions")
(CFNC-3.94 "void gtk_icon_view_enable_model_drag_dest GtkIconView* icon_view GdkContentFormats* targets GdkDragAction actions")
(CFNC-3.94 "GdkTexture* gtk_about_dialog_get_logo GtkAboutDialog* about")
(CFNC-3.94 "void gtk_about_dialog_set_logo GtkAboutDialog* about GdkPaintable* @logo")
(CFNC-3.94 "GtkWidget* gtk_button_new_from_icon_name gchar* icon_name" 'const)
(CFNC-3.94 "GtkWidget* gtk_cell_view_new_with_texture GdkTexture* texture")
(CFNC-3.94 "void gtk_drag_dest_set GtkWidget* widget GtkDestDefaults flags GdkContentFormats* targets GdkDragAction actions")
(CFNC-3.94 "GdkContentFormats* gtk_drag_dest_get_target_list GtkWidget* widget")
(CFNC-3.94 "void gtk_drag_dest_set_target_list GtkWidget* widget GdkContentFormats* @target_list")
(CFNC-3.94 "GdkContentFormats* gtk_drag_source_get_target_list GtkWidget* widget")
(CFNC-3.94 "void gtk_drag_source_set_target_list GtkWidget* widget GdkContentFormats* @target_list")
(CFNC-3.94 "GtkWidget* gtk_scale_button_new gdouble min gdouble max gdouble step gchar** icons" 'const)

;(CCAST-3.22 "GTK_APPLICATION" "GtkApplication*")
;(CCHK-3.94 "GTK_IS_APPLICATION" "GtkApplication*")
(CINT-3.94 "GTK_APPLICATION_INHIBIT_LOGOUT" "GtkApplicationInhibitFlags")
(CINT-3.94 "GTK_APPLICATION_INHIBIT_SWITCH" "GtkApplicationInhibitFlags")
(CINT-3.94 "GTK_APPLICATION_INHIBIT_SUSPEND" "GtkApplicationInhibitFlags")
(CINT-3.94 "GTK_APPLICATION_INHIBIT_IDLE" "GtkApplicationInhibitFlags")

(CFNC-3.94 "GtkApplication* gtk_application_new gchar* application_id GApplicationFlags flags" 'const)
(CFNC-3.94 "void gtk_application_add_window GtkApplication* application GtkWindow* window")
(CFNC-3.94 "void gtk_application_remove_window GtkApplication* application GtkWindow* window")
(CFNC-3.94 "GList* gtk_application_get_windows GtkApplication* application")
;for these see above (CFNC-3.94 "GMenuModel* gtk_application_get_app_menu GtkApplication* application")
;(CFNC-3.94 "void gtk_application_set_app_menu GtkApplication* application GMenuModel* app_menu")
;(CFNC-3.94 "GMenuModel* gtk_application_get_menubar GtkApplication* application")
;(CFNC-3.94 "void gtk_application_set_menubar GtkApplication* application GMenuModel* menubar")
;(CFNC-3.94 "GtkWindow* gtk_application_get_active_window GtkApplication* application")
(CFNC-3.94 "guint gtk_application_inhibit GtkApplication* application GtkWindow* window GtkApplicationInhibitFlags flags gchar* reason" 'const)
(CFNC-3.94 "void gtk_application_uninhibit GtkApplication* application guint cookie")
(CFNC-3.94 "GtkWindow* gtk_application_get_window_by_id GtkApplication* application guint id")
(CFNC-3.94 "gchar** gtk_application_list_action_descriptions GtkApplication* application")
;;; const (CFNC-3.94 "gchar** gtk_application_get_accels_for_action GtkApplication* application gchar* detailed_action_name" 'const)
(CFNC-3.94 "gchar** gtk_application_get_actions_for_accel GtkApplication* application gchar* accel" 'const)
;;; args (CFNC-3.94 "void gtk_application_set_accels_for_action GtkApplication* application gchar* detailed_action_name gchar* accels" 'const)
(CFNC-3.94 "gboolean gtk_application_prefers_app_menu GtkApplication* application")
(CFNC-3.94 "GMenu* gtk_application_get_menu_by_id GtkApplication* application gchar* id" 'const)

;;; TODO: g_application_run and various G_APPLICATION flags
;;; /usr/incude/glib-2.0/gio/gapplication.h gapplicationcommandline.h gioenumtypes.h?


;;; 3.94.0

(CINT-3.94 "GDK_MODE_DISABLED" "GdkInputMode")
(CINT-3.94 "GDK_MODE_SCREEN" "GdkInputMode")
(CINT-3.94 "GDK_MODE_SURFACE" "GdkInputMode")

;;; 3.93.0 (CFNC-3.94 "GdkDrag* gdk_drag_begin GdkSurface* window GList* targets")
;;; (CFNC-gtk2 "void gdk_drag_find_window GdkDrag* context GdkSurface* drag_window gint x_root gint y_root GdkSurface** [dest_window] GdkDragProtocol* [protocol]")
;;; (CFNC-gtk2 "gboolean gdk_drag_motion GdkDrag* context GdkSurface* dest_window GdkDragProtocol protocol gint x_root gint y_root GdkDragAction suggested_action GdkDragAction possible_actions guint32 time")
;;; 3.21.5 (CFNC-3.94 "cairo_t* gdk_cairo_create GdkSurface* window") ;-- moved up
;;; (CFNC-3.94 "GdkEvent* gdk_event_get_graphics_expose GdkSurface* window")
;;; 2.99.0 (CFNC-3.94 "GdkGrabStatus gdk_pointer_grab GdkSurface* window gboolean owner_events GdkEventMask event_mask GdkSurface* confine_to GdkCursor* cursor guint32 time")
;;; 2.99.0 (CFNC-3.94 "GdkGrabStatus gdk_keyboard_grab GdkSurface* window gboolean owner_events guint32 time")
;;;; (CFNC-3.94 "void gdk_device_get_state GdkDevice* device GdkSurface* window gdouble* axes GdkModifierType* [mask]")
;;;; (CFNC-3.94 "gboolean gdk_device_get_history GdkDevice* device GdkSurface* window guint32 start guint32 stop GdkTimeCoord*** [events] gint* [n_events]")
;;;; (CFNC-3.94 "void gdk_input_set_extension_events GdkSurface* window gint mask GdkExtensionMode mode")
;; GdkSurface -> GdkDrawable in gtk 2.2 -> GdkSurface in 3.99
;;; 3.93.0 (CFNC-3.94 "gboolean gdk_property_get GdkSurface* window GdkAtom property GdkAtom type gulong offset gulong length gint pdelete GdkAtom* [actual_property_type] gint* [actual_format] gint* [actual_length] guchar** [data]") 
;;; 3.93.0 (CFNC-3.94 "void gdk_property_change GdkSurface* window GdkAtom property GdkAtom type gint format GdkPropMode mode guchar* data gint nelements")
;;; 3.93.0 (CFNC-3.94 "void gdk_property_delete GdkSurface* window GdkAtom property")
;;; 3.93.0 (CFNC-3.94 "gboolean gdk_selection_owner_set GdkSurface* owner GdkAtom selection guint32 time gboolean send_event")
;;; 3.93.0 (CFNC-3.94 "GdkSurface* gdk_selection_owner_get GdkAtom selection")
;;; 3.93.0 (CFNC-3.94 "void gdk_selection_convert GdkSurface* requestor GdkAtom selection GdkAtom target guint32 time")
;;; 3.93.0 (CFNC-3.94 "gboolean gdk_selection_property_get GdkSurface* requestor guchar** [data] GdkAtom* [prop_type] gint* [prop_format]")
;;; 3.92.1 (CINT-3.94 "GDK_INPUT_OUTPUT" "GdkSurfaceClass") ; GdkSurfaceWindowClass in gtk 3
;;; 3.92.1 (CINT-3.94 "GDK_INPUT_ONLY" "GdkSurfaceClass")
;;; 2.90.7 (CINT-3.94 "GDK_SURFACE_DIALOG" "GdkSurfaceType")
;;; 3.92.1 (CINT-3.94 "GDK_WA_TITLE" "GdkSurfaceAttributesType")
;;; 3.92.1 (CINT-3.94 "GDK_WA_X" "GdkSurfaceAttributesType")
;;; 3.92.1 (CINT-3.94 "GDK_WA_Y" "GdkSurfaceAttributesType")
;;; 3.92.1 (CINT-3.94 "GDK_WA_CURSOR" "GdkSurfaceAttributesType")
;;; 2.91.0 (CINT-3.94 "GDK_WA_COLORMAP" "GdkSurfaceAttributesType")
;;; 3.92.1 (CINT-3.94 "GDK_WA_VISUAL" "GdkSurfaceAttributesType")
;;; 3.92.1 (CINT-3.94 "GDK_WA_WMCLASS" "GdkSurfaceAttributesType")
;;; 3.92.1 (CINT-3.94 "GDK_WA_NOREDIR" "GdkSurfaceAttributesType")
;;; 3.92.1 (CFNC-3.94 "GdkSurface* gdk_get_default_root_window void")
;;; (CFNC-gtk2 "void gtk_cell_renderer_render GtkCellRenderer* cell GdkSurface* window GtkWidget* widget GdkRectangle* background_area GdkRectangle* cell_area GdkRectangle* expose_area GtkCellRendererState flags")
;;; (CFNC-gtk2 "void gtk_drag_dest_set_proxy GtkWidget* widget GdkSurface* proxy_window GdkDragProtocol protocol gboolean use_coordinates")
;;; 3.91.1 (CFNC-3.94 "void gtk_im_context_set_client_window GtkIMContext* context GdkSurface* @window")
;;; removed 2.1 (CFNC-3.94 "gboolean gtk_selection_incr_event GdkSurface* window GdkEventProperty* event")
;;; (CFNC-gtk2 "GtkStyle* gtk_style_attach GtkStyle* style GdkSurface* window")
;;; (CFNC-gtk2 "void gtk_style_set_background GtkStyle* style GdkSurface* window GtkStateType state_type")
;;; (CFNC-gtk2 "void gtk_style_apply_default_background GtkStyle* style GdkSurface* window gboolean set_bg GtkStateType state_type GdkRectangle* area gint x gint y gint width gint height")
;;; ;(CFNC-gtk2 "void gtk_paint_hline GtkStyle* style GdkSurface* window GtkStateType state_type GdkRectangle* area GtkWidget* widget gchar* detail gint x1 gint x2 gint y")
;;; ;(CFNC-gtk2 "void gtk_paint_vline GtkStyle* style GdkSurface* window GtkStateType state_type GdkRectangle* area GtkWidget* widget gchar* detail gint y1 gint y2 gint x")
;;; ;(CFNC-gtk2 "void gtk_paint_shadow GtkStyle* style GdkSurface* window GtkStateType state_type GtkShadowType shadow_type GdkRectangle* area GtkWidget* widget gchar* detail gint x gint y gint width gint height")
;;;; 2.90.6 (CFNC-3.94 "void gtk_paint_polygon GtkStyle* style GdkSurface* window GtkStateType state_type GtkShadowType shadow_type GdkRectangle* area GtkWidget* widget gchar* detail GdkPoint* points gint npoints gboolean fill")
;;; ;(CFNC-gtk2 "void gtk_paint_arrow GtkStyle* style GdkSurface* window GtkStateType state_type GtkShadowType shadow_type GdkRectangle* area GtkWidget* widget gchar* detail GtkArrowType arrow_type gboolean fill gint x gint y gint width gint height")
;;; ;(CFNC-gtk2 "void gtk_paint_diamond GtkStyle* style GdkSurface* window GtkStateType state_type GtkShadowType shadow_type GdkRectangle* area GtkWidget* widget gchar* detail gint x gint y gint width gint height")
;;; ;(CFNC-gtk2 "void gtk_paint_box GtkStyle* style GdkSurface* window GtkStateType state_type GtkShadowType shadow_type GdkRectangle* area GtkWidget* widget gchar* detail gint x gint y gint width gint height")
;;; ;(CFNC-gtk2 "void gtk_paint_flat_box GtkStyle* style GdkSurface* window GtkStateType state_type GtkShadowType shadow_type GdkRectangle* area GtkWidget* widget gchar* detail gint x gint y gint width gint height")
;;; ;(CFNC-gtk2 "void gtk_paint_check GtkStyle* style GdkSurface* window GtkStateType state_type GtkShadowType shadow_type GdkRectangle* area GtkWidget* widget gchar* detail gint x gint y gint width gint height")
;;; ;(CFNC-gtk2 "void gtk_paint_option GtkStyle* style GdkSurface* window GtkStateType state_type GtkShadowType shadow_type GdkRectangle* area GtkWidget* widget gchar* detail gint x gint y gint width gint height")
;;; ;(CFNC-gtk2 "void gtk_paint_tab GtkStyle* style GdkSurface* window GtkStateType state_type GtkShadowType shadow_type GdkRectangle* area GtkWidget* widget gchar* detail gint x gint y gint width gint height")
;;; ;(CFNC-gtk2 "void gtk_paint_shadow_gap GtkStyle* style GdkSurface* window GtkStateType state_type GtkShadowType shadow_type GdkRectangle* area GtkWidget* widget gchar* detail gint x gint y gint width gint height GtkPositionType gap_side gint gap_x gint gap_width")
;;; ;(CFNC-gtk2 "void gtk_paint_box_gap GtkStyle* style GdkSurface* window GtkStateType state_type GtkShadowType shadow_type GdkRectangle* area GtkWidget* widget gchar* detail gint x gint y gint width gint height GtkPositionType gap_side gint gap_x gint gap_width")
;;; ;(CFNC-gtk2 "void gtk_paint_extension GtkStyle* style GdkSurface* window GtkStateType state_type GtkShadowType shadow_type GdkRectangle* area GtkWidget* widget gchar* detail gint x gint y gint width gint height GtkPositionType gap_side")
;;; ;(CFNC-gtk2 "void gtk_paint_focus GtkStyle* style GdkSurface* window GtkStateType state_type GdkRectangle* area GtkWidget* widget gchar* detail gint x gint y gint width gint height")
;;; ;(CFNC-gtk2 "void gtk_paint_slider GtkStyle* style GdkSurface* window GtkStateType state_type GtkShadowType shadow_type GdkRectangle* area GtkWidget* widget gchar* detail gint x gint y gint width gint height GtkOrientation orientation")
;;; ;(CFNC-gtk2 "void gtk_paint_handle GtkStyle* style GdkSurface* window GtkStateType state_type GtkShadowType shadow_type GdkRectangle* area GtkWidget* widget gchar* detail gint x gint y gint width gint height GtkOrientation orientation")
;;; ;;(CFNC-gtk2 "void gtk_paint_expander GtkStyle* style GdkSurface* window GtkStateType state_type GdkRectangle* area GtkWidget* widget gchar* detail gint x gint y GtkExpanderStyle expander_style")
;;; ;(CFNC-gtk2 "void gtk_paint_layout GtkStyle* style GdkSurface* window GtkStateType state_type gboolean use_text GdkRectangle* area GtkWidget* widget gchar* detail gint x gint y PangoLayout* layout")
;;; ;(CFNC-gtk2 "void gtk_paint_resize_grip GtkStyle* style GdkSurface* window GtkStateType state_type GdkRectangle* area GtkWidget* widget gchar* detail GdkSurfaceEdge edge gint x gint y gint width gint height")
;;; 3.93.0 (CFNC-3.94 "GdkSurface* gtk_text_view_get_window GtkTextView* text_view GtkTextWindowType win")
;;; 3.93.0 (CFNC-3.94 "GtkTextWindowType gtk_text_view_get_window_type GtkTextView* text_view GdkSurface* window")
;(CFNC-3.94 "void gtk_tree_view_column_cell_render GtkTreeViewColumn* tree_column GdkSurface* window GdkRectangle* background_area GdkRectangle* cell_area GdkRectangle* expose_area guint flags")
;(CFNC-3.94 "void gtk_tree_view_column_cell_draw_focus GtkTreeViewColumn* tree_column GdkSurface* window GdkRectangle* background_area GdkRectangle* cell_area GdkRectangle* expose_area guint flags")
;;; gtk 4 (CFNC-3.94 "GdkSurface* gtk_tree_view_get_bin_window GtkTreeView* tree_view")
;(CCAST "GDK_SURFACE_OBJECT(object)" "GdkSurfaceObject*")
;;; 3.89 (CFNC "GdkSurface* gdk_surface_new GdkSurface* parent GdkSurfaceAttr* attributes gint attributes_mask")
;;; 3.3.2 (CFNC "GdkSurface* gdk_surface_at_pointer gint* [win_x] gint* [win_y]")
;;; 3.89.2 (CFNC "void gdk_surface_reparent GdkSurface* window GdkSurface* new_parent gint x gint y")
;;; (CFNC-gtk2 "void gdk_surface_clear GdkSurface* window")
;;; (CFNC-gtk2 "void gdk_surface_clear_area GdkSurface* window gint x gint y gint width gint height")
;;; (CFNC-gtk2 "void gdk_surface_clear_area_e GdkSurface* window gint x gint y gint width gint height")
;;; 3.89 (CFNC "void gdk_surface_set_override_redirect GdkSurface* window gboolean override_redirect")
;;; (CFNC-gtk2 "void gdk_surface_shape_combine_mask GdkSurface* window GdkBitmap* mask gint x gint y")
;;; (CFNC "void gdk_surface_shape_combine_region GdkSurface* window GdkRegion* shape_region gint offset_x gint offset_y")
;;; 3.15 (CFNC "gboolean gdk_surface_set_static_gravities GdkSurface* window gboolean use_static") 
;;; (CFNC-gtk2 "GdkSurface* gdk_surface_foreign_new GdkNativeWindow anid")
;;; (CFNC-gtk2 "GdkSurface* gdk_surface_lookup GdkNativeWindow anid")
;;; 3.3.2 (CFNC "GdkSurface* gdk_surface_get_pointer GdkSurface* window gint* [x] gint* [y] GdkModifierType* [mask]")
;;; 3.93.0 (CFNC "void gdk_surface_set_icon_list GdkSurface* window GList* pixbufs")
;;; (CFNC-gtk2 "void gdk_surface_set_icon GdkSurface* window GdkSurface* icon_window GdkPixmap* pixmap GdkBitmap* mask")
;;; (CFNC "void gdk_surface_invalidate_region GdkSurface* window GdkRegion* region gboolean invalidate_children")
;;; (CFNC "void gdk_surface_invalidate_maybe_recurse GdkSurface* window GdkRegion* region lambda2 func lambda_data @func_info")
;;; (CFNC "GdkRegion* gdk_surface_get_update_area GdkSurface* window")
;;; 3.89.2 (CFNC "void gdk_surface_process_updates GdkSurface* window gboolean update_children")
;;; (CFNC-gtk2 "void gdk_surface_get_internal_paint_info GdkSurface* window GdkDrawable** [real_drawable] gint* [x_offset] gint* [y_offset]")
;;; 3.89 (CFNC "void gdk_surface_set_geometry_hints GdkSurface* window GdkGeometry* geometry GdkSurfaceHints geom_mask")
;;; 3.21.3 (CFNC "void gdk_surface_begin_paint_rect GdkSurface* window GdkRectangle* rectangle")
;;; 3.21.3 (CFNC "void gdk_surface_begin_paint_region GdkSurface* window GdkRegion* region")
;;; 3.21.3 (CFNC "void gdk_surface_end_paint GdkSurface* window")
;;; (CFNC-gtk2 "void gdk_surface_set_background GdkSurface* window GdkColor* color")
;;; (CFNC-gtk2 "void gdk_surface_set_back_pixmap GdkSurface* window GdkPixmap* pixmap gboolean parent_relative")
;;; (CFNC-gtk2 "void gdk_surface_get_geometry GdkSurface* window gint* [x] gint* [y] gint* [width] gint* [height] gint* [depth]")
;;; 3.92.1 (CFNC "void gtk_window_set_geometry_hints GtkWindow* window GtkWidget* geometry_widget GdkGeometry* geometry GdkSurfaceHints geom_mask")
;;; 2.99.0 (CFNC "GdkSurface* gdk_display_get_window_at_pointer GdkDisplay* display int* [win_x] int* [win_y]")
;;; 3.92.1 (CFNC "GdkSurface* gdk_screen_get_root_window GdkScreen* screen")
;;; 3.22.2 (CFNC "int gdk_screen_get_monitor_at_window GdkScreen* screen GdkSurface* window")
;;; 3.11.5 (CFNC "GdkSurface* gtk_widget_get_root_window GtkWidget* widget")
;;; changed return type 2.90.1 (CFNC "void gdk_surface_set_accept_focus GdkSurface* window gboolean accept_focus")
;;; changed return type 2.90.1 (CFNC "void gdk_surface_set_focus_on_map GdkSurface* window gboolean focus_on_map")
;;; 3.7.10 (CFNC "void gdk_surface_enable_synchronized_configure GdkSurface* window")
;;; 3.7.10 (CFNC "void gdk_surface_configure_finished GdkSurface* window")
;;; (CFNC "void gdk_display_store_clipboard GdkDisplay* display GdkSurface* clipboard_window guint32 time_ GdkAtom* targets gint n_targets")
;;; (CFNC "void gdk_surface_move_region GdkSurface* window GdkRegion* region gint dx gint dy")
;;; 3.22.2 (CFNC "GdkSurface* gdk_screen_get_active_window GdkScreen* screen")
;;; 3.15 (CFNC "void gdk_surface_set_composited GdkSurface* window gboolean composited")
;;; 3.91.2 (CFNC "GdkSurface* gtk_layout_get_bin_window GtkLayout* layout")
;;; 2.99.3 (CFNC "GdkSurface* gtk_plug_get_socket_window GtkPlug* plug")
;;; 2.99.3 (CFNC "GdkSurface* gtk_socket_get_plug_window GtkSocket* socket_")
;;; (STRUCT "GdkEventKey GdkEventType type GdkSurface* window guint32 time guint state guint keyval")
;;; 3.92.1 (CINT "GDK_SURFACE_OFFSCREEN" "GdkSurfaceType")
;;; 3.89.2 (CFNC "gboolean gdk_surface_ensure_native GdkSurface* window")
;;; 2.91.0 (CFNC "GdkPixmap* gdk_offscreen_window_get_pixmap GdkSurface* window")
;;; 3.89 (CFNC "void gdk_offscreen_window_set_embedder GdkSurface* window GdkSurface* embedder")
;;; 3.89 (CFNC "GdkSurface* gdk_offscreen_window_get_embedder GdkSurface* window")
;;; 3.89 (CFNC "void gdk_surface_geometry_changed GdkSurface* window")
;;; 3.13.3 (CFNC "void gdk_surface_flush GdkSurface* window")
;;; gtk 4 (CFNC "GdkSurface* gtk_viewport_get_bin_window GtkViewport* viewport")
;;; 2.91.2 (CFNC "GdkSurface* gtk_entry_get_text_window GtkEntry* entry")
;;; 2.91.2 (CFNC "GdkSurface* gtk_entry_get_icon_window GtkEntry* entry GtkEntryIconPosition icon_pos")
;;; 3.91.2 (CFNC "GdkSurface* gtk_paned_get_handle_window GtkPaned* paned")
;;; 3.89 (CFNC-3.0 "GdkSurface* gdk_surface_get_effective_parent GdkSurface* window")
;;; 3.89 (CFNC-3.0 "GdkSurface* gdk_surface_get_effective_toplevel GdkSurface* window")
;;; 2.99.0 (CFNC-3.0 "GdkSurface* gdk_display_get_window_at_device_position GdkDisplay* display GdkDevice* device gint* [win_x] gint* [win_y]")
;;; 3.15 (CFNC-3.0 "gboolean gdk_surface_get_composited GdkSurface* window")
;;; 2.90.6 (CFNC-3.0 "void gdk_surface_get_background GdkSurface* window GdkColor* color")
;;; 2.90.6 (CFNC-3.0 "void gdk_surface_get_back_pixmap GdkSurface* window GdkPixmap** [pixmap] gboolean* [parent_relative]")
;;; gtk 4 (CFNC-3.0 "GdkSurface* gtk_viewport_get_view_window GtkViewport* viewport")
;;; 3.89 (CFNC-3.0 "GdkSurface* gtk_button_get_event_window GtkButton* button")
;(CFNC-3.0 "void gdk_surface_invalidate_maybe_recurse GdkSurface* window cairo_region_t* region lambda2 func lambda_data @func_info")
;;; 3.21.5! (CFNC-3.0 "void gdk_surface_begin_paint_region GdkSurface* window cairo_region_t* region")
;;; 3.22.2 (CFNC-3.0 "cairo_pattern_t* gdk_surface_get_background_pattern GdkSurface* window")
;;; 2.91.6 (CFNC-3.0 "void gtk_style_apply_default_background GtkStyle* style cairo_t* cr GdkSurface* window GtkStateType state_type gint x gint y gint width gint height")
;;; ;(CFNC-gtk2 "void gtk_paint_resize_grip GtkStyle* style cairo_t* cr GtkStateType state_type GtkWidget* widget gchar* detail GdkSurfaceEdge edge gint x gint y gint width gint height")
;;; 3.89 (CFNC-3.0 "GdkVisual* gdk_surface_get_visual GdkSurface* window")
;;; 3.93.0 (CFNC-3.0 "GdkScreen* gdk_surface_get_screen GdkSurface* window")
;;; 3.89.2 (CFNC-3.0 "gboolean gtk_cairo_should_draw_window cairo_t* cr GdkSurface* window")
;;; 3.93.0 (CFNC-3.0 "void gtk_cairo_transform_to_window cairo_t* cr GtkWidget* widget GdkSurface* window")
;;; 3.22.2 (CFNC-3.0 "void gdk_surface_set_background_rgba GdkSurface* window GdkRGBA* rgba") 
;;; 3.94.0 (CFNC-3.0 "GdkSurface* gdk_device_get_window_at_position GdkDevice* device gint* [win_x] gint* [win_y]")
;;; 3.93.0 (CFNC-3.0 "void gdk_selection_send_notify GdkSurface* requestor GdkAtom selection GdkAtom target GdkAtom property guint32 time_")
;;; 3.93.0 (CFNC-3.0 "void gdk_selection_send_notify_for_display GdkDisplay* display GdkSurface* requestor GdkAtom selection GdkAtom target GdkAtom property guint32 time_")
;;; 3.94.0 (CFNC-3.10 "cairo_surface_t* gdk_cairo_surface_create_from_pixbuf GdkPixbuf* pixbuf int scale GdkSurface* for_window")
;;; 3.93.0 (CFNC-3.12 "void gdk_surface_set_event_compression GdkSurface* window gboolean event_compression")
;;; 3.93.0 (CFNC-3.12 "gboolean gdk_surface_get_event_compression GdkSurface* window")
;;; 3.94.0 (CFNC-3.12 "GdkSurface* gdk_device_get_last_event_window GdkDevice* device")
;;; 3.91.1 (CFNC-3.14 "GdkSurface* gtk_gesture_get_window GtkGesture* gesture")
;;; 3.91.1 (CFNC-3.14 "void gtk_gesture_set_window GtkGesture* gesture GdkSurface* window")
;;; 3.94.0 (CFNC-3.16 "void gdk_cairo_draw_from_gl cairo_t* cr GdkSurface* window int source int source_type int buffer_scale int x int y int width int height")
;;; 3.93.0 (CFNC-3.16 "void gdk_surface_mark_paint_from_clip GdkSurface* window cairo_t* cr")
;(CFNC-3.16 "GdkGLContext* gdk_surface_create_gl_context GdkSurface* window GdkGLProfile profile GError** [error]")
;;; 3.93.0 (CFNC-3.18 "void gdk_surface_fullscreen_on_monitor GdkSurface* window gint monitor")
;;; 3.93.0 (CFNC-3.20 "GdkDrag* gdk_drag_begin_from_point GdkSurface* window GdkDevice* device GList* targets gint x_root gint y_root")
;;; 3.93.0 (CFNC-3.20 "gboolean gdk_drag_context_manage_dnd GdkDrag* context GdkSurface* ipc_window GdkDragAction actions")
;;; 3.94.0 (CFNC-3.22 "GdkSurface* gdk_drawing_context_get_window GdkDrawingContext* context")
;;; 3.89 changed type? (CFNC-3.22 "gboolean gtk_show_uri_on_window GdkSurface* parent char* uri guint32 timestamp GError** [error]" 'const)
;;; 3.92.1 (CFNC-3.92 "GdkSurface* gdk_surface_new_input GdkSurface* parent gint event_mask GdkRectangle* position")
;;; 3.93.0 (CFNC-3.94 "gboolean gdk_event_get_window_state GdkEvent* event GdkSurfaceState* [changed] GdkSurfaceState* [new_state]")
;;; 3.93.0 (CFNC-3.94 "gboolean gdk_event_get_selection_property GdkEvent* event GdkAtom* [property] GdkAtom* [target] GdkSurface** [requestor]")
;;; 3.93.0 (CFNC-3.94 "void gdk_event_set_selection GdkEvent* event GdkSurface* window GdkAtom selection guint32 time")
;;; 3.94.0 GdkSurface->GdkSurface and presumably gdk_surface

(CINT-3.94 "GDK_SURFACE_TOPLEVEL" "GdkSurfaceType")
(CINT-3.94 "GDK_SURFACE_CHILD" "GdkSurfaceType")
(CINT-3.94 "GDK_SURFACE_TEMP" "GdkSurfaceType")
;;; 3.96 (CINT-3.94 "GDK_SURFACE_SUBSURFACE" "GdkSurfaceType")

(CINT-3.94 "GDK_HINT_POS" "GdkSurfaceHints")
(CINT-3.94 "GDK_HINT_MIN_SIZE" "GdkSurfaceHints")
(CINT-3.94 "GDK_HINT_MAX_SIZE" "GdkSurfaceHints")
(CINT-3.94 "GDK_HINT_BASE_SIZE" "GdkSurfaceHints")
(CINT-3.94 "GDK_HINT_ASPECT" "GdkSurfaceHints")
(CINT-3.94 "GDK_HINT_RESIZE_INC" "GdkSurfaceHints")
(CINT-3.94 "GDK_HINT_WIN_GRAVITY" "GdkSurfaceHints")
(CINT-3.94 "GDK_HINT_USER_POS" "GdkSurfaceHints")
(CINT-3.94 "GDK_HINT_USER_SIZE" "GdkSurfaceHints")

(CINT-3.94 "GDK_SURFACE_EDGE_NORTH_WEST" "GdkSurfaceEdge")
(CINT-3.94 "GDK_SURFACE_EDGE_NORTH" "GdkSurfaceEdge")
(CINT-3.94 "GDK_SURFACE_EDGE_NORTH_EAST" "GdkSurfaceEdge")
(CINT-3.94 "GDK_SURFACE_EDGE_WEST" "GdkSurfaceEdge")
(CINT-3.94 "GDK_SURFACE_EDGE_EAST" "GdkSurfaceEdge")
(CINT-3.94 "GDK_SURFACE_EDGE_SOUTH_WEST" "GdkSurfaceEdge")
(CINT-3.94 "GDK_SURFACE_EDGE_SOUTH" "GdkSurfaceEdge")
(CINT-3.94 "GDK_SURFACE_EDGE_SOUTH_EAST" "GdkSurfaceEdge")

(CINT-3.94 "GDK_SURFACE_TYPE_HINT_NORMAL" "GdkSurfaceTypeHint")
(CINT-3.94 "GDK_SURFACE_TYPE_HINT_DIALOG" "GdkSurfaceTypeHint")
(CINT-3.94 "GDK_SURFACE_TYPE_HINT_MENU" "GdkSurfaceTypeHint")
(CINT-3.94 "GDK_SURFACE_TYPE_HINT_TOOLBAR" "GdkSurfaceTypeHint")
(CINT-3.94 "GDK_SURFACE_TYPE_HINT_SPLASHSCREEN" "GdkSurfaceTypeHint")
(CINT-3.94 "GDK_SURFACE_TYPE_HINT_UTILITY" "GdkSurfaceTypeHint")
(CINT-3.94 "GDK_SURFACE_TYPE_HINT_DOCK" "GdkSurfaceTypeHint")
(CINT-3.94 "GDK_SURFACE_TYPE_HINT_DESKTOP" "GdkSurfaceTypeHint")
(CINT-3.94 "GDK_SURFACE_TYPE_HINT_DROPDOWN_MENU" "GdkSurfaceTypeHint")
(CINT-3.94 "GDK_SURFACE_TYPE_HINT_POPUP_MENU" "GdkSurfaceTypeHint")
(CINT-3.94 "GDK_SURFACE_TYPE_HINT_TOOLTIP" "GdkSurfaceTypeHint")
(CINT-3.94 "GDK_SURFACE_TYPE_HINT_NOTIFICATION" "GdkSurfaceTypeHint")
(CINT-3.94 "GDK_SURFACE_TYPE_HINT_COMBO" "GdkSurfaceTypeHint")
(CINT-3.94 "GDK_SURFACE_TYPE_HINT_DND" "GdkSurfaceTypeHint")

(CFNC-3.94 "GList* gdk_surface_get_children GdkSurface* surface")
;;; 3.96.0 (CFNC-3.94 "GList* gdk_surface_get_children_with_user_data GdkSurface* surface gpointer user_data")
(CFNC-3.94 "GList* gdk_surface_peek_children GdkSurface* surface")
(CFNC-3.94 "GdkCairoContext* gdk_surface_create_cairo_context GdkSurface* surface")
(CFNC-3.94 "GdkCursor* gdk_surface_get_cursor GdkSurface* surface")
(CFNC-3.94 "GdkCursor* gdk_surface_get_device_cursor GdkSurface* surface GdkDevice* device")
(CFNC-3.94 "GdkDisplay* gdk_surface_get_display GdkSurface* surface")
;;; 3.96.0 (CFNC-3.94 "GdkDrag* gdk_drag_begin GdkSurface* window GdkDevice* device GdkContentProvider* content GdkDragAction actions gint dx gint dy")
;;; 3.96.0 (CFNC-3.94 "GdkDrawingContext* gdk_surface_begin_draw_frame GdkSurface* window GdkDrawContext* context cairo_region_t* region")
;;; 3.96.0 (CFNC-3.94 "GdkEventMask gdk_surface_get_device_events GdkSurface* window GdkDevice* device")
;;; 3.96.0 (CFNC-3.94 "GdkEventMask gdk_surface_get_events GdkSurface* window")
(CFNC-3.94 "GdkFrameClock* gdk_surface_get_frame_clock GdkSurface* surface")
(CFNC-3.94 "GdkFullscreenMode gdk_surface_get_fullscreen_mode GdkSurface* surface")
(CFNC-3.94 "GdkGLContext* gdk_surface_create_gl_context GdkSurface* surface GError** [error]")
;;; too complicated (CFNC-3.94 "GdkGrabStatus gdk_seat_grab GdkSeat* seat GdkSurface* window GdkSeatCapabilities capabilities gboolean owner_events GdkCursor* cursor GdkEvent* event GdkSeatGrabPrepareFunc prepare_func lambda_data @func_info") ; the name func_info is built-in
;;; 3.96.0 (CFNC-3.94 "GdkMonitor* gdk_display_get_monitor_at_window GdkDisplay* display GdkSurface* window")
(CFNC-3.94 "GdkPaintable* gdk_paintable_new_empty int intrinsic_width int intrinsic_height")
;;; 3.96.0 (CFNC-3.94 "GdkSurface* gdk_device_get_window_at_position_double GdkDevice* device gdouble* [win_x] gdouble* [win_y]")
(CFNC-3.94 "GdkSurface* gdk_display_get_default_group GdkDisplay* display") 
;;; 3.96.0 (CFNC-3.94 "GdkSurface* gdk_drag_context_get_drag_window GdkDrag* context")
;;; 3.96.0 (CFNC-3.94 "GdkSurface* gdk_drag_context_get_source_window GdkDrag* context")
;;; 3.96.0 (CFNC-3.94 "GdkSurface* gdk_event_get_window GdkEvent* event" 'const)
;;; 3.96.0 (CFNC-3.94 "GdkSurface* gdk_gl_context_get_window GdkGLContext* context")
;;; 3.96.0 (CFNC-3.94 "GdkSurface* gdk_surface_get_device_position GdkSurface* surface GdkDevice* device gint* [x] gint* [y] GdkModifierType* mask")
;;; 3.96.0 (CFNC-3.94 "GdkSurface* gdk_surface_get_group GdkSurface* window")
(CFNC-3.94 "GdkSurface* gdk_surface_get_parent GdkSurface* surface")
(CFNC-3.94 "GdkSurface* gdk_surface_get_toplevel GdkSurface* surface")
(CFNC-3.94 "GdkSurface* gdk_surface_new_child GdkSurface* parent GdkRectangle* position")
(CFNC-3.94 "GdkSurface* gdk_surface_new_popup GdkDisplay* display GdkRectangle* position")
(CFNC-3.94 "GdkSurface* gdk_surface_new_temp GdkDisplay* display")
(CFNC-3.94 "GdkSurface* gdk_surface_new_toplevel GdkDisplay* display int width int height")
;;; 3.96.0 (CFNC-3.94 "GdkSurface* gtk_widget_get_parent_window GtkWidget* widget")
;;; 3.96.0 (CFNC-3.94 "GdkSurface* gtk_widget_get_window GtkWidget* widget")
(CFNC-3.94 "GdkSurfaceState gdk_surface_get_state GdkSurface* surface")
(CFNC-3.94 "GdkSurfaceType gdk_surface_get_surface_type GdkSurface* surface")
;;; 3.96.0 (CFNC-3.94 "GdkSurfaceType gdk_surface_get_window_type GdkSurface* window")
(CFNC-3.94 "GdkSurfaceTypeHint gdk_surface_get_type_hint GdkSurface* window")
(CFNC-3.94 "GdkSurfaceTypeHint gtk_window_get_type_hint GtkWindow* window")
(CFNC-3.94 "GdkVulkanContext* gdk_surface_create_vulkan_context GdkSurface* surface GError** [error]")
;;; 3.96.0 (CFNC-3.94 "cairo_region_t* gdk_surface_get_clip_region GdkSurface* window")
;;; 3.96.0 (CFNC-3.94 "cairo_region_t* gdk_surface_get_update_area GdkSurface* window")
;;; 3.96.0 (CFNC-3.94 "cairo_region_t* gdk_surface_get_visible_region GdkSurface* window")
;;; 3.96.0 (CFNC-3.94 "cairo_surface_t* gdk_surface_create_similar_image_surface GdkSurface* window cairo_format_t format int width int height int scale")
(CFNC-3.94 "cairo_surface_t* gdk_surface_create_similar_surface GdkSurface* surface cairo_content_t content int width int height")
;;; 3.96.0 (CFNC-3.94 "cairo_surface_t* gtk_icon_info_load_surface GtkIconInfo* icon_info GdkSurface* for_window GError** [error]")
;;; 3.96.0 (CFNC-3.94 "cairo_surface_t* gtk_icon_theme_load_surface GtkIconTheme* icon_theme gchar* icon_name gint size gint scale GdkSurface* for_window GtkIconLookupFlags flags GError** [error]" 'const)
;;; 3.96.0 (CFNC-3.94 "gboolean gdk_event_get_grab_window GdkEvent* event GdkSurface** [window]")
(CFNC-3.94 "gboolean gdk_surface_get_accept_focus GdkSurface* surface")
(CFNC-3.94 "gboolean gdk_surface_get_decorations GdkSurface* surface GdkWMDecoration* decorations")
(CFNC-3.94 "gboolean gdk_surface_get_focus_on_map GdkSurface* surface")
(CFNC-3.94 "gboolean gdk_surface_get_modal_hint GdkSurface* surface")
(CFNC-3.94 "gboolean gdk_surface_get_pass_through GdkSurface* surface")
(CFNC-3.94 "gboolean gdk_surface_get_support_multidevice GdkSurface* surface")
(CFNC-3.94 "gboolean gdk_surface_has_native GdkSurface* surface")
(CFNC-3.94 "gboolean gdk_surface_is_destroyed GdkSurface* surface")
(CFNC-3.94 "gboolean gdk_surface_is_input_only GdkSurface* surface")
;;; 3.96.0 (CFNC-3.94 "gboolean gdk_surface_is_shaped GdkSurface* window")
(CFNC-3.94 "gboolean gdk_surface_is_viewable GdkSurface* surface")
(CFNC-3.94 "gboolean gdk_surface_is_visible GdkSurface* surface")
(CFNC-3.94 "gboolean gdk_surface_show_window_menu GdkSurface* surface GdkEvent* event")
(CFNC-3.94 "gint gdk_surface_get_origin GdkSurface* surface gint* [x] gint* [y]")
(CFNC-3.94 "gint gdk_surface_get_scale_factor GdkSurface* surface")
(CFNC-3.94 "int gdk_surface_get_height GdkSurface* surface")
(CFNC-3.94 "int gdk_surface_get_width GdkSurface* surface")
;;; 3.96.0 (CFNC-3.94 "void gdk_surface_add_filter GdkSurface* window GdkFilterFunc func lambda_data @func_info")
(CFNC-3.94 "void gdk_surface_beep GdkSurface* surface")
(CFNC-3.94 "void gdk_surface_begin_move_drag GdkSurface* surface gint button gint x gint y guint32 timestamp")
(CFNC-3.94 "void gdk_surface_begin_move_drag_for_device GdkSurface* surface GdkDevice* device gint button gint x gint y guint32 timestamp")
(CFNC-3.94 "void gdk_surface_begin_resize_drag GdkSurface* surface GdkSurfaceEdge edge gint button gint root_x gint root_y guint32 timestamp")
(CFNC-3.94 "void gdk_surface_begin_resize_drag_for_device GdkSurface* surface GdkSurfaceEdge edge GdkDevice* device gint button gint x gint y guint32 timestamp")
(CFNC-3.94 "void gdk_surface_constrain_size GdkGeometry* geometry GdkSurfaceHints flags gint width gint height gint* [new_width] gint* [new_height]")
(CFNC-3.94 "void gdk_surface_coords_from_parent GdkSurface* surface gdouble parent_x gdouble parent_y gdouble* [x] gdouble* [y]")
(CFNC-3.94 "void gdk_surface_coords_to_parent GdkSurface* surface gdouble x gdouble y gdouble* [parent_x] gdouble* [parent_y]")
(CFNC-3.94 "void gdk_surface_deiconify GdkSurface* surface")
(CFNC-3.94 "void gdk_surface_destroy GdkSurface* surface")
;;; 3.96.0 (CFNC-3.94 "void gdk_surface_end_draw_frame GdkSurface* window GdkDrawingContext* context")
(CFNC-3.94 "void gdk_surface_focus GdkSurface* surface guint32 timestamp")
(CFNC-3.94 "void gdk_surface_freeze_updates GdkSurface* surface")
(CFNC-3.94 "void gdk_surface_fullscreen GdkSurface* surface")
(CFNC-3.94 "void gdk_surface_fullscreen_on_monitor GdkSurface* surface GdkMonitor* monitor")
(CFNC-3.94 "void gdk_surface_get_frame_extents GdkSurface* surface GdkRectangle* rect")
(CFNC-3.94 "void gdk_surface_get_geometry GdkSurface* surface gint* [x] gint* [y] gint* [width] gint* [height]")
(CFNC-3.94 "void gdk_surface_get_position GdkSurface* surface gint* [x] gint* [y]")
(CFNC-3.94 "void gdk_surface_get_root_coords GdkSurface* surface gint x gint y gint* [root_x] gint* [root_y]")
(CFNC-3.94 "void gdk_surface_get_root_origin GdkSurface* surface gint* [x] gint* [y]")
;;; 3.96.0 (CFNC-3.94 "void gdk_surface_get_user_data GdkSurface* surface gpointer* data")
(CFNC-3.94 "void gdk_surface_hide GdkSurface* surface")
(CFNC-3.94 "void gdk_surface_iconify GdkSurface* surface")
(CFNC-3.94 "void gdk_surface_input_shape_combine_region GdkSurface* surface cairo_region_t* shape_region gint offset_x gint offset_y")
;;; 3.96.0 (CFNC-3.94 "void gdk_surface_invalidate_rect GdkSurface* surface GdkRectangle* rect")
;;; 3.96.0 (CFNC-3.94 "void gdk_surface_invalidate_region GdkSurface* surface cairo_region_t* region")
(CFNC-3.94 "void gdk_surface_lower GdkSurface* surface")
(CFNC-3.94 "void gdk_surface_maximize GdkSurface* surface")
(CFNC-3.94 "void gdk_surface_merge_child_input_shapes GdkSurface* surface")
;;; 3.96.0 (CFNC-3.94 "void gdk_surface_merge_child_shapes GdkSurface* window")
(CFNC-3.94 "void gdk_surface_move GdkSurface* surface gint x gint y")
;;; 3.96.0 (CFNC-3.94 "void gdk_surface_move_region GdkSurface* window cairo_region_t* region gint dx gint dy")
(CFNC-3.94 "void gdk_surface_move_resize GdkSurface* window gint x gint y gint width gint height")
(CFNC-3.94 "void gdk_surface_move_to_rect GdkSurface* surface GdkRectangle* rect GdkGravity rect_anchor GdkGravity surface_anchor GdkAnchorHints anchor_hints gint rect_anchor_dx gint rect_anchor_dy")
(CFNC-3.94 "void gdk_surface_queue_expose GdkSurface* surface")
(CFNC-3.94 "void gdk_surface_raise GdkSurface* surface")
(CFNC-3.94 "void gdk_surface_register_dnd GdkSurface* surface")
;;; 3.96.0 (CFNC-3.94 "void gdk_surface_remove_filter GdkSurface* window GdkFilterFunc func lambda_data @func_info")
(CFNC-3.94 "void gdk_surface_resize GdkSurface* surface gint width gint height")
(CFNC-3.94 "void gdk_surface_restack GdkSurface* surface GdkSurface* sibling gboolean above")
;;; 3.96.0 (CFNC-3.94 "void gdk_surface_scroll GdkSurface* window gint dx gint dy")
(CFNC-3.94 "void gdk_surface_set_accept_focus GdkSurface* surface gboolean accept_focus")
(CFNC-3.94 "void gdk_surface_set_child_input_shapes GdkSurface* surface")
;;; 3.96.0 (CFNC-3.94 "void gdk_surface_set_child_shapes GdkSurface* window")
(CFNC-3.94 "void gdk_surface_set_cursor GdkSurface* surface GdkCursor* cursor")
(CFNC-3.94 "void gdk_surface_set_decorations GdkSurface* surface GdkWMDecoration decorations")
(CFNC-3.94 "void gdk_surface_set_device_cursor GdkSurface* surface GdkDevice* device GdkCursor* cursor")
;;; 3.96.0 (CFNC-3.94 "void gdk_surface_set_device_events GdkSurface* window GdkDevice* device GdkEventMask event_mask")
;;; 3.96.0 (CFNC-3.94 "void gdk_surface_set_events GdkSurface* window GdkEventMask event_mask")
(CFNC-3.94 "void gdk_surface_set_focus_on_map GdkSurface* surface gboolean focus_on_map")
(CFNC-3.94 "void gdk_surface_set_fullscreen_mode GdkSurface* surface GdkFullscreenMode mode")
(CFNC-3.94 "void gdk_surface_set_functions GdkSurface* surface GdkWMFunction functions")
(CFNC-3.94 "void gdk_surface_set_geometry_hints GdkSurface* surface GdkGeometry* geometry GdkSurfaceHints geom_mask")
;;; 3.96.0 (CFNC-3.94 "void gdk_surface_set_group GdkSurface* surface GdkSurface* leader")
(CFNC-3.94 "void gdk_surface_set_icon_list GdkSurface* surface GList* surfaces")
(CFNC-3.94 "void gdk_surface_set_icon_name GdkSurface* surface gchar* name")
(CFNC-3.94 "void gdk_surface_set_keep_above GdkSurface* surface gboolean setting")
(CFNC-3.94 "void gdk_surface_set_keep_below GdkSurface* surface gboolean setting")
(CFNC-3.94 "void gdk_surface_set_modal_hint GdkSurface* surface gboolean modal")
(CFNC-3.94 "void gdk_surface_set_opacity GdkSurface* surface gdouble opacity")
(CFNC-3.94 "void gdk_surface_set_opaque_region GdkSurface* surface cairo_region_t* region")
(CFNC-3.94 "void gdk_surface_set_pass_through GdkSurface* surface gboolean pass_through")
;;; 3.96.0 (CFNC-3.94 "void gdk_surface_set_role GdkSurface* surface gchar* role")
(CFNC-3.94 "void gdk_surface_set_shadow_width GdkSurface* surface gint left gint right gint top gint bottom")
;;; 3.96.0 (CFNC-3.94 "void gdk_surface_set_skip_pager_hint GdkSurface* surface gboolean skips_pager")
;;; 3.96.0 (CFNC-3.94 "void gdk_surface_set_skip_taskbar_hint GdkSurface* surface gboolean skips_taskbar")
(CFNC-3.94 "void gdk_surface_set_startup_id GdkSurface* surface gchar* startup_id")
(CFNC-3.94 "void gdk_surface_set_support_multidevice GdkSurface* surface gboolean support_multidevice")
(CFNC-3.94 "void gdk_surface_set_title GdkSurface* surface gchar* title")
(CFNC-3.94 "void gdk_surface_set_transient_for GdkSurface* surface GdkSurface* parent")
(CFNC-3.94 "void gdk_surface_set_type_hint GdkSurface* surface GdkSurfaceTypeHint hint")
;;; 3.96.0 (CFNC-3.94 "void gdk_surface_set_urgency_hint GdkSurface* surface gboolean urgent")
;;; 3.96.0 (CFNC-3.94 "void gdk_surface_set_user_data GdkSurface* @window gpointer user_data")
;;; 3.96.0 (CFNC-3.94 "void gdk_surface_shape_combine_region GdkSurface* window cairo_region_t* shape_region gint offset_x gint offset_y")
(CFNC-3.94 "void gdk_surface_show GdkSurface* surface")
(CFNC-3.94 "void gdk_surface_show_unraised GdkSurface* surface")
(CFNC-3.94 "void gdk_surface_stick GdkSurface* surface")
(CFNC-3.94 "void gdk_surface_thaw_updates GdkSurface* surface")
(CFNC-3.94 "void gdk_surface_unfullscreen GdkSurface* surface")
(CFNC-3.94 "void gdk_surface_unmaximize GdkSurface* surface")
(CFNC-3.94 "void gdk_surface_unstick GdkSurface* surface")
;;; 3.96.0 (CFNC-3.94 "void gdk_surface_withdraw GdkSurface* surface")
(CFNC-3.94 "void gtk_menu_popup_at_rect GtkMenu* menu GdkSurface* rect_window GdkRectangle* rect GdkGravity rect_anchor GdkGravity menu_anchor GdkEvent* trigger_event")
;;; 3.96.0 (CFNC-3.94 "void gtk_widget_register_window GtkWidget* widget GdkSurface* window")
;;; 3.96.0 (CFNC-3.94 "void gtk_widget_set_parent_window GtkWidget* widget GdkSurface* parent_window")
;;; 3.96.0 (CFNC-3.94 "void gtk_widget_set_window GtkWidget* widget GdkSurface* window")
;;; 3.96.0 (CFNC-3.94 "void gtk_widget_unregister_window GtkWidget* widget GdkSurface* window")
(CFNC-3.94 "void gtk_window_begin_resize_drag GtkWindow* window GdkSurfaceEdge edge gint button gint x gint y guint32 timestamp")
(CFNC-3.94 "void gtk_window_set_type_hint GtkWindow* window GdkSurfaceTypeHint hint")

(CCAST-3.94 "GDK_SURFACE(object)" "GdkSurface*")
(CCAST-3.94 "GTK_GESTURE_STYLUS(o)" "GtkGestureStylus*")
(CCAST-3.94 "GTK_EVENT_CONTROLLER(o)" "GtkEventController*")
(CCAST-3.94 "GDK_CAIRO_CONTEXT(obj)" "GdkCairoContext*")
;;; 3.96.0 (CCAST-3.94 "GDK_MEMORY_TEXTURE(obj)" "GdkMemoryTexture*")
(CCAST-3.94 "GDK_DROP(object)" "GdkDrop*")
(CCAST-3.94 "GDK_GL_TEXTURE(obj)" "GdkGLTexture*")
;;;(CCAST-3.94 "GDK_SNAPSHOT(obj)" "GdkSnapshot*")

(CCHK-3.94 "GTK_IS_GESTURE_STYLUS(o)" "GtkGestureStylus*")
(CCHK-3.94 "GTK_IS_EVENT_CONTROLLER(o)" "GtkEventController*")
(CCHK-3.94 "GDK_IS_SURFACE(object)" "GdkSurface*")
(CCHK-3.94 "GDK_IS_CAIRO_CONTEXT(obj)" "GdkCairoContext*")
;;; 3.96.0 (CCHK-3.94 "GDK_IS_MEMORY_TEXTURE(obj)" "GdkMemoryTexture*")
(CCHK-3.94 "GDK_IS_DROP(object)" "GdkDrop*")
(CCHK-3.94 "GDK_IS_GL_TEXTURE(obj)" "GdkGLTexture*")
;;;(CCHK-3.94 "GDK_IS_SNAPSHOT(obj)" "GdkSnapshot*")

(CINT-3.94 "GDK_MEMORY_DEFAULT" "GdkMemoryFormat")
(CINT-3.94 "GDK_MEMORY_B8G8R8A8_PREMULTIPLIED" "GdkMemoryFormat")
(CINT-3.94 "GDK_MEMORY_A8R8G8B8_PREMULTIPLIED" "GdkMemoryFormat")
(CINT-3.94 "GDK_MEMORY_B8G8R8A8" "GdkMemoryFormat")
(CINT-3.94 "GDK_MEMORY_A8R8G8B8" "GdkMemoryFormat")
(CINT-3.94 "GDK_MEMORY_R8G8B8A8" "GdkMemoryFormat")
(CINT-3.94 "GDK_MEMORY_A8B8G8R8" "GdkMemoryFormat")
(CINT-3.94 "GDK_MEMORY_R8G8B8" "GdkMemoryFormat")
(CINT-3.94 "GDK_MEMORY_B8G8R8" "GdkMemoryFormat")
(CINT-3.94 "GDK_MEMORY_N_FORMATS" "GdkMemoryFormat")

(CINT-3.94 "GDK_PAINTABLE_STATIC_SIZE" "GdkPaintableFlags")
(CINT-3.94 "GDK_PAINTABLE_STATIC_CONTENTS" "GdkPaintableFlags")

(CINT-3.94 "GDK_SURFACE_STATE_WITHDRAWN" "GdkSurfaceState")
(CINT-3.94 "GDK_SURFACE_STATE_ICONIFIED" "GdkSurfaceState")
(CINT-3.94 "GDK_SURFACE_STATE_MAXIMIZED" "GdkSurfaceState")
(CINT-3.94 "GDK_SURFACE_STATE_STICKY" "GdkSurfaceState")
(CINT-3.94 "GDK_SURFACE_STATE_FULLSCREEN" "GdkSurfaceState")
(CINT-3.94 "GDK_SURFACE_STATE_ABOVE" "GdkSurfaceState")
(CINT-3.94 "GDK_SURFACE_STATE_BELOW" "GdkSurfaceState")
(CINT-3.94 "GDK_SURFACE_STATE_FOCUSED" "GdkSurfaceState")
(CINT-3.94 "GDK_SURFACE_STATE_TILED" "GdkSurfaceState")
(CINT-3.94 "GDK_SURFACE_STATE_TOP_TILED" "GdkSurfaceState")
(CINT-3.94 "GDK_SURFACE_STATE_TOP_RESIZABLE" "GdkSurfaceState")
(CINT-3.94 "GDK_SURFACE_STATE_RIGHT_TILED" "GdkSurfaceState")
(CINT-3.94 "GDK_SURFACE_STATE_RIGHT_RESIZABLE" "GdkSurfaceState")
(CINT-3.94 "GDK_SURFACE_STATE_BOTTOM_TILED" "GdkSurfaceState")
(CINT-3.94 "GDK_SURFACE_STATE_BOTTOM_RESIZABLE" "GdkSurfaceState")
(CINT-3.94 "GDK_SURFACE_STATE_LEFT_TILED" "GdkSurfaceState")
(CINT-3.94 "GDK_SURFACE_STATE_LEFT_RESIZABLE" "GdkSurfaceState")

(CFNC-3.94 "GdkTexture* gdk_memory_texture_new int width int height GdkMemoryFormat format GBytes* bytes gsize stride")
(CFNC-3.94 "cairo_t* gdk_cairo_context_cairo_create GdkCairoContext* self")
(CFNC-3.94 "GdkDisplay* gdk_drop_get_display GdkDrop* self")
(CFNC-3.94 "GdkDevice* gdk_drop_get_device GdkDrop* self")
(CFNC-3.94 "GdkSurface* gdk_drop_get_surface GdkDrop* self")
(CFNC-3.94 "GdkContentFormats* gdk_drop_get_formats GdkDrop* self")
(CFNC-3.94 "GdkDragAction gdk_drop_get_actions GdkDrop* self")
(CFNC-3.94 "GdkDrag* gdk_drop_get_drag GdkDrop* self")
(CFNC-3.94 "void gdk_drop_status GdkDrop* self GdkDragAction actions")
(CFNC-3.94 "void gdk_drop_finish GdkDrop* self GdkDragAction action")
;;; arg (CFNC-3.94 "void gdk_drop_read_async GdkDrop* self char** mime_types int io_priority GCancellable* cancellable GAsyncReadyCallback callback gpointer user_data")
;;; arg (CFNC-3.94 "GInputStream* gdk_drop_read_finish GdkDrop* self GAsyncResult* result char** out_mime_type GError** [error]")
(CFNC-3.94 "void gdk_drop_read_value_async GdkDrop* self GType type int io_priority GCancellable* cancellable GAsyncReadyCallback callback gpointer user_data")
(CFNC-3.94 "GValue* gdk_drop_read_value_finish GdkDrop* self GAsyncResult* result GError** [error]" 'const-return)
(CFNC-3.94 "void gdk_drop_read_text_async GdkDrop* drop GCancellable* cancellable GAsyncReadyCallback callback gpointer user_data")
(CFNC-3.94 "char* gdk_drop_read_text_finish GdkDrop* drop GAsyncResult* result GError** [error]")
;;; notify (CFNC-3.94 "GdkTexture* gdk_gl_texture_new GdkGLContext* context guint id int width int height GDestroyNotify destroy gpointer data")
(CFNC-3.94 "void gdk_gl_texture_release GdkGLTexture* self")
;;; 3.96.0 (CFNC-3.94 "void gdk_paintable_snapshot GdkPaintable* paintable GdkSnapshot* snapshot double width double height")
(CFNC-3.94 "GdkPaintable* gdk_paintable_get_current_image GdkPaintable* paintable")
(CFNC-3.94 "GdkPaintableFlags gdk_paintable_get_flags GdkPaintable* paintable")
(CFNC-3.94 "int gdk_paintable_get_intrinsic_width GdkPaintable* paintable")
(CFNC-3.94 "int gdk_paintable_get_intrinsic_height GdkPaintable* paintable")
(CFNC-3.94 "double gdk_paintable_get_intrinsic_aspect_ratio GdkPaintable* paintable")
(CFNC-3.94 "void gdk_paintable_compute_concrete_size GdkPaintable* paintable double specified_width double specified_height double default_width double default_height double* [concrete_width] double* [concrete_height]")
(CFNC-3.94 "void gdk_paintable_invalidate_contents GdkPaintable* paintable")
(CFNC-3.94 "void gdk_paintable_invalidate_size GdkPaintable* paintable")
(CFNC-3.94 "GtkWidget* gtk_event_controller_get_widget GtkEventController* controller")
(CFNC-3.94 "gboolean gtk_event_controller_handle_event GtkEventController* controller GdkEvent* event")
(CFNC-3.94 "void gtk_event_controller_reset GtkEventController* controller")
(CFNC-3.94 "GtkPropagationPhase gtk_event_controller_get_propagation_phase GtkEventController* controller")
(CFNC-3.94 "void gtk_event_controller_set_propagation_phase GtkEventController* controller GtkPropagationPhase phase")
(CFNC-3.94 "GtkGesture* gtk_gesture_stylus_new void")
(CFNC-3.94 "gboolean gtk_gesture_stylus_get_axis GtkGestureStylus* gesture GdkAxisUse axis gdouble* [value]")
;;; arg (CFNC-3.94 "gboolean gtk_gesture_stylus_get_axes GtkGestureStylus* gesture GdkAxisUse [axes] gdouble** [values]")
(CFNC-3.94 "gboolean gtk_gesture_stylus_get_backlog GtkGestureStylus* gesture GdkTimeCoord** backlog guint* [n_elems]")
(CFNC-3.94 "GdkDeviceTool* gtk_gesture_stylus_get_device_tool GtkGestureStylus* gesture")
(CFNC-3.94 "GtkWidget* gtk_media_controls_new GtkMediaStream* stream")
(CFNC-3.94 "GtkMediaStream* gtk_media_controls_get_media_stream GtkMediaControls* controls")
(CFNC-3.94 "void gtk_media_controls_set_media_stream GtkMediaControls* controls GtkMediaStream* stream")
(CFNC-3.94 "GtkMediaStream* gtk_media_file_new void")
(CFNC-3.94 "GtkMediaStream* gtk_media_file_new_for_filename char* filename")
(CFNC-3.94 "GtkMediaStream* gtk_media_file_new_for_resource char* resource_path")
(CFNC-3.94 "GtkMediaStream* gtk_media_file_new_for_file GFile* file")
(CFNC-3.94 "GtkMediaStream* gtk_media_file_new_for_input_stream GInputStream* stream")
(CFNC-3.94 "void gtk_media_file_clear GtkMediaFile* self")
(CFNC-3.94 "void gtk_media_file_set_filename GtkMediaFile* self char* filename")
(CFNC-3.94 "void gtk_media_file_set_resource GtkMediaFile* self char* resource_path")
(CFNC-3.94 "void gtk_media_file_set_file GtkMediaFile* self GFile* file")
(CFNC-3.94 "GFile* gtk_media_file_get_file GtkMediaFile* self")
(CFNC-3.94 "void gtk_media_file_set_input_stream GtkMediaFile* self GInputStream* stream")
(CFNC-3.94 "GInputStream* gtk_media_file_get_input_stream GtkMediaFile* self")
(CFNC-3.94 "gboolean gtk_media_stream_is_prepared GtkMediaStream* self")
(CFNC-3.94 "GError* gtk_media_stream_get_error GtkMediaStream* self" 'const-return)
(CFNC-3.94 "gboolean gtk_media_stream_has_audio GtkMediaStream* self")
(CFNC-3.94 "gboolean gtk_media_stream_has_video GtkMediaStream* self")
(CFNC-3.94 "void gtk_media_stream_play GtkMediaStream* self")
(CFNC-3.94 "void gtk_media_stream_pause GtkMediaStream* self")
(CFNC-3.94 "gboolean gtk_media_stream_get_playing GtkMediaStream* self")
(CFNC-3.94 "void gtk_media_stream_set_playing GtkMediaStream* self gboolean playing")
(CFNC-3.94 "gboolean gtk_media_stream_get_ended GtkMediaStream* self")
(CFNC-3.94 "gint64 gtk_media_stream_get_timestamp GtkMediaStream* self")
(CFNC-3.94 "gint64 gtk_media_stream_get_duration GtkMediaStream* self")
(CFNC-3.94 "gboolean gtk_media_stream_is_seekable GtkMediaStream* self")
(CFNC-3.94 "gboolean gtk_media_stream_is_seeking GtkMediaStream* self")
(CFNC-3.94 "void gtk_media_stream_seek GtkMediaStream* self gint64 timestamp")
(CFNC-3.94 "gboolean gtk_media_stream_get_loop GtkMediaStream* self")
(CFNC-3.94 "void gtk_media_stream_set_loop GtkMediaStream* self gboolean loop")
(CFNC-3.94 "gboolean gtk_media_stream_get_muted GtkMediaStream* self")
(CFNC-3.94 "void gtk_media_stream_set_muted GtkMediaStream* self gboolean muted")
(CFNC-3.94 "double gtk_media_stream_get_volume GtkMediaStream* self")
(CFNC-3.94 "void gtk_media_stream_set_volume GtkMediaStream* self double volume")
(CFNC-3.94 "void gtk_media_stream_realize GtkMediaStream* self GdkSurface* surface")
(CFNC-3.94 "void gtk_media_stream_unrealize GtkMediaStream* self GdkSurface* surface")
(CFNC-3.94 "void gtk_media_stream_prepared GtkMediaStream* self gboolean has_audio gboolean has_video gboolean seekable gint64 duration")
(CFNC-3.94 "void gtk_media_stream_unprepared GtkMediaStream* self")
(CFNC-3.94 "void gtk_media_stream_update GtkMediaStream* self gint64 timestamp")
(CFNC-3.94 "void gtk_media_stream_ended GtkMediaStream* self")
(CFNC-3.94 "void gtk_media_stream_seek_success GtkMediaStream* self")
(CFNC-3.94 "void gtk_media_stream_seek_failed GtkMediaStream* self")
(CFNC-3.94 "void gtk_media_stream_gerror GtkMediaStream* self GError* error")
(CFNC-3.94 "GtkWidget* gtk_picture_new void")
(CFNC-3.94 "GtkWidget* gtk_picture_new_for_paintable GdkPaintable* paintable")
(CFNC-3.94 "GtkWidget* gtk_picture_new_for_pixbuf GdkPixbuf* pixbuf")
(CFNC-3.94 "GtkWidget* gtk_picture_new_for_file GFile* file")
(CFNC-3.94 "GtkWidget* gtk_picture_new_for_filename gchar* filename")
(CFNC-3.94 "GtkWidget* gtk_picture_new_for_resource gchar* resource_path")
(CFNC-3.94 "void gtk_picture_set_paintable GtkPicture* self GdkPaintable* paintable")
(CFNC-3.94 "GdkPaintable* gtk_picture_get_paintable GtkPicture* self")
(CFNC-3.94 "void gtk_picture_set_file GtkPicture* self GFile* file")
(CFNC-3.94 "GFile* gtk_picture_get_file GtkPicture* self")
(CFNC-3.94 "void gtk_picture_set_filename GtkPicture* self gchar* filename")
(CFNC-3.94 "void gtk_picture_set_resource GtkPicture* self gchar* resource_path")
(CFNC-3.94 "void gtk_picture_set_pixbuf GtkPicture* self GdkPixbuf* pixbuf")
(CFNC-3.94 "void gtk_picture_set_keep_aspect_ratio GtkPicture* self gboolean keep_aspect_ratio")
(CFNC-3.94 "gboolean gtk_picture_get_keep_aspect_ratio GtkPicture* self")
(CFNC-3.94 "void gtk_picture_set_can_shrink GtkPicture* self gboolean can_shrink")
(CFNC-3.94 "gboolean gtk_picture_get_can_shrink GtkPicture* self")
(CFNC-3.94 "void gtk_picture_set_alternative_text GtkPicture* self char* alternative_text")
(CFNC-3.94 "char* gtk_picture_get_alternative_text GtkPicture* self" 'const-return)
(CFNC-3.94 "GtkWidget* gtk_video_new void")
(CFNC-3.94 "GtkWidget* gtk_video_new_for_media_stream GtkMediaStream* stream")
(CFNC-3.94 "GtkWidget* gtk_video_new_for_file GFile* file")
(CFNC-3.94 "GtkWidget* gtk_video_new_for_filename char* filename")
(CFNC-3.94 "GtkWidget* gtk_video_new_for_resource char* resource_path")
(CFNC-3.94 "GtkMediaStream* gtk_video_get_media_stream GtkVideo* self")
(CFNC-3.94 "void gtk_video_set_media_stream GtkVideo* self GtkMediaStream* stream")
(CFNC-3.94 "GFile* gtk_video_get_file GtkVideo* self")
(CFNC-3.94 "void gtk_video_set_file GtkVideo* self GFile* file")
(CFNC-3.94 "void gtk_video_set_filename GtkVideo* self char* filename")
(CFNC-3.94 "void gtk_video_set_resource GtkVideo* self char* resource_path")
(CFNC-3.94 "gboolean gtk_video_get_autoplay GtkVideo* self")
(CFNC-3.94 "void gtk_video_set_autoplay GtkVideo* self gboolean autoplay")
(CFNC-3.94 "gboolean gtk_video_get_loop GtkVideo* self")
(CFNC-3.94 "void gtk_video_set_loop GtkVideo* self gboolean loop")
(CFNC-3.94 "GdkPaintable* gtk_widget_paintable_new GtkWidget* widget")
(CFNC-3.94 "GtkWidget* gtk_widget_paintable_get_widget GtkWidgetPaintable* self")
(CFNC-3.94 "void gtk_widget_paintable_set_widget GtkWidgetPaintable* self GtkWidget* widget")

(CFNC-3.94 "void gtk_frame_set_label_align GtkFrame* frame gfloat xalign")
(CFNC-3.94 "gfloat gtk_frame_get_label_align GtkFrame* frame")
(CFNC-3.94 "GtkPadController* gtk_pad_controller_new GActionGroup* group GdkDevice* pad")
(CFNC-3.94 "void gtk_widget_size_allocate GtkWidget* widget GtkAllocation* allocation int baseline")

;;; 3.96.0:
;;; 3.96.0 (CFNC-3.96 "void gtk_box_reorder_child GtkBox* box GtkWidget* child GtkWidget* sibling")
(CFNC-3.96 "GtkWidget* gtk_drag_get_source_widget GdkDrag* context")
(CFNC-3.96 "void gtk_search_bar_connect_entry GtkSearchBar* bar GtkEditable* entry")
(CFNC-3.96 "GtkEditable* gtk_tree_view_get_search_entry GtkTreeView* tree_view")
(CFNC-3.96 "void gtk_tree_view_set_search_entry GtkTreeView* tree_view GtkEditable* entry")

(CINT-3.96 "GTK_EDITABLE_PROP_TEXT" "GtkEditableProperties")
(CINT-3.96 "GTK_EDITABLE_PROP_CURSOR_POSITION" "GtkEditableProperties")
(CINT-3.96 "GTK_EDITABLE_PROP_SELECTION_BOUND" "GtkEditableProperties")
(CINT-3.96 "GTK_EDITABLE_PROP_EDITABLE" "GtkEditableProperties")
(CINT-3.96 "GTK_EDITABLE_PROP_WIDTH_CHARS" "GtkEditableProperties")
(CINT-3.96 "GTK_EDITABLE_PROP_MAX_WIDTH_CHARS" "GtkEditableProperties")
(CINT-3.96 "GTK_EDITABLE_PROP_XALIGN" "GtkEditableProperties")
(CINT-3.96 "GTK_EDITABLE_NUM_PROPERTIES" "GtkEditableProperties")

(CINT-3.96 "GTK_OVERFLOW_VISIBLE" "GtkOverflow")
(CINT-3.96 "GTK_OVERFLOW_HIDDEN" "GtkOverflow")

(CINT-3.96 "GTK_PICK_DEFAULT" "GtkPickFlags")
(CINT-3.96 "GTK_PICK_INSENSITIVE" "GtkPickFlags")
(CINT-3.96 "GTK_PICK_NON_TARGETABLE" "GtkPickFlags")

(CINT-3.96 "GTK_REVEALER_TRANSITION_TYPE_SWING_RIGHT" "GtkRevealerTransitionType")
(CINT-3.96 "GTK_REVEALER_TRANSITION_TYPE_SWING_LEFT" "GtkRevealerTransitionType")
(CINT-3.96 "GTK_REVEALER_TRANSITION_TYPE_SWING_UP" "GtkRevealerTransitionType")
(CINT-3.96 "GTK_REVEALER_TRANSITION_TYPE_SWING_DOWN" "GtkRevealerTransitionType")

(CINT-3.96 "GTK_STACK_TRANSITION_TYPE_OVER_DOWN_UP" "GtkStackTransitionType")
(CINT-3.96 "GTK_STACK_TRANSITION_TYPE_OVER_LEFT_RIGHT" "GtkStackTransitionType")
(CINT-3.96 "GTK_STACK_TRANSITION_TYPE_OVER_RIGHT_LEFT" "GtkStackTransitionType")
(CINT-3.96 "GTK_STACK_TRANSITION_TYPE_ROTATE_LEFT" "GtkStackTransitionType")
(CINT-3.96 "GTK_STACK_TRANSITION_TYPE_ROTATE_RIGHT" "GtkStackTransitionType")
(CINT-3.96 "GTK_STACK_TRANSITION_TYPE_ROTATE_LEFT_RIGHT" "GtkStackTransitionType")

(CINT-3.96 "GDK_DRAG_CANCEL_NO_TARGET" "GdkDragCancelReason")
(CINT-3.96 "GDK_DRAG_CANCEL_USER_CANCELLED" "GdkDragCancelReason")
(CINT-3.96 "GDK_DRAG_CANCEL_ERROR" "GdkDragCancelReason")

(CCAST-3.96 "GTK_NOTEBOOK_PAGE(obj)" "GtkNotebookPage*")
(CCHK-3.96 "GTK_IS_NOTEBOOK_PAGE(obj)" "GtkNotebookPage*")

(CCAST-3.96 "GDK_DRAG(obj)" "GdkDrag*")
(CCHK-3.96 "GDK_IS_DRAG(obj)" "GdkDrag*")

(CCAST-3.96 "GTK_EVENT_CONTROLLER_LEGACY(obj)" "GtkEventControllerLegacy*")
(CCHK-3.96 "GTK_IS_EVENT_CONTROLLER_LEGACY(obj)" "GtkEventControllerLegacy*")

(CCAST-3.96 "GTK_PASSWORD_ENTRY(obj)" "GtkPasswordEntry*")
(CCHK-3.96 "GTK_IS_PASSWORD_ENTRY(obj)" "GtkPasswordEntry*")

(CCAST-3.96 "GTK_TEXT(obj)" "GtkText*")
(CCHK-3.96 "GTK_IS_TEXT(obj)" "GtkText*")

(CFNC-3.96 "GtkWidget* gtk_menu_bar_new_from_model GMenuModel* model")
;;; 3.96.0 (CFNC-3.96 "gboolean gdk_surface_handle_event GdkEvent* event")
;;; 3.96.0 (CFNC-3.96 "GdkGrabStatus gdk_device_grab GdkDevice* device GdkSurface* surface GdkGrabOwnership grab_ownership gboolean owner_events GdkEventMask event_mask GdkCursor* cursor guint32 time_")
;;; 3.96.0 (CFNC-3.96 "void gdk_device_ungrab GdkDevice* device guint32 time_")
;;; 3.96.0 (CFNC-3.96 "void gtk_application_set_screensaver_active GtkApplication* application gboolean active")
(CFNC-3.96 "GtkAssistantPage* gtk_assistant_get_page GtkAssistant* assistant GtkWidget* child")
(CFNC-3.96 "GtkWidget* gtk_assistant_page_get_child GtkAssistantPage* page")
(CFNC-3.96 "GListModel* gtk_assistant_get_pages GtkAssistant* assistant")
(CFNC-3.96 "void gtk_box_insert_child_after GtkBox* box GtkWidget* child GtkWidget* sibling")
(CFNC-3.96 "void gtk_box_reorder_child_after GtkBox* box GtkWidget* child GtkWidget* sibling")
(CFNC-3.96 "void gtk_css_provider_load_named GtkCssProvider* provider char* name char* variant")
;;; 3.96.0 (CFNC-3.96 "float gtk_editable_get_alignment GtkEditable* editable")
(CFNC-3.96 "void gtk_editable_set_alignment GtkEditable* editable float xalign")
(CFNC-3.96 "int gtk_editable_get_width_chars GtkEditable* editable")
(CFNC-3.96 "void gtk_editable_set_width_chars GtkEditable* editable int n_chars")
(CFNC-3.96 "int gtk_editable_get_max_width_chars GtkEditable* editable")
(CFNC-3.96 "void gtk_editable_set_max_width_chars GtkEditable* editable int n_chars")
(CFNC-3.96 "guint gtk_editable_install_properties GObjectClass* object_class guint first_prop")
(CFNC-3.96 "void gtk_editable_init_delegate GtkEditable* editable")
(CFNC-3.96 "void gtk_editable_finish_delegate GtkEditable* editable")
(CFNC-3.96 "gboolean gtk_editable_delegate_set_property GObject* object guint prop_id GValue* value GParamSpec* pspec")
(CFNC-3.96 "gboolean gtk_editable_delegate_get_property GObject* object guint prop_id GValue* value GParamSpec* pspec")
(CFNC-3.96 "GtkWidget* gtk_event_controller_key_get_focus_origin GtkEventControllerKey* controller")
(CFNC-3.96 "GtkWidget* gtk_event_controller_key_get_focus_target GtkEventControllerKey* controller")
(CFNC-3.96 "GtkWidget* gtk_event_controller_motion_get_pointer_origin GtkEventControllerMotion* controller")
(CFNC-3.96 "GtkWidget* gtk_event_controller_motion_get_pointer_target GtkEventControllerMotion* controller")
(CFNC-3.96 "void gtk_fixed_get_child_position GtkFixed* fixed GtkWidget* widget gint* [x] gint* [y]")
(CFNC-3.96 "void gtk_fixed_set_child_transform GtkFixed* fixed GtkWidget* widget GskTransform* transform")
(CFNC-3.96 "GskTransform* gtk_fixed_get_child_transform GtkFixed* fixed GtkWidget* widget")
(CFNC-3.96 "void gtk_grid_query_child GtkGrid* grid GtkWidget* child gint* [left] gint* [top] gint* [width] gint* [height]")
(CFNC-3.96 "void gtk_list_box_set_show_separators GtkListBox* box gboolean show_separators")
(CFNC-3.96 "gboolean gtk_list_box_get_show_separators GtkListBox* box")
(CFNC-3.96 "GtkNotebookPage* gtk_notebook_get_page GtkNotebook* notebook GtkWidget* child")
(CFNC-3.96 "GtkWidget* gtk_notebook_page_get_child GtkNotebookPage* page")
(CFNC-3.96 "GListModel* gtk_notebook_get_pages GtkNotebook* notebook")
(CFNC-3.96 "void gtk_popover_menu_add_submenu GtkPopoverMenu* popover GtkWidget* submenu char* name")
(CFNC-3.96 "GtkStackPage* gtk_stack_get_page GtkStack* stack GtkWidget* child")
(CFNC-3.96 "GtkWidget* gtk_stack_page_get_child GtkStackPage* page")
(CFNC-3.96 "GtkSelectionModel* gtk_stack_get_pages GtkStack* stack")
(CFNC-3.96 "void gtk_widget_allocate GtkWidget* widget int width int height int baseline GskTransform* transform")
(CFNC-3.96 "void gtk_widget_set_layout_manager GtkWidget* widget GtkLayoutManager* layout_manager")
(CFNC-3.96 "GtkLayoutManager* gtk_widget_get_layout_manager GtkWidget* widget")
(CFNC-3.96 "void gtk_widget_class_set_layout_manager_type GtkWidgetClass* widget_class GType type")
(CFNC-3.96 "void gtk_widget_set_can_target GtkWidget* widget gboolean can_target")
(CFNC-3.96 "gboolean gtk_widget_get_can_target GtkWidget* widget")
(CFNC-3.96 "GtkRoot* gtk_widget_get_root GtkWidget* widget")
(CFNC-3.96 "gboolean gtk_widget_compute_transform GtkWidget* widget GtkWidget* target graphene_matrix_t* out_transform")
(CFNC-3.96 "gboolean gtk_widget_compute_point GtkWidget* widget GtkWidget* target graphene_point_t* point graphene_point_t* out_point")
(CFNC-3.96 "void gtk_widget_set_overflow GtkWidget* widget GtkOverflow overflow")
(CFNC-3.96 "GtkOverflow gtk_widget_get_overflow GtkWidget* widget")
(CFNC-3.96 "GtkWidget* gtk_widget_pick GtkWidget* widget gdouble x gdouble y GtkPickFlags flags")
(CFNC-3.96 "void gtk_widget_activate_action GtkWidget* widget char* name GVariant* parameter")
(CFNC-3.96 "void gtk_widget_activate_default GtkWidget* widget")
(CFNC-3.96 "GListModel* gtk_widget_observe_children GtkWidget* widget")
(CFNC-3.96 "GListModel* gtk_widget_observe_controllers GtkWidget* widget")
(CFNC-3.96 "GtkWidget* gtk_widget_get_focus_child GtkWidget* widget")
(CFNC-3.96 "void gtk_window_set_default_widget GtkWindow* window GtkWidget* default_widget")
(CFNC-3.96 "GListModel* gtk_window_get_toplevels void")
(CFNC-3.96 "GdkDisplay* gdk_drag_get_display GdkDrag* drag")
(CFNC-3.96 "GdkDevice* gdk_drag_get_device GdkDrag* drag")
(CFNC-3.96 "GdkContentFormats* gdk_drag_get_formats GdkDrag* drag")
(CFNC-3.96 "GdkDragAction gdk_drag_get_actions GdkDrag* drag")
(CFNC-3.96 "GdkDragAction gdk_drag_get_selected_action GdkDrag* drag")
(CFNC-3.96 "gboolean gdk_drag_action_is_unique GdkDragAction action")
(CFNC-3.96 "GdkDrag* gdk_drag_begin GdkSurface* surface GdkDevice* device GdkContentProvider* content GdkDragAction actions gint dx gint dy")
(CFNC-3.96 "void gdk_drag_drop_done GdkDrag* drag gboolean success")
(CFNC-3.96 "GdkSurface* gdk_drag_get_drag_surface GdkDrag* drag")
(CFNC-3.96 "void gdk_drag_set_hotspot GdkDrag* drag gint hot_x gint hot_y")
(CFNC-3.96 "GtkLayoutManager* gtk_bin_layout_new void")
(CFNC-3.96 "GtkLayoutManager* gtk_box_layout_new GtkOrientation orientation")
(CFNC-3.96 "void gtk_box_layout_set_homogeneous GtkBoxLayout* box_layout gboolean homogeneous")
(CFNC-3.96 "gboolean gtk_box_layout_get_homogeneous GtkBoxLayout* box_layout")
(CFNC-3.96 "void gtk_box_layout_set_spacing GtkBoxLayout* box_layout guint spacing")
(CFNC-3.96 "guint gtk_box_layout_get_spacing GtkBoxLayout* box_layout")
(CFNC-3.96 "void gtk_box_layout_set_baseline_position GtkBoxLayout* box_layout GtkBaselinePosition position")
(CFNC-3.96 "GtkBaselinePosition gtk_box_layout_get_baseline_position GtkBoxLayout* box_layout")
(CFNC-3.96 "GtkLayoutManager* gtk_custom_layout_new GtkCustomRequestModeFunc request_mode GtkCustomMeasureFunc measure GtkCustomAllocateFunc allocate")
(CFNC-3.96 "GtkEventController* gtk_event_controller_legacy_new void")
;;; (CFNC-3.96 "GtkFilterListModel* gtk_filter_list_model_new GListModel* model GtkFilterListModelFilterFunc filter_func gpointer user_data GDestroyNotify user_destroy")
(CFNC-3.96 "GtkFilterListModel* gtk_filter_list_model_new_for_type GType item_type")
;;; (CFNC-3.96 "void gtk_filter_list_model_set_filter_func GtkFilterListModel* self GtkFilterListModelFilterFunc filter_func gpointer user_data GDestroyNotify user_destroy")
(CFNC-3.96 "void gtk_filter_list_model_set_model GtkFilterListModel* self GListModel* model")
(CFNC-3.96 "GListModel* gtk_filter_list_model_get_model GtkFilterListModel* self")
(CFNC-3.96 "gboolean gtk_filter_list_model_has_filter GtkFilterListModel* self")
(CFNC-3.96 "void gtk_filter_list_model_refilter GtkFilterListModel* self")
(CFNC-3.96 "GtkLayoutManager* gtk_fixed_layout_new void")
;;; 3.96.0 (CFNC-3.96 "void gtk_fixed_layout_child_set_position GtkFixedLayoutChild* child GskTransform* gtk_fixed_layout_child_get_position GtkFixedLayoutChild* child")
(CFNC-3.96 "GtkFlattenListModel* gtk_flatten_list_model_new GType item_type GListModel* model")
(CFNC-3.96 "void gtk_flatten_list_model_set_model GtkFlattenListModel* self GListModel* model")
(CFNC-3.96 "GListModel* gtk_flatten_list_model_get_model GtkFlattenListModel* self")
(CFNC-3.96 "GtkLayoutManager* gtk_grid_layout_new void")
(CFNC-3.96 "void gtk_grid_layout_set_row_homogeneous GtkGridLayout* grid gboolean homogeneous")
(CFNC-3.96 "gboolean gtk_grid_layout_get_row_homogeneous GtkGridLayout* grid")
(CFNC-3.96 "void gtk_grid_layout_set_row_spacing GtkGridLayout* grid guint spacing")
(CFNC-3.96 "guint gtk_grid_layout_get_row_spacing GtkGridLayout* grid")
(CFNC-3.96 "void gtk_grid_layout_set_column_homogeneous GtkGridLayout* grid gboolean homogeneous")
(CFNC-3.96 "gboolean gtk_grid_layout_get_column_homogeneous GtkGridLayout* grid")
(CFNC-3.96 "void gtk_grid_layout_set_column_spacing GtkGridLayout* grid guint spacing")
(CFNC-3.96 "guint gtk_grid_layout_get_column_spacing GtkGridLayout* grid")
(CFNC-3.96 "void gtk_grid_layout_set_row_baseline_position GtkGridLayout* grid int row GtkBaselinePosition pos")
(CFNC-3.96 "GtkBaselinePosition gtk_grid_layout_get_row_baseline_position GtkGridLayout* grid int row")
(CFNC-3.96 "void gtk_grid_layout_set_baseline_row GtkGridLayout* grid int row")
(CFNC-3.96 "int gtk_grid_layout_get_baseline_row GtkGridLayout* grid")
(CFNC-3.96 "void gtk_grid_layout_child_set_top_attach GtkGridLayoutChild* child int attach")
(CFNC-3.96 "int gtk_grid_layout_child_get_top_attach GtkGridLayoutChild* child")
(CFNC-3.96 "void gtk_grid_layout_child_set_left_attach GtkGridLayoutChild* child int attach")
(CFNC-3.96 "int gtk_grid_layout_child_get_left_attach GtkGridLayoutChild* child")
(CFNC-3.96 "void gtk_grid_layout_child_set_column_span GtkGridLayoutChild* child int span")
(CFNC-3.96 "int gtk_grid_layout_child_get_column_span GtkGridLayoutChild* child")
(CFNC-3.96 "void gtk_grid_layout_child_set_row_span GtkGridLayoutChild* child int span")
(CFNC-3.96 "int gtk_grid_layout_child_get_row_span GtkGridLayoutChild* child")
(CFNC-3.96 "GtkLayoutManager* gtk_layout_child_get_layout_manager GtkLayoutChild* layout_child")
(CFNC-3.96 "GtkWidget* gtk_layout_child_get_child_widget GtkLayoutChild* layout_child")
(CFNC-3.96 "void gtk_layout_manager_measure GtkLayoutManager* manager GtkWidget* widget GtkOrientation orientation int for_size int* minimum int* natural int* minimum_baseline int* natural_baseline")
(CFNC-3.96 "void gtk_layout_manager_allocate GtkLayoutManager* manager GtkWidget* widget int width int height int baseline")
(CFNC-3.96 "GtkSizeRequestMode gtk_layout_manager_get_request_mode GtkLayoutManager* manager")
(CFNC-3.96 "GtkWidget* gtk_layout_manager_get_widget GtkLayoutManager* manager")
(CFNC-3.96 "void gtk_layout_manager_layout_changed GtkLayoutManager* manager")
(CFNC-3.96 "GtkLayoutChild* gtk_layout_manager_get_layout_child GtkLayoutManager* manager GtkWidget* child")
;;; (CFNC-3.96 "GtkMapListModel* gtk_map_list_model_new GType item_type GListModel* model GtkMapListModelMapFunc map_func gpointer user_data GDestroyNotify user_destroy")
;;; (CFNC-3.96 "void gtk_map_list_model_set_map_func GtkMapListModel* self GtkMapListModelMapFunc map_func gpointer user_data GDestroyNotify user_destroy")
(CFNC-3.96 "void gtk_map_list_model_set_model GtkMapListModel* self GListModel* model")
(CFNC-3.96 "GListModel* gtk_map_list_model_get_model GtkMapListModel* self")
(CFNC-3.96 "gboolean gtk_map_list_model_has_map GtkMapListModel* self")
(CFNC-3.96 "GtkWidget* gtk_password_entry_new void")
(CFNC-3.96 "void gtk_password_entry_set_show_peek_icon GtkPasswordEntry* entry gboolean show_peek_icon")
(CFNC-3.96 "gboolean gtk_password_entry_get_show_peek_icon GtkPasswordEntry* entry")
(CFNC-3.96 "GtkWidget* gtk_root_get_for_surface GdkSurface* surface")
(CFNC-3.96 "void gtk_root_set_focus GtkRoot* self GtkWidget* focus")
(CFNC-3.96 "GtkWidget* gtk_root_get_focus GtkRoot* self")
(CFNC-3.96 "gboolean gtk_selection_model_is_selected GtkSelectionModel* model guint position")
(CFNC-3.96 "gboolean gtk_selection_model_select_item GtkSelectionModel* model guint position gboolean exclusive")
(CFNC-3.96 "gboolean gtk_selection_model_unselect_item GtkSelectionModel* model guint position")
(CFNC-3.96 "gboolean gtk_selection_model_select_range GtkSelectionModel* model guint position guint n_items gboolean exclusive")
(CFNC-3.96 "gboolean gtk_selection_model_unselect_range GtkSelectionModel* model guint position guint n_items")
(CFNC-3.96 "gboolean gtk_selection_model_select_all GtkSelectionModel* model")
(CFNC-3.96 "gboolean gtk_selection_model_unselect_all GtkSelectionModel* model")
(CFNC-3.96 "void gtk_selection_model_query_range GtkSelectionModel* model guint position guint* [start_range] guint* [n_items] gboolean* [selected]")
(CFNC-3.96 "void gtk_selection_model_selection_changed GtkSelectionModel* model guint position guint n_items")
(CFNC-3.96 "GtkSingleSelection* gtk_single_selection_new GListModel* model")
(CFNC-3.96 "guint gtk_single_selection_get_selected GtkSingleSelection* self")
(CFNC-3.96 "void gtk_single_selection_set_selected GtkSingleSelection* self guint position")
(CFNC-3.96 "gpointer gtk_single_selection_get_selected_item GtkSingleSelection* self")
(CFNC-3.96 "gboolean gtk_single_selection_get_autoselect GtkSingleSelection* self")
(CFNC-3.96 "void gtk_single_selection_set_autoselect GtkSingleSelection* self gboolean autoselect")
(CFNC-3.96 "gboolean gtk_single_selection_get_can_unselect GtkSingleSelection* self")
(CFNC-3.96 "void gtk_single_selection_set_can_unselect GtkSingleSelection* self gboolean can_unselect")
(CFNC-3.96 "GtkSliceListModel* gtk_slice_list_model_new GListModel* model guint offset guint size")
(CFNC-3.96 "GtkSliceListModel* gtk_slice_list_model_new_for_type GType item_type")
(CFNC-3.96 "void gtk_slice_list_model_set_model GtkSliceListModel* self GListModel* model")
(CFNC-3.96 "GListModel* gtk_slice_list_model_get_model GtkSliceListModel* self")
(CFNC-3.96 "void gtk_slice_list_model_set_offset GtkSliceListModel* self guint offset")
(CFNC-3.96 "guint gtk_slice_list_model_get_offset GtkSliceListModel* self")
(CFNC-3.96 "void gtk_slice_list_model_set_size GtkSliceListModel* self guint size")
(CFNC-3.96 "guint gtk_slice_list_model_get_size GtkSliceListModel* self")
;;; (CFNC-3.96 "GtkSortListModel* gtk_sort_list_model_new GListModel* model GCompareDataFunc sort_func gpointer user_data GDestroyNotify user_destroy")
(CFNC-3.96 "GtkSortListModel* gtk_sort_list_model_new_for_type GType item_type")
;;; (CFNC-3.96 "void gtk_sort_list_model_set_sort_func GtkSortListModel* self GCompareDataFunc sort_func gpointer user_data GDestroyNotify user_destroy")
(CFNC-3.96 "gboolean gtk_sort_list_model_has_sort GtkSortListModel* self")
(CFNC-3.96 "void gtk_sort_list_model_set_model GtkSortListModel* self GListModel* model")
(CFNC-3.96 "GListModel* gtk_sort_list_model_get_model GtkSortListModel* self")
(CFNC-3.96 "void gtk_sort_list_model_resort GtkSortListModel* self")
(CFNC-3.96 "GtkWidget* gtk_text_new void")
(CFNC-3.96 "GtkWidget* gtk_text_new_with_buffer GtkEntryBuffer* buffer")
(CFNC-3.96 "GtkEntryBuffer* gtk_text_get_buffer GtkText* self")
(CFNC-3.96 "void gtk_text_set_buffer GtkText* self GtkEntryBuffer* buffer")
(CFNC-3.96 "void gtk_text_set_visibility GtkText* self gboolean visible")
(CFNC-3.96 "gboolean gtk_text_get_visibility GtkText* self")
(CFNC-3.96 "void gtk_text_set_invisible_char GtkText* self gunichar ch")
(CFNC-3.96 "gunichar gtk_text_get_invisible_char GtkText* self")
(CFNC-3.96 "void gtk_text_unset_invisible_char GtkText* self")
(CFNC-3.96 "void gtk_text_set_overwrite_mode GtkText* self gboolean overwrite")
(CFNC-3.96 "gboolean gtk_text_get_overwrite_mode GtkText* self")
(CFNC-3.96 "void gtk_text_set_max_length GtkText* self int length")
(CFNC-3.96 "gint gtk_text_get_max_length GtkText* self")
(CFNC-3.96 "guint16 gtk_text_get_text_length GtkText* self")
(CFNC-3.96 "void gtk_text_set_activates_default GtkText* self gboolean activates")
(CFNC-3.96 "gboolean gtk_text_get_activates_default GtkText* self")
(CFNC-3.96 "char* gtk_text_get_placeholder_text GtkText* self" 'const)
(CFNC-3.96 "void gtk_text_set_placeholder_text GtkText* self char* text")
(CFNC-3.96 "void gtk_text_set_input_purpose GtkText* self GtkInputPurpose purpose")
(CFNC-3.96 "GtkInputPurpose gtk_text_get_input_purpose GtkText* self")
(CFNC-3.96 "void gtk_text_set_input_hints GtkText* self GtkInputHints hints")
(CFNC-3.96 "GtkInputHints gtk_text_get_input_hints GtkText* self")
(CFNC-3.96 "void gtk_text_set_attributes GtkText* self PangoAttrList* attrs")
(CFNC-3.96 "PangoAttrList* gtk_text_get_attributes GtkText* self")
(CFNC-3.96 "void gtk_text_set_tabs GtkText* self PangoTabArray* tabs")
(CFNC-3.96 "PangoTabArray* gtk_text_get_tabs GtkText* self")
(CFNC-3.96 "void gtk_text_grab_focus_without_selecting GtkText* self")
;;; (CFNC-3.96 "GtkTreeListModel* gtk_tree_list_model_new gboolean passthrough GListModel* root gboolean autoexpand GtkTreeListModelCreateModelFunc create_func gpointer user_data GDestroyNotify user_destroy")
(CFNC-3.96 "GListModel* gtk_tree_list_model_get_model GtkTreeListModel* self")
(CFNC-3.96 "gboolean gtk_tree_list_model_get_passthrough GtkTreeListModel* self")
(CFNC-3.96 "void gtk_tree_list_model_set_autoexpand GtkTreeListModel* self gboolean autoexpand")
(CFNC-3.96 "gboolean gtk_tree_list_model_get_autoexpand GtkTreeListModel* self")
(CFNC-3.96 "GtkTreeListRow* gtk_tree_list_model_get_child_row GtkTreeListModel* self guint position")
(CFNC-3.96 "GtkTreeListRow* gtk_tree_list_model_get_row GtkTreeListModel* self guint position")
(CFNC-3.96 "gpointer gtk_tree_list_row_get_item GtkTreeListRow* self")
(CFNC-3.96 "void gtk_tree_list_row_set_expanded GtkTreeListRow* self gboolean expanded")
(CFNC-3.96 "gboolean gtk_tree_list_row_get_expanded GtkTreeListRow* self")
(CFNC-3.96 "gboolean gtk_tree_list_row_is_expandable GtkTreeListRow* self")
(CFNC-3.96 "guint gtk_tree_list_row_get_position GtkTreeListRow* self")
(CFNC-3.96 "guint gtk_tree_list_row_get_depth GtkTreeListRow* self")
(CFNC-3.96 "GListModel* gtk_tree_list_row_get_children GtkTreeListRow* self")
(CFNC-3.96 "GtkTreeListRow* gtk_tree_list_row_get_parent GtkTreeListRow* self")
(CFNC-3.96 "GtkTreeListRow* gtk_tree_list_row_get_child_row GtkTreeListRow* self guint position")


(CFNC-3.96 "void gtk_drag_get_data GtkWidget* widget GdkDrop* drop GdkAtom target")
(CFNC-3.96 "void gtk_drag_set_icon_widget GdkDrag* context GtkWidget* widget gint hot_x gint hot_y")
(CFNC-3.96 "void gtk_drag_set_icon_default GdkDrag* context")
(CFNC-3.96 "void gtk_drag_set_icon_name GdkDrag* context gchar* icon_name gint hot_x gint hot_y" 'const)
;;; 3.96.0 (CFNC-3.96 "void gtk_drag_set_icon_surface GdkDrag* context cairo_surface_t* surface")
(CFNC-3.96 "void gtk_drag_set_icon_gicon GdkDrag* context GIcon* icon gint hot_x gint hot_y")
(CFNC-3.96 "void gtk_drag_cancel GdkDrag* context")
;;; 3.96.0 (CFNC-3.96 "void gtk_drag_finish GdkDrag* context gboolean success guint32 time")
;;; 3.96.0 (CFNC-3.96 "void gtk_drag_set_icon_pixbuf GdkDrag* context GdkTexture* texture gint hot_x gint hot_y")
;;; 3.96.0 (CFNC-3.96 "char* gtk_drag_dest_find_target GtkWidget* widget GdkDrag* context GdkContentFormats* @target_list" 'const-return)

(CFNC-3.96 "GdkSurface* gdk_surface_get_device_position GdkSurface* surface GdkDevice* device double* [x] double* [y] GdkModifierType* mask")
(CFNC-3.96 "void gtk_drag_source_set GtkWidget* widget GdkModifierType start_button_mask GdkContentFormats* targets GdkDragAction actions")
(CFNC-3.96 "GInputStream* gdk_clipboard_read_finish GdkClipboard* clip GAsyncResult* result char** out_mime_type GError** [error]" 'const)
(CFNC-3.96 "void gdk_device_get_position GdkDevice* device gdouble* [x] gdouble* [y]")
