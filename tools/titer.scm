;; iteration tests

;(set! (*s7* 'gc-stats) 2)

;;; do/let/rec/tc/iter

(define with-blocks #f)
(when with-blocks
  (let ((new-env (sublet (curlet) (cons 'init_func 'block_init)))) ; load calls init_func if possible
    (load "s7test-block.so" new-env)))

(define-constant find-if-a
  (let ()
    (define-constant (find-if-a-1 iter)
      (or (string? (iterate iter))
	  (and (not (iterator-at-end? iter))
	       (find-if-a-1 iter))))
    (lambda (seq)
      (find-if-a-1 (make-iterator seq)))))

(define-constant (find-if-b sequence)
  (call-with-exit
   (lambda (return)
     (for-each (lambda (arg)
		 (if (string? arg) (return #t)))
	       sequence)
     #f)))

(define-constant (find-if-c seq)
  (let loop ((iter (make-iterator seq)))
    (or (string? (iterate iter))
	(and (not (iterator-at-end? iter))
	     (loop iter)))))
    
(define-constant (find-if-d seq)
  (let ((iter (make-iterator seq)))
    (do ((val (iterate iter) (iterate iter)))
	((or (string? val) (iterator-at-end? iter))
	 (string? val)))))

(define (test)
  (for-each
   (lambda (size)
     (format *stderr* "~D: " size)
     (let ((a (let ((lst (make-list size #f)))
		(list (find-if-a lst)
		      (find-if-b lst)
		      (find-if-c lst)
		      (find-if-d lst))))
	   (b (let ((str (make-string size #\space)))
		(list (find-if-a str)
		      (find-if-b str)
		      (find-if-c str)
		      (find-if-d str))))
	   (c (let ((vc (make-vector size #f)))
		(list (find-if-a vc)
		      (find-if-b vc)
		      (find-if-c vc)
		      (find-if-d vc))))
	   (d (let ((fv (make-float-vector size 0.0)))
		(list (find-if-a fv)
		      (find-if-b fv)
		      (find-if-c fv)
		      (find-if-d fv))))
	   (e (let ((iv (make-int-vector size 0)))
		(list (find-if-a iv)
		      (find-if-b iv)
		      (find-if-c iv)
		      (find-if-d iv))))
	   (f (let ((ht (let ((ht1 (make-hash-table size)))
			  (do ((i 0 (+ i 1)))
			      ((= i size) ht1)
			    (hash-table-set! ht1 i i)))))
		(list (find-if-a ht)
		      (find-if-b ht)
		      (find-if-c ht)
		      (find-if-d ht))))
	   (g (let ((lt (apply inlet (make-list (* 2 size) 'abc))))
		(list (find-if-a lt)
		      (find-if-b lt)
		      (find-if-c lt)
		      (find-if-d lt))))
	   (h (if with-blocks
		  (let ((blk (make-block size)))
		    (list (find-if-a blk)
			  (find-if-b blk)
			  (find-if-c blk)
			  (find-if-d blk)))
		  #f)))
       
       (if (not (equal? a '(#f #f #f #f))) (format *stderr* "a: ~A " a))
       (if (not (equal? b '(#f #f #f #f))) (format *stderr* "b: ~A " b))
       (if (not (equal? c '(#f #f #f #f))) (format *stderr* "c: ~A " c))
       (if (not (equal? d '(#f #f #f #f))) (format *stderr* "d: ~A " d))
       (if (not (equal? e '(#f #f #f #f))) (format *stderr* "e: ~A " e))
       (if (not (equal? f '(#f #f #f #f))) (format *stderr* "f: ~A " f))
       (if (not (equal? g '(#f #f #f #f))) (format *stderr* "g: ~A " g))
       (if (and with-blocks (not (equal? h '(#f #f #f #f)))) (format *stderr* "h: ~A " h))
       ))
   (list 1 10 100 1000 10000 100000 1000000)))

(test)

(s7-version)	
(exit)
