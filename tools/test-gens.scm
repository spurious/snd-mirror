(load "hooks.scm")
(load "ws.scm")
(load "generators.scm")
(reset-all-hooks)

(define tries 0)
;(set! *safety* 1)
(set! *clm-file-buffer-size* 100)
(define start-run (get-internal-real-time))
(define mfv (float-vector 0 0 1 10))
(define pfv (float-vector 0 0 1 1))

(define* (env-1 g f) (env g))
(define (make-env-1 size) (make-env mfv :length 10))

(define pulsed-env-1 pulsed-env)
(define (make-pulsed-env-1 size) (make-pulsed-env pfv .01 1000.0))

(define delay-1 delay)
(define (make-delay-1 size) (make-delay 4))

(define comb-1 comb)
(define (make-comb-1 size) (make-comb .9 4))

(define filtered-comb-1 filtered-comb)
(define (make-filtered-comb-1 size) (make-filtered-comb .9 4))

(define notch-1 notch)
(define (make-notch-1 size) (make-notch .9 4))

(define all-pass-1 all-pass)
(define (make-all-pass-1 size) (make-all-pass .9 .4 4))

(define one-pole-all-pass-1 one-pole-all-pass)
(define (make-one-pole-all-pass-1 size) (make-one-pole-all-pass 4 .5))

(define moving-average-1 moving-average)
(define (make-moving-average-1 size) (make-moving-average 4))

(define moving-max-1 moving-max)
(define (make-moving-max-1 size) (make-moving-max 3))

(define one-pole-1 one-pole)
(define (make-one-pole-1 size) (make-one-pole .9 .4))

(define two-pole-1 two-pole)
(define (make-two-pole-1 size) (make-two-pole .9 .4 .1))

(define one-zero-1 one-zero)
(define (make-one-zero-1 size) (make-one-zero .9 .4))

(define two-zero-1 two-zero)
(define (make-two-zero-1 size) (make-two-zero .9 .4 .1))

(define table-lookup-1 table-lookup)
(define table-lookup-table (partials->wave '(1 1.0)))
(define (make-table-lookup-1 size) (make-table-lookup size :wave table-lookup-table))

(define formant-1 formant)
(define (make-formant-1 size) (make-formant size .1))

(define firmant-1 firmant)
(define (make-firmant-1 size) (make-firmant size .1))

(define fx (float-vector .1 -.2 .3))
(define fy (float-vector -.1 .02 -.3))

(define* (filter-1 g (f 0.1)) (filter g f))
(define (make-filter-1 size) (make-filter 3 fx fy))

(define* (fir-filter-1 g (f 0.1)) (fir-filter g f))
(define (make-fir-filter-1 size) (make-fir-filter 3 fx))

(define* (iir-filter-1 g (f 0.1)) (iir-filter g f))
(define (make-iir-filter-1 size) (make-iir-filter 3 fx))

(define* (readin-1 g f) (readin g))
(define (make-readin-1 size) (make-readin "oboe.snd"))

(define src-1 src)
(define (make-src-1 size) (make-src (lambda (dir) .1) 2.0))

(define* (granulate-1 g f) (granulate g))
(define (make-granulate-1 size) (make-granulate (lambda (dir) .1) 2.0 0.01 0.6 0.01))

(define* (phase-vocoder-1 g f) (phase-vocoder g))
(define (make-phase-vocoder-1 size) (make-phase-vocoder (lambda (dir) .1) 64))

(define ssb-am-1 ssb-am)
(define (make-ssb-am-1 size) (make-ssb-am 100.0 20))

(define wave-train-1 wave-train)
(define (make-wave-train-1 size) (make-wave-train 1000.0 0.0 (make-float-vector 20 0.1)))

(define convolve-1 convolve)
(define (make-convolve-1 size) (make-convolve (lambda (dir) .1) (make-float-vector 16 .2) 16))

(define* (oscil-bank-1 g f) (oscil-bank g))
(define (make-oscil-bank-1 size) (make-oscil-bank (float-vector 100.0 200.0) (float-vector 0.0 0.0) (float-vector 0.5 0.5)))

(define* (formant-bank-1 g (f 0.1)) (formant-bank g f))
(define (make-formant-bank-1 size) (make-formant-bank (vector (make-formant 440.0 .95))))

(define* (comb-bank-1 g (f 1.0)) (comb-bank g f))
(define (make-comb-bank-1 size) (make-comb-bank (vector (make-comb .5 6))))

(define* (filtered-comb-bank-1 g (f 1.0)) (filtered-comb-bank g f))
(define (make-filtered-comb-bank-1 size) (make-filtered-comb-bank (vector (make-filtered-comb .5 6))))

(define* (all-pass-bank-1 g (f 1.0)) (all-pass-bank g f))
(define (make-all-pass-bank-1 size) (make-all-pass-bank (vector (make-all-pass .5 .4 6))))


;;; we are creating millions of functions here, so we need to keep them from
;;;   being removed from the heap, and make sure they're GC'd -- *safety*=1
;;;   keeps them in the heap, but s7 continues to allocate space for each redefinition,
;;;   hence the extra let below.

(define (vequal v1 v2)
  (< (/ (float-vector-peak (float-vector-subtract! (copy v1) v2)) (max .001 (float-vector-peak v1))) 1e-5))


(define (write-exprs p str gen)
  (define gen-str (symbol->string gen))

  (format p "(let ()~%")
  (format p "  (define v-1 (make-float-vector 100 .25)) (do ((i 0 (+ i 1))) ((= i 100)) (float-vector-set! v-1 i (* i .01)))~%~%")
  (format p "  (define v0 (make-float-vector 10))~%")
  (format p "  (define E (float-vector 0.0 .1 1.0 1.0))~%")
  (format p "  (let ((o (make-~A 1000))~%" gen-str)
  (format p "        (o1 (make-~A 1000))~%" gen-str)
  (format p "        (o2 (make-~A 1000))~%" gen-str)
  (format p "        (o3 (make-~A 1000))~%" gen-str)
  (format p "        (o4 (make-~A 1000))~%" gen-str)
  (format p "        (oscs (vector (make-~A 400) (make-~A 500) (make-~A 600)))~%" gen-str gen-str gen-str)
  (format p "        (e1 (make-env E :length 100))~%")
  (format p "        (e2 (make-env E :length 100))~%")
  (format p "        (e3 (make-env E :length 100))~%")
  (format p "        (e4 (make-env E :length 100))~%")
  (format p "        (x 3.14)~%")
  (format p "        (y -0.5)~%")
  (format p "        (z 0.1)~%")
  (format p "        (k 1)~%")
  (format p "        (i 0)~%")
  (format p "        (v (make-float-vector 10)))~%")
  (format p "    (float-vector-set! v0 0 ~A) (set! i (+ i 1))~%" str)
  (format p "    (float-vector-set! v0 1 ~A) (set! i (+ i 1))~%" str)
  (format p "    (float-vector-set! v0 2 ~A) (set! i (+ i 1))~%" str)
  (format p "    (float-vector-set! v0 3 ~A) (set! i (+ i 1))~%" str)
  (format p "    (float-vector-set! v0 4 ~A) (set! i (+ i 1))~%" str)
  (format p "    (float-vector-set! v0 5 ~A) (set! i (+ i 1))~%" str)
  (format p "    (float-vector-set! v0 6 ~A) (set! i (+ i 1))~%" str)
  (format p "    (float-vector-set! v0 7 ~A) (set! i (+ i 1))~%" str)
  (format p "    (float-vector-set! v0 8 ~A) (set! i (+ i 1))~%" str)
  (format p "    (float-vector-set! v0 9 ~A))~%" str)
  (format p "(define (tester-1)~%")
  (format p "  (let ((o (make-~A 1000))~%" gen-str)
  (format p "        (o1 (make-~A 1000))~%" gen-str)
  (format p "        (o2 (make-~A 1000))~%" gen-str)
  (format p "        (o3 (make-~A 1000))~%" gen-str)
  (format p "        (o4 (make-~A 1000))~%" gen-str)
  (format p "        (oscs (vector (make-~A 400) (make-~A 500) (make-~A 600)))~%" gen-str gen-str gen-str)
  (format p "        (e1 (make-env E :length 100))~%")
  (format p "        (e2 (make-env E :length 100))~%")
  (format p "        (e3 (make-env E :length 100))~%")
  (format p "        (e4 (make-env E :length 100))~%")
  (format p "        (x 3.14)~%")
  (format p "        (y -0.5)~%")
  (format p "        (z 0.1)~%")
  (format p "        (k 1)~%")
  (format p "        (v (make-float-vector 10)))~%")
  (format p "    (do ((i 0 (+ i 1)))~%")
  (format p "        ((= i 10) v)~%")
  (format p "      (float-vector-set! v i ~A))))~%~%" str)
  (format p "(define (tester-2)~%")
  (format p "  (let ((o (make-~A 1000))~%" gen-str)
  (format p "        (o1 (make-~A 1000))~%" gen-str)
  (format p "        (o2 (make-~A 1000))~%" gen-str)
  (format p "        (o3 (make-~A 1000))~%" gen-str)
  (format p "        (o4 (make-~A 1000))~%" gen-str)
  (format p "        (oscs (vector (make-~A 400) (make-~A 500) (make-~A 600)))~%" gen-str gen-str gen-str)
  (format p "        (e1 (make-env E :length 100))~%")
  (format p "        (e2 (make-env E :length 100))~%")
  (format p "        (e3 (make-env E :length 100))~%")
  (format p "        (e4 (make-env E :length 100))~%")
  (format p "        (x 3.14)~%")
  (format p "        (y -0.5)~%")
  (format p "        (z 0.1)~%")
  (format p "        (k 1)~%")
  (format p "        (v (make-float-vector 10)))~%")
  (format p "    (with-sound (:output v :clipped #f :to-snd #f)~%")
  (format p "      (do ((i 0 (+ i 1)))~%")
  (format p "          ((= i 10) v)~%")
  (format p "        (outa i ~A)))~%" str)
  (format p "     v))~%~%")
  (format p "(define (tester-3)~%")
  (format p "  (let ((o (make-~A 1000))~%" gen-str)
  (format p "        (o1 (make-~A 1000))~%" gen-str)
  (format p "        (o2 (make-~A 1000))~%" gen-str)
  (format p "        (o3 (make-~A 1000))~%" gen-str)
  (format p "        (o4 (make-~A 1000))~%" gen-str)
  (format p "        (oscs (vector (make-~A 400) (make-~A 500) (make-~A 600)))~%" gen-str gen-str gen-str)
  (format p "        (e1 (make-env E :length 100))~%")
  (format p "        (e2 (make-env E :length 100))~%")
  (format p "        (e3 (make-env E :length 100))~%")
  (format p "        (e4 (make-env E :length 100))~%")
  (format p "        (x 3.14)~%")
  (format p "        (y -0.5)~%")
  (format p "        (z 0.1)~%")
  (format p "        (k 1)~%")
  (format p "        (v (make-float-vector 10)))~%")
  (format p "    (with-sound (:output v :clipped #f :to-snd #f)~%")
  (format p "      (do ((i 0 (+ i 1)))~%")
  (format p "          ((= i 10) v)~%")
  (format p "        (outa i ~A)))~%" str)
  (format p "    ;(file->array \"try-test.snd\" 0 0 10 v)~%")
  (format p "    v))~%~%")
  (format p "(define (tester-4)~%")
  (format p "  (let ((o (make-~A 1000))~%" gen-str)
  (format p "        (o1 (make-~A 1000))~%" gen-str)
  (format p "        (o2 (make-~A 1000))~%" gen-str)
  (format p "        (o3 (make-~A 1000))~%" gen-str)
  (format p "        (o4 (make-~A 1000))~%" gen-str)
  (format p "        (oscs (vector (make-~A 400) (make-~A 500) (make-~A 600)))~%" gen-str gen-str gen-str)
  (format p "        (e1 (make-env E :length 100))~%")
  (format p "        (e2 (make-env E :length 100))~%")
  (format p "        (e3 (make-env E :length 100))~%")
  (format p "        (e4 (make-env E :length 100))~%")
  (format p "        (v (make-float-vector 10))~%")
  (format p "        (x 3.14)~%")
  (format p "        (y -0.5)~%")
  (format p "        (k 1)~%")
  (format p "        (z 0.1))~%")
  (format p "    (do ((i 0 (+ i 1))~%")
  (format p "         (lst (make-list 10)))~%")
  (format p "        ((= i 10) (apply float-vector lst))~%")
  (format p "      (set! (lst i) ~A))))~%~%" str)
  (format p "(define (tester-5)~%")
  (format p "  (let ((o (make-~A 1000))~%" gen-str)
  (format p "        (o1 (make-~A 1000))~%" gen-str)
  (format p "        (o2 (make-~A 1000))~%" gen-str)
  (format p "        (o3 (make-~A 1000))~%" gen-str)
  (format p "        (o4 (make-~A 1000))~%" gen-str)
  (format p "        (oscs (vector (make-~A 400) (make-~A 500) (make-~A 600)))~%" gen-str gen-str gen-str)
  (format p "        (e1 (make-env E :length 100))~%")
  (format p "        (e2 (make-env E :length 100))~%")
  (format p "        (e3 (make-env E :length 100))~%")
  (format p "        (e4 (make-env E :length 100))~%")
  (format p "        (y -0.5)~%")
  (format p "        (k 1)~%")
  (format p "        (z 0.1)~%")
  (format p "        (v (make-float-vector 10)))~%")
  (format p "    (with-sound (:output \"test.snd\" :clipped #f :to-snd #f)~%")
  (format p "      (do ((i 0 (+ i 1))~%")
  (format p "           (x 0.0 (+ x 0.1)))~%")
  (format p "          ((= i 10) v)~%")
  (format p "        (outa i ~A)))~%" str)
  (format p "    (file->array \"test.snd\" 0 0 10 v)~%")
  (format p "    v))~%~%")
  (format p "(define (tester-6)~%")
  (format p "  (let ((o (make-~A 1000))~%" gen-str)
  (format p "        (o1 (make-~A 1000))~%" gen-str)
  (format p "        (o2 (make-~A 1000))~%" gen-str)
  (format p "        (o3 (make-~A 1000))~%" gen-str)
  (format p "        (o4 (make-~A 1000))~%" gen-str)
  (format p "        (oscs (vector (make-~A 400) (make-~A 500) (make-~A 600)))~%" gen-str gen-str gen-str)
  (format p "        (e1 (make-env E :length 100))~%")
  (format p "        (e2 (make-env E :length 100))~%")
  (format p "        (e3 (make-env E :length 100))~%")
  (format p "        (e4 (make-env E :length 100))~%")
  (format p "        (k 1)~%")
  (format p "        (v (make-float-vector 10)))~%")
  (format p "    (do ((i 0 (+ i 1))~%")
  (format p "         (y -0.5)~%")
  (format p "         (z 0.1)~%")
  (format p "         (x 0.0 (+ x 0.1)))~%")
  (format p "        ((= i 10) v)~%")
  (format p "      (float-vector-set! v i ~A))))~%~%" str)
  
  (format p "(define (tester-7)~%")
  (format p "  (let ((o (make-~A 1000))~%" gen-str)
  (format p "        (o1 (make-~A 1000))~%" gen-str)
  (format p "        (o2 (make-~A 1000))~%" gen-str)
  (format p "        (o3 (make-~A 1000))~%" gen-str)
  (format p "        (o4 (make-~A 1000))~%" gen-str)
  (format p "        (oscs (vector (make-~A 400) (make-~A 500) (make-~A 600)))~%" gen-str gen-str gen-str)
  (format p "        (e1 (make-env E :length 100))~%")
  (format p "        (e2 (make-env E :length 100))~%")
  (format p "        (e3 (make-env E :length 100))~%")
  (format p "        (e4 (make-env E :length 100))~%")
  (format p "        (x 3.14)~%")
  (format p "        (y -0.5)~%")
  (format p "        (k 1)~%")
  (format p "        (z 0.1)~%")
  (format p "        (v (make-float-vector 10)))~%")
  (format p "    (do ((i 0 (+ i 1)))~%")
  (format p "        ((= i 10) v)~%")
  (format p "      (let ((z ~A))~%" str)
  (format p "        (float-vector-set! v i (~A o z))))))~%" gen)
  (format p "(define (tester-8)~%")
  (format p "  (let ((o (make-~A 1000))~%" gen-str)
  (format p "        (o1 (make-~A 1000))~%" gen-str)
  (format p "        (o2 (make-~A 1000))~%" gen-str)
  (format p "        (o3 (make-~A 1000))~%" gen-str)
  (format p "        (o4 (make-~A 1000))~%" gen-str)
  (format p "        (oscs (vector (make-~A 400) (make-~A 500) (make-~A 600)))~%" gen-str gen-str gen-str)
  (format p "        (e1 (make-env E :length 100))~%")
  (format p "        (e2 (make-env E :length 100))~%")
  (format p "        (e3 (make-env E :length 100))~%")
  (format p "        (e4 (make-env E :length 100))~%")
  (format p "        (x 3.14)~%")
  (format p "        (y -0.5)~%")
  (format p "        (z 0.1)~%")
  (format p "        (k 1)~%")
  (format p "        (v (make-float-vector 10)))~%")
  (format p "    (with-sound (:output v :clipped #f :to-snd #f)~%")
  (format p "      (do ((i 0 (+ i 1)))~%")
  (format p "          ((= i 10) v)~%")
  (format p "        (let ((z ~A))~%" str)
  (format p "          (outa i (~A o z)))))~%" gen)
  (format p "     v))~%~%")
  
  (format p "(define (tester-9)~%")
  (format p "  (let ((o (make-~A 1000))~%" gen-str)
  (format p "        (o1 (make-~A 1000))~%" gen-str)
  (format p "        (o2 (make-~A 1000))~%" gen-str)
  (format p "        (o3 (make-~A 1000))~%" gen-str)
  (format p "        (o4 (make-~A 1000))~%" gen-str)
  (format p "        (oscs (vector (make-~A 400) (make-~A 500) (make-~A 600)))~%" gen-str gen-str gen-str)
  (format p "        (e1 (make-env E :length 100))~%")
  (format p "        (e2 (make-env E :length 100))~%")
  (format p "        (e3 (make-env E :length 100))~%")
  (format p "        (e4 (make-env E :length 100))~%")
  (format p "        (x 3.14)~%")
  (format p "        (y -0.5)~%")
  (format p "        (z 0.1)~%")
  (format p "        (k 1)~%")
  (format p "        (v (make-float-vector 10)))~%")
  (format p "    (do ((i 0 (+ i 1)))~%")
  (format p "        ((= i 10) v)~%")
  (format p "      (let ((z ~A))~%" str)
  (format p "        (float-vector-set! v i (* (env e1) (~A o z)))))))~%" gen)
  (format p "(define (tester-10)~%")
  (format p "  (let ((o (make-~A 1000))~%" gen-str)
  (format p "        (o1 (make-~A 1000))~%" gen-str)
  (format p "        (o2 (make-~A 1000))~%" gen-str)
  (format p "        (o3 (make-~A 1000))~%" gen-str)
  (format p "        (o4 (make-~A 1000))~%" gen-str)
  (format p "        (oscs (vector (make-~A 400) (make-~A 500) (make-~A 600)))~%" gen-str gen-str gen-str)
  (format p "        (e1 (make-env E :length 100))~%")
  (format p "        (e2 (make-env E :length 100))~%")
  (format p "        (e3 (make-env E :length 100))~%")
  (format p "        (e4 (make-env E :length 100))~%")
  (format p "        (x 3.14)~%")
  (format p "        (y -0.5)~%")
  (format p "        (z 0.1)~%")
  (format p "        (k 1)~%")
  (format p "        (v (make-float-vector 10)))~%")
  (format p "    (with-sound (:output v :clipped #f :to-snd #f)~%")
  (format p "      (do ((i 0 (+ i 1)))~%")
  (format p "          ((= i 10) v)~%")
  (format p "        (let ((z ~A))~%" str)
  (format p "          (outa i (* (env e1) (~A o z))))))~%" gen)
  (format p "     v))~%~%")
  
  (format p "(define (tester-11)~%")
  (format p "  (let ((o (make-~A 1000))~%" gen-str)
  (format p "        (o1 (make-~A 1000))~%" gen-str)
  (format p "        (o2 (make-~A 1000))~%" gen-str)
  (format p "        (o3 (make-~A 1000))~%" gen-str)
  (format p "        (o4 (make-~A 1000))~%" gen-str)
  (format p "        (oscs (vector (make-~A 400) (make-~A 500) (make-~A 600)))~%" gen-str gen-str gen-str)
  (format p "        (e1 (make-env E :length 100))~%")
  (format p "        (e2 (make-env E :length 100))~%")
  (format p "        (e3 (make-env E :length 100))~%")
  (format p "        (e4 (make-env E :length 100))~%")
  (format p "        (y -0.5)~%")
  (format p "        (z 0.1)~%")
  (format p "        (k 1)~%")
  (format p "        (v (make-float-vector 10)))~%")
  (format p "    (do ((i 0 (+ i 1)))~%")
  (format p "        ((= i 10) v)~%")
  (format p "      (let ((x (~A o)))~%" gen)
  (format p "        (float-vector-set! v i ~A)))))~%" str)
  (format p "(define (tester-12)~%")
  (format p "  (let ((o (make-~A 1000))~%" gen-str)
  (format p "        (o1 (make-~A 1000))~%" gen-str)
  (format p "        (o2 (make-~A 1000))~%" gen-str)
  (format p "        (o3 (make-~A 1000))~%" gen-str)
  (format p "        (o4 (make-~A 1000))~%" gen-str)
  (format p "        (oscs (vector (make-~A 400) (make-~A 500) (make-~A 600)))~%" gen-str gen-str gen-str)
  (format p "        (e1 (make-env E :length 100))~%")
  (format p "        (e2 (make-env E :length 100))~%")
  (format p "        (e3 (make-env E :length 100))~%")
  (format p "        (e4 (make-env E :length 100))~%")
  (format p "        (y -0.5)~%")
  (format p "        (z 0.1)~%")
  (format p "        (k 1)~%")
  (format p "        (v (make-float-vector 10)))~%")
  (format p "    (with-sound (:output v :clipped #f :to-snd #f)~%")
  (format p "      (do ((i 0 (+ i 1)))~%")
  (format p "          ((= i 10) v)~%")
  (format p "        (let ((x (~A o)))~%" gen)
  (format p "          (outa i ~A))))~%" str)
  (format p "     v))~%~%")
  
  (format p "(let ((v1 (tester-1))~%")
  (format p "      (v2 (tester-2))~%")
  (format p "      (v3 (tester-3))~%")
  (format p "      (v4 (tester-4))~%")
  (format p "      (v5 (tester-5))~%")
  (format p "      (v6 (tester-6))~%")
  (format p "      (v7 (tester-7))~%")
  (format p "      (v8 (tester-8))~%")
  (format p "      (v9 (tester-9))~%")
  (format p "      (v10 (tester-10))~%")
  (format p "      (v11 (tester-11))~%")
  (format p "      (v12 (tester-12)))~%")
  (format p "  (if (or (not (vequal v0 v1)) (not (vequal v1 v2)) (not (vequal v1 v3)) (not (vequal v1 v4)))~%")
  (format p "      (format *stderr* \"~A:~~%    no do:  ~~A~~%    fv-set: ~~A~~%    outa->v:~~A~~%    outa:   ~~A~~%    list:   ~~A~~%\" v0 v1 v2 v3 v4))~%" str)
  (format p "  (if (not (vequal v5 v6))~%")
  (format p "      (format *stderr* \"dox ~A:~~%   fv-set: ~~A~~%    outa->v:~~A~~%\" v5 v6))~%" str)
  (format p "  (if (not (vequal v7 v8))~%")
  (format p "      (format *stderr* \"let ~A:~~%    ~~A~~%    ~~A~~%\" v7 v8))~%" str)
  (format p "  (if (not (vequal v9 v10))~%")
  (format p "      (format *stderr* \"env let ~A:~~%    ~~A~~%    ~~A~~%\" v9 v10))~%~%" str)
  (format p "  (if (not (vequal v11 v12))~%")
  (format p "      (format *stderr* \"letx ~A:~~%    ~~A~~%    ~~A~~%\" v11 v12))))~%~%" str))

(define (try str gen)
  (set! tries (+ tries 1))
  (eval-string
   (call-with-output-string
    (lambda (p)
      (write-exprs p str gen)))))

(define (test-gen gen)
  (define args1 (list 1.5 (list gen 'o1) '(env e1) 'x 'i (list gen 'o) '(- 1.0 x) (list gen '(vector-ref oscs k))))
  (define args2 (list 1.5 (list gen 'o2) '(env e2) 'y 'i '(float-vector-ref v-1 i)))
  (define args3 (list 1.5 (list gen 'o3) '(env e3) 'z 'i '(cos x)))
  (define args4 (list 1.5 (list gen 'o4) '(env e4) 'x 'i))

  (for-each 
   (lambda (a) 
     (try (format #f "~A" a) gen)
     (try (format #f "(~A o ~A)" gen a) gen)
     (try (format #f "(abs (~A o ~A))" gen a) gen)
     )
   args1)
    
  (for-each 
   (lambda (a) 
     (let ((a-str (object->string a)))
       (for-each 
	(lambda (b) 
	  (let ((b-str (object->string b)))
	    (try (format #f "(+ ~A ~A)" a-str b-str) gen)
	    (try (format #f "(- ~A ~A)" a-str b-str) gen)
	    (try (format #f "(* ~A ~A)" a-str b-str) gen)
	    (try (format #f "(cos (+ ~A ~A))" a-str b-str) gen)
	    (try (format #f "(sin (* ~A ~A))" a-str b-str) gen)
	    (try (format #f "(abs (* ~A ~A))" a-str b-str) gen)
	    (try (format #f "(* ~A (abs ~A))" a-str b-str) gen)
	    (try (format #f "(~A o (+ ~A ~A))" gen a-str b-str) gen)
	    (try (format #f "(~A o (* ~A ~A))" gen a-str b-str) gen)
	    (try (format #f "(+ ~A (~A o ~A))" a-str gen b-str) gen)
	    (try (format #f "(* ~A (~A o ~A))" a-str gen b-str) gen)
	    (try (format #f "(+ (~A o ~A) ~A)" gen a-str b-str) gen)
	    (try (format #f "(* (~A o ~A) ~A)" gen a-str b-str) gen)
	    (try (format #f "(* (abs (~A o ~A)) ~A)" gen a-str b-str) gen)
	    ))
	args2)))
   args1)
#|  
  (for-each 
   (lambda (c)
     (let ((c-str (object->string c)))
       (for-each
	(lambda (b)
	  (let ((b-str (object->string b)))
	    (for-each
	     (lambda (a)
	       (let ((a-str (object->string a)))
		 (try (format #f "(+ ~A ~A ~A)" a-str b-str c-str) gen)
		 (try (format #f "(+ (* ~A ~A) ~A)" a-str b-str c-str) gen)
		 (try (format #f "(+ ~A (* ~A ~A))" a-str b-str c-str) gen)
		 (try (format #f "(* ~A ~A ~A)" a-str b-str c-str) gen)
		 (try (format #f "(* ~A (+ ~A ~A))" a-str b-str c-str) gen)
		 (try (format #f "(* (+ ~A ~A) ~A)" a-str b-str c-str) gen)
		 (try (format #f "(~A o (+ ~A ~A ~A))" gen a-str b-str c-str) gen)
		 (try (format #f "(~A o (* ~A ~A ~A))" gen a-str b-str c-str) gen)
		 (try (format #f "(~A o (* ~A (+ ~A ~A)))" gen a-str b-str c-str) gen)
		 (try (format #f "(~A o (+ ~A (* ~A ~A)))" gen a-str b-str c-str) gen)
		 (try (format #f "(~A o (* (+ ~A ~A) ~A))" gen a-str b-str c-str) gen)
		 (try (format #f "(~A o (+ (* ~A ~A) ~A))" gen a-str b-str c-str) gen)
		 (try (format #f "(+ ~A (~A o (+ ~A ~A)))" a-str gen b-str c-str) gen)
		 (try (format #f "(+ ~A (~A o (* ~A ~A)))" a-str gen b-str c-str) gen)
		 (try (format #f "(* ~A (~A o (+ ~A ~A)))" a-str gen b-str c-str) gen)
		 (try (format #f "(* ~A (~A o (* ~A ~A)))" a-str gen b-str c-str) gen)
		 
		 (try (format #f "(+ ~A ~A (~A o ~A))" a-str b-str gen c-str) gen)
		 (try (format #f "(* ~A ~A (~A o ~A))" a-str b-str gen c-str) gen)
		 (try (format #f "(+ (* ~A ~A) (~A o ~A))" a-str b-str gen c-str) gen)
		 (try (format #f "(* (+ ~A ~A) (~A o ~A))" a-str b-str gen c-str) gen)
		 (try (format #f "(+ ~A (* ~A (~A o ~A)))" a-str b-str gen c-str) gen)
		 (try (format #f "(* ~A (+ ~A (~A o ~A)))" a-str b-str gen c-str) gen)
		 
		 (try (format #f "(+ ~A (~A o ~A) ~A)" a-str gen b-str c-str) gen)
		 (try (format #f "(* ~A (~A o ~A) ~A)" a-str gen b-str c-str) gen)
		 (try (format #f "(+ (* ~A (~A o ~A)) ~A)" a-str gen b-str c-str) gen)
		 (try (format #f "(* (+ ~A (~A o ~A)) ~A)" a-str gen b-str c-str) gen)
		 (try (format #f "(+ ~A (* (~A o ~A) ~A))" a-str gen b-str c-str) gen)
		 (try (format #f "(* ~A (+ (~A o ~A) ~A))" a-str gen b-str c-str) gen)
		 
		 (try (format #f "(+ (~A o ~A) ~A ~A)" gen a-str b-str c-str) gen)
		 (try (format #f "(+ (~A o ~A) (* ~A ~A))" gen a-str b-str c-str) gen)
		 (try (format #f "(* (~A o ~A) (+ ~A ~A))" gen a-str b-str c-str) gen)
		 (try (format #f "(* (~A o ~A) ~A ~A)" gen a-str b-str c-str) gen)
		 
		 (try (format #f "(+ ~A (abs ~A) ~A)" a-str b-str c-str) gen)
		 (try (format #f "(+ ~A (sin ~A) ~A)" a-str b-str c-str) gen)
		 (try (format #f "(+ ~A (cos ~A) ~A)" a-str b-str c-str) gen)
		 ))
	     args3)))
	args2)))
   args1)
  
  (for-each
   (lambda (d)
     (let ((d-str (object->string d)))
       (for-each 
	(lambda (c)
	  (let ((c-str (object->string c)))
	    (for-each
	     (lambda (b)
	       (let ((b-str (object->string b)))
		 (for-each
		  (lambda (a)
		    (let ((a-str (object->string a)))
		      (try (format #f "(+ ~A ~A ~A ~A)" a-str b-str c-str d-str) gen)
		      (try (format #f "(* ~A ~A ~A ~A)" a-str b-str c-str d-str) gen)
		      (try (format #f "(+ (* ~A ~A) (* ~A ~A))" a-str b-str c-str d-str) gen)
		      (try (format #f "(* (+ ~A ~A) (+ ~A ~A))" a-str b-str c-str d-str) gen)
		      (try (format #f "(+ ~A (* ~A ~A ~A))" a-str b-str c-str d-str) gen)
		      (try (format #f "(* ~A (+ ~A ~A ~A))" a-str b-str c-str d-str) gen)
		      (try (format #f "(+ ~A (* ~A (+ ~A ~A)))" a-str b-str c-str d-str) gen)
		      (try (format #f "(* ~A (+ ~A (* ~A ~A)))" a-str b-str c-str d-str) gen)
		      (try (format #f "(+ (* ~A ~A ~A) ~A)" a-str b-str c-str d-str) gen)
		      (try (format #f "(* (+ ~A ~A ~A) ~A)" a-str b-str c-str d-str) gen)
		      (try (format #f "(+ (* ~A (+ ~A ~A)) ~A)" a-str b-str c-str d-str) gen)
		      (try (format #f "(* (+ ~A (* ~A ~A)) ~A)" a-str b-str c-str d-str) gen)
		      
		      (try (format #f "(+ (~A o ~A) ~A ~A ~A)" gen a-str b-str c-str d-str) gen)
		      (try (format #f "(* (~A o ~A) ~A ~A ~A)" gen a-str b-str c-str d-str) gen)
		      (try (format #f "(+ (* (~A o ~A) ~A) (* ~A ~A))" gen a-str b-str c-str d-str) gen)
		      (try (format #f "(* (+ (~A o ~A) ~A) (+ ~A ~A))" gen a-str b-str c-str d-str) gen)
		      (try (format #f "(+ (~A o ~A) (* ~A ~A ~A))" gen a-str b-str c-str d-str) gen)
		      (try (format #f "(* (~A o ~A) (+ ~A ~A ~A))" gen a-str b-str c-str d-str) gen)
		      (try (format #f "(+ (~A o ~A) (* ~A (+ ~A ~A)))" gen a-str b-str c-str d-str) gen)
		      (try (format #f "(* (~A o ~A) (+ ~A (* ~A ~A)))" gen a-str b-str c-str d-str) gen)
		      (try (format #f "(+ (* (~A o ~A) ~A ~A) ~A)" gen a-str b-str c-str d-str) gen)
		      (try (format #f "(* (+ (~A o ~A) ~A ~A) ~A)" gen a-str b-str c-str d-str) gen)
		      (try (format #f "(+ (* (~A o ~A) (+ ~A ~A)) ~A)" gen a-str b-str c-str d-str) gen)
		      (try (format #f "(* (+ (~A o ~A) (* ~A ~A)) ~A)" gen a-str b-str c-str d-str) gen)
		      
		      (try (format #f "(+ ~A (~A o ~A) ~A ~A)" a-str gen b-str c-str d-str) gen)
		      (try (format #f "(* ~A (~A o ~A) ~A ~A)" a-str gen b-str c-str d-str) gen)
		      (try (format #f "(+ (* ~A (~A o ~A)) (* ~A ~A))" a-str gen b-str c-str d-str) gen)
		      (try (format #f "(* (+ ~A (~A o ~A)) (+ ~A ~A))" a-str gen b-str c-str d-str) gen)
		      (try (format #f "(+ ~A (* (~A o ~A) ~A ~A))" a-str gen b-str c-str d-str) gen)
		      (try (format #f "(* ~A (+ (~A o ~A) ~A ~A))" a-str gen b-str c-str d-str) gen)
		      (try (format #f "(+ ~A (* (~A o ~A) (+ ~A ~A)))" a-str gen b-str c-str d-str) gen)
		      (try (format #f "(* ~A (+ (~A o ~A) (* ~A ~A)))" a-str gen b-str c-str d-str) gen)
		      (try (format #f "(+ (* ~A (~A o ~A) ~A) ~A)" a-str gen b-str c-str d-str) gen)
		      (try (format #f "(* (+ ~A (~A o ~A) ~A) ~A)" a-str gen b-str c-str d-str) gen)
		      (try (format #f "(+ (* ~A (+ (~A o ~A) ~A)) ~A)" a-str gen b-str c-str d-str) gen)
		      (try (format #f "(* (+ ~A (* (~A o ~A) ~A)) ~A)" a-str gen b-str c-str d-str) gen)
		      
		      (try (format #f "(+ ~A ~A (~A o ~A) ~A)" a-str b-str gen c-str d-str) gen)
		      (try (format #f "(* ~A ~A (~A o ~A) ~A)" a-str b-str gen c-str d-str) gen)
		      (try (format #f "(+ (* ~A ~A) (* (~A o ~A) ~A))" a-str b-str gen c-str d-str) gen)
		      (try (format #f "(* (+ ~A ~A) (+ (~A o ~A) ~A))" a-str b-str gen c-str d-str) gen)
		      (try (format #f "(+ ~A (* ~A (~A o ~A) ~A))" a-str b-str gen c-str d-str) gen)
		      (try (format #f "(* ~A (+ ~A (~A o ~A) ~A))" a-str b-str gen c-str d-str) gen)
		      (try (format #f "(+ ~A (* ~A (+ (~A o ~A) ~A)))" a-str b-str gen c-str d-str) gen)
		      (try (format #f "(* ~A (+ ~A (* (~A o ~A) ~A)))" a-str b-str gen c-str d-str) gen)
		      (try (format #f "(+ (* ~A ~A (~A o ~A)) ~A)" a-str b-str gen c-str d-str) gen)
		      (try (format #f "(* (+ ~A ~A (~A o ~A)) ~A)" a-str b-str gen c-str d-str) gen)
		      (try (format #f "(+ (* ~A (+ ~A (~A o ~A))) ~A)" a-str b-str gen c-str d-str) gen)
		      (try (format #f "(* (+ ~A (* ~A (~A o ~A))) ~A)" a-str b-str gen c-str d-str) gen)
		      
		      (try (format #f "(+ ~A ~A ~A (~A o ~A))" a-str b-str c-str gen d-str) gen)
		      (try (format #f "(* ~A ~A ~A (~A o ~A))" a-str b-str c-str gen d-str) gen)
		      (try (format #f "(+ (* ~A ~A) (* ~A (~A o ~A)))" a-str b-str c-str gen d-str) gen)
		      (try (format #f "(* (+ ~A ~A) (+ ~A (~A o ~A)))" a-str b-str c-str gen d-str) gen)
		      (try (format #f "(+ ~A (* ~A ~A (~A o ~A)))" a-str b-str c-str gen d-str) gen)
		      (try (format #f "(* ~A (+ ~A ~A (~A o ~A)))" a-str b-str c-str gen d-str) gen)
		      (try (format #f "(+ ~A (* ~A (+ ~A (~A o ~A))))" a-str b-str c-str gen d-str) gen)
		      (try (format #f "(* ~A (+ ~A (* ~A (~A o ~A))))" a-str b-str c-str gen d-str) gen)
		      (try (format #f "(+ (* ~A ~A ~A) (~A o ~A))" a-str b-str c-str gen d-str) gen)
		      (try (format #f "(* (+ ~A ~A ~A) (~A o ~A))" a-str b-str c-str gen d-str) gen)
		      (try (format #f "(+ (* ~A (+ ~A ~A)) (~A o ~A))" a-str b-str c-str gen d-str) gen)
		      (try (format #f "(* (+ ~A (* ~A ~A)) (~A o ~A))" a-str b-str c-str gen d-str) gen)
		      
		      (try (format #f "(~A o (+ ~A ~A ~A ~A))" gen a-str b-str c-str d-str) gen)
		      (try (format #f "(~A o (* ~A ~A ~A ~A))" gen a-str b-str c-str d-str) gen)
		      (try (format #f "(~A o (+ (* ~A ~A) (* ~A ~A)))" gen a-str b-str c-str d-str) gen)
		      (try (format #f "(~A o (* (+ ~A ~A) (+ ~A ~A)))" gen a-str b-str c-str d-str) gen)
		      (try (format #f "(~A o (+ ~A (* ~A ~A ~A)))" gen a-str b-str c-str d-str) gen)
		      (try (format #f "(~A o (* ~A (+ ~A ~A ~A)))" gen a-str b-str c-str d-str) gen)
		      (try (format #f "(~A o (+ ~A (* ~A (+ ~A ~A))))" gen a-str b-str c-str d-str) gen)
		      (try (format #f "(~A o (* ~A (+ ~A (* ~A ~A))))" gen a-str b-str c-str d-str) gen)
		      (try (format #f "(~A o (+ (* ~A ~A ~A) ~A))" gen a-str b-str c-str d-str) gen)
		      (try (format #f "(~A o (* (+ ~A ~A ~A) ~A))" gen a-str b-str c-str d-str) gen)
		      (try (format #f "(~A o (+ (* ~A (+ ~A ~A)) ~A))" gen a-str b-str c-str d-str) gen)
		      (try (format #f "(~A o (* (+ ~A (* ~A ~A)) ~A))" gen a-str b-str c-str d-str) gen)
		      
		      (try (format #f "(+ (~A o (* ~A ~A)) (* ~A ~A))" gen a-str b-str c-str d-str) gen)
		      (try (format #f "(* (~A o (+ ~A ~A)) (+ ~A ~A))" gen a-str b-str c-str d-str) gen)
		      (try (format #f "(~A o (+ (* ~A ~A) (* ~A ~A)))" gen a-str b-str c-str d-str) gen)
		      (try (format #f "(+ ~A (* ~A (~A o (+ ~A ~A))))" a-str b-str gen c-str d-str) gen)
		      (try (format #f "(* ~A (+ ~A (~A o (* ~A ~A))))" a-str b-str gen c-str d-str) gen)
		      (try (format #f "(+ (* ~A (~A o (+ ~A ~A))) ~A)" a-str gen b-str c-str d-str) gen)
		      (try (format #f "(* (+ ~A (~A o (* ~A ~A))) ~A)" a-str gen b-str c-str d-str) gen)
		      
		      (try (format #f "(+ ~A ~A ~A ~A (~A o))" a-str b-str c-str d-str gen) gen)
		      (try (format #f "(* ~A ~A ~A ~A (~A o))" a-str b-str c-str d-str gen) gen)
		      ))
		  args4)))
	     args3)))
	args2)))
   args1)
|#
  )


(for-each 
 (lambda (gen)
   (set! tries 0)
   (gc)
   (set! start-run (get-internal-real-time))
   (test-gen gen)
   (format *stderr* "~A: (~D, ~,3F)~%" gen tries (* 1.0 (/ (- (get-internal-real-time) start-run) internal-time-units-per-second))))
 '(r2k!cos readin-1 filter-1 fir-filter-1 iir-filter-1 oscil
   one-pole-all-pass-1 env-1 pulsed-env-1 
   formant-1 firmant-1 table-lookup-1 moving-max-1
   comb-1 notch-1 all-pass-1 one-pole-1 one-zero-1 two-pole-1 two-zero-1
   polywave polyshape ncos nsin nrxycos nrxysin rxyk!sin rxyk!cos asymmetric-fm square-wave triangle-wave pulse-train sawtooth-wave
   moving-average-1 delay-1 filtered-comb-1 src-1 phase-vocoder-1 granulate-1 ssb-am-1 adjustable-oscil wave-train-1
   oscil-bank-1 convolve-1 formant-bank-1 comb-bank-1 filtered-comb-bank-1 all-pass-bank-1
   ))

(gc)
(s7-version)
(exit)
