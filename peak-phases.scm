
(define noid-min-peak-phases (vector

#(1  1.0    #(0))

#(2  1.76   #(0 0))

#(3  1.980  #(0 23/39 6/19)
            #(0 16/39 32/19)
            #(0 62/39 6/19)
            #(0 55/39 32/19)
            #(0 31/22 37/22)
	    ;; best found by hand search of the graph: [-0.010 1.271 5.265] noid3a 203838
     1.98053356757571 #(0 7/17 59/35))

#(4  2.050  #(0 45/37 25/31 8/7)
     2.040  #(0 33/35 67/50 10/9)
            ;; graph: [-0.010 0.329 2.198 6.157] noid4
            #(0 1/9 17/24 71/36))

#(5  2.361  #(0 59/71 68/41 43/30 61/38)
     2.358  #(0 31/27 14/45 10/19 6/17)
            #(0 1/7 14/45 65/42 16/43)
     2.353  #(0 3/20 52/155 30/19 2/5)) ; better than my graph noid5

#(6  2.567  #(0 36/19 7/25 18/55 23/17 5/26)
     2.562  #(0 23/26 10/39 57/44 33/25 68/59)
     2.557  #(0 55/62 9/35 57/44 29/22 38/33))

#(7  2.708 #(0 5/31 35/31 24/19 23/27 23/15 29/26))

#(8  3.008  #(0 41/45 135/71 32/21 13/16 13/16 24/31 27/22)
     3.003  #(0 22/27 54/29 39/28 31/40 53/74 9/11 59/50))

#(9  3.202  #(0 1/83 578/385 56/33 17/76 13/64 87/61 3/4 54/35)
     3.181  #(0 21/22 107/57 2/25 5/6 18/41 37/24 43/25 34/25))


#(10 3.4332 #(0 2/27 41/23 3/20 33/40 29/21 51/31 18/19 9/53 25/19))

#(11 3.5519 #(0 28/29 4/27 4/23 34/33 67/34 11/30 1/13 33/31 31/22 19/17))

#(12 3.9110 #(0 1/14 9/58 3/47 9/37 27/17 25/14 4/7 17/24 1/22 31/24 11/45)
     3.8666 #(0 43/34 22/15 9/37 3/46 167/111 103/52 3/38 30/17 15/22 35/24 63/62))

#(13 4.0798 #(0 3/32 1/44 76/43 17/33 17/25 21/23 3/16 60/31 19/18 11/72 57/80 67/39)
     4.0411 #(0 25/17 83/104 58/49 59/35 5/14 36/19 39/40 35/22 71/50 27/23 47/34 7/32))

#(14 4.2167 #(0 22/17 2/19 31/18 20/13 23/28 15/17 61/107 107/106 2/29 6/7 
              21/23 79/57 56/167)
     4.1992 #(0 14/55 80/51 1/18 175/262 71/80 23/24 42/29 5/7 31/33 16/33 
              23/16 16/17 14/57))

#(15 4.3725 #(0 39/59 157/196 10/13 31/21 38/33 17/31 34/23 37/68 146/147 
	      29/41 12/19 3/10 35/24 59/33))

#(16 4.6967 #(0 72/49 91/73 115/74 17/22 2/13 53/31 35/22 51/26 5/23 31/29 
	      12/11 28/39 45/31 43/67 21/19)
     4.6353 #(0 42/43 27/38 37/23 19/37 11/45 19/39 372/223 55/63 11/7 52/29 
	      61/50 32/25 50/59 19/12 67/40))

#(17 4.7650 #(0 1/216 14/43 172/123 1/17 72/59 69/37 51/73 1/20 1/43 
              17/41 1/9 55/32 13/17 13/20 13/8 61/31))

#(18 4.9811 #(0 11/23 21/13 9/20 3/25 32/25 7/55 7/15 27/28 25/32 46/31 
              5/16 5/14 15/68 3/28 53/37 19/27 27/35)
     4.9449 #(0 25/19 11/15 4/15 3/10 23/18 196/131 105/62 4/11 8/33 97/56 
              1/10 41/23 1/18 8/29 93/73 6/37 20/19))

#(19 5.0555 #(0 9/89 24/95 51/127 1/12 63/88 53/34 3/13 9/22 112/75 11/7 23/29 
              59/178 1/83 44/39 1/18 91/73 16/31 8/9)
     5.0530 #(0 3/23 22/21 7/4 47/33 16/63 22/21 5/11 141/76 79/46 23/31 9/23 
	      16/41 15/23 8/5 128/69 2/17 25/14 1/15))


#(20 5.2638 #(0 16/13 29/39 25/44 23/16 21/20 35/34 1/17 21/32 5/7 34/21 24/25 
	      49/26 67/51 9/59 41/30 52/29 32/57 49/74 37/52))

#(21 5.3575 #(0 11/27 1/25 87/44 29/21 45/34 45/26 25/26 59/49 2/11 37/40 61/35 
	      59/58 6/61 45/49 58/83 3/20 34/57 31/42 20/19 38/35)
     5.3539 #(0 59/33 39/22 39/22 10/23 7/55 11/47 28/41 47/27 124/69 9/31 1/24 
              46/33 120/83 11/30 8/21 40/31 9/31 26/23 1/14 63/37))

#(22 5.7811 #(0 43/34 23/16 17/29 31/23 14/23 17/11 2/35 69/43 220/219 86/45 15/13 
	      11/30 41/23 27/16 2/5 11/19 34/39 23/20 32/31 32/41 6/19)
     5.6386 #(0 1/2 11/31 41/31 5/6 1/24 167/91 4/19 7/10 25/28 1/6 32/53 23/18 138/85 
              46/27 31/23 35/37 138/79 18/23 67/34 11/18 41/25))

#(23 5.7719 #(0 2/23 17/44 36/47 9/14 5/37 27/37 53/34 101/67 67/38 19/26 19/26 29/17 
	      13/7 69/43 1/16 32/25 1/20 26/17 82/71 11/25 8/81 22/25))

#(24 5.7995 #(0 19/37 1/19 3/14 1/60 1/57 9/26 13/35 19/44 21/13 107/106 59/54 9/25 
	      61/49 7/40 35/57 8/27 53/31 17/19 23/18 43/31 9/17 23/55 17/15))

#(25 6.0925 #(0 11/34 4/9 18/29 40/31 11/17 19/23 15/16 29/32 47/37 117/67 22/21 
	      9/13 5/22 19/29 21/37 2/27 23/13 5/17 37/27 37/99 44/25 15/19 33/32 55/29))

#(26 6.0483 #(0 43/31 4/39 21/26 13/46 26/61 13/15 11/25 103/90 38/31 44/23 13/16 
	      53/43 30/19 84/85 1/491 33/29 9/14 29/38 43/23 6/5 18/31 85/73 23/36 12/29 9/20))

#(27 6.5717 #(0 103/55 49/30 71/95 61/49 168/107 74/49 49/26 32/25 22/13 4/9 45/26 
	      43/28 1/25 67/56 35/43 26/25 11/8 19/66 3/5 6/11 36/19 21/22 73/122 1/5 74/59 39/25))

#(28 6.6218 #(0 29/19 8/5 3/26 13/17 142/81 69/38 156/125 37/19 83/47 2/41 43/29 9/17 
	      3/14 4/7 13/12 9/62 221/147 29/21 46/37 4/17 31/33 41/30 121/81 32/25 18/41 23/31 13/19)
     6.6208 #(0 29/21 59/32 94/93 3/20 44/39 23/14 13/23 19/25 15/16 23/30 1/23 79/43 
	      37/30 69/40 11/39 51/32 25/18 41/21 51/44 4/3 54/29 67/42 6/13 8/65 34/35 118/75 15/11))

#(29 6.7669 #(0 32/27 49/32 13/36 23/45 73/40 67/48 27/17 29/16 49/45 33/50 7/13 5/37 184/99 
	      31/40 11/20 53/47 86/49 51/50 14/85 51/37 8/13 124/73 39/31 91/57 1/71 67/39 4/21 25/29))


#(30 6.8783 #(0 3/2 27/19 43/25 13/16 1/24 15/74 53/59 7/30 28/25 7/31 14/11 13/31 5/11 
	      27/34 90/49 35/29 185/104 67/37 46/25 11/9 17/28 14/25 85/49 41/39 2/29 13/7 
	      17/13 33/19 1/46))

#(31 7.0052 #(0 19/17 1/15 39/41 33/20 5/6 25/26 50/99 25/44 63/110 50/49 1/11 157/315 
	      13/21 43/31 31/26 44/45 51/32 288/157 58/33 29/51 18/47 33/58 103/52 3/26 
	      52/37 11/27 35/19 37/36 5/44 6/35))

#(32 7.2150  #(0 41/35 19/42 3/38 148/91 37/24 76/43 4/7 1/17 4/29
               88/59 313/188 1/30 53/40 29/17 8/25 7/26 18/11 9/29 
               6/25 248/149 6/17 95/49 76/91 54/43 26/19 16/35 73/53 
               33/29 33/23 79/41 3/13))


#(40 8.220  #(0 47/25 55/38 2/23 13/10 55/47 29/80 68/37 44/27 123/77 
	      50/49 18/107 26/25 55/47 21/13 3/17 15/28 28/19 16/23 23/28 
	      3/2 28/39 73/61 17/13 94/65 31/29 43/33 11/28 42/23 26/25 
	      35/43 37/21 13/20 43/24 57/31 2/3 43/60 7/24 73/51 8/55))

#(41 8.5677 #(0 8/7 11/6 31/19 21/32 27/17 45/26 59/49 25/19 71/41 21/19 45/23 8/15 
	      39/28 57/34 65/38 23/17 241/121 34/29 20/53 58/41 400/401 43/34 32/27 
	      9/38 32/17 93/58 5/16 13/38 16/27 47/74 2/5 17/22 191/381 17/43 36/23 
	      28/19 7/20 1/45 39/35 27/22)
     8.5127 #(0 5/24 1/24 11/18 26/23 7/11 34/31 14/15 22/31 11/27 58/37 21/11 50/117 
	      27/32 73/47 16/19 35/47 59/52 1/9 7/31 16/59 63/94 30/23 86/85 29/34 51/26 
	      37/41 61/45 64/65 15/14 37/26 9/22 9/19 1/74 1/4 34/19 16/23 19/31 7/27 47/29 17/74))

#(42 8.6663 #(0 11/6 1 47/33 29/16 8/25 6/7 11/8 22/29 43/37 31/21 15/8 37/25 37/34 
	      5/7 55/36 129/71 32/23 11/14 51/28 31/29 25/33 1/296 60/59 52/29 167/333 
	      20/17 14/19 1/14 46/41 18/19 17/20 79/43 5/22 61/36 1/8 49/31 41/28 11/25 
	      12/19 7/22 62/49))

#(43 8.6881 #(0 3/34 57/43 62/53 33/23 31/34 31/20 27/31 1/20 14/27 189/283 23/25 41/34 
	      49/58 56/55 205/103 28/25 4/9 53/27 7/18 66/79 45/23 11/25 3/25 4/11 40/47 
	      53/32 7/6 45/44 5/13 19/21 80/51 28/29 19/16 1/48 37/62 13/25 59/45 35/19 
	      7/4 61/56 4/9 107/58))

#(44 8.5912 #(0 3/11 5/18 27/22 32/23 4/15 17/27 66/43 34/25 19/17 15/56 10/27 109/87 59/47 
	      9/8 157/94 1/282 21/22 30/17 2/3 54/37 23/14 1/21 14/11 26/87 41/24 5/9 19/13 
	      2/13 34/33 59/71 23/15 131/75 37/23 1/24 212/113 90/49 23/32 18/55 5/7 5/28 
	      1/20 53/34 67/43))

#(45 8.7655 #(0 3/5 1/22 4/13 13/24 52/105 97/82 1/26 73/81 17/23 53/73 11/17 87/86 12/31 
	      14/113 23/49 15/8 172/103 43/23 61/44 23/32 3/14 37/25 21/17 146/97 67/41 21/38 
	      53/27 9/28 25/21 13/43 28/85 48/31 43/85 29/52 35/31 77/53 12/97 26/31 89/45 
	      37/25 65/38 34/29 19/37 29/23))


#(50 9.8335 #(0 21/17 134/73 188/113 43/34 8/25 6/11 9/7 14/23 37/29 41/38 71/58 47/55 16/19 
	      6/13 265/177 212/127 3/29 33/29 51/26 23/19 115/74 44/29 6/7 26/21 24/29 12/7 
	      57/32 5/14 4/27 110/61 37/53 18/37 1/5 55/41 107/61 62/35 57/29 19/24 9/53 1/14 
	      1 185/139 66/35 473/237 31/18 145/144 99/56 15/29 5/23))

#(60 10.861 #(0 212/141 11/9 43/30 47/25 31/22 7/26 187/104 11/26 121/64 2/15 251/137 
	      6/23 128/69 37/38 16/23 42/29 101/81 107/63 17/28 1/76 29/33 5/59 41/22 
	      33/23 28/43 59/30 179/90 49/38 17/26 23/22 117/70 4/11 67/56 5/42 182/97 
	      10/59 45/77 32/19 83/46 16/25 1 86/57 11/38 61/44 57/43 2/31 17/18 193/116 
	      31/33 23/20 82/55 22/17 43/37 173/91 33/23 4/31 29/25 16/19 8/13))

#(61 10.718 #(0 8/55 59/38 47/29 13/18 68/135 51/35 41/26 25/33 13/20 32/23 11/16 27/40 
	      3/23 7/6 22/17 23/22 22/35 52/69 23/29 3/19 32/17 49/31 9/14 123/77 53/105 
	      5/14 41/44 4/13 43/44 57/29 29/17 6/17 5/19 19/36 40/27 1/14 73/47 70/39 
	      35/39 13/11 87/65 31/24 24/19 58/31 6/31 15/8 31/25 9/25 37/23 17/27 20/13 
	      66/35 17/20 3/43 5/3 59/33 1/10 53/27 8/47 53/36))

#(64 10.968 #(0 47/33 170/113 58/57 7/27 89/46 29/24 55/47 15/29 
	      8/31 71/52 4/43 275/183 11/19 56/33 2/27 58/31 48/37 
	      7/12 31/18 17/10 75/38 69/68 32/17 106/85 13/40 20/39 
	      72/55 1 21/16 103/69 33/20 44/25 74/61 40/53 17/26 3/2 
	      10/33 9/19 22/73 5/8 26/33 1/9 13/7 140/139 124/79 13/8 
	      171/257 25/31 39/29 15/34 25/62 46/139 56/29 60/37 1/12 
	      17/16 7/41 26/87 6/53 5/13 43/23 25/32 23/24))


#(128 18.937 #(0 114/67 22/29 3/7 10/89 80/47 9/16 17/16 2/27 10/69 
	       11/20 8/17 38/25 78/157 33/29 42/67 29/25 122/65 31/29 
	       23/25 42/23 51/28 32/77 16/81 1/34 6/13 15/49 17/11 6/7 
	       355/237 78/47 5/23 17/20 43/26 67/36 51/32 5/3 39/44 5/3 
	       17/11 28/31 29/18 27/31 3/16 9/22 7/34 199/149 42/25 37/33 
	       6/19 114/79 35/39 49/82 33/32 45/23 26/17 92/55 28/15 85/71 
	       21/73 17/10 17/9 3/28 7/31 27/14 53/105 36/25 41/22 4/7 20/19 
	       4/7 41/25 20/23 4/5 27/43 2/29 4/27 29/21 36/19 2/31 93/56 2/33 
	       20/19 16/11 15/34 33/17 23/19 29/26 20/27 49/25 15/23 25/76 48/67 
	       10/7 2/35 20/13 2/21 27/37 43/65 57/44 35/39 137/96 146/117 37/42 
	       47/24 69/40 18/53 4/3 17/13 81/53 7/18 51/55 19/11 29/23 65/64 
	       55/46 1/7 7/53 19/20 56/33 7/27 79/41 25/21 114/113 35/22 44/43 
	       38/63 1/47))
))


#|
;;; these phases were found with the following software

(if (not (provided? 'snd-generators.scm)) (load "generators.scm"))
(if (not (provided? 'snd-dsp.scm)) (load "dsp.scm"))


(define* (test-it n cur-min-max cur-min-max-phases :optional tiny)
  (let* ((samps (* n 4096)))
    (set! (print-length) (max (print-length) n))
    (do ((m 0 (1+ m)))
	((or (c-g?) (= m n)))

      ;; on nth try going down then up
      (let ((try-up #t))
	(let ((happy #t)
	      (cur-phases (vct-copy cur-min-max-phases))
	      (incr -.01))
	  (do ()
	      ((not happy))
	    (vct-set! cur-phases m (+ (vct-ref cur-phases m) incr))
	    (let* ((mod1 (make-noid (radians->hz (/ (* 2 pi) samps)) n cur-phases))
		   (cur-max 0.0))
	      (run (lambda ()
		     (do ((i 0 (1+ i)))
			 ((= i samps))
		       (set! cur-max (max cur-max (abs (noid mod1 0.0)))))))
	      (if (< cur-max cur-min-max)
		  (begin
		    (set! cur-min-max cur-max)
		    (set! try-up #f)
					;(snd-display ";-max now ~A (~A ~A)" cur-max m (vct-ref cur-phases m))
		    (vct-set! cur-min-max-phases m (vct-ref cur-phases m)))
		  (set! happy #f)))))
	
	(let ((happy #t)
	      (cur-phases (vct-copy cur-min-max-phases))
	      (incr -.001))
	  (do ()
	      ((not happy))
	    (vct-set! cur-phases m (+ (vct-ref cur-phases m) incr))
	    (let* ((mod1 (make-noid (radians->hz (/ (* 2 pi) samps)) n cur-phases))
		   (cur-max 0.0))
	      (run (lambda ()
		     (do ((i 0 (1+ i)))
			 ((= i samps))
		       (set! cur-max (max cur-max (abs (noid mod1 0.0)))))))
	      (if (< cur-max cur-min-max)
		  (begin
		    (set! cur-min-max cur-max)
		    (set! try-up #f)
					;(snd-display ";--max now ~A (~A ~A)" cur-max m (vct-ref cur-phases m))
		    (vct-set! cur-min-max-phases m (vct-ref cur-phases m)))
		  (set! happy #f)))))

	(if tiny
	    (let ((happy #t)
		  (cur-phases (vct-copy cur-min-max-phases))
		  (incr -.0001))
	      (do ()
		  ((not happy))
		(vct-set! cur-phases m (+ (vct-ref cur-phases m) incr))
		(let* ((mod1 (make-noid (radians->hz (/ (* 2 pi) samps)) n cur-phases))
		       (cur-max 0.0))
		  (run (lambda ()
			 (do ((i 0 (1+ i)))
			     ((= i samps))
			   (set! cur-max (max cur-max (abs (noid mod1 0.0)))))))
		  (if (< cur-max cur-min-max)
		      (begin
			(set! cur-min-max cur-max)
			(set! try-up #f)
					;(snd-display ";--max now ~A (~A ~A)" cur-max m (vct-ref cur-phases m))
			(vct-set! cur-min-max-phases m (vct-ref cur-phases m)))
		      (set! happy #f))))))

	(if try-up
	    (begin
	      (let ((happy #t)
		    (cur-phases (vct-copy cur-min-max-phases))
		    (incr 0.01))
		(do ()
		    ((not happy))
		  (vct-set! cur-phases m (+ (vct-ref cur-phases m) incr))
		  (let* ((mod1 (make-noid (radians->hz (/ (* 2 pi) samps)) n cur-phases))
			 (cur-max 0.0))
		    (run (lambda ()
			   (do ((i 0 (1+ i)))
			       ((= i samps))
			     (set! cur-max (max cur-max (abs (noid mod1 0.0)))))))
		    (if (< cur-max cur-min-max)
			(begin
			  (set! cur-min-max cur-max)
					;(snd-display ";+max now ~A (~A ~A)" cur-max m (vct-ref cur-phases m))
			  (vct-set! cur-min-max-phases m (vct-ref cur-phases m)))
			(set! happy #f)))))
	      
	      (let ((happy #t)
		    (cur-phases (vct-copy cur-min-max-phases))
		    (incr 0.001))
		(do ()
		    ((not happy))
		  (vct-set! cur-phases m (+ (vct-ref cur-phases m) incr))
		  (let* ((mod1 (make-noid (radians->hz (/ (* 2 pi) samps)) n cur-phases))
			 (cur-max 0.0))
		    (run (lambda ()
			   (do ((i 0 (1+ i)))
			       ((= i samps))
			     (set! cur-max (max cur-max (abs (noid mod1 0.0)))))))
		    (if (< cur-max cur-min-max)
			(begin
			  (set! cur-min-max cur-max)
					;(snd-display ";++max now ~A (~A ~A)" cur-max m (vct-ref cur-phases m))
			  (vct-set! cur-min-max-phases m (vct-ref cur-phases m)))
			(set! happy #f)))))

	      (if tiny
		  (let ((happy #t)
			(cur-phases (vct-copy cur-min-max-phases))
			(incr 0.0001))
		    (do ()
			((not happy))
		      (vct-set! cur-phases m (+ (vct-ref cur-phases m) incr))
		      (let* ((mod1 (make-noid (radians->hz (/ (* 2 pi) samps)) n cur-phases))
			     (cur-max 0.0))
			(run (lambda ()
			       (do ((i 0 (1+ i)))
				   ((= i samps))
				 (set! cur-max (max cur-max (abs (noid mod1 0.0)))))))
			(if (< cur-max cur-min-max)
			    (begin
			      (set! cur-min-max cur-max)
					;(snd-display ";++max now ~A (~A ~A)" cur-max m (vct-ref cur-phases m))
			      (vct-set! cur-min-max-phases m (vct-ref cur-phases m)))
			    (set! happy #f))))))))))

    (list cur-min-max cur-min-max-phases)))


(define (lrat n mx v)

  ;; check that mx is correct
  (set! (print-length) (max (print-length) n))

  (let* ((cur-max 0.0)
	 (samps (seconds->samples 2.0))
	 (mod1 (make-noid 1.0 n v))
	 (result (make-vector n)))
    (run 
     (lambda ()
       (do ((i 0 (1+ i)))
	   ((= i samps))
	 (let ((md (noid mod1 0.0)))
	   (set! cur-max (max cur-max (abs md)))))))
    (if (> (abs (- cur-max mx)) .001)
	(snd-display ";initial check mx: ~A, cur: ~A" mx cur-max))

    (let ((off (vct-ref v 0)))
      (do ((i 0 (1+ i)))
	  ((= i n))
	(vct-set! v i (fmod (- (vct-ref v i) (* (+ i 1) off)) (* 2 pi)))
	(if (< (vct-ref v i) 0.0) (vct-set! v i (+ (vct-ref v i) (* 2 pi))))))

    ;; check that massaged phases are correct
    (set! cur-max 0.0)
    (set! mod1 (make-noid 1.0 n v))
    (run 
     (lambda ()
       (do ((i 0 (1+ i)))
	   ((= i samps))
	 (let ((md (noid mod1 0.0)))
	   (set! cur-max (max cur-max (abs md)))))))
    (if (> (abs (- cur-max mx)) .001)
	(snd-display ";2nd check mx: ~A, cur: ~A" mx cur-max))

    (do ((i 0 (1+ i)))
	((= i n))
      (vector-set! result i (rationalize (inexact->exact (/ (vct-ref v i) pi)) 1/1000))
      (vct-set! v i (vector-ref result i)))

    ;; check that pi-relative phases are correct
    (set! cur-max 0.0)
    (let ((v1 (vct-copy v)))
      (do ((i 0 (1+ i)))
	  ((= i n))
	(vct-set! v1 i (* pi (vct-ref v i))))
      (set! mod1 (make-noid 1.0 n v1))
      (run 
       (lambda ()
	 (do ((i 0 (1+ i)))
	     ((= i samps))
	   (let ((md (noid mod1 0.0)))
	     (set! cur-max (max cur-max (abs md)))))))
      (if (> (abs (- cur-max mx)) .001)
	  (snd-display ";3rd check mx: ~A, cur: ~A" mx cur-max)))

    result))


(define (test-sins n cur-min-maxes)
  (let ((tested-max 0.0)
	(angle 0.0)
	(incr (hz->radians 1.0))
	(cur-min-max-phases (make-vct n)))
    (do ((i 0 (1+ i)))
	((= i n))
      (vct-set! cur-min-max-phases i (* pi (vector-ref cur-min-maxes i))))
    (do ((i 0 (1+ i)))
	((= i 88200))
      (let ((sum 0.0))
	(do ((k 0 (1+ k)))
	    ((= k n))
	  (set! sum (+ sum (sin (+ (* (+ k 1) angle) (vct-ref cur-min-max-phases k))))))
	(set! tested-max (max tested-max (abs sum))))
      (set! angle (+ angle incr)))
    (list tested-max (/ tested-max n))))


(define (try-it n tries)
  (let* (;(n 32)
	 (cur-min-max 100000.0)
	 (cur-min-max-phases (make-vct n))
	 (samps (seconds->samples 2.0)))
    (do ((m 0 (1+ m)))
	((or (c-g?) 
	     (= m tries)))
      (let ((cur-phases (make-vct n)))
	(do ((i 0 (1+ i)))
	    ((= i n))
	  (vct-set! cur-phases i (random (* 2 pi))))
	(let* ((mod1 (make-noid 1.0 n cur-phases))
	       (cur-max 0.0))
	  (run
	   (lambda ()
	     (do ((i 0 (1+ i)))
		 ((= i samps))
	       (set! cur-max (max cur-max (abs (noid mod1 0.0)))))))

	  ;(snd-display ";1: ~A" cur-max)

	  (if (< cur-max (* 1.25 cur-min-max))
	      (let ((lst (test-it n cur-max cur-phases)))
		(set! cur-max (car lst))
		(set! cur-phases (cadr lst))))

	  ;(snd-display ";2: ~A" cur-max)

	  (if (< cur-max cur-min-max)
	      (begin
		(set! cur-min-max cur-max)
		(do ((i 0 (1+ i)))
		    ((= i n))
		  (vct-set! cur-min-max-phases i (vct-ref cur-phases i)))
		(set! (print-length) (max (print-length) n))
		(snd-display "~%;~A: ~A ~A ~A"  m cur-min-max (* n cur-min-max) cur-min-max-phases)
		(snd-display ";  rat: ~A" (lrat n cur-min-max (vct-copy cur-min-max-phases))))))))

      (list cur-min-max cur-min-max-phases (test-sins n (lrat n cur-min-max (vct-copy cur-min-max-phases))))))


(define (try-it-all start-n tries)
  (do ((i start-n (1+ i)))
      ((c-g?))
    (try-it i tries)))


;;; for n<50 I used 20000 tries
|#

