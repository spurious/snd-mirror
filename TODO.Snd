A list of some things-to-do in Snd (these are some projects that strike
me as straightforward -- they don't require intimate knowlege of Snd innards).


w98 sound input (adc) support; this is almost written (audio.c); it mostly
  needs testing.  A larger project would be to tie the "mixer" into 
  audio.c.

w98 gtk port -- all the pieces for this apparently exist, but every time
  I try to run Windows, my machine hangs.

Alpha port: I'm told there are lingering long int problems in this
  port, but I don't have access to an Alpha -- all I need is the
  gcc printout during compilation.

add modules to tie sndlib into CL, Python, Octave, etc (via SWIG?).

Snd name completion tied into the Emacs-Snd subjob connection (this
  apparently will require "raw" mode in ilisp).

Snd's help and apropos merged with Guile's (this is harder than it
ought to be: see note in snd-scm.c).

--------
OpenGL spectrum display (the communication with Snd is in glfft.c). This
also needs to be tied into the configure script (which can search for
openGL via (mdl_have_opengl by Matthew Langston):
AC_DEFUN([MDL_HAVE_OPENGL],
[
  AC_REQUIRE([AC_PROG_CC])
  AC_REQUIRE([AC_PATH_X])
  AC_REQUIRE([AC_PATH_XTRA])

  AC_CACHE_CHECK([for OpenGL], mdl_cv_have_OpenGL,
  [
dnl Check for Mesa first, unless we were asked not to.
    AC_HELP_STRING([--with-Mesa],
                   [Prefer the Mesa library over a vendors native OpenGL library (default=yes)],
                   with_Mesa_help_string)
    AC_ARG_ENABLE(Mesa, $with_Mesa_help_string, use_Mesa=$enableval, use_Mesa=yes)

    if test x"$use_Mesa" = xyes; then
       GL_search_list="MesaGL   GL"
      GLU_search_list="MesaGLU GLU"
      GLX_search_list="MesaGLX GLX"
    else
       GL_search_list="GL  MesaGL"
      GLU_search_list="GLU MesaGLU"
      GLX_search_list="GLX MesaGLX"
    fi

    AC_LANG_SAVE
    AC_LANG_C

dnl If we are running under X11 then add in the appropriate libraries.
if ! test x"$no_x" = xyes; then
dnl Add everything we need to compile and link X programs to GL_X_CFLAGS
dnl and GL_X_LIBS.
  GL_CFLAGS="$X_CFLAGS"
  GL_X_LIBS="$X_PRE_LIBS $X_LIBS -lX11 -lXext -lXmu -lXt -lXi $X_EXTRA_LIBS"
fi
    GL_save_CPPFLAGS="$CPPFLAGS"
    CPPFLAGS="$GL_CFLAGS"

    GL_save_LIBS="$LIBS"
    LIBS="$GL_X_LIBS"

    # Save the "AC_MSG_RESULT file descriptor" to FD 8.
    exec 8>&AC_FD_MSG

    # Temporarily turn off AC_MSG_RESULT so that the user gets pretty
    # messages.
    exec AC_FD_MSG>/dev/null

    AC_SEARCH_LIBS(glAccum,          $GL_search_list, have_GL=yes,   have_GL=no)
    AC_SEARCH_LIBS(gluBeginCurve,   $GLU_search_list, have_GLU=yes,  have_GLU=no)
    AC_SEARCH_LIBS(glXChooseVisual, $GLX_search_list, have_GLX=yes,  have_GLX=no)
    AC_SEARCH_LIBS(glutInit,        glut,             have_glut=yes, have_glut=no)

    # Restore pretty messages.
    exec AC_FD_MSG>&8

    if test -n "$LIBS"; then
      mdl_cv_have_OpenGL=yes
      GL_LIBS="$LIBS"
      AC_SUBST(GL_CFLAGS)
      AC_SUBST(GL_LIBS)
    else
      mdl_cv_have_OpenGL=no
      GL_CFLAGS=
    fi

dnl Reset GL_X_LIBS regardless, since it was just a temporary variable
dnl and we don't want to be global namespace polluters.
    GL_X_LIBS=

    LIBS="$GL_save_LIBS"
    CPPFLAGS="$GL_save_CPPFLAGS"

    AC_LANG_RESTORE
  ])
])
and then make needs a target for glfft.
--------

Also, HAVE_GSL should be the default in configure.in (see gsl's gsl.m4,
but it needs to set gslblas etc).


Sawfish connection: it should be possible to send commands to sawfish,
  (via sawfish-client?); also there's a switch in Snd, HAVE_THEMES,
  that can draw widget backgrounds that grade between colors (as in
  sawfish's title bars) -- it might be neat to have this use the
  current theme.

gtk-html support (and the XmHTML stuff is not very recent).

A more direct connection to gmeteor (perhaps using the control-panel filter
  text widget).  use (filter-sound(make-filter ...)).

A graphic-EQ effect (effects.scm) -- this could use guile-gtk and the
  CLM formant generator.  The other effects in that file could use
  some sort of dialog to set the various variables, and ideally a
  C module (effects.c -> effects.so) autoloaded by the effects module.

A pitch tracker.

Noise reduction.

dB display in VU meters (in the record dialog).  A nicer VU meter background.

loop syntax filled in (loop.scm) (something is wrong with the CVS Guile Goops support).

Translate more CLM instruments to Scheme: 
  singer piano flute fade

More effects (see list of suggestions in effects.scm)

Add Gnome tie-ins.  (The main useful one, I think, is the "save-yourself"
  signal (no one can save himself...)).
#include <gnome.h>
/* do we need gnome_init("Snd",argc,argv);? */
GnomeClient *client = gnome_master_client();
gtk_signal_connect(GTK_OBJECT(client),"save_yourself",GTK_SIGNAL_FUNC(save_snd_state),"snd");
gtk_signal_connect(GTK_OBJECT(client),"die",GTK_SIGNAL_FUNC(exit_cleanly),NULL);


Gettext support, if there's interest. (How does gettext handle Scheme-style
  string formatting as in scm_misc_error?). The main drawback of gettext, besides problems like
  how to handle help strings and the completion array, is that it seems to
  require that we drag around an infinite number of ancillary files; surely
  there's a way to do the same thing in a less intrusive manner?
  Here's an example of the scm problem: in vct.c we have

    scm_misc_error(S_vct_ref,"index: ~A but vct length: ~A?",SCM_LIST2(pos,gh_int2scm(v->length)));

  but if translation requires that the args be reversed (as in the %2$d msgfmt business),
  does msgfmt know about things like ~A and SCM_LIST2?


A motif module parallel to guile-gtk; there's something like this in
cmucl, and a Scheme binding in xscm; perhaps the latter can be ported
to Guile.

Mac-OSX Snd port (since gtk and guile have been ported, Snd shouldn't be difficult).

There's a Scheme to C translator in Jaffer's schlep.scm -- perhaps this
can be used as a stopgap until Guile's compiler is ready?  (I've edited
a version of this so it runs in Guile).
