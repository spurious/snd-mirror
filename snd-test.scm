;;; Snd tests
;;;
;;; test 0: constants 
;;; test 1: default values
;;; test 2: headers 
;;; test 3: can variables be set/reset
;;; test 4: sndlib tests 
;;; test 5: simple overall checks
;;; test 6: vcts 
;;; test 7: colors 
;;; test 8: clm
;;; test 9: mix 
;;; test 10: marks 
;;; test 11: dialogs 
;;; test 12: sound file extensions etc 
;;; test 13: menus, edit lists, hooks, etc
;;; test 14: all functions
;;; test 15: chan-local vars 
;;; test 16: regularized funcs
;;; test 17: graphics
;;; test 18: enved
;;; test 19: save and restore
;;; test 20: transforms
;;; test 21: goops
;;; test 22: run
;;; test 23: with-sound
;;; test 24: Snd user-interface
;;; test 25: X/Xt/Xm/Xpm
;;; test 26: Glib/gdk/gdk-pixbuf/pango/gtk
;;; test 27: openGL
;;; test 28: errors

;;; TODO: mouse-drag in time/fft graph hook?
;;; TODO: find/"fix" clipping
;;; TODO: pan env field in mix dialog if stereo in/out
;;; TODO: doc ex of key-press-hook (cx cs=save as in xe-enved?), mix-amp-changed-hook, select-*-hook [click=>post info in box]
;;; TODO: xemacs style top list of sounds, current takes whole screen [make-top-row tmp18.scm, files-popup-buffer in examp.scm]
;;; TOOD: extend the mix-as-list syntax to list-of-ids (tracks) (are these all rationalized now?)
;;; effects crossref + tests + clm translations, interface crossref


;;; how to send ourselves a drop?  (button2 on menu is only the first half -- how to force 2nd?)

(use-modules (ice-9 format) (ice-9 debug) (ice-9 popen) (ice-9 optargs) (ice-9 syncase))

(define (snd-display . args)
  (let ((str (if (null? (cdr args))
		 (car args)
		 (apply format #f args))))
    (newline) 
    (display str)
    (if (not (provided? 'snd-nogui))
	(begin
	  (snd-print "\n")
	  (snd-print str)))))

(define tests 1)
(define snd-test -1)
(if (defined? 'disable-play) (disable-play))
(define keep-going #f)
(define full-test (< snd-test 0))
(define total-tests 28)
(define with-exit (< snd-test 0))
(set! (with-background-processes) #f)
(define all-args #f) ; huge arg testing
(define with-big-file #f)
(define have-libguile-so #f)
(define debugging-device-channels 8)

(define pi 3.141592653589793)
(define mus-position mus-channels)
(define max-optimization 6)

(define home-dir "/home/bil")
(if (file-exists? "/export/home/bil/cl/oboe.snd")
    (set! home-dir "/export/home/bil")
    (if (file-exists? "/Users/bill/cl/oboe.snd")
	(set! home-dir "/Users/bill")))
(system (string-append "cp " home-dir "/.snd " home-dir "/dot-snd"))
(define sf-dir "/sf1")
(define sample-reader-tests 300)
(define original-save-dir (or (save-dir) "/zap/snd"))
(define original-temp-dir (or (temp-dir) "/zap/tmp"))
(debug-set! stack 0)
(debug-enable 'debug 'backtrace)
(read-enable 'positions)
(define (irandom n) (if (= n 0) 0 (inexact->exact (random n))))
(add-hook! bad-header-hook (lambda (n) #t))

(define with-gui (or (provided? 'snd-gtk)
		     (provided? 'snd-motif)))

(if (file-exists? "optimizer.log")
    (delete-file "optimizer.log"))
(define optimizer-log (open-output-file "optimizer.log"))
(reset-hook! optimization-hook)
(add-hook! optimization-hook 
	   (lambda (msg)
	     (display msg optimizer-log)
	     (newline optimizer-log)))

(define sf-dir1 (string-append home-dir sf-dir "/"))
(if (not (file-exists? (string-append sf-dir1 "alaw.wav")))
    (begin
      (set! sf-dir "/sf")
      (set! sf-dir1 (string-append home-dir sf-dir "/"))
      (if (not (file-exists? (string-append sf-dir1 "alaw.wav")))
	  (begin
	    (snd-display ";;;can't find sf directory!")
	    (set! sf-dir1 #f)))))
(set! sf-dir sf-dir1)

(if (and (not (file-exists? "4.aiff"))
	 (not (string=? (getcwd) (string-append home-dir "/cl"))))
    (copy-file (string-append home-dir "/cl/4.aiff") (string-append (getcwd) "/4.aiff")))
(if (and (not (file-exists? "2.snd"))
	 (not (string=? (getcwd) (string-append home-dir "/cl"))))
    (copy-file (string-append home-dir "/cl/2.snd") (string-append (getcwd) "/2.snd")))
(if (and (not (file-exists? "obtest.snd"))
	 (not (string=? (getcwd) (string-append home-dir "/cl"))))
    (copy-file (string-append home-dir "/cl/oboe.snd") (string-append (getcwd) "/obtest.snd")))

(define times '())
(defmacro time (a) 
  `(let ((start (get-internal-real-time))) 
   ,a 
   (let ((val (/ (- (get-internal-real-time) start) 100)))
     (set! times (cons (list ',a val) times)))))

;(show-ptree #t)
(define include-clm #f)
(define original-prompt (listener-prompt))
(show-listener)
(set! (window-x) 600)
(set! (window-y) 10)

(define test14-file #f)
(define fneq (lambda (a b) (> (abs (- a b)) .001)))
(define ffneq (lambda (a b) (> (abs (- a b)) .01)))
(define fffneq (lambda (a b) (> (abs (- a b)) .1)))
(define feql
  (lambda (a b)
    (if (null? a)
	(null? b)
	(if (null? b)
	    #f
	    (if (fneq (car a) (car b))
		#f
		(feql (cdr a) (cdr b)))))))
(define ffeql
  (lambda (a b)
    (if (list? a)
	(if (null? a)
	    (null? b)
	    (if (null? b)
		#f
		(if (fffneq (car a) (car b))
		    #f
		    (ffeql (cdr a) (cdr b)))))
	#f)))
(define fieql
  (lambda (a b)
    (if (null? a)
	(null? b)
	(if (null? b)
	    #f
	    (if (integer? (car a))
		(if (not (= (car a) (car b)))
		    #f
		    (if (fneq (car a) (car b))
			#f))
		(fieql (cdr a) (cdr b)))))))
(define fveql 
  (lambda (a b i)
    (if (null? b)
	#t
	(if (fneq (car b) (vct-ref a i))
	    #f
	    (fveql a (cdr b) (+ i 1))))))

(define (vequal v0 v1)
  (<= (vct-peak (vct-subtract! (vct-copy v0) v1)) .001))

(define (vvequal v0 v1)
  (<= (vct-peak (vct-subtract! (vct-copy v0) v1)) .00002))

(define ran-state (seed->random-state (current-time)))
(define my-random
  (lambda (n)
    (if (= n 0) 
	0 ;sigh...
	(random n ran-state))))

;(define rs (lambda (n) (< (my-random 1.0) n)))
(define rs (lambda (n) #t))

(define timings (make-vector (+ total-tests 1)))

(snd-display ";;~A" (snd-version))
(define test-number -1)
(define test-hook (lambda (n)
		     ;(let ((fd (open-sound-file (format #f "/tmp/test~D.snd" n))))
		     ;  (close-sound-file fd 0))
		    (set! test-number n)
		     (if (and (> n 0) (number? (vector-ref timings (- n 1))))
			 (vector-set! timings (- n 1) (- (get-internal-real-time) (vector-ref timings (- n 1)))))
		     (vector-set! timings n (get-internal-real-time))
		     (snd-display ";test ~D" n)
		     (gc)
		     ;(snd-display (gc-stats))
		     ;(if (file-exists? "memlog")
		     ;	 (system (format #f "cp memlog memlog.~D" (1- n))))
		     ;(mem-report)
		     ))

(define overall-start-time (get-internal-real-time))
(snd-display "~%~A~%" (strftime "%d-%b %H:%M %Z" (localtime (current-time))))

(define (log-mem tst) (if (and (> tests 50) (= (modulo tst 10) 0))  (mem-report)))

(defmacro without-errors (func)
  `(catch #t 
	  (lambda ()
	    ,func)
	  (lambda args 
	    ;(snd-display ";warning: ~A" (car args))
	    (car args))))
;(defmacro without-errors (func) `(begin ,func))
(load "hooks.scm")
(load "ws.scm")

(define (reset-almost-all-hooks)
  (with-local-hook optimization-hook '() reset-all-hooks))

(define (list-p val)
  (and (list? val)
       (not (null? val))))

(define (arity-ok func args)
  (let ((arity (procedure-property func 'arity)))
    (and (list-p arity)
	 (>= args (car arity))
	 (or (caddr arity)
	     (<= args (+ (car arity) (cadr arity)))))))

(define (set-arity-ok func args)
  (let ((arity (if (procedure-with-setter? func)
		   (procedure-property (setter func) 'arity)
		   (procedure-property func 'arity))))
    (and (list-p arity)
	 (>= args (car arity))
	 (or (caddr arity)
	     (<= args (+ (car arity) (cadr arity)))))))

(if (and (> (length (script-args)) 0)
	 (> (script-arg) 0))
    (let ((arg (script-arg))
	  (args (script-args)))
      (if (not (string=? (list-ref args (1- arg)) "-l")) 
	  (snd-display ";script-args[~A]: ~A (~A)?" (1- arg) (list-ref args (1- arg)) args))
      (if (not (string=? (list-ref args arg) "snd-test")) 
	  (snd-display ";script-args[~A]: ~A (~A)?" arg (list-ref args arg) args))
      (if (> (length args) (1+ arg))
	  (begin
	    ;; test-number tests
	    (set! snd-test (string->number (list-ref args (1+ arg))))
	    (set! full-test (< snd-test 0))
	    (set! with-exit #t)
	    (set! (script-arg) (1+ arg))
	    (if (> (length (script-args)) (+ arg 2))
		(begin
		  (set! tests (string->number (list-ref args (+ arg 2))))
		  (set! (script-arg) (+ arg 2))))))))

(if (and (provided? 'snd-motif)
	 (provided? 'xm))
    (begin
      (load "event.scm")
      (if (not (defined? 'find-child))
	  (begin
	    (load "snd-motif.scm")
	    (load "popup.scm")))))



;;; ---------------- test 0: constants ----------------

(if (or full-test (= snd-test 0) (and keep-going (<= snd-test 0)))
    (letrec ((test-constants 
	      (lambda (lst)
		(if (not (null? lst))
		    (begin
		      (if (not (= (cadr lst) (caddr lst)))
			  (snd-display ";~A /= ~A (~A)~%"
				       (car lst) (cadr lst) (caddr lst)))
		      (test-constants (cdddr lst)))))))
      (if (procedure? test-hook) (test-hook 0))
      (test-constants
       (list
	'enved-amplitude enved-amplitude 0 
	'autocorrelation autocorrelation 3
	'bartlett-window bartlett-window 4 
	'blackman2-window blackman2-window 6 
	'blackman3-window blackman3-window 7 
	'blackman4-window blackman4-window 8
	'cauchy-window cauchy-window 12 
	'channels-combined channels-combined 1 
	'channels-separate channels-separate 0 
	'channels-superimposed channels-superimposed 2
	'cursor-in-middle cursor-in-middle 3
	'cursor-in-view cursor-in-view 0 
	'cursor-on-left cursor-on-left 1 
	'cursor-on-right cursor-on-right 2 
	'dolph-chebyshev-window dolph-chebyshev-window 16
	'exponential-window exponential-window 9 
	'zoom-focus-active zoom-focus-active 2
	'zoom-focus-left zoom-focus-left 0
	'zoom-focus-middle zoom-focus-middle 3
	'zoom-focus-right zoom-focus-right 1 
	'fourier-transform fourier-transform 0 
	'gaussian-window gaussian-window 14 
	'graph-dots graph-dots 1
	'graph-dots-and-lines graph-dots-and-lines 3 
	'graph-filled graph-filled 2 
	'graph-lines graph-lines 0 
	'graph-lollipops graph-lollipops 4
	'hadamard-transform hadamard-transform 5
	'haar-transform haar-transform 6
	'hamming-window hamming-window 5
	'hanning-window hanning-window 1
	'kaiser-window kaiser-window 11 
	'keyboard-no-action keyboard-no-action 4
	'cepstrum cepstrum 4
	'graph-once graph-once 0 
	'parzen-window parzen-window 3
	'poisson-window poisson-window 13
	'rectangular-window rectangular-window 0 
	'riemann-window riemann-window 10 
	'graph-as-sonogram graph-as-sonogram 1
	'graph-as-spectrogram graph-as-spectrogram 2 
        'graph-once graph-once 0
        'graph-as-wavogram graph-as-wavogram 3
	'enved-spectrum enved-spectrum 1
	'speed-control-as-float speed-control-as-float 0 
	'speed-control-as-ratio speed-control-as-ratio 1 
	'speed-control-as-semitone speed-control-as-semitone 2 
	'enved-srate enved-srate 2 
	'tukey-window tukey-window 15 
	'walsh-transform walsh-transform 2
	'wavelet-transform wavelet-transform 1
	'welch-window welch-window 2 
	'cursor-cross cursor-cross 0
	'cursor-line cursor-line 1
	'dont-normalize dont-normalize 0
	'normalize-by-channel normalize-by-channel 1
	'normalize-by-sound normalize-by-sound 2
	'normalize-globally normalize-globally 3
	'x-axis-in-samples x-axis-in-samples 1 
	'x-axis-in-beats x-axis-in-beats 3
	'x-axis-in-seconds x-axis-in-seconds 0 
	'x-axis-as-percentage x-axis-as-percentage 2
	'enved-add-point enved-add-point 0
	'enved-delete-point enved-delete-point 1
	'enved-move-point enved-move-point 2
	'time-graph time-graph 0
	'transform-graph transform-graph 1
	'lisp-graph lisp-graph 2
	'copy-context copy-context 0
	'cursor-context cursor-context 3
	'selection-context selection-context 2

	;; sndlib constants
	'mus-next mus-next 0
	'mus-aifc mus-aifc 1
	'mus-riff mus-riff 2
	'mus-nist mus-nist 4
	'mus-raw mus-raw 10
	'mus-ircam mus-ircam 13
	'mus-aiff mus-aiff 48
	'mus-bicsf mus-bicsf 3
	'mus-voc mus-voc 8
	'mus-svx mus-svx 7
	'mus-soundfont mus-soundfont 24
	'mus-bshort mus-bshort 1
	'mus-lshort mus-lshort 10
	'mus-mulaw mus-mulaw 2
	'mus-alaw mus-alaw 6
	'mus-byte mus-byte 3
	'mus-ubyte mus-ubyte 7
	'mus-bfloat mus-bfloat 4
	'mus-lfloat mus-lfloat 12
	'mus-bint mus-bint 5
	'mus-lint mus-lint 11
	'mus-bintn mus-bintn 17
	'mus-lintn mus-lintn 18
	'mus-b24int mus-b24int 8
	'mus-l24int mus-l24int 16
	'mus-bdouble mus-bdouble 9
	'mus-ldouble mus-ldouble 13
	'mus-ubshort mus-ubshort 14
	'mus-ulshort mus-ulshort 15
	'mus-bfloat-unscaled mus-bfloat-unscaled 19
	'mus-lfloat-unscaled mus-lfloat-unscaled 20
	'mus-bdouble-unscaled mus-bdouble-unscaled 21
	'mus-ldouble-unscaled mus-ldouble-unscaled 22
	'mus-audio-default mus-audio-default 0
	'mus-audio-duplex-default mus-audio-duplex-default 1
	'mus-audio-line-out mus-audio-line-out 4
	'mus-audio-line-in mus-audio-line-in 5
	'mus-audio-microphone mus-audio-microphone 6
	'mus-audio-speakers mus-audio-speakers 7
	'mus-audio-dac-out mus-audio-dac-out 10
	'mus-audio-adat-in mus-audio-adat-in 2
	'mus-audio-aes-in mus-audio-aes-in 3
	'mus-audio-digital-in mus-audio-digital-in 8
	'mus-audio-digital-out mus-audio-digital-out 9
	'mus-audio-adat-out mus-audio-adat-out 11
	'mus-audio-aes-out mus-audio-aes-out 12
	'mus-audio-dac-filter mus-audio-dac-filter 13
	'mus-audio-mixer mus-audio-mixer 14
	'mus-audio-line1 mus-audio-line1 15
	'mus-audio-line2 mus-audio-line2 16
	'mus-audio-line3 mus-audio-line3 17
	'mus-audio-aux-input mus-audio-aux-input 18
	'mus-audio-cd mus-audio-cd 19
	'mus-audio-aux-output mus-audio-aux-output 20
	'mus-audio-spdif-in mus-audio-spdif-in 21
	'mus-audio-spdif-out mus-audio-spdif-out 22
	'mus-audio-amp mus-audio-amp 23
	'mus-audio-srate mus-audio-srate 24
	'mus-audio-channel mus-audio-channel 25
	'mus-audio-format mus-audio-format 26
	'mus-audio-port mus-audio-port 37
	'mus-audio-imix mus-audio-imix 27
	'mus-audio-igain mus-audio-igain 28
	'mus-audio-reclev mus-audio-reclev 29
	'mus-audio-pcm mus-audio-pcm 30
	'mus-audio-pcm2 mus-audio-pcm2 31
	'mus-audio-ogain mus-audio-ogain 32
	'mus-audio-line mus-audio-line 33
	'mus-audio-synth mus-audio-synth 34
	'mus-audio-bass mus-audio-bass 35
	'mus-audio-treble mus-audio-treble 36
	'mus-audio-direction mus-audio-direction 39
	'mus-audio-samples-per-channel mus-audio-samples-per-channel 38
	))

      (set! (region-graph-style) (region-graph-style))
      (if (not (equal? (region-graph-style) graph-lines))
	  (snd-display ";region-graph-style set def: ~A" (region-graph-style)))
      (set! (ask-before-overwrite) (ask-before-overwrite)) 
      (if (not (equal? (ask-before-overwrite) #f)) 
	  (snd-display ";ask-before-overwrite set def: ~A" (ask-before-overwrite)))
      (set! (audio-output-device) (audio-output-device))
      (if (not (equal? (audio-output-device)  0)) 
	  (snd-display ";audio-output-device set def: ~A" (audio-output-device)))
      (set! (auto-resize) (auto-resize))
      (if (not (equal? (auto-resize)  #t )) 
	  (snd-display ";auto-resize set def: ~A" (auto-resize)))
      (set! (auto-update) (auto-update))
      (if (not (equal? (auto-update)  #f)) 
	  (snd-display ";auto-update set def: ~A" (auto-update)))
      (set! (channel-style) (channel-style))
      (if (not (equal? (channel-style)  0 )) 
	  (snd-display ";channel-style set def: ~A" (channel-style)))
      (set! (color-cutoff) (color-cutoff))
      (if (fneq (color-cutoff)  0.003 )
	  (snd-display ";color-cutoff set def: ~A" (color-cutoff)))
      (set! (color-inverted) (color-inverted))
      (if (not (equal? (color-inverted)  #t)) 
	  (snd-display ";color-inverted set def: ~A" (color-inverted)))
      (set! (color-scale) (color-scale))
      (if (fneq (color-scale)  1.0 )
	  (snd-display ";color-scale set def: ~A" (color-scale)))
      (set! (auto-update-interval) (auto-update-interval))
      (if (fneq (auto-update-interval)  60.0 )
	  (snd-display ";auto-update-interval set def: ~A" (auto-update-interval)))
      (set! (dac-combines-channels) (dac-combines-channels))
      (if (not (equal? (dac-combines-channels)  #t)) 
	  (snd-display ";dac-combines-channels set def: ~A" (dac-combines-channels)))
      (set! (dac-size) (dac-size))
      (if (not (equal? (dac-size)  256 )) 
	  (snd-display ";dac-size set def: ~A" (dac-size)))
      (set! (minibuffer-history-length) (minibuffer-history-length))
      (if (not (equal? (minibuffer-history-length)  8)) 
	  (snd-display ";minibuffer-history-length set def: ~A" (minibuffer-history-length)))
      (set! (data-clipped) (data-clipped))
      (if (not (equal? (data-clipped)  #f )) 
	  (snd-display ";data-clipped set def: ~A" (data-clipped)))
      (set! (default-output-chans) (default-output-chans))
      (if (not (equal? (default-output-chans)  1 )) 
	  (snd-display ";default-output-chans set def: ~A" (default-output-chans)))
      (set! (default-output-format) (default-output-format))
      (if (not (equal? (default-output-format)  1)) 
	  (snd-display ";default-output-format set def: ~A" (default-output-format)))
      (set! (default-output-srate) (default-output-srate))
      (if (not (equal? (default-output-srate)  22050 )) 
	  (snd-display ";default-output-srate set def: ~A" (default-output-srate)))
      (set! (default-output-type) (default-output-type))
      (if (not (equal? (default-output-type)  0 )) 
	  (snd-display ";default-output-type set def: ~A" (default-output-type)))
      (set! (dot-size) (dot-size))
      (if (not (equal? (dot-size)  1 )) 
	  (snd-display ";dot-size set def: ~A" (dot-size)))
      (set! (emacs-style-save-as) (emacs-style-save-as))
      (if (not (equal? (emacs-style-save-as)  #f)) 
	  (snd-display ";emacs-style-save-as set def: ~A" (emacs-style-save-as)))
      (set! (enved-base) (enved-base))
      (if (fneq (enved-base)  1.0 )
	  (snd-display ";enved-base set def: ~A" (enved-base)))
      (set! (enved-clip?) (enved-clip?))
      (if (not (equal? (enved-clip?)  #f )) 
	  (snd-display ";enved-clip? set def: ~A" (enved-clip?)))
      (set! (enved-filter) (enved-filter))
      (if (not (equal? (enved-filter) #t)) 
	  (snd-display ";enved-filter set def: ~A" (enved-filter)))
      (set! (enved-filter-order) (enved-filter-order))
      (if (not (equal? (enved-filter-order)  40)) 
	  (snd-display ";enved-filter-order set def: ~A" (enved-filter-order)))
      (set! (enved-in-dB) (enved-in-dB))
      (if (not (equal? (enved-in-dB)  #f )) 
	  (snd-display ";enved-in-dB set def: ~A" (enved-in-dB)))
      (set! (enved-exp?) (enved-exp?))
      (if (not (equal? (enved-exp?)  #f )) 
	  (snd-display ";enved-exp? set def: ~A" (enved-exp?)))
      (set! (enved-power) (enved-power))
      (if (fneq (enved-power)  3.0)
	  (snd-display ";enved-power set def: ~A" (enved-power)))
      (set! (enved-target) (enved-target))
      (if (not (equal? (enved-target)  0 )) 
	  (snd-display ";enved-target set def: ~A" (enved-target)))
      (set! (enved-wave?) (enved-wave?))
      (if (not (equal? (enved-wave?)  #f )) 
	  (snd-display ";enved-wave? set def: ~A" (enved-wave?)))
      (if with-gui
	  (begin
	    (set! (enved-active-env) (enved-active-env))
	    (if (not (equal? (enved-active-env)  '())) 
		(snd-display ";enved-active-env set def: ~A" (enved-active-env)))))
      (set! (eps-file) (eps-file))
      (if (not (equal? (eps-file)  "snd.eps" )) 
	  (snd-display ";eps-file set def: ~A" (eps-file)))
      (set! (eps-bottom-margin) (eps-bottom-margin))
      (if (fneq (eps-bottom-margin)  0.0)
	  (snd-display ";eps-bottom-margin set def: ~A" (eps-bottom-margin)))
      (set! (eps-left-margin) (eps-left-margin))
      (if (fneq (eps-left-margin)  0.0)
	  (snd-display ";eps-left-margin set def: ~A" (eps-left-margin)))
      (set! (eps-size) (eps-size))
      (if (fneq (eps-size)  1.0)
	  (snd-display ";eps-size set def: ~A" (eps-size)))
      (set! (fft-window-beta) (fft-window-beta))
      (if (fneq (fft-window-beta)  0.0 )
	  (snd-display ";fft-window-beta set def: ~A" (fft-window-beta)))
      (set! (fft-log-frequency) (fft-log-frequency))
      (if (not (equal? (fft-log-frequency)  #f )) 
	  (snd-display ";fft-log-frequency set def: ~A" (fft-log-frequency)))
      (set! (fft-log-magnitude) (fft-log-magnitude))
      (if (not (equal? (fft-log-magnitude)  #f )) 
	  (snd-display ";fft-log-magnitude set def: ~A" (fft-log-magnitude)))
      (set! (transform-size) (transform-size))
      (if (not (equal? (transform-size)  256 )) 
	  (snd-display ";transform-size set def: ~A" (transform-size)))
      (set! (transform-graph-type) (transform-graph-type))
      (if (not (equal? (transform-graph-type) 0))
	  (snd-display ";transform-graph-type set def: ~A" (transform-graph-type)))
      (set! (fft-window) (fft-window))
      (if (not (equal? (fft-window)  6 )) 
	  (snd-display ";fft-window set def: ~A" (fft-window)))
      (set! (filter-env-in-hz) (filter-env-in-hz))
      (if (not (equal? (filter-env-in-hz)  #f)) 
	  (snd-display ";filter-env-in-hz set def: ~A" (filter-env-in-hz)))
      (set! (graph-cursor) (graph-cursor))
      (if (not (equal? (graph-cursor)  34)) 
	  (snd-display ";graph-cursor set def: ~A" (graph-cursor)))
      (set! (graph-style) (graph-style))
      (if (not (equal? (graph-style)  graph-lines )) 
	  (snd-display ";graph-style set def: ~A" (graph-style)))
      (set! (graphs-horizontal) (graphs-horizontal))
      (if (not (equal? (graphs-horizontal)  #t)) 
	  (snd-display ";graphs-horizontal set def: ~A" (graphs-horizontal)))
      (set! (html-dir) (html-dir))
      (if (not (equal? (html-dir)  ".")) 
	  (snd-display ";html-dir set def: ~A" (html-dir)))
      (set! (html-program) (html-program))
      (if (not (equal? (html-program)  "netscape")) 
	  (snd-display ";html-program set def: ~A" (html-program)))
      (set! (just-sounds) (just-sounds))
      (if (not (equal? (just-sounds)  #f)) 
	  (snd-display ";just-sounds set def: ~A" (just-sounds)))
      (set! (listener-prompt) (listener-prompt))
      (if (not (equal? (listener-prompt)  ">" )) 
	  (snd-display ";listener-prompt set def: ~A" (listener-prompt)))
      (set! (max-transform-peaks) (max-transform-peaks))
      (if (not (equal? (max-transform-peaks)  100)) 
	  (snd-display ";max-transform-peaks set def: ~A" (max-transform-peaks)))
      (set! (max-transform-peaks) -123)
      (if (not (equal? (max-transform-peaks) 100)) 
	  (snd-display ";max-transform-peaks set -123: ~A" (max-transform-peaks)))
      (set! (max-regions) (max-regions))
      (if (not (equal? (max-regions)  16 )) 
	  (snd-display ";max-regions set def: ~A" (max-regions)))
      (set! (min-dB) (min-dB))
      (if (fneq (min-dB)  -60.0 )
	  (snd-display ";min-dB set def: ~A" (min-dB)))
      (set! (selection-creates-region) (selection-creates-region))
      (if (not (equal? (selection-creates-region)  #t )) 
	  (snd-display ";selection-creates-region set def: ~A" (selection-creates-region)))
      (set! (transform-normalization) (transform-normalization))
      (if (not (equal? (transform-normalization)  normalize-by-channel)) 
	  (snd-display ";transform-normalization set def: ~A" (transform-normalization)))
      (set! (previous-files-sort) (previous-files-sort))
      (if (not (equal? (previous-files-sort)  0 )) 
	  (snd-display ";previous-files-sort set def: ~A" (previous-files-sort)))
      (set! (print-length) (print-length))
      (if (not (equal? (print-length)  12 )) 
	  (snd-display ";print-length set def: ~A" (print-length)))
      (set! (recorder-autoload) (recorder-autoload))
      (if (not (equal? (recorder-autoload)  #f)) 
	  (snd-display ";recorder-autoload set def: ~A" (recorder-autoload)))
      (set! (recorder-buffer-size) (recorder-buffer-size))
      (if (not (equal? (recorder-buffer-size)  4096 )) 
	  (snd-display ";recorder-buffer-size set def: ~A" (recorder-buffer-size)))
      (set! (recorder-file) (recorder-file))
      (if (not (equal? (recorder-file)  #f )) 
	  (snd-display ";recorder-file set def: ~A" (recorder-file)))
      (set! (recorder-max-duration) (recorder-max-duration))
      (if (fneq (recorder-max-duration)  1000000.0)
	  (snd-display ";recorder-max-duration set def: ~A" (recorder-max-duration)))
      (set! (recorder-out-chans) (recorder-out-chans))
      (if (not (equal? (recorder-out-chans)  2 )) 
	  (snd-display ";recorder-out-chans set def: ~A" (recorder-out-chans)))
      (set! (recorder-srate) (recorder-srate))
      (if (not (equal? (recorder-srate)  22050 )) 
	  (snd-display ";recorder-srate set def: ~A" (recorder-srate)))
      (set! (recorder-trigger) (recorder-trigger))
      (if (fneq (recorder-trigger)  0.0)
	  (snd-display ";recorder-trigger set def: ~A" (recorder-trigger)))
      (set! (reverb-control-decay) (reverb-control-decay))
      (if (fneq (reverb-control-decay)  1.0 )
	  (snd-display ";reverb-control-decay set def: ~A" (reverb-control-decay)))
      (set! (save-state-file) (save-state-file))
      (if (not (equal? (save-state-file)  "saved-snd.scm" )) 
	  (snd-display ";save-state-file set def: ~A" (save-state-file)))
      (set! (show-axes) (show-axes))
      (if (not (equal? (show-axes)  1)) 
	  (snd-display ";show-axes set def: ~A" (show-axes)))
      (set! (show-transform-peaks) (show-transform-peaks))
      (if (not (equal? (show-transform-peaks)  #f )) 
	  (snd-display ";show-transform-peaks set def: ~A" (show-transform-peaks)))
      (set! (show-indices) (show-indices))
      (if (not (equal? (show-indices)  #f)) 
	  (snd-display ";show-indices set def: ~A" (show-indices)))
      (set! (show-backtrace) (show-backtrace))
      (if (not (equal? (show-backtrace)  #f)) 
	  (snd-display ";show-backtrace set def: ~A" (show-backtrace)))
      (set! (show-marks) (show-marks))
      (if (not (equal? (show-marks)  #t )) 
	  (snd-display ";show-marks set def: ~A" (show-marks)))
      (set! (show-mix-waveforms) (show-mix-waveforms))
      (if (not (equal? (show-mix-waveforms)  #t)) 
	  (snd-display ";show-mix-waveforms set def: ~A" (show-mix-waveforms)))
      (set! (show-selection-transform) (show-selection-transform))
      (if (not (equal? (show-selection-transform)  #f )) 
	  (snd-display ";show-selection-transform set def: ~A" (show-selection-transform)))
      (set! (show-y-zero) (show-y-zero))
      (if (not (equal? (show-y-zero)  #f )) 
	  (snd-display ";show-y-zero set def: ~A" (show-y-zero)))
      (set! (sinc-width) (sinc-width))
      (if (not (equal? (sinc-width)  10 )) 
	  (snd-display ";sinc-width set def: ~A" (sinc-width)))
      (set! (spectro-cutoff) (spectro-cutoff))
      (if (fneq (spectro-cutoff)  1.0)
	  (snd-display ";spectro-cutoff set def: ~A" (spectro-cutoff)))
      (set! (spectro-hop) (spectro-hop))
      (if (not (equal? (spectro-hop)  4 )) 
	  (snd-display ";spectro-hop set def: ~A" (spectro-hop)))
      (set! (spectro-start) (spectro-start))
      (if (fneq (spectro-start)  0.0 )
	  (snd-display ";spectro-start set def: ~A" (spectro-start)))
      (set! (spectro-x-angle) (spectro-x-angle))
      (if (fneq (spectro-x-angle)  (if (provided? 'gl) 300.0 90.0))
	  (snd-display ";spectro-x-angle set def: ~A" (spectro-x-angle)))
      (set! (spectro-x-scale) (spectro-x-scale))
      (if (fneq (spectro-x-scale) (if (provided? 'gl) 1.5 1.0))
	  (snd-display ";spectro-x-scale set def: ~A" (spectro-x-scale)))
      (set! (spectro-y-angle) (spectro-y-angle))
      (if (fneq (spectro-y-angle) (if (provided? 'gl) 320.0 0.0))
	  (snd-display ";spectro-y-angle set def: ~A" (spectro-y-angle)))
      (set! (spectro-y-scale) (spectro-y-scale))
      (if (fneq (spectro-y-scale)  1.0 )
	  (snd-display ";spectro-y-scale set def: ~A" (spectro-y-scale)))
      (set! (spectro-z-angle) (spectro-z-angle))
      (if (fneq (spectro-z-angle) (if (provided? 'gl) 0.0 358.0))
	  (snd-display ";spectro-z-angle set def: ~A" (spectro-z-angle)))
      (set! (spectro-z-scale) (spectro-z-scale))
      (if (fneq (spectro-z-scale) (if (provided? 'gl) 1.0 0.1))
	  (snd-display ";spectro-z-scale set def: ~A" (spectro-z-scale)))
      (set! (speed-control-style) (speed-control-style))
      (if (not (equal? (speed-control-style)  0 )) 
	  (snd-display ";speed-control-style set def: ~A" (speed-control-style)))
      (set! (speed-control-tones) (speed-control-tones))
      (if (not (equal? (speed-control-tones)  12)) 
	  (snd-display ";speed-control-tones set def: ~A" (speed-control-tones)))
      (set! (temp-dir) (temp-dir))
      (if (not (equal? (temp-dir)  #f )) 
	  (snd-display ";temp-dir set def: ~A" (temp-dir)))
      (set! (ladspa-dir) (ladspa-dir))
      (if (not (equal? (ladspa-dir)  #f )) 
	  (snd-display ";ladspa-dir set def: ~A" (ladspa-dir)))
      (set! (tiny-font) (tiny-font))
      (if (not (equal? (tiny-font)  "6x12")) 
	  (snd-display ";tiny-font set def: ~A" (tiny-font)))
      (set! (transform-type) (transform-type))
      (if (not (equal? (transform-type)  0 )) 
	  (snd-display ";transform-type set def: ~A" (transform-type)))
      (set! (trap-segfault) (trap-segfault))
      (if (not (equal? (trap-segfault)  #f)) 
	  (snd-display ";trap-segfault set def: ~A" (trap-segfault)))
      (set! (optimization) (optimization))
      (if (not (equal? (optimization) 0)) 
	  (snd-display ";optimization set def: ~A" (optimization)))
      (set! (verbose-cursor) (verbose-cursor))
      (if (not (equal? (verbose-cursor)  #f)) 
	  (snd-display ";verbose-cursor set def: ~A" (verbose-cursor)))
      (set! (vu-font) (vu-font))
      (if (not (equal? (vu-font)  #f )) 
	  (snd-display ";vu-font set def: ~A" (vu-font)))
      (set! (vu-font-size) (vu-font-size))
      (if (fneq (vu-font-size)  1.0 )
	  (snd-display ";vu-font-size set def: ~A" (vu-font-size)))
      (set! (vu-size) (vu-size))
      (if (fneq (vu-size)  1.0 )
	  (snd-display ";vu-size set def: ~A" (vu-size)))
      (set! (wavelet-type) (wavelet-type))
      (if (not (equal? (wavelet-type)  0 )) 
	  (snd-display ";wavelet-type set def: ~A" (wavelet-type)))
      (set! (time-graph-type) (time-graph-type))
      (if (not (equal? (time-graph-type)  graph-once)) 
	  (snd-display ";time-graph-type set def: ~A" (time-graph-type)))
      (set! (wavo-hop) (wavo-hop))
      (if (not (equal? (wavo-hop)  3 )) 
	  (snd-display ";wavo-hop set def: ~A" (wavo-hop)))
      (set! (wavo-trace) (wavo-trace))
      (if (not (equal? (wavo-trace)  64 )) 
	  (snd-display ";wavo-trace set def: ~A" (wavo-trace)))
      (set! (x-axis-style) (x-axis-style))
      (if (not (equal? (x-axis-style)  0 )) 
	  (snd-display ";x-axis-style set def: ~A" (x-axis-style)))
      (set! (beats-per-minute) (beats-per-minute))
      (if (fneq (beats-per-minute)  60.0 )
	  (snd-display ";beats-per-minute set def: ~A" (beats-per-minute)))
      (set! (zero-pad) (zero-pad))
      (if (not (equal? (zero-pad)  0)) 
	  (snd-display ";zero-pad set def: ~A" (zero-pad)))
      (set! (zero-pad) -123)
      (if (not (equal? (zero-pad)  0)) 
	  (snd-display ";zero-pad set -123: ~A" (zero-pad)))
      (set! (zoom-focus-style) (zoom-focus-style))
      (if (not (equal? (zoom-focus-style)  2 )) 
	  (snd-display ";zoom-focus-style set def: ~A" (zoom-focus-style)))
      (set! (mix-waveform-height) (mix-waveform-height))
      (if (not (equal? (mix-waveform-height)  20 )) 
	  (snd-display ";mix-waveform-height set def: ~A" (mix-waveform-height)))
      (set! (mix-tag-width) (mix-tag-width))
      (if (not (equal? (mix-tag-width)  6)) 
	  (snd-display ";mix-tag-width set def: ~A" (mix-tag-width)))
      (set! (mix-tag-height) (mix-tag-height))
      (if (not (equal? (mix-tag-height)  14)) 
	  (snd-display ";mix-tag-height set def: ~A" (mix-tag-height)))
      (set! (audio-output-device) (audio-output-device))
      (if (not (equal? (audio-output-device)  0 )) 
	  (snd-display ";audio-output-device set def: ~A" (audio-output-device)))
      (set! (selected-mix) (selected-mix))
      (if (not (equal? (selected-mix) #f)) 
	  (snd-display ";selected-mix set def: ~A" (selected-mix)))

      (if (not (provided? 'snd-gtk))
	  (for-each
	   (lambda (func name)
	     (let ((val (func)))
	       (set! (func) "8x123")
	       (if (or (not (string? (func)))
		       (not (string=? val (func))))
		   (snd-display ";set ~A to bogus value: ~A ~A" name val (func)))))
	   (list axis-label-font axis-numbers-font help-text-font 
		 tiny-font button-font bold-button-font peaks-font bold-peaks-font)
	   (list 'axis-label-font 'axis-numbers-font 'help-text-font 
		 'tiny-font button-font 'bold-button-font 'peaks-font 'bold-peaks-font)))

      ))


;;; ---------------- test 1: default values ----------------
(if (or full-test (= snd-test 1) (and keep-going (<= snd-test 1)))
    (letrec ((test-defaults
	      (lambda (lst)
		(if (not (null? lst))
		    (begin
		      (if (not (equal? (cadr lst)  (caddr lst)))
			  (if (and (number? (caddr lst))
				   (inexact? (caddr lst)))
			      (if (fneq (cadr lst) (caddr lst))
				  (snd-display ";~A /= ~A (~A)" (car lst) (caddr lst) (cadr lst)))
			      (snd-display ";~A /= ~A (~A)" (car lst) (caddr lst) (cadr lst))))
		      (test-defaults (cdddr lst)))))))
      (if (procedure? test-hook) (test-hook 1))
      (map close-sound (sounds)) ; in case others opened elsewhere
      (test-defaults
       (list
	'amp-control (without-errors (amp-control)) 'no-such-sound
	'ask-before-overwrite (ask-before-overwrite) #f 
	'audio-output-device (audio-output-device) 0
	'auto-resize (auto-resize) #t 
	'auto-update (auto-update) #f
	'channel-style (channel-style) 0 
	'color-cutoff (color-cutoff) 0.003 
	'color-inverted (color-inverted) #t
	'color-scale (color-scale) 1.0 
	'colormap (colormap) (if (provided? 'gl) 2 -1)
	'contrast-control (without-errors (contrast-control)) 'no-such-sound
	'contrast-control-amp (without-errors (contrast-control-amp)) 'no-such-sound
	'contrast-control? (without-errors (contrast-control?)) 'no-such-sound
	'auto-update-interval (auto-update-interval) 60.0 
	'cursor-follows-play (without-errors (cursor-follows-play)) 'no-such-sound
	'dac-combines-channels (dac-combines-channels) #t
	'emacs-style-save-as (emacs-style-save-as) #f
	'dac-size (dac-size) 256 
	'minibuffer-history-length (minibuffer-history-length) 8
	'data-clipped (data-clipped) #f 
	'default-output-chans (default-output-chans) 1 
	'default-output-format (default-output-format) 1
	'default-output-srate (default-output-srate) 22050 
	'default-output-type (default-output-type) 0 
	'dot-size (dot-size) 1 
	'enved-base (enved-base) 1.0 
	'enved-clip? (enved-clip?) #f 
	'enved-filter-order (enved-filter-order) 40
	'enved-filter (enved-filter) #t
	'enved-in-dB (enved-in-dB) #f 
	'enved-exp? (enved-exp?) #f 
	'enved-power (enved-power) 3.0
	'enved-target (enved-target) 0 
	'enved-wave? (enved-wave?) #f 
	'enved-active-env (enved-active-env) '()
	'enved-selected-env (enved-selected-env) '()
	'eps-file (eps-file) "snd.eps" 
	'eps-bottom-margin (eps-bottom-margin) 0.0
	'eps-left-margin (eps-left-margin) 0.0
	'eps-size (eps-size) 1.0
	'expand-control (without-errors (expand-control)) 'no-such-sound
	'expand-control-hop (without-errors (expand-control-hop)) 'no-such-sound
	'expand-control-length (without-errors (expand-control-length)) 'no-such-sound
	'expand-control-ramp (without-errors (expand-control-ramp)) 'no-such-sound
	'expand-control? (without-errors (expand-control?)) 'no-such-sound
	'fft-window-beta (fft-window-beta) 0.0 
	'fft-log-frequency (fft-log-frequency) #f 
	'fft-log-magnitude (fft-log-magnitude) #f 
	'transform-size (transform-size) 256 
	'transform-graph-type (transform-graph-type) 0
	'fft-window (fft-window) 6 
	'transform-graph? (without-errors (transform-graph?)) 'no-such-sound
	'filter-control-in-dB (without-errors (filter-control-in-dB)) 'no-such-sound
	'filter-control-coeffs (without-errors (filter-control-coeffs)) 'no-such-sound
	'filter-control-env (without-errors (filter-control-env)) 'no-such-sound
	'filter-env-in-hz (filter-env-in-hz) #f
	'filter-control-order (without-errors (filter-control-order)) 'no-such-sound
	'filter-control? (without-errors (filter-control?)) 'no-such-sound
	'graph-cursor (graph-cursor) 34
	'graph-style (graph-style) graph-lines
	'html-dir (html-dir) "."
	'html-program (html-program) "netscape"
	'lisp-graph? (without-errors (lisp-graph?)) 'no-such-sound
	'graphs-horizontal (graphs-horizontal) #t
	'just-sounds (just-sounds) #f
	'listener-prompt (listener-prompt) ">" 
	'max-transform-peaks (max-transform-peaks) 100
	'max-regions (max-regions) 16 
	'min-dB (min-dB) -60.0 
	'selection-creates-region (selection-creates-region) #t 
	'transform-normalization (transform-normalization) normalize-by-channel
	'previous-files-sort (previous-files-sort) 0 
	'print-length (print-length) 12 
	'read-only (without-errors (read-only)) 'no-such-sound
	'recorder-autoload (recorder-autoload) #f
	'recorder-buffer-size (recorder-buffer-size) 4096 
	'recorder-file (recorder-file) #f 
	'recorder-max-duration (recorder-max-duration) 1000000.0
	'recorder-out-chans (recorder-out-chans) 2 
	'recorder-srate (recorder-srate) 22050 
	'recorder-trigger (recorder-trigger) 0.0
	'region-graph-style (region-graph-style) graph-lines
	'reverb-control-decay (reverb-control-decay) 1.0 
	'reverb-control-feedback (without-errors (reverb-control-feedback)) 'no-such-sound
	'reverb-control-length (without-errors (reverb-control-length)) 'no-such-sound
	'reverb-control-lowpass (without-errors (reverb-control-lowpass)) 'no-such-sound
	'reverb-control-scale (without-errors (reverb-control-scale)) 'no-such-sound
	'reverb-control? (without-errors (reverb-control?)) 'no-such-sound
	'save-state-file (save-state-file) "saved-snd.scm" 
	'show-axes (show-axes) 1
	'show-transform-peaks (show-transform-peaks) #f 
	'show-indices (show-indices) #f
	'show-backtrace (show-backtrace) #f
	'show-marks (show-marks) #t 
	'show-mix-waveforms (show-mix-waveforms) #t
	'show-selection-transform (show-selection-transform) #f 
	'show-y-zero (show-y-zero) #f 
	'show-controls (without-errors (show-controls)) 'no-such-sound
	'sinc-width (sinc-width) 10 
	'spectro-cutoff (spectro-cutoff) 1.0
	'spectro-hop (spectro-hop) 4 
	'spectro-start (spectro-start) 0.0 
	'spectro-x-angle (spectro-x-angle) (if (provided? 'gl) 300.0 90.0)
	'spectro-x-scale (spectro-x-scale) (if (provided? 'gl) 1.5 1.0)
	'spectro-y-angle (spectro-y-angle) (if (provided? 'gl) 320.0 0.0)
	'spectro-y-scale (spectro-y-scale) 1.0 
	'spectro-z-angle (spectro-z-angle) (if (provided? 'gl) 0.0 358.0)
	'spectro-z-scale (spectro-z-scale) (if (provided? 'gl) 1.0 0.1)
	'speed-control (without-errors (speed-control)) 'no-such-sound
	'speed-control-style (speed-control-style) 0 
	'speed-control-tones (speed-control-tones) 12
	'sync (without-errors (sync)) 'no-such-sound
	'temp-dir (temp-dir) #f 
	'ladspa-dir (ladspa-dir) #f 
	'tiny-font (tiny-font) "6x12"
	'transform-type (transform-type) 0 
	'optimization (optimization) 0
	'verbose-cursor (verbose-cursor) #f
	'vu-font (vu-font) #f 
	'vu-font-size (vu-font-size) 1.0 
	'vu-size (vu-size) 1.0 
	'wavelet-type (wavelet-type) 0 
	'time-graph? (without-errors (time-graph?)) 'no-such-sound
	'time-graph-type (time-graph-type) graph-once
	'wavo-hop (wavo-hop) 3 
	'wavo-trace (wavo-trace) 64 
	'x-axis-style (x-axis-style) 0 
	'beats-per-minute (beats-per-minute) 60.0
	'zero-pad (zero-pad) 0
	'zoom-focus-style (zoom-focus-style) 2 
	'mix-waveform-height (mix-waveform-height) 20 
	'mix-tag-width (mix-tag-width) 6
	'mix-tag-height (mix-tag-height) 14
	'with-mix-tags (with-mix-tags) #t
	'with-relative-panes (with-relative-panes) #t
	'audio-output-device (audio-output-device) 0 
	'selected-mix (selected-mix) #f
	))))


;;; ---------------- test 2: headers ----------------
(if (or full-test (= snd-test 2) (and keep-going (<= snd-test 2)))
    (if (string? sf-dir)
	(letrec ((test-headers
		  (lambda (base-files)
		    (if (not (null? base-files))
			(let ((testf (car base-files)))
			  (let ((file (string-append sf-dir (list-ref testf 0))))
			    (if (file-exists? file)
				(begin
				  (if (not (equal? (mus-sound-chans file) (list-ref testf 1)))
				      (snd-display ";~A: chans ~A /= ~A" 
							 (list-ref testf 0) 
							 (mus-sound-chans file) 
							 (list-ref testf 1)))
				  (if (not (equal? (mus-sound-srate file) (list-ref testf 2)))
				      (snd-display ";~A: srate ~A /= ~A" 
							 (list-ref testf 0) 
							 (mus-sound-srate file) 
							 (list-ref testf 2)))
				  (if (fneq (mus-sound-duration file) (list-ref testf 3))
				      (snd-display ";~A: duration ~A /= ~A" 
							 (list-ref testf 0)
							 (mus-sound-duration file) 
							 (list-ref testf 3)))
				  (if (and (not (= (mus-sound-data-format file) -1))
					   (not (= (mus-sound-header-type file) 31)) ; bogus header on test case (comdisco)
					   (< (+ (mus-sound-length file) 1)
					      (* (mus-sound-datum-size file) (mus-sound-duration file)
						 (mus-sound-srate file) (mus-sound-chans file))))
				      (snd-display ";mus-sound-length ~A: ~A (~A)" file
							   (mus-sound-length file)
							   (* (mus-sound-duration file) (mus-sound-srate file) 
							      (mus-sound-chans file) (mus-sound-datum-size file))))
				  (if (fneq (/ (mus-sound-frames file) (mus-sound-srate file)) (mus-sound-duration file))
				      (snd-display ";mus-sound-frames ~A: ~A (~A ~A)" file
							   (mus-sound-frames file)
							   (mus-sound-duration file)
							   (/ (mus-sound-frames file) (mus-sound-srate file))))
				  (if (> (abs (- (mus-sound-frames file) (/ (mus-sound-samples file) (mus-sound-chans file)))) 1)
				      (snd-display ";mus-sound-samples ~A: ~A ~A" file
							   (mus-sound-samples file)
							   (* (mus-sound-frames file) (mus-sound-chans file))))
				  (if (not (equal? (mus-header-type-name (mus-sound-header-type file)) (list-ref testf 4)))
				      (snd-display ";~A: type ~A /= ~A" 
							 (list-ref testf 0) 
							 (mus-header-type-name (mus-sound-header-type file))
							 (list-ref testf 4)))
				  (if (not (equal? (mus-data-format-name (mus-sound-data-format file)) (list-ref testf 5)))
				      (snd-display ";~A: type ~A /= ~A"
							 (list-ref testf 0) 
							 (mus-data-format-name (mus-sound-data-format file)) 
							 (list-ref testf 5)))
				  (let ((lst (mus-sound-loop-info file)))
				    (if (> (length testf) 6)
					(begin
					  (if (not (equal? (car lst) (list-ref testf 6))) 
					      (snd-display ";~A: loop start: ~A" (car lst) (list-ref testf 6)))
					  (if (not (equal? (cadr lst) (list-ref testf 7))) 
					      (snd-display ";~A: loop end: ~A" (cadr lst) (list-ref testf 7))))
					(if (not (null? lst))
					    (snd-display ";~A thinks it has loop info: ~A" file lst)))))
				(snd-display ";~A missing?" file))
			    (test-headers (cdr base-files))))))))
	  (if (procedure? test-hook) (test-hook 2))
	  (if (not (= (mus-sound-header-type (string-append sf-dir "midi60.mid")) -1)) (snd-display ";midi60?"))
	  (test-headers
	   (list
	    (list "8svx-8.snd" 1 22050 1.88766443729401 "SVX8" "signed byte (8 bits)")
	    (list "Fnonull.aif" 1 8000 0.00112499995157123 "AIFC" "mulaw (8 bits)")
	    (list "Pmiscck.aif" 1 8000 0.00112499995157123 "AIFC" "mulaw (8 bits)")
	    (list "Pmiscck.wav" 1 8000 0.00112499995157123 "RIFF" "mulaw (8 bits)")
	    (list "Pnossnd.aif" 1 8000 0.0 "AIFC" "mulaw (8 bits)")
	    (list "Poffset.aif" 1 8000 0.00112499995157123 "AIFC" "mulaw (8 bits)")
	    (list "Porder.aif" 1 8000 0.00112499995157123 "AIFC" "mulaw (8 bits)")
	    (list "Ptjunk.aif" 1 8000 0.00112499995157123 "AIFC" "mulaw (8 bits)")
	    (list "Ptjunk.wav" 1 8000 0.00112499995157123 "RIFF" "mulaw (8 bits)")
	    (list "SINE24-S.WAV" 2 44100 2.0 "RIFF" "little endian int (24 bits)")
	    (list "a1.asf" 1 16000 0.0 "asf" "unsupported")
	    (list "a2.asf" 1 8000 0.0 "asf" "unsupported")
	    (list "addf8.afsp" 1 8000 2.9760000705719 "Sun" "big endian short (16 bits)")
	    (list "addf8.d" 1 8000 2.9760000705719 "SPPACK" "big endian short (16 bits)")
	    (list "addf8.dwd" 1 8000 2.9760000705719 "DiamondWare" "little endian short (16 bits)")
	    (list "addf8.nh" 2 44100 0.269931972026825 "raw (no header)" "big endian short (16 bits)")
	    (list "addf8.sd" 1 8000 2.9760000705719 "ESPS" "big endian short (16 bits)")
	    (list "addf8.sf_mipseb" 1 8000 2.9760000705719 "IRCAM" "big endian short (16 bits)")
	    (list "addf8.sf_sun" 1 8000 2.9760000705719 "IRCAM" "big endian short (16 bits)")
	    (list "addf8.sf_vax_b" 1 8000 2.9760000705719 "IRCAM" "big endian short (16 bits)")
	    (list "addf8.wav" 1 8000 2.9760000705719 "RIFF" "little endian short (16 bits)")
	    (list "aebass.krz" 1 44100 3.0 "Kurzweil 2000" "big endian short (16 bits)")
	    (list "aiff-16.snd" 2 44100 0.746666669845581 "AIFF" "big endian short (16 bits)")
	    (list "aiff-8.snd" 2 44100 0.746666669845581 "AIFF" "signed byte (8 bits)")
	    (list "alaw.aifc" 1 44100 0.0367800444364548 "AIFC" "alaw (8 bits)")
	    (list "alaw.wav" 1 11025 8.70666694641113 "RIFF" "alaw (8 bits)")
	    (list "astor_basia.mp2" 2 44100 1.02179133892059 "raw (no header)" "big endian short (16 bits)")
	    (list "c.asf" 1 8000 0.0 "asf" "unsupported")
	    (list "ce-c3.w02" 1 33000 3.88848495483398 "TX-16W" "unsupported")
	    (list "ce-c4.w03" 1 33000 2.91618180274963 "TX-16W" "unsupported")
	    (list "ce-d2.w01" 1 33000 3.46439385414124 "TX-16W" "unsupported")
	    (list "clbonef.wav" 1 22050 2.57832193374634 "RIFF" "little endian float (32 bits)")
	    (list "cranker.krz" 1 44100 3.48267579078674 "Kurzweil 2000" "big endian short (16 bits)")
	    (list "d40130.aif" 1 10000 0.100000001490116 "AIFF" "big endian short (16 bits)")
	    (list "d40130.au" 1 10000 0.100000001490116 "Sun" "big endian short (16 bits)")
	    (list "d40130.dsf" 1 8000 0.125 "Delusion" "little endian short (16 bits)")
	    (list "d40130.fsm" 1 8000 0.125249996781349 "Farandole" "little endian short (16 bits)")
	    (list "d40130.iff" 1 10000 0.100000001490116 "SVX8" "signed byte (8 bits)")
	    (list "d40130.pat" 1 10000 0.100000001490116 "Gravis Ultrasound patch" "little endian short (16 bits)")
	    (list "d40130.sds" 1 10000 0.100000001490116 "MIDI sample dump" "unsupported")
	    (list "d40130.sdx" 1 10000 0.100000001490116 "Sample dump" "unsigned little endian short (16 bits)")
	    (list "d40130.sf" 1 10000 0.100000001490116 "IRCAM" "little endian short (16 bits)")
	    (list "d40130.smp" 1 8000 0.125 "SMP" "little endian short (16 bits)")
	    (list "d40130.sou" 1 8000 0.125 "SBStudioII" "little endian short (16 bits)")
	    (list "d40130.st3" 1 8000 0.125 "Digiplayer ST3" "unsigned little endian short (16 bits)")
	    (list "d40130.uwf" 1 8000 0.125249996781349 "Ultratracker" "little endian short (16 bits)")
	    (list "d40130.voc" 1 10000 0.100100003182888 "VOC" "unsigned byte (8 bits)")
	    (list "d40130.w00" 1 16000 0.0625 "TX-16W" "unsupported")
	    (list "d40130.wav" 1 10000 0.100000001490116 "RIFF" "little endian short (16 bits)")
	    (list "d43.wav" 1 10000 0.100000001490116 "RIFF" "little endian short (16 bits)")
	    (list "digit0v0.aiff" 1 8000 0.560000002384186 "AIFC" "big endian short (16 bits)")
	    (list "esps-16.snd" 1 8000 3.09737491607666 "ESPS" "big endian short (16 bits)")
	    (list "forest.aiff" 2 44100 3.907143 "AIFF" "big endian short (16 bits)" 24981 144332)
	    (list "g721.au" 1 11025 4.35328817367554 "Sun" "unsupported")
	    (list "g722.aifc" 1 44100 0.0184353739023209 "AIFC" "unsupported")
	    (list "gong.wve" 1 8000 3.96799993515015 "PSION" "alaw (8 bits)")
	    (list "gsm610.wav" 1 11025 1.7687075138092 "RIFF" "unsupported")
	    (list "inrs-16.snd" 1 8000 2.46399998664856 "INRS" "little endian short (16 bits)")
	    (list "kirk.wve" 1 8000 1.40799999237061 "PSION" "alaw (8 bits)")
	    (list "loop.aiff" 1 44100 0.0367120169103146 "AIFC" "big endian short (16 bits)" 12 23)
	    (list "m.asf" 1 8000 0.0 "asf" "unsupported")
	    (list "mary-sun4.sig" 1 8000 5.95137500762939 "Comdisco SPW signal" "big endian double (64 bits)")
	    (list "mocksong.wav" 1 11025 7.86956930160522 "RIFF" "little endian short (16 bits)")
	    (list "mono24.wav" 1 22050 1.98997735977173 "RIFF" "little endian int (24 bits)")
	    (list "msadpcm.wav" 1 11025 4.43501138687134 "RIFF" "unsupported")
	    (list "n8.snd" 1 44100 0.0367800444364548 "Sun" "signed byte (8 bits)")
	    (list "nasahal.aif" 1 11025 9.89841270446777 "AIFF" "signed byte (8 bits)")
	    (list "nasahal.avi" 1 11025 0.0 "AVI" "unsupported")
	    (list "nasahal.dig" 1 11025 9.89841270446777 "Sound Designer 1" "big endian short (16 bits)")
	    (list "nasahal.ivc" 2 44100 0.449002265930176 "raw (no header)" "big endian short (16 bits)")
	    (list "nasahal.pat" 1 11025 3.95410442352295 "Gravis Ultrasound patch" "unsigned byte (8 bits)")
	    (list "nasahal.snd" 1 11025 9.89841270446777 "SNDT" "unsigned byte (8 bits)")
	    (list "nasahal.svx" 1 11025 9.89841270446777 "SVX8" "signed byte (8 bits)")
	    (list "nasahal.v8" 1 8000 13.6412496566772 "Covox V8" "unsigned byte (8 bits)")
	    (list "nasahal.voc" 1 11025 9.89941024780273 "VOC" "unsigned byte (8 bits)")
	    (list "nasahal.vox" 2 44100 0.224444448947906 "raw (no header)" "big endian short (16 bits)")
	    (list "nasahal8.wav" 1 11025 9.89841270446777 "RIFF" "unsigned byte (8 bits)")
	    (list "nasahalad.smp" 1 11025 4.94920635223389 "Goldwave sample" "little endian short (16 bits)")
	    (list "next-16.snd" 1 22050 1.00004529953003 "Sun" "big endian short (16 bits)")
	    (list "next-8.snd" 1 22050 0.226757362484932 "Sun" "signed byte (8 bits)")
	    (list "next-dbl.snd" 1 22050 0.226757362484932 "Sun" "big endian double (64 bits)")
	    (list "oboe.ldbl" 1 22050 2.30512475967407 "RIFF" "little endian double (64 bits)")
	    (list "next-flt.snd" 1 22050 0.226757362484932 "Sun" "big endian float (32 bits)")
	    (list "next-mulaw.snd" 1 8012 2.03295063972473 "Sun" "mulaw (8 bits)")
	    (list "next24.snd" 1 44100 0.0367800444364548 "Sun" "big endian int (24 bits)")
	    (list "nist-01.wav" 1 16000 2.26912498474121 "NIST" "little endian short (16 bits)")
	    (list "nist-10.wav" 1 16000 2.26912498474121 "NIST" "big endian short (16 bits)")
	    (list "nist-16.snd" 1 16000 1.02400004863739 "NIST" "big endian short (16 bits)")
	    (list "nist-shortpack.wav" 1 16000 4.53824996948242 "NIST" "unsupported")
	    (list "none.aifc" 1 44100 0.0367800444364548 "AIFC" "big endian short (16 bits)")
	    (list "nylon2.wav" 2 22050 1.14376413822174 "RIFF" "unsupported")
	    (list "o2.adf" 1 44100 0.036780 "CSRE adf" "little endian short (16 bits)")
	    (list "o2.avr" 1 44100 0.0183900222182274 "AVR" "big endian short (16 bits)")
	    (list "o2.bicsf" 1 44100 0.0367800444364548 "IRCAM" "big endian short (16 bits)")
	    (list "o2.mpeg1" 2 44100 0.00709750549867749 "raw (no header)" "big endian short (16 bits)")
	    (list "o2.sd2" 2 44100 0.0183900222182274 "raw (no header)" "big endian short (16 bits)")
	    (list "o2.sf2" 1 44100 0.0367800444364548 "SoundFont" "little endian short (16 bits)")
	    (list "o2.smp" 1 8000 0.202749997377396 "SMP" "little endian short (16 bits)")
	    (list "o2.voc" 1 44100 0.0368934236466885 "VOC" "little endian short (16 bits)")
	    (list "o2.wave" 1 44100 0.0367800444364548 "RIFF" "little endian short (16 bits)")
	    (list "o2_12bit.aiff" 1 44100 0.0367800444364548 "AIFF" "big endian short (16 bits)")
	    (list "o2_18bit.aiff" 1 44100 0.0367800444364548 "AIFF" "big endian int (24 bits)")
	    (list "o2_711u.wave" 1 44100 0.0367800444364548 "RIFF" "mulaw (8 bits)")
	    (list "o2_722.snd" 1 44100 0.0183900222182274 "Sun" "unsupported")
	    (list "o2_726.aiff" 1 8000 0.0367499999701977 "AIFC" "unsupported")
	    (list "o2_726.snd" 1 44100 0.0230158735066652 "Sun" "unsupported")
	    (list "o2_728.aiff" 1 8000 0.0367499999701977 "AIFC" "unsupported")
	    (list "o2_8.iff" 1 44100 0.0367800444364548 "SVX8" "signed byte (8 bits)")
	    (list "o2_8.voc" 1 44100 0.0370294786989689 "VOC" "unsigned byte (8 bits)")
	    (list "o2_dvi.wave" 1 44100 0.0232199542224407 "RIFF" "unsupported")
	    (list "o2_float.bicsf" 1 44100 0.0367800444364548 "IRCAM" "big endian float (32 bits)")
	    (list "o2_gsm.aiff" 1 8000 0.0367499999701977 "AIFC" "unsupported")
	    (list "o2_u8.avr" 1 44100 0.0367800444364548 "AVR" "unsigned byte (8 bits)")
	    (list "o2_u8.wave" 1 44100 0.0367800444364548 "RIFF" "unsigned byte (8 bits)")
	    (list "o28.mpc" 1 44100 0.036780 "AKAI 4" "little endian short (16 bits)")
	    (list "oboe.g721" 1 22050 1.15287983417511 "Sun" "unsupported")
	    (list "oboe.g723_24" 1 22050 0.864761888980865 "Sun" "unsupported")
	    (list "oboe.g723_40" 1 22050 1.44126987457275 "Sun" "unsupported")
	    (list "oboe.kts" 1 22050 2.305125 "Korg" "big endian short (16 bits)")
	    (list "oboe.its" 1 22050 2.305125 "Impulse Tracker" "little endian short (16 bits)")
	    (list "oboe.sf2" 1 22050 2.30512475967407 "SoundFont" "little endian short (16 bits)")
	    (list "oboe.paf" 1 22050 2.305125 "Ensoniq Paris" "big endian short (16 bits)")
	    (list "oboe.pf1" 1 22050 2.305125 "Ensoniq Paris" "little endian short (16 bits)")
	    (list "oboe.smp" 1 22050 2.305125 "snack SMP" "little endian short (16 bits)")
	    (list "oboe.nsp" 1 22050 2.305125 "CSL" "little endian short (16 bits)")
	    (list "oboe.wfp" 1 22050 2.305125 "Turtle Beach" "little endian short (16 bits)")
	    (list "oki.snd" 2 44100 0.0041950112208724 "raw (no header)" "big endian short (16 bits)")
	    (list "oki.wav" 1 44100 0.016780 "RIFF" "unsupported")
	    (list "orv-dvi-adpcm.wav" 1 44100 1.92725622653961 "RIFF" "unsupported")
	    (list "riff-16.snd" 1 22050 1.88766443729401 "RIFF" "little endian short (16 bits)")
	    (list "riff-8-u.snd" 1 11025 0.506848096847534 "RIFF" "unsigned byte (8 bits)")
	    (list "rooster.wve" 1 8000 2.04800009727478 "PSION" "alaw (8 bits)")
	    (list "sd1-16.snd" 1 44100 0.400544226169586 "Sound Designer 1" "big endian short (16 bits)")
	    (list "segfault.snd" 16777216 576061440 1.24986669902682e-7 "Sun" "unsupported")
	    (list "sf-16.snd" 1 22050 1.88766443729401 "IRCAM" "big endian short (16 bits)")
	    (list "si654.adc" 1 16000 6.71362495422363 "ADC/OGI" "big endian short (16 bits)")
	    (list "smp-16.snd" 1 8000 5.2028751373291 "SMP" "little endian short (16 bits)")
	    (list "sound.pat" 1 8000 1.95050001144409 "Gravis Ultrasound patch" "unsigned little endian short (16 bits)")
	    (list "sound.sap" 1 8000 1.95050001144409 "Goldwave sample" "little endian short (16 bits)")
	    (list "sound.sds" 1 8000 1.95050001144409 "MIDI sample dump" "unsupported")
	    (list "sound.sfr" 1 8000 1.95050001144409 "SRFS" "little endian short (16 bits)")
	    (list "sound.v8" 1 8000 1.95050001144409 "Covox V8" "unsigned byte (8 bits)")
	    (list "sound.vox" 2 44100 0.044217687100172 "raw (no header)" "big endian short (16 bits)")
	    (list "step.omf" 1 11025 8.70666694641113 "OMF" "signed byte (8 bits)")
	    (list "step.qt" 1 11025 8.70630359649658 "Quicktime" "unsigned byte (8 bits)")
	    (list "sun-16-afsp.snd" 1 8000 2.9760000705719 "Sun" "big endian short (16 bits)")
	    (list "sun-mulaw.snd" 1 8000 4.61950016021729 "Sun" "mulaw (8 bits)")
	    (list "sw1038t_short.wav" 2 8000 6.0 "NIST" "mulaw (8 bits)")
	    (list "swirl.pat" 1 22050 1.0619500875473 "Gravis Ultrasound patch" "unsigned little endian short (16 bits)")
	    (list "sy85.snd" 1 8000 5.05600023269653 "Sy-85" "big endian short (16 bits)")
	    (list "sy99.snd" 1 8000 4.54400014877319 "Sy-99" "big endian short (16 bits)")
	    (list "telephone.wav" 1 16000 2.27881240844727 "NIST" "little endian short (16 bits)")
	    (list "trumps22.adp" 1 22050 3.092880 "RIFF" "unsupported")
	    (list "truspech.wav" 1 8000 1.1599999666214 "RIFF" "unsupported")
	    (list "ulaw.aifc" 1 44100 0.0367800444364548 "AIFC" "mulaw (8 bits)")
	    (list "voc-8-u.snd" 1 8000 1.49937498569489 "VOC" "unsigned byte (8 bits)")
	    (list "o28.voc" 1 44100 0.036893 "VOC" "little endian short (16 bits)")
	    (list "voxware.wav" 1 8000 0.324000000953674 "RIFF" "unsupported")
	    (list "wd.w00" 1 8000 0.202749997377396 "Sy-99" "big endian short (16 bits)")
	    (list "wd1.smp" 1 8000 0.202749997377396 "SMP" "little endian short (16 bits)")
	    (list "wd1.wav" 1 44100 0.0367800444364548 "RIFF" "little endian short (16 bits)")
	    (list "wheel.mat" 2 44100 0.145646259188652 "raw (no header)" "big endian short (16 bits)")
	    (list "b8.pvf" 1 44100 0.036803 "Portable Voice Format" "signed byte (8 bits)")
	    (list "b16.pvf" 1 44100 0.036803 "Portable Voice Format" "big endian short (16 bits)")
	    (list "b32.pvf" 1 44100 0.036803 "Portable Voice Format" "big endian int (32 bits)")
	    (list "wood.dsf" 1 8000 0.202749997377396 "Delusion" "little endian short (16 bits)")
	    (list "wood.dvi" 1 22100 0.0278733037412167 "RIFF" "unsupported")
	    (list "wood.dwd" 1 22100 0.0733936652541161 "DiamondWare" "signed byte (8 bits)")
	    (list "wood.fsm" 1 8000 0.202999994158745 "Farandole" "little endian short (16 bits)")
	    (list "wood.mad" 1 22100 0.0372398197650909 "RIFF" "unsupported")
	    (list "wood.maud" 1 44100 0.0183900222182274 "MAUD" "big endian short (16 bits)")
	    (list "wood.pat" 1 22100 0.0733936652541161 "Gravis Ultrasound patch" "little endian short (16 bits)")
	    (list "wood.riff" 1 44100 0.0367800444364548 "RIFF" "little endian short (16 bits)")
	    (list "wood.rifx" 1 44100 0.0367800444364548 "RIFF" "big endian short (16 bits)")
	    (list "wood.sds" 1 22100 0.0733936652541161 "MIDI sample dump" "unsupported")
	    (list "wood.sdx" 1 22100 0.0733936652541161 "Sample dump" "unsigned little endian short (16 bits)")
	    (list "wood.sf" 1 44100 0.0367800444364548 "IRCAM" "big endian short (16 bits)")
	    (list "wood.sndr" 2 44100 0.0092290248721838 "raw (no header)" "big endian short (16 bits)")
	    (list "wood.sndt" 1 44100 0.0367800444364548 "SNDT" "unsigned byte (8 bits)")
	    (list "wood.st3" 1 8000 0.202749997377396 "Digiplayer ST3" "unsigned little endian short (16 bits)")
	    (list "wood.uwf" 1 8000 0.202999994158745 "Ultratracker" "little endian short (16 bits)")
	    (list "wood.w00" 1 16000 0.101374998688698 "TX-16W" "unsupported")
	    (list "wood12.aiff" 1 44100 0.0367800444364548 "AIFF" "big endian short (16 bits)")
	    (list "wood16.dwd" 2 44100 0.0367800444364548 "DiamondWare" "little endian short (16 bits)")
	    (list "wood16.wav" 2 44100 0.0367800444364548 "RIFF" "little endian short (16 bits)")
	    (list "wood16.nsp" 2 44100 0.0367800444364548 "CSL" "little endian short (16 bits)")
	    (list "wood16.smp" 2 44100 0.0367800444364548 "snack SMP" "little endian short (16 bits)")
	    (list "wood24.aiff" 1 44100 0.0367800444364548 "AIFF" "big endian int (24 bits)")
	    (list "woodblock.aiff" 1 44100 0.0367800444364548 "AIFF" "big endian short (16 bits)")
	    (list "woodflt.snd" 1 44100 0.0367800444364548 "Sun" "big endian float (32 bits)")
	    (list "RealDrums.sf2" 1 44100 6.39725637435913 "SoundFont" "little endian short (16 bits)")
	    (list "32bit.sf" 1 44100 4.6 "IRCAM" "little endian float (32 bits, unscaled)")
	    (list "PCM_48_8bit_m.w64" 1 48000 0.375 "SoundForge" "unsigned byte (8 bits)")
	    (list "oboe.sf6" 1 22050 2.305125 "SoundForge" "little endian short (16 bits)")
	    (list "addf8.24we" 1 8000 2.976000 "RIFF" "little endian int (24 bits)")
	    (list "hybrid.snd" 1 44100 4.600000 "BICSF" "big endian float (32 bits)")
	    (list "litmanna.sf" 1 44100 .533 "IRCAM" "little endian short (16 bits)")
	    (list "M1F1-float64C-AFsp.aif" 2 8000 2.9366 "AIFC" "big endian double (64 bits)")
	    (list "MacBoing.wav" 1 11127 0.696 "RIFF" "unsigned byte (8 bits)")
	    (list "t15.aiff" 2 44100 135.00 "AIFC" "little endian short (16 bits)")
	    (list "zulu_a4.w11" 1 33000 1.21987879276276 "TX-16W" "unsupported" 23342 40042)))))
    )


(load "snd6.scm")

;;; ---------------- test 3: can variables be set/reset ----------------
(if (or full-test (= snd-test 3) (and keep-going (<= snd-test 3)))
    (begin
      (if (procedure? test-hook) (test-hook 3))
      (open-sound "oboe.snd")
      (if (file-exists? "funcs.cl") (load "funcs.cl"))
      (let ((td (temp-dir)))
	(catch #t
	       (lambda ()
		 (set! (temp-dir) (string-append home-dir "/test"))
		 (if (not (string=? (temp-dir) (string-append home-dir "/test")))
		     (snd-display ";set temp-dir: ~A?" (temp-dir))))
	       (lambda args args))
	(if td 
	    (set! (temp-dir) td)
	    (set! (temp-dir) "")))
      (if (fneq (sample 1000) 0.0328) (snd-display ";sample: ~A?" (sample 1000)))
      (if (or (not (hook? output-name-hook)) (not (hook-empty? output-name-hook)))
	  (snd-display ";output-name-hook: ~A?" output-name-hook))
      (if (or (not (hook? output-comment-hook)) (not (hook-empty? output-comment-hook)))
	  (snd-display ";output-comment-hook: ~A?" output-comment-hook))
      (if (or (not (hook? help-hook)) (not (hook-empty? help-hook)))
	  (snd-display ";help-hook: ~A?" help-hook))
      (if (or (not (hook? mark-drag-hook)) (not (hook-empty? mark-drag-hook)))
	  (snd-display ";mark-drag-hook: ~A?" mark-drag-hook))
      (if (or (not (hook? mix-drag-hook)) (not (hook-empty? mix-drag-hook)))
	  (snd-display ";mix-drag-hook: ~A?" mix-drag-hook))
      (if (or (not (hook? mouse-drag-hook)) (not (hook-empty? mouse-drag-hook)))
	  (snd-display ";mouse-drag-hook: ~A?" mouse-drag-hook))
      (if (or (not (hook? mouse-release-hook)) (not (hook-empty? mouse-release-hook)))
	  (snd-display ";mouse-release-hook: ~A?" mouse-release-hook))
      (if (or (not (hook? mouse-click-hook)) (not (hook-empty? mouse-click-hook)))
	  (snd-display ";mouse-click-hook: ~A?" mouse-click-hook))
      (if (or (not (hook? mouse-press-hook)) (not (hook-empty? mouse-press-hook)))
	  (snd-display ";mouse-press-hook: ~A?" mouse-press-hook))
      (if (or (not (hook? start-playing-hook)) (not (hook-empty? start-playing-hook)))
	  (snd-display ";start-playing-hook: ~A?" start-playing-hook))
      (if (or (not (hook? stop-playing-hook)) (not (hook-empty? stop-playing-hook)))
	  (snd-display ";stop-playing-hook: ~A?" stop-playing-hook))
      (if (or (not (hook? key-press-hook)) (not (hook-empty? key-press-hook)))
	  (snd-display ";key-press-hook: ~A?" key-press-hook))
      (if (or (not (hook? snd-error-hook)) (not (hook-empty? snd-error-hook)))
	  (snd-display ";snd-error-hook: ~A?" snd-error-hook))
      (if (or (not (hook? snd-warning-hook)) (not (hook-empty? snd-warning-hook)))
	  (snd-display ";snd-warning-hook: ~A?" snd-warning-hook))
      (if (or (not (hook? name-click-hook)) (not (hook-empty? name-click-hook)))
	  (snd-display ";name-click-hook: ~A?" name-click-hook))
      (if (or (not (hook? before-apply-hook)) (not (hook-empty? before-apply-hook)))
	  (snd-display ";before-apply-hook: ~A?" before-apply-hook))
      (if (or (not (hook? after-apply-hook)) (not (hook-empty? after-apply-hook)))
	  (snd-display ";after-apply-hook: ~A?" after-apply-hook))
      (if (or (not (hook? enved-hook)) (not (hook-empty? enved-hook)))
	  (snd-display ";enved-hook: ~A?" enved-hook))
      (if (or (not (hook? mouse-enter-label-hook)) (not (hook-empty? mouse-enter-label-hook)))
	  (snd-display ";mouse-enter-label-hook: ~A?" mouse-enter-label-hook))
      (if (or (not (hook? mouse-enter-graph-hook)) (not (hook-empty? mouse-enter-graph-hook)))
	  (snd-display ";mouse-enter-graph-hook: ~A?" mouse-enter-graph-hook))
      (if (or (not (hook? mouse-enter-listener-hook)) (not (hook-empty? mouse-enter-listener-hook)))
	  (snd-display ";mouse-enter-listener-hook: ~A?" mouse-enter-listener-hook))
      (if (or (not (hook? mouse-leave-label-hook)) (not (hook-empty? mouse-leave-label-hook)))
	  (snd-display ";mouse-leave-label-hook: ~A?" mouse-leave-label-hook))
      (if (or (not (hook? mouse-leave-graph-hook)) (not (hook-empty? mouse-leave-graph-hook)))
	  (snd-display ";mouse-leave-graph-hook: ~A?" mouse-leave-graph-hook))
      (if (or (not (hook? mouse-leave-listener-hook)) (not (hook-empty? mouse-leave-listener-hook)))
	  (snd-display ";mouse-leave-listener-hook: ~A?" mouse-leave-listener-hook))
      (if (or (not (hook? window-property-changed-hook)) (not (hook-empty? window-property-changed-hook)))
	  (snd-display ";window-property-changed-hook: ~A?" window-property-changed-hook))
      (if (or (not (hook? initial-graph-hook)) (not (hook-empty? initial-graph-hook)))
	  (snd-display ";initial-graph-hook: ~A?" initial-graph-hook))
      (if (or (not (hook? after-graph-hook)) (not (hook-empty? after-graph-hook)))
	  (snd-display ";after-graph-hook: ~A?" after-graph-hook))
      (if (or (not (hook? graph-hook)) (not (hook-empty? graph-hook)))
	  (snd-display ";graph-hook: ~A?" graph-hook))

      (set! (show-controls) #t)
      (if with-gui
	  (begin
	    (enved-dialog) 
	    (if (not (list-ref (dialog-widgets) 2)) (snd-display ";enved-dialog?"))
	    (set! (enved-active-env) '(0.0 0.0 1.0 1.0 2.0 0.0))
	    (if (not (equal? (enved-active-env) (list 0.0 0.0 1.0 1.0 2.0 0.0)))
		(snd-display ";set enved-active-env: ~A?" (enved-active-env)))
	    (set! (enved-active-env) (enved-active-env))
	    (if (not (equal? (enved-active-env) (list 0.0 0.0 1.0 1.0 2.0 0.0)))
		(snd-display ";set enved-active-env to self: ~A?" (enved-active-env)))
	    (orientation-dialog) 
	    (if (not (list-ref (dialog-widgets) 1)) (snd-display ";orientation-dialog?"))))

      (letrec ((test-vars
		(lambda (lst)
		  (if (not (null? lst))
		      (let* ((name (list-ref (car lst) 0))
			     (getfnc (list-ref (car lst) 1))
			     (setfnc (lambda (val) (set! (getfnc) val)))
			     (initval (list-ref (car lst) 2))
			     (newval (list-ref (car lst) 3)))
			
			(setfnc newval)
			(let ((nowval (getfnc)))
			  (if (not (equal? newval nowval))
			      (if (and (number? newval) (inexact? newval))
				  (if (> (abs (- newval nowval)) .01)
				      (snd-display ";~A /= ~A (~A)" name newval nowval))
				  (snd-display ";~A /= ~A (~A)" name newval nowval)))
			  (setfnc initval)
			  (set! (getfnc) newval)
			  (let ((nowval (getfnc)))
			    (if (not (equal? newval nowval))
				(if (and (number? newval) (inexact? newval))
				    (if (> (abs (- newval nowval)) .01)
					(snd-display ";set! ~A /= ~A (~A)" name newval nowval))
				    (snd-display ";set! ~A /= ~A (~A)" name newval nowval)))
			    (setfnc initval))
			  (test-vars (cdr lst))))))))
	(test-vars 
	 (list
	  (list 'amp-control amp-control 1.0 0.5)
	  (list 'ask-before-overwrite ask-before-overwrite #f #t)
	  (list 'audio-input-device audio-input-device 0 1)
	  (list 'audio-output-device audio-output-device 0 1)
	  (list 'auto-resize auto-resize #t #f)
	  (list 'auto-update auto-update #f #t)
	  (list 'channel-style channel-style 0 1)
	  (list 'colormap colormap 2 0)
	  (list 'color-cutoff color-cutoff 0.003 0.01)
	  (list 'color-inverted color-inverted #t #f)
	  (list 'color-scale color-scale 1.0 0.5)
	  (list 'contrast-control contrast-control 0.0 0.5)
	  (list 'contrast-control-amp contrast-control-amp 1.0 0.5)
	  (list 'contrast-control? contrast-control? #f #t)
	  (list 'auto-update-interval auto-update-interval 60.0 120.0)
	  (list 'cursor-follows-play cursor-follows-play #f #t)
	  (list 'dac-combines-channels dac-combines-channels #t #f)
	  (list 'dac-size dac-size 256 512)
	  (list 'minibuffer-history-length minibuffer-history-length 8 16)
	  (list 'data-clipped data-clipped #f #t)
	  (list 'default-output-chans default-output-chans 1 2)
	  (list 'default-output-format default-output-format 1 1)
	  (list 'default-output-srate default-output-srate 22050 44100)
	  (list 'default-output-type default-output-type 0 1)
	  (list 'dot-size dot-size 1 4)
	  (list 'enved-base enved-base 1.0  1.5)
	  (list 'enved-clip? enved-clip? #f #t)
	  (list 'enved-in-dB enved-in-dB #f #t)
	  (list 'enved-exp? enved-exp? #f #t)
	  (list 'enved-power enved-power 3.0 3.5)
	  (list 'enved-target enved-target 0 1)
	  (list 'enved-wave? enved-wave? #f #t)
	  (list 'eps-file eps-file "snd.eps" "snd-1.eps")
	  (list 'eps-left-margin eps-left-margin 0.0 72.0)
	  (list 'eps-size eps-size 1.0 2.0)
	  (list 'eps-bottom-margin eps-bottom-margin 0.0 36.0)
	  (list 'expand-control expand-control 1.0 2.0)
	  (list 'expand-control-hop expand-control-hop 0.05 0.1)
	  (list 'expand-control-length expand-control-length 0.15 0.2)
	  (list 'expand-control-ramp expand-control-ramp 0.4 0.2)
	  (list 'expand-control? expand-control? #f #t)
	  (list 'fft-window-beta fft-window-beta 0.0  0.5)
	  (list 'fft-log-frequency fft-log-frequency #f #t)
	  (list 'fft-log-magnitude fft-log-magnitude #f #t)
	  (list 'transform-size transform-size 256 512)
	  (list 'transform-graph-type transform-graph-type 0 1)
	  (list 'fft-window fft-window 6 5)
	  (list 'transform-graph? transform-graph? #f #t)
	  (list 'filter-control-in-dB filter-control-in-dB #f #t)
	  (list 'filter-control-env filter-control-env (list 0.0 1.0 1.0 1.0) (list 0.0 1.0 1.0 0.0))
	  (list 'enved-filter enved-filter #t #f)
	  (list 'enved-filter-order enved-filter-order 40 20)
	  (list 'filter-env-in-hz filter-env-in-hz #f #t)
	  (list 'filter-control-order filter-control-order 20 40)
	  (list 'filter-control? filter-control? #f #t)
	  (list 'graph-cursor graph-cursor 34 33)
	  (list 'graph-style graph-style 0 1)
	  (list 'just-sounds just-sounds #f #t)
	  (list 'listener-prompt listener-prompt ">" ":")
	  (list 'max-transform-peaks max-transform-peaks 100 10)
	  (list 'max-regions max-regions 16 6)
	  (list 'min-dB min-dB -60.0 -90.0)
	  (list 'mix-waveform-height mix-waveform-height 20 40)
	  (list 'mix-tag-height mix-tag-height 14 20)
	  (list 'mix-tag-width mix-tag-width 6 20)
	  (list 'selection-creates-region selection-creates-region #t #f)
	  (list 'transform-normalization transform-normalization normalize-by-channel dont-normalize)
	  (list 'previous-files-sort previous-files-sort 0 1)
	  (list 'print-length print-length 12 16)
	  (list 'recorder-autoload recorder-autoload #f #t)
	  (list 'recorder-out-chans recorder-out-chans 2 1)
	  (list 'recorder-buffer-size recorder-buffer-size 4096 256)
	  (list 'recorder-max-duration recorder-max-duration 1000000.0 1000.0)
	  (list 'recorder-trigger recorder-trigger 0.0 0.1)
	  (list 'region-graph-style region-graph-style graph-lines graph-lollipops)
	  (list 'reverb-control-decay reverb-control-decay 1.0 2.0)
	  (list 'reverb-control-feedback reverb-control-feedback 1.09 1.6)
	  (list 'reverb-control-length reverb-control-length 1.0 2.0)
	  (list 'reverb-control-lowpass reverb-control-lowpass 0.7 0.9)
	  (list 'reverb-control-scale reverb-control-scale 0.0 0.2)
	  (list 'reverb-control? reverb-control? #f #t)
	  (list 'show-axes show-axes 1 0)
	  (list 'show-transform-peaks show-transform-peaks #f #t)
	  (list 'show-indices show-indices #f #t)
	  (list 'show-backtrace show-backtrace #f #t)
	  (list 'show-marks show-marks #t #f)
	  (list 'show-mix-waveforms show-mix-waveforms #t #f)
	  (list 'show-selection-transform show-selection-transform #f #t)
	  (list 'show-y-zero show-y-zero #f #t)
	  (list 'sinc-width sinc-width 10 40)
	  (list 'spectro-cutoff spectro-cutoff 1.0 0.7)
	  (list 'spectro-hop spectro-hop 4 10)
	  (list 'spectro-start spectro-start 0.0 0.1)
	  (list 'spectro-x-angle spectro-x-angle (if (provided? 'gl) 300.0 90.0) 60.0)
	  (list 'spectro-x-scale spectro-x-scale (if (provided? 'gl) 1.5 1.0) 2.0)
	  (list 'spectro-y-angle spectro-y-angle (if (provided? 'gl) 320.0 0.0) 60.0)
	  (list 'spectro-y-scale spectro-y-scale 1.0 2.0)
	  (list 'spectro-z-angle spectro-z-angle (if (provided? 'gl) 0.0 358.0) 60.0)
	  (list 'spectro-z-scale spectro-z-scale (if (provided? 'gl) 1.0 0.1) 0.2)
	  (list 'speed-control speed-control 1.0 0.5)
	  (list 'speed-control-style speed-control-style 0 1)
	  (list 'speed-control-tones speed-control-tones 12 18)
	  (list 'sync sync 0 1)
	  (list 'tiny-font tiny-font "6x12" "9x15")
	  (list 'transform-type transform-type 0 1)
	  (list 'verbose-cursor verbose-cursor #f #t)
	  (list 'vu-size vu-size 1.0 2.0)
	  (list 'vu-font-size vu-font-size 1.0 2.0)
	  (list 'wavelet-type wavelet-type 0 1)
	  (list 'time-graph? time-graph? #f #t)
	  (list 'time-graph-type time-graph-type graph-once graph-as-wavogram)
	  (list 'wavo-hop wavo-hop 3 6)
	  (list 'wavo-trace wavo-trace 64 128)
	  (list 'with-mix-tags with-mix-tags #t #f)
	  (list 'with-relative-panes with-relative-panes #t #f)
	  (list 'with-gl with-gl (provided? 'gl) #f)
	  (list 'x-axis-style x-axis-style 0 1)
	  (list 'beats-per-minute beats-per-minute 30.0 120.0)
	  (list 'zero-pad zero-pad 0 1)
	  (list 'zoom-focus-style zoom-focus-style 2 1))))
    
      (letrec ((test-bad-args
		(lambda (lst)
		  (if (not (null? lst))
		      (let* ((name (list-ref (car lst) 0))
			     (getfnc (list-ref (car lst) 1))
			     (setfnc (lambda (val) (set! (getfnc) val)))
			     (initval (list-ref (car lst) 2))
			     (newvals (list-ref (car lst) 3)))
			(map (lambda (n)
			       (catch #t 
				      (lambda ()
					(setfnc n))
				      (lambda args (car args)))
			       (let ((nowval (getfnc)))
				 (if (equal? n nowval)
				     (snd-display ";~A = ~A (~A)" name n initval))
				 (setfnc initval)))
			     newvals)
			(test-bad-args (cdr lst)))))))
	(test-bad-args
	 (list
	  (list 'amp-control amp-control 1.0 '(-1.0 123.123))
	  (list 'channel-style channel-style 0 '(32 -1 1.0))
	  (list 'colormap colormap 2 '(321 -123))
	  (list 'color-cutoff color-cutoff 0.003 '(-1.0 123.123))
	  (list 'color-scale color-scale 1.0 '(-32.0 2000.0))
	  (list 'contrast-control contrast-control 0.0 '(-123.123 123.123))
	  (list 'dac-size dac-size 256 '(-1 0 -123))
	  (list 'dot-size dot-size 1 '(0 -1 -123))
	  (list 'enved-target enved-target 0 '(123 -321))
	  (list 'expand-control expand-control 1.0 '(-1.0 0.0))
	  (list 'expand-control-hop expand-control-hop 0.05 '(-1.0))
	  (list 'expand-control-length expand-control-length 0.15 '(-1.0 0.0))
	  (list 'expand-control-ramp expand-control-ramp 0.4 '(-1.0 1.0 123.123))
	  (list 'fft-window-beta fft-window-beta 0.0  '(-1.0 123.123))
	  (list 'transform-size transform-size 256 '(-1 0))
	  (list 'zero-pad zero-pad 0 '(-1 -123))
	  (list 'cursor-style cursor-style cursor-cross '(-1))
	  (list 'cursor-style cursor-style cursor-line '(2 123))
	  (list 'transform-graph-type transform-graph-type 0 '(-1 123))
	  (list 'fft-window fft-window 6 '(-1 123))
	  (list 'enved-filter-order enved-filter-order 40 '(-1 0))
	  (list 'filter-control-order filter-control-order 20 '(-10 -1 0))
	  (list 'max-transform-peaks max-transform-peaks 100 '(-1))
	  (list 'max-regions max-regions 16 '(-1 -123))
	  (list 'previous-files-sort previous-files-sort 0 '(-1 123))
	  (list 'reverb-control-length reverb-control-length 1.0 '(-1.0))
	  (list 'show-axes show-axes 1 '(-1 123))
	  (list 'sinc-width sinc-width 10 '(-10))
	  (list 'spectro-cutoff spectro-cutoff 1.0 '(-1.0))
	  (list 'spectro-hop spectro-hop 4 '(-10 -1 0))
	  (list 'spectro-start spectro-start 0.0 '(-1.0))
	  (list 'speed-control speed-control 1.0 '(0.0))
	  (list 'speed-control-style speed-control-style 0 '(-1 10))
	  (list 'transform-type transform-type 0 '(-1 123))
	  (list 'wavelet-type wavelet-type 0 '(-1 123))
	  (list 'wavo-hop wavo-hop 1 '(0 -123))
	  (list 'wavo-trace wavo-trace 1 '(0 -123))
	  (list 'x-axis-style x-axis-style 0 '(-1 123))
	  (list 'zoom-focus-style zoom-focus-style 2 '(-1 123)))))

      (set! (window-width) 300)
      (set! (window-height) 300)
      (if (not (equal? (window-width) 300))
	  (snd-display ";window width: ~A /= 300?" (window-width)))
      (if (not (equal? (window-height) 300))
	  (snd-display ";window height: ~A /= 300?" (window-height)))
      (set! (window-x) 123)
      (set! (window-y) 321)
      (if (not (equal? (window-x) 123))
	  (snd-display ";window x: ~A /= 123?" (window-x)))
      (if (not (equal? (window-y) 321))
	  (snd-display ";window y: ~A /= 321?" (window-y)))
      (set! (window-y) 10) ; get it back out of harm's way
      (set! (vu-font) "8x15")
      (set! (color-scale) 100.0)
      (if (fneq (color-scale) 100.0) (snd-display ";color-scale to 100: ~A" (color-scale)))

      (if (procedure? (search-procedure))
	  (snd-display ";global search procedure: ~A?" (search-procedure)))
      (set! (search-procedure) (lambda (y) (> y .1)))
      (if (not (procedure? (search-procedure)))
	  (snd-display ";set global search procedure: ~A?" (search-procedure)))
      (if (not ((search-procedure) .2))
	  (snd-display ";search > .1 .2"))
      (if ((search-procedure) .02)
	  (snd-display ";search > .1 .02"))
      (set! (search-procedure) (lambda (y) (< y 0.0)))
      (if ((search-procedure) .02)
	  (snd-display ";search < 0.0 .02"))
      (set! (search-procedure) #f)
      (if (procedure? (search-procedure))
	  (snd-display ";global search procedure after reset: ~A?" (search-procedure)))
      (set! (search-procedure) (lambda (y) (> y .1)))
      (if (not (procedure? (search-procedure)))
	  (snd-display ";set global search procedure: ~A?" (search-procedure)))

      (set! (enved-filter-order) 5)
      (if (not (= (enved-filter-order) 6)) (snd-display ";set enved-filter-order 5: ~A" (enved-filter-order)))
      (if with-gui
	  (begin
	    (set! (enved-active-env) 'zero_to_one) ; funcs.cl above
	    (if (not (feql (enved-active-env) zero_to_one)) (snd-display ";set symbol enved-active-env: ~A ~A" (enved-active-env) zero_to_one))
	    (set! (enved-active-env) "mod_down")
	    (if (not (feql (enved-active-env) mod_down)) (snd-display ";set string enved-active-env: ~A ~A" (enved-active-env) mod_down))))
      (close-sound 0) 
      (dismiss-all-dialogs)

      (if (provided? 'snd-debug)
	  (begin
	    (snd-stdin-test "(set! (enved-filter-order) 12)")
	    (if (not (= (enved-filter-order) 12)) (snd-display ";set enved-filter-order 12 via stdin: ~A" (enved-filter-order)))
	    (snd-stdin-test "(set! (enved-filter")
	    (snd-stdin-test "-order) 10)")
	    (if (not (= (enved-filter-order) 10)) (snd-display ";set enved-filter-order 12 via 2 stdin: ~A" (enved-filter-order)))))
      ))

(define play-sound
  (lambda (file)
    (let* ((sound-fd (mus-sound-open-input file))
           (chans (mus-sound-chans file))
           (frames (mus-sound-frames file))
           (bufsize 256)
           (data (make-sound-data chans bufsize))
           (bytes (* bufsize chans 2)))
      (mus-sound-read sound-fd 0 (1- bufsize) chans data)
      (catch #t
	     (lambda ()
	       (let ((audio-fd (mus-audio-open-output mus-audio-default (mus-sound-srate file) chans mus-lshort bytes)))
		 (if (= audio-fd -1)
		     (set! audio-fd (mus-audio-open-output mus-audio-default (mus-sound-srate file) chans mus-bshort bytes)))
		 (if (= audio-fd -1)
		     (snd-display ";can't play ~A" file)
		     (begin
		       (do ((i 0 (+ i bufsize)))
			   ((>= i frames))
			 (mus-audio-write audio-fd data bufsize)
			 (mus-sound-read sound-fd 0 (1- bufsize) chans data))
		       (mus-audio-close audio-fd)))))
	     (lambda args "can't open audio"))
      (mus-sound-close-input sound-fd))))


;;; ---------------- test 4: sndlib tests ----------------

(define (frame->byte file frame)
  (+ (mus-sound-data-location file)
     (* (mus-sound-chans file)
	(mus-sound-datum-size file)
	frame)))

(load "snd5.scm")

(define (show-input-1 . arg)
  ;; from rtio.scm
  (define (card+device card device)
    (logior (ash card 16) device))
  (let* ((our-short (if (little-endian?) mus-lshort mus-bshort))
	 (our-srate 22050)
	 (our-dac-buffer-size-in-bytes 512)
	 (our-dac-buffer-size-in-shorts 256)
	 (our-chans 1)
	 (our-chan 0)
	 (our-default-card-number 0)
	 (in-sys (if (not (null? arg)) 
		     (car arg) 
		     our-default-card-number))
	 (in-port (catch 'mus-error
			 (lambda ()
			   (mus-audio-open-input 
			    (card+device in-sys mus-audio-default) 
			    our-srate our-chans our-short our-dac-buffer-size-in-bytes))
			 (lambda args -1)))
	 (data (make-sound-data our-chans our-dac-buffer-size-in-shorts))
    	 (vobj (make-vct our-dac-buffer-size-in-shorts)))
    (if (= in-port -1)
	(snd-display ";can't open audio input port!")
	(begin
	  (do ((i 0 (1+ i)))
	      ((= i 10))
	    (mus-audio-read in-port data our-dac-buffer-size-in-shorts)
	    (graph (sound-data->vct data our-chan vobj)))
	  (mus-audio-close in-port)))))

(if (or full-test (= snd-test 4) (and keep-going (<= snd-test 4)))
    (begin
      (if (procedure? test-hook) (test-hook 4))
      (do ((clmtest 0 (1+ clmtest))) ((= clmtest tests)) 
	(if (> tests 1) (begin (snd-display ";test ~D " clmtest) (mus-sound-prune)))
    (let ((chns (mus-sound-chans "oboe.snd"))
	  (dl (mus-sound-data-location "oboe.snd"))
	  (fr (mus-sound-frames "oboe.snd"))
	  (smps (mus-sound-samples "oboe.snd"))
	  (len (mus-sound-length "oboe.snd"))
	  (size (mus-sound-datum-size "oboe.snd"))
	  (com (mus-sound-comment "oboe.snd"))
	  (sr (mus-sound-srate "oboe.snd"))
	  (m1 (mus-sound-maxamp-exists? "oboe.snd"))
	  (mal (mus-sound-maxamp "oboe.snd"))
	  (mz (mus-sound-maxamp "z.snd"))
	  (bytes (mus-data-format-bytes-per-sample (mus-sound-data-format "oboe.snd")))
	  (sys (mus-audio-systems)))
      (if (or (not (= (car mz) 0))
	      (fneq (cadr mz) 0.0))
	  (snd-display ";mus-sound-maxamp z.snd: ~A" mz))
      (let ((formats (list mus-bshort mus-lshort mus-mulaw mus-alaw mus-byte mus-ubyte mus-bfloat mus-lfloat
			   mus-bint mus-lint mus-bintn mus-lintn mus-b24int mus-l24int mus-bdouble mus-ldouble
			   mus-ubshort mus-ulshort mus-bdouble-unscaled mus-ldouble-unscaled mus-bfloat-unscaled 
			   mus-lfloat-unscaled))
	    (sizes (list 2 2 1 1 1 1 4 4 
			 4 4 4 4 3 3 8 8
			 2 2 8 8 4
			 4)))
	(for-each
	 (lambda (frm siz)
	   (if (not (= (mus-data-format-bytes-per-sample frm) siz))
	       (snd-display ";mus-data-format-bytes-per-sample ~A: ~A" (mus-data-format-name frm) siz)))
	 formats
	 sizes))
      (if (provided? 'snd-debug)
	  (for-each
	   (lambda (format type name)
	     (if (not (string=? name (mus-header-original-format-name format type)))
		 (snd-display ";original name: ~A ~A" name (mus-header-original-format-name format type))))
	   (list 29 13 17 10 8 23 20
		 (logior (ash (char->integer #\M) 24) (ash (char->integer #\A) 16) (ash (char->integer #\C) 8) (char->integer #\!))
		 2 #x10 #x13 #x16 #x19 #x22 #x25 #x28 #x32
		 #x35 #x38 #x3b #x40 #x50 #x55 #x61 #x64 #x67
		 #x71 #x74 #x77 #x80 #x83 #x86 #x91 #x98 #x101
		 #x111 #x200 #x203 #x220 #x680 #x1002 #x1100 #x1500)
	   (list mus-next mus-next mus-next mus-next mus-next mus-next mus-next
		 mus-aifc
		 mus-riff mus-riff mus-riff mus-riff mus-riff mus-riff mus-riff mus-riff mus-riff
		 mus-riff mus-riff mus-riff mus-riff mus-riff mus-riff mus-riff mus-riff mus-riff
		 mus-riff mus-riff mus-riff mus-riff mus-riff mus-riff mus-riff mus-riff mus-riff 
		 mus-riff mus-riff mus-riff mus-riff mus-riff mus-riff mus-riff mus-riff)
	   (list "delat_mulaw_8" "dsp_data_24" "mulaw_squelch" "dsp_core" "indirect" "adpcm_g721" "compressed_emphasized"
		 "!CAM"
		 "ADPCM" "OKI_ADPCM" "Sierra_ADPCM" "DIGIFIX" "HP cu codec" "DSPGroup_TrueSpeech" "APTX" "lrc" "MSN audio codec"
		 "DIGIREAL" "NMS_VBXADPCM" "Rockwell adpcm" "G721_ADPCM" "MPEG" "Mpeg layer 3" "ESS Tech pcm" "G726" "DSAT display"
		 "voxware ac10 " "voxware rt24" "voxware vr12 " "softsound" "G729A" "DF GSM610" "sbc24" "philips lpcbb" "Irat"
		 "vivo G723" "Creative_ADPCM" "Creative fastspeech 10" "quarterdeck" "VME vmpcm" "OLICELP" "LH codec" "Soundspace musicompression")))
      (mus-sound-report-cache "hiho.tmp")
      (if (defined? 'read-line)
	  (let ((p (open-input-file "hiho.tmp")))
	    (if (not p)
		(snd-display ";mus-sound-report-cache->hiho.tmp failed?")
		(let ((line (read-line p)))
		  (if (or (not (string? line))
			  (not (string=? "sound table:")))
		      (snd-display ";print-cache 1: ~A?" line))
		  (close-port p)
		  (delete-file "hiho.tmp")))))
      (if (< (string-length (mus-audio-report)) 10)
	  (snd-display ";mus-audio-report: ~A" (mus-audio-report)))
      (if (and (not (= sys 1)) (not (= sys 2))) (snd-display ";mus-audio-systems: ~A?" sys))
      (if (not (= chns 1)) (snd-display ";oboe: mus-sound-chans ~D?" chns))
      (if (not (= dl 28)) (snd-display ";oboe: mus-sound-data-location ~D?" dl))
      (if (not (= fr 50828)) (snd-display ";oboe: mus-sound-frames ~D?" fr))
      (if (not (= smps 50828)) (snd-display ";oboe: mus-sound-samples ~D?" smps))
      (if (not (= len (+ 28 (* 2 50828)))) (snd-display ";oboe: mus-sound-length ~D?" len))
      (if (not (= size 2)) (snd-display ";oboe: mus-sound-datum-size ~D?" size))
      (if (not (= bytes 2)) (snd-display ";oboe: sound-bytes ~D?" bytes))
      (if (not (= sr 22050)) (snd-display ";oboe: mus-sound-srate ~D?" sr))
      (if (and m1 (= clmtest 0)) (snd-display ";oboe: mus-sound-maxamp-exists before maxamp: ~A" m1))
      (if (not (mus-sound-maxamp-exists? "oboe.snd")) 
	  (snd-display ";oboe: mus-sound-maxamp-exists after maxamp: ~A" (mus-sound-maxamp-exists? "oboe.snd")))

      (let ((str (strftime "%d-%b %H:%M %Z" (localtime (mus-sound-write-date "oboe.snd")))))
	(if (not (string=? str "19-Oct 09:46 PDT"))
	    (snd-display ";mus-sound-write-date oboe.snd: ~A?" str)))
      (let ((str (strftime "%d-%b %H:%M %Z" (localtime (mus-sound-write-date "pistol.snd")))))
	(if (not (string=? str "19-Oct 09:46 PDT"))
	    (snd-display ";mus-sound-write-date pistol.snd: ~A?" str)))

      (let* ((fsnd (string-append sf-dir "forest.aiff")))
	(if (file-exists? fsnd)
	    (begin
	      (system (format #f "cp ~A fmv.snd" fsnd))
	      (let ((index (open-sound "fmv.snd")))
		(if (not (equal? (sound-loop-info index) (mus-sound-loop-info fsnd)))
		    (snd-display ";loop-info: ~A ~A" (sound-loop-info index) (mus-sound-loop-info fsnd)))
		(set! (sound-loop-info index) (list 12000 14000 1 2 3 4))
		(if (not (equal? (sound-loop-info index) (list 12000 14000 1 2 3 4 1 1)))
		    (snd-display ";set loop-info: ~A" (sound-loop-info index)))
		(save-sound-as "fmv1.snd" index mus-aifc)
		(close-sound index)
		(if (not (equal? (mus-sound-loop-info "fmv1.snd") (list 12000 14000 1 2 3 4 1 1)))
		    (snd-display ";saved loop-info: ~A" (mus-sound-loop-info "fmv1.snd"))))))
	(let ((index (open-sound "oboe.snd")))
	  (save-sound-as "fmv.snd" index mus-aifc)
	  (close-sound index))
	(let ((index (open-sound "fmv.snd")))
	  (if (not (equal? (sound-loop-info index) '()))
	      (snd-display ";null loop-info: ~A" (sound-loop-info index)))
	  (set! (sound-loop-info index) (list 1200 1400 4 3 2 1))
	  (if (not (equal? (sound-loop-info index) (list 1200 1400 4 3 2 1 1 1)))
	      (snd-display ";set null loop-info: ~A" (sound-loop-info index)))
	  (save-sound-as "fmv1.snd" index mus-aifc)
	  (close-sound index)
	  (if (not (equal? (mus-sound-loop-info "fmv1.snd") (list 1200 1400 4 3 2 1 1 1)))
	      (snd-display ";saved null loop-info: ~A" (mus-sound-loop-info "fmv1.snd"))))
	(let ((index (open-sound "fmv.snd")))
	  (set! (sound-loop-info) (list 1200 1400 4 3 2 1 1 0))
	  (if (not (equal? (sound-loop-info index) (list 1200 1400 0 0 2 1 1 0)))
	      (snd-display ";set null loop-info (no mode1): ~A" (sound-loop-info index)))
	  (save-sound-as "fmv1.snd" index mus-aifc)
	  (close-sound index)
	  (if (not (equal? (mus-sound-loop-info "fmv1.snd") (list 1200 1400 0 0 2 1 1 0)))
	      (snd-display ";saved null loop-info (no mode1): ~A" (mus-sound-loop-info "fmv1.snd")))))

      (if (mus-audio-sun-outputs 1 2 3) (snd-display ";mus-audio-sun-outputs: ~A" (mus-audio-sun-outputs 1 2 3)))

      (if com (snd-display ";oboe: mus-sound-comment ~A?" com))
      (let ((fsnd (string-append sf-dir "nasahal8.wav")))
	(if (file-exists? fsnd)
	    (begin
	      (set! com (mus-sound-comment fsnd))
	      (if (or (not (string? com)) (not (string=? com "ICRD: 1997-02-22\nIENG: Paul R. Roger\nISFT: Sound Forge 4.0\n")))
		  (snd-display ";mus-sound-comment \"nasahal8.wav\") -> ~A?" com)))))
      (let ((fsnd (string-append sf-dir "8svx-8.snd")))
	(if (file-exists? fsnd)
	    (begin
	      (set! com (mus-sound-comment fsnd))
	      (if (or (not (string? com)) (not (string=? com "File created by Sound Exchange  ")))
		  (snd-display ";mus-sound-comment \"8svx-8.snd\") -> ~A?" com)))))
      (let ((fsnd (string-append sf-dir "sun-16-afsp.snd")))
	(if (file-exists? fsnd)
	    (begin
	      (set! com (mus-sound-comment fsnd))
	      (if (or (not (string? com)) (not (string=? com "AFspdate:1981/02/11 23:03:34 UTC")))
		  (snd-display ";mus-sound-comment \"sun-16-afsp.snd\") -> ~A?" com)))))
      (let ((fsnd (string-append sf-dir "smp-16.snd")))
	(if (file-exists? fsnd)
	    (begin
	      (set! com (mus-sound-comment fsnd))
	      (if (or (not (string? com)) (not (string=? com "Converted using Sox.                                        ")))
		  (snd-display ";mus-sound-comment \"smp-16.snd\") -> ~A?" com)))))
      (let ((fsnd (string-append sf-dir "d40130.au")))
	(if (file-exists? fsnd)
	    (begin
	      (set! com (mus-sound-comment fsnd))
	      (if (or (not (string? com)) (not (string=? com "1994 Jesus Villena")))
		  (snd-display ";mus-sound-comment \"d40130.au\") -> ~A?" com)))))
      (let ((fsnd (string-append sf-dir "wood.maud")))
	(if (file-exists? fsnd)
	    (begin
	      (set! com (mus-sound-comment fsnd))
	      (if (or (not (string? com)) (not (string=? com "file written by SOX MAUD-export ")))
		  (snd-display ";mus-sound-comment \"wood.maud\") -> ~A?" com)))))
      (let ((fsnd (string-append sf-dir "addf8.sf_mipseb")))
	(if (file-exists? fsnd)
	    (begin
	      (set! com (mus-sound-comment fsnd))
	      (if (or (not (string? com)) 
		      (not (string=? com "date=\"Feb 11 18:03:34 1981\" info=\"Original recorded at 20 kHz, 15-bit D/A, digitally filtered and resampled\" speaker=\"AMK female\" text=\"Add the sum to the product of these three.\" ")))
		  (snd-display ";mus-sound-comment \"addf8.sf_mipseb\") -> ~A?" com)))))
      (let ((fsnd (string-append sf-dir "mary-sun4.sig")))
	(if (file-exists? fsnd)
	    (begin
	      (set! com (mus-sound-comment fsnd))
	      (if (or (not (string? com)) (not (string=? com "MARY HAD A LITTLE LAMB\n")))
		  (snd-display ";mus-sound-comment \"mary-sun4.sig\") -> ~A?" com)))))
      (let ((fsnd (string-append sf-dir "nasahal.pat")))
	(if (file-exists? fsnd)
	    (begin
	      (set! com (mus-sound-comment fsnd))
	      (if (or (not (string? com)) (not (string=? com "This patch saved with Sound Forge 3.0.")))
		  (snd-display ";mus-sound-comment \"nasahal.pat\") -> ~A?" com)))))
      (let ((fsnd (string-append sf-dir "next-16.snd")))
	(if (file-exists? fsnd)
	    (begin
	      (set! com (mus-sound-comment fsnd))
	      (if (or (not (string? com)) 
		      (not (string=? com ";Written on Mon 1-Jul-91 at 12:10 PDT  at localhost (NeXT) using Allegro CL and clm of 25-June-91")))
		  (snd-display ";mus-sound-comment \"next-16.snd\") -> ~A?" com)))))
      (let ((fsnd (string-append sf-dir "wood16.nsp")))
	(if (file-exists? fsnd)
	    (begin
	      (set! com (mus-sound-comment fsnd))
	      (if (or (not (string? com)) (not (string=? com "Created by Snack   ")))
		  (snd-display ";mus-sound-comment \"wood16.nsp\") -> ~A?" com)))))
      (let ((fsnd (string-append sf-dir "wood.sdx")))
	(if (file-exists? fsnd)
	    (begin
	      (set! com (mus-sound-comment fsnd))
	      (if (or (not (string? com)) (not (string=? com "1994 Jesus Villena")))
		  (snd-display ";mus-sound-comment \"wood.sdx\") -> ~A?" com)))))
      (let ((fsnd (string-append sf-dir "clmcom.aif")))
	(if (file-exists? fsnd)
	    (begin
	      (set! com (mus-sound-comment fsnd))
	      (if (or (not (string? com)) (not (string=? com "this is a comment")))
		  (snd-display ";mus-sound-comment \"clmcom.aif\") -> ~A?" com)))))
      (let ((fsnd (string-append sf-dir "anno.aif")))
	(if (file-exists? fsnd)
	    (begin
	      (set! com (mus-sound-comment fsnd))
	      (if (or (not (string? com)) (not (string=? com "1994 Jesus Villena\n")))
		  (snd-display ";mus-sound-comment \"anno.aif\") -> ~A?" com)))))
      (let ((fsnd (string-append sf-dir "telephone.wav")))
	(if (file-exists? fsnd)
	    (begin
	      (set! com (mus-sound-comment fsnd))
	      (if (or (not (string? com)) 
		      (not (string=? com "sample_byte_format -s2 01\nchannel_count -i 1\nsample_count -i 36461\nsample_rate -i 16000\nsample_n_bytes -i 2\nsample_sig_bits -i 16\n")))
		  (snd-display ";mus-sound-comment \"telephone.wav\") -> ~A?" com)))))
      
      (if (fneq (cadr mal) .14724) (snd-display ";oboe: mus-sound-maxamp ~F?" (cadr mal)))
      (if (not (= (car mal) 24971)) (snd-display ";oboe: mus-sound-maxamp at ~D?" (car mal)))
      (set! (mus-sound-maxamp "oboe.snd") (list 1234 .5))
      (set! mal (mus-sound-maxamp "oboe.snd"))
      (if (fneq (cadr mal) .5) (snd-display ";oboe: set! mus-sound-maxamp ~F?" (cadr mal)))
      (if (not (= (car mal) 1234)) (snd-display ";oboe: set! mus-sound-maxamp at ~D?" (car mal)))
      (set! mal (mus-sound-maxamp "4.aiff"))
      (if (not (feql mal (list 810071 0.245 810071 0.490 810071 0.735 810071 0.980)))
	  (snd-display ";mus-sound-maxamp 4.aiff: ~A?" mal))
      (set! (mus-sound-maxamp "4.aiff") (list 12345 .5 54321 .2 0 .1 9999 .01))
      (set! mal (mus-sound-maxamp "4.aiff"))
      (if (not (feql mal (list 12345 .5 54321 .2 0 .1 9999 .01)))
	  (snd-display ";set! mus-sound-maxamp 4.aiff: ~A?" mal))
      (let ((var (catch #t (lambda () (set! (mus-sound-maxamp "oboe.snd") (list 1234))) (lambda args args))))
	(if (not (eq? (car var) 'wrong-type-arg))
	    (snd-display ";set! mus-sound-maxamp bad arg: ~A" var)))
      (if (and (not (= (mus-sound-type-specifier "oboe.snd") #x646e732e))  ;little endian reader
	       (not (= (mus-sound-type-specifier "oboe.snd") #x2e736e64))) ;big endian reader
	  (snd-display ";oboe: mus-sound-type-specifier: ~X?" (mus-sound-type-specifier "oboe.snd")))
      (if (not (string=? (strftime "%d-%b-%Y %H:%M" (localtime (file-write-date "oboe.snd"))) "19-Oct-1998 09:46"))
	  (snd-display ";oboe: file-write-date: ~A?" (strftime "%d-%b-%Y %H:%M" (localtime (file-write-date "oboe.snd")))))
      (play-sound "oboe.snd")

      (let ((lasth (do ((i 0 (1+ i)))
		       ((string=? (mus-header-type-name i) "unknown") i))))
	(if (< lasth 50) (snd-display ";header-type[~A] = ~A" lasth (mus-header-type-name lasth))))
      (let ((lasth (do ((i 0 (1+ i)))
		       ((string=? (mus-data-format-name i) "unknown") i))))
	(if (< lasth 10) (snd-display ";data-format[~A] = ~A" lasth (mus-data-format-name lasth))))

      (set! (transform-normalization) dont-normalize)
      (if (not (= (transform-normalization) dont-normalize))
	  (snd-display ";set-transform-normalization none -> ~A" (transform-normalization)))
      (set! (transform-normalization) normalize-globally)
      (if (not (= (transform-normalization) normalize-globally))
	  (snd-display ";set-transform-normalization globally -> ~A" (transform-normalization)))
      (set! (transform-normalization) normalize-by-channel)
      (if (not (= (transform-normalization) normalize-by-channel))
	  (snd-display ";set-transform-normalization channel -> ~A" (transform-normalization)))

      (let ((len 100))
	(for-each
	 (lambda (type allowed-diff)
	   (let ((ind (new-sound "test.snd" mus-next mus-bfloat))
		 (v (make-vct len))
		 (maxdiff 0.0)
		 (maxpos #f))
	     (vct-set! v 0 0.999)
	     (vct-set! v 1 -1.0)
	     (vct-set! v 2 .1)
	     (vct-set! v 3 -.1)
	     (vct-set! v 4 .01)
	     (vct-set! v 5 -.01)
	     (vct-set! v 4 .001)
	     (vct-set! v 5 -.001)
	     (vct-set! v 6 0.0)
	     (do ((i 7 (1+ i)))
		 ((= i len))
	       (vct-set! v i (- 1.0 (random 2.0))))
	     (vct->channel v 0 len ind 0)
	     (save-sound-as "test1.snd" ind mus-next type)
	     (close-sound ind)
	     (set! ind (open-sound "test1.snd"))
	     (let ((v1 (channel->vct 0 len ind 0)))
	       (do ((i 0 (1+ i)))
		   ((= i len))
		 (let ((diff (abs (- (vct-ref v i) (vct-ref v1 i)))))
		   (if (> diff maxdiff)
		       (begin
			 (set! maxdiff diff)
			 (set! maxpos i)))))
	       (if (> maxdiff allowed-diff)
		   (snd-display ";~A: ~A at ~A (~A ~A)" (mus-data-format-name type) maxdiff maxpos (vct-ref v maxpos) (vct-ref v1 maxpos)))
	       (close-sound ind))))
	 (list mus-bshort   mus-lshort   mus-mulaw   mus-alaw   mus-byte  
	       mus-lfloat   mus-bint     mus-lint    mus-b24int mus-l24int
	       mus-ubshort  mus-ulshort  mus-ubyte   mus-bfloat mus-bdouble 
	       mus-ldouble)
	 (list (expt 2 -15) (expt 2 -15) 0.02 0.02 (expt 2 -7)
	       (expt 2 -23) (expt 2 -23) (expt 2 -23) (expt 2 -23) (expt 2 -23) ; assuming sndlib bits=24 here (if int)
	       (expt 2 -15) (expt 2 -15) (expt 2 -7) (expt 2 -23) (expt 2 -23)
	       (expt 2 -23))))

      (let* ((ob (view-sound "oboe.snd"))
	     (samp (sample 1000 ob))
	     (old-comment (mus-sound-comment "oboe.snd"))
	     (str (string-append "written " 
				 (strftime "%a %d-%b-%Y %H:%M %Z" 
					   (localtime (current-time))))))
	(set! (comment ob) str)
	(save-sound-as "test.snd" ob mus-aifc mus-bdouble)
	(set! (filter-env-in-hz) #t)
	(let ((ab (open-sound "test.snd")))
	  (if (and (provided? 'xm) (provided? 'snd-debug))
	      (XtCallCallbacks (cadr (sound-widgets ab)) XmNactivateCallback (snd-sound-pointer ab)))
	  (if (provided? 'snd-debug)
	      (begin
		(if (snd-sound-pointer 12345) (snd-display ";snd-sound-pointer #f: ~A" (snd-sound-pointer 12345)))
		(if (not (number? (snd-sound-pointer ab))) (snd-display ";snd-sound-pointer ~A: ~A" ab (snd-sound-pointer ab)))))
	  (if (not (= (header-type ab) mus-aifc)) 
	      (snd-display ";save-as aifc -> ~A?" (mus-header-type-name (header-type ab))))
	  (if (not (= (mus-sound-header-type "test.snd") mus-aifc)) 
	      (snd-display ";saved-as aifc -> ~A?" (mus-header-type-name (mus-sound-header-type "test.snd"))))
	  (if (fneq (sample 1000 ab) samp) (snd-display ";aifc[1000] = ~A?" (sample 1000 ab)))
	  (if (not (string=? (mus-sound-comment "test.snd") str))
	      (snd-display ";output-comment: ~A ~A" (mus-sound-comment "test.snd") str))
	  (if (or (not (string? (comment ab)))
		  (not (string=? (comment ab) str)))
	      (snd-display ";output-comment (comment): ~A ~A" (comment ab) str))
	  (close-sound ab))
	(if (not (equal? old-comment (mus-sound-comment "oboe.snd")))
	    (snd-display ";set-comment overwrote current ~A ~A" old-comment (mus-sound-comment "oboe.snd")))
	(set! (filter-env-in-hz) #f)
	(save-sound-as "test.snd" ob mus-raw)
	(let ((ab (open-raw-sound "test.snd" 1 22050 mus-bshort)))
	  (if (and (provided? 'xm) (provided? 'snd-debug)) 
	      (XtCallCallbacks (cadr (sound-widgets ab)) XmNactivateCallback (snd-sound-pointer ab)))
	  (if (not (= (header-type ab) mus-raw)) 
	      (snd-display ";save-as raw -> ~A?" (mus-header-type-name (header-type ab))))
	  (if (not (= (mus-sound-header-type "test.snd") mus-raw)) 
	      (snd-display ";saved-as raw -> ~A?" (mus-header-type-name (mus-sound-header-type "test.snd"))))
	  (if (fneq (sample 1000 ab) samp) (snd-display ";raw[1000] = ~A?" (sample 1000 ab)))
	  (close-sound ab))
	(save-sound-as "test.snd" ob mus-nist mus-bint)
	(let ((ab (open-sound "test.snd")))
	  (if (and (provided? 'xm) (provided? 'snd-debug)) 
	      (XtCallCallbacks (cadr (sound-widgets ab)) XmNactivateCallback (snd-sound-pointer ab)))
	  (if (not (= (header-type ab) mus-nist)) 
	      (snd-display ";save-as nist -> ~A?" (mus-header-type-name (header-type ab))))
	  (if (not (= (mus-sound-header-type "test.snd") mus-nist)) 
	      (snd-display ";saved-as nist -> ~A?" (mus-header-type-name (mus-sound-header-type "test.snd"))))
	  (if (not (= (data-format ab) mus-bint)) 
	      (snd-display ";save-as int -> ~A?" (mus-data-format-name (data-format ab))))
	  (if (not (= (mus-sound-data-format "test.snd") mus-bint)) 
	      (snd-display ";saved-as int -> ~A?" (mus-data-format-name (mus-sound-data-format "test.snd"))))
	  (if (fneq (sample 1000 ab) samp) (snd-display ";nist[1000] = ~A?" (sample 1000 ab)))
	  (close-sound ab))
	(reset-hook! output-comment-hook)
	(add-hook! output-comment-hook
		   (lambda (str) 
		     (string-append str " [written by me]")))
	(save-sound-as "test.snd" ob mus-riff mus-lfloat)
	(reset-hook! output-comment-hook)
	(let ((ab (open-sound "test.snd")))
	  (if (and (provided? 'xm) (provided? 'snd-debug)) 
	      (XtCallCallbacks (cadr (sound-widgets ab)) XmNactivateCallback (snd-sound-pointer ab)))
	  (if (not (= (header-type ab) mus-riff)) 
	      (snd-display ";save-as riff -> ~A?" (mus-header-type-name (header-type ab))))
	  (if (not (= (mus-sound-header-type "test.snd") mus-riff)) 
	      (snd-display ";saved-as riff -> ~A?" (mus-header-type-name (mus-sound-header-type "test.snd"))))
	  (if (not (= (data-format ab) mus-lfloat)) 
	      (snd-display ";save-as float -> ~A?" (mus-data-format-name (data-format ab))))
	  (if (not (= (mus-sound-data-format "test.snd") mus-lfloat)) 
	      (snd-display ";saved-as float -> ~A?" (mus-data-format-name (mus-sound-data-format "test.snd"))))
	  (if (fneq (sample 1000 ab) samp) (snd-display ";riff[1000] = ~A?" (sample 1000 ab)))
	  (if (or (not (string? (comment ab)))
		  (not (string=? (comment ab) 
				 (string-append "written " 
						(strftime "%a %d-%b-%Y %H:%M %Z" (localtime (current-time)))
						" [written by me]"))))
	      (snd-display ";output-comment-hook: ~A~%(~A)" (comment ab) (mus-sound-comment "test.snd")))
	  (close-sound ab))
	(save-sound-as "test.snd" ob mus-aiff mus-b24int)
	(let ((ab (open-sound "test.snd")))
	  (if (and (provided? 'xm) (provided? 'snd-debug)) 
	      (XtCallCallbacks (cadr (sound-widgets ab)) XmNactivateCallback (snd-sound-pointer ab)))
	  (if (not (= (header-type ab) mus-aiff)) 
	      (snd-display ";save-as aiff -> ~A?" (mus-header-type-name (header-type ab))))
	  (if (not (= (mus-sound-header-type "test.snd") mus-aiff)) 
	      (snd-display ";saved-as aiff -> ~A?" (mus-header-type-name (mus-sound-header-type "test.snd"))))
	  (if (not (= (data-format ab) mus-b24int))
	      (snd-display ";save-as 24-bit -> ~A?" (mus-data-format-name (data-format ab))))
	  (if (not (= (mus-sound-data-format "test.snd") mus-b24int))
	      (snd-display ";saved-as 24-bit -> ~A?" (mus-data-format-name (mus-sound-data-format "test.snd"))))
	  (if (fneq (sample 1000 ab) samp) (snd-display ";aiff[1000] = ~A?" (sample 1000 ab)))
	  (close-sound ab))
	(save-sound-as "test.snd" ob mus-ircam mus-mulaw)
	(let ((ab (open-sound "test.snd")))
	  (if (and (provided? 'xm) (provided? 'snd-debug)) 
	      (XtCallCallbacks (cadr (sound-widgets ab)) XmNactivateCallback (snd-sound-pointer ab)))
	  (if (not (= (header-type ab) mus-ircam)) 
	      (snd-display ";save-as ircam -> ~A?" (mus-header-type-name (header-type ab))))
	  (if (not (= (mus-sound-header-type "test.snd") mus-ircam)) 
	      (snd-display ";saved-as ircam -> ~A?" (mus-header-type-name (mus-sound-header-type "test.snd"))))
	  (if (not (= (data-format ab) mus-mulaw))
	      (snd-display ";save-as mulaw -> ~A?" (mus-data-format-name (data-format ab))))
	  (if (not (= (mus-sound-data-format "test.snd") mus-mulaw))
	      (snd-display ";saved-as mulaw -> ~A?" (mus-data-format-name (mus-sound-data-format "test.snd"))))
	  (if (fneq (sample 1000 ab) samp) (snd-display ";ircam[1000] = ~A?" (sample 1000 ab)))
	  (close-sound ab))
	(save-sound-as "test.snd" ob mus-next mus-alaw)
	(let ((ab (open-sound "test.snd")))
	  (if (and (provided? 'xm) (provided? 'snd-debug)) 
	      (XtCallCallbacks (cadr (sound-widgets ab)) XmNactivateCallback (snd-sound-pointer ab)))
	  (if (not (= (header-type ab) mus-next)) 
	      (snd-display ";save-as next -> ~A?" (mus-header-type-name (header-type ab))))
	  (if (not (= (mus-sound-header-type "test.snd") mus-next)) 
	      (snd-display ";saved-as next -> ~A?" (mus-header-type-name (mus-sound-header-type "test.snd"))))
	  (if (not (= (data-format ab) mus-alaw)) 
	      (snd-display ";save-as alaw -> ~A?" (mus-data-format-name (data-format ab))))
	  (if (not (= (mus-sound-data-format "test.snd") mus-alaw)) 
	      (snd-display ";saved-as alaw -> ~A?" (mus-data-format-name (mus-sound-data-format "test.snd"))))
	  (if (fneq (sample 1000 ab) samp) (snd-display ";next (alaw)[1000] = ~A?" (sample 1000 ab)))
	  (close-sound ab))
	(save-sound-as "test.snd" ob mus-next mus-bdouble)
	(let ((ab (open-sound "test.snd")))
	  (if (and (provided? 'xm) (provided? 'snd-debug))
	      (XtCallCallbacks (cadr (sound-widgets ab)) XmNactivateCallback (snd-sound-pointer ab)))
	  (if (not (= (header-type ab) mus-next)) 
	      (snd-display ";save-as dbl next -> ~A?" (mus-header-type-name (header-type ab))))
	  (if (not (= (data-format ab) mus-bdouble)) 
	      (snd-display ";save-as dbl -> ~A?" (mus-data-format-name (data-format ab))))
	  (if (fneq (sample 1000 ab) samp) (snd-display ";next (dbl)[1000] = ~A?" (sample 1000 ab)))
	  (close-sound ab))
	(save-sound-as "test.snd" ob mus-next mus-bshort)
	(let ((ab (open-sound "test.snd")))
	  (if (and (provided? 'xm) (provided? 'snd-debug))
	      (XtCallCallbacks (cadr (sound-widgets ab)) XmNactivateCallback (snd-sound-pointer ab)))
	  (if (not (= (header-type ab) mus-next)) 
	      (snd-display ";save-as next -> ~A?" (mus-header-type-name (header-type ab))))
	  (if (not (= (mus-sound-header-type "test.snd") mus-next)) 
	      (snd-display ";saved-as next -> ~A?" (mus-header-type-name (mus-sound-header-type "test.snd"))))
	  (if (not (= (data-format ab) mus-bshort)) 
	      (snd-display ";save-as short -> ~A?" (mus-data-format-name (data-format ab))))
	  (if (not (= (mus-sound-data-format "test.snd") mus-bshort)) 
	      (snd-display ";saved-as short -> ~A?" (mus-data-format-name (mus-sound-data-format "test.snd"))))
	  (if (fneq (sample 1000 ab) samp) (snd-display ";next (short)[1000] = ~A?" (sample 1000 ab)))
	  (set! (y-bounds ab 0) (list -3.0 3.0))
	  (set! (data-format ab) mus-lshort)
	  (if (not (= ab (find-sound "test.snd"))) (set! ab (find-sound "test.snd"))) ; these set!'s can change the index via update-sound
	  (if (not (= (data-format ab) mus-lshort)) (snd-display ";set data-format: ~A?" (mus-data-format-name (data-format ab))))
	  (if (not (equal? (y-bounds ab 0) (list -3.0 3.0))) (snd-display ";set data format y-bounds: ~A?" (y-bounds ab 0)))
	  (set! (y-bounds ab 0) (list 2.0))
	  (if (not (equal? (y-bounds ab 0) (list -2.0 2.0))) (snd-display ";set data format y-bounds 1: ~A?" (y-bounds ab 0)))
	  (set! (y-bounds ab 0) (list -2.0))
	  (if (not (equal? (y-bounds ab 0) (list -2.0 2.0))) (snd-display ";set data format y-bounds -2: ~A?" (y-bounds ab 0)))
	  (set! (header-type ab) mus-aifc)
	  (if (not (= ab (find-sound "test.snd"))) (set! ab (find-sound "test.snd")))
	  (if (not (= (header-type ab) mus-aifc)) (snd-display ";set header-type: ~A?" (mus-header-type-name (header-type ab))))
	  (set! (channels ab) 3)
	  (if (not (= ab (find-sound "test.snd"))) (set! ab (find-sound "test.snd")))
	  (if (not (= (channels ab) 3)) (snd-display ";set chans: ~A?" (channels ab)))
	  (set! (data-location ab) 1234)
	  (if (not (= ab (find-sound "test.snd"))) (set! ab (find-sound "test.snd")))
	  (if (not (= (data-location ab) 1234)) (snd-display ";set data-location: ~A?" (data-location ab)))
	  (let ((old-size (data-size ab)))
	    (set! (data-size ab) 1234)
	    (if (not (= ab (find-sound "test.snd"))) (set! ab (find-sound "test.snd")))
	    (if (not (= (data-size ab) 1234)) (snd-display ";set data-size: ~A?" (data-size ab)))
	    (set! (data-size ab) old-size))
	  (set! (srate ab) 12345)
	  (if (not (= ab (find-sound "test.snd"))) (set! ab (find-sound "test.snd")))
	  (if (not (= (srate ab) 12345)) (snd-display ";set srate: ~A?" (srate ab)))
	  (close-sound ab))
	(save-sound-as "test.snd" ob mus-next mus-bfloat)
	(let ((ab (open-sound "test.snd")))
	  (if (and (provided? 'xm) (provided? 'snd-debug)) 
	      (XtCallCallbacks (cadr (sound-widgets ab)) XmNactivateCallback (snd-sound-pointer ab)))
	  (if (not (= (header-type ab) mus-next)) 
	      (snd-display ";save-as next -> ~A?" (mus-header-type-name (header-type ab))))
	  (if (not (= (mus-sound-header-type "test.snd") mus-next)) 
	      (snd-display ";saved-as next -> ~A?" (mus-header-type-name (mus-sound-header-type "test.snd"))))
	  (if (not (= (data-format ab) mus-bfloat)) 
	      (snd-display ";save-as float -> ~A?" (mus-data-format-name (data-format ab))))
	  (if (not (= (mus-sound-data-format "test.snd") mus-bfloat)) 
	      (snd-display ";saved-as float -> ~A?" (mus-data-format-name (mus-sound-data-format "test.snd"))))
	  (if (fneq (sample 1000 ab) samp) (snd-display ";next (float)[1000] = ~A?" (sample 1000 ab)))
	  (close-sound ab))
	(save-sound-as "test.snd" ob mus-next mus-bshort)
	(close-sound ob)
	(let ((ab (open-sound "test.snd")))
	  (if (and (provided? 'xm) (provided? 'snd-debug)) 
	      (XtCallCallbacks (cadr (sound-widgets ab)) XmNactivateCallback (snd-sound-pointer ab)))
	  (set! (data-format) mus-lshort)
	  (if (not (= ab (find-sound "test.snd"))) (set! ab (find-sound "test.snd")))
	  (if (not (= (data-format) mus-lshort)) (snd-display ";set data-format: ~A?" (mus-data-format-name (data-format))))
	  (set! (header-type) mus-aifc)
	  (if (not (= ab (find-sound "test.snd"))) (set! ab (find-sound "test.snd")))
	  (if (not (= (header-type) mus-aifc)) (snd-display ";set header-type: ~A?" (mus-header-type-name (header-type))))
	  (set! (channels) 3)
	  (if (not (= ab (find-sound "test.snd"))) (set! ab (find-sound "test.snd")))
	  (if (not (= (channels) 3)) (snd-display ";set chans: ~A?" (channels)))
	  (set! (data-location) 1234)
	  (if (not (= ab (find-sound "test.snd"))) (set! ab (find-sound "test.snd")))
	  (if (not (= (data-location) 1234)) (snd-display ";set data-location: ~A?" (data-location)))
	  (set! (srate) 12345)
	  (if (not (= ab (find-sound "test.snd"))) (set! ab (find-sound "test.snd")))
	  (if (not (= (srate) 12345)) (snd-display ";set srate: ~A?" (srate)))
	  (close-sound ab)))
      (let ((fsnd (string-append sf-dir "t15.aiff")))
	(if (file-exists? fsnd)
	    (let ((ind (open-sound fsnd)))
	      (if (or (fneq (sample 132300 ind 0) .148)
		      (fneq (sample 132300 ind 1) .126))
		  (snd-display ";aifc sowt trouble: ~A ~A" (sample 132300 ind 0) (sample 132300 ind 1)))
	      (close-sound ind))))
      (let ((fsnd (string-append sf-dir "M1F1-float64C-AFsp.aif")))
	(if (file-exists? fsnd)
	    (let ((ind (open-sound fsnd)))
	      (if (or (fneq (sample 8000 ind 0) -0.024)
		      (fneq (sample 8000 ind 1) 0.021))
		  (snd-display ";aifc fl64 trouble: ~A ~A" (sample 8000 ind 0) (sample 8000 ind 1)))
	      (close-sound ind))))

      (for-each (lambda (n vals)
		  (let ((val (catch #t (lambda () 
					 (list (mus-sound-chans n)
					       (mus-sound-srate n)
					       (mus-sound-frames n)))
				    (lambda args (car args)))))
		    (if (not (equal? val vals))
			(snd-display ";~A: ~A ~A" n val vals))))
		(list (string-append sf-dir "bad_chans.snd")
		      (string-append sf-dir "bad_srate.snd")
		      (string-append sf-dir "bad_chans.aifc")
		      (string-append sf-dir "bad_srate.aifc")
		      (string-append sf-dir "bad_length.aifc")
		      (string-append sf-dir "bad_chans.riff")
		      (string-append sf-dir "bad_srate.riff")
		      (string-append sf-dir "bad_chans.nist")
		      (string-append sf-dir "bad_srate.nist")
		      (string-append sf-dir "bad_length.nist"))
		(list (list 0 22050 0)
		      (list 1 0 0)
		      (list 0 22050 0)
		      (list 1 0 0)
		      (list 1 22050 -10)
		      (list 0 22050 0)
		      (list 1 0 0)
		      (list 0 22050 0)
		      (list 1 0 0)
		      (list 1 22050 -10)))
      
      (let ((ind (open-sound "oboe.snd")))
	(add-hook! bad-header-hook (lambda (n) #t))
	(for-each (lambda (n)
		    (begin
		      (catch #t (lambda () 
				  (insert-sound n))
			     (lambda args (car args)))
		      (catch #t (lambda () 
				  (convolve-with n))
			     (lambda args (car args)))
		      (catch #t (lambda () 
				  (mix n))
			     (lambda args (car args)))
		      (catch #t (lambda () 
				  (let ((ind (open-sound n)))
				    (if (and (number? ind)
					     (sound? ind))
					(close-sound ind))))
			     (lambda args (car args)))))
		  (list "/home/bil/sf1/bad_chans.snd"
			"/home/bil/sf1/bad_srate.snd"
			"/home/bil/sf1/bad_chans.aifc"
			"/home/bil/sf1/bad_srate.aifc"
			"/home/bil/sf1/bad_length.aifc"
			"/home/bil/sf1/bad_chans.riff"
			"/home/bil/sf1/bad_srate.riff"
			"/home/bil/sf1/bad_chans.nist"
			"/home/bil/sf1/bad_srate.nist"
			"/home/bil/sf1/bad_length.nist"))
	(close-sound ind))

      (let* ((ob (open-sound "oboe.snd"))
	     (sd (samples->sound-data))
	     (mx (sound-data-maxamp sd)))
	(if (not (= (sound-data-length sd) 50828)) (snd-display ";oboe->sd: len ~A?" (sound-data-length sd)))
	(if (fneq (sound-data-ref sd 0 1000) .0328369) (snd-display ";oboe->sd[1000]: ~A?" (sound-data-ref sd 0 1000)))
	(if (not (= (length mx) 1)) (snd-display ";sound-data-maxamp oboe.snd: ~A?" (sound-data-maxamp sd)))
	(if (not (= (maxamp ob 0) (car mx))) (snd-display ";sound-data-maxamp oboe.snd: ~A ~A?" (sound-data-maxamp sd) (maxamp ob 0)))

	(let ((var (catch #t (lambda () (set! (selected-channel) 1)) (lambda args args))))
	  (if (not (eq? (car var) 'no-such-channel))
	      (snd-display ";set selected-channel bad chan: ~A" var)))
	(let ((var (catch #t (lambda () (set! (selected-channel 123456) 1)) (lambda args args))))
	  (if (not (eq? (car var) 'no-such-sound))
	      (snd-display ";set selected-channel bad snd: ~A" var)))
	(let ((var (catch #t (lambda () (sound-data-ref sd 2 1000)) (lambda args args))))
	  (if (not (eq? (car var) 'out-of-range))
	      (snd-display ";sound-data-ref bad chan: ~A" var)))
	(let ((var (catch #t (lambda () (sound-data-ref sd -1 1000)) (lambda args args))))
	  (if (not (eq? (car var) 'out-of-range))
	      (snd-display ";sound-data-ref bad chan -1: ~A" var)))
	(let ((var (catch #t (lambda () (sound-data-ref sd 0 -1)) (lambda args args))))
	  (if (not (eq? (car var) 'out-of-range))
	      (snd-display ";sound-data-ref bad frame: ~A" var)))
	(let ((var (catch #t (lambda () (sound-data-ref sd 0 10000000)) (lambda args args))))
	  (if (not (eq? (car var) 'out-of-range))
	      (snd-display ";sound-data-ref bad frame high: ~A" var)))
	(let ((var (catch #t (lambda () (sound-data-set! sd 2 1000 1)) (lambda args args))))
	  (if (not (eq? (car var) 'out-of-range))
	      (snd-display ";sound-data-set! bad chan: ~A" var)))
	(let ((var (catch #t (lambda () (sound-data-set! sd 0 10000000 1)) (lambda args args))))
	  (if (not (eq? (car var) 'out-of-range))
	      (snd-display ";sound-data-set! bad frame: ~A" var)))
	(let* ((v (make-vct 3))
	       (var (catch #t (lambda () (vct->sound-data v sd 2)) (lambda args args))))
	  (if (not (eq? (car var) 'out-of-range))
	      (snd-display ";vct->sound-data-set! bad chan: ~A" var)))
	(close-sound ob))
      (if (selected-sound)
	  (snd-display ";selected-sound ~A ~A" (selected-sound) (sounds)))
      
      (let* ((vals (make-vector 32))
	     (err (mus-audio-mixer-read mus-audio-microphone mus-audio-amp 0 vals)))
	(if (= err -1) 
	    (snd-display ";mus-audio-mixer-read?")
	    (begin
	      (mus-audio-save)
	      (let ((old-val (vector-ref vals 0)))
		(vector-set! vals 0 .5)
		(set! err (mus-audio-mixer-write mus-audio-microphone mus-audio-amp 0 vals))
		(if (= err -1) 
		    (snd-display ";mus-audio-mixer-write?"))
		(clear-audio-inputs)
		(mus-audio-restore)
		(mus-audio-mixer-read mus-audio-microphone mus-audio-amp 0 vals)
		(if (fneq (vector-ref vals 0) old-val) (snd-display ";mus-audio-restore: ~A ~A?" old-val (vector-ref vals 0))))))
	(for-each 
	 (lambda (field)
	   (for-each
	    (lambda (device)
	      (if (not (= (mus-audio-mixer-read device field 0 vals) -1))
		  (mus-audio-mixer-write device field 0 vals)))
	    (list mus-audio-default mus-audio-duplex-default mus-audio-line-out mus-audio-line-in mus-audio-microphone
		  mus-audio-speakers mus-audio-dac-out mus-audio-adat-in mus-audio-aes-in mus-audio-digital-in
		  mus-audio-digital-out mus-audio-adat-out mus-audio-aes-out mus-audio-dac-filter mus-audio-mixer
		  mus-audio-line1 mus-audio-line2 mus-audio-line3 mus-audio-aux-input mus-audio-cd mus-audio-aux-output
		  mus-audio-spdif-in mus-audio-spdif-out)))
	 (list mus-audio-amp mus-audio-srate mus-audio-channel mus-audio-format mus-audio-port mus-audio-imix
	       mus-audio-igain mus-audio-reclev mus-audio-pcm mus-audio-pcm2 mus-audio-ogain mus-audio-line
	       mus-audio-synth mus-audio-bass mus-audio-treble mus-audio-direction mus-audio-samples-per-channel))
	)

      (if (file-exists? (string-append (or sf-dir "") "a.sf2"))
	  (let ((fil (open-sound (string-append (or sf-dir "") "a.sf2"))))
	    (if fil
		(let ((loops (and fil (soundfont-info))))
		  (if (or (null? loops)
			  (not (= (caddar loops) 65390))
			  (not (= (cadadr loops) 65490)))
		      (snd-display ";soundfont-info: ~A?" loops))
		  (close-sound fil)))))

      (if (file-exists? "fmv5.snd") (delete-file "fmv5.snd"))
      (let ((fd (mus-sound-open-output "fmv5.snd" 22050 1 mus-bshort mus-aiff "no comment"))
	    (sdata (make-sound-data 1 100)))
	(do ((i 0 (1+ i)))
	    ((= i 100))
	  (sound-data-set! sdata 0 i (* i .01)))
	(if (not (string=? "#<sound-data: 1 chan, 100 frames>" (format #f "~A" sdata)))
	    (snd-display ";print sound-data: ~A?" (format #f "~A" sdata)))
	(let ((edat sdata)
	      (edat1 (make-sound-data 1 100))
	      (edat2 (make-sound-data 2 100)))
	  (if (not (eq? sdata edat)) (snd-display ";sound-data not eq? ~A ~A" sdata edat))
	  (if (not (equal? sdata edat)) (snd-display ";sound-data not equal? ~A ~A" sdata edat))
	  (if (equal? sdata edat1) (snd-display ";sound-data 1 equal? ~A ~A" sdata edat1))
	  (if (equal? edat2 edat1) (snd-display ";sound-data 2 equal? ~A ~A" edat2 edat1))
	  (do ((i 0 (1+ i)))
	      ((= i 100))
	    (set! (sound-data-ref edat1 0 i) (sound-data-ref sdata 0 i)))
	  (if (not (equal? sdata edat1)) (snd-display ";sound-data 3 not equal? ~A ~A" sdata edat1)))
	(let ((v0 (make-vct 100))
	      (v1 (make-vct 3)))
	  (sound-data->vct sdata 0 v0) 
	  (if (fneq (vct-ref v0 10) .1) (snd-display ";sound-data->vct: ~A?" v0))
	  (sound-data->vct sdata 0 v1) 
	  (if (fneq (vct-ref v1 1) .01) (snd-display ";sound-data->(small)vct: ~A?" v1))
	  (vct->sound-data v0 sdata 0) 
	  (if (fneq (sound-data-ref sdata 0 10) .1) (snd-display ";vct->sound-data: ~A?" (sound-data-ref sdata 0 10)))
	  (let ((var (catch #t (lambda () (sound-data->vct sdata 2 v0)) (lambda args args))))
	    (if (not (eq? (car var) 'out-of-range))
		(snd-display ";sound-data->vct bad chan: ~A" var)))
	  (let ((var (catch #t (lambda () (mus-audio-write 1 (make-sound-data 3 3) 123)) (lambda args args))))
	    (if (not (eq? (car var) 'out-of-range))
		(snd-display ";mus-audio-write bad frames: ~A" var))))

	(let ((v0 (make-vct 10))
	      (sdata2 (make-sound-data 2 10)))
	  (do ((i 0 (1+ i)))
	      ((= i 10))
	    (sound-data-set! sdata2 0 i 0.1)
	    (sound-data-set! sdata2 1 i 0.2))
	  (sound-data->vct sdata2 0 v0) 
	  (if (fneq (vct-ref v0 1) .1) (snd-display ";sound-data->vct[1]: ~A?" v0))
	  (sound-data->vct sdata2 1 v0) 
	  (if (fneq (vct-ref v0 1) .2) (snd-display ";sound-data->vct[2]: ~A?" v0))
	  (vct->sound-data v0 sdata2 0) 
	  (if (fneq (sound-data-ref sdata2 0 1) .2) 
	      (snd-display ";vct->sound-data[2]: ~A?" (sound-data-ref sdata2 0 1)))
	  (vct-fill! v0 .3)
	  (vct->sound-data v0 sdata2 1) 
	  (if (fneq (sound-data-ref sdata2 1 1) .3) 
	      (snd-display ";vct->sound-data[3]: ~A?" (sound-data-ref sdata2 1 1))))
	(mus-sound-write fd 0 99 1 sdata)
	(mus-sound-close-output fd 200)
	(set! fd (mus-sound-reopen-output "fmv5.snd" 1 mus-bshort mus-aiff (mus-sound-data-location "fmv5.snd")))
	(mus-sound-close-output fd 200)
	(set! fd (mus-sound-open-input "fmv5.snd"))
	(mus-sound-read fd 0 99 1 sdata)
	(if (fneq (sound-data-ref sdata 0 10) .1) (snd-display ";mus-sound-write: ~A?" (sound-data-ref sdata 0 10)))
	(let ((pos (mus-sound-seek-frame fd 20)))
	  (if (not (= pos (ftell fd))) 
	      (snd-display ";1 mus-sound-seek-frame: ~A ~A?" pos (ftell fd)))
	  (if (not (= pos (frame->byte "fmv5.snd" 20)))
	      (snd-display ";2 mus-sound-seek-frame(2): ~A ~A?" pos (frame->byte "fmv5.snd" 20))))
	(mus-sound-read fd 0 10 1 sdata)
	(if (fneq (sound-data-ref sdata 0 0) .2) (snd-display ";2 mus-sound-seek: ~A?" (sound-data-ref sdata 0 0)))
	(mus-sound-close-input fd))

      (let ((var (catch #t (lambda () (mus-sound-open-output "fmv.snd" 22050 -1 mus-bshort mus-aiff "no comment")) (lambda args args))))
	(if (not (eq? (car var) 'out-of-range))
	    (snd-display ";mus-sound-open-output bad chans: ~A" var)))
      (let ((var (catch #t (lambda () (mus-sound-open-output "fmv.snd" 22050 1 -1 mus-aiff "no comment")) (lambda args args))))
	(if (not (eq? (car var) 'out-of-range))
	    (snd-display ";mus-sound-open-output bad format: ~A" var)))
      (let ((var (catch #t (lambda () (mus-sound-open-output "fmv.snd" 22050 1 mus-bshort -1 "no comment")) (lambda args args))))
	(if (not (eq? (car var) 'out-of-range))
	    (snd-display ";mus-sound-open-output bad type: ~A" var)))

      (let ((var (catch #t (lambda () (mus-sound-reopen-output "fmv.snd" -1 mus-bshort mus-aiff #f)) (lambda args args))))
	(if (not (eq? (car var) 'out-of-range))
	    (snd-display ";mus-sound-reopen-output bad chans: ~A" var)))
      (let ((var (catch #t (lambda () (mus-sound-reopen-output "fmv.snd" 1 -1 mus-aiff #f)) (lambda args args))))
	(if (not (eq? (car var) 'out-of-range))
	    (snd-display ";mus-sound-reopen-output bad format: ~A" var)))
      (let ((var (catch #t (lambda () (mus-sound-reopen-output "fmv.snd" 1 mus-bshort -1 #f)) (lambda args args))))
	(if (not (eq? (car var) 'out-of-range))
	    (snd-display ";mus-sound-reopen-output bad type: ~A" var)))

      (for-each
       (lambda (proc name)
	 (let ((var (catch #t (lambda () (proc mus-audio-default 22050 -1 mus-lshort 512)) (lambda args args))))
	   (if (not (eq? (car var) 'out-of-range))
	       (snd-display ";~A bad chans: ~A" name var)))
	 (let ((var (catch #t (lambda () (proc mus-audio-default 22050 1 -1 512)) (lambda args args))))
	   (if (not (eq? (car var) 'out-of-range))
	       (snd-display ";~A bad format: ~A" name var)))
	 (let ((var (catch #t (lambda () (proc -1 22050 1 mus-lshort 512)) (lambda args args))))
	   (if (not (eq? (car var) 'out-of-range))
	       (snd-display ";~A bad device: ~A" name var)))
	 (let ((var (catch #t (lambda () (proc mus-audio-default -22050 1 mus-lshort 512)) (lambda args args))))
	   (if (not (eq? (car var) 'out-of-range))
	       (snd-display ";~A bad srate: ~A" name var)))
	 (let ((var (catch #t (lambda () (proc mus-audio-default 22050 1 mus-lshort -512)) (lambda args args))))
	   (if (not (eq? (car var) 'out-of-range))
	       (snd-display ";~A bad size: ~A" name var))))
       (list mus-audio-open-output mus-audio-open-input)
       (list "mus-audio-open-output" "mus-audio-open-input"))

      (for-each
       (lambda (file)
	 (let ((tag (catch #t
			   (lambda () (open-sound (string-append sf-dir file)))
			   (lambda args args))))
	   (if (not (eq? (car tag) 'mus-error))
	       (snd-display ";open-sound ~A: ~A" file tag))))
       (list "trunc.snd" "trunc.aiff" "trunc.wav" "trunc.sf" "trunc.voc" "trunc.nist" "bad.wav" 
	     "empty.snd" "trunc1.aiff" "badform.aiff"))

      (let ((vals (make-vector 32)))
	(for-each 
	 (lambda (proc name)
	   (let ((var (catch #t (lambda () (proc -1 mus-audio-amp 0 vals)) (lambda args args))))
	     (if (not (eq? (car var) 'out-of-range))
		 (snd-display ";~A bad device: ~A" name var)))
	   (let ((var (catch #t (lambda () (proc mus-audio-microphone -1 0 vals)) (lambda args args))))
	     (if (not (eq? (car var) 'out-of-range))
		 (snd-display ";~A bad field: ~A" name var))))
	 (list mus-audio-mixer-read mus-audio-mixer-write)
	 (list "mus-audio-mixer-read" "mus-audio-mixer-write")))
      (mus-audio-mixer-write mus-audio-microphone mus-audio-amp 0 (make-vector 0))

      (let* ((ind (open-sound (string-append "/usr/local/" (getcwd) "/2.snd"))) ; check the "//" path reset case
	     (sd1 (samples->sound-data 12000 10 ind 0))
	     (vc1 (sound-data->vct sd1))
	     (vc2 (samples->vct 12000 10 ind 0))
	     (sd2 (vct->sound-data vc2)))
	(if (not (equal? vc1 vc2)) (snd-display ";samples->sound-data->vct: ~A ~A" vc1 vc2))
	(if (not (equal? sd1 sd2)) (snd-display ";sound-data->vct->sound-data: ~A ~A" sd1 sd2))
	(scale-by 2.0 ind 0)
	(set! sd1 (samples->sound-data 12000 10 ind 0 #f 0))
	(set! vc1 (sound-data->vct sd1))
	(set! vc2 (samples->vct 12000 10 ind 0 #f 0))
	(set! sd2 (vct->sound-data vc2))
	(if (not (equal? vc1 vc2)) (snd-display ";edpos samples->sound-data->vct: ~A ~A" vc1 vc2))
	(if (not (equal? sd1 sd2)) (snd-display ";edpos sound-data->vct->sound-data: ~A ~A" sd1 sd2))
	(set! sd1 (samples->sound-data 12000 10 ind 1))
	(set! vc1 (sound-data->vct sd1))
	(set! vc2 (samples->vct 12000 10 ind 1))
	(set! sd2 (vct->sound-data vc2))
	(if (not (equal? vc1 vc2)) (snd-display ";1 samples->sound-data->vct: ~A ~A" vc1 vc2))
	(if (not (equal? sd1 sd2)) (snd-display ";1 sound-data->vct->sound-data: ~A ~A" sd1 sd2))
	(scale-by 2.0 ind 1)
	(set! sd1 (samples->sound-data 12000 10 ind 1))
	(set! vc1 (sound-data->vct sd1))
	(set! vc2 (samples->vct 12000 10 ind 1))
	(set! sd2 (vct->sound-data vc2))
	(if (not (equal? vc1 vc2)) (snd-display ";1 scaled samples->sound-data->vct: ~A ~A" vc1 vc2))
	(if (not (equal? sd1 sd2)) (snd-display ";1 scaled sound-data->vct->sound-data: ~A ~A" sd1 sd2))
	(close-sound ind))

      (for-each 
       (lambda (chans)
	 (for-each 
	  (lambda (df-ht)
	    (let ((samps (if (= chans 1) 100000
			     (if (= chans 2) 50000
				 1000))))
	      (if (file-exists? "fmv5.snd") (delete-file "fmv5.snd"))
	      (let ((fd (mus-sound-open-output "fmv5.snd" 22050 chans (car df-ht) (cadr df-ht) "no comment"))
		    (sdata (make-sound-data chans samps))
		    (ndata (make-sound-data chans samps)))
		(do ((k 0 (1+ k)))
		    ((= k chans))
		  (do ((i 0 (1+ i)))
		      ((= i samps))
		    (sound-data-set! sdata k i (- (random 2.0) 1.0))))
		(mus-sound-write fd 0 (- samps 1) chans sdata)
		(mus-sound-close-output fd (* samps chans (mus-data-format-bytes-per-sample (car df-ht))))
		(set! fd (mus-sound-open-input "fmv5.snd"))
		(mus-sound-read fd 0 (- samps 1) chans ndata)
		(let ((pos (mus-sound-seek-frame fd 100)))
		  (if (not (= pos (ftell fd))) 
		      (snd-display ";mus-sound-seek-frame[~A]: chans ~A ~A (~A ~A)?" 
				   pos chans (ftell fd) (mus-header-type-name (cadr df-ht)) (mus-data-format-name (car df-ht))))
		  (if (not (= pos (frame->byte "fmv5.snd" 100))) 
		      (snd-display ";mus-sound-seek-frame(100): ~A ~A (~A ~A ~A)?" 
				   pos (frame->byte "fmv5.snd" 100) chans (mus-header-type-name (cadr df-ht)) (mus-data-format-name (car df-ht)))))
		(mus-sound-close-input fd)
		(catch #t
		       (lambda ()
			 (do ((k 0 (1+ k)))
			     ((= k chans))
			   (do ((i 0 (1+ i)))
			       ((= i samps))
			     (if (fneq (sound-data-ref sdata k i) (sound-data-ref ndata k i))
				 (throw 'read-write-error
					(car df-ht) (mus-data-format-name (car df-ht))
					(cadr df-ht) (mus-header-type-name (cadr df-ht))
					i k
					(sound-data-ref sdata k i) (sound-data-ref ndata k i))))))
		       (lambda args (begin (snd-display ";~A" args) (car args)))))))
	  (list (list mus-bshort mus-next)
		(list mus-bfloat mus-aifc)
		(list mus-lshort mus-aifc)
		(list mus-lfloat mus-riff)
		(list mus-lshort mus-nist)
		(list mus-bint mus-aiff)
		(list mus-lint mus-next)
		(list mus-bintn mus-next)
		(list mus-lintn mus-next)
		(list mus-b24int mus-aifc)
		(list mus-l24int mus-riff)
		(list mus-bfloat mus-ircam)
		(list mus-bfloat-unscaled mus-next)
		(list mus-lfloat-unscaled mus-next)
		(list mus-bdouble-unscaled mus-next)
		(list mus-ldouble-unscaled mus-next)
		(list mus-bdouble mus-next)
		(list mus-ldouble mus-next)
		(list mus-ulshort mus-next)
		(list mus-ubshort mus-next))))
       (list 1 2 4 8))
      
      (let ((ind (open-sound "oboe.snd")))
	(show-input-1)
	(close-sound ind))

      (let ((fd (mus-sound-open-output "fmv.snd" 22050 1 mus-bshort mus-next "no comment"))
	    (sdata (make-sound-data 1 10)))
	(define (sound-data-channel->list sd chan)
	  (let ((ls '()))
	    (do ((i (1- (sound-data-length sd)) (1- i)))
		((< i 0) ls)
	      (set! ls (cons (sound-data-ref sd chan i) ls)))))
	(define (sound-data->list sd)
	  (let ((lst '()))
	    (do ((i (1- (sound-data-chans sd)) (1- i)))
		((< i 0) lst)
	      (set! lst (cons (sound-data-channel->list sd i) lst)))))
	(sound-data-set! sdata 0 1 .1)
	(mus-sound-write fd 0 9 1 sdata)
	(mus-sound-close-output fd 20)
	(set! fd (mus-sound-open-input "fmv.snd"))
	(mus-sound-read fd 0 9 1 sdata)
	(if (or (fneq (sound-data-ref sdata 0 0) 0.0)
		(fneq (sound-data-ref sdata 0 1) 0.1)
		(fneq (sound-data-ref sdata 0 2) 0.0)
		(fneq (sound-data-ref sdata 0 6) 0.0))
	    (snd-display ";read/write: ~A?" (sound-data->list sdata)))
	(mus-sound-close-input fd)  
	(set! fd (mus-sound-reopen-output "fmv.snd" 1 mus-bshort mus-next (mus-sound-data-location "fmv.snd")))
	(mus-sound-seek-frame fd 0)
	(sound-data-set! sdata 0 2 .1)
	(sound-data-set! sdata 0 3 .1)
	(mus-sound-write fd 0 9 1 sdata)
	(mus-sound-close-output fd 20)
	(set! fd (mus-sound-open-input "fmv.snd"))
	(mus-sound-read fd 0 9 1 sdata)
	(if (or (fneq (sound-data-ref sdata 0 0) 0.0)
		(fneq (sound-data-ref sdata 0 1) 0.1)
		(fneq (sound-data-ref sdata 0 2) 0.1)
		(fneq (sound-data-ref sdata 0 3) 0.1)
		(fneq (sound-data-ref sdata 0 6) 0.0))
	    (snd-display ";re-read/write: ~A?" (sound-data->list sdata)))
	(mus-sound-close-input fd)
	
	;; check data-clipped choices
	(let ((ind (view-sound "oboe.snd")))
	  (set! (data-clipped) #f)
	  (map-channel (lambda (y) (* y 10.0)) 0 (frames) ind 0)
	  (save-sound-as "test.snd" ind mus-next mus-bfloat)
	  (undo 1 ind 0)
	  (let ((ind1 (open-sound "test.snd")))
	    (if (fneq (maxamp ind1 0) (* 10 (maxamp ind 0)))
		(snd-display ";clipping 0: ~A ~A" (maxamp ind1 0) (maxamp ind 0)))
	    (close-sound ind1))
	  (delete-file "test.snd")
	  (set! (data-clipped) #t)
	  (map-channel (lambda (y) (* y 10.0)) 0 (frames) ind 0)
	  (save-sound-as "test.snd" ind mus-next mus-bfloat)
	  (undo 1 ind 0)
	  (let ((ind1 (open-sound "test.snd")))
	    (if (fneq (maxamp ind1 0) 1.0)
		(snd-display ";clipping 1: ~A ~A" (maxamp ind1 0) (maxamp ind 0)))
	    (close-sound ind1))
	  (delete-file "test.snd")
	  (set! (data-clipped) #f)
	  (let ((mx (maxamp ind)))
	    (map-channel (lambda (y) (+ y (- 1.001 mx))) 0 (frames) ind 0)
	    (save-sound-as "test.snd" ind mus-next mus-bshort)
	    (let* ((ind1 (open-sound "test.snd"))
		   (baddy (scan-channel (lambda (y) (< y 0.0)))))
	      (if (not (list-p baddy))
		  (snd-display ";clipping 2: ~A" baddy))
	      (close-sound ind1))
	    (delete-file "test.snd")
	    (set! (data-clipped) #t)
	    (save-sound-as "test.snd" ind mus-next mus-bshort)
	    (let* ((ind1 (open-sound "test.snd"))
		   (baddy (scan-channel (lambda (y) (< y 0.0)))))
	      (if (list-p baddy)
		  (snd-display ";clipping 3: ~A" baddy))
	      (close-sound ind1))
	    (delete-file "test.snd")
	    (set! (data-clipped) #f))
	  (close-sound ind))

	(delete-file "fmv.snd")
	(let ((com "this is a comment which we'll repeat enough times to trigger an internal loop"))
	  (do ((i 0 (1+ i)))
	      ((= i 3))
	    (set! com (string-append com com)))
	  (set! fd (mus-sound-open-output "fmv.snd" 22050 4 mus-lshort mus-riff com)))
	(set! sdata (make-sound-data 4 10))
	(do ((i 0 (1+ i)))
	    ((= i 4))
	  (sound-data-set! sdata i 1 .1))
	(mus-sound-write fd 0 9 4 sdata)
	(mus-sound-close-output fd 80)
	(set! fd (mus-sound-open-input "fmv.snd"))
	(mus-sound-read fd 0 9 4 sdata)
	(do ((i 0 (1+ i)))
	    ((= i 4))
	  (if (or (fneq (sound-data-ref sdata i 0) 0.0)
		  (fneq (sound-data-ref sdata i 1) 0.1)
		  (fneq (sound-data-ref sdata i 2) 0.0)
		  (fneq (sound-data-ref sdata i 6) 0.0))
	      (snd-display ";read/write[~A]: ~A?" i (sound-data-channel->list sdata i))))
	(mus-sound-close-input fd)  
	(set! fd (mus-sound-reopen-output "fmv.snd" 4 mus-lshort mus-riff (mus-sound-data-location "fmv.snd")))
	(mus-sound-seek-frame fd 0)
	(do ((i 0 (1+ i)))
	    ((= i 4))
	  (sound-data-set! sdata i 2 .1)
	  (sound-data-set! sdata i 3 .1))
	(mus-sound-write fd 0 9 4 sdata)
	(mus-sound-close-output fd 80)
	(set! fd (mus-sound-open-input "fmv.snd"))
	(mus-sound-read fd 0 9 4 sdata)
	(do ((i 0 (1+ i)))
	    ((= i 4))
	  (if (or (fneq (sound-data-ref sdata i 0) 0.0)
		  (fneq (sound-data-ref sdata i 1) 0.1)
		  (fneq (sound-data-ref sdata i 2) 0.1)
		  (fneq (sound-data-ref sdata i 3) 0.1)
		  (fneq (sound-data-ref sdata i 6) 0.0))
	      (snd-display ";re-read/write[~A]: ~A?" i (sound-data-channel->list sdata i))))
	(mus-sound-close-input fd))

      (if (file-exists? (string-append sf-dir "32bit.sf"))
	  (let ((ind (open-sound (string-append sf-dir "32bit.sf"))))
	    (if (fneq (maxamp ind 0) .228) (snd-display ";32bit max: ~A" (maxamp ind 0)))
	    (close-sound ind)))

      (let ((test-data (lambda (file beg dur data)
			 (catch #t
				(lambda ()
				  (let* ((ind (open-sound file))
					 (ndata (samples->vct beg dur ind 0)))
				    (if (not (vequal data ndata))
					(snd-display ";~A: ~A != ~A" file data ndata))
				    (close-sound ind)))
				(lambda args args)))))
	(test-data (string-append sf-dir "next-dbl.snd") 10 10 (vct 0.475 0.491 0.499 0.499 0.492 0.476 0.453 0.423 0.387 0.344))
	(test-data (string-append sf-dir "oboe.ldbl") 1000 10 (vct 0.033 0.035 0.034 0.031 0.026 0.020 0.013 0.009 0.005 0.004))

	(test-data (string-append sf-dir "next-flt.snd") 10 10 (vct 0.475 0.491 0.499 0.499 0.492 0.476 0.453 0.423 0.387 0.344))
	(test-data (string-append sf-dir "clbonef.wav") 1000 10 (vct 0.111 0.101 0.070 0.032 -0.014 -0.060 -0.085 -0.108 -0.129 -0.152))

	(test-data (string-append sf-dir "next-8.snd") 10 10 (vct 0.898 0.945 0.977 0.992 0.992 0.977 0.945 0.906 0.844 0.773))
	(test-data (string-append sf-dir "o2_u8.wave") 1000 10 (vct -0.164 -0.219 -0.258 -0.242 -0.180 -0.102 -0.047 0.000 0.039 0.055))

	(test-data (string-append sf-dir "next-16.snd") 1000 10 (vct -0.026 -0.022 -0.024 -0.030 -0.041 -0.048 -0.050 -0.055 -0.048 -0.033))
	(test-data (string-append sf-dir "o2.wave") 1000 10 (vct -0.160 -0.216 -0.254 -0.239 -0.175 -0.102 -0.042 0.005 0.041 0.059))

	(test-data (string-append sf-dir "o2_18bit.aiff") 1000 10 (vct -0.160 -0.216 -0.254 -0.239 -0.175 -0.102 -0.042 0.005 0.041 0.059))
	(test-data (string-append sf-dir "o2_12bit.aiff") 1000 10 (vct -0.160 -0.216 -0.254 -0.239 -0.175 -0.102 -0.042 0.005 0.041 0.059))

	(test-data (string-append sf-dir "next24.snd") 1000 10 (vct -0.160 -0.216 -0.254 -0.239 -0.175 -0.102 -0.042 0.005 0.041 0.059))
	(test-data (string-append sf-dir "mono24.wav") 1000 10 (vct 0.005 0.010 0.016 0.008 -0.007 -0.018 -0.025 -0.021 -0.005 0.001))

	(test-data (string-append sf-dir "o2_711u.wave") 1000 10 (vct -0.164 -0.219 -0.254 -0.242 -0.172 -0.103 -0.042 0.005 0.042 0.060))
	(test-data (string-append sf-dir "alaw.wav") 1000 10 (vct -0.024 -0.048 -0.024 0.000 0.008 0.008 0.000 -0.040 -0.064 -0.024))

	;; it is not a bug if these don't match if MUS_SAMPLE_BITS is not 24
	(test-data (string-append sf-dir "b32.pvf") 1000 10 (vct -0.160 -0.216 -0.254 -0.239 -0.175 -0.102 -0.042 0.005 0.041 0.059))
	(test-data (string-append sf-dir "b32.wave") 1000 10 (vct -0.160 -0.216 -0.254 -0.239 -0.175 -0.102 -0.042 0.005 0.041 0.059))
	(test-data (string-append sf-dir "b32.snd") 1000 10 (vct -0.160 -0.216 -0.254 -0.239 -0.175 -0.102 -0.042 0.005 0.041 0.059))
	(test-data (string-append sf-dir "32bit.sf") 1000 10 (vct 0.016 0.014 0.013 0.011 0.010 0.010 0.010 0.010 0.012 0.014))

	(test-data (string-append sf-dir "nist-shortpack.wav") 10000 10 (vct 0.021 0.018 0.014 0.009 0.004 -0.001 -0.004 -0.006 -0.007 -0.008))
	(test-data (string-append sf-dir "wood.sds") 1000 10 (vct -0.160 -0.216 -0.254 -0.239 -0.175 -0.102 -0.042 0.005 0.041 0.059))
	(test-data (string-append sf-dir "oboe.g721") 1000 10 (vct -0.037 -0.040 -0.040 -0.041 -0.042 -0.038 -0.028 -0.015 -0.005 0.002))
	(test-data (string-append sf-dir "oboe.g723_40") 1000 10 (vct -0.037 -0.040 -0.041 -0.041 -0.041 -0.038 -0.028 -0.015 -0.005 0.003))
	(test-data (string-append sf-dir "mus10.snd") 10000 10 (vct 0.004 0.001 0.005 0.009 0.017 0.015 0.008 0.011 0.009 0.012))
	(test-data (string-append sf-dir "ieee-text-16.snd") 1000 10 (vct -0.052 -0.056 -0.069 -0.077 -0.065 -0.049 -0.054 -0.062 -0.066 -0.074))
	(test-data (string-append sf-dir "hcom-16.snd") 10000 10 (vct 0.000 0.000 0.000 0.008 0.000 -0.016 -0.016 -0.016 -0.008 0.000))
	(test-data (string-append sf-dir "ce-c3.w02") 1000 10 (vct 0.581 0.598 0.596 0.577 0.552 0.530 0.508 0.479 0.449 0.425))
	(test-data (string-append sf-dir "nasahal.avi") 20000 10 (vct 0.464 0.189 -0.458 -0.150 0.593 0.439 -0.208 -0.130 0.460 0.429))
	(test-data (string-append sf-dir "oki.wav") 100 10 (vct 0.396 0.564 0.677 0.779 0.761 0.540 0.209 -0.100 -0.301 -0.265))

	(test-data (string-append sf-dir "trumps22.adp") 5000 10 (vct 0.267 0.278 0.309 0.360 0.383 0.414 0.464 0.475 0.486 0.495))
	)

      (let ((errs (list "no error" "no frequency method" "no phase method" "null gen arg to method" "no length method"
			"no free method" "no describe method" "no data method" "no scaler method"
			"memory allocation failed" "unstable two pole error"
			"can't open file" "no sample input" "no sample output"
			"no such channel" "no file name provided" "no location method" "no channel method"
			"no such fft window" "unsupported data format" "header read failed"
			"unsupported header type" "file descriptors not initialized" "not a sound file" "file closed" "write error"
			"bogus free" "buffer overflow" "buffer underflow" "file overflow"
			"header write failed" "can't open temp file" "interrupted" "bad envelope"
			"audio channels not available" "audio srate not available" "audio format not available"
			"no audio input available" "audio configuration not available" 
			"no audio lines available" "audio write error" "audio size not available" "audio device not available"
			"can't close audio" "can't open audio" "audio read error" "audio amp not available"
			"can't write audio" "can't read audio" "no audio read permission" 
			"can't close file" "arg out of range"
			"midi open error" "midi read error" "midi write error" "midi close error" "midi init error" "midi misc error"
			"no channels method" "no hop method" "no width method" "no file-name method" "no ramp method" "no run method"
			"no increment method" "no b2 method" "no inspect method" "no offset method"
			)))
	(call-with-current-continuation
	 (lambda (quit)
	   (do ((i 0 (1+ i)))
	       ((= i 67))
	     (if (not (string=? (list-ref errs i) (mus-error-to-string i)))
		 (begin
		   (snd-display ";mus-error-to-string ~D: ~A ~A" i (list-ref errs i) (mus-error-to-string i))
		   (quit #f)))))))

      (let ((cur-srate (mus-sound-srate "oboe.snd"))
	    (cur-chans (mus-sound-chans "oboe.snd"))
	    (cur-format (mus-sound-data-format "oboe.snd"))
	    (cur-type (mus-sound-header-type "oboe.snd"))
	    (cur-loc (mus-sound-data-location "oboe.snd"))
	    (cur-samps (mus-sound-samples "oboe.snd")))
	(set! (mus-sound-srate "oboe.snd") (* cur-srate 2))
	(if (not (= (* cur-srate 2) (mus-sound-srate "oboe.snd"))) 
	    (snd-display ";set mus-sound-srate: ~A -> ~A" cur-srate (mus-sound-srate "oboe.snd")))
	(set! (mus-sound-samples "oboe.snd") (* cur-samps 2))
	(if (not (= (* cur-samps 2) (mus-sound-samples "oboe.snd"))) 
	    (snd-display ";set mus-sound-samples: ~A -> ~A" cur-samps (mus-sound-samples "oboe.snd")))
	(set! (mus-sound-chans "oboe.snd") (* cur-chans 2))
	(if (not (= (* cur-chans 2) (mus-sound-chans "oboe.snd"))) 
	    (snd-display ";set mus-sound-chans: ~A -> ~A" cur-chans (mus-sound-chans "oboe.snd")))
	(set! (mus-sound-data-location "oboe.snd") (* cur-loc 2))
	(if (not (= (* cur-loc 2) (mus-sound-data-location "oboe.snd"))) 
	    (snd-display ";set mus-sound-data-location: ~A -> ~A" cur-loc (mus-sound-data-location "oboe.snd")))
	(set! (mus-sound-header-type "oboe.snd") mus-nist)
	(if (not (= mus-nist (mus-sound-header-type "oboe.snd"))) 
	    (snd-display ";set mus-sound-header-type: ~A -> ~A" cur-type (mus-sound-header-type "oboe.snd")))
	(set! (mus-sound-data-format "oboe.snd") mus-lintn)
	(if (not (= mus-lintn (mus-sound-data-format "oboe.snd"))) 
	    (snd-display ";set mus-sound-data-format: ~A -> ~A" cur-format (mus-sound-data-format "oboe.snd")))
	(set! (mus-sound-srate "oboe.snd") cur-srate)
	(set! (mus-sound-samples "oboe.snd") cur-samps)
	(set! (mus-sound-chans "oboe.snd") cur-chans)
	(set! (mus-sound-data-location "oboe.snd") cur-loc)
	(set! (mus-sound-header-type "oboe.snd") cur-type)
	(set! (mus-sound-data-format "oboe.snd") cur-format))

      (let ((ind (mus-sound-open-input "oboe.snd")))
	(set! (mus-file-data-clipped ind) #t)
	(if (not (mus-file-data-clipped ind)) (snd-display ";file data-clipped?"))
	(set! (mus-file-prescaler ind) 2.0)
	(if (fneq (mus-file-prescaler ind) 2.0) (snd-display ";prescaler: ~A" (mus-file-prescaler ind)))
	(mus-sound-close-input ind))
	
      (if (and with-big-file (file-exists? "/zap/sounds/bigger.snd"))
	  (begin
	    (if (not (= (mus-sound-samples "/zap/sounds/bigger.snd") 3175200000))
		(snd-display ";bigger samples: ~A" (mus-sound-samples "/zap/sounds/bigger.snd")))
	    (if (not (= (mus-sound-frames "/zap/sounds/bigger.snd") 3175200000))
		(snd-display ";bigger frames: ~A" (mus-sound-frames "/zap/sounds/bigger.snd")))
	    (if (not (= (mus-sound-length "/zap/sounds/bigger.snd") 6350400044))
		(snd-display ";bigger bytes: ~A" (mus-sound-length "/zap/sounds/bigger.snd")))
	    (if (fneq (mus-sound-duration "/zap/sounds/bigger.snd") 72000.0)
		(snd-display ";bigger dur: ~A" (mus-sound-duration "/zap/sounds/bigger.snd")))
	    (let ((ind (open-sound "/zap/sounds/bigger.snd")))
	      (if (not (= (frames ind) 3175200000)) (snd-display ";bigger frames: ~A" (frames ind)))
	      (if (not (= (frames ind 0 0) 3175200000)) (snd-display ";bigger edpos-frames: ~A" (frames ind)))
	      (let ((m1 (add-mark (* 44100 50000) ind)))
		(if (not (= (mark-sample m1) (* 44100 50000))) (snd-display ";bigger mark at: ~A" (mark-sample m1)))
		(set! (mark-sample m1) (* 44100 66000))
		(if (not (= (mark-sample m1) (* 44100 66000))) (snd-display ";bigger mark to: ~A" (mark-sample m1))))
	      (let ((mx (mix-sound "oboe.snd" (* 44100 60000))))
		(if (not (= (mix-position mx) (* 44100 60000))) (snd-display ";bigger mix at: ~A" (mix-position mx)))
		(set! (mix-position mx) (* 44100 61000))
		(if (not (= (mix-position mx) (* 44100 61000))) (snd-display ";bigger mix to: ~A" (mix-position mx)))
		(undo 2))
	      (let ((old-select (selection-creates-region)))
		(set! (selection-creates-region) #f)
		(select-all ind)
		(if (not (= (selection-frames) (frames ind))) (snd-display ";bigger select all: ~A ~A" (selection-frames) (frames)))
		(set! (selection-position) (* 44100 50000))
		(if (not (= (selection-position) (* 44100 50000))) (snd-display ";bigger select pos: ~A" (selection-position)))
		(set! (selection-position) 0)
		(set! (selection-frames) (* 44100 65000))
		(if (not (= (selection-frames) (* 44100 65000))) (snd-display ";bigger select len: ~A" (selection-frames)))
		(set! (selection-creates-region) old-select))
	      (set! (cursor ind) (* 44100 50000))
	      (if (not (= (cursor ind) (* 44100 50000))) (snd-display ";bigger cursor: ~A" (cursor ind)))
	      (let ((val (backward-sample)))
		(if (not (= (cursor ind) (1- (* 44100 50000)))) (snd-display ";backup bigger cursor: ~A" (cursor ind)))
		(if (not (= val (1- (* 44100 50000)))) (snd-display ";backup rtn bigger cursor: ~A" (cursor ind))))
	      (let ((val (forward-sample)))
		(if (not (= (cursor ind) (* 44100 50000))) (snd-display ";up bigger cursor: ~A" (cursor ind)))
		(if (not (= val (* 44100 50000))) (snd-display ";up rtn bigger cursor: ~A" (cursor ind))))
	      (let ((m1 (add-mark (* 44123 51234) ind)))
		(if (not (= (mark-sample m1) (* 44123 51234))) (snd-display ";bigger mark at: ~A" (mark-sample m1)))
		(let ((mid (find-mark (* 44123 51234))))
		  (if (or (not (number? mid)) (not (= mid m1))) (snd-display ";bigger mark seach: ~A ~A" mid m1))))
	      (let ((mx (mix-sound "oboe.snd" (* 44123 61234))))
		(let ((mxd (find-mix (* 44123 61234))))
		  (if (or (not (number? mxd)) (not (= mxd mx))) (snd-display ";bigger find-mix ~A ~A" mxd mx))))
	      (set! (cursor ind) (* 44123 51234))
	      (if (not (= (cursor ind) (* 44123 51234))) (snd-display ";bigger cursor 123: ~A" (cursor ind)))
	      (close-sound ind))
	    ))
      ))))

(define a-ctr 0)

(define (test-edpos test-func func-name change-thunk ind1)
  (let ((fr1 (test-func ind1 0))
	(fr2 (test-func ind1 0 0))
	(fr3 (test-func ind1 0 current-edit-position))
	(fr4 (test-func ind1 0 (lambda (snd chn) 0))))
    (if (not (and (= fr1 fr2)
		  (= fr1 fr3)
		  (= fr1 fr4)))
	(snd-display ";initial ~A: ~A ~A ~A ~A?" func-name fr1 fr2 fr3 fr4))
    (change-thunk)
    (let ((fr5 (test-func ind1 0))
	  (fr6 (test-func ind1 0 1))
	  (fr7 (test-func ind1 0 current-edit-position))
	  (fr8 (test-func ind1 0 (lambda (snd chn) (edit-position snd chn)))))
      (if (not (and (= fr5 fr6)
		    (= fr5 fr7)
		    (= fr5 fr8)))
	  (snd-display ";~A (edpos 1): ~A ~A ~A ~A?" func-name fr5 fr6 fr7 fr8))
      (set! fr5 (test-func ind1 0 0))
      (set! fr6 (test-func ind1 0 (lambda (snd chn) 0)))
      (if (not (and (= fr1 fr5)
		    (= fr1 fr6)))
	  (snd-display ";~A (edpos -1): ~A ~A ~A?" func-name fr1 fr5 fr6))))
  (revert-sound ind1))

(define (test-edpos-1 test-func func-name ind1)
  (let ((v0 (samples->vct 12000 10 ind1 0)))
    (test-func ind1 0)
    (let ((v1 (samples->vct 12000 10 ind1 0)))
      (if (vequal v0 v1)
	  (snd-display ";~A (0) no change! ~A ~A" func-name v0 v1))
      (test-func ind1 0)
      (let ((v2 (samples->vct 12000 10 ind1 0)))
	(if (not (vequal v1 v2))
	    (snd-display ";~A (1) ~A ~A" func-name v1 v2))
	(test-func ind1 (lambda (snd chn) 0))
	(set! v2 (samples->vct 12000 10 ind1 0))
	(if (not (vequal v1 v2))
	    (snd-display ";~A (2) ~A ~A" func-name v1 v2)))))
    (revert-sound ind1))

(define (vfequal v0 v1)
  (define (dequal ctr len)
    (if (= ctr len)
	#t
	(and (< (abs (- (vct-ref v0 ctr) (vct-ref v1 ctr))) .01)
	     (dequal (1+ ctr) len))))
  (let ((len (vct-length v0)))
    (and (= len (vct-length v1))
	 (dequal 0 len))))

(define (test-orig func0 func1 func-name ind1)
  (let ((v0 (samples->vct 12000 10 ind1 0)))
    (func0 ind1)
    (let ((v1 (samples->vct 12000 10 ind1 0)))
      (if (vfequal v0 v1)
	  (snd-display ";~A (orig: 0) no change! ~A ~A" func-name v0 v1))
      (func1 ind1)
      (let ((v2 (samples->vct 12000 10 ind1 0)))
	(if (not (vfequal v0 v2))
	    (snd-display ";~A (orig: 1) ~A ~A" func-name v0 v2))))
    (revert-sound ind1)))


;;; ---------------- test 5: simple overall checks ----------------

(load "extensions.scm")
(load "examp.scm")
(load "snd4.scm") ; needed for various scan/map extensions, external program testers etc
;(load "snd5.scm")
(load "dsp.scm")
(load "pvoc.scm")
(load "edit-menu.scm")
(define g-init-val 0)

(define* (make-bandpass-2 flo1 fhi1 flo2 fhi2 #:optional (len 30))
  (let* ((f1 (make-bandpass flo1 fhi1 len))
	 (f2 (make-bandpass flo2 fhi2 len)))
    (vct-add! (mus-xcoeffs f1) (mus-xcoeffs f2))
    f1))

(define* (cosine-channel-via-ptree #:optional (beg 0) (dur #f) (snd #f) (chn #f) (edpos #f))
  ;; vct: angle increment
  (ptree-channel
   (lambda (y data forward)
     (declare (y real) (data vct) (forward boolean))
     (let* ((angle (vct-ref data 0))
	    (incr (vct-ref data 1))
	    (val (* y (cos angle))))
       (if forward
	   (vct-set! data 0 (+ angle incr))
	   (vct-set! data 0 (- angle incr)))
       val))
   beg dur snd chn edpos #t
   (lambda (frag-beg frag-dur)
     (let ((incr (/ pi frag-dur)))
       (vct (+ (* -0.5 pi) (* frag-beg incr))
	    incr)))))
	  
(define* (cosine-channel #:optional (beg 0) (dur #f) (snd #f) (chn #f) (edpos #f))
  (let ((old-opt (optimization)))
    (set! (optimization) 0)
    (map-channel
     (let* ((samps (or dur (frames snd chn)))
	    (incr (/ pi samps))
	    (angle (* -0.5 pi)))
       (lambda (y)
	 (let ((val (* y (cos angle))))
	   (set! angle (+ angle incr))
	   val)))
     beg dur snd chn edpos)
    (set! (optimization) old-opt)))

(define* (xen-channel proc #:optional (beg 0) (dur #f) (snd #f) (chn #f) (edpos #f) (env-too #f) (init-func #f))
  (ptree-channel proc beg dur snd chn edpos env-too init-func #f))

(define (check-maxamp ind val name)
  (if (fneq (maxamp ind 0) val) (snd-display ";maxamp amp-env ~A: ~A should be ~A" name (maxamp ind) val))
  (let ((pos (find (lambda (y) (>= (abs y) (- val .001))))))
    (if (not pos) (snd-display ";actual maxamp ~A vals not right" name))
    (let ((mx 0.0))
      (scan-chan (lambda (y) 
		   (if (> (abs y) mx) 
		       (set! mx (abs y))) 
		   #f))
      (if (fneq mx val) (snd-display ";actual ~A max: ~A (correct: ~A)" name mx val)))))

(define (check-env-vals name gen)
  (let ((ctr -1))
    (scan-chan (lambda (y)
		 (let ((val (env gen)))
		   (set! ctr (1+ ctr))
		   (if (fneq val y)
		       (begin
			 (snd-display ";check-env-vals ~A at ~D: ~A ~A" name ctr val y)
			 #t)
		       #f))))))

(define (our-x->position ind x) 
  (let ((ax (axis-info ind)))
    (list
     (+ (list-ref ax 10) 
	(/ (* (- x (list-ref ax 2))
	      (- (list-ref ax 12) (list-ref ax 10)))
	   (- (list-ref ax 4) (list-ref ax 2))))
     (x->position x ind))))

(define (region-to-vct r c len)
  (let* ((rs (make-region-sample-reader 0 r c))
	 (v (make-vct len)))
    (do ((i 0 (1+ i)))
	((= i len) v)
      (vct-set! v i (next-sample rs)))))

(define (region2vct r c len)
  (region-samples->vct 0 len r c))

(define old-opt-val (optimization))

(if (or full-test (= snd-test 5) (and keep-going (<= snd-test 5)))
    (begin
      
      (set! (optimization) 5) ; these trees assume optimization is on

      ;; basic edit tree cases
      (let ((ind (new-sound "test.snd")))
	(if (not (string=? (display-edits) (string-append "
EDITS: 0

 (begin) [0:2]:
   (at 0, cp->sounds[0][0:0, 1.000000]) [file: " home-dir "/cl/test.snd[0]]
   (at 1, end_mark)
")))
	    (snd-display ";new 0: ~A" (display-edits)))
	(insert-samples 10 10 (make-vct 10))
	(if (not (string=? (display-edits) (string-append "
EDITS: 2

 (begin) [0:2]:
   (at 0, cp->sounds[0][0:0, 1.000000]) [file: " home-dir "/cl/test.snd[0]]
   (at 1, end_mark)

 (silence 1 9) ; (insert-extend) [1:3]:
   (at 0, cp->sounds[0][0:0, 1.000000]) [file: " home-dir "/cl/test.snd[0]]
   (at 1, cp->sounds[-1][0:8, 0.000000])
   (at 10, end_mark)

 (insert 10 10) ; insert-samples [2:4]:
   (at 0, cp->sounds[0][0:0, 1.000000]) [file: " home-dir "/cl/test.snd[0]]
   (at 1, cp->sounds[-1][0:8, 0.000000])
   (at 10, cp->sounds[1][0:9, 1.000000]) [buf: 10] 
   (at 20, end_mark)
")))
	    (snd-display ";new 1: ~A" (display-edits)))
	(undo)
	(insert-samples 0 10 (make-vct 10))
	(if (not (string=? (display-edits) (string-append "
EDITS: 2

 (begin) [0:2]:
   (at 0, cp->sounds[0][0:0, 1.000000]) [file: " home-dir "/cl/test.snd[0]]
   (at 1, end_mark)

 (silence 1 9) ; (insert-extend) [1:3]:
   (at 0, cp->sounds[0][0:0, 1.000000]) [file: " home-dir "/cl/test.snd[0]]
   (at 1, cp->sounds[-1][0:8, 0.000000])
   (at 10, end_mark)

 (insert 0 10) ; insert-samples [2:4]:
   (at 0, cp->sounds[1][0:9, 1.000000]) [buf: 10] 
   (at 10, cp->sounds[0][0:0, 1.000000]) [file: " home-dir "/cl/test.snd[0]]
   (at 11, cp->sounds[-1][0:8, 0.000000])
   (at 20, end_mark)
")))
	    (snd-display ";new 2: ~A" (display-edits)))
	(undo 2)
	(insert-samples 0 10 (make-vct 10))
	(if (not (string=? (display-edits) (string-append "
EDITS: 1

 (begin) [0:2]:
   (at 0, cp->sounds[0][0:0, 1.000000]) [file: " home-dir "/cl/test.snd[0]]
   (at 1, end_mark)

 (insert 0 10) ; insert-samples [1:3]:
   (at 0, cp->sounds[1][0:9, 1.000000]) [buf: 10] 
   (at 10, cp->sounds[0][0:0, 1.000000]) [file: " home-dir "/cl/test.snd[0]]
   (at 11, end_mark)
")))
	    (snd-display ";new 3: ~A" (display-edits)))
	(undo)
	(set! (sample 0) .5)
	(if (not (string=? (display-edits) (string-append "
EDITS: 1

 (begin) [0:2]:
   (at 0, cp->sounds[0][0:0, 1.000000]) [file: " home-dir "/cl/test.snd[0]]
   (at 1, end_mark)

 (set 0 1) ; set! sample [1:2]:
   (at 0, cp->sounds[1][0:0, 1.000000]) [buf: 1] 
   (at 1, end_mark)
")))
	    (snd-display ";new 4: ~A" (display-edits)))      
	(undo)
	(set! (samples 0 10) (make-vct 10))
	(if (not (string=? (display-edits) (string-append "
EDITS: 1

 (begin) [0:2]:
   (at 0, cp->sounds[0][0:0, 1.000000]) [file: " home-dir "/cl/test.snd[0]]
   (at 1, end_mark)

 (set 0 10) ; set-samples [1:2]:
   (at 0, cp->sounds[1][0:9, 1.000000]) [buf: 10] 
   (at 10, end_mark)
")))
	    (snd-display ";new 5: ~A" (display-edits)))
	(delete-samples 3 4)
	(if (not (string=? (display-edits ind 0 2) "
 (delete 3 4) ; delete-samples [2:3]:
   (at 0, cp->sounds[1][0:2, 1.000000]) [buf: 10] 
   (at 3, cp->sounds[1][7:9, 1.000000]) [buf: 10] 
   (at 6, end_mark)
"))
	    (snd-display ";new 6: ~A" (display-edits ind 0 2)))
	(set! (samples 1 4) (make-vct 4))
	(if (not (string=? (display-edits ind 0 3) "
 (set 1 4) ; set-samples [3:4]:
   (at 0, cp->sounds[1][0:0, 1.000000]) [buf: 10] 
   (at 1, cp->sounds[2][0:3, 1.000000]) [buf: 4] 
   (at 5, cp->sounds[1][9:9, 1.000000]) [buf: 10] 
   (at 6, end_mark)
"))
	    (snd-display ";new 7: ~A" (display-edits ind 0 3)))
	(undo 2)
	(insert-samples 2 3 (make-vct 3))
	(insert-samples 2 1 (make-vct 1))
	(insert-samples 4 1 (make-vct 1))
	(insert-samples 15 1 (make-vct 1))
	(if (not (string=? (display-edits) (string-append "
EDITS: 5

 (begin) [0:2]:
   (at 0, cp->sounds[0][0:0, 1.000000]) [file: " home-dir "/cl/test.snd[0]]
   (at 1, end_mark)

 (set 0 10) ; set-samples [1:2]:
   (at 0, cp->sounds[1][0:9, 1.000000]) [buf: 10] 
   (at 10, end_mark)

 (insert 2 3) ; insert-samples [2:4]:
   (at 0, cp->sounds[1][0:1, 1.000000]) [buf: 10] 
   (at 2, cp->sounds[2][0:2, 1.000000]) [buf: 3] 
   (at 5, cp->sounds[1][2:9, 1.000000]) [buf: 10] 
   (at 13, end_mark)

 (insert 2 1) ; insert-samples [3:5]:
   (at 0, cp->sounds[1][0:1, 1.000000]) [buf: 10] 
   (at 2, cp->sounds[3][0:0, 1.000000]) [buf: 1] 
   (at 3, cp->sounds[2][0:2, 1.000000]) [buf: 3] 
   (at 6, cp->sounds[1][2:9, 1.000000]) [buf: 10] 
   (at 14, end_mark)

 (insert 4 1) ; insert-samples [4:7]:
   (at 0, cp->sounds[1][0:1, 1.000000]) [buf: 10] 
   (at 2, cp->sounds[3][0:0, 1.000000]) [buf: 1] 
   (at 3, cp->sounds[2][0:0, 1.000000]) [buf: 3] 
   (at 4, cp->sounds[4][0:0, 1.000000]) [buf: 1] 
   (at 5, cp->sounds[2][1:2, 1.000000]) [buf: 3] 
   (at 7, cp->sounds[1][2:9, 1.000000]) [buf: 10] 
   (at 15, end_mark)

 (insert 15 1) ; insert-samples [5:8]:
   (at 0, cp->sounds[1][0:1, 1.000000]) [buf: 10] 
   (at 2, cp->sounds[3][0:0, 1.000000]) [buf: 1] 
   (at 3, cp->sounds[2][0:0, 1.000000]) [buf: 3] 
   (at 4, cp->sounds[4][0:0, 1.000000]) [buf: 1] 
   (at 5, cp->sounds[2][1:2, 1.000000]) [buf: 3] 
   (at 7, cp->sounds[1][2:9, 1.000000]) [buf: 10] 
   (at 15, cp->sounds[5][0:0, 1.000000]) [buf: 1] 
   (at 16, end_mark)
")))
	    (snd-display ";new 8: ~A" (display-edits)))
	(delete-samples 2 1)
	(if (not (string=? (display-edits ind 0 6) "
 (delete 2 1) ; delete-samples [6:7]:
   (at 0, cp->sounds[1][0:1, 1.000000]) [buf: 10] 
   (at 2, cp->sounds[2][0:0, 1.000000]) [buf: 3] 
   (at 3, cp->sounds[4][0:0, 1.000000]) [buf: 1] 
   (at 4, cp->sounds[2][1:2, 1.000000]) [buf: 3] 
   (at 6, cp->sounds[1][2:9, 1.000000]) [buf: 10] 
   (at 14, cp->sounds[5][0:0, 1.000000]) [buf: 1] 
   (at 15, end_mark)
"))
	    (snd-display ";new 9: ~A" (display-edits ind 0 6)))
	(delete-samples 0 5)
	(if (not (string=? (display-edits ind 0 7) "
 (delete 0 5) ; delete-samples [7:4]:
   (at 0, cp->sounds[2][2:2, 1.000000]) [buf: 3] 
   (at 1, cp->sounds[1][2:9, 1.000000]) [buf: 10] 
   (at 9, cp->sounds[5][0:0, 1.000000]) [buf: 1] 
   (at 10, end_mark)
"))
	    (snd-display ";new 10: ~A" (display-edits ind 0 7)))
	(delete-samples 6 4)
	(if (not (string=? (display-edits ind 0 8) "
 (delete 6 4) ; delete-samples [8:3]:
   (at 0, cp->sounds[2][2:2, 1.000000]) [buf: 3] 
   (at 1, cp->sounds[1][2:6, 1.000000]) [buf: 10] 
   (at 6, end_mark)
"))
	    (snd-display ";new 11: ~A" (display-edits ind 0 8)))
	(delete-samples 0 1)
	(if (not (string=? (display-edits ind 0 9) "
 (delete 0 1) ; delete-samples [9:2]:
   (at 0, cp->sounds[1][2:6, 1.000000]) [buf: 10] 
   (at 5, end_mark)
"))
	    (snd-display ";new 12: ~A" (display-edits ind 0 9)))
	
	(delete-samples 0 5)
	(if (not (string=? (display-edits ind 0 10) "
 (delete 0 5) ; delete-samples [10:1]:
   (at 0, end_mark)
"))
	    (snd-display ";new 13: ~A" (display-edits ind 0 10)))
	(delete-samples 0 10)
	(if (not (= (edit-position) 10))
	    (snd-display ";no-op delete deleted something! ~A" (display-edits)))
	(insert-samples 0 3 (make-vct 3))
	(if (not (string=? (display-edits ind 0 11) "
 (insert 0 3) ; insert-samples [11:2]:
   (at 0, cp->sounds[6][0:2, 1.000000]) [buf: 3] 
   (at 3, end_mark)
"))
	    (snd-display ";new 14: ~A" (display-edits ind 0 11)))
	(delete-samples 2 1)
	(if (not (string=? (display-edits ind 0 12) "
 (delete 2 1) ; delete-samples [12:2]:
   (at 0, cp->sounds[6][0:1, 1.000000]) [buf: 3] 
   (at 2, end_mark)
"))
	    (snd-display ";new 15: ~A" (display-edits ind 0 12)))
	(set! (sample 0) .5)
	(if (not (string=? (display-edits ind 0 13) "
 (set 0 1) ; set! sample [13:3]:
   (at 0, cp->sounds[7][0:0, 1.000000]) [buf: 1] 
   (at 1, cp->sounds[6][1:1, 1.000000]) [buf: 3] 
   (at 2, end_mark)
"))
	    (snd-display ";new 16: ~A" (display-edits ind 0 13)))
	(set! (sample 1) .5)
	(if (not (string=? (display-edits ind 0 14) "
 (set 1 1) ; set! sample [14:3]:
   (at 0, cp->sounds[7][0:0, 1.000000]) [buf: 1] 
   (at 1, cp->sounds[8][0:0, 1.000000]) [buf: 1] 
   (at 2, end_mark)
"))
	    (snd-display ";new 17: ~A" (display-edits ind 0 14)))  
	(map-channel (lambda (y) 1.0) 0 10)
	(if (not (string=? (display-edits ind 0 15) "
 (set 0 10) ; map-channel [15:2]:
   (at 0, cp->sounds[9][0:9, 1.000000]) [buf: 10] 
   (at 10, end_mark)
"))
	    (snd-display ";new 18: ~A" (display-edits ind 0 15)))  
	(insert-samples 0 10 (make-vct 10))
	(if (not (string=? (display-edits ind 0 16) "
 (insert 0 10) ; insert-samples [16:3]:
   (at 0, cp->sounds[10][0:9, 1.000000]) [buf: 10] 
   (at 10, cp->sounds[9][0:9, 1.000000]) [buf: 10] 
   (at 20, end_mark)
"))
	    (snd-display ";new 19: ~A" (display-edits ind 0 16)))
	(set! (samples 2 3) (make-vct 3))
	(if (not (string=? (display-edits ind 0 17) "
 (set 2 3) ; set-samples [17:5]:
   (at 0, cp->sounds[10][0:1, 1.000000]) [buf: 10] 
   (at 2, cp->sounds[11][0:2, 1.000000]) [buf: 3] 
   (at 5, cp->sounds[10][5:9, 1.000000]) [buf: 10] 
   (at 10, cp->sounds[9][0:9, 1.000000]) [buf: 10] 
   (at 20, end_mark)
"))
	    (snd-display ";new 20: ~A" (display-edits ind 0 17)))
	(set! (samples 0 12) (make-vct 12))
	(if (not (string=? (display-edits ind 0 18) "
 (set 0 12) ; set-samples [18:3]:
   (at 0, cp->sounds[12][0:11, 1.000000]) [buf: 12] 
   (at 12, cp->sounds[9][2:9, 1.000000]) [buf: 10] 
   (at 20, end_mark)
"))
	    (snd-display ";new 21: ~A" (display-edits ind 0 18)))
	(set! (samples 30 10) (make-vct 10))
	(if (not (string=? (display-edits ind 0 19) "
 (silence 20 11) ; (change-extend) [19:4]:
   (at 0, cp->sounds[12][0:11, 1.000000]) [buf: 12] 
   (at 12, cp->sounds[9][2:9, 1.000000]) [buf: 10] 
   (at 20, cp->sounds[-1][0:10, 0.000000])
   (at 31, end_mark)
"))
	    (snd-display ";new 22 silence extension: ~A" (display-edits ind 0 19)))
	(if (not (string=? (display-edits ind 0 20) "
 (set 30 10) ; set-samples [20:5]:
   (at 0, cp->sounds[12][0:11, 1.000000]) [buf: 12] 
   (at 12, cp->sounds[9][2:9, 1.000000]) [buf: 10] 
   (at 20, cp->sounds[-1][0:9, 0.000000])
   (at 30, cp->sounds[13][0:9, 1.000000]) [buf: 10] 
   (at 40, end_mark)
"))
	    (snd-display ";new 21: ~A" (display-edits ind 0 20)))
	(close-sound ind))
      
      ;; scale/ramp
      (let ((ind (new-sound "test.snd")))
	(map-channel (lambda (y) 1.0) 0 10)
	(scale-channel 0.5)
	(if (not (string=? (display-edits ind 0 2) "
 (scale 0 10) ; scale-channel 0.5000 0 10 [2:2]:
   (at 0, cp->sounds[1][0:9, 0.500000]) [buf: 10] 
   (at 10, end_mark)
"))
	    (snd-display ";scl 0: ~A" (display-edits ind 0 2)))
	(undo)
	(scale-channel 0.5 0 3)
	(if (not (string=? (display-edits ind 0 2) "
 (scale 0 3) ; scale-channel 0.5000 0 3 [2:3]:
   (at 0, cp->sounds[1][0:2, 0.500000]) [buf: 10] 
   (at 3, cp->sounds[1][3:9, 1.000000]) [buf: 10] 
   (at 10, end_mark)
"))
	    (snd-display ";scl 1: ~A" (display-edits ind 0 2)))
	(undo)
	(scale-channel 0.5 5 5)
	(if (not (string=? (display-edits ind 0 2) "
 (scale 5 5) ; scale-channel 0.5000 5 5 [2:3]:
   (at 0, cp->sounds[1][0:4, 1.000000]) [buf: 10] 
   (at 5, cp->sounds[1][5:9, 0.500000]) [buf: 10] 
   (at 10, end_mark)
"))
	    (snd-display ";scl 2: ~A" (display-edits ind 0 2)))
	(undo)
	(scale-channel 0.5 2 4)
	(if (not (string=? (display-edits ind 0 2) "
 (scale 2 4) ; scale-channel 0.5000 2 4 [2:4]:
   (at 0, cp->sounds[1][0:1, 1.000000]) [buf: 10] 
   (at 2, cp->sounds[1][2:5, 0.500000]) [buf: 10] 
   (at 6, cp->sounds[1][6:9, 1.000000]) [buf: 10] 
   (at 10, end_mark)
"))
	    (snd-display ";scl 2a: ~A" (display-edits ind 0 2)))
	(undo)
	(scale-channel 0.5 10 10)
	(if (not (= (edit-position) 1))
	    (snd-display ";scale beyond end edited? ~A" (display-edits)))
	(scale-channel 0.5 100 10)
	(if (not (= (edit-position) 1))
	    (snd-display ";scale way beyond end edited? ~A" (display-edits)))
	(scale-channel 0.5 5 10)
	(if (not (string=? (display-edits ind 0 2) "
 (scale 5 5) ; scale-channel 0.5000 5 5 [2:3]:
   (at 0, cp->sounds[1][0:4, 1.000000]) [buf: 10] 
   (at 5, cp->sounds[1][5:9, 0.500000]) [buf: 10] 
   (at 10, end_mark)
"))
	    (snd-display ";scl 3: ~A" (display-edits ind 0 2)))
	(undo)
	(set! (sample 4) .5)
	(if (not (string=? (display-edits ind 0 2) "
 (set 4 1) ; set! sample [2:4]:
   (at 0, cp->sounds[1][0:3, 1.000000]) [buf: 10] 
   (at 4, cp->sounds[2][0:0, 1.000000]) [buf: 1] 
   (at 5, cp->sounds[1][5:9, 1.000000]) [buf: 10] 
   (at 10, end_mark)
"))
	    (snd-display ";scl 4: ~A" (display-edits ind 0 2)))
	(scale-channel 0.5 0 4)
	(if (not (string=? (display-edits ind 0 3) "
 (scale 0 4) ; scale-channel 0.5000 0 4 [3:4]:
   (at 0, cp->sounds[1][0:3, 0.500000]) [buf: 10] 
   (at 4, cp->sounds[2][0:0, 1.000000]) [buf: 1] 
   (at 5, cp->sounds[1][5:9, 1.000000]) [buf: 10] 
   (at 10, end_mark)
"))
	    (snd-display ";scl 5: ~A" (display-edits ind 0 3)))
	(scale-channel 0.5 4 1)
	(if (not (string=? (display-edits ind 0 4) "
 (scale 4 1) ; scale-channel 0.5000 4 1 [4:4]:
   (at 0, cp->sounds[1][0:3, 0.500000]) [buf: 10] 
   (at 4, cp->sounds[2][0:0, 0.500000]) [buf: 1] 
   (at 5, cp->sounds[1][5:9, 1.000000]) [buf: 10] 
   (at 10, end_mark)
"))
	    (snd-display ";scl 6: ~A" (display-edits ind 0 4)))
	(scale-channel 0.5 0 7)
	(if (not (string=? (display-edits ind 0 5) "
 (scale 0 7) ; scale-channel 0.5000 0 7 [5:5]:
   (at 0, cp->sounds[1][0:3, 0.250000]) [buf: 10] 
   (at 4, cp->sounds[2][0:0, 0.250000]) [buf: 1] 
   (at 5, cp->sounds[1][5:6, 0.500000]) [buf: 10] 
   (at 7, cp->sounds[1][7:9, 1.000000]) [buf: 10] 
   (at 10, end_mark)
"))
	    (snd-display ";scl 7: ~A" (display-edits ind 0 5)))
	(scale-channel 0.5 1 4)
	(if (not (string=? (display-edits ind 0 6) "
 (scale 1 4) ; scale-channel 0.5000 1 4 [6:6]:
   (at 0, cp->sounds[1][0:0, 0.250000]) [buf: 10] 
   (at 1, cp->sounds[1][1:3, 0.125000]) [buf: 10] 
   (at 4, cp->sounds[2][0:0, 0.125000]) [buf: 1] 
   (at 5, cp->sounds[1][5:6, 0.500000]) [buf: 10] 
   (at 7, cp->sounds[1][7:9, 1.000000]) [buf: 10] 
   (at 10, end_mark)
"))
	    (snd-display ";scl 8: ~A" (display-edits ind 0 6)))
	(undo 4)
	(scale-channel 0.5 1 8)
	(if (not (string=? (display-edits ind 0 3) "
 (scale 1 8) ; scale-channel 0.5000 1 8 [3:6]:
   (at 0, cp->sounds[1][0:0, 1.000000]) [buf: 10] 
   (at 1, cp->sounds[1][1:3, 0.500000]) [buf: 10] 
   (at 4, cp->sounds[2][0:0, 0.500000]) [buf: 1] 
   (at 5, cp->sounds[1][5:8, 0.500000]) [buf: 10] 
   (at 9, cp->sounds[1][9:9, 1.000000]) [buf: 10] 
   (at 10, end_mark)
"))
	    (snd-display ";scl 9: ~A" (display-edits ind 0 3)))
	(undo 2)
	
	(ramp-channel 0.0 1.0)
	(if (not (string=? (display-edits ind 0 2) "
 (ramp 0 10) ; ramp-channel 0.0000 1.0000 0 10 [2:2]:
   (at 0, cp->sounds[1][0:9, 1.000000, -0.000000 -> 1.000000]) [buf: 10] 
   (at 10, end_mark)
"))
	    (snd-display ";ramp 0: ~A" (display-edits ind 0 2)))
	(scale-channel 0.5)
	(if (not (string=? (display-edits ind 0 3) "
 (scale 0 10) ; scale-channel 0.5000 0 10 [3:2]:
   (at 0, cp->sounds[1][0:9, 0.500000, -0.000000 -> 1.000000]) [buf: 10] 
   (at 10, end_mark)
"))
	    (snd-display ";ramp 1: ~A" (display-edits ind 0 3)))
	(undo)
	(scale-channel 0.5 0 5)
	(if (not (string=? (display-edits ind 0 3) "
 (scale 0 5) ; scale-channel 0.5000 0 5 [3:3]:
   (at 0, cp->sounds[1][0:4, 0.500000, -0.000000 -> 0.444444]) [buf: 10] 
   (at 5, cp->sounds[1][5:9, 1.000000, 0.555556 -> 1.000000]) [buf: 10] 
   (at 10, end_mark)
"))
	    (snd-display ";ramp 2: ~A" (display-edits ind 0 3)))
	(undo)
	(scale-channel 0.5 2 4)
	(if (not (string=? (display-edits ind 0 3) "
 (scale 2 4) ; scale-channel 0.5000 2 4 [3:4]:
   (at 0, cp->sounds[1][0:1, 1.000000, -0.000000 -> 0.111111]) [buf: 10] 
   (at 2, cp->sounds[1][2:5, 0.500000, 0.222222 -> 0.555556]) [buf: 10] 
   (at 6, cp->sounds[1][6:9, 1.000000, 0.666667 -> 1.000000]) [buf: 10] 
   (at 10, end_mark)
"))
	    (snd-display ";ramp 3: ~A" (display-edits ind 0 3)))
	(undo)
	(scale-channel 0.5 5 5)
	(if (not (string=? (display-edits ind 0 3) "
 (scale 5 5) ; scale-channel 0.5000 5 5 [3:3]:
   (at 0, cp->sounds[1][0:4, 1.000000, -0.000000 -> 0.444444]) [buf: 10] 
   (at 5, cp->sounds[1][5:9, 0.500000, 0.555556 -> 1.000000]) [buf: 10] 
   (at 10, end_mark)
"))
	    (snd-display ";ramp 4: ~A" (display-edits ind 0 3)))
	(undo 2)
	(ramp-channel .2 .6 2 6)
	(if (not (string=? (display-edits ind 0 2) "
 (ramp 2 6) ; ramp-channel 0.2000 0.6000 2 6 [2:4]:
   (at 0, cp->sounds[1][0:1, 1.000000]) [buf: 10] 
   (at 2, cp->sounds[1][2:7, 1.000000, 0.200000 -> 0.600000]) [buf: 10] 
   (at 8, cp->sounds[1][8:9, 1.000000]) [buf: 10] 
   (at 10, end_mark)
"))
	    (snd-display ";ramp 5: ~A" (display-edits ind 0 2)))
	(scale-channel 0.5 0 5)
	(if (not (string=? (display-edits ind 0 3) "
 (scale 0 5) ; scale-channel 0.5000 0 5 [3:5]:
   (at 0, cp->sounds[1][0:1, 0.500000]) [buf: 10] 
   (at 2, cp->sounds[1][2:4, 0.500000, 0.200000 -> 0.360000]) [buf: 10] 
   (at 5, cp->sounds[1][5:7, 1.000000, 0.440000 -> 0.600000]) [buf: 10] 
   (at 8, cp->sounds[1][8:9, 1.000000]) [buf: 10] 
   (at 10, end_mark)
"))
	    (snd-display ";ramp 6: ~A" (display-edits ind 0 3)))
	(undo)
	(scale-channel 0.5 2 6)
	(if (not (string=? (display-edits ind 0 3) "
 (scale 2 6) ; scale-channel 0.5000 2 6 [3:4]:
   (at 0, cp->sounds[1][0:1, 1.000000]) [buf: 10] 
   (at 2, cp->sounds[1][2:7, 0.500000, 0.200000 -> 0.600000]) [buf: 10] 
   (at 8, cp->sounds[1][8:9, 1.000000]) [buf: 10] 
   (at 10, end_mark)
"))
	    (snd-display ";ramp 7: ~A" (display-edits ind 0 3)))
	(undo)
	(scale-channel 0.5 5 4)
	(if (not (string=? (display-edits ind 0 3) "
 (scale 5 4) ; scale-channel 0.5000 5 4 [3:6]:
   (at 0, cp->sounds[1][0:1, 1.000000]) [buf: 10] 
   (at 2, cp->sounds[1][2:4, 1.000000, 0.200000 -> 0.360000]) [buf: 10] 
   (at 5, cp->sounds[1][5:7, 0.500000, 0.440000 -> 0.600000]) [buf: 10] 
   (at 8, cp->sounds[1][8:8, 0.500000]) [buf: 10] 
   (at 9, cp->sounds[1][9:9, 1.000000]) [buf: 10] 
   (at 10, end_mark)
"))
	    (snd-display ";ramp 8: ~A" (display-edits ind 0 3)))
	(undo)
	(set! (sample 4) .5)
	(if (not (string=? (display-edits ind 0 3) "
 (set 4 1) ; set! sample [3:6]:
   (at 0, cp->sounds[1][0:1, 1.000000]) [buf: 10] 
   (at 2, cp->sounds[1][2:3, 1.000000, 0.200000 -> 0.280000]) [buf: 10] 
   (at 4, cp->sounds[2][0:0, 1.000000]) [buf: 1] 
   (at 5, cp->sounds[1][5:7, 1.000000, 0.440000 -> 0.600000]) [buf: 10] 
   (at 8, cp->sounds[1][8:9, 1.000000]) [buf: 10] 
   (at 10, end_mark)
"))
	    (snd-display ";ramp 9: ~A" (display-edits ind 0 3)))
	(undo)
	(scale-channel 0.5 4 1)
	(if (not (string=? (display-edits ind 0 3) "
 (scale 4 1) ; scale-channel 0.5000 4 1 [3:6]:
   (at 0, cp->sounds[1][0:1, 1.000000]) [buf: 10] 
   (at 2, cp->sounds[1][2:3, 1.000000, 0.200000 -> 0.280000]) [buf: 10] 
   (at 4, cp->sounds[1][4:4, 0.500000, 0.360000 -> 0.360000]) [buf: 10] 
   (at 5, cp->sounds[1][5:7, 1.000000, 0.440000 -> 0.600000]) [buf: 10] 
   (at 8, cp->sounds[1][8:9, 1.000000]) [buf: 10] 
   (at 10, end_mark)
"))
	    (snd-display ";ramp 10: ~A" (display-edits ind 0 3)))
	(undo)
	(delete-sample 4)
	(if (not (string=? (display-edits ind 0 3) "
 (delete 4 1) ; delete-sample [3:5]:
   (at 0, cp->sounds[1][0:1, 1.000000]) [buf: 10] 
   (at 2, cp->sounds[1][2:3, 1.000000, 0.200000 -> 0.280000]) [buf: 10] 
   (at 4, cp->sounds[1][5:7, 1.000000, 0.440000 -> 0.600000]) [buf: 10] 
   (at 7, cp->sounds[1][8:9, 1.000000]) [buf: 10] 
   (at 9, end_mark)
"))
	    (snd-display ";ramp 11: ~A" (display-edits ind 0 3)))
	(undo)
	(delete-samples 4 2)
	(if (not (string=? (display-edits ind 0 3) "
 (delete 4 2) ; delete-samples [3:5]:
   (at 0, cp->sounds[1][0:1, 1.000000]) [buf: 10] 
   (at 2, cp->sounds[1][2:3, 1.000000, 0.200000 -> 0.280000]) [buf: 10] 
   (at 4, cp->sounds[1][6:7, 1.000000, 0.520000 -> 0.600000]) [buf: 10] 
   (at 6, cp->sounds[1][8:9, 1.000000]) [buf: 10] 
   (at 8, end_mark)
"))
	    (snd-display ";ramp 12: ~A" (display-edits ind 0 3)))
	(undo)
	(delete-samples 4 3)
	(if (not (string=? (display-edits ind 0 3) "
 (delete 4 3) ; delete-samples [3:5]:
   (at 0, cp->sounds[1][0:1, 1.000000]) [buf: 10] 
   (at 2, cp->sounds[1][2:3, 1.000000, 0.200000 -> 0.280000]) [buf: 10] 
   (at 4, cp->sounds[1][7:7, 1.000000, 0.600000 -> 0.600000]) [buf: 10] 
   (at 5, cp->sounds[1][8:9, 1.000000]) [buf: 10] 
   (at 7, end_mark)
"))
	    (snd-display ";ramp 13: ~A" (display-edits ind 0 3)))
	(undo)
	(delete-samples 4 4)
	(if (not (string=? (display-edits ind 0 3) "
 (delete 4 4) ; delete-samples [3:4]:
   (at 0, cp->sounds[1][0:1, 1.000000]) [buf: 10] 
   (at 2, cp->sounds[1][2:3, 1.000000, 0.200000 -> 0.280000]) [buf: 10] 
   (at 4, cp->sounds[1][8:9, 1.000000]) [buf: 10] 
   (at 6, end_mark)
"))
	    (snd-display ";ramp 14: ~A" (display-edits ind 0 3)))
	(undo)
	(delete-samples 4 5)
	(if (not (string=? (display-edits ind 0 3) "
 (delete 4 5) ; delete-samples [3:4]:
   (at 0, cp->sounds[1][0:1, 1.000000]) [buf: 10] 
   (at 2, cp->sounds[1][2:3, 1.000000, 0.200000 -> 0.280000]) [buf: 10] 
   (at 4, cp->sounds[1][9:9, 1.000000]) [buf: 10] 
   (at 5, end_mark)
"))
	    (snd-display ";ramp 15: ~A" (display-edits ind 0 3)))
	(undo)
	(scale-channel 0.5 4 2)
	(if (not (string=? (display-edits ind 0 3) "
 (scale 4 2) ; scale-channel 0.5000 4 2 [3:6]:
   (at 0, cp->sounds[1][0:1, 1.000000]) [buf: 10] 
   (at 2, cp->sounds[1][2:3, 1.000000, 0.200000 -> 0.280000]) [buf: 10] 
   (at 4, cp->sounds[1][4:5, 0.500000, 0.360000 -> 0.440000]) [buf: 10] 
   (at 6, cp->sounds[1][6:7, 1.000000, 0.520000 -> 0.600000]) [buf: 10] 
   (at 8, cp->sounds[1][8:9, 1.000000]) [buf: 10] 
   (at 10, end_mark)
"))
	    (snd-display ";ramp 16: ~A" (display-edits ind 0 3)))
	(undo)
	(pad-channel 4 1)
	(if (not (string=? (display-edits ind 0 3) "
 (silence 4 1) ; pad-channel [3:6]:
   (at 0, cp->sounds[1][0:1, 1.000000]) [buf: 10] 
   (at 2, cp->sounds[1][2:3, 1.000000, 0.200000 -> 0.280000]) [buf: 10] 
   (at 4, cp->sounds[-1][0:0, 0.000000])
   (at 5, cp->sounds[1][4:7, 1.000000, 0.360000 -> 0.600000]) [buf: 10] 
   (at 9, cp->sounds[1][8:9, 1.000000]) [buf: 10] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp 17: ~A" (display-edits ind 0 3)))
	(close-sound ind))

      ;; xramp
      (let ((ind (new-sound "test.snd")))
	(map-channel (lambda (y) 1.0) 0 10)
	(xramp-channel 0.0 1.0 32.0)
	(if (not (string=? (display-edits ind 0 2) "
 (ramp 0 10) ; xramp-channel 0.0000 1.0000 32.0000 0 10 [2:2]:
   (at 0, cp->sounds[1][0:9, 1.000000, 0.000000 -> 3.465736, off: -0.032258, scl: 0.032258]) [buf: 10] 
   (at 10, end_mark)
"))
	    (snd-display ";xramp 1: ~A" (display-edits ind 0 2)))
	(undo)
	(xramp-channel 0.0 1.0 0.325)
	(if (not (string=? (display-edits ind 0 2) "
 (ramp 0 10) ; xramp-channel 0.0000 1.0000 0.3250 0 10 [2:2]:
   (at 0, cp->sounds[1][0:9, 1.000000, -0.000000 -> -1.123930, off: 1.481481, scl: -1.481481]) [buf: 10] 
   (at 10, end_mark)
"))
	    (snd-display ";xramp 2: ~A" (display-edits ind 0 2)))
	(undo)
	(xramp-channel 0.0 1.0 0.0)
	(if (not (string=? (display-edits ind 0 2) "
 (scale 0 10) ; scale-channel 0.0000 0 10 [2:2]:
   (at 0, cp->sounds[1][0:9, 0.000000]) [buf: 10] 
   (at 10, end_mark)
"))
	    (snd-display ";xramp 3: ~A" (display-edits ind 0 2)))
	(undo)
	(xramp-channel 0.0 1.0 1.0)
	(if (not (string=? (display-edits ind 0 2) "
 (ramp 0 10) ; ramp-channel 0.0000 1.0000 0 10 [2:2]:
   (at 0, cp->sounds[1][0:9, 1.000000, -0.000000 -> 1.000000]) [buf: 10] 
   (at 10, end_mark)
"))
	    (snd-display ";xramp 4: ~A" (display-edits ind 0 2)))
	(undo)
	(xramp-channel 0.5 1.5 32.0)
	(if (not (string=? (display-edits ind 0 2) "
 (ramp 0 10) ; xramp-channel 0.5000 1.5000 32.0000 0 10 [2:2]:
   (at 0, cp->sounds[1][0:9, 1.000000, 0.000000 -> 3.465736, off: 0.467742, scl: 0.032258]) [buf: 10] 
   (at 10, end_mark)
"))
	    (snd-display ";xramp 5: ~A" (display-edits ind 0 2)))
	(if (or (fneq (maxamp) 1.5) (fneq (sample 0) 0.5))
	    (snd-display ";xramp 5 vals: ~A ~A" (maxamp) (sample 0)))
	(undo)
	(xramp-channel -0.5 1.5 32.0)
	(if (not (string=? (display-edits ind 0 2) "
 (ramp 0 10) ; xramp-channel -0.5000 1.5000 32.0000 0 10 [2:2]:
   (at 0, cp->sounds[1][0:9, 1.000000, 0.000000 -> 3.465736, off: -0.564516, scl: 0.064516]) [buf: 10] 
   (at 10, end_mark)
"))
	    (snd-display ";xramp 6: ~A" (display-edits ind 0 2)))
	(if (or (fneq (maxamp) 1.5) (fneq (sample 0) -0.5))
	    (snd-display ";xramp 6 vals: ~A ~A" (maxamp) (sample 0)))
	(undo)
	(xramp-channel 0.0 1.0 32.0)
	(let ((vals (channel->vct))
	      (ctr 0))
	  (scale-channel 0.5)
	  (if (not (string=? (display-edits ind 0 3) "
 (scale 0 10) ; scale-channel 0.5000 0 10 [3:2]:
   (at 0, cp->sounds[1][0:9, 0.500000, 0.000000 -> 3.465736, off: -0.032258, scl: 0.032258]) [buf: 10] 
   (at 10, end_mark)
"))
	      (snd-display ";xramp 7: ~A" (display-edits ind 0 3)))
	  (set! ctr 0)
	  (let ((baddy (scan-chan (lambda (y) (if (fneq y (* 0.5 (vct-ref vals ctr))) #t (begin (set! ctr (1+ ctr)) #f))))))
	    (if baddy (snd-display ";trouble in xramp 7: ~A" baddy)))
	  (undo)
	  (delete-sample 0)
	  (if (not (string=? (display-edits ind 0 3) "
 (delete 0 1) ; delete-sample [3:2]:
   (at 0, cp->sounds[1][1:9, 1.000000, 0.385082 -> 3.465736, off: -0.032258, scl: 0.032258]) [buf: 10] 
   (at 9, end_mark)
"))
	      (snd-display ";xramp 8: ~A" (display-edits ind 0 3)))
	  (set! ctr 1)
	  (let ((baddy (scan-chan (lambda (y) (if (fneq y (vct-ref vals ctr)) #t (begin (set! ctr (1+ ctr)) #f))))))
	    (if baddy (snd-display ";trouble in xramp 8: ~A" baddy)))
	  (undo)
	  (delete-samples 0 2)
	  (if (not (string=? (display-edits ind 0 3) "
 (delete 0 2) ; delete-samples [3:2]:
   (at 0, cp->sounds[1][2:9, 1.000000, 0.770164 -> 3.465736, off: -0.032258, scl: 0.032258]) [buf: 10] 
   (at 8, end_mark)
"))
	      (snd-display ";xramp 9: ~A" (display-edits ind 0 3)))
	  (set! ctr 2)
	  (let ((baddy (scan-chan (lambda (y) (if (fneq y (vct-ref vals ctr)) #t (begin (set! ctr (1+ ctr)) #f))))))
	    (if baddy (snd-display ";trouble in xramp 9: ~A" baddy)))
	  (undo)
	  (delete-sample 0)
	  (delete-sample 0)
	  (if (not (string=? (display-edits ind 0 4) "
 (delete 0 1) ; delete-sample [4:2]:
   (at 0, cp->sounds[1][2:9, 1.000000, 0.770164 -> 3.465736, off: -0.032258, scl: 0.032258]) [buf: 10] 
   (at 8, end_mark)
"))
	      (snd-display ";xramp 10: ~A" (display-edits ind 0 4)))
	  (undo 2)
	  (delete-sample 4)
	  (if (not (string=? (display-edits ind 0 3) "
 (delete 4 1) ; delete-sample [3:3]:
   (at 0, cp->sounds[1][0:3, 1.000000, 0.000000 -> 1.155245, off: -0.032258, scl: 0.032258]) [buf: 10] 
   (at 4, cp->sounds[1][5:9, 1.000000, 1.925409 -> 3.465736, off: -0.032258, scl: 0.032258]) [buf: 10] 
   (at 9, end_mark)
"))
	      (snd-display ";xramp 11: ~A" (display-edits ind 0 3)))
	  (undo)
	  (delete-samples 4 2)
	  (if (not (string=? (display-edits ind 0 3) "
 (delete 4 2) ; delete-samples [3:3]:
   (at 0, cp->sounds[1][0:3, 1.000000, 0.000000 -> 1.155245, off: -0.032258, scl: 0.032258]) [buf: 10] 
   (at 4, cp->sounds[1][6:9, 1.000000, 2.310491 -> 3.465736, off: -0.032258, scl: 0.032258]) [buf: 10] 
   (at 8, end_mark)
"))
	      (snd-display ";xramp 12: ~A" (display-edits ind 0 3)))
	  (undo)
	  (scale-channel 0.5 4 2)
	  (if (not (string=? (display-edits ind 0 3) "
 (scale 4 2) ; scale-channel 0.5000 4 2 [3:4]:
   (at 0, cp->sounds[1][0:3, 1.000000, 0.000000 -> 1.155245, off: -0.032258, scl: 0.032258]) [buf: 10] 
   (at 4, cp->sounds[1][4:5, 0.500000, 1.540327 -> 1.925409, off: -0.032258, scl: 0.032258]) [buf: 10] 
   (at 6, cp->sounds[1][6:9, 1.000000, 2.310491 -> 3.465736, off: -0.032258, scl: 0.032258]) [buf: 10] 
   (at 10, end_mark)
"))
	      (snd-display ";xramp 13: ~A" (display-edits ind 0 3)))
	  (set! ctr 0)
	  (let ((baddy (scan-chan (lambda (y)
				    (if (or (and (> ctr 5) (fneq y (vct-ref vals ctr)))
					    (and (< ctr 4) (fneq y (vct-ref vals ctr)))
					    (and (or (= ctr 4) (= ctr 5)) (fneq y (* 0.5 (vct-ref vals ctr)))))
					#t
					(begin (set! ctr (1+ ctr)) #f))))))
	    (if baddy (snd-display ";trouble in xramp 8: ~A" baddy)))
	  (undo)
	  (scale-channel 0.5 0 2)
	  (if (not (string=? (display-edits ind 0 3) "
 (scale 0 2) ; scale-channel 0.5000 0 2 [3:3]:
   (at 0, cp->sounds[1][0:1, 0.500000, 0.000000 -> 0.385082, off: -0.032258, scl: 0.032258]) [buf: 10] 
   (at 2, cp->sounds[1][2:9, 1.000000, 0.770164 -> 3.465736, off: -0.032258, scl: 0.032258]) [buf: 10] 
   (at 10, end_mark)
"))
	      (snd-display ";xramp 14: ~A" (display-edits ind 0 3)))
	  (undo)
	  (pad-channel 4 2)
	  (if (not (string=? (display-edits ind 0 3) "
 (silence 4 2) ; pad-channel [3:4]:
   (at 0, cp->sounds[1][0:3, 1.000000, 0.000000 -> 1.155245, off: -0.032258, scl: 0.032258]) [buf: 10] 
   (at 4, cp->sounds[-1][0:1, 0.000000])
   (at 6, cp->sounds[1][4:9, 1.000000, 1.540327 -> 3.465736, off: -0.032258, scl: 0.032258]) [buf: 10] 
   (at 12, end_mark)
"))
	      (snd-display ";xramp 15: ~A" (display-edits ind 0 3)))
	  (undo)
	  (set! (sample 4) 1.0)
	  (if (not (string=? (display-edits ind 0 3) "
 (set 4 1) ; set! sample [3:4]:
   (at 0, cp->sounds[1][0:3, 1.000000, 0.000000 -> 1.155245, off: -0.032258, scl: 0.032258]) [buf: 10] 
   (at 4, cp->sounds[2][0:0, 1.000000]) [buf: 1] 
   (at 5, cp->sounds[1][5:9, 1.000000, 1.925409 -> 3.465736, off: -0.032258, scl: 0.032258]) [buf: 10] 
   (at 10, end_mark)
"))
	      (snd-display ";xramp 16: ~A" (display-edits ind 0 3)))
	  (undo)
	  (set! (samples 4 2) (make-vct 2))
	  (if (not (string=? (display-edits ind 0 3) "
 (set 4 2) ; set-samples [3:4]:
   (at 0, cp->sounds[1][0:3, 1.000000, 0.000000 -> 1.155245, off: -0.032258, scl: 0.032258]) [buf: 10] 
   (at 4, cp->sounds[2][0:1, 1.000000]) [buf: 2] 
   (at 6, cp->sounds[1][6:9, 1.000000, 2.310491 -> 3.465736, off: -0.032258, scl: 0.032258]) [buf: 10] 
   (at 10, end_mark)
"))
	      (snd-display ";xramp 17: ~A" (display-edits ind 0 3)))
	  (undo)
	  (scale-channel 0.5)
	  (set! (samples 4 2) (make-vct 2))
	  (if (not (string=? (display-edits ind 0 4) "
 (set 4 2) ; set-samples [4:4]:
   (at 0, cp->sounds[1][0:3, 0.500000, 0.000000 -> 1.155245, off: -0.032258, scl: 0.032258]) [buf: 10] 
   (at 4, cp->sounds[2][0:1, 1.000000]) [buf: 2] 
   (at 6, cp->sounds[1][6:9, 0.500000, 2.310491 -> 3.465736, off: -0.032258, scl: 0.032258]) [buf: 10] 
   (at 10, end_mark)
"))
	      (snd-display ";xramp 18: ~A" (display-edits ind 0 4)))
	  )
	(close-sound ind))

      (let ((ind (new-sound "test.snd")))
	(map-channel (lambda (y) 1.0) 0 100)
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (scale-channel 0.5 (* i 10) 10))
	(ramp-channel 0.0 1.0)
	(if (not (string=? (display-edits ind 0 12) "
 (ramp 0 100) ; ramp-channel 0.0000 1.0000 0 100 [12:11]:
   (at 0, cp->sounds[1][0:9, 0.500000, 0.000000 -> 0.090909]) [buf: 100] 
   (at 10, cp->sounds[1][10:19, 0.500000, 0.101010 -> 0.191919]) [buf: 100] 
   (at 20, cp->sounds[1][20:29, 0.500000, 0.202020 -> 0.292929]) [buf: 100] 
   (at 30, cp->sounds[1][30:39, 0.500000, 0.303030 -> 0.393939]) [buf: 100] 
   (at 40, cp->sounds[1][40:49, 0.500000, 0.404040 -> 0.494950]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 0.500000, 0.505051 -> 0.595960]) [buf: 100] 
   (at 60, cp->sounds[1][60:69, 0.500000, 0.606061 -> 0.696970]) [buf: 100] 
   (at 70, cp->sounds[1][70:79, 0.500000, 0.707071 -> 0.797980]) [buf: 100] 
   (at 80, cp->sounds[1][80:89, 0.500000, 0.808081 -> 0.898990]) [buf: 100] 
   (at 90, cp->sounds[1][90:99, 0.500000, 0.909091 -> 1.000000]) [buf: 100] 
   (at 100, end_mark)
"))
	    (snd-display ";multi-ramp 1: ~A" (display-edits ind 0 12)))
	(if (fneq (maxamp) 0.5) (snd-display ";multi ramp 1 maxamp: ~A" (maxamp)))
	(undo)
	(ramp-channel 0.1 1.0 10 90)
	(if (not (string=? (display-edits ind 0 12) "
 (ramp 10 90) ; ramp-channel 0.1000 1.0000 10 90 [12:11]:
   (at 0, cp->sounds[1][0:9, 0.500000]) [buf: 100] 
   (at 10, cp->sounds[1][10:19, 0.500000, 0.100000 -> 0.191011]) [buf: 100] 
   (at 20, cp->sounds[1][20:29, 0.500000, 0.201124 -> 0.292135]) [buf: 100] 
   (at 30, cp->sounds[1][30:39, 0.500000, 0.302247 -> 0.393258]) [buf: 100] 
   (at 40, cp->sounds[1][40:49, 0.500000, 0.403371 -> 0.494382]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 0.500000, 0.504494 -> 0.595506]) [buf: 100] 
   (at 60, cp->sounds[1][60:69, 0.500000, 0.605618 -> 0.696629]) [buf: 100] 
   (at 70, cp->sounds[1][70:79, 0.500000, 0.706741 -> 0.797753]) [buf: 100] 
   (at 80, cp->sounds[1][80:89, 0.500000, 0.807865 -> 0.898876]) [buf: 100] 
   (at 90, cp->sounds[1][90:99, 0.500000, 0.908989 -> 1.000000]) [buf: 100] 
   (at 100, end_mark)
"))
	    (snd-display ";multi-ramp 2: ~A" (display-edits ind 0 12)))
	(if (fneq (maxamp) 0.5) (snd-display ";multi ramp 2 maxamp: ~A" (maxamp)))
	(undo)
	(ramp-channel 0.0 0.9 0 90)
	(if (not (string=? (display-edits ind 0 12) "
 (ramp 0 90) ; ramp-channel 0.0000 0.9000 0 90 [12:11]:
   (at 0, cp->sounds[1][0:9, 0.500000, 0.000000 -> 0.091011]) [buf: 100] 
   (at 10, cp->sounds[1][10:19, 0.500000, 0.101124 -> 0.192135]) [buf: 100] 
   (at 20, cp->sounds[1][20:29, 0.500000, 0.202247 -> 0.293258]) [buf: 100] 
   (at 30, cp->sounds[1][30:39, 0.500000, 0.303371 -> 0.394382]) [buf: 100] 
   (at 40, cp->sounds[1][40:49, 0.500000, 0.404494 -> 0.495506]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 0.500000, 0.505618 -> 0.596629]) [buf: 100] 
   (at 60, cp->sounds[1][60:69, 0.500000, 0.606741 -> 0.697753]) [buf: 100] 
   (at 70, cp->sounds[1][70:79, 0.500000, 0.707865 -> 0.798876]) [buf: 100] 
   (at 80, cp->sounds[1][80:89, 0.500000, 0.808989 -> 0.900000]) [buf: 100] 
   (at 90, cp->sounds[1][90:99, 0.500000]) [buf: 100] 
   (at 100, end_mark)
"))
	    (snd-display ";multi-ramp 3: ~A" (display-edits ind 0 12)))
	(if (fneq (maxamp) 0.5) (snd-display ";multi ramp 3 maxamp: ~A" (maxamp)))
	(if (fneq (sample 89) 0.45) (snd-display ";multi ramp 3 sample 89: ~A" (sample 89)))
	(if (fneq (sample 90) 0.5) (snd-display ";multi ramp 3 sample 90: ~A" (sample 90)))
	(undo)
	(ramp-channel 0.1 0.9 10 80)
	(if (not (string=? (display-edits ind 0 12) "
 (ramp 10 80) ; ramp-channel 0.1000 0.9000 10 80 [12:11]:
   (at 0, cp->sounds[1][0:9, 0.500000]) [buf: 100] 
   (at 10, cp->sounds[1][10:19, 0.500000, 0.100000 -> 0.191139]) [buf: 100] 
   (at 20, cp->sounds[1][20:29, 0.500000, 0.201266 -> 0.292405]) [buf: 100] 
   (at 30, cp->sounds[1][30:39, 0.500000, 0.302532 -> 0.393671]) [buf: 100] 
   (at 40, cp->sounds[1][40:49, 0.500000, 0.403797 -> 0.494937]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 0.500000, 0.505063 -> 0.596202]) [buf: 100] 
   (at 60, cp->sounds[1][60:69, 0.500000, 0.606329 -> 0.697468]) [buf: 100] 
   (at 70, cp->sounds[1][70:79, 0.500000, 0.707595 -> 0.798734]) [buf: 100] 
   (at 80, cp->sounds[1][80:89, 0.500000, 0.808861 -> 0.900000]) [buf: 100] 
   (at 90, cp->sounds[1][90:99, 0.500000]) [buf: 100] 
   (at 100, end_mark)
"))
	    (snd-display ";multi-ramp 4: ~A" (display-edits ind 0 12)))
	(revert-sound)
	(map-channel (lambda (y) 1.0) 0 100)
	(ramp-channel 0.0 1.0)
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (scale-channel 0.5 (* i 10) 10))
	(if (not (string=? (display-edits ind 0 12) "
 (scale 90 10) ; scale-channel 0.5000 90 10 [12:11]:
   (at 0, cp->sounds[1][0:9, 0.500000, 0.000000 -> 0.090909]) [buf: 100] 
   (at 10, cp->sounds[1][10:19, 0.500000, 0.101010 -> 0.191919]) [buf: 100] 
   (at 20, cp->sounds[1][20:29, 0.500000, 0.202020 -> 0.292929]) [buf: 100] 
   (at 30, cp->sounds[1][30:39, 0.500000, 0.303030 -> 0.393939]) [buf: 100] 
   (at 40, cp->sounds[1][40:49, 0.500000, 0.404040 -> 0.494950]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 0.500000, 0.505051 -> 0.595960]) [buf: 100] 
   (at 60, cp->sounds[1][60:69, 0.500000, 0.606061 -> 0.696970]) [buf: 100] 
   (at 70, cp->sounds[1][70:79, 0.500000, 0.707071 -> 0.797980]) [buf: 100] 
   (at 80, cp->sounds[1][80:89, 0.500000, 0.808081 -> 0.898990]) [buf: 100] 
   (at 90, cp->sounds[1][90:99, 0.500000, 0.909091 -> 1.000000]) [buf: 100] 
   (at 100, end_mark)
"))  
	    (snd-display ";multi-ramp 5: ~A" (display-edits ind 0 12)))
	(close-sound ind))
      
      (let ((ind (new-sound "test.snd")))
	
	;; ptree+scale
	(map-channel (lambda (y) 1.0) 0 100)
	(cosine-channel 0 100)
	(let ((map-data (channel->vct)))
	  (undo)
	  (cosine-channel-via-ptree 0 100)
	  (let ((tree-data (channel->vct)))
	    (if (not (vequal map-data tree-data))
		(snd-display ";map and ptree cosine disagree: ~A ~A" map-data tree-data)))
	  (do ((i 0 (1+ i)))
	      ((= i 10))
	    (scale-channel 0.5 (* i 10) 10))
	  (if (not (string=? (display-edits ind 0 12 #f) "
 (scale 90 10) ; scale-channel 0.5000 90 10 [12:11]:
   (at 0, cp->sounds[1][0:9, 0.500000, loc: 0, pos: 0, scl: 1.000000]) [buf: 100] 
   (at 10, cp->sounds[1][10:19, 0.500000, loc: 0, pos: 10, scl: 1.000000]) [buf: 100] 
   (at 20, cp->sounds[1][20:29, 0.500000, loc: 0, pos: 20, scl: 1.000000]) [buf: 100] 
   (at 30, cp->sounds[1][30:39, 0.500000, loc: 0, pos: 30, scl: 1.000000]) [buf: 100] 
   (at 40, cp->sounds[1][40:49, 0.500000, loc: 0, pos: 40, scl: 1.000000]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 0.500000, loc: 0, pos: 50, scl: 1.000000]) [buf: 100] 
   (at 60, cp->sounds[1][60:69, 0.500000, loc: 0, pos: 60, scl: 1.000000]) [buf: 100] 
   (at 70, cp->sounds[1][70:79, 0.500000, loc: 0, pos: 70, scl: 1.000000]) [buf: 100] 
   (at 80, cp->sounds[1][80:89, 0.500000, loc: 0, pos: 80, scl: 1.000000]) [buf: 100] 
   (at 90, cp->sounds[1][90:99, 0.500000, loc: 0, pos: 90, scl: 1.000000]) [buf: 100] 
   (at 100, end_mark)
"))
	      (snd-display ";multi-tree 0: ~A" (display-edits ind 0 12 #f)))
	  (let ((scl-data (vct-scale! (channel->vct) 2.0)))
	    (if (not (vequal map-data scl-data))
		(snd-display ";map and ptree->scl cosine disagree: ~A ~A" map-data scl-data)))
	  
	  (revert-sound)
	  (map-channel (lambda (y) 1.0) 0 100)
	  (do ((i 0 (1+ i)))
	      ((= i 10))
	    (scale-channel 0.5 (* i 10) 10))
	  (cosine-channel-via-ptree 0 100)
	  (if (not (string=? (display-edits ind 0 12 #f) "
 (ptree[0] 0 100) ; ptree 0 0 100 [12:11]:
   (at 0, cp->sounds[1][0:9, 1.000000, loc: 0, pos: 0, scl: 0.500000]) [buf: 100] 
   (at 10, cp->sounds[1][10:19, 1.000000, loc: 0, pos: 10, scl: 0.500000]) [buf: 100] 
   (at 20, cp->sounds[1][20:29, 1.000000, loc: 0, pos: 20, scl: 0.500000]) [buf: 100] 
   (at 30, cp->sounds[1][30:39, 1.000000, loc: 0, pos: 30, scl: 0.500000]) [buf: 100] 
   (at 40, cp->sounds[1][40:49, 1.000000, loc: 0, pos: 40, scl: 0.500000]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 1.000000, loc: 0, pos: 50, scl: 0.500000]) [buf: 100] 
   (at 60, cp->sounds[1][60:69, 1.000000, loc: 0, pos: 60, scl: 0.500000]) [buf: 100] 
   (at 70, cp->sounds[1][70:79, 1.000000, loc: 0, pos: 70, scl: 0.500000]) [buf: 100] 
   (at 80, cp->sounds[1][80:89, 1.000000, loc: 0, pos: 80, scl: 0.500000]) [buf: 100] 
   (at 90, cp->sounds[1][90:99, 1.000000, loc: 0, pos: 90, scl: 0.500000]) [buf: 100] 
   (at 100, end_mark)
"))
	      (snd-display ";multi-tree 1: ~A" (display-edits ind 0 12 #f)))
	  (let ((scl-data (vct-scale! (channel->vct) 2.0)))
	    (if (not (vequal map-data scl-data))
		(snd-display ";map and scl->ptree cosine disagree: ~A ~A" map-data scl-data)))
	  
	  (revert-sound)
	  (map-channel (lambda (y) 1.0) 0 100)
	  (cosine-channel 10 90)
	  (set! map-data (channel->vct))
	  
	  (undo)
	  (cosine-channel-via-ptree 10 90)
	  (let ((tree-data (channel->vct)))
	    (if (not (vequal map-data tree-data))
		(snd-display ";map and ptree 10:90 cosine disagree: ~A ~A" map-data tree-data)))
	  (do ((i 0 (1+ i)))
	      ((= i 10))
	    (scale-channel 0.5 (* i 10) 10))
	  (if (not (string=? (display-edits ind 0 12 #f) "
 (scale 90 10) ; scale-channel 0.5000 90 10 [12:11]:
   (at 0, cp->sounds[1][0:9, 0.500000]) [buf: 100] 
   (at 10, cp->sounds[1][10:19, 0.500000, loc: 0, pos: 0, scl: 1.000000]) [buf: 100] 
   (at 20, cp->sounds[1][20:29, 0.500000, loc: 0, pos: 10, scl: 1.000000]) [buf: 100] 
   (at 30, cp->sounds[1][30:39, 0.500000, loc: 0, pos: 20, scl: 1.000000]) [buf: 100] 
   (at 40, cp->sounds[1][40:49, 0.500000, loc: 0, pos: 30, scl: 1.000000]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 0.500000, loc: 0, pos: 40, scl: 1.000000]) [buf: 100] 
   (at 60, cp->sounds[1][60:69, 0.500000, loc: 0, pos: 50, scl: 1.000000]) [buf: 100] 
   (at 70, cp->sounds[1][70:79, 0.500000, loc: 0, pos: 60, scl: 1.000000]) [buf: 100] 
   (at 80, cp->sounds[1][80:89, 0.500000, loc: 0, pos: 70, scl: 1.000000]) [buf: 100] 
   (at 90, cp->sounds[1][90:99, 0.500000, loc: 0, pos: 80, scl: 1.000000]) [buf: 100] 
   (at 100, end_mark)
"))
	      (snd-display ";multi-tree 2: ~A" (display-edits ind 0 12 #f)))
	  (let ((scl-data (vct-scale! (channel->vct) 2.0)))
	    (if (not (vequal map-data scl-data))
		(snd-display ";map and scl->ptree 10:90 cosine disagree: ~A ~A" map-data scl-data)))
	  
	  (revert-sound)
	  (map-channel (lambda (y) 1.0) 0 100)
	  (cosine-channel 10 80)
	  (set! map-data (channel->vct))
	  (undo)
	  (do ((i 0 (1+ i)))
	      ((= i 10))
	    (scale-channel 0.5 (* i 10) 10))
	  (cosine-channel-via-ptree 10 80)
	  (let ((tree-data (vct-scale! (channel->vct) 2.0)))
	    (if (not (vequal map-data tree-data))
		(snd-display ";map and ptree 10:80 cosine disagree: ~A ~A" map-data tree-data)))
	  (if (not (string=? (display-edits ind 0 12 #f) "
 (ptree[0] 10 80) ; ptree 0 10 80 [12:11]:
   (at 0, cp->sounds[1][0:9, 0.500000]) [buf: 100] 
   (at 10, cp->sounds[1][10:19, 1.000000, loc: 0, pos: 0, scl: 0.500000]) [buf: 100] 
   (at 20, cp->sounds[1][20:29, 1.000000, loc: 0, pos: 10, scl: 0.500000]) [buf: 100] 
   (at 30, cp->sounds[1][30:39, 1.000000, loc: 0, pos: 20, scl: 0.500000]) [buf: 100] 
   (at 40, cp->sounds[1][40:49, 1.000000, loc: 0, pos: 30, scl: 0.500000]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 1.000000, loc: 0, pos: 40, scl: 0.500000]) [buf: 100] 
   (at 60, cp->sounds[1][60:69, 1.000000, loc: 0, pos: 50, scl: 0.500000]) [buf: 100] 
   (at 70, cp->sounds[1][70:79, 1.000000, loc: 0, pos: 60, scl: 0.500000]) [buf: 100] 
   (at 80, cp->sounds[1][80:89, 1.000000, loc: 0, pos: 70, scl: 0.500000]) [buf: 100] 
   (at 90, cp->sounds[1][90:99, 0.500000]) [buf: 100] 
   (at 100, end_mark)
"))
	      (snd-display ";multi-tree 3: ~A" (display-edits ind 0 12 #f)))
	  (let ((scl-data (vct-scale! (channel->vct) 2.0)))
	    (if (not (vequal map-data scl-data))
		(snd-display ";map and scl->ptree 10:80 cosine disagree: ~A ~A" map-data scl-data)))
	  
	  ;; ptree + ramp
	  (revert-sound)
	  (map-channel (lambda (y) 1.0) 0 100)
	  (env-channel '(0 0 1 1))
	  (cosine-channel 0 100)
	  (set! map-data (channel->vct))
	  (undo)
	  (cosine-channel-via-ptree 0 100)
	  (let ((tree-data (channel->vct)))
	    (if (not (vequal map-data tree-data))
		(snd-display ";ptree->ramp cosine disagree: ~A ~A" map-data tree-data)))
	  (do ((i 0 (1+ i)))
	      ((= i 10))
	    (scale-channel 0.5 (* i 10) 10))
	  (if (not (string=? (display-edits ind 0 13 #f) "
 (scale 90 10) ; scale-channel 0.5000 90 10 [13:11]:
   (at 0, cp->sounds[1][0:9, 0.500000, 0.000000 -> 0.090909, loc: 0, pos: 0, scl: 1.000000]) [buf: 100] 
   (at 10, cp->sounds[1][10:19, 0.500000, 0.101010 -> 0.191919, loc: 0, pos: 10, scl: 1.000000]) [buf: 100] 
   (at 20, cp->sounds[1][20:29, 0.500000, 0.202020 -> 0.292929, loc: 0, pos: 20, scl: 1.000000]) [buf: 100] 
   (at 30, cp->sounds[1][30:39, 0.500000, 0.303030 -> 0.393939, loc: 0, pos: 30, scl: 1.000000]) [buf: 100] 
   (at 40, cp->sounds[1][40:49, 0.500000, 0.404040 -> 0.494950, loc: 0, pos: 40, scl: 1.000000]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 0.500000, 0.505051 -> 0.595960, loc: 0, pos: 50, scl: 1.000000]) [buf: 100] 
   (at 60, cp->sounds[1][60:69, 0.500000, 0.606061 -> 0.696970, loc: 0, pos: 60, scl: 1.000000]) [buf: 100] 
   (at 70, cp->sounds[1][70:79, 0.500000, 0.707071 -> 0.797980, loc: 0, pos: 70, scl: 1.000000]) [buf: 100] 
   (at 80, cp->sounds[1][80:89, 0.500000, 0.808081 -> 0.898990, loc: 0, pos: 80, scl: 1.000000]) [buf: 100] 
   (at 90, cp->sounds[1][90:99, 0.500000, 0.909091 -> 1.000000, loc: 0, pos: 90, scl: 1.000000]) [buf: 100] 
   (at 100, end_mark)
"))
	      (snd-display ";multi-tree 4: ~A" (display-edits ind 0 13 #f)))
	  (let ((scl-data (vct-scale! (channel->vct) 2.0)))
	    (if (not (vequal map-data scl-data))
		(snd-display ";map and (scl) ptree->ramp cosine disagree: ~A ~A" map-data scl-data)))
	  
	  (revert-sound)
	  (map-channel (lambda (y) 1.0) 0 100)
	  (env-channel '(0 0 1 1))
	  (do ((i 0 (1+ i)))
	      ((= i 10))
	    (scale-channel 0.5 (* i 10) 10))
	  (cosine-channel-via-ptree 0 100)
	  (if (not (string=? (display-edits ind 0 13 #f) "
 (ptree[0] 0 100) ; ptree 0 0 100 [13:11]:
   (at 0, cp->sounds[1][0:9, 1.000000, 0.000000 -> 0.090909, loc: 0, pos: 0, scl: 0.500000]) [buf: 100] 
   (at 10, cp->sounds[1][10:19, 1.000000, 0.101010 -> 0.191919, loc: 0, pos: 10, scl: 0.500000]) [buf: 100] 
   (at 20, cp->sounds[1][20:29, 1.000000, 0.202020 -> 0.292929, loc: 0, pos: 20, scl: 0.500000]) [buf: 100] 
   (at 30, cp->sounds[1][30:39, 1.000000, 0.303030 -> 0.393939, loc: 0, pos: 30, scl: 0.500000]) [buf: 100] 
   (at 40, cp->sounds[1][40:49, 1.000000, 0.404040 -> 0.494950, loc: 0, pos: 40, scl: 0.500000]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 1.000000, 0.505051 -> 0.595960, loc: 0, pos: 50, scl: 0.500000]) [buf: 100] 
   (at 60, cp->sounds[1][60:69, 1.000000, 0.606061 -> 0.696970, loc: 0, pos: 60, scl: 0.500000]) [buf: 100] 
   (at 70, cp->sounds[1][70:79, 1.000000, 0.707071 -> 0.797980, loc: 0, pos: 70, scl: 0.500000]) [buf: 100] 
   (at 80, cp->sounds[1][80:89, 1.000000, 0.808081 -> 0.898990, loc: 0, pos: 80, scl: 0.500000]) [buf: 100] 
   (at 90, cp->sounds[1][90:99, 1.000000, 0.909091 -> 1.000000, loc: 0, pos: 90, scl: 0.500000]) [buf: 100] 
   (at 100, end_mark)
"))
	      (snd-display ";multi-tree 5: ~A" (display-edits ind 0 13 #f)))
	  (let ((scl-data (vct-scale! (channel->vct) 2.0)))
	    (if (not (vequal map-data scl-data))
		(snd-display ";map and ptree->ramp (scl) cosine disagree: ~A ~A" map-data scl-data)))
	  
	  (scale-channel 0.5)
	  (if (not (string=? (display-edits ind 0 14 #f) "
 (scale 0 100) ; scale-channel 0.5000 0 100 [14:11]:
   (at 0, cp->sounds[1][0:9, 0.500000, 0.000000 -> 0.090909, loc: 0, pos: 0, scl: 0.500000]) [buf: 100] 
   (at 10, cp->sounds[1][10:19, 0.500000, 0.101010 -> 0.191919, loc: 0, pos: 10, scl: 0.500000]) [buf: 100] 
   (at 20, cp->sounds[1][20:29, 0.500000, 0.202020 -> 0.292929, loc: 0, pos: 20, scl: 0.500000]) [buf: 100] 
   (at 30, cp->sounds[1][30:39, 0.500000, 0.303030 -> 0.393939, loc: 0, pos: 30, scl: 0.500000]) [buf: 100] 
   (at 40, cp->sounds[1][40:49, 0.500000, 0.404040 -> 0.494950, loc: 0, pos: 40, scl: 0.500000]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 0.500000, 0.505051 -> 0.595960, loc: 0, pos: 50, scl: 0.500000]) [buf: 100] 
   (at 60, cp->sounds[1][60:69, 0.500000, 0.606061 -> 0.696970, loc: 0, pos: 60, scl: 0.500000]) [buf: 100] 
   (at 70, cp->sounds[1][70:79, 0.500000, 0.707071 -> 0.797980, loc: 0, pos: 70, scl: 0.500000]) [buf: 100] 
   (at 80, cp->sounds[1][80:89, 0.500000, 0.808081 -> 0.898990, loc: 0, pos: 80, scl: 0.500000]) [buf: 100] 
   (at 90, cp->sounds[1][90:99, 0.500000, 0.909091 -> 1.000000, loc: 0, pos: 90, scl: 0.500000]) [buf: 100] 
   (at 100, end_mark)
"))
	      (snd-display ";multi-tree 5 + scl: ~A" (display-edits ind 0 14 #f)))
	  (let ((scl-data (vct-scale! (channel->vct) 4.0)))
	    (if (not (vequal map-data scl-data))
		(snd-display ";map and ptree->ramp (scl twice) cosine disagree: ~A ~A" map-data scl-data)))
	  
	  (revert-sound)
	  (map-channel (lambda (y) 1.0) 0 100)
	  (env-channel '(0 0 1 1))
	  (do ((i 0 (1+ i)))
	      ((= i 10))
	    (scale-channel 0.5 (* i 10) 10))
	  (cosine-channel-via-ptree 10 80)
	  (set! map-data (channel->vct))
	  (if (not (string=? (display-edits ind 0 13 #f) "
 (ptree[0] 10 80) ; ptree 0 10 80 [13:11]:
   (at 0, cp->sounds[1][0:9, 0.500000, 0.000000 -> 0.090909]) [buf: 100] 
   (at 10, cp->sounds[1][10:19, 1.000000, 0.101010 -> 0.191919, loc: 0, pos: 0, scl: 0.500000]) [buf: 100] 
   (at 20, cp->sounds[1][20:29, 1.000000, 0.202020 -> 0.292929, loc: 0, pos: 10, scl: 0.500000]) [buf: 100] 
   (at 30, cp->sounds[1][30:39, 1.000000, 0.303030 -> 0.393939, loc: 0, pos: 20, scl: 0.500000]) [buf: 100] 
   (at 40, cp->sounds[1][40:49, 1.000000, 0.404040 -> 0.494950, loc: 0, pos: 30, scl: 0.500000]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 1.000000, 0.505051 -> 0.595960, loc: 0, pos: 40, scl: 0.500000]) [buf: 100] 
   (at 60, cp->sounds[1][60:69, 1.000000, 0.606061 -> 0.696970, loc: 0, pos: 50, scl: 0.500000]) [buf: 100] 
   (at 70, cp->sounds[1][70:79, 1.000000, 0.707071 -> 0.797980, loc: 0, pos: 60, scl: 0.500000]) [buf: 100] 
   (at 80, cp->sounds[1][80:89, 1.000000, 0.808081 -> 0.898990, loc: 0, pos: 70, scl: 0.500000]) [buf: 100] 
   (at 90, cp->sounds[1][90:99, 0.500000, 0.909091 -> 1.000000]) [buf: 100] 
   (at 100, end_mark)
"))
	      (snd-display ";multi-tree 6: ~A" (display-edits ind 0 13 #f)))
	  
	  (revert-sound)
	  (map-channel (lambda (y) 1.0) 0 100)
	  (env-channel '(0 0 1 1))
	  (cosine-channel-via-ptree 10 80)
	  (do ((i 0 (1+ i)))
	      ((= i 10))
	    (scale-channel 0.5 (* i 10) 10))
	  (let ((scl-data (channel->vct)))
	    (if (not (vequal map-data scl-data))
		(snd-display ";ptree+ramp order matters? ~A ~A" map-data scl-data)))
	  
	  (revert-sound)
	  (map-channel (lambda (y) 1.0) 0 100)
	  (env-channel '(0 0 1 1))
	  (cosine-channel-via-ptree 15 70)
	  (do ((i 0 (1+ i)))
	      ((= i 10))
	    (scale-channel 0.5 (* i 10) 10))
	  (if (not (string=? (display-edits ind 0 13 #f) "
 (scale 90 10) ; scale-channel 0.5000 90 10 [13:13]:
   (at 0, cp->sounds[1][0:9, 0.500000, 0.000000 -> 0.090909]) [buf: 100] 
   (at 10, cp->sounds[1][10:14, 0.500000, 0.101010 -> 0.141414]) [buf: 100] 
   (at 15, cp->sounds[1][15:19, 0.500000, 0.151515 -> 0.191919, loc: 0, pos: 0, scl: 1.000000]) [buf: 100] 
   (at 20, cp->sounds[1][20:29, 0.500000, 0.202020 -> 0.292929, loc: 0, pos: 5, scl: 1.000000]) [buf: 100] 
   (at 30, cp->sounds[1][30:39, 0.500000, 0.303030 -> 0.393939, loc: 0, pos: 15, scl: 1.000000]) [buf: 100] 
   (at 40, cp->sounds[1][40:49, 0.500000, 0.404040 -> 0.494950, loc: 0, pos: 25, scl: 1.000000]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 0.500000, 0.505051 -> 0.595960, loc: 0, pos: 35, scl: 1.000000]) [buf: 100] 
   (at 60, cp->sounds[1][60:69, 0.500000, 0.606061 -> 0.696970, loc: 0, pos: 45, scl: 1.000000]) [buf: 100] 
   (at 70, cp->sounds[1][70:79, 0.500000, 0.707071 -> 0.797980, loc: 0, pos: 55, scl: 1.000000]) [buf: 100] 
   (at 80, cp->sounds[1][80:84, 0.500000, 0.808081 -> 0.848485, loc: 0, pos: 65, scl: 1.000000]) [buf: 100] 
   (at 85, cp->sounds[1][85:89, 0.500000, 0.858586 -> 0.898990]) [buf: 100] 
   (at 90, cp->sounds[1][90:99, 0.500000, 0.909091 -> 1.000000]) [buf: 100] 
   (at 100, end_mark)
"))
	      (snd-display ";multi-tree 7: ~A" (display-edits ind 0 13 #f)))
	  (close-sound ind)))

      (let ((ind (new-sound "test.snd")))
	(map-channel (lambda (y) 1.0) 0 100)
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (scale-channel 0.75 (* i 10) 10))
	(ptree-channel (lambda (y data forward)
			 (declare (y real) (data vct) (forward boolean))
			 (* y (vct-ref data 0)))
		       0 (frames) ind 0 #f #f
		       (lambda (pos dur)
			 (vct 0.5)))
	(ptree-channel (lambda (y data forward)
			 (declare (y real) (data vct) (forward boolean))
			 (* y (vct-ref data 0)))
		       20 45 ind 0 #f #f
		       (lambda (pos dur)
			 (vct 0.25)))
	(let ((data (channel->vct))
	      (orig (make-vct 100 1.0)))
	  (vct-scale! orig 0.75) ; scale-channel
	  (vct-scale! orig 0.5)  ; ptree-channel
	  (do ((i 20 (1+ i)))
	      ((= i 65))
	    (vct-set! orig i (* (vct-ref orig i) .25)))
	  (if (not (vvequal orig data))
	      (snd-display ";p2 pos test data: ~A" data))
	  (if (not (string=? (display-edits ind 0 13 #f) "
 (ptree[1] 20 45) ; ptree 1 20 45 [13:12]:
   (at 0, cp->sounds[1][0:9, 1.000000, loc: 0, pos: 0, scl: 0.750000]) [buf: 100] 
   (at 10, cp->sounds[1][10:19, 1.000000, loc: 0, pos: 10, scl: 0.750000]) [buf: 100] 
   (at 20, cp->sounds[1][20:29, 1.000000, loc2: 1, pos2: 0, scl2: 1.000000, loc: 0, pos: 20, scl: 0.750000]) [buf: 100] 
   (at 30, cp->sounds[1][30:39, 1.000000, loc2: 1, pos2: 10, scl2: 1.000000, loc: 0, pos: 30, scl: 0.750000]) [buf: 100] 
   (at 40, cp->sounds[1][40:49, 1.000000, loc2: 1, pos2: 20, scl2: 1.000000, loc: 0, pos: 40, scl: 0.750000]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 1.000000, loc2: 1, pos2: 30, scl2: 1.000000, loc: 0, pos: 50, scl: 0.750000]) [buf: 100] 
   (at 60, cp->sounds[1][60:64, 1.000000, loc2: 1, pos2: 40, scl2: 1.000000, loc: 0, pos: 60, scl: 0.750000]) [buf: 100] 
   (at 65, cp->sounds[1][65:69, 1.000000, loc: 0, pos: 65, scl: 0.750000]) [buf: 100] 
   (at 70, cp->sounds[1][70:79, 1.000000, loc: 0, pos: 70, scl: 0.750000]) [buf: 100] 
   (at 80, cp->sounds[1][80:89, 1.000000, loc: 0, pos: 80, scl: 0.750000]) [buf: 100] 
   (at 90, cp->sounds[1][90:99, 1.000000, loc: 0, pos: 90, scl: 0.750000]) [buf: 100] 
   (at 100, end_mark)
"))
	      (snd-display ";p2 pos multi: ~A" (display-edits ind 0 13 #f)))
	  (close-sound ind)))

      (let ((ind (new-sound "test.snd"))
	    (map-data #f))
	
	;; ptree + xramp
	(revert-sound)
	(map-channel (lambda (y) 1.0) 0 100)
	(env-sound '(0 0 1 1) 0 100 32.0)
	(cosine-channel 0 100)
	(set! map-data (channel->vct))
	(undo)
	(cosine-channel-via-ptree 0 100)
	(let ((tree-data (channel->vct)))
	  (if (not (vequal map-data tree-data))
	      (snd-display ";ptree->xramp cosine disagree: ~A ~A" map-data tree-data)))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (scale-channel 0.5 (* i 10) 10))
	(if (not (string=? (display-edits ind 0 13 #f) "
 (scale 90 10) ; scale-channel 0.5000 90 10 [13:11]:
   (at 0, cp->sounds[1][0:9, 0.500000, 0.000000 -> 0.315067, off: -0.032258, scl: 0.032258, loc: 0, pos: 0, scl: 1.000000]) [buf: 100] 
   (at 10, cp->sounds[1][10:19, 0.500000, 0.350074 -> 0.665141, off: -0.032258, scl: 0.032258, loc: 0, pos: 10, scl: 1.000000]) [buf: 100] 
   (at 20, cp->sounds[1][20:29, 0.500000, 0.700149 -> 1.015216, off: -0.032258, scl: 0.032258, loc: 0, pos: 20, scl: 1.000000]) [buf: 100] 
   (at 30, cp->sounds[1][30:39, 0.500000, 1.050223 -> 1.365290, off: -0.032258, scl: 0.032258, loc: 0, pos: 30, scl: 1.000000]) [buf: 100] 
   (at 40, cp->sounds[1][40:49, 0.500000, 1.400297 -> 1.715364, off: -0.032258, scl: 0.032258, loc: 0, pos: 40, scl: 1.000000]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 0.500000, 1.750372 -> 2.065439, off: -0.032258, scl: 0.032258, loc: 0, pos: 50, scl: 1.000000]) [buf: 100] 
   (at 60, cp->sounds[1][60:69, 0.500000, 2.100446 -> 2.415513, off: -0.032258, scl: 0.032258, loc: 0, pos: 60, scl: 1.000000]) [buf: 100] 
   (at 70, cp->sounds[1][70:79, 0.500000, 2.450520 -> 2.765587, off: -0.032258, scl: 0.032258, loc: 0, pos: 70, scl: 1.000000]) [buf: 100] 
   (at 80, cp->sounds[1][80:89, 0.500000, 2.800595 -> 3.115662, off: -0.032258, scl: 0.032258, loc: 0, pos: 80, scl: 1.000000]) [buf: 100] 
   (at 90, cp->sounds[1][90:99, 0.500000, 3.150669 -> 3.465736, off: -0.032258, scl: 0.032258, loc: 0, pos: 90, scl: 1.000000]) [buf: 100] 
   (at 100, end_mark)
"))
	    (snd-display ";multi-tree 9: ~A" (display-edits ind 0 13 #f)))
	(let ((scl-data (vct-scale! (channel->vct) 2.0)))
	  (if (not (vequal map-data scl-data))
	      (snd-display ";map and (scl) ptree->xramp cosine disagree: ~A ~A" map-data scl-data)))
	
	(revert-sound)
	(map-channel (lambda (y) 1.0) 0 100)
	(env-sound '(0 0 1 1) 0 100 32.0)
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (scale-channel 0.5 (* i 10) 10))
	(cosine-channel-via-ptree 0 100)
	(if (not (string=? (display-edits ind 0 13 #f) "
 (ptree[0] 0 100) ; ptree 0 0 100 [13:11]:
   (at 0, cp->sounds[1][0:9, 1.000000, 0.000000 -> 0.315067, off: -0.032258, scl: 0.032258, loc: 0, pos: 0, scl: 0.500000]) [buf: 100] 
   (at 10, cp->sounds[1][10:19, 1.000000, 0.350074 -> 0.665141, off: -0.032258, scl: 0.032258, loc: 0, pos: 10, scl: 0.500000]) [buf: 100] 
   (at 20, cp->sounds[1][20:29, 1.000000, 0.700149 -> 1.015216, off: -0.032258, scl: 0.032258, loc: 0, pos: 20, scl: 0.500000]) [buf: 100] 
   (at 30, cp->sounds[1][30:39, 1.000000, 1.050223 -> 1.365290, off: -0.032258, scl: 0.032258, loc: 0, pos: 30, scl: 0.500000]) [buf: 100] 
   (at 40, cp->sounds[1][40:49, 1.000000, 1.400297 -> 1.715364, off: -0.032258, scl: 0.032258, loc: 0, pos: 40, scl: 0.500000]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 1.000000, 1.750372 -> 2.065439, off: -0.032258, scl: 0.032258, loc: 0, pos: 50, scl: 0.500000]) [buf: 100] 
   (at 60, cp->sounds[1][60:69, 1.000000, 2.100446 -> 2.415513, off: -0.032258, scl: 0.032258, loc: 0, pos: 60, scl: 0.500000]) [buf: 100] 
   (at 70, cp->sounds[1][70:79, 1.000000, 2.450520 -> 2.765587, off: -0.032258, scl: 0.032258, loc: 0, pos: 70, scl: 0.500000]) [buf: 100] 
   (at 80, cp->sounds[1][80:89, 1.000000, 2.800595 -> 3.115662, off: -0.032258, scl: 0.032258, loc: 0, pos: 80, scl: 0.500000]) [buf: 100] 
   (at 90, cp->sounds[1][90:99, 1.000000, 3.150669 -> 3.465736, off: -0.032258, scl: 0.032258, loc: 0, pos: 90, scl: 0.500000]) [buf: 100] 
   (at 100, end_mark)
"))
	    (snd-display ";multi-tree 10: ~A" (display-edits ind 0 13 #f)))
	(let ((scl-data (vct-scale! (channel->vct) 2.0)))
	  (if (not (vequal map-data scl-data))
	      (snd-display ";map and ptree->xramp (scl) cosine disagree: ~A ~A" map-data scl-data)))
	
	(revert-sound)
	(map-channel (lambda (y) 1.0) 0 100)
	(env-sound '(0 0 1 1) 0 100 32.0)
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (scale-channel 0.5 (* i 10) 10))
	(cosine-channel-via-ptree 10 80)
	(set! map-data (channel->vct))
	(if (not (string=? (display-edits ind 0 13 #f) "
 (ptree[0] 10 80) ; ptree 0 10 80 [13:11]:
   (at 0, cp->sounds[1][0:9, 0.500000, 0.000000 -> 0.315067, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 10, cp->sounds[1][10:19, 1.000000, 0.350074 -> 0.665141, off: -0.032258, scl: 0.032258, loc: 0, pos: 0, scl: 0.500000]) [buf: 100] 
   (at 20, cp->sounds[1][20:29, 1.000000, 0.700149 -> 1.015216, off: -0.032258, scl: 0.032258, loc: 0, pos: 10, scl: 0.500000]) [buf: 100] 
   (at 30, cp->sounds[1][30:39, 1.000000, 1.050223 -> 1.365290, off: -0.032258, scl: 0.032258, loc: 0, pos: 20, scl: 0.500000]) [buf: 100] 
   (at 40, cp->sounds[1][40:49, 1.000000, 1.400297 -> 1.715364, off: -0.032258, scl: 0.032258, loc: 0, pos: 30, scl: 0.500000]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 1.000000, 1.750372 -> 2.065439, off: -0.032258, scl: 0.032258, loc: 0, pos: 40, scl: 0.500000]) [buf: 100] 
   (at 60, cp->sounds[1][60:69, 1.000000, 2.100446 -> 2.415513, off: -0.032258, scl: 0.032258, loc: 0, pos: 50, scl: 0.500000]) [buf: 100] 
   (at 70, cp->sounds[1][70:79, 1.000000, 2.450520 -> 2.765587, off: -0.032258, scl: 0.032258, loc: 0, pos: 60, scl: 0.500000]) [buf: 100] 
   (at 80, cp->sounds[1][80:89, 1.000000, 2.800595 -> 3.115662, off: -0.032258, scl: 0.032258, loc: 0, pos: 70, scl: 0.500000]) [buf: 100] 
   (at 90, cp->sounds[1][90:99, 0.500000, 3.150669 -> 3.465736, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 100, end_mark)
"))
	    (snd-display ";multi-tree 11: ~A" (display-edits ind 0 13 #f)))
	
	(revert-sound)
	(map-channel (lambda (y) 1.0) 0 100)
	(env-sound '(0 0 1 1) 0 100 32.0)
	(cosine-channel-via-ptree 10 80)
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (scale-channel 0.5 (* i 10) 10))
	(let ((scl-data (channel->vct)))
	  (if (not (vequal map-data scl-data))
	      (snd-display ";ptree+xramp order matters? ~A ~A" map-data scl-data)))
	
	(revert-sound)
	(map-channel (lambda (y) 1.0) 0 100)
	(env-sound '(0 0 1 1) 0 100 32.0)
	(cosine-channel-via-ptree 15 70)
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (scale-channel 0.5 (* i 10) 10))
	(if (not (string=? (display-edits ind 0 13 #f) "
 (scale 90 10) ; scale-channel 0.5000 90 10 [13:13]:
   (at 0, cp->sounds[1][0:9, 0.500000, 0.000000 -> 0.315067, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 10, cp->sounds[1][10:14, 0.500000, 0.350074 -> 0.490104, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 15, cp->sounds[1][15:19, 0.500000, 0.525111 -> 0.665141, off: -0.032258, scl: 0.032258, loc: 0, pos: 0, scl: 1.000000]) [buf: 100] 
   (at 20, cp->sounds[1][20:29, 0.500000, 0.700149 -> 1.015216, off: -0.032258, scl: 0.032258, loc: 0, pos: 5, scl: 1.000000]) [buf: 100] 
   (at 30, cp->sounds[1][30:39, 0.500000, 1.050223 -> 1.365290, off: -0.032258, scl: 0.032258, loc: 0, pos: 15, scl: 1.000000]) [buf: 100] 
   (at 40, cp->sounds[1][40:49, 0.500000, 1.400297 -> 1.715364, off: -0.032258, scl: 0.032258, loc: 0, pos: 25, scl: 1.000000]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 0.500000, 1.750372 -> 2.065439, off: -0.032258, scl: 0.032258, loc: 0, pos: 35, scl: 1.000000]) [buf: 100] 
   (at 60, cp->sounds[1][60:69, 0.500000, 2.100446 -> 2.415513, off: -0.032258, scl: 0.032258, loc: 0, pos: 45, scl: 1.000000]) [buf: 100] 
   (at 70, cp->sounds[1][70:79, 0.500000, 2.450520 -> 2.765587, off: -0.032258, scl: 0.032258, loc: 0, pos: 55, scl: 1.000000]) [buf: 100] 
   (at 80, cp->sounds[1][80:84, 0.500000, 2.800595 -> 2.940624, off: -0.032258, scl: 0.032258, loc: 0, pos: 65, scl: 1.000000]) [buf: 100] 
   (at 85, cp->sounds[1][85:89, 0.500000, 2.975632 -> 3.115662, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 90, cp->sounds[1][90:99, 0.500000, 3.150669 -> 3.465736, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 100, end_mark)
"))
	    (snd-display ";multi-tree 12: ~A" (display-edits ind 0 13 #f)))
	
	(close-sound ind))
      
      ;; ptree2
      (let ((ind (new-sound "test.snd"))
	    (case1 #f)
	    (case2 #f))
	(map-chan (lambda (y) 1.0) 0 10)
	(ptree-channel (lambda (y) (* y 0.5)))
	(if (not (vequal (channel->vct) (make-vct 11 0.5)))
	    (snd-display ";ptree2 0: ~A" (channel->vct)))
	(if (not (string=? (display-edits ind 0 2) "
 (ptree[0] 0 11) ; ptree 0 0 11 [2:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, loc: 0, pos: 0, scl: 1.000000, code: (lambda (y) (* y 0.5))]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ptree2 3: ~A" (display-edits ind 0 2)))
	(ptree-channel (lambda (y) (* y 1.5)))
	(if (not (vequal (channel->vct) (make-vct 11 0.75)))
	    (snd-display ";ptree2 1: ~A" (channel->vct)))
	(if (not (string=? (display-edits ind 0 3) "
 (ptree[1] 0 11) ; ptree 1 0 11 [3:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, loc2: 1, pos2: 0, scl2: 1.000000, loc: 0, pos: 0, scl: 1.000000, code: (lambda (y) (* y 0.5))]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ptree2 4: ~A" (display-edits ind 0 3)))
	(undo)
	(scale-by 1.5)
	(if (not (vequal (channel->vct) (make-vct 11 0.75)))
	    (snd-display ";ptree2 5: ~A" (channel->vct)))
	(if (not (string=? (display-edits ind 0 3) "
 (scale 0 11) ; scale-channel 1.5000 0 11 [3:2]:
   (at 0, cp->sounds[1][0:10, 1.500000, loc: 0, pos: 0, scl: 1.000000, code: (lambda (y) (* y 0.5))]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ptree2 6: ~A" (display-edits ind 0 3)))
	(ptree-channel (lambda (y) (* y 0.1)))
	(if (not (vequal (channel->vct) (make-vct 11 0.075)))
	    (snd-display ";ptree2 7: ~A" (channel->vct)))
	(if (not (string=? (display-edits ind 0 4) "
 (ptree[1] 0 11) ; ptree 1 0 11 [4:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, loc2: 1, pos2: 0, scl2: 1.500000, loc: 0, pos: 0, scl: 1.000000, code: (lambda (y) (* y 0.5))]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ptree2 8: ~A" (display-edits ind 0 4)))
	(undo 3)
	(scale-by 0.5)
	(ptree-channel (lambda (y) (* y 1.5)))
	(scale-by 2.0)
	(ptree-channel (lambda (y) (* y 0.1)))
	(scale-by 3.0)
	(if (not (vequal (channel->vct) (make-vct 11 0.45)))
	    (snd-display ";ptree2 9: ~A" (channel->vct)))
	(if (not (string=? (display-edits ind 0 6) "
 (scale 0 11) ; scale-channel 3.0000 0 11 [6:2]:
   (at 0, cp->sounds[1][0:10, 3.000000, loc2: 1, pos2: 0, scl2: 2.000000, loc: 0, pos: 0, scl: 0.500000, code: (lambda (y) (* y 1.5))]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ptree2 10: ~A" (display-edits ind 0 6)))
	(undo 2)
	(ptree-channel (lambda (y) (* y 0.1)) 2 4)
	(scale-by 3.0)
	(if (not (vequal (channel->vct) (vct 4.500 4.500 0.450 0.450 0.450 0.450 4.500 4.500 4.500 4.500 4.500)))
	    (snd-display ";ptree2 11: ~A" (channel->vct)))
	(if (not (string=? (display-edits ind 0 6) "
 (scale 0 11) ; scale-channel 3.0000 0 11 [6:4]:
   (at 0, cp->sounds[1][0:1, 6.000000, loc: 0, pos: 0, scl: 0.500000, code: (lambda (y) (* y 1.5))]) [buf: 11] 
   (at 2, cp->sounds[1][2:5, 3.000000, loc2: 1, pos2: 0, scl2: 2.000000, loc: 0, pos: 2, scl: 0.500000, code: (lambda (y) (* y 1.5))]) [buf: 11] 
   (at 6, cp->sounds[1][6:10, 6.000000, loc: 0, pos: 6, scl: 0.500000, code: (lambda (y) (* y 1.5))]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ptree2 12: ~A" (display-edits ind 0 6)))
	(close-sound ind))

      ;; ptree2-zero
      (let ((ind (new-sound "test.snd"))
	    (case1 #f)
	    (case2 #f))
	(map-chan (lambda (y) 1.0) 0 10)
	(scale-by 0.0)
	(ptree-channel (lambda (y) (+ y 0.5)))
	(if (not (vequal (channel->vct) (make-vct 11 0.5)))
	    (snd-display ";ptree2-zero 0: ~A" (channel->vct)))
	(ptree-channel (lambda (y) (+ y 0.25)))
	(if (not (vequal (channel->vct) (make-vct 11 0.75)))
	    (snd-display ";ptree2-zero 1: ~A" (channel->vct)))
	(if (not (string=? (display-edits ind 0 4) "
 (ptree[1] 0 11) ; ptree 1 0 11 [4:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, loc2: 1, pos2: 0, scl2: 1.000000, loc: 0, pos: 0, scl: 0.000000, code: (lambda (y) (+ y 0.5))]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ptree2-zero 2: ~A" (display-edits ind 0 4)))
	(undo 3)
	(scale-channel 0.0 2 4)
	(ptree-channel (lambda (y) (+ y 0.5)))
	(ptree-channel (lambda (y) (+ y 0.25)))
	(if (not (vequal (channel->vct) (vct 1.750 1.750 0.750 0.750 0.750 0.750 1.750 1.750 1.750 1.750 1.750)))
	    (snd-display ";ptree2-zero 3: ~A" (channel->vct)))

	;; ptree2-ramp
	(revert-sound)
	(map-chan (lambda (y) 1.0) 0 10)
	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y) (* y .5)))
	(ptree-channel (lambda (y) (+ y .25)))
	(if (not (vequal (channel->vct) (vct 0.250 0.300 0.350 0.400 0.450 0.500 0.550 0.600 0.650 0.700 0.750)))
	    (snd-display ";ptree2-ramp 1: ~A" (channel->vct)))
	(if (not (string=? (display-edits ind 0 4) "
 (ptree[1] 0 11) ; ptree 1 0 11 [4:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, -0.000000 -> 1.000000, loc2: 1, pos2: 0, scl2: 1.000000, loc: 0, pos: 0, scl: 1.000000, code: (lambda (y) (* y 0.5))]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ptree2-ramp 2: ~A" (display-edits ind 0 4)))
	(scale-by 0.5)
	(if (not (vequal (channel->vct) (vct 0.125 0.150 0.175 0.200 0.225 0.250 0.275 0.300 0.325 0.350 0.375)))
	    (snd-display ";ptree2-ramp 3: ~A" (channel->vct)))
	(if (not (string=? (display-edits ind 0 5) "
 (scale 0 11) ; scale-channel 0.5000 0 11 [5:2]:
   (at 0, cp->sounds[1][0:10, 0.500000, -0.000000 -> 1.000000, loc2: 1, pos2: 0, scl2: 1.000000, loc: 0, pos: 0, scl: 1.000000, code: (lambda (y) (* y 0.5))]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ptree2-ramp 4: ~A" (display-edits ind 0 5)))

	;; ptree+ramp3
	(revert-sound)
	(map-chan (lambda (y) 1.0) 0 10)
	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y) (* y .5)))
	(if (not (string=? (display-edits ind 0 5 #f) "
 (ptree[0] 0 11) ; ptree 0 0 11 [5:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, -0.000000 -> 1.000000, -0.000000 -> 1.000000, -0.000000 -> 1.000000, loc: 0, pos: 0, scl: 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ptree-ramp3: ~A" (display-edits ind 0 5 #f)))
	(undo 1)
	(ptree-channel (lambda (y data forward)
			 (declare (y real) (data vct) (forward boolean))
			 (* y (vct-ref data 0)))
		       0 (frames) ind 0 #f #t
		       (lambda (pos dur)
			 (vct 0.5)))
	(if (not (string=? (display-edits ind 0 5 #f) "
 (ptree[0] 0 11) ; ptree 0 0 11 [5:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, -0.000000 -> 1.000000, -0.000000 -> 1.000000, -0.000000 -> 1.000000, loc: 0, pos: 0, scl: 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ptreec-ramp3: ~A" (display-edits ind 0 5 #f)))
	(undo 1)
	(xen-channel (lambda (y data forward) (* y (car data))) 0 (frames) ind 0 #f #f (lambda (p d) (list 0.25)))
	(if (not (string=? (display-edits ind 0 5 #f) "
 (xen[0] 0 11) ; xen 0 0 11 [5:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, -0.000000 -> 1.000000, -0.000000 -> 1.000000, -0.000000 -> 1.000000, loc: 0, pos: 0, scl: 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";xen-ramp3: ~A" (display-edits ind 0 5 #f)))
	(undo 4)
	(xramp-channel 0.0 1.0 32.0)
	(xramp-channel 0.0 1.0 32.0)
	(ramp-channel 0.0 1.0)
	(if (not (string=? (display-edits ind 0 4) "
 (ramp 0 11) ; ramp-channel 0.0000 1.0000 0 11 [4:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, 0.000000 -> 3.465736, 0.000000 -> 3.465736, -0.000000 -> 1.000000, off: -0.032258, scl: 0.032258, off2: -0.032258, scl2: 0.032258]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp-xramp2: ~A" (display-edits ind 0 4)))
	(close-sound ind))

      ;; ramp2
      (let ((ind (new-sound "test.snd")))
	(map-chan (lambda (y) 1.0) 0 10)

	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(if (not (string=? (display-edits ind 0 3) "
 (ramp 0 11) ; ramp-channel 0.0000 1.0000 0 11 [3:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, -0.000000 -> 1.000000, -0.000000 -> 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp2 0: ~A" (display-edits ind 0 3)))
	(if (not (vequal (channel->vct) (vct 0.000 0.010 0.040 0.090 0.160 0.250 0.360 0.490 0.640 0.810 1.000)))
	    (snd-display ";ramp2 (1): ~A" (channel->vct)))
	(scale-channel 0.5)
	(if (not (string=? (display-edits ind 0 4) "
 (scale 0 11) ; scale-channel 0.5000 0 11 [4:2]:
   (at 0, cp->sounds[1][0:10, 0.500000, -0.000000 -> 1.000000, -0.000000 -> 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp2 1: ~A" (display-edits ind 0 4)))
	(undo)
	(scale-channel 0.5 0 5)
	(if (not (string=? (display-edits ind 0 4) "
 (scale 0 5) ; scale-channel 0.5000 0 5 [4:3]:
   (at 0, cp->sounds[1][0:4, 0.500000, -0.000000 -> 0.400000, -0.000000 -> 0.400000]) [buf: 11] 
   (at 5, cp->sounds[1][5:10, 1.000000, 0.500000 -> 1.000000, 0.500000 -> 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp2 2: ~A" (display-edits ind 0 4)))
	(if (not (vequal (channel->vct) (vct 0.000 0.005 0.020 0.045 0.080 0.250 0.360 0.490 0.640 0.810 1.000)))
	    (snd-display ";ramp2 (2): ~A" (channel->vct)))
	(undo)
	(scale-channel 0.5 2 4)
	(if (not (string=? (display-edits ind 0 4) "
 (scale 2 4) ; scale-channel 0.5000 2 4 [4:4]:
   (at 0, cp->sounds[1][0:1, 1.000000, -0.000000 -> 0.100000, -0.000000 -> 0.100000]) [buf: 11] 
   (at 2, cp->sounds[1][2:5, 0.500000, 0.200000 -> 0.500000, 0.200000 -> 0.500000]) [buf: 11] 
   (at 6, cp->sounds[1][6:10, 1.000000, 0.600000 -> 1.000000, 0.600000 -> 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp2 3: ~A" (display-edits ind 0 4)))
	(undo 2)
	(ramp-channel 0.75 0.25)
	(if (not (string=? (display-edits ind 0 3) "
 (ramp 0 11) ; ramp-channel 0.7500 0.2500 0 11 [3:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, -0.000000 -> 1.000000, 0.750000 -> 0.250000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp2 4: ~A" (display-edits ind 0 3)))
	(undo)
	(ramp-channel .2 .6 2 6)
	(if (not (string=? (display-edits ind 0 3) "
 (ramp 2 6) ; ramp-channel 0.2000 0.6000 2 6 [3:4]:
   (at 0, cp->sounds[1][0:1, 1.000000, -0.000000 -> 0.100000]) [buf: 11] 
   (at 2, cp->sounds[1][2:7, 1.000000, 0.200000 -> 0.700000, 0.200000 -> 0.600000]) [buf: 11] 
   (at 8, cp->sounds[1][8:10, 1.000000, 0.800000 -> 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp2 5: ~A" (display-edits ind 0 3)))
	(scale-channel 0.5 0 5)
	(if (not (string=? (display-edits ind 0 4) "
 (scale 0 5) ; scale-channel 0.5000 0 5 [4:5]:
   (at 0, cp->sounds[1][0:1, 0.500000, -0.000000 -> 0.100000]) [buf: 11] 
   (at 2, cp->sounds[1][2:4, 0.500000, 0.200000 -> 0.400000, 0.200000 -> 0.360000]) [buf: 11] 
   (at 5, cp->sounds[1][5:7, 1.000000, 0.500000 -> 0.700000, 0.440000 -> 0.600000]) [buf: 11] 
   (at 8, cp->sounds[1][8:10, 1.000000, 0.800000 -> 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp2 6: ~A" (display-edits ind 0 4)))
	(undo)
	(set! (sample 4) .5)
	(if (not (string=? (display-edits ind 0 4) "
 (set 4 1) ; set! sample [4:6]:
   (at 0, cp->sounds[1][0:1, 1.000000, -0.000000 -> 0.100000]) [buf: 11] 
   (at 2, cp->sounds[1][2:3, 1.000000, 0.200000 -> 0.300000, 0.200000 -> 0.280000]) [buf: 11] 
   (at 4, cp->sounds[2][0:0, 1.000000]) [buf: 1] 
   (at 5, cp->sounds[1][5:7, 1.000000, 0.500000 -> 0.700000, 0.440000 -> 0.600000]) [buf: 11] 
   (at 8, cp->sounds[1][8:10, 1.000000, 0.800000 -> 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp2 7: ~A" (display-edits ind 0 4)))
	(undo 3)
	(close-sound ind))

      (let ((ind (new-sound "test.snd")))
	(map-channel (lambda (y) 1.0) 0 100)

	;; multi-ramp2
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (scale-channel 0.5 (* i 10) 10))
	(ramp-channel 0.0 1.0)
	(ramp-channel 1.0 0.0)
	(if (not (string=? (display-edits ind 0 13) "
 (ramp 0 100) ; ramp-channel 1.0000 0.0000 0 100 [13:11]:
   (at 0, cp->sounds[1][0:9, 0.500000, 0.000000 -> 0.090909, 1.000000 -> 0.909091]) [buf: 100] 
   (at 10, cp->sounds[1][10:19, 0.500000, 0.101010 -> 0.191919, 0.898990 -> 0.808081]) [buf: 100] 
   (at 20, cp->sounds[1][20:29, 0.500000, 0.202020 -> 0.292929, 0.797980 -> 0.707071]) [buf: 100] 
   (at 30, cp->sounds[1][30:39, 0.500000, 0.303030 -> 0.393939, 0.696970 -> 0.606061]) [buf: 100] 
   (at 40, cp->sounds[1][40:49, 0.500000, 0.404040 -> 0.494950, 0.595960 -> 0.505051]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 0.500000, 0.505051 -> 0.595960, 0.494950 -> 0.404040]) [buf: 100] 
   (at 60, cp->sounds[1][60:69, 0.500000, 0.606061 -> 0.696970, 0.393939 -> 0.303030]) [buf: 100] 
   (at 70, cp->sounds[1][70:79, 0.500000, 0.707071 -> 0.797980, 0.292929 -> 0.202020]) [buf: 100] 
   (at 80, cp->sounds[1][80:89, 0.500000, 0.808081 -> 0.898990, 0.191919 -> 0.101010]) [buf: 100] 
   (at 90, cp->sounds[1][90:99, 0.500000, 0.909091 -> 1.000000, 0.090909 -> -0.000000]) [buf: 100] 
   (at 100, end_mark)
"))
	    (snd-display ";multi-ramp2 1: ~A" (display-edits ind 0 13)))
	(undo 12)
	(ramp-channel 0.0 1.0 10 20)
	(ramp-channel 0.0 1.0 50 10)
	(ramp-channel 0.0 1.0 25 10)
	(if (not (string=? (display-edits ind 0 4) "
 (ramp 25 10) ; ramp-channel 0.0000 1.0000 25 10 [4:8]:
   (at 0, cp->sounds[1][0:9, 1.000000]) [buf: 100] 
   (at 10, cp->sounds[1][10:24, 1.000000, -0.000000 -> 0.736842]) [buf: 100] 
   (at 25, cp->sounds[1][25:29, 1.000000, 0.789474 -> 1.000000, -0.000000 -> 0.444444]) [buf: 100] 
   (at 30, cp->sounds[1][30:34, 1.000000, 0.555556 -> 1.000000]) [buf: 100] 
   (at 35, cp->sounds[1][35:49, 1.000000]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 1.000000, -0.000000 -> 1.000000]) [buf: 100] 
   (at 60, cp->sounds[1][60:99, 1.000000]) [buf: 100] 
   (at 100, end_mark)
"))
	    (snd-display ";multi-ramp2 2: ~A" (display-edits ind 0 4)))
	(close-sound ind))

      (let ((ind (new-sound "test.snd")))
	(map-chan (lambda (y) 1.0) 0 10)

	;; ramp ptree cases
	(for-each
	 (lambda (func func-zero name)
	   (func)
	   (ramp-channel 0 1)
	   (if (not (string=? (display-edits ind 0 3 #f) "
 (ramp 0 11) ; ramp-channel 0.0000 1.0000 0 11 [3:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, -0.000000 -> 1.000000, loc: 0, pos: 0, scl: 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	       (snd-display ";~A 1: ~A" name (display-edits ind 0 3 #f)))
	(if (not (vequal (channel->vct) (vct 0.000 0.050 0.100 0.150 0.200 0.250 0.300 0.350 0.400 0.450 0.500)))
	    (snd-display ";~A 1: ~A" name (channel->vct)))
	(ramp-channel 0 1)
	(if (not (string=? (display-edits ind 0 4 #f) "
 (ramp 0 11) ; ramp-channel 0.0000 1.0000 0 11 [4:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, -0.000000 -> 1.000000, -0.000000 -> 1.000000, loc: 0, pos: 0, scl: 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";~A 2: ~A" name (display-edits ind 0 4 #f)))
	(if (not (vequal (channel->vct) (vct 0.000 0.005 0.020 0.045 0.080 0.125 0.180 0.245 0.320 0.405 0.500)))
	    (snd-display ";~A 2: ~A" name (channel->vct)))
	(ramp-channel 0 1)
	(if (not (string=? (display-edits ind 0 5 #f) "
 (ramp 0 11) ; ramp-channel 0.0000 1.0000 0 11 [5:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, -0.000000 -> 1.000000, -0.000000 -> 1.000000, -0.000000 -> 1.000000, loc: 0, pos: 0, scl: 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";~A 3: ~A" name (display-edits ind 0 5 #f)))
	(if (not (vequal (channel->vct) (vct 0.000 0.000 0.004 0.013 0.032 0.062 0.108 0.171 0.256 0.364 0.500)))
	    (snd-display ";~A 3: ~A" name (channel->vct)))
	    
	(undo 4)
	(scale-by 0.0)
	(func-zero)
	(ramp-channel 0 1)
	(if (not (string=? (display-edits ind 0 4 #f) "
 (ramp 0 11) ; ramp-channel 0.0000 1.0000 0 11 [4:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, -0.000000 -> 1.000000, loc: 0, pos: 0, scl: 0.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";~A-zero 1: ~A" name (display-edits ind 0 4 #f)))
	(if (not (vequal (channel->vct) (vct 0.000 0.050 0.100 0.150 0.200 0.250 0.300 0.350 0.400 0.450 0.500)))
	    (snd-display ";~A-zero 1: ~A" name (channel->vct)))
	(ramp-channel 0 1)
	(if (not (string=? (display-edits ind 0 5 #f) "
 (ramp 0 11) ; ramp-channel 0.0000 1.0000 0 11 [5:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, -0.000000 -> 1.000000, -0.000000 -> 1.000000, loc: 0, pos: 0, scl: 0.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";~A-zero 2: ~A" name (display-edits ind 0 5 #f)))
	(if (not (vequal (channel->vct) (vct 0.000 0.005 0.020 0.045 0.080 0.125 0.180 0.245 0.320 0.405 0.500)))
	    (snd-display ";~A-zero 2: ~A" name (channel->vct)))
	(ramp-channel 0 1)
	(if (not (string=? (display-edits ind 0 6 #f) "
 (ramp 0 11) ; ramp-channel 0.0000 1.0000 0 11 [6:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, -0.000000 -> 1.000000, -0.000000 -> 1.000000, -0.000000 -> 1.000000, loc: 0, pos: 0, scl: 0.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";~A-zero 3: ~A" name (display-edits ind 0 6 #f)))
	(if (not (vequal (channel->vct) (vct 0.000 0.000 0.004 0.013 0.032 0.062 0.108 0.171 0.256 0.364 0.500)))
	    (snd-display ";~A-zero 3: ~A" name (channel->vct)))
	(undo 5)
	)
	 (list 
	  (lambda () (ptree-channel (lambda (y) (* y 0.5))))
	  (lambda () (xen-channel (lambda (y data forward) (* y (car data))) 0 (frames) ind 0 #f #f (lambda (p d) (list 0.5))))
	  (lambda () (ptree-channel
		      (lambda (y data forward)
			(declare (y real) (data vct) (forward boolean))
			(* y (vct-ref data 0)))
		      0 (frames) ind 0 #f #f (lambda (p d) (vct 0.5)))))
	 (list 
	  (lambda () (ptree-channel (lambda (y) (+ y 0.5))))
	  (lambda () (xen-channel (lambda (y data forward) (+ y (car data))) 0 (frames) ind 0 #f #f (lambda (p d) (list 0.5))))
	  (lambda () (ptree-channel
		      (lambda (y data forward)
			(declare (y real) (data vct) (forward boolean))
			(+ y (vct-ref data 0)))
		      0 (frames) ind 0 #f #f (lambda (p d) (vct 0.5)))))
	 (list "ramp-ptree" "ramp-xen" "ramp-ptreec"))

	(close-sound ind))

      (let ((ind (new-sound "test.snd")))
	(map-chan (lambda (y) 1.0) 0 10)

	;; xramp ptree cases
	(for-each
	 (lambda (func func-zero name twice)
	   (func)
	   (xramp-channel 0 1 32)
	   (if (not (string=? (display-edits ind 0 3 #f) "
 (ramp 0 11) ; xramp-channel 0.0000 1.0000 32.0000 0 11 [3:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, 0.000000 -> 3.465736, off: -0.032258, scl: 0.032258, loc: 0, pos: 0, scl: 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	       (snd-display ";~A 1: ~A" name (display-edits ind 0 3 #f)))
	(if (not (vequal (channel->vct) (vct 0.000 0.007 0.016 0.029 0.048 0.075 0.113 0.166 0.242 0.349 0.500)))
	    (snd-display ";~A 1: ~A" name (channel->vct)))
	(if twice
	    (begin
	      (xramp-channel 0 1 32)
	      (if (not (string=? (display-edits ind 0 4 #f) "
 (ramp 0 11) ; xramp-channel 0.0000 1.0000 32.0000 0 11 [4:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, 0.000000 -> 3.465736, 0.000000 -> 3.465736, off: -0.032258, scl: 0.032258, off2: -0.032258, scl2: 0.032258, loc: 0, pos: 0, scl: 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
		  (snd-display ";~A 2: ~A" name (display-edits ind 0 4 #f)))
	      (if (not (vequal (channel->vct) (vct 0.000 0.000 0.001 0.002 0.005 0.011 0.025 0.055 0.117 0.243 0.500)))
		  (snd-display ";~A 2: ~A" name (channel->vct)))
	      (undo 1)))
	(undo 2)
	(scale-by 0.0)
	(func-zero)
	(xramp-channel 0 1 32)
	(if (not (string=? (display-edits ind 0 4 #f) "
 (ramp 0 11) ; xramp-channel 0.0000 1.0000 32.0000 0 11 [4:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, 0.000000 -> 3.465736, off: -0.032258, scl: 0.032258, loc: 0, pos: 0, scl: 0.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";~A-zero 1: ~A" name (display-edits ind 0 4 #f)))
	(if (not (vequal (channel->vct) (vct 0.000 0.007 0.016 0.029 0.048 0.075 0.113 0.166 0.242 0.349 0.500)))
	    (snd-display ";~A-zero 1: ~A" name (channel->vct)))
	(if twice
	    (begin
	      (xramp-channel 0 1 32)
	      (if (not (string=? (display-edits ind 0 5 #f) "
 (ramp 0 11) ; xramp-channel 0.0000 1.0000 32.0000 0 11 [5:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, 0.000000 -> 3.465736, 0.000000 -> 3.465736, off: -0.032258, scl: 0.032258, off2: -0.032258, scl2: 0.032258, loc: 0, pos: 0, scl: 0.000000]) [buf: 11] 
   (at 11, end_mark)
"))
		  (snd-display ";~A-zero 2: ~A" name (display-edits ind 0 5 #f)))
	      (if (not (vequal (channel->vct) (vct 0.000 0.000 0.001 0.002 0.005 0.011 0.025 0.055 0.117 0.243 0.500)))
		  (snd-display ";~A-zero 2: ~A" name (channel->vct)))
	      (undo 1)))
	(undo 3))
	 (list 
	  (lambda () (ptree-channel (lambda (y) (* y 0.5))))
	  (lambda () (xen-channel (lambda (y data forward) (* y (car data))) 0 (frames) ind 0 #f #f (lambda (p d) (list 0.5))))
	  (lambda () (ptree-channel
		      (lambda (y data forward)
			(declare (y real) (data vct) (forward boolean))
			(* y (vct-ref data 0)))
		      0 (frames) ind 0 #f #f (lambda (p d) (vct 0.5)))))
	 (list 
	  (lambda () (ptree-channel (lambda (y) (+ y 0.5))))
	  (lambda () (xen-channel (lambda (y data forward) (+ y (car data))) 0 (frames) ind 0 #f #f (lambda (p d) (list 0.5))))
	  (lambda () (ptree-channel
		      (lambda (y data forward)
			(declare (y real) (data vct) (forward boolean))
			(+ y (vct-ref data 0)))
		      0 (frames) ind 0 #f #f (lambda (p d) (vct 0.5)))))
	 (list "xramp-ptree" "xramp-xen" "xramp-ptreec")
	 (list #t #f #t))

	(close-sound ind))

      ;; ramp-xramp, xramp-ramp
      (let ((ind (new-sound "test.snd"))
	    (case1 #f)
	    (case2 #f))
	(map-chan (lambda (y) 1.0) 0 10)

	(ramp-channel 0.0 1.0)
	(xramp-channel 0.0 1.0 32.0)
	(if (not (string=? (display-edits ind 0 3) "
 (ramp 0 11) ; xramp-channel 0.0000 1.0000 32.0000 0 11 [3:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, -0.000000 -> 1.000000, 0.000000 -> 3.465736, off2: -0.032258, scl2: 0.032258]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp-xramp 0: ~A" (display-edits ind 0 3)))
	(set! case1 (channel->vct))
	(if (not (vequal case1 (vct 0.000 0.001 0.006 0.018 0.039 0.075 0.135 0.233 0.387 0.628 1.000)))
	    (snd-display ";ramp-xramp (1): ~A" case1))
	(scale-channel 0.5)
	(if (not (string=? (display-edits ind 0 4) "
 (scale 0 11) ; scale-channel 0.5000 0 11 [4:2]:
   (at 0, cp->sounds[1][0:10, 0.500000, -0.000000 -> 1.000000, 0.000000 -> 3.465736, off2: -0.032258, scl2: 0.032258]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp-xramp 1: ~A" (display-edits ind 0 4)))
	(undo)
	(scale-channel 0.5 0 5)
	(if (not (string=? (display-edits ind 0 4) "
 (scale 0 5) ; scale-channel 0.5000 0 5 [4:3]:
   (at 0, cp->sounds[1][0:4, 0.500000, -0.000000 -> 0.400000, 0.000000 -> 1.386294, off2: -0.032258, scl2: 0.032258]) [buf: 11] 
   (at 5, cp->sounds[1][5:10, 1.000000, 0.500000 -> 1.000000, 1.732868 -> 3.465736, off2: -0.032258, scl2: 0.032258]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp-xramp 2: ~A" (display-edits ind 0 4)))
	(set! case2 (channel->vct))
	(if (not (vequal case2 (vct 0.000 0.001 0.003 0.009 0.019 0.075 0.135 0.233 0.387 0.628 1.000)))
	    (snd-display ";ramp-xramp (2): ~A" case2))
	(undo)
	(scale-channel 0.5 2 4)
	(if (not (string=? (display-edits ind 0 4) "
 (scale 2 4) ; scale-channel 0.5000 2 4 [4:4]:
   (at 0, cp->sounds[1][0:1, 1.000000, -0.000000 -> 0.100000, 0.000000 -> 0.346574, off2: -0.032258, scl2: 0.032258]) [buf: 11] 
   (at 2, cp->sounds[1][2:5, 0.500000, 0.200000 -> 0.500000, 0.693147 -> 1.732868, off2: -0.032258, scl2: 0.032258]) [buf: 11] 
   (at 6, cp->sounds[1][6:10, 1.000000, 0.600000 -> 1.000000, 2.079442 -> 3.465736, off2: -0.032258, scl2: 0.032258]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp-xramp 3: ~A" (display-edits ind 0 4)))
	(undo 2)
	(xramp-channel 0.75 0.25 32.0)
	(if (not (string=? (display-edits ind 0 3) "
 (ramp 0 11) ; xramp-channel 0.7500 0.2500 32.0000 0 11 [3:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, -0.000000 -> 1.000000, 3.465736 -> 0.000000, off2: 0.233871, scl2: 0.016129]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp-xramp 4: ~A" (display-edits ind 0 3)))
	(undo)
	(xramp-channel .2 .6 3.0 2 6)
	(if (not (string=? (display-edits ind 0 3) "
 (ramp 2 6) ; xramp-channel 0.2000 0.6000 3.0000 2 6 [3:4]:
   (at 0, cp->sounds[1][0:1, 1.000000, -0.000000 -> 0.100000]) [buf: 11] 
   (at 2, cp->sounds[1][2:7, 1.000000, 0.200000 -> 0.700000, -0.000000 -> 1.098612, off2: -0.000000, scl2: 0.200000]) [buf: 11] 
   (at 8, cp->sounds[1][8:10, 1.000000, 0.800000 -> 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp-xramp 5: ~A" (display-edits ind 0 3)))
	(scale-channel 0.5 0 5)
	(if (not (string=? (display-edits ind 0 4) "
 (scale 0 5) ; scale-channel 0.5000 0 5 [4:5]:
   (at 0, cp->sounds[1][0:1, 0.500000, -0.000000 -> 0.100000]) [buf: 11] 
   (at 2, cp->sounds[1][2:4, 0.500000, 0.200000 -> 0.400000, -0.000000 -> 0.439445, off2: -0.000000, scl2: 0.200000]) [buf: 11] 
   (at 5, cp->sounds[1][5:7, 1.000000, 0.500000 -> 0.700000, 0.659167 -> 1.098612, off2: -0.000000, scl2: 0.200000]) [buf: 11] 
   (at 8, cp->sounds[1][8:10, 1.000000, 0.800000 -> 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp-xramp 6: ~A" (display-edits ind 0 4)))
	(undo)
	(set! (sample 4) .5)
	(if (not (string=? (display-edits ind 0 4) "
 (set 4 1) ; set! sample [4:6]:
   (at 0, cp->sounds[1][0:1, 1.000000, -0.000000 -> 0.100000]) [buf: 11] 
   (at 2, cp->sounds[1][2:3, 1.000000, 0.200000 -> 0.300000, -0.000000 -> 0.219722, off2: -0.000000, scl2: 0.200000]) [buf: 11] 
   (at 4, cp->sounds[2][0:0, 1.000000]) [buf: 1] 
   (at 5, cp->sounds[1][5:7, 1.000000, 0.500000 -> 0.700000, 0.659167 -> 1.098612, off2: -0.000000, scl2: 0.200000]) [buf: 11] 
   (at 8, cp->sounds[1][8:10, 1.000000, 0.800000 -> 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp-xramp 7: ~A" (display-edits ind 0 4)))
	(revert-sound)
	(map-chan (lambda (y) 1.0) 0 10)

	(xramp-channel 0.0 1.0 32.0)
	(ramp-channel 0.0 1.0)
	(if (not (string=? (display-edits ind 0 3) "
 (ramp 0 11) ; ramp-channel 0.0000 1.0000 0 11 [3:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, 0.000000 -> 3.465736, -0.000000 -> 1.000000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";xramp-ramp 0: ~A" (display-edits ind 0 3)))
	(if (not (vequal case1 (channel->vct)))
	    (snd-display ";xramp-ramp (1): ~A" (channel->vct)))
	(scale-channel 0.5)
	(if (not (string=? (display-edits ind 0 4) "
 (scale 0 11) ; scale-channel 0.5000 0 11 [4:2]:
   (at 0, cp->sounds[1][0:10, 0.500000, 0.000000 -> 3.465736, -0.000000 -> 1.000000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";xramp-ramp 1: ~A" (display-edits ind 0 4)))
	(undo)
	(scale-channel 0.5 0 5)
	(if (not (string=? (display-edits ind 0 4) "
 (scale 0 5) ; scale-channel 0.5000 0 5 [4:3]:
   (at 0, cp->sounds[1][0:4, 0.500000, 0.000000 -> 1.386294, -0.000000 -> 0.400000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 5, cp->sounds[1][5:10, 1.000000, 1.732868 -> 3.465736, 0.500000 -> 1.000000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";xramp-ramp 2: ~A" (display-edits ind 0 4)))
	(if (not (vequal case2 (channel->vct)))
	    (snd-display ";xramp-ramp (2): ~A" (channel->vct)))
	(undo)
	(scale-channel 0.5 2 4)
	(if (not (string=? (display-edits ind 0 4) "
 (scale 2 4) ; scale-channel 0.5000 2 4 [4:4]:
   (at 0, cp->sounds[1][0:1, 1.000000, 0.000000 -> 0.346574, -0.000000 -> 0.100000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 2, cp->sounds[1][2:5, 0.500000, 0.693147 -> 1.732868, 0.200000 -> 0.500000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 6, cp->sounds[1][6:10, 1.000000, 2.079442 -> 3.465736, 0.600000 -> 1.000000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";xramp-ramp 3: ~A" (display-edits ind 0 4)))
	(undo 2)
	(ramp-channel 0.75 0.25)
	(if (not (string=? (display-edits ind 0 3) "
 (ramp 0 11) ; ramp-channel 0.7500 0.2500 0 11 [3:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, 0.000000 -> 3.465736, 0.750000 -> 0.250000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";xramp-ramp 4: ~A" (display-edits ind 0 3)))
	(undo)
	(ramp-channel .2 .6 2 6)
	(if (not (string=? (display-edits ind 0 3) "
 (ramp 2 6) ; ramp-channel 0.2000 0.6000 2 6 [3:4]:
   (at 0, cp->sounds[1][0:1, 1.000000, 0.000000 -> 0.346574, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 2, cp->sounds[1][2:7, 1.000000, 0.693147 -> 2.426015, 0.200000 -> 0.600000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 8, cp->sounds[1][8:10, 1.000000, 2.772589 -> 3.465736, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";xramp-ramp 5: ~A" (display-edits ind 0 3)))
	(scale-channel 0.5 0 5)
	(if (not (string=? (display-edits ind 0 4) "
 (scale 0 5) ; scale-channel 0.5000 0 5 [4:5]:
   (at 0, cp->sounds[1][0:1, 0.500000, 0.000000 -> 0.346574, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 2, cp->sounds[1][2:4, 0.500000, 0.693147 -> 1.386294, 0.200000 -> 0.360000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 5, cp->sounds[1][5:7, 1.000000, 1.732868 -> 2.426015, 0.440000 -> 0.600000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 8, cp->sounds[1][8:10, 1.000000, 2.772589 -> 3.465736, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";xramp-ramp 6: ~A" (display-edits ind 0 4)))
	(undo)
	(set! (sample 4) .5)
	(if (not (string=? (display-edits ind 0 4) "
 (set 4 1) ; set! sample [4:6]:
   (at 0, cp->sounds[1][0:1, 1.000000, 0.000000 -> 0.346574, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 2, cp->sounds[1][2:3, 1.000000, 0.693147 -> 1.039721, 0.200000 -> 0.280000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 4, cp->sounds[2][0:0, 1.000000]) [buf: 1] 
   (at 5, cp->sounds[1][5:7, 1.000000, 1.732868 -> 2.426015, 0.440000 -> 0.600000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 8, cp->sounds[1][8:10, 1.000000, 2.772589 -> 3.465736, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";xramp-ramp 7: ~A" (display-edits ind 0 4)))
	(close-sound ind))

      ;; ramp2+xramp
      (let ((ind (new-sound "test.snd"))
	    (case1 #f)
	    (case2 #f))
	(map-chan (lambda (y) 1.0) 0 10)
	(xramp-channel 0.0 1.0 32.0)
	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(if (not (string=? (display-edits ind 0 4) "
 (ramp 0 11) ; ramp-channel 0.0000 1.0000 0 11 [4:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, 0.000000 -> 3.465736, -0.000000 -> 1.000000, -0.000000 -> 1.000000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp2+xramp 0: ~A" (display-edits ind 0 4)))
	(set! case1 (channel->vct))
	(if (not (vequal case1 (vct 0.000 0.000 0.001 0.005 0.015 0.038 0.081 0.163 0.310 0.565 1.000)))
	    (snd-display ";ramp2+xramp (1): ~A" case1))
	(scale-channel 0.5)
	(if (not (string=? (display-edits ind 0 5) "
 (scale 0 11) ; scale-channel 0.5000 0 11 [5:2]:
   (at 0, cp->sounds[1][0:10, 0.500000, 0.000000 -> 3.465736, -0.000000 -> 1.000000, -0.000000 -> 1.000000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp2+xramp 1: ~A" (display-edits ind 0 5)))
	(undo)
	(scale-channel 0.5 0 5)
	(if (not (string=? (display-edits ind 0 5) "
 (scale 0 5) ; scale-channel 0.5000 0 5 [5:3]:
   (at 0, cp->sounds[1][0:4, 0.500000, 0.000000 -> 1.386294, -0.000000 -> 0.400000, -0.000000 -> 0.400000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 5, cp->sounds[1][5:10, 1.000000, 1.732868 -> 3.465736, 0.500000 -> 1.000000, 0.500000 -> 1.000000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp2+xramp 2: ~A" (display-edits ind 0 5)))
	(set! case2 (channel->vct))
	(if (not (vequal case2 (vct 0.000 0.000 0.001 0.003 0.008 0.038 0.081 0.163 0.310 0.565 1.000)))
	    (snd-display ";ramp2+xramp (2): ~A" case2))
	(undo)
	(scale-channel 0.5 2 4)
	(if (not (string=? (display-edits ind 0 5) "
 (scale 2 4) ; scale-channel 0.5000 2 4 [5:4]:
   (at 0, cp->sounds[1][0:1, 1.000000, 0.000000 -> 0.346574, -0.000000 -> 0.100000, -0.000000 -> 0.100000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 2, cp->sounds[1][2:5, 0.500000, 0.693147 -> 1.732868, 0.200000 -> 0.500000, 0.200000 -> 0.500000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 6, cp->sounds[1][6:10, 1.000000, 2.079442 -> 3.465736, 0.600000 -> 1.000000, 0.600000 -> 1.000000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp2+xramp 3: ~A" (display-edits ind 0 5)))
	(undo 2)
	(ramp-channel 0.75 0.25)
	(if (not (string=? (display-edits ind 0 4) "
 (ramp 0 11) ; ramp-channel 0.7500 0.2500 0 11 [4:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, 0.000000 -> 3.465736, -0.000000 -> 1.000000, 0.750000 -> 0.250000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp2+xramp 4: ~A" (display-edits ind 0 4)))
	(undo)
	(ramp-channel .2 .6 2 6)
	(if (not (string=? (display-edits ind 0 4) "
 (ramp 2 6) ; ramp-channel 0.2000 0.6000 2 6 [4:4]:
   (at 0, cp->sounds[1][0:1, 1.000000, 0.000000 -> 0.346574, -0.000000 -> 0.100000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 2, cp->sounds[1][2:7, 1.000000, 0.693147 -> 2.426015, 0.200000 -> 0.700000, 0.200000 -> 0.600000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 8, cp->sounds[1][8:10, 1.000000, 2.772589 -> 3.465736, 0.800000 -> 1.000000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp2+xramp 5: ~A" (display-edits ind 0 4)))
	(scale-channel 0.5 0 5)
	(if (not (string=? (display-edits ind 0 5) "
 (scale 0 5) ; scale-channel 0.5000 0 5 [5:5]:
   (at 0, cp->sounds[1][0:1, 0.500000, 0.000000 -> 0.346574, -0.000000 -> 0.100000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 2, cp->sounds[1][2:4, 0.500000, 0.693147 -> 1.386294, 0.200000 -> 0.400000, 0.200000 -> 0.360000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 5, cp->sounds[1][5:7, 1.000000, 1.732868 -> 2.426015, 0.500000 -> 0.700000, 0.440000 -> 0.600000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 8, cp->sounds[1][8:10, 1.000000, 2.772589 -> 3.465736, 0.800000 -> 1.000000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp2+xramp 6: ~A" (display-edits ind 0 5)))
	(undo)
	(set! (sample 4) .5)
	(if (not (string=? (display-edits ind 0 5) "
 (set 4 1) ; set! sample [5:6]:
   (at 0, cp->sounds[1][0:1, 1.000000, 0.000000 -> 0.346574, -0.000000 -> 0.100000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 2, cp->sounds[1][2:3, 1.000000, 0.693147 -> 1.039721, 0.200000 -> 0.300000, 0.200000 -> 0.280000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 4, cp->sounds[2][0:0, 1.000000]) [buf: 1] 
   (at 5, cp->sounds[1][5:7, 1.000000, 1.732868 -> 2.426015, 0.500000 -> 0.700000, 0.440000 -> 0.600000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 8, cp->sounds[1][8:10, 1.000000, 2.772589 -> 3.465736, 0.800000 -> 1.000000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp2+xramp 7: ~A" (display-edits ind 0 5)))
	(revert-sound)
	(map-chan (lambda (y) 1.0) 0 10)
	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(xramp-channel 0.0 1.0 32.0)
	(if (not (string=? (display-edits ind 0 4) "
 (set 0 11) ; xramp-channel [4:2]:
   (at 0, cp->sounds[2][0:10, 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";xramp+ramp2 0: ~A" (display-edits ind 0 4)))
	(if (not (vequal case1 (channel->vct)))
	    (snd-display ";xramp+ramp2 (1): ~A" (channel->vct)))

	(revert-sound ind)
	(map-channel (lambda (y) 1.0) 0 100)
	(scale-channel 0.75)
	(ramp-channel .5 1)
	(ptree-channel (lambda (y) (* y (/ 1.0 0.75))))
	(scale-channel 2.0)
	(ramp-channel 1 .5)
	(ptree-channel (lambda (y) (* y .25)))
	(scale-channel 4.0)
	(ramp-channel 0 1)
	(if (fneq (maxamp) 1.0)
	    (snd-display ";rprpr max: ~A" (maxamp)))

	(close-sound ind))

      (let ((ind (new-sound "test.snd"))
	    (case3 #f))
	(map-channel (lambda (y) 1.0) 0 100)
	(scale-channel 0.5)
	(xramp-channel 1.0 0.0 32.0)
	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(set! case3 (channel->vct))
	(undo 4)

	;; multi-ramp2+xramp
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (scale-channel 0.5 (* i 10) 10))
	(xramp-channel 1.0 0.0 32.0)
	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(if (not (string=? (display-edits ind 0 14) "
 (ramp 0 100) ; ramp-channel 0.0000 1.0000 0 100 [14:11]:
   (at 0, cp->sounds[1][0:9, 0.500000, 3.465736 -> 3.150669, 0.000000 -> 0.090909, 0.000000 -> 0.090909, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 10, cp->sounds[1][10:19, 0.500000, 3.115662 -> 2.800595, 0.101010 -> 0.191919, 0.101010 -> 0.191919, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 20, cp->sounds[1][20:29, 0.500000, 2.765587 -> 2.450521, 0.202020 -> 0.292929, 0.202020 -> 0.292929, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 30, cp->sounds[1][30:39, 0.500000, 2.415513 -> 2.100446, 0.303030 -> 0.393939, 0.303030 -> 0.393939, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 40, cp->sounds[1][40:49, 0.500000, 2.065439 -> 1.750372, 0.404040 -> 0.494950, 0.404040 -> 0.494950, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 0.500000, 1.715364 -> 1.400297, 0.505051 -> 0.595960, 0.505051 -> 0.595960, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 60, cp->sounds[1][60:69, 0.500000, 1.365290 -> 1.050223, 0.606061 -> 0.696970, 0.606061 -> 0.696970, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 70, cp->sounds[1][70:79, 0.500000, 1.015216 -> 0.700149, 0.707071 -> 0.797980, 0.707071 -> 0.797980, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 80, cp->sounds[1][80:89, 0.500000, 0.665141 -> 0.350074, 0.808081 -> 0.898990, 0.808081 -> 0.898990, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 90, cp->sounds[1][90:99, 0.500000, 0.315067 -> -0.000000, 0.909091 -> 1.000000, 0.909091 -> 1.000000, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 100, end_mark)
"))
	    (snd-display ";multi-ramp2+xramp 1: ~A" (display-edits ind 0 14)))
	(if (not (vequal case3 (channel->vct)))
	    (snd-display ";multi-ramp2+xramp: ~A" (channel->vct)))
	(revert-sound)
	(map-channel (lambda (y) 1.0) 0 100)
	(xramp-channel 1.0 0.0 32.0)

	(ramp-channel 0.0 1.0 10 20)
	(ramp-channel 0.0 1.0 50 10)
	(ramp-channel 0.0 1.0 25 10)
	(if (not (string=? (display-edits ind 0 5) "
 (ramp 25 10) ; ramp-channel 0.0000 1.0000 25 10 [5:8]:
   (at 0, cp->sounds[1][0:9, 1.000000, 3.465736 -> 3.150669, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 10, cp->sounds[1][10:24, 1.000000, 3.115662 -> 2.625557, -0.000000 -> 0.736842, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 25, cp->sounds[1][25:29, 1.000000, 2.590550 -> 2.450520, 0.789474 -> 1.000000, -0.000000 -> 0.444444, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 30, cp->sounds[1][30:34, 1.000000, 2.415513 -> 2.275483, 0.555556 -> 1.000000, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 35, cp->sounds[1][35:49, 1.000000, 2.240476 -> 1.750372, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 1.000000, 1.715364 -> 1.400297, -0.000000 -> 1.000000, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 60, cp->sounds[1][60:99, 1.000000, 1.365290 -> 0.000000, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 100, end_mark)
"))
	    (snd-display ";multi-ramp2+xramp 2: ~A" (display-edits ind 0 5)))
	(close-sound ind))

      (let ((ind (new-sound "test.snd"))
	    (case3 #f))
	(map-channel (lambda (y) 1.0) 0 100)
	(scale-channel 0.5)
	(ramp-channel 0.0 1.0)
	(xramp-channel 1.0 0.0 32.0)
	(set! case3 (channel->vct))
	(undo 3)

	;; multi-ramp-xramp
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (scale-channel 0.5 (* i 10) 10))
	(ramp-channel 0.0 1.0)
	(xramp-channel 1.0 0.0 32.0)
	(if (not (string=? (display-edits ind 0 13) "
 (ramp 0 100) ; xramp-channel 1.0000 0.0000 32.0000 0 100 [13:11]:
   (at 0, cp->sounds[1][0:9, 0.500000, 0.000000 -> 0.090909, 3.465736 -> 3.150669, off2: -0.032258, scl2: 0.032258]) [buf: 100] 
   (at 10, cp->sounds[1][10:19, 0.500000, 0.101010 -> 0.191919, 3.115662 -> 2.800595, off2: -0.032258, scl2: 0.032258]) [buf: 100] 
   (at 20, cp->sounds[1][20:29, 0.500000, 0.202020 -> 0.292929, 2.765587 -> 2.450521, off2: -0.032258, scl2: 0.032258]) [buf: 100] 
   (at 30, cp->sounds[1][30:39, 0.500000, 0.303030 -> 0.393939, 2.415513 -> 2.100446, off2: -0.032258, scl2: 0.032258]) [buf: 100] 
   (at 40, cp->sounds[1][40:49, 0.500000, 0.404040 -> 0.494950, 2.065439 -> 1.750372, off2: -0.032258, scl2: 0.032258]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 0.500000, 0.505051 -> 0.595960, 1.715364 -> 1.400297, off2: -0.032258, scl2: 0.032258]) [buf: 100] 
   (at 60, cp->sounds[1][60:69, 0.500000, 0.606061 -> 0.696970, 1.365290 -> 1.050223, off2: -0.032258, scl2: 0.032258]) [buf: 100] 
   (at 70, cp->sounds[1][70:79, 0.500000, 0.707071 -> 0.797980, 1.015216 -> 0.700149, off2: -0.032258, scl2: 0.032258]) [buf: 100] 
   (at 80, cp->sounds[1][80:89, 0.500000, 0.808081 -> 0.898990, 0.665141 -> 0.350074, off2: -0.032258, scl2: 0.032258]) [buf: 100] 
   (at 90, cp->sounds[1][90:99, 0.500000, 0.909091 -> 1.000000, 0.315067 -> -0.000000, off2: -0.032258, scl2: 0.032258]) [buf: 100] 
   (at 100, end_mark)
"))
	    (snd-display ";multi-ramp-xramp 1: ~A" (display-edits ind 0 13)))
	(if (not (vequal case3 (channel->vct)))
	    (snd-display ";multi-ramp-xramp: ~A" (channel->vct)))
	(undo 12)
	(xramp-channel 0.0 1.0 3.0 10 20)
	(xramp-channel 0.0 1.0 3.0 50 10)
	(xramp-channel 0.0 1.0 3.0 25 10)
	(if (not (string=? (display-edits ind 0 4) "
 (ramp 25 10) ; xramp-channel 0.0000 1.0000 3.0000 25 10 [4:8]:
   (at 0, cp->sounds[1][0:9, 1.000000]) [buf: 100] 
   (at 10, cp->sounds[1][10:24, 1.000000, -0.000000 -> 0.809504, off: -0.500000, scl: 0.500000]) [buf: 100] 
   (at 25, cp->sounds[1][25:29, 1.000000, 0.867325 -> 1.098612, 0.000000 -> 0.488272, off: -0.500000, scl: 0.500000, off2: -0.500000, scl2: 0.500000]) [buf: 100] 
   (at 30, cp->sounds[1][30:34, 1.000000, 0.610340 -> 1.098612, off: -0.500000, scl: 0.500000]) [buf: 100] 
   (at 35, cp->sounds[1][35:49, 1.000000]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 1.000000, 0.000000 -> 1.098612, off: -0.500000, scl: 0.500000]) [buf: 100] 
   (at 60, cp->sounds[1][60:99, 1.000000]) [buf: 100] 
   (at 100, end_mark)
"))
	    (snd-display ";multi-ramp-xramp 2: ~A" (display-edits ind 0 4)))
	(revert-sound)

	(map-channel (lambda (y) 1.0) 0 100)
	;; multi-xramp-ramp
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (scale-channel 0.5 (* i 10) 10))
	(xramp-channel 1.0 0.0 32.0)
	(ramp-channel 0.0 1.0)
	(if (not (string=? (display-edits ind 0 13) "
 (ramp 0 100) ; ramp-channel 0.0000 1.0000 0 100 [13:11]:
   (at 0, cp->sounds[1][0:9, 0.500000, 3.465736 -> 3.150669, 0.000000 -> 0.090909, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 10, cp->sounds[1][10:19, 0.500000, 3.115662 -> 2.800595, 0.101010 -> 0.191919, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 20, cp->sounds[1][20:29, 0.500000, 2.765587 -> 2.450521, 0.202020 -> 0.292929, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 30, cp->sounds[1][30:39, 0.500000, 2.415513 -> 2.100446, 0.303030 -> 0.393939, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 40, cp->sounds[1][40:49, 0.500000, 2.065439 -> 1.750372, 0.404040 -> 0.494950, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 0.500000, 1.715364 -> 1.400297, 0.505051 -> 0.595960, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 60, cp->sounds[1][60:69, 0.500000, 1.365290 -> 1.050223, 0.606061 -> 0.696970, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 70, cp->sounds[1][70:79, 0.500000, 1.015216 -> 0.700149, 0.707071 -> 0.797980, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 80, cp->sounds[1][80:89, 0.500000, 0.665141 -> 0.350074, 0.808081 -> 0.898990, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 90, cp->sounds[1][90:99, 0.500000, 0.315067 -> -0.000000, 0.909091 -> 1.000000, off: -0.032258, scl: 0.032258]) [buf: 100] 
   (at 100, end_mark)
"))
	    (snd-display ";multi-xramp-ramp 1: ~A" (display-edits ind 0 13)))
	(if (not (vequal case3 (channel->vct)))
	    (snd-display ";case3 xramp-ramp: ~A" (channel->vct)))
	(undo 12)
	(ramp-channel 0.0 1.0 10 20)
	(ramp-channel 0.0 1.0 50 10)
	(ramp-channel 0.0 1.0 25 10)
	(if (not (string=? (display-edits ind 0 4) "
 (ramp 25 10) ; ramp-channel 0.0000 1.0000 25 10 [4:8]:
   (at 0, cp->sounds[1][0:9, 1.000000]) [buf: 100] 
   (at 10, cp->sounds[1][10:24, 1.000000, -0.000000 -> 0.736842]) [buf: 100] 
   (at 25, cp->sounds[1][25:29, 1.000000, 0.789474 -> 1.000000, -0.000000 -> 0.444444]) [buf: 100] 
   (at 30, cp->sounds[1][30:34, 1.000000, 0.555556 -> 1.000000]) [buf: 100] 
   (at 35, cp->sounds[1][35:49, 1.000000]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 1.000000, -0.000000 -> 1.000000]) [buf: 100] 
   (at 60, cp->sounds[1][60:99, 1.000000]) [buf: 100] 
   (at 100, end_mark)
"))
	    (snd-display ";multi-xramp-ramp 2: ~A" (display-edits ind 0 4)))
	(close-sound ind))

      ;; xramp2
      (let ((ind (new-sound "test.snd")))
	(map-chan (lambda (y) 1.0) 0 10)

	(xramp-channel 0.0 1.0 2.0)
	(xramp-channel 0.0 1.0 2.0)
	(if (not (string=? (display-edits ind 0 3) "
 (ramp 0 11) ; xramp-channel 0.0000 1.0000 2.0000 0 11 [3:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, 0.000000 -> 0.693147, 0.000000 -> 0.693147, off: -1.000000, scl: 1.000000, off2: -1.000000, scl2: 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";xramp2 0: ~A" (display-edits ind 0 3)))
	(if (not (vequal (channel->vct) (vct 0.000 0.005 0.022 0.053 0.102 0.172 0.266 0.390 0.549 0.750 1.000)))
	    (snd-display ";xramp2 (1): ~A" (channel->vct)))
	(scale-channel 0.5)
	(if (not (string=? (display-edits ind 0 4) "
 (scale 0 11) ; scale-channel 0.5000 0 11 [4:2]:
   (at 0, cp->sounds[1][0:10, 0.500000, 0.000000 -> 0.693147, 0.000000 -> 0.693147, off: -1.000000, scl: 1.000000, off2: -1.000000, scl2: 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";xramp2 1: ~A" (display-edits ind 0 4)))
	(undo)
	(scale-channel 0.5 0 5)
	(if (not (string=? (display-edits ind 0 4) "
 (scale 0 5) ; scale-channel 0.5000 0 5 [4:3]:
   (at 0, cp->sounds[1][0:4, 0.500000, 0.000000 -> 0.277259, 0.000000 -> 0.277259, off: -1.000000, scl: 1.000000, off2: -1.000000, scl2: 1.000000]) [buf: 11] 
   (at 5, cp->sounds[1][5:10, 1.000000, 0.346574 -> 0.693147, 0.346574 -> 0.693147, off: -1.000000, scl: 1.000000, off2: -1.000000, scl2: 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";xramp2 2: ~A" (display-edits ind 0 4)))
	(if (not (vequal (channel->vct) (vct 0.000 0.003 0.011 0.027 0.051 0.172 0.266 0.390 0.549 0.750 1.000)))
	    (snd-display ";xramp2 (2): ~A" (channel->vct)))
	(undo)
	(scale-channel 0.5 2 4)
	(if (not (string=? (display-edits ind 0 4) "
 (scale 2 4) ; scale-channel 0.5000 2 4 [4:4]:
   (at 0, cp->sounds[1][0:1, 1.000000, 0.000000 -> 0.069315, 0.000000 -> 0.069315, off: -1.000000, scl: 1.000000, off2: -1.000000, scl2: 1.000000]) [buf: 11] 
   (at 2, cp->sounds[1][2:5, 0.500000, 0.138629 -> 0.346574, 0.138629 -> 0.346574, off: -1.000000, scl: 1.000000, off2: -1.000000, scl2: 1.000000]) [buf: 11] 
   (at 6, cp->sounds[1][6:10, 1.000000, 0.415888 -> 0.693147, 0.415888 -> 0.693147, off: -1.000000, scl: 1.000000, off2: -1.000000, scl2: 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";xramp2 3: ~A" (display-edits ind 0 4)))
	(undo 2)
	(xramp-channel 0.75 0.25 0.3)
	(if (and (not (string=? (display-edits ind 0 3) "
 (ramp 0 11) ; xramp-channel 0.7500 0.2500 0.3000 0 11 [3:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, 0.000000 -> 0.693147, -1.203973 -> -0.000000, off: -1.000000, scl: 1.000000, off2: 0.964286, scl2: -0.714286]) [buf: 11] 
   (at 11, end_mark)
"))
		 (not (string=? (display-edits ind 0 3) "
 (ramp 0 11) ; xramp-channel 0.7500 0.2500 0.3000 0 11 [3:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, 0.000000 -> 0.693147, -1.203973 -> 0.000000, off: -1.000000, scl: 1.000000, off2: 0.964286, scl2: -0.714286]) [buf: 11] 
   (at 11, end_mark)
")))
	    (snd-display ";xramp2 4: ~A" (display-edits ind 0 3)))
	(undo)
	(xramp-channel .2 .6 32.0 2 6)
	(if (not (string=? (display-edits ind 0 3) "
 (ramp 2 6) ; xramp-channel 0.2000 0.6000 32.0000 2 6 [3:4]:
   (at 0, cp->sounds[1][0:1, 1.000000, 0.000000 -> 0.069315, off: -1.000000, scl: 1.000000]) [buf: 11] 
   (at 2, cp->sounds[1][2:7, 1.000000, 0.138629 -> 0.485203, 0.000000 -> 3.465736, off: -1.000000, scl: 1.000000, off2: 0.187097, scl2: 0.012903]) [buf: 11] 
   (at 8, cp->sounds[1][8:10, 1.000000, 0.554518 -> 0.693147, off: -1.000000, scl: 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";xramp2 5: ~A" (display-edits ind 0 3)))
	(scale-channel 0.5 0 5)
	(if (not (string=? (display-edits ind 0 4) "
 (scale 0 5) ; scale-channel 0.5000 0 5 [4:5]:
   (at 0, cp->sounds[1][0:1, 0.500000, 0.000000 -> 0.069315, off: -1.000000, scl: 1.000000]) [buf: 11] 
   (at 2, cp->sounds[1][2:4, 0.500000, 0.138629 -> 0.277259, 0.000000 -> 1.386294, off: -1.000000, scl: 1.000000, off2: 0.187097, scl2: 0.012903]) [buf: 11] 
   (at 5, cp->sounds[1][5:7, 1.000000, 0.346574 -> 0.485203, 2.079442 -> 3.465736, off: -1.000000, scl: 1.000000, off2: 0.187097, scl2: 0.012903]) [buf: 11] 
   (at 8, cp->sounds[1][8:10, 1.000000, 0.554518 -> 0.693147, off: -1.000000, scl: 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";xramp2 6: ~A" (display-edits ind 0 4)))
	(undo)
	(set! (sample 4) .5)
	(if (not (string=? (display-edits ind 0 4) "
 (set 4 1) ; set! sample [4:6]:
   (at 0, cp->sounds[1][0:1, 1.000000, 0.000000 -> 0.069315, off: -1.000000, scl: 1.000000]) [buf: 11] 
   (at 2, cp->sounds[1][2:3, 1.000000, 0.138629 -> 0.207944, 0.000000 -> 0.693147, off: -1.000000, scl: 1.000000, off2: 0.187097, scl2: 0.012903]) [buf: 11] 
   (at 4, cp->sounds[2][0:0, 1.000000]) [buf: 1] 
   (at 5, cp->sounds[1][5:7, 1.000000, 0.346574 -> 0.485203, 2.079442 -> 3.465736, off: -1.000000, scl: 1.000000, off2: 0.187097, scl2: 0.012903]) [buf: 11] 
   (at 8, cp->sounds[1][8:10, 1.000000, 0.554518 -> 0.693147, off: -1.000000, scl: 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";xramp2 7: ~A" (display-edits ind 0 4)))
	(undo 3)
	(close-sound ind))

      (let ((ind (new-sound "test.snd")))
	(map-channel (lambda (y) 1.0) 0 100)

	;; multi-xramp2
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (scale-channel 0.5 (* i 10) 10))
	(xramp-channel 0.0 1.0 3.0)
	(xramp-channel 1.0 0.0 0.3)
	(if (not (string=? (display-edits ind 0 13) "
 (ramp 0 100) ; xramp-channel 1.0000 0.0000 0.3000 0 100 [13:11]:
   (at 0, cp->sounds[1][0:9, 0.500000, -0.000000 -> 0.099874, -1.203973 -> -1.094521, off: -0.500000, scl: 0.500000, off2: 1.428571, scl2: -1.428571]) [buf: 100] 
   (at 10, cp->sounds[1][10:19, 0.500000, 0.110971 -> 0.210845, -1.082359 -> -0.972907, off: -0.500000, scl: 0.500000, off2: 1.428571, scl2: -1.428571]) [buf: 100] 
   (at 20, cp->sounds[1][20:29, 0.500000, 0.221942 -> 0.321816, -0.960746 -> -0.851294, off: -0.500000, scl: 0.500000, off2: 1.428571, scl2: -1.428571]) [buf: 100] 
   (at 30, cp->sounds[1][30:39, 0.500000, 0.332913 -> 0.432787, -0.839133 -> -0.729680, off: -0.500000, scl: 0.500000, off2: 1.428571, scl2: -1.428571]) [buf: 100] 
   (at 40, cp->sounds[1][40:49, 0.500000, 0.443884 -> 0.543758, -0.717519 -> -0.608067, off: -0.500000, scl: 0.500000, off2: 1.428571, scl2: -1.428571]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 0.500000, 0.554855 -> 0.654729, -0.595906 -> -0.486454, off: -0.500000, scl: 0.500000, off2: 1.428571, scl2: -1.428571]) [buf: 100] 
   (at 60, cp->sounds[1][60:69, 0.500000, 0.665826 -> 0.765699, -0.474292 -> -0.364840, off: -0.500000, scl: 0.500000, off2: 1.428571, scl2: -1.428571]) [buf: 100] 
   (at 70, cp->sounds[1][70:79, 0.500000, 0.776797 -> 0.876670, -0.352679 -> -0.243227, off: -0.500000, scl: 0.500000, off2: 1.428571, scl2: -1.428571]) [buf: 100] 
   (at 80, cp->sounds[1][80:89, 0.500000, 0.887767 -> 0.987641, -0.231066 -> -0.121613, off: -0.500000, scl: 0.500000, off2: 1.428571, scl2: -1.428571]) [buf: 100] 
   (at 90, cp->sounds[1][90:99, 0.500000, 0.998738 -> 1.098612, -0.109452 -> -0.000000, off: -0.500000, scl: 0.500000, off2: 1.428571, scl2: -1.428571]) [buf: 100] 
   (at 100, end_mark)
"))
	    (snd-display ";multi-xramp2 1: ~A" (display-edits ind 0 13)))
	(close-sound ind))

      ;; ptree+ramp2
      (let ((ind (new-sound "test.snd")))
	(map-chan (lambda (y) 1.0) 0 10)

	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y) y))
	(if (not (string=? (display-edits ind 0 4 #f) "
 (ptree[0] 0 11) ; ptree 0 0 11 [4:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, -0.000000 -> 1.000000, -0.000000 -> 1.000000, loc: 0, pos: 0, scl: 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ptree-ramp2 0: ~A" (display-edits ind 0 4 #f)))
	(if (not (vequal (channel->vct) (vct 0.000 0.010 0.040 0.090 0.160 0.250 0.360 0.490 0.640 0.810 1.000)))
	    (snd-display ";ptree-ramp2 (1): ~A" (channel->vct)))
	(scale-channel 0.5)
	(if (not (string=? (display-edits ind 0 5 #f) "
 (scale 0 11) ; scale-channel 0.5000 0 11 [5:2]:
   (at 0, cp->sounds[1][0:10, 0.500000, -0.000000 -> 1.000000, -0.000000 -> 1.000000, loc: 0, pos: 0, scl: 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ptree-ramp2 1: ~A" (display-edits ind 0 5 #f)))
	(undo)
	(scale-channel 0.5 0 5)
	(if (not (string=? (display-edits ind 0 5 #f) "
 (scale 0 5) ; scale-channel 0.5000 0 5 [5:3]:
   (at 0, cp->sounds[1][0:4, 0.500000, -0.000000 -> 0.400000, -0.000000 -> 0.400000, loc: 0, pos: 0, scl: 1.000000]) [buf: 11] 
   (at 5, cp->sounds[1][5:10, 1.000000, 0.500000 -> 1.000000, 0.500000 -> 1.000000, loc: 0, pos: 5, scl: 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ptree-ramp2 2: ~A" (display-edits ind 0 5 #f)))
	(if (not (vequal (channel->vct) (vct 0.000 0.005 0.020 0.045 0.080 0.250 0.360 0.490 0.640 0.810 1.000)))
	    (snd-display ";ptree-ramp2 (2): ~A" (channel->vct)))
	(undo 4)

	(scale-channel .5)
	(env-channel '(0 0 1 1 2 0))
	(ramp-channel 0 1 2 3)
	(ptree-channel (lambda (y) y))
	(if (not (string=? (display-edits ind 0 5 #f) "
 (ptree[0] 0 11) ; ptree 0 0 11 [5:5]:
   (at 0, cp->sounds[1][0:1, 1.000000, -0.000000 -> 0.200000, loc: 0, pos: 0, scl: 0.500000]) [buf: 11] 
   (at 2, cp->sounds[1][2:4, 1.000000, 0.400000 -> 0.800000, 0.000000 -> 1.000000, loc: 0, pos: 2, scl: 0.500000]) [buf: 11] 
   (at 5, cp->sounds[1][5:5, 1.000000, 1.000000 -> 1.000000, loc: 0, pos: 5, scl: 0.500000]) [buf: 11] 
   (at 6, cp->sounds[1][6:10, 1.000000, 0.800000 -> 0.000000, loc: 0, pos: 6, scl: 0.500000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ptree-ramp2 4: ~A" (display-edits ind 0 5 #f)))

	(undo 4)
	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y data forward)
			 (declare (y real) (data vct) (forward boolean))
			 (* y (vct-ref data 0)))
		       0 (frames) ind 0 #f #t
		       (lambda (pos dur)
			 (vct 0.5)))
	(if (not (string=? (display-edits ind 0 4 #f) "
 (ptree[0] 0 11) ; ptree 0 0 11 [4:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, -0.000000 -> 1.000000, -0.000000 -> 1.000000, loc: 0, pos: 0, scl: 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ptree-ramp2 5: ~A" (display-edits ind 0 4 #f)))
	(if (not (vequal (channel->vct) (vct 0.000 0.005 0.020 0.045 0.080 0.125 0.180 0.245 0.320 0.405 0.500)))
	    (snd-display ";ptree+closure+ramp2: ~A" (channel->vct)))

	(close-sound ind))

      (let ((ind (new-sound "test.snd")))
	(map-channel (lambda (y) 1.0) 0 100)

	;; multi-ramp2
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (scale-channel 0.5 (* i 10) 10))
	(ramp-channel 0.0 1.0)
	(ramp-channel 1.0 0.0)
	(ptree-channel (lambda (y) y))
	(if (not (string=? (display-edits ind 0 14 #f) "
 (ptree[0] 0 100) ; ptree 0 0 100 [14:11]:
   (at 0, cp->sounds[1][0:9, 1.000000, 0.000000 -> 0.090909, 1.000000 -> 0.909091, loc: 0, pos: 0, scl: 0.500000]) [buf: 100] 
   (at 10, cp->sounds[1][10:19, 1.000000, 0.101010 -> 0.191919, 0.898990 -> 0.808081, loc: 0, pos: 10, scl: 0.500000]) [buf: 100] 
   (at 20, cp->sounds[1][20:29, 1.000000, 0.202020 -> 0.292929, 0.797980 -> 0.707071, loc: 0, pos: 20, scl: 0.500000]) [buf: 100] 
   (at 30, cp->sounds[1][30:39, 1.000000, 0.303030 -> 0.393939, 0.696970 -> 0.606061, loc: 0, pos: 30, scl: 0.500000]) [buf: 100] 
   (at 40, cp->sounds[1][40:49, 1.000000, 0.404040 -> 0.494950, 0.595960 -> 0.505051, loc: 0, pos: 40, scl: 0.500000]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 1.000000, 0.505051 -> 0.595960, 0.494950 -> 0.404040, loc: 0, pos: 50, scl: 0.500000]) [buf: 100] 
   (at 60, cp->sounds[1][60:69, 1.000000, 0.606061 -> 0.696970, 0.393939 -> 0.303030, loc: 0, pos: 60, scl: 0.500000]) [buf: 100] 
   (at 70, cp->sounds[1][70:79, 1.000000, 0.707071 -> 0.797980, 0.292929 -> 0.202020, loc: 0, pos: 70, scl: 0.500000]) [buf: 100] 
   (at 80, cp->sounds[1][80:89, 1.000000, 0.808081 -> 0.898990, 0.191919 -> 0.101010, loc: 0, pos: 80, scl: 0.500000]) [buf: 100] 
   (at 90, cp->sounds[1][90:99, 1.000000, 0.909091 -> 1.000000, 0.090909 -> -0.000000, loc: 0, pos: 90, scl: 0.500000]) [buf: 100] 
   (at 100, end_mark)
"))
	    (snd-display ";ptree multi-ramp2 1: ~A" (display-edits ind 0 14 #f)))
	(undo 12)
	(close-sound ind))
      
      (let ((ind (new-sound "test.snd")))
	(map-chan (lambda (y) 1.0) 0 10)

	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y) (+ y .1)))
	(if (not (string=? (display-edits ind 0 5 #f) "
 (ptree[0] 0 11) ; ptree 0 0 11 [5:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, -0.000000 -> 1.000000, -0.000000 -> 1.000000, -0.000000 -> 1.000000, loc: 0, pos: 0, scl: 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ptree-ramp3 0: ~A" (display-edits ind 0 5 #f)))
	(if (not (vequal (channel->vct) (vct 0.100 0.101 0.108 0.127 0.164 0.225 0.316 0.443 0.612 0.829 1.100)))
	    (snd-display ";ptree-ramp3 1: ~A" (channel->vct)))
	(scale-channel 0.5)
	(if (not (string=? (display-edits ind 0 6 #f) "
 (scale 0 11) ; scale-channel 0.5000 0 11 [6:2]:
   (at 0, cp->sounds[1][0:10, 0.500000, -0.000000 -> 1.000000, -0.000000 -> 1.000000, -0.000000 -> 1.000000, loc: 0, pos: 0, scl: 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ptree-ramp3 2: ~A" (display-edits ind 0 6 #f)))

	(undo 5)
	(ramp-channel 0 1)
	(ramp-channel 0 1 5 5)
	(ramp-channel 0 1 7 3)
	(ptree-channel (lambda (y) (+ y .1)))
	(if (not (string=? (display-edits ind 0 5 #f) "
 (ptree[0] 0 11) ; ptree 0 0 11 [5:5]:
   (at 0, cp->sounds[1][0:4, 1.000000, -0.000000 -> 0.400000, loc: 0, pos: 0, scl: 1.000000]) [buf: 11] 
   (at 5, cp->sounds[1][5:6, 1.000000, 0.500000 -> 0.600000, 0.000000 -> 0.250000, loc: 0, pos: 5, scl: 1.000000]) [buf: 11] 
   (at 7, cp->sounds[1][7:9, 1.000000, 0.700000 -> 0.900000, 0.500000 -> 1.000000, 0.000000 -> 1.000000, loc: 0, pos: 7, scl: 1.000000]) [buf: 11] 
   (at 10, cp->sounds[1][10:10, 1.000000, 1.000000 -> 1.000000, loc: 0, pos: 10, scl: 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ptree-ramp3 3: ~A" (display-edits ind 0 5 #f)))
	(if (not (vequal (channel->vct) (vct 0.100 0.200 0.300 0.400 0.500 0.100 0.250 0.100 0.400 1.000 1.100)))
	    (snd-display ";ptree-ramp3 4: ~A" (channel->vct)))
	(close-sound ind))

      ;; ramp3
      (let ((ind (new-sound "test.snd")))
	(map-chan (lambda (y) 1.0) 0 10)

	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(if (not (string=? (display-edits ind 0 4) "
 (ramp 0 11) ; ramp-channel 0.0000 1.0000 0 11 [4:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, -0.000000 -> 1.000000, -0.000000 -> 1.000000, -0.000000 -> 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp3 0: ~A" (display-edits ind 0 4)))
	(if (not (vequal (channel->vct) (vct 0.000 0.001 0.008 0.027 0.064 0.125 0.216 0.343 0.512 0.729 1.000)))
	    (snd-display ";ramp3 (1): ~A" (channel->vct)))
	(scale-channel 0.5)
	(if (not (string=? (display-edits ind 0 5) "
 (scale 0 11) ; scale-channel 0.5000 0 11 [5:2]:
   (at 0, cp->sounds[1][0:10, 0.500000, -0.000000 -> 1.000000, -0.000000 -> 1.000000, -0.000000 -> 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp3 1: ~A" (display-edits ind 0 5)))
	(undo)
	(scale-channel 0.5 0 5)
	(if (not (string=? (display-edits ind 0 5) "
 (scale 0 5) ; scale-channel 0.5000 0 5 [5:3]:
   (at 0, cp->sounds[1][0:4, 0.500000, -0.000000 -> 0.400000, -0.000000 -> 0.400000, -0.000000 -> 0.400000]) [buf: 11] 
   (at 5, cp->sounds[1][5:10, 1.000000, 0.500000 -> 1.000000, 0.500000 -> 1.000000, 0.500000 -> 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp3 2: ~A" (display-edits ind 0 5)))
	(if (not (vequal (channel->vct) (vct 0.000 0.001 0.004 0.014 0.032 0.125 0.216 0.343 0.512 0.729 1.000)))
	    (snd-display ";ramp3 (2): ~A" (channel->vct)))
	(undo)
	(scale-channel 0.5 2 4)
	(if (not (string=? (display-edits ind 0 5) "
 (scale 2 4) ; scale-channel 0.5000 2 4 [5:4]:
   (at 0, cp->sounds[1][0:1, 1.000000, -0.000000 -> 0.100000, -0.000000 -> 0.100000, -0.000000 -> 0.100000]) [buf: 11] 
   (at 2, cp->sounds[1][2:5, 0.500000, 0.200000 -> 0.500000, 0.200000 -> 0.500000, 0.200000 -> 0.500000]) [buf: 11] 
   (at 6, cp->sounds[1][6:10, 1.000000, 0.600000 -> 1.000000, 0.600000 -> 1.000000, 0.600000 -> 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp3 3: ~A" (display-edits ind 0 5)))
	(undo 2)
	(ramp-channel 0.75 0.25)
	(if (not (string=? (display-edits ind 0 4) "
 (ramp 0 11) ; ramp-channel 0.7500 0.2500 0 11 [4:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, -0.000000 -> 1.000000, -0.000000 -> 1.000000, 0.750000 -> 0.250000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp3 4: ~A" (display-edits ind 0 4)))
	(undo)
	(ramp-channel .2 .6 2 6)
	(if (not (string=? (display-edits ind 0 4) "
 (ramp 2 6) ; ramp-channel 0.2000 0.6000 2 6 [4:4]:
   (at 0, cp->sounds[1][0:1, 1.000000, -0.000000 -> 0.100000, -0.000000 -> 0.100000]) [buf: 11] 
   (at 2, cp->sounds[1][2:7, 1.000000, 0.200000 -> 0.700000, 0.200000 -> 0.700000, 0.200000 -> 0.600000]) [buf: 11] 
   (at 8, cp->sounds[1][8:10, 1.000000, 0.800000 -> 1.000000, 0.800000 -> 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp3 5: ~A" (display-edits ind 0 4)))
	(scale-channel 0.5 0 5)
	(if (not (string=? (display-edits ind 0 5) "
 (scale 0 5) ; scale-channel 0.5000 0 5 [5:5]:
   (at 0, cp->sounds[1][0:1, 0.500000, -0.000000 -> 0.100000, -0.000000 -> 0.100000]) [buf: 11] 
   (at 2, cp->sounds[1][2:4, 0.500000, 0.200000 -> 0.400000, 0.200000 -> 0.400000, 0.200000 -> 0.360000]) [buf: 11] 
   (at 5, cp->sounds[1][5:7, 1.000000, 0.500000 -> 0.700000, 0.500000 -> 0.700000, 0.440000 -> 0.600000]) [buf: 11] 
   (at 8, cp->sounds[1][8:10, 1.000000, 0.800000 -> 1.000000, 0.800000 -> 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp3 6: ~A" (display-edits ind 0 5)))
	(undo)
	(set! (sample 4) .5)
	(if (not (string=? (display-edits ind 0 5) "
 (set 4 1) ; set! sample [5:6]:
   (at 0, cp->sounds[1][0:1, 1.000000, -0.000000 -> 0.100000, -0.000000 -> 0.100000]) [buf: 11] 
   (at 2, cp->sounds[1][2:3, 1.000000, 0.200000 -> 0.300000, 0.200000 -> 0.300000, 0.200000 -> 0.280000]) [buf: 11] 
   (at 4, cp->sounds[2][0:0, 1.000000]) [buf: 1] 
   (at 5, cp->sounds[1][5:7, 1.000000, 0.500000 -> 0.700000, 0.500000 -> 0.700000, 0.440000 -> 0.600000]) [buf: 11] 
   (at 8, cp->sounds[1][8:10, 1.000000, 0.800000 -> 1.000000, 0.800000 -> 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp3 7: ~A" (display-edits ind 0 5)))
	(undo 3)
	(close-sound ind))

      (let ((ind (new-sound "test.snd")))
	(map-channel (lambda (y) 1.0) 0 100)

	;; multi-ramp3
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (scale-channel 0.5 (* i 10) 10))
	(ramp-channel 0.0 1.0)
	(ramp-channel 1.0 -0.5)
	(ramp-channel -0.5 1.5)
	(if (not (string=? (display-edits ind 0 14) "
 (ramp 0 100) ; ramp-channel -0.5000 1.5000 0 100 [14:11]:
   (at 0, cp->sounds[1][0:9, 0.500000, 0.000000 -> 0.090909, 1.000000 -> 0.863636, -0.500000 -> -0.318182]) [buf: 100] 
   (at 10, cp->sounds[1][10:19, 0.500000, 0.101010 -> 0.191919, 0.848485 -> 0.712121, -0.297980 -> -0.116162]) [buf: 100] 
   (at 20, cp->sounds[1][20:29, 0.500000, 0.202020 -> 0.292929, 0.696970 -> 0.560606, -0.095960 -> 0.085859]) [buf: 100] 
   (at 30, cp->sounds[1][30:39, 0.500000, 0.303030 -> 0.393939, 0.545455 -> 0.409091, 0.106061 -> 0.287879]) [buf: 100] 
   (at 40, cp->sounds[1][40:49, 0.500000, 0.404040 -> 0.494950, 0.393939 -> 0.257576, 0.308081 -> 0.489899]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 0.500000, 0.505051 -> 0.595960, 0.242424 -> 0.106061, 0.510101 -> 0.691919]) [buf: 100] 
   (at 60, cp->sounds[1][60:69, 0.500000, 0.606061 -> 0.696970, 0.090909 -> -0.045454, 0.712121 -> 0.893939]) [buf: 100] 
   (at 70, cp->sounds[1][70:79, 0.500000, 0.707071 -> 0.797980, -0.060606 -> -0.196970, 0.914141 -> 1.095960]) [buf: 100] 
   (at 80, cp->sounds[1][80:89, 0.500000, 0.808081 -> 0.898990, -0.212121 -> -0.348485, 1.116162 -> 1.297980]) [buf: 100] 
   (at 90, cp->sounds[1][90:99, 0.500000, 0.909091 -> 1.000000, -0.363636 -> -0.500000, 1.318182 -> 1.500000]) [buf: 100] 
   (at 100, end_mark)
"))
	    (snd-display ";multi-ramp3 1: ~A" (display-edits ind 0 14)))
	(undo 13)
	(ramp-channel 0.0 1.0 10 30)
	(ramp-channel 0.0 1.0 50 20)
	(ramp-channel 0.0 1.0 20 15)
	(ramp-channel 0.0 1.0 30 30)
	(if (not (string=? (display-edits ind 0 5) "
 (ramp 30 30) ; ramp-channel 0.0000 1.0000 30 30 [5:10]:
   (at 0, cp->sounds[1][0:9, 1.000000]) [buf: 100] 
   (at 10, cp->sounds[1][10:19, 1.000000, 0.000000 -> 0.310345]) [buf: 100] 
   (at 20, cp->sounds[1][20:29, 1.000000, 0.344828 -> 0.655172, -0.000000 -> 0.642857]) [buf: 100] 
   (at 30, cp->sounds[1][30:34, 1.000000, 0.689655 -> 0.827586, 0.714286 -> 1.000000, 0.000000 -> 0.137931]) [buf: 100] 
   (at 35, cp->sounds[1][35:39, 1.000000, 0.862069 -> 1.000000, 0.172414 -> 0.310345]) [buf: 100] 
   (at 40, cp->sounds[1][40:49, 1.000000, 0.344828 -> 0.655172]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 1.000000, -0.000000 -> 0.473684, 0.689655 -> 1.000000]) [buf: 100] 
   (at 60, cp->sounds[1][60:69, 1.000000, 0.526316 -> 1.000000]) [buf: 100] 
   (at 70, cp->sounds[1][70:99, 1.000000]) [buf: 100] 
   (at 100, end_mark)
"))
	    (snd-display ";multi-ramp3 2: ~A" (display-edits ind 0 5)))

      ;; xen
      (let ((ind (new-sound "test.snd")))
	(map-chan (lambda (y) 1.0) 0 10)
	(xen-channel (lambda (y data forward)
		       (+ y (list-ref data 0)))
		     0 (frames) ind 0 #f #f
		     (lambda (pos dur)
		       (list 0.5)))
	(if (not (string=? (display-edits ind 0 2) "
 (xen[0] 0 11) ; xen 0 0 11 [2:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, loc: 0, pos: 0, scl: 1.000000, code: (lambda (y data forward) (+ y (list-ref data 0))), init: (lambda (pos dur) (list 0.5))]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";xen 0: ~A" (display-edits ind 0 2)))
	(if (not (vequal (channel->vct) (make-vct 11 1.5)))
	    (snd-display ";xen 0: ~A" (channel->vct)))
	(undo)
	(ramp-channel 0.0 1.0)
	(xen-channel (lambda (y data forward)
		       (let ((val (* 0.5 (+ y (list-ref data 0)))))
			 (list-set! data 0 y)
			 val))
		     0 (frames) ind 0 #f #f
		     (let ((edpos (edit-position ind 0)))
		       (lambda (pos dur)
			 (list (if (= pos 0) 0.0
				   (sample (1- pos) ind 0 edpos))))))
	(if (not (string=? (display-edits ind 0 2 #f) "
 (ramp 0 11) ; ramp-channel 0.0000 1.0000 0 11 [2:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, -0.000000 -> 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))	
	    (snd-display ";xen 1: ~A" (display-edits ind 0 2 #f)))
	(if (not (vequal (channel->vct) (vct 0.000 0.050 0.150 0.250 0.350 0.450 0.550 0.650 0.750 0.850 0.950)))
	    (snd-display ";xen 1: ~A" (channel->vct)))
	(undo 2)

	(ramp-channel 0.0 1.0)
	(ramp-channel 1.0 0.0)
	(let ((outer .5))
	  (xen-channel (lambda (y data forward)
			 (data y))
		       0 (frames) ind 0 #f #f
		       (lambda (pos dur)
			 (lambda (y)
			   (* outer y)))))
	(if (and (not (string=? (display-edits ind 0 4 #f) "
 (xen[0] 0 11) ; xen 0 0 11 [4:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, -0.000000 -> 1.000000, 1.000000 -> -0.000000, loc: 0, pos: 0, scl: 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
		 (not (string=? (display-edits ind 0 4 #f) "
 (xen[0] 0 11) ; xen 0 0 11 [4:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, -0.000000 -> 1.000000, 1.000000 -> 0.000000, loc: 0, pos: 0, scl: 1.000000]) [buf: 11] 
   (at 11, end_mark)
")))
	    (snd-display ";xen 2: ~A" (display-edits ind 0 4 #f)))
	(if (not (vequal (channel->vct) (vct 0.000 0.045 0.080 0.105 0.120 0.125 0.120 0.105 0.080 0.045 0.000)))
	    (snd-display ";xen 2: ~A" (channel->vct)))
	(undo 3)

	(xramp-channel 0.0 1.0 3.0)
	(xen-channel (lambda (y data forward)
		       (let ((val (* y (vector-ref data 0))))
			 (vector-set! data 0 (+ (vector-ref data 0) (if forward .1 -.1)))
			 val))
		     0 (frames) ind 0 #f #f
		     (lambda (pos dur)
		       (let ((val (make-vector 1)))
			 (vector-set! val 0 (* pos .1))
			 val)))
	(if (not (string=? (display-edits ind 0 3 #f) "
 (xen[0] 0 11) ; xen 0 0 11 [3:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, -0.000000 -> 1.098612, off: -0.500000, scl: 0.500000, loc: 0, pos: 0, scl: 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";xen 3: ~A" (display-edits ind 0 3 #f)))
	(if (not (vequal (channel->vct) (vct 0.000 0.006 0.025 0.059 0.110 0.183 0.280 0.405 0.563 0.760 1.000)))
	    (snd-display ";xen 3: ~A" (channel->vct)))

	(undo 2)
	(pad-channel 2 5)
	(xen-channel (lambda (y data forward) (+ y .1)))
	(if (not (string=? (display-edits ind 0 3 #f) "
 (xen[0] 0 16) ; xen 0 0 16 [3:4]:
   (at 0, cp->sounds[1][0:1, 1.000000, loc: 0, pos: 0, scl: 1.000000]) [buf: 11] 
   (at 2, cp->sounds[-1][0:4, 1.000000, loc: 0, pos: 2, scl: 0.000000])
   (at 7, cp->sounds[1][2:10, 1.000000, loc: 0, pos: 7, scl: 1.000000]) [buf: 11] 
   (at 16, end_mark)
"))
	    (snd-display ";xen 5: ~A" (display-edits ind 0 3 #f)))
	(if (not (vequal (channel->vct 0 10) (vct 1.100 1.100 0.100 0.100 0.100 0.100 0.100 1.100 1.100 1.100)))
	    (snd-display ";xen 5: ~A" (channel->vct)))

	(revert-sound ind)
	(map-channel (lambda (y) 1.0) 0 100)
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (scale-channel 0.5 (* i 10) 10))
	(xen-channel (lambda (y data forward)
		       (let ((val (* y (vector-ref data 0))))
			 (vector-set! data 0 (+ (vector-ref data 0) (if forward .01 -.01)))
			 val))
		     0 (frames) ind 0 #f #f
		     (lambda (pos dur)
		       (let ((val (make-vector 1)))
			 (vector-set! val 0 (* pos .01))
			 val)))
	(if (not (string=? (display-edits ind 0 12 #f) "
 (xen[0] 0 100) ; xen 0 0 100 [12:11]:
   (at 0, cp->sounds[1][0:9, 1.000000, loc: 0, pos: 0, scl: 0.500000]) [buf: 100] 
   (at 10, cp->sounds[1][10:19, 1.000000, loc: 0, pos: 10, scl: 0.500000]) [buf: 100] 
   (at 20, cp->sounds[1][20:29, 1.000000, loc: 0, pos: 20, scl: 0.500000]) [buf: 100] 
   (at 30, cp->sounds[1][30:39, 1.000000, loc: 0, pos: 30, scl: 0.500000]) [buf: 100] 
   (at 40, cp->sounds[1][40:49, 1.000000, loc: 0, pos: 40, scl: 0.500000]) [buf: 100] 
   (at 50, cp->sounds[1][50:59, 1.000000, loc: 0, pos: 50, scl: 0.500000]) [buf: 100] 
   (at 60, cp->sounds[1][60:69, 1.000000, loc: 0, pos: 60, scl: 0.500000]) [buf: 100] 
   (at 70, cp->sounds[1][70:79, 1.000000, loc: 0, pos: 70, scl: 0.500000]) [buf: 100] 
   (at 80, cp->sounds[1][80:89, 1.000000, loc: 0, pos: 80, scl: 0.500000]) [buf: 100] 
   (at 90, cp->sounds[1][90:99, 1.000000, loc: 0, pos: 90, scl: 0.500000]) [buf: 100] 
   (at 100, end_mark)
"))
	    (snd-display ";xen 4: ~A" (display-edits ind 0 12 #f)))
	(if (not (vequal (channel->vct 0 10) (vct 0.000 0.005 0.010 0.015 0.020 0.025 0.030 0.035 0.040 0.045)))
	    (snd-display ";xen 4: ~A" (channel->vct)))
	(close-sound ind))

	(let ((vals (channel->vct)))
	  (undo 4)
	  (ptree-channel (lambda (y) y))
	  (ramp-channel 0.0 1.0 10 30)
	  (ptree-channel (lambda (y) y))
	  (ramp-channel 0.0 1.0 50 20)
	  (ptree-channel (lambda (y) y))
	  (ramp-channel 0.0 1.0 20 15)
	  (ptree-channel (lambda (y) y))
	  (ramp-channel 0.0 1.0 30 30)
	  (if (not (vequal vals (channel->vct)))
	      (snd-display ";ramp3 opt vs unopt: ~A ~A" vals (channel->vct))))
	  
	(close-sound ind))

      (let ((ind (new-sound "test.snd")))
	(map-chan (lambda (y) 1.0) 0 10)

	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(xen-channel (lambda (y data forward)
		       (+ y (list-ref data 0)))
		     0 (frames) ind 0 #f #f
		     (lambda (pos dur)
		       (list 0.1)))
	(if (not (string=? (display-edits ind 0 5 #f) "
 (xen[0] 0 11) ; xen 0 0 11 [5:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, -0.000000 -> 1.000000, -0.000000 -> 1.000000, -0.000000 -> 1.000000, loc: 0, pos: 0, scl: 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";xen-ramp3 0: ~A" (display-edits ind 0 5 #f)))
	(if (not (vequal (channel->vct) (vct 0.100 0.101 0.108 0.127 0.164 0.225 0.316 0.443 0.612 0.829 1.100)))
	    (snd-display ";xen-ramp3 1: ~A" (channel->vct)))
	(scale-channel 0.5)
	(if (not (string=? (display-edits ind 0 6 #f) "
 (scale 0 11) ; scale-channel 0.5000 0 11 [6:2]:
   (at 0, cp->sounds[1][0:10, 0.500000, -0.000000 -> 1.000000, -0.000000 -> 1.000000, -0.000000 -> 1.000000, loc: 0, pos: 0, scl: 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";xen-ramp3 2: ~A" (display-edits ind 0 6 #f)))

	(undo 5)
	(ramp-channel 0 1)
	(ramp-channel 0 1 5 5)
	(ramp-channel 0 1 7 3)
	(xen-channel (lambda (y data forward)
		       (+ y (list-ref data 0)))
		     0 (frames) ind 0 #f #f
		     (lambda (pos dur)
		       (list 0.1)))
	(if (not (string=? (display-edits ind 0 5 #f) "
 (xen[0] 0 11) ; xen 0 0 11 [5:5]:
   (at 0, cp->sounds[1][0:4, 1.000000, -0.000000 -> 0.400000, loc: 0, pos: 0, scl: 1.000000]) [buf: 11] 
   (at 5, cp->sounds[1][5:6, 1.000000, 0.500000 -> 0.600000, 0.000000 -> 0.250000, loc: 0, pos: 5, scl: 1.000000]) [buf: 11] 
   (at 7, cp->sounds[1][7:9, 1.000000, 0.700000 -> 0.900000, 0.500000 -> 1.000000, 0.000000 -> 1.000000, loc: 0, pos: 7, scl: 1.000000]) [buf: 11] 
   (at 10, cp->sounds[1][10:10, 1.000000, 1.000000 -> 1.000000, loc: 0, pos: 10, scl: 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";xen-ramp3 3: ~A" (display-edits ind 0 5 #f)))
	(if (not (vequal (channel->vct) (vct 0.100 0.200 0.300 0.400 0.500 0.100 0.250 0.100 0.400 1.000 1.100)))
	    (snd-display ";xen-ramp3 4: ~A" (channel->vct)))
	(close-sound ind))

      ;; various cases not optimized, presumably
      (let ((ind (new-sound "test.snd")))
	(map-chan (lambda (y) 1.0) 0 10)

	;; ramp+xramp (now optimized)
	(ramp-channel 0.0 1.0)
	(xramp-channel 0.0 1.0 32.0)
	(if (not (string=? (display-edits ind 0 3) "
 (ramp 0 11) ; xramp-channel 0.0000 1.0000 32.0000 0 11 [3:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, -0.000000 -> 1.000000, 0.000000 -> 3.465736, off2: -0.032258, scl2: 0.032258]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp+xramp: ~A" (display-edits ind 0 3)))
	(undo 2)

	;; xramp+xramp -- this one now optimized
	(xramp-channel 0.0 1.0 0.32)
	(xramp-channel 0.0 1.0 32.0)
	(if (not (string=? (display-edits ind 0 3) "
 (ramp 0 11) ; xramp-channel 0.0000 1.0000 32.0000 0 11 [3:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, 0.000000 -> -1.139434, 0.000000 -> 3.465736, off: 1.470588, scl: -1.470588, off2: -0.032258, scl2: 0.032258]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";xramp+xramp: ~A" (display-edits ind 0 3)))
	(undo 2)

	;; xramp+xramp+xramp
	(xramp-channel 0.0 1.0 0.32)
	(xramp-channel 0.0 1.0 32.0)
	(xramp-channel 0.0 1.0 32.0)
	(if (not (string=? (display-edits ind 0 4) "
 (set 0 11) ; xramp-channel [4:2]:
   (at 0, cp->sounds[2][0:10, 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";xramp+xramp+xramp: ~A" (display-edits ind 0 4)))
	(undo 3)

	;; xramp+xramp+ramp (now optimized)
	(xramp-channel 0.0 1.0 0.32)
	(xramp-channel 0.0 1.0 32.0)
	(ramp-channel 0.0 1.0)
	(if (not (string=? (display-edits ind 0 4) "
 (ramp 0 11) ; ramp-channel 0.0000 1.0000 0 11 [4:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, 0.000000 -> -1.139434, 0.000000 -> 3.465736, -0.000000 -> 1.000000, off: 1.470588, scl: -1.470588, off2: -0.032258, scl2: 0.032258]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";xramp+xramp+ramp: ~A" (display-edits ind 0 4)))
	(undo 3)

	;; xramp+ramp (now optimized)
	(xramp-channel 0.0 1.0 32.0)
	(ramp-channel 0.0 1.0)
	(if (not (string=? (display-edits ind 0 3) "
 (ramp 0 11) ; ramp-channel 0.0000 1.0000 0 11 [3:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, 0.000000 -> 3.465736, -0.000000 -> 1.000000, off: -0.032258, scl: 0.032258]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";xramp+ramp: ~A" (display-edits ind 0 3)))
	(undo 2)

	;; ramp+ramp+xramp
	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(xramp-channel 0.0 1.0 32.0)
	(if (not (string=? (display-edits ind 0 4) "
 (set 0 11) ; xramp-channel [4:2]:
   (at 0, cp->sounds[2][0:10, 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp+ramp+xramp: ~A" (display-edits ind 0 4)))
	(undo 3)

	;; ramp+ramp+ramp+ramp
	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(if (not (string=? (display-edits ind 0 5) "
 (set 0 11) ; ramp-channel [5:2]:
   (at 0, cp->sounds[2][0:10, 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp+ramp+ramp+ramp: ~A" (display-edits ind 0 5)))
	(undo 4)

	;; ramp+ramp+ramp+xramp
	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(xramp-channel 0.0 1.0 32.0)
	(if (not (string=? (display-edits ind 0 5) "
 (set 0 11) ; xramp-channel [5:2]:
   (at 0, cp->sounds[2][0:10, 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp+ramp+ramp+xramp: ~A" (display-edits ind 0 5)))
	(undo 4)

	;; ptree+ramp (now optimized)
	(ptree-channel (lambda (y) y))
	(ramp-channel 0.0 1.0)
	(if (not (string=? (display-edits ind 0 3) "
 (ramp 0 11) ; ramp-channel 0.0000 1.0000 0 11 [3:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, -0.000000 -> 1.000000, loc: 0, pos: 0, scl: 1.000000, code: (lambda (y) y)]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ptree+ramp: ~A" (display-edits ind 0 3)))
	(undo 2)

	;; ramp+xramp+ptree (now optimized)
	(ramp-channel 0.0 1.0)
	(xramp-channel 0.0 1.0 32.0)
	(ptree-channel (lambda (y) y))
	(if (not (string=? (display-edits ind 0 4) "
 (ptree[0] 0 11) ; ptree 0 0 11 [4:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, -0.000000 -> 1.000000, 0.000000 -> 3.465736, off2: -0.032258, scl2: 0.032258, loc: 0, pos: 0, scl: 1.000000, code: (lambda (y) y)]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp+xramp+ptree: ~A" (display-edits ind 0 4)))
	(undo 3)

	;; xramp+ramp+ptree (now optimized)
	(xramp-channel 0.0 1.0 32.0)
	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y) y))
	(if (not (string=? (display-edits ind 0 4) "
 (ptree[0] 0 11) ; ptree 0 0 11 [4:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, 0.000000 -> 3.465736, -0.000000 -> 1.000000, off: -0.032258, scl: 0.032258, loc: 0, pos: 0, scl: 1.000000, code: (lambda (y) y)]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";xramp+ramp+ptree: ~A" (display-edits ind 0 4)))
	(undo 3)

	;; ramp3+ptree (now optimized)
	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y) y))
	(if (not (string=? (display-edits ind 0 5) "
 (ptree[0] 0 11) ; ptree 0 0 11 [5:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, -0.000000 -> 1.000000, -0.000000 -> 1.000000, -0.000000 -> 1.000000, loc: 0, pos: 0, scl: 1.000000, code: (lambda (y) y)]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp3+ptree: ~A" (display-edits ind 0 5)))
	(undo 4)

	;; ptree+ptree (now optimized)
	(ptree-channel (lambda (y) y))
	(ptree-channel (lambda (y) y))
	(if (not (string=? (display-edits ind 0 3) "
 (ptree[1] 0 11) ; ptree 1 0 11 [3:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, loc2: 1, pos2: 0, scl2: 1.000000, loc: 0, pos: 0, scl: 1.000000, code: (lambda (y) y)]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ptree+ptree: ~A" (display-edits ind 0 3)))
	(undo 2)
	(close-sound ind))

      (let ((ind (new-sound "test.snd")))
	(map-chan (lambda (y) 1.0) 0 10)

	;; ramp ptree2 cases
	(ptree-channel (lambda (y) (* y 0.5)))
	(ptree-channel (lambda (y) (* y 2.0)))
	(ramp-channel 0 1)
	(if (not (string=? (display-edits ind 0 4 #f) "
 (ramp 0 11) ; ramp-channel 0.0000 1.0000 0 11 [4:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, -0.000000 -> 1.000000, loc2: 1, pos2: 0, scl2: 1.000000, loc: 0, pos: 0, scl: 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp ptree2: ~A" (display-edits ind 0 4 #f)))
	(if (not (vequal (channel->vct) (vct 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0)))
	    (snd-display ";ramp ptree2: ~A" (channel->vct)))
	(ramp-channel 0 1)
	(if (not (string=? (display-edits ind 0 5 #f) "
 (ramp 0 11) ; ramp-channel 0.0000 1.0000 0 11 [5:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, -0.000000 -> 1.000000, -0.000000 -> 1.000000, loc2: 1, pos2: 0, scl2: 1.000000, loc: 0, pos: 0, scl: 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp2 ptree2: ~A" (display-edits ind 0 5 #f)))
	(if (not (vequal (channel->vct) (vct 0.000 0.010 0.040 0.090 0.160 0.250 0.360 0.490 0.640 0.810 1.000)))
	    (snd-display ";ramp2 ptree2: ~A" (channel->vct)))
	(undo 2)
	(xramp-channel 0 1 32)
	(if (not (string=? (display-edits ind 0 4 #f) "
 (ramp 0 11) ; xramp-channel 0.0000 1.0000 32.0000 0 11 [4:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, 0.000000 -> 3.465736, off: -0.032258, scl: 0.032258, loc2: 1, pos2: 0, scl2: 1.000000, loc: 0, pos: 0, scl: 1.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";xramp ptree2: ~A" (display-edits ind 0 4 #f)))
	(if (not (vequal (channel->vct) (vct 0.000 0.013 0.032 0.059 0.097 0.150 0.226 0.333 0.484 0.698 1.000)))
	    (snd-display ";xramp ptree2: ~A" (channel->vct)))

	(undo 3)
	(scale-channel 0.0)
	
	(ptree-channel (lambda (y) (+ y 0.5)))
	(ptree-channel (lambda (y) (* y 2.0)))
	(ramp-channel 0 1)
	(if (not (string=? (display-edits ind 0 4 #f) "
 (ptree[1] 0 11) ; ptree 1 0 11 [4:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, loc2: 1, pos2: 0, scl2: 1.000000, loc: 0, pos: 0, scl: 0.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp ptree2 zero: ~A" (display-edits ind 0 4 #f)))
	(if (not (vequal (channel->vct) (vct 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0)))
	    (snd-display ";ramp ptree2 zero: ~A" (channel->vct)))
	(ramp-channel 0 1)
	(if (not (string=? (display-edits ind 0 5 #f) "
 (ramp 0 11) ; ramp-channel 0.0000 1.0000 0 11 [5:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, -0.000000 -> 1.000000, loc2: 1, pos2: 0, scl2: 1.000000, loc: 0, pos: 0, scl: 0.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";ramp2 ptree2 zero: ~A" (display-edits ind 0 5 #f)))
	(if (not (vequal (channel->vct) (vct 0.000 0.010 0.040 0.090 0.160 0.250 0.360 0.490 0.640 0.810 1.000)))
	    (snd-display ";ramp2 ptree2 zero: ~A" (channel->vct)))
	(undo 2)
	(xramp-channel 0 1 32)
	(if (not (string=? (display-edits ind 0 4 #f) "
 (ptree[1] 0 11) ; ptree 1 0 11 [4:2]:
   (at 0, cp->sounds[1][0:10, 1.000000, loc2: 1, pos2: 0, scl2: 1.000000, loc: 0, pos: 0, scl: 0.000000]) [buf: 11] 
   (at 11, end_mark)
"))
	    (snd-display ";xramp ptree2 zero: ~A" (display-edits ind 0 4 #f)))
	(if (not (vequal (channel->vct) (vct 0.000 0.013 0.032 0.059 0.097 0.150 0.226 0.333 0.484 0.698 1.000)))
	    (snd-display ";xramp ptree2 zero: ~A" (channel->vct)))

	(close-sound ind))

      (let ((data (make-vct 101 1.0))
	    (rto1-data (make-vct 101))
	    (xto1-data (make-vct 101))
	    (cos-data (make-vct 101))
	    (ind (new-sound "test.snd")))
	;; test-ops.scm for 7 and 8 cases (40 min per branch)
	
	(define (set-to-1) (map-chan (lambda (y) 1.0) 0 100))
	(define (cset-to-1 dat) (do ((i 0 (1+ i))) ((= i 101)) (vct-set! dat i 1.0)))
	(define (ramp-to-1) (ramp-channel 0.0 1.0))
	(define (cramp-to-1 dat) (vct-multiply! dat rto1-data))
	(define (scale-by-half) (scale-channel 0.5))
	(define (cscale-by-half dat) (vct-scale! dat 0.5000))
	(define (scale-by-two) (scale-channel 2.0 30 40))
	(define (cscale-by-two dat) (do ((i 30 (1+ i))) ((= i 70)) (vct-set! dat i (* (vct-ref dat i) 2.0))))
	(define (xramp-to-1) (xramp-channel 0.0 1.0 32.0))
	(define (cxramp-to-1 dat) (vct-multiply! dat xto1-data))
	(define (scale-mid) (scale-channel 0.125 30 30))
	(define (cscale-mid dat) (do ((i 30 (1+ i))) ((= i 60)) (vct-set! dat i (* (vct-ref dat i) 0.125))))
	(define (on-air) (scale-channel 0.0 10 30))
	(define (con-air dat) (do ((i 10 (1+ i))) ((= i 40)) (vct-set! dat i 0.0)))
	(define (ptree) (ptree-channel (lambda (y) (* y 0.75)) 20 20))
	(define (cptree dat) (do ((i 20 (1+ i))) ((= i 40)) (vct-set! dat i (* (vct-ref dat i) .75))))
	(define (ptreec) (cosine-channel-via-ptree))
	(define (cptreec dat) (vct-multiply! dat cos-data))
	(define (xen) (xen-channel (lambda (y data forward) (* y (car data))) 0 (frames) ind 0 #f #f (lambda (p d) (list 0.25))))
	(define (cxen dat) (vct-scale! dat 0.25))
	(define (rev-channel->vct)
	  (let* ((l (vct-length data))
		 (r (make-sample-reader (1- l) ind 0 -1))
		 (d (make-vct l)))
	    (do ((i (1- l) (1- i)))
		((< i 0))
	      (vct-set! d i (r)))
	    d))
	(define (ptreec1)
	  (ptree-channel (lambda (y data forward)
			   (declare (y real) (data vct) (forward boolean))
			   (* y (vct-ref data 0)))
			 10 50 ind 0 #f #f
			 (lambda (pos dur)
			   (vct 0.625))))
	(define (cptreec1 dat) (do ((i 10 (1+ i))) ((= i 60)) (vct-set! dat i (* (vct-ref dat i) 0.625))))
	
	(let ((xe (make-env '(0 0 1 1) :end 100 :base 32.0)))
	  (do ((i 0 (1+ i))
	       (incr (/ pi 101.0))
	       (ang (* -0.5 pi)))
	      ((= i 101))
	    (vct-set! rto1-data i (* i .01))
	    (vct-set! xto1-data i (env xe))
	    (vct-set! cos-data i (cos ang))
	    (set! ang (+ ang incr))))
	
	(set! (squelch-update ind) #t)
	
	;; 0 case
	(set-to-1)
	(if (not (vvequal data (channel->vct)))
	    (snd-display ";0 case! ~A" (channel->vct)))
	(if (not (vvequal data (rev-channel->vct)))
	    (snd-display ";0 case rev! ~A" (rev-channel->vct)))
	
	;; 1 case
	(for-each
	 (lambda (func check)
	   (revert-sound)
	   (set-to-1)
	   (cset-to-1 data)
	   (func)
	   (check data)
	   (if (not (vvequal data (channel->vct)))
	       (snd-display ";1 case: ~A ~A" (procedure-name func) (channel->vct)))
	   (if (not (vvequal data (rev-channel->vct)))
	       (snd-display ";1 rev case: ~A ~A" (procedure-name func) (rev-channel->vct))))
	 (list scale-by-two ramp-to-1 xramp-to-1 scale-by-half scale-mid on-air ptree ptreec ptreec1 xen)
	 (list cscale-by-two cramp-to-1 cxramp-to-1 cscale-by-half cscale-mid con-air cptree cptreec cptreec1 cxen))
	
	;; 2 case
	(for-each
	 (lambda (func check)
	   (for-each
	    (lambda (func1 check1)
	      (revert-sound)
	      (set-to-1)
	      (cset-to-1 data)
	      (func)
	      (check data)
	      (func1)
	      (check1 data)
	      (if (not (vvequal data (channel->vct)))
		  (snd-display ";2 case: ~A(~A): ~A" (procedure-name func1) (procedure-name func) (channel->vct)))
	      (if (not (vvequal data (rev-channel->vct)))
		  (snd-display ";2 rev case: ~A(~A): ~A" (procedure-name func1) (procedure-name func) (rev-channel->vct))))
	    (list scale-by-two ramp-to-1 xramp-to-1 scale-by-half scale-mid on-air ptree ptreec ptreec1 xen)
	    (list cscale-by-two cramp-to-1 cxramp-to-1 cscale-by-half cscale-mid con-air cptree cptreec cptreec1 cxen)))
	 (list scale-by-two ramp-to-1 xramp-to-1 scale-by-half scale-mid on-air ptree ptreec ptreec1 xen)
	 (list cscale-by-two cramp-to-1 cxramp-to-1 cscale-by-half cscale-mid con-air cptree cptreec cptreec1 cxen))
	
	;; 3 case
	(for-each
	 (lambda (func check)
	   (for-each
	    (lambda (func1 check1)
	      (for-each
	       (lambda (func2 check2)
		 (revert-sound)
		 (set-to-1)
		 (cset-to-1 data)
		 (func)
		 (check data)
		 (func1)
		 (check1 data)
		 (func2)
		 (check2 data)
		 (if (not (vvequal data (channel->vct)))
		     (snd-display ";3 case: ~A(~A(~A)): ~A" (procedure-name func2) (procedure-name func1) (procedure-name func) (channel->vct)))
		 (if (not (vvequal data (rev-channel->vct)))
		     (snd-display ";3 rev case: ~A(~A(~A)): ~A" (procedure-name func2) (procedure-name func1) (procedure-name func) (rev-channel->vct))))
	       (list scale-by-two ramp-to-1 xramp-to-1 scale-by-half scale-mid on-air ptree ptreec ptreec1 xen)
	       (list cscale-by-two cramp-to-1 cxramp-to-1 cscale-by-half cscale-mid con-air cptree cptreec cptreec1 cxen)))
	    (list scale-by-two ramp-to-1 xramp-to-1 scale-by-half scale-mid on-air ptree ptreec ptreec1 xen)
	    (list cscale-by-two cramp-to-1 cxramp-to-1 cscale-by-half cscale-mid con-air cptree cptreec cptreec1 cxen)))
	 (list scale-by-two ramp-to-1 xramp-to-1 scale-by-half scale-mid on-air ptree ptreec ptreec1 xen)
	 (list cscale-by-two cramp-to-1 cxramp-to-1 cscale-by-half cscale-mid con-air cptree cptreec cptreec1 cxen))
	
	(if all-args
	    (begin
	      ;; 4 case
	      (for-each
	       (lambda (func check)
		 (for-each
		  (lambda (func1 check1)
		    (for-each
		     (lambda (func2 check2)
		       (for-each
			(lambda (func3 check3)
			  (revert-sound)
			  (set-to-1)
			  (cset-to-1 data)
			  (func)
			  (check data)
			  (func1)
			  (check1 data)
			  (func2)
			  (check2 data)
			  (func3)
			  (check3 data)
			  (if (not (vvequal data (channel->vct)))
			      (snd-display ";4 case: ~A(~A(~A(~A))): ~A" 
					   (procedure-name func3) (procedure-name func2) (procedure-name func1) (procedure-name func) 
					   (channel->vct)))
			  (if (not (vvequal data (rev-channel->vct)))
			      (snd-display ";4 rev case: ~A(~A(~A(~A))): ~A" 
					   (procedure-name func3) (procedure-name func2) (procedure-name func1) (procedure-name func) 
					   (rev-channel->vct))))
			(list scale-by-two ramp-to-1 xramp-to-1 scale-by-half scale-mid on-air ptree ptreec ptreec1 xen)
			(list cscale-by-two cramp-to-1 cxramp-to-1 cscale-by-half cscale-mid con-air cptree cptreec cptreec1 cxen)))
		     (list scale-by-two ramp-to-1 xramp-to-1 scale-by-half scale-mid on-air ptree ptreec ptreec1 xen)
		     (list cscale-by-two cramp-to-1 cxramp-to-1 cscale-by-half cscale-mid con-air cptree cptreec cptreec1 cxen)))
		  (list scale-by-two ramp-to-1 xramp-to-1 scale-by-half scale-mid on-air ptree ptreec ptreec1 xen)
		  (list cscale-by-two cramp-to-1 cxramp-to-1 cscale-by-half cscale-mid con-air cptree cptreec cptreec1 cxen)))
	       (list scale-by-two ramp-to-1 xramp-to-1 scale-by-half scale-mid on-air ptree ptreec ptreec1 xen)
	       (list cscale-by-two cramp-to-1 cxramp-to-1 cscale-by-half cscale-mid con-air cptree cptreec cptreec1 cxen))
	      
	      ;; 5 case
	      (for-each
	       (lambda (func check)
		 (for-each
		  (lambda (func1 check1)
		    (for-each
		     (lambda (func2 check2)
		       (for-each
			(lambda (func3 check3)
			  (for-each
			   (lambda (func4 check4)
			     (revert-sound)
			     (set-to-1)
			     (cset-to-1 data)
			     (func)
			     (check data)
			     (func1)
			     (check1 data)
			     (func2)
			     (check2 data)
			     (func3)
			     (check3 data)
			     (func4)
			     (check4 data)
			     (if (not (vvequal data (channel->vct)))
				 (snd-display ";5 case: ~A(~A(~A(~A(~A)))): ~A" 
					      (procedure-name func4) (procedure-name func3) (procedure-name func2) 
					      (procedure-name func1) (procedure-name func) 
					      (channel->vct))))
			   (list scale-by-two ramp-to-1 xramp-to-1 scale-by-half scale-mid on-air ptree ptreec ptreec1 xen)
			   (list cscale-by-two cramp-to-1 cxramp-to-1 cscale-by-half cscale-mid con-air cptree cptreec cptreec1 cxen)))
			(list scale-by-two ramp-to-1 xramp-to-1 scale-by-half scale-mid on-air ptree ptreec ptreec1 xen)
			(list cscale-by-two cramp-to-1 cxramp-to-1 cscale-by-half cscale-mid con-air cptree cptreec cptreec1 cxen)))
		     (list scale-by-two ramp-to-1 xramp-to-1 scale-by-half scale-mid on-air ptree ptreec ptreec1 xen)
		     (list cscale-by-two cramp-to-1 cxramp-to-1 cscale-by-half cscale-mid con-air cptree cptreec cptreec1 cxen)))
		  (list scale-by-two ramp-to-1 xramp-to-1 scale-by-half scale-mid on-air ptree ptreec ptreec1)
		  (list cscale-by-two cramp-to-1 cxramp-to-1 cscale-by-half cscale-mid con-air cptree cptreec cptreec1)))
	       (list scale-by-two ramp-to-1 xramp-to-1 scale-by-half scale-mid on-air ptree ptreec ptreec1)
	       (list cscale-by-two cramp-to-1 cxramp-to-1 cscale-by-half cscale-mid con-air cptree cptreec cptreec1))

	      ;; 6 case
	      (for-each
	       (lambda (func check)
		 (for-each
		  (lambda (func1 check1)
		    (for-each
		     (lambda (func2 check2)
		       (for-each
			(lambda (func3 check3)
			  (for-each
			   (lambda (func4 check4)
			     (for-each
			      (lambda (func5 check5)
				(revert-sound)
				(set-to-1)
				(cset-to-1 data)
				(func)
				(check data)
				(func1)
				(check1 data)
				(func2)
				(check2 data)
				(func3)
				(check3 data)
				(func4)
				(check4 data)
				(func5)
				(check5 data)
				(if (not (vvequal data (channel->vct)))
				    (snd-display ";6 case: ~A(~A(~A(~A(~A(~A))))): ~A" 
						 (procedure-name func5) (procedure-name func4) (procedure-name func3) 
						 (procedure-name func2) (procedure-name func1) (procedure-name func) 
						 (channel->vct))))
			      (list scale-by-two ramp-to-1 xramp-to-1 scale-by-half scale-mid on-air ptree ptreec ptreec1 xen)
			      (list cscale-by-two cramp-to-1 cxramp-to-1 cscale-by-half cscale-mid con-air cptree cptreec cptreec1 cxen)))
			   (list scale-by-two ramp-to-1 xramp-to-1 scale-by-half scale-mid on-air ptree ptreec ptreec1 xen)
			   (list cscale-by-two cramp-to-1 cxramp-to-1 cscale-by-half cscale-mid con-air cptree cptreec cptreec1 cxen)))
			(list scale-by-two ramp-to-1 xramp-to-1 scale-by-half scale-mid on-air ptree ptreec ptreec1 xen)
			(list cscale-by-two cramp-to-1 cxramp-to-1 cscale-by-half cscale-mid con-air cptree cptreec cptreec1 cxen)))
		     (list scale-by-two ramp-to-1 xramp-to-1 scale-by-half scale-mid on-air ptree ptreec ptreec1)
		     (list cscale-by-two cramp-to-1 cxramp-to-1 cscale-by-half cscale-mid con-air cptree cptreec cptreec1)))
		  (list scale-by-two ramp-to-1 xramp-to-1 scale-by-half scale-mid on-air)
		  (list cscale-by-two cramp-to-1 cxramp-to-1 cscale-by-half cscale-mid con-air)))
	       (list scale-by-two ramp-to-1 xramp-to-1 scale-by-half scale-mid on-air)
	       (list cscale-by-two cramp-to-1 cxramp-to-1 cscale-by-half cscale-mid con-air))

	      ))
	(close-sound ind))
	
      (set! (optimization) old-opt-val)
	
      (let ((ind (open-sound "oboe.snd")))
	(set! (cursor) 1000)
	(delete-sample 321)
	(if (not (= (cursor) 999)) (snd-display ";delete-sample before cursor: ~A" (cursor)))
	(if (not (= (cursor ind 0 0) 1000)) (snd-display ";delete-sample before cursor (0): ~A" (cursor ind 0 0)))
	(undo)
	(if (not (= (cursor) 1000)) (snd-display ";delete-sample after cursor undo: ~A" (cursor)))
	(undo -1)
	(if (not (= (cursor) 999)) (snd-display ";delete-sample before cursor redo: ~A" (cursor)))
	(redo -1)
	(delete-sample 1321)
	(if (not (= (cursor) 1000)) (snd-display ";delete-sample after cursor: ~A" (cursor)))
	(undo)
	(delete-samples 0 100)
	(if (not (= (cursor) 900)) (snd-display ";delete-samples before cursor: ~A" (cursor)))
	(undo)
	(delete-samples 1100 100)
	(if (not (= (cursor) 1000)) (snd-display ";delete-samples after cursor: ~A" (cursor)))
	(undo)
	(insert-samples 100 100 (make-vct 100))
	(if (not (= (cursor) 1100)) (snd-display ";insert-samples before cursor: ~A" (cursor)))
	(undo)
	(insert-samples 1100 100 (make-vct 100))
	(if (not (= (cursor) 1000)) (snd-display ";insert-samples after cursor: ~A" (cursor)))
	(undo)
	(set! (samples 0 100) (make-vct 100))
	(if (not (= (cursor) 1000)) (snd-display ";set-samples cursor: ~A" (cursor)))
	(close-sound ind))
      
      (let* ((index (open-sound "oboe.snd"))
	     (bnds (x-bounds index))
	     (xp (x-position-slider))
	     (yp (y-position-slider))
	     (xz (x-zoom-slider))
	     (yz (y-zoom-slider)))
	(if (procedure? test-hook) (test-hook 5))
	(if (not (string=? (snd-completion " open-so") " open-sound"))
	    (snd-display ";completion: ~A" (snd-completion " open-so")))
	(if (not (string=? (snd-completion " open-sound") " open-sound"))
	    (snd-display ";completion: ~A" (snd-completion " open-so")))
	(if (not (string=? (snd-completion " zoom-focus-r") " zoom-focus-right"))
	    (snd-display ";completion: ~A" (snd-completion " zoom-focus-r")))
	(play-and-wait "oboe.snd")
	(play-and-wait "oboe.snd" 12000)
	(play-and-wait "oboe.snd" 12000 15000)
      (play-and-wait 0 #f #f #f #f (1- (edit-position)))
      (let ((old-speed (speed-control index))
	    (old-style (speed-control-style))
	    (old-open (show-controls index)))
	(set! (show-controls index) #t)
	(set! (speed-control index) -2.0)
	(play-and-wait 12345 index)
	(set! (speed-control-style) speed-control-as-semitone)
	(set! (speed-control index) 0.5)
	(set! (speed-control-style) speed-control-as-ratio)
	(set! (speed-control index) 0.25)
	(set! (speed-control index) old-speed)
	(set! (speed-control-style) old-style)
	(set! (show-controls index) old-open))
      (bomb index #t)
      (let ((k (disk-kspace "oboe.snd")))
	(if (or (not (number? k))
		(<= k 0))
	    (snd-display ";disk-kspace = ~A" (disk-kspace "oboe.snd")))
	(set! k (disk-kspace "/baddy/hiho"))
	(if (not (= k -1))
	    (snd-display ";disk-kspace of bogus file = ~A" (disk-kspace "/baddy/hiho"))))
      (if (not (= (transform-samples-size) 0)) (snd-display ";transform-samples-size ~A?" (transform-samples-size)))
      (set! (transform-graph?) #t)
      (set! (time-graph?) #t)
      (graph '(0 0 1 1 2 0))
      (update-lisp-graph)
      (graph-data (make-vct 4))
      (update-lisp-graph)
      (graph '#(0 0 1 1 2 0))
      (do ((i 0 (1+ i))) 
	  ((= i 32)) 
	(graph '#(0 1 2)) 
	(graph (list '#(0 1 2) '#(3 2 1) '#(1 2 3)))
	(graph (list '#(0 1 2) '#(3 2 1))))
      (set! (x-bounds) (list 0.0 0.01))
      (let ((data (make-graph-data)))
	(if (vct? data)
	    (let ((mid (inexact->exact (* .5 (vct-length data)))))
	      (if (not (= (vct-length data) (1+ (- (right-sample) (left-sample)))))
		  (snd-display ";make-graph-data bounds: ~A ~A -> ~A" (left-sample) (right-sample) (vct-length data)))
	      (if (fneq (vct-ref data mid)
			(sample (+ (left-sample) mid)))
		  (snd-display ";make-graph-data[~D]: ~A ~A" mid (vct-ref data mid) (sample (+ (left-sample) mid)))))))
      (let ((data (make-graph-data index 0 0 100 199)))
	(if (vct? data)
	    (begin
	      (if (not (= (vct-length data) 100))
		  (snd-display ";make-graph-data 100:199: ~A" (vct-length data)))
	      (if (fneq (vct-ref data 50) (sample 50))
		  (snd-display ";make-graph-data 50: ~A ~A" (vct-ref data 50) (sample 50))))))
      (set! (x-bounds) (list 0.0 0.1))
      (update-transform-graph)
      (if (and (number? (transform-samples-size))
	       (= (transform-samples-size) 0))
	  (snd-display ";transform-graph? transform-samples-size ~A?" (transform-samples-size)))
      (update-transform-graph)
      (peaks "tmp.peaks")
      (if (defined? 'read-line)
	  (let ((p (open-input-file "tmp.peaks")))
	    (if (not p)
		(snd-display ";peaks->tmp.peaks failed?")
		(let ((line (read-line p)))
		  (if (or (not (string? line))
			  (not (string=? "Snd: fft peaks" (substring line 0 14))))
		      (snd-display ";peaks 1: ~A?" line))
		  (set! line (read-line p))
		  (set! line (read-line p))
		  (if (or (not (string? line))
			  (not (string=? "oboe.snd, fft 256 points beginning at sample 0 (0.000 secs)" line)))
		      (snd-display ";peaks 2: ~A?" line))
		  (set! line (read-line p))
		  (set! line (read-line p))
		  (if (or (not (string? line))
			  (and (not (string=? "  86.132812  1.00000" line))
			       (not (string=? "  0.000000  1.00000" line)))) ; fht/fft disagreement about 0/1 (groan)
		      (snd-display ";peaks 3: ~A?" line))
		  (close-port p)
		  (delete-file "tmp.peaks")))))
      (peaks)
      (if (and (provided? 'xm) 
	       (not (XtIsManaged (list-ref (dialog-widgets) 14))))
	  (snd-display ";peaks but no help?"))
      (dismiss-all-dialogs)
      (let* ((num-transforms 7)
	     (num-transform-graph-types 3))
	(set! (transform-graph? index 0) #t)
	(set! (transform-size index 0) 64)
	(do ((i 0 (1+ i)))
	    ((= i num-transforms))
	  (set! (transform-type) i)
	  (do ((j 0 (1+ j)))
	      ((= j num-transform-graph-types))
	    (set! (transform-graph-type index 0) j)
	    (update-transform-graph index 0))))
      (set! (transform-type) fourier-transform)

      (if (read-only index) (snd-display ";read-only open-sound: ~A?" (read-only index)))
      (set! (read-only index) #t)
      (if (not (read-only index)) (snd-display ";set-read-only: ~A?" (read-only index)))
      (bind-key (char->integer #\a) 0 (lambda () (set! a-ctr 3)))
      (key (char->integer #\a) 0) 
      (if (not (= a-ctr 3)) (snd-display ";bind-key: ~A?" a-ctr))
      (let ((str (with-output-to-string (lambda () (display (key-binding (char->integer #\a) 0))))))
	(if (not (string=? str "#<procedure #f (() (set! a-ctr 3))>"))
	    (snd-display ";key-binding: ~A?" str)))
      (unbind-key (char->integer #\a) 0)
      (set! a-ctr 0)
      (key (char->integer #\a) 0) 
      (do ((i 0 (1+ i)))
	  ((= i 5))
	(let ((psf (eps-file)))
	  (if (and psf (string? psf))
	      (begin
		(if (file-exists? psf) (delete-file psf))
		(set! (graph-style) i)
		(graph->ps)
		(if (not (file-exists? psf)) 
		    (snd-display ";graph->ps: ~A?" psf)
		    (delete-file psf))))))
      (let ((err (catch 'cannot-print 
		   (lambda () 
		     (graph->ps "/bad/bad.eps"))
		   (lambda args 12345))))
	(if (not (= err 12345)) (snd-display ";graph->ps err: ~A?" err)))
      (let ((n2 (or (open-sound "2.snd") (open-sound "4.aiff"))))
	(set! (transform-graph? n2) #t)
	(set! (channel-style n2) channels-superimposed)
	(if (not (= (channel-style n2) channels-superimposed)) (snd-display ";channel-style->~D: ~A?" channels-superimposed (channel-style n2)))
	(graph->ps "aaa.eps")
	(set! (channel-style n2) channels-combined)
	(if (not (= (channel-style n2) channels-combined)) (snd-display ";channel-style->~D: ~A?" channels-combined (channel-style n2)))
	(graph->ps "aaa.eps")
	(set! (channel-style n2) channels-separate)
	(if (not (= (channel-style n2) channels-separate)) (snd-display ";channel-style->~D: ~A?" channels-separate (channel-style n2)))
	(graph->ps "aaa.eps")
	(close-sound n2))
      (if (= (channels index) 1)
	  (begin
	    (set! (channel-style index) channels-superimposed)
	    (if (not (= (channel-style index) channels-separate)) (snd-display ";channel-style[0]->~D: ~A?" channels-separate (channel-style index)))))
      (set! (sync index) 32)
      (if (not (= (sync index) 32)) (snd-display ";sync->32: ~A?" (sync index)))
      (set! (sync index) 0)
      (set! (channel-sync index 0) 12)
      (if (not (= (channel-sync index 0) 12)) (snd-display ";sync-chn->12: ~A?" (channel-sync index 0)))
      (set! (channel-sync index 0) 0)
      (if (not (= a-ctr 0)) (snd-display ";unbind-key: ~A?" a-ctr))
      (if (fneq xp 0.0) (snd-display ";x-position-slider: ~A?" xp))
      (if (fneq yp 0.0) (snd-display ";y-position-slider: ~A?" yp))
      (if (fneq xz 0.04338) (snd-display ";x-zoom-slider: ~A?" xz))
      (if (fneq yz 1.0) (snd-display ";y-zoom-slider: ~A?" yz))
      (if (or (fneq (car bnds) 0.0) (fneq (cadr bnds) 0.1)) (snd-display ";x-bounds: ~A?" bnds))
      (if (not (= (find-sound "oboe.snd") index)) (snd-display ";oboe: index ~D /= ~D?" (find-sound "oboe.snd") index))
      (if (not (sound? index)) (snd-display ";oboe: ~D not ok?" index))
      (if (not (= (chans index) 1)) (snd-display ";oboe: chans ~D?" (chans index)))
      (if (not (= (channels index) 1)) (snd-display ";oboe: channels ~D?" (channels index)))
      (if (not (= (frames index) 50828)) (snd-display ";oboe: frames ~D?" (frames index)))
      (if (not (= (srate index) 22050)) (snd-display ";oboe: srate ~D?" (srate index)))
      (if (not (= (data-location index) 28)) (snd-display ";oboe: location ~D?" (data-location index)))
      (if (not (= (data-size index) (* 50828 2))) (snd-display ";oboe: size ~D?" (data-size index)))
      (if (not (= (data-format index) mus-bshort)) (snd-display ";oboe: format ~A?" (data-format index)))
      (if (fneq (maxamp index) .14724) (snd-display ";oboe: maxamp ~F?" (maxamp index)))
      (if (comment index) (snd-display ";oboe: comment ~A?" (comment index)))
      (if (not (= (string-length "asdf") 4)) (snd-display ";string-length: ~A?" (string-length "asdf")))
      (if (not (string=? (short-file-name index) "oboe.snd")) (snd-display ";oboe short name: ~S?" (short-file-name index)))
      (let ((matches (count-matches (lambda (a) (> a .125)))))
	(if (not (= matches 1313)) (snd-display ";count-matches: ~A?" matches)))
      (let ((spot (find (lambda (a) (> a .13)))))
	(if (or (null? spot) (not (= (cadr spot) 8862))) (snd-display ";find: ~A?" spot)))
      (set! (right-sample) 3000) 
      (let ((samp (right-sample)))
	(if (> (abs (- samp 3000)) 1) (snd-display ";right-sample: ~A?" samp)))
      (set! (left-sample) 1000) 
      (let ((samp (left-sample)))
	(if (> (abs (- samp 1000)) 1) (snd-display ";left-sample: ~A?" samp)))
      (let ((eds (edits)))
	(if (or (not (= (car eds) 0)) (not (= (cadr eds) 0)))
	    (snd-display ";edits: ~A?" eds))
	(if (not (= (edit-position) (car eds)))
	    (snd-display ";edit-position: ~A ~A?" (edit-position) eds)))
      (play-and-wait 0 index 0)

      (bomb index #f)
      (select-all index 0) 
      (let ((r0 (car (regions))))
	(if (not (selection?)) (snd-display ";selection?"))
	(if (not (region? r0)) (snd-display ";region?"))
	(if (not (= (selection-chans) 1)) (snd-display ";selection-chans(1): ~A" (selection-chans)))
	(if (not (= (selection-srate) (srate index))) (snd-display ";selection-srate: ~A ~A" (selection-srate) (srate index)))
	(if (fneq (region-maxamp r0) (maxamp index)) (snd-display ";region-maxamp (1): ~A?" (region-maxamp r0)))
	(if (fneq (selection-maxamp index 0) (maxamp index)) (snd-display ";selection-maxamp (1): ~A?" (selection-maxamp index 0)))
	(save-region r0 "temp.dat")
	(if (file-exists? "temp.dat")
	    (delete-file "temp.dat")
	    (snd-display ";save-region file disappeared?"))
	(play-region r0 #t) ;needs to be #t here or it never gets run
	(if (not (= (length (regions)) 1)) (snd-display ";regions: ~A?" (regions)))
	(if (not (selection-member? index)) (snd-display ";selection-member?: ~A" (selection-member? index)))
	(if (not (= (region-srate r0) 22050)) (snd-display ";region-srate: ~A?" (region-srate r0)))
	(if (not (= (region-chans r0) 1)) (snd-display ";region-chans: ~A?" (region-chans r0)))
	(if (not (= (region-frames r0) 50828)) (snd-display ";region-frames: ~A?" (region-frames r0)))
	(if (not (= (selection-frames) 50828)) (snd-display ";selection-frames: ~A?" (selection-frames 0)))
	(if (not (= (selection-position) 0)) (snd-display ";selection-position: ~A?" (selection-position)))
	(if (fneq (region-maxamp r0) (maxamp index)) (snd-display ";region-maxamp: ~A?" (region-maxamp r0)))
	(if (fneq (selection-maxamp index 0) (maxamp index)) (snd-display ";selection-maxamp: ~A?" (selection-maxamp index 0)))
	(let ((samps1 (samples->vct 0 50827 index 0))
	      (samps2 (region-samples->vct 0 50828 r0 0))
	      (vr (make-sample-reader 0 index 0 1)))
	  (if (not (sample-reader? vr)) (snd-display ";~A not sample-reader?" vr))
	  (if (not (= (sample-reader-position vr) 0)) (snd-display ";initial sample-reader-position: ~A" (sample-reader-position vr)))
	  (if (not (equal? (sample-reader-home vr) (list index 0))) 
	      (snd-display ";sample-reader-home: ~A ~A?" (sample-reader-home vr) (list index 0)))
	  (if (not (string? (inspect-sample-reader vr)))
	      (snd-display ";inspect-sample-reader: ~A" (inspect-sample-reader vr)))
	  (let ((err (catch #t
			    (lambda ()
			      (region-samples->vct -1 1233 r0))
			    (lambda args (car args)))))
	    (if (not (eq? err 'no-such-sample)) (snd-display ";region->vct -1: ~A" err)))
	  (let ((err (catch #t
			    (lambda ()
			      (region-samples->vct 12345678 1 r0))
			    (lambda args (car args)))))
	    ;; should this return 'no-such-sample?
	    (if err (snd-display ";region->vct 12345678: ~A" err)))
	  (let ((reader-string (format #f "~A" vr)))
	    (if (not (string=? (substring reader-string 0 18) "#<sample-reader 0x"))
		(snd-display ";sample reader actually got: [~S]" (substring reader-string 0 18)))
	    (if (not (string=? (substring reader-string 25) ": oboe.snd[0: 0] from 0, at 0>"))
		(snd-display ";sample reader actually got: [~S]" (substring reader-string 25))))
	  (let ((evr vr))
	    (if (not (equal? evr vr)) (snd-display ";sample-reader equal? ~A ~A" vr evr)))
	  (catch 'break
		 (lambda ()
		   (do ((i 0 (1+ i)))
		       ((= i 50827))
		     (if (not (= (if (odd? i) (next-sample vr) (read-sample vr)) (vct-ref samps1 i) (vct-ref samps2 i)))
			 (begin
			   (snd-display ";readers disagree at ~D" i)
			   (throw 'break)))))
		 (lambda args (car args)))
	  (free-sample-reader vr)))
      (let ((var (catch #t (lambda () (make-sample-reader 0 index -1)) (lambda args args))))
	(if (not (eq? (car var) 'no-such-channel))
	    (snd-display ";make-sample-reader bad chan (-1): ~A" var)))
      (let ((var (catch #t (lambda () (make-sample-reader 0 index 1)) (lambda args args))))
	(if (not (eq? (car var) 'no-such-channel))
	    (snd-display ";make-sample-reader bad chan (1): ~A, ~A" var index)))
      (let ((fd (make-sample-reader 0)))
	(free-sample-reader fd)
	(let ((str (format #f "~A" fd)))
	  (if (not (string=? (substring str (- (string-length str) 16)) "at eof or freed>"))
	      (snd-display ";freed sample-reader: ~A [~A]?" str (substring str (- (string-length str) 16))))))
      (let* ((reg (car (regions)))
	     (chns (region-chans reg))
	     (var (catch #t (lambda () (make-region-sample-reader 0 index (+ chns 1))) (lambda args args))))
	(if (not (eq? (car var) 'no-such-channel))
	    (snd-display ";make-sample-reader bad chan (2): ~A" var)))
      
      (revert-sound index)
      (insert-sample 100 .5 index) 
      (let ((var (catch #t (lambda () (insert-sound "oboe.snd" 0 1)) (lambda args args))))
	(if (not (eq? (car var) 'no-such-channel))
	    (snd-display ";insert-sound bad chan (1): ~A" var)))
      (let ((var (catch #t (lambda () (insert-sample -12 1.0)) (lambda args args))))
	(if (not (eq? (car var) 'no-such-sample))
	    (snd-display ";insert-sample bad pos: ~A" var)))
      (update-transform-graph index) 
      (update-time-graph index) 
      (if (or (fneq (sample 100) .5)
	      (not (= (frames index) 50829)))
	  (snd-display ";insert-sample: ~A ~A?" (sample 100) (frames index)))
      (let ((v0 (make-vector 3))
	    (v1 (make-vct 3)))
	(vct-fill! v1 .75)
	(do ((i 0 (1+ i))) ((= i 3)) (vector-set! v0 i .25))
	(insert-samples 200 3 v0 index) 
	(insert-samples 300 3 v1 index) 
	(if (or (fneq (sample 201) .25)
		(fneq (sample 301) .75)
	      (not (= (frames index) 50835)))
	    (snd-display ";insert-samples: ~A ~A ~A?" (sample 201) (sample 301) (frames index))))
      (save-sound-as "hiho.snd" index mus-next mus-bshort 22050)
      (let ((nindex (view-sound "hiho.snd")))
	(if (fneq (sample 101 nindex) (sample 101 index))
	    (snd-display ";save-sound-as: ~A ~A?" (sample 101 nindex) (sample 101 index)))
	(if (not (read-only nindex)) (snd-display ";read-only view-sound: ~A?" (read-only nindex)))

	(set! (speed-control-style nindex) speed-control-as-semitone)
	(if (not (= (speed-control-style nindex) speed-control-as-semitone))
	    (snd-display ";speed-control-style set semi: ~A" (speed-control-style nindex)))
	(set! (speed-control-tones nindex) -8)
	(if (not (= (speed-control-tones nindex) 12))
	    (snd-display ";speed-control-tones -8: ~A" (speed-control-tones nindex)))
	(set! (speed-control-tones nindex) 18)
	(if (not (= (speed-control-tones nindex) 18))
	    (snd-display ";speed-control-tones 18: ~A" (speed-control-tones nindex)))
	(graph->ps "aaa.eps")
	(close-sound nindex))
      (revert-sound index)
      (set! (sample 50 index) .5) 
      (if (fneq (sample 50) .5) (snd-display ";set-sample: ~A?" (sample 50)))
      (let ((v0 (make-vector 3)))
	(do ((i 0 (1+ i))) ((= i 3)) (vector-set! v0 i .25))
	(set! (samples 60 3 index) v0) 
	(if (or (fneq (sample 60) .25) (fneq (sample 61) .25))
	    (snd-display ";set-samples: ~A ~A ~A?" (sample 60) (sample 61) (sample 62))))
      (set! (samples 10 3 index) (list 0.1 0.2 0.3))
      (if (not (vequal (samples->vct 10 3 index) (vct 0.1 0.2 0.3)))
	  (snd-display ";set-samples via list: ~A" (samples->vct 10 3 index)))
      (revert-sound index)
      (save-sound-as "temporary.snd" index)
      (set! (samples 100000 20000 index) "temporary.snd")
      (if (not (vequal (samples->vct 110000 10) (samples->vct 10000 10)))
	  (snd-display ";set samples to self: ~A ~A" (samples->vct 110000 10) (samples->vct 10000 10)))
      (revert-sound index)
      (delete-sample 100 index) 
      (if (not (file-exists? "temporary.snd"))
	  (snd-display ";set-samples temp deleted?"))
      (delete-file "temporary.snd")
      (if (not (= (frames index) 50827)) (snd-display ";delete-sample: ~A?" (frames index)))
      (delete-samples 0 100 index) 
      (if (not (= (frames index) 50727)) (snd-display ";delete-samples: ~A?" (frames index)))
      (revert-sound index)
      (let ((maxa (maxamp index)))
	(scale-to .5 index) 
	(let ((newmaxa (maxamp index)))
	  (if (fneq newmaxa .5) (snd-display ";scale-to: ~A?" newmaxa))
	  (undo 1 index) 
	  (scale-by 2.0 index) 
	  (set! newmaxa (maxamp index))
	  (if (fneq newmaxa (* 2.0 maxa)) (snd-display ";scale-by: ~A?" newmaxa))
	  (revert-sound index)
	  (scale-by -1 index)
	  (mix "oboe.snd")
	  (if (fneq (maxamp index 0) 0.0) (snd-display ";invert+mix->~A" (maxamp)))
	  (revert-sound index)
	  (select-all index) 
	  (if (not (= (length (regions)) 2)) (snd-display ";regions(2): ~A?" (regions)))
	  (scale-selection-to .5) 
	  (set! newmaxa (maxamp index))
	  (if (fneq newmaxa .5) (snd-display ";scale-selection-to: ~A?" newmaxa))
	  (revert-sound index)
	  (select-all index) 
	  (scale-selection-by 2.0) 
	  (set! newmaxa (maxamp index))
	  (if (fneq newmaxa (* 2.0 maxa)) (snd-display ";scale-selection-by: ~A?" newmaxa))
	  (revert-sound index)
	  (select-all index) 
	  (let ((rread (make-region-sample-reader 0 (car (regions))))
		(sread (make-sample-reader 0 index))
		(rvect (region-samples->vct 0 100 (car (regions))))
		(svect (samples 0 100 index)))
	    (if (fneq (vct-ref rvect 1) (region-sample 1 (car (regions))))
		(snd-display ";region-sample: ~A ~A?" (region-sample 1 (car (regions))) (vct-ref rvect 1)))
	    (do ((i 0 (1+ i)))
		((= i 100))
	      (let ((rval (next-sample rread))
		    (sval (next-sample sread)))
		(if (fneq rval sval) (snd-display ";sample-read: ~A ~A?" rval sval))
		(if (fneq rval (vct-ref rvect i)) (snd-display ";region-samples: ~A ~A?" rval (vct-ref rvect i)))
		(if (fneq sval (vct-ref svect i)) (snd-display ";samples: ~A ~A?" sval (vct-ref svect i)))))
	    (free-sample-reader rread) 
	    (let ((val0 (next-sample sread)))
	      (if (sample-reader-at-end? sread) (snd-display ";premature end?"))
	      (previous-sample sread)
	      (let ((val1 (previous-sample sread)))
		(if (fneq val0 val1) (snd-display ";previous-sample: ~A ~A?" val0 val1))))
	    (free-sample-reader sread))))
      (revert-sound index)
      (let ((s100 (sample 100))
	    (s40 (sample 40))
	    (len (frames))
	    (addlen (mus-sound-frames "fyow.snd")))
	(set! (cursor-style) cursor-line)
	(set! (cursor-size) 25)
	(set! (cursor index) 50) 
	(if (not (= (cursor-style) cursor-line))
	    (snd-display ";cursor-style: ~A? " (cursor-style)))
	(if (not (= (cursor-size) 25))
	    (snd-display ";cursor-size: ~A? " (cursor-size)))
	(set! (cursor-style) cursor-cross)
	(set! (cursor-size) 15)
	(set! (cursor index 0) 30) 
	(set! (cursor-style) cursor-line)
	(set! (cursor index 0) 20) 
	(if with-gui
	    (set! (cursor-style index 0)
		  (lambda (snd chn ax)
		    (let* ((point (cursor-position))
			   (x (car point))
			   (y (cadr point))
			   (size (inexact->exact (/ (cursor-size) 2))))
		      (draw-line (- x size) (- y size) (+ x size) (+ y size) snd chn cursor-context)    
		      (draw-line (- x size) (+ y size) (+ x size) (- y size) snd chn cursor-context)))))
	(set! (cursor index) 50)
	(insert-sound "fyow.snd" (cursor) 0 index 0) 
	(if (or (fneq (sample 40) s40) (not (fneq (sample 100) s100)) (fneq (sample 100) 0.001831))
	    (snd-display ";insert-sound: ~A?" (sample 100)))
	(if (not (= (frames) (+ len addlen))) (snd-display ";insert-sound len: ~A?" (frames)))
	(save-sound-as "not-temporary.snd")
	(insert-samples 0 100 "not-temporary.snd")
	(set! (cursor index 0 0) (- (frames index 0 0) 2))
	(revert-sound)
	(if (not (= (cursor index 0) (- (frames index 0) 2)))
	    (snd-display ";set edpos cursor: ~A ~A ~A" (cursor) (cursor index 0 0) (- (frames index 0 0) 2)))
	(if (not (file-exists? "not-temporary.snd"))
	    (snd-display ";insert-samples deleted its file?")
	    (delete-file "not-temporary.snd"))
	(let ((id (make-region 0 99)))
	  (insert-region 60 id index) 
	  (if (not (= (frames) (+ len 100))) (snd-display ";insert-region len: ~A?" (frames)))
	  (if (fneq (sample 100) s40) (snd-display ";insert-region: ~A ~A?" (sample 100) s40))
	  (let ((var (catch #t (lambda () (insert-region 0 (+ 1000 (apply max (regions))))) (lambda args args))))
	    (if (not (eq? (car var) 'no-such-region))
		(snd-display ";insert-region bad id: ~A" var)))
	  (save-region id "fmv.snd")
	  (if (not (= (mus-sound-header-type "fmv.snd") mus-next))
	      (snd-display ";save-region header: ~A?" (mus-header-type-name (mus-sound-header-type "fmv.snd"))))
	  (if (not (= (mus-sound-data-format "fmv.snd") mus-out-format))
	      (snd-display ";save-region format: ~A?" (mus-data-format-name (mus-sound-data-format "fmv.snd"))))
	  (if (not (= (mus-sound-srate "fmv.snd") (region-srate id)))
	      (snd-display ";save-region srate: ~A (~A)" (mus-sound-srate "fmv.snd") (region-srate id)))
	  (if (not (= (mus-sound-chans "fmv.snd") (region-chans id)))
	      (snd-display ";save-region chans: ~A (~A)" (mus-sound-chans "fmv.snd") (region-chans id)))
	  (if (not (= (mus-sound-frames "fmv.snd") (region-frames id)))
	      (snd-display ";save-region length: ~A (~A)" (mus-sound-frames "fmv.snd") (region-frames id)))
	  (delete-file "fmv.snd")
	  (save-region id "fmv.snd" mus-riff mus-lshort "this is a comment")
	  (if (not (= (mus-sound-header-type "fmv.snd") mus-riff))
	      (snd-display ";save-region riff header: ~A?" (mus-header-type-name (mus-sound-header-type "fmv.snd"))))
	  (if (not (= (mus-sound-data-format "fmv.snd") mus-lshort))
	      (snd-display ";save-region lshort format: ~A?" (mus-data-format-name (mus-sound-data-format "fmv.snd"))))
	  (if (not (= (mus-sound-frames "fmv.snd") (region-frames id)))
	      (snd-display ";save-region length: ~A (~A)" (mus-sound-frames "fmv.snd") (region-frames id)))
	  (if (not (string=? (mus-sound-comment "fmv.snd") "this is a comment"))
	      (snd-display ";save-region comment: ~A" (mus-sound-comment "fmv.snd")))
	  (delete-file "fmv.snd")))
      (close-sound index)
      (let ((var (catch #t (lambda () (new-sound "hi.snd" 0 1 100 0)) (lambda args args))))
	  (if (not (eq? (car var) 'out-of-range))
	      (snd-display ";new-sound bad chan: ~A" var)))
      (set! index (new-sound "fmv.snd" mus-next mus-bshort 22050 2 "unequal lens"))
      (insert-silence 0 1000 index 1)
      (if (or (not (= (frames index 0) 1))
	      (not (= (frames index 1) 1001)))
	  (snd-display ";silence 1: ~A ~A" (frames index 0) (frames index 1)))
      (save-sound index)
      (if (or (not (= (frames index 0) 1001))
	      (not (= (frames index 1) 1001)))
	  (snd-display ";saved silence 1: ~A ~A" (frames index 0) (frames index 1)))
      (if (not (= (mus-sound-frames "fmv.snd") 1001))
	  (snd-display ";saved framers silence 1: ~A" (mus-sound-frames "fmv.snd")))
      (let ((v0 (samples->vct 0 1000 index 0))
	    (v1 (samples->vct 0 1000 index 1)))
	(if (fneq (vct-peak v0) 0.0)
	    (snd-display ";auto-pad 0: ~A" (vct-peak v0)))
	(if (fneq (vct-peak v1) 0.0)
	    (snd-display ";silence 0: ~A" (vct-peak v1))))
      (close-sound index)
      (delete-file "fmv.snd")

      (set! index (new-sound "fmv.snd" mus-next mus-bshort 22050 2 "unequal lens"))
      (pad-channel 0 1000 index 1)
      (if (or (not (= (frames index 0) 1))
	      (not (= (frames index 1) 1001)))
	  (snd-display ";pad-channel 1: ~A ~A" (frames index 0) (frames index 1)))
      (let ((v0 (samples->vct 0 1000 index 0))
	    (v1 (samples->vct 0 1000 index 1)))
	(if (fneq (vct-peak v0) 0.0)
	    (snd-display ";pad 0: ~A" (vct-peak v0)))
	(if (fneq (vct-peak v1) 0.0)
	    (snd-display ";pad 1: ~A" (vct-peak v1))))
      (map-channel (lambda (n) 1.0) 0 2 index 0)
      (map-channel (lambda (n) 1.0) 0 1002 index 1)
      (pad-channel 0 1000 index 0 1)
      (if (not (= (frames index 1) 1002))
	  (snd-display ";pad-channel ed 1: ~A ~A" (frames index 0) (frames index 1)))
      (close-sound index)
      (delete-file "fmv.snd")

      (set! index (new-sound "fmv.snd" mus-ircam mus-bshort 22050 1 "this is a comment"))
      (let ((v0 (make-vct 128)))
	(vct-set! v0 64 .5)
	(vct-set! v0 127 .5)
	(vct->samples 0 128 v0 index 0)
	(make-selection 0 126) 
	(smooth-selection) 
	(set! v0 (samples->vct 0 128 index 0 v0))
	(if (or (fneq (sample 127) .5) (fneq (sample 120) .4962) (fneq (sample 32) 0.07431) (fneq (sample 64) 0.25308))
	    (snd-display ";smooth-selection: ~A?" v0))
	(revert-sound index)
	(vct-fill! v0 0.0)
	(vct-set! v0 10 .5)
	;(vct->samples 0 128 v0 index 0) 
	(vct->samples v0)
	(select-all) 
	(set! (sinc-width) 40)
	(src-selection 0.5) 
	(set! v0 (samples->vct 0 128 index 0 v0))
	(if (or (fneq (sample 20) .5) (fneq (sample 30) 0.0) (fneq (sample 17) -.1057) )
	    (snd-display ";src-selection: ~A?" v0))
	(revert-sound index)
	(vct-fill! v0 0.0)
	(vct-set! v0 10 .5)
	;(vct->samples 0 128 v0 index 0) 
	(vct->samples 0 v0)
	(select-all) 
	(filter-selection '(0 0 .1 1 1 0) 40) 
	(set! v0 (samples->vct 0 128 index 0 v0)) 
	(if (or (fneq (sample 29) .1945) (fneq (sample 39) -.0137) (fneq (sample 24) -0.01986))
	    (snd-display ";filter-selection: ~A?" v0))
	(revert-sound index)
	(vct-fill! v0 1.0)
	(vct->samples 0 128 v0 index 0) 
	(select-all) 
	(filter-selection (make-one-zero :a0 .5 :a1 0.0))
	(set! v0 (samples->vct 0 128 index 0 v0)) 
	(if (or (fneq (sample 29) .5) (fneq (sample 39) .5) (fneq (sample 24) 0.5))
	    (snd-display ";filter-selection one-zero: ~A?" v0))
	(revert-sound index)
	(vct-fill! v0 1.0)
	(vct->samples 0 128 v0 index 0) 
	(if (file-exists? "fmv5.snd") (delete-file "fmv5.snd"))
	(select-all) 
	(env-selection '(0 0 1 1 2 0) 1.0) 
	(set! v0 (samples->vct 0 128 index 0 v0)) 
	(if (or (fneq (sample 64) 1.0) (fneq (sample 20) .3125) (fneq (sample 119) 0.127))
	    (snd-display ";env-selection: ~A ~A ~A ~A?" (sample 64) (sample 20) (sample 119) v0))
	(save-selection "fmv5.snd" mus-next mus-bint 22050 "") ;1.0->-1.0 if short
	(revert-sound index)
	(let ((tag (catch #t (lambda () (file->array "/baddy/hiho" 0 0 128 v0)) (lambda args (car args)))))
	  (if (not (eq? tag 'no-such-file)) (snd-display ";file->array w/o file: ~A" tag)))
	(let ((tag (catch #t (lambda () (file->array "fmv5.snd" 123 0 128 v0)) (lambda args (car args)))))
	  (if (not (eq? tag 'no-such-channel)) (snd-display ";file->array w/o channel: ~A" tag)))
	(file->array "fmv5.snd" 0 0 128 v0) 
	(if (or (fneq (vct-ref v0 64) 1.0) (fneq (vct-ref v0 20) .3125) (fneq (vct-ref v0 119) 0.127))
	    (snd-display ";save-selection: ~A ~A ~A ~A?" (vct-ref v0 64) (vct-ref v0 20) (vct-ref v0 119) v0))
	(if (not (= (mus-sound-header-type "fmv5.snd") mus-next))
	    (snd-display ";save-selection type: ~A?" (mus-header-type-name (mus-sound-header-type "fmv5.snd"))))
	(if (not (= (mus-sound-data-format "fmv5.snd") mus-bint))
	    (snd-display ";save-selection format: ~A?" (mus-data-format-name (mus-sound-data-format "fmv5.snd"))))
	(if (not (= (mus-sound-srate "fmv5.snd") 22050))
	    (snd-display ";save-selection srate: ~A?" (mus-sound-srate "fmv5.snd")))
	(vct-fill! v0 0.0)
	(vct-set! v0 100 .5)
	(vct-set! v0 2 -.5)
	(vct->samples 0 128 v0 index 0) 
	(select-all) 
	(without-errors (reverse-selection)) 
	(save-selection "fmv4.snd" mus-riff mus-lfloat 44100 "this is a comment")
	(set! v0 (samples->vct 0 128 index 0 v0)) 
	(if (or (fneq (sample 27) 0.5) (fneq (sample 125) -.5))
	    (snd-display ";reverse-selection: ~A?" v0))
	(file->array "fmv4.snd" 0 0 128 v0) 
	(if (or (fneq (sample 27) 0.5) (fneq (sample 125) -.5))
	    (snd-display ";save reverse-selection: ~A?" v0))
	(if (not (= (mus-sound-header-type "fmv4.snd") mus-riff))
	    (snd-display ";save-selection type 1: ~A?" (mus-header-type-name (mus-sound-header-type "fmv4.snd"))))
	(if (not (= (mus-sound-data-format "fmv4.snd") mus-lfloat))
	    (snd-display ";save-selection format 1: ~A?" (mus-data-format-name (mus-sound-data-format "fmv4.snd"))))
	(if (not (= (mus-sound-srate "fmv4.snd") 44100))
	    (snd-display ";save-selection srate 1: ~A?" (mus-sound-srate "fmv4.snd")))
	(if (not (string=? (mus-sound-comment "fmv4.snd") "this is a comment"))
	    (snd-display ";save-selection comment: ~A?" (mus-sound-comment "fmv4.snd")))
	(delete-file "fmv4.snd")
	(revert-sound index)
	(vct-fill! v0 0.0)
	(vct-set! v0 2 1.0)
	(let ((v1 (make-vct 256)))
	  (do ((i 0 (1+ i)))
	      ((= i 128))
	    (vct-set! v1 i (vct-ref v0 i)))
	  (vct->samples 0 128 v1 index 0))
	(select-all) 
	(convolve-selection-with "fmv5.snd" .5) 
	(set! v0 (samples->vct 0 128 index 0 v0))
	(if (fneq (sample 66) -.5) (snd-display ";convolve-selection-with: ~A ~A ~A?" (vct-ref v0 66) (sample 66) v0))
	(close-sound index))
      (let* ((obind (open-sound "oboe.snd"))
	     (vol (maxamp obind))
	     (dur (frames)))
	(set! (amp-control obind) 2.0)
	(if (fffneq (amp-control obind) 2.0) (snd-display ";set amp-control ~A" (amp-control obind)))
	(reset-controls obind)
	(if (ffneq (amp-control obind) 1.0) (snd-display ";reset amp-control ~A" (amp-control obind)))
	(set! (amp-control obind) 2.0)
	(if (eq? (without-errors (apply-controls obind)) 'no-such-sound) (snd-display ";apply-controls can't find oboe.snd?"))
	(let ((newamp (maxamp obind)))
	  (if (> (abs (- (* 2.0 vol) newamp)) .05) (snd-display ";apply amp: ~A -> ~A?" vol newamp))
	  (set! (speed-control obind) 0.5)
	  (add-mark 1234)
	  (apply-controls obind)
	  (let ((newdur (frames obind)))
	    (set! (speed-control obind) 1.0)
	    (if (not (< (- newdur (* 2.0 dur)) 256)) (snd-display ";apply speed: ~A -> ~A?" dur newdur))
	    ;; within 256 which is apply's buffer size (it always flushes full buffers) 
	    (set! (contrast-control? obind) #t)
	    (set! (contrast-control obind) 1.0)
	    (apply-controls obind)
	    (let ((secamp (maxamp obind))
		  (secdur (frames obind)))
	      (if (fneq secamp .989) (snd-display ";apply contrast: ~A?" secamp))
	      (if (not (= secdur newdur)) (snd-display ";apply contrast length: ~A -> ~A?" newdur secdur))
	      (undo 3 obind)
	      (set! (reverb-control? obind) #t)
	      (set! (reverb-control-scale obind) .2)
	      (apply-controls obind)
	      (let ((revamp (maxamp obind))
		    (revdur (frames obind)))
		(if (fneq revamp .213) (snd-display ";apply reverb scale: ~A?" revamp))
		(if (not (< (- revdur (+ 50828 (inexact->exact (* (reverb-control-decay) 22050)))) 256)) 
		    (snd-display ";apply reverb length: ~A?" revdur))
		(undo 1 obind)
		(set! (expand-control? obind) #t)
		(set! (expand-control obind) 1.5)
		(apply-controls obind)
		(let ((expamp (maxamp obind))
		      (expdur (frames obind)))
		  (if (fneq expamp .152) (snd-display ";apply expand-control scale: ~A?" expamp))
		  (if (not (> expdur (* 1.25 50828))) (snd-display ";apply expand-control length: ~A?" expdur))
		  (undo 1 obind)
		  (set! (filter-control? obind) #t)
		  (set! (filter-control-order obind) 40)
		  (set! (filter-control-env obind) '(0 0 1 .5 1 0))
		  (apply-controls obind)
		  (let ((fltamp (maxamp obind))
			(fltdur (frames obind)))
		    (if (> (abs (- fltamp .01)) .005) (snd-display ";apply filter scale: ~A?" fltamp))
		    (if (> (- fltdur (+ 40 50828)) 256) (snd-display ";apply filter length: ~A?" fltdur))
		    (undo 1 obind)))))))
	(revert-sound obind)
	(make-selection 1000 1000)
	(scale-selection-to .1)
	(scale-selection-by 2.0)
	(make-selection 2000 2001)
	(scale-selection-by 2.0)
	(scale-selection-to .5)
	(make-selection 1000 2001)
	(scale-selection-to .5)
	(scale-selection-by .5)
	(make-selection 2000 2000)
	(scale-selection-by 2.0)
	(scale-selection-to .5)
	(make-selection 1000 1001)
	(scale-selection-to .1)
	(scale-selection-by 2.0)
	(make-selection 999 2002)
	(scale-selection-to 1.0)
	(scale-selection-by .5)
	(let ((tree (edit-tree))
	      (true-tree '((0 0 0 998 1.0 0.0 0.0 0) 
			   (999 0 999 999 0.999969720840454 0.0 0.0 0) 
			   (1000 0 1000 1000 6.09052181243896 0.0 0.0 0) 
			   (1001 0 1001 1001 0.999969720840454 0.0 0.0 0) 
			   (1002 0 1002 1999 0.499984979629517 0.0 0.0 0) 
			   (2000 0 2000 2000 7.54652404785156 0.0 0.0 0) 
			   (2001 0 2001 2001 3.7732629776001 0.0 0.0 0) 
			   (2002 0 2002 2002 0.999969720840454 0.0 0.0 0) 
			   (2003 0 2003 50827 1.0 0.0 0.0 0) 
			   (50828 -2 0 0 0.0 0.0 0.0 0))))
	  (if (not (= (length tree) (length true-tree)))
	      (snd-display ";edit trees are not same length: ~A ~A?" (length tree) (length true-tree))
	      (let ((len (length tree)))
		(do ((i 0 (1+ i)))
		    ((= i len))
		  (let ((branch (list-ref tree i))
			(true-branch (list-ref true-tree i)))
		    (if (or (not (= (car branch) (car true-branch)))
			    (not (= (cadr branch) (cadr true-branch)))
			    (not (= (caddr branch) (caddr true-branch)))
			    (not (= (cadddr branch) (cadddr true-branch)))
			    (fneq (list-ref branch 4) (list-ref true-branch 4)))
			(snd-display ";edit trees disagree at ~D: ~A ~A" i branch true-branch)))))))
	(insert-silence 1001 8)
	(insert-silence 900 50)
	(insert-silence 2005 1)
	(insert-silence 999 2)
	(let ((tree (edit-tree))
	      (true-tree '((0 0 0 899 1.0 0.0 0.0 0) 
			   (900 -1 0 49 0.0 0.0 0.0 0) 
			   (950 0 900 948 1.0 0.0 0.0 0) 
			   (999 -1 0 1 0.0 0.0 0.0 0) 
			   (1001 0 949 998 1.0 0.0 0.0 0) 
			   (1051 0 999 999 0.999969720840454 0.0 0.0 0) 
			   (1052 0 1000 1000 6.09052181243896 0.0 0.0 0) 
			   (1053 -1 0 7 0.0 0.0 0.0 0) 
			   (1061 0 1001 1001 0.999969720840454 0.0 0.0 0)
			   (1062 0 1002 1946 0.499984979629517 0.0 0.0 0) 
			   (2007 -1 0 0 0.0 0.0 0.0 0) 
			   (2008 0 1947 1999 0.499984979629517 0.0 0.0 0) 
			   (2061 0 2000 2000 7.54652404785156 0.0 0.0 0) 
			   (2062 0 2001 2001 3.7732629776001 0.0 0.0 0) 
			   (2063 0 2002 2002 0.999969720840454 0.0 0.0 0) 
			   (2064 0 2003 50827 1.0 0.0 0.0 0) 
			   (50889 -2 0 0 0.0 0.0 0.0 0))))
	  (if (not (= (length tree) (length true-tree)))
	      (snd-display ";silenced edit trees are not same length: ~A ~A?" (length tree) (length true-tree))
	      (let ((len (length tree)))
		(do ((i 0 (1+ i)))
		    ((= i len))
		  (let ((branch (list-ref tree i))
			(true-branch (list-ref true-tree i)))
		    (if (or (not (= (car branch) (car true-branch)))
			    (not (= (cadr branch) (cadr true-branch)))
			    (not (= (caddr branch) (caddr true-branch)))
			    (not (= (cadddr branch) (cadddr true-branch)))
			    (fneq (list-ref branch 4) (list-ref true-branch 4)))
			(snd-display ";silenced edit trees disagree at ~D: ~A ~A" i branch true-branch)))))))
	(if (or (fneq (sample 998) -.03)
		(fneq (sample 999) 0.0)
		(fneq (sample 1000) 0.0)
		(fneq (sample 1001) -.03))
	    (snd-display (format ";insert-silence [999 for 2]: ~A ~A ~A ~A?" (sample 998) (sample 999) (sample 1000) (sample 1001) )))
	(if (or (fneq (sample 2006) -.033)
		(fneq (sample 2007) 0.0)
		(fneq (sample 2008) -.033))
	    (snd-display (format ";insert-silence [2007 for 1]: ~A ~A ~A?" (sample 2006) (sample 2007) (sample 2008))))
	(revert-sound obind)
	(add-mark 1200 obind 0)
	(let ((mark-num (length (marks obind 0))))
	  (scale-by 2.0 obind 0)
	  (let ((mark-now (length (marks obind 0))))
	    (if (not (= mark-num mark-now))
		(snd-display ";mark lost after scaling?"))
	    (set! (selection-position) 0)
	    (set! (selection-frames) 100)
	    (scale-selection-to .5)
	    (set! mark-now (length (marks obind 0)))
	    (if (not (= mark-num mark-now))
		(snd-display ";mark lost after selection scaling?")))
	  (let ((m1 (add-mark 1000)))
	    (set! (cursor obind 0) 100)
	    (key (char->integer #\u) 4 obind)
	    (key (char->integer #\1) 0 obind)
	    (key (char->integer #\0) 0 obind)
	    (key (char->integer #\0) 0 obind)
	    (key (char->integer #\o) 4 obind)
	    (if (not (= (mark-sample m1) 1100))
		(snd-display ";mark after zeros: ~D (1100)? " (mark-sample m1)))))
	(revert-sound obind)
	(let ((frs (frames obind)))
	  (make-region 0 999 obind 0)
	  (if (not (selection?)) (snd-display ";make-region but no selection? ~A" (selection?)))
	  (delete-selection)
	  (if (not (= (frames obind) (- frs 1000)))
	      (snd-display ";delete-selection: ~A?" (frames obind)))
	  (let ((val (sample 0 obind 0)))
	    (undo)
	    (if (fneq (sample 1000) val)
		(snd-display ";delete-selection val: ~A ~A" val (sample 1000)))
	    (insert-selection)
	    (let ((var (catch #t (lambda () (insert-selection 0 obind 123)) (lambda args args))))
	      (if (not (eq? (car var) 'no-such-channel))
		  (snd-display ";insert-selection bad chan: ~A" var)))
	    (let ((var (catch #t (lambda () (mix-selection 0 obind 123)) (lambda args args))))
	      (if (not (eq? (car var) 'no-such-channel))
		  (snd-display ";mix-selection bad chan: ~A" var)))
	    (if (not (= (frames obind) (+ frs 1000)))
		(snd-display ";insert-selection: ~A?" (frames obind)))
	    (if (fneq (sample 2000) val)
		(snd-display ";insert-selection val: ~A ~A" val (sample 2000)))
	    (set! val (sample 900))
	    (mix-selection)
	    (if (fneq (sample 900) (* 2 val))
		(snd-display ";mix-selection val: ~A ~A" (* 2 val) (sample 900)))
	    (if (not (= (frames obind) (+ frs 1000)))
		(snd-display ";mix-selection: ~A?" (frames obind)))))
	(close-sound obind))

      (let* ((ind (open-sound "2.snd"))
	     (apply-to-sound 0)
	     (apply-to-channel 1)
	     (apply-to-selection 2)
	     (len (frames ind)))
	(set! (sync ind) 1)
	(set! (speed-control ind) .5)
	(apply-controls ind apply-to-sound) ; temp 1
	(if (> (abs (- (frames) (* 2 len))) 256)
	    (snd-display ";apply srate .5: ~A ~A" (frames) (* 2 len)))
	(make-selection 0 (frames))
	(set! (speed-control ind) .5)
	(apply-controls ind apply-to-selection) ; temp 2
	(if (> (abs (- (frames) (* 4 len))) 256)
	    (snd-display ";apply srate .5 to selection: ~A ~A" (frames) (* 4 len)))
	(env-sound '(0 0 1 1) 0 (frames) 32.0) ; temp 3
	(let ((reg (select-all))) ; make multi-channel region
	  (insert-region 0 reg) ; temp 4
	  (insert-selection 0))  ; temp 5
	(revert-sound ind)
	(set! (speed-control) .5)
	(set! (sync ind) 0)
	(set! (selected-channel ind) 1)
	(apply-controls ind apply-to-channel)
	(if (> (abs (- (frames ind 1) (* 2 len))) 256)
	    (snd-display ";apply srate .5 to chan 1: ~A ~A" (frames ind 1) (* 2 len)))
	(if (not (= (frames ind 0) len))
	    (snd-display ";apply srate .5 but chan 0: ~A ~A" (frames ind 0) len))
	(set! (speed-control ind) .5)
	(apply-controls ind apply-to-sound 1000)
	(make-selection 2000 4000)
	(set! (speed-control ind) .5)
	(apply-controls ind apply-to-selection)
	(set! (selected-channel ind) #f)
	(if (selected-channel ind) (snd-display ";selected-channel #f: ~A" (selected-channel ind)))
	(close-sound ind))

      (let* ((ind1 (open-sound "oboe.snd"))
	     (mx1 (maxamp ind1 0))
	     (ind2 (open-sound "2.snd"))
	     (mx20 (maxamp ind2 0))
	     (mx21 (maxamp ind2 1)))
	(select-sound ind1)
	(scale-sound-by 2.0)
	(let ((nmx (maxamp ind1 0)))
	  (if (fneq (* 2 mx1) nmx) (snd-display ";scale-sound-by 2.0: ~A ~A?" mx1 nmx))
	  (if (not (equal? (edit-fragment 1 ind1 0) (list "scale-channel 2.0000 0 50828" "scale" 0 50828)))
	      (snd-display ";scale-sound-by: ~A?" (edit-fragment 1 ind1 0))))
	(scale-sound-to 0.5)
	(let ((nmx (maxamp ind1 0)))
	  (if (fneq nmx 0.5) (snd-display ";scale-sound-to 0.5: ~A?" nmx))
	  (if (not (equal? (edit-fragment 2 ind1 0) (list "scale-channel 1.6978 0 50828" "scale" 0 50828)))
	      (snd-display ";scale-sound-to: ~A?" (edit-fragment 2 ind1 0))))
	(scale-sound-by 0.0 0 1000 ind1 0)
	(let ((nmx (maxamp ind1 0)))
	  (if (fneq 0.5 nmx) (snd-display ";scale-sound-by 0.0: ~A ~A?" mx1 nmx))
	  (if (not (equal? (edit-fragment 3 ind1 0) (list "scale-channel 0.0000 0 1000" "scale" 0 1000)))
	      (snd-display ";scale-sound-by 0.0: ~A?" (edit-fragment 3 ind1 0))))
	(let* ((v (samples->vct 0 1000 ind1 0))
	       (pk (vct-peak v)))
	  (if (fneq pk 0.0) (snd-display ";scale-sound-by 0.0 [0:1000]: ~A?" pk)))
	(revert-sound ind1)
	(let ((oldv (samples->vct 12000 10 ind1 0)))
	  (scale-sound-by 2.0 12000 10 ind1 0)
	  (let ((newv (samples->vct 12000 10 ind1 0)))
	    (do ((i 0 (1+ i)))
		((= i 10))
	      (if (fneq (* 2.0 (vct-ref oldv i)) (vct-ref newv i))
		  (snd-display ";scale ~D: ~A ~A?" i (vct-ref oldv i) (vct-ref newv i)))))
	  (if (not (equal? (edit-fragment 1 ind1 0) (list "scale-channel 2.0000 12000 10" "scale" 12000 10)))
	      (snd-display ";scale-sound-by 2.0 [12000:10]: ~A?" (edit-fragment 1 ind1 0))))
	(revert-sound ind1)
	(select-sound ind2)
	(scale-sound-by 2.0)
	(let ((nmx (maxamp ind2 0)))
	  (if (fneq (* 2 mx20) nmx) (snd-display ";2:0 scale-sound-by 2.0: ~A ~A?" mx20 nmx)))
	(let ((nmx (maxamp ind2 1)))
	  (if (fneq (* 2 mx21) nmx) (snd-display ";2:1 scale-sound-by 2.0: ~A ~A?" mx21 nmx)))
	(scale-sound-to 0.5)
	(let ((nmx (max (maxamp ind2 0) (maxamp ind2 1))))
	  (if (fneq nmx 0.5) (snd-display ";2 scale-sound-to 0.5: ~A (~A)?" nmx (maxamp ind2))))
	(scale-sound-by 0.0 0 1000 ind2 1)
	(if (not (equal? (edit-fragment 3 ind2 1) (list "scale-channel 0.0000 0 1000" "scale" 0 1000)))
	    (snd-display ";2:1 scale-sound-by 0.0: ~A?" (edit-fragment 3 ind2 1)))
	(let* ((v (samples->vct 0 1000 ind2 1))
	       (pk (vct-peak v)))
	  (if (fneq pk 0.0) (snd-display ";2:1 scale-sound-by 0.0 [0:1000]: ~A?" pk)))
	(revert-sound ind2)
	(let ((oldv (samples->vct 12000 10 ind2 0)))
	  (scale-sound-by 2.0 12000 10 ind2 0)
	  (let ((newv (samples->vct 12000 10 ind2 0)))
	    (do ((i 0 (1+ i)))
		((= i 10))
	      (if (fneq (* 2.0 (vct-ref oldv i)) (vct-ref newv i))
		  (snd-display ";2 scale ~D: ~A ~A?" i (vct-ref oldv i) (vct-ref newv i))))))
	(revert-sound ind2)
	(set! (sync ind2) 3)
	(set! (sync ind1) 3)
	(scale-sound-by 2.0)
	(let ((nmx (maxamp ind1 0)))
	  (if (fneq mx1 nmx) (snd-display ";sync scale-sound-by 2.0: ~A ~A?" mx1 nmx)))
	(let ((nmx (maxamp ind2 0)))
	  (if (fneq (* 2 mx20) nmx) (snd-display ";2:0 sync scale-sound-by 2.0: ~A ~A?" mx20 nmx)))
	(let ((nmx (maxamp ind2 1)))
	  (if (fneq (* 2 mx21) nmx) (snd-display ";2:1 sync scale-sound-by 2.0: ~A ~A?" mx21 nmx)))
	(scale-sound-to 1.0 20000 40000 ind2 1)
	(let ((nmx (maxamp ind1 0)))
	  (if (fneq mx1 nmx) (snd-display ";sync scale-sound-to 1.0: ~A ~A?" mx1 nmx)))
	(let ((nmx (maxamp ind2 0)))
	  (if (fneq (* 2 mx20) nmx) (snd-display ";2:0 sync scale-sound-to 1.0: ~A ~A?" mx20 nmx)))
	(let ((nmx (maxamp ind2 1)))
	  (if (fneq nmx 1.0) (snd-display ";2:1 sync scale-sound-to 1.0: ~A?" nmx)))

	(close-sound ind1)
	(close-sound ind2))

      (let* ((ind (open-sound "now.snd"))
	     (cur-amp (amp-control ind)))
	(if (not (= now-snd-index ind)) (snd-display ";memo-sound: ~A ~A ~A" memo-sound ind now-snd-index))
	(set! (amp-control ind) .5)
	(if (ffneq (amp-control ind) .5) (snd-display ";amp-control (.5): ~A?" (amp-control ind)))
	(set! (amp-control ind 0) .25)
	(if (ffneq (amp-control ind) .5) (snd-display ";amp-control after local set (.5): ~A?" (amp-control ind)))
	(if (ffneq (amp-control ind 0) .25) (snd-display ";amp-control 0 (.25): ~A?" (amp-control ind 0)))
	(set! (amp-control ind) 1.0)
	(if (ffneq (amp-control ind) 1.0) (snd-display ";amp-control (1.0): ~A?" (amp-control ind)))
	(if (ffneq (amp-control ind 0) .25) (snd-display ";amp-control 0 after set (.25): ~A?" (amp-control ind 0)))
	(set! (transform-graph-type ind 0) graph-as-sonogram)
	(if (not (= (transform-samples-size ind 0) 0)) 
	    (snd-display ";transform-samples-size: ~A" (transform-samples-size ind 0)))
	(if (transform-sample 0 0 ind 0) (snd-display ";transform-sample (empty): ~A" (transform-sample 0 0 ind 0)))
	(if (transform-samples->vct ind 0) (snd-display ";transform-samples->vct (empty): ~A" (transform-samples->vct ind 0)))
	(close-sound ind)
	(set! ind (open-sound "4.aiff"))
	(if (ffneq (amp-control ind) 1.0) (snd-display ";amp-control upon open (1.0): ~A?" (amp-control ind)))
	(if (ffneq (amp-control ind 2) 1.0) (snd-display ";amp-control 2 upon open (1.0): ~A?" (amp-control ind 2)))
	(set! (amp-control ind) .5)
	(if (ffneq (amp-control ind 2) .5) (snd-display ";amp-control 2 after global set (.5): ~A?" (amp-control ind 2)))
	(set! (amp-control ind 2) .25)
	(if (ffneq (amp-control ind 2) .25) (snd-display ";amp-control 2 (.25): ~A?" (amp-control ind 2)))
	(if (ffneq (amp-control ind 1) .5) (snd-display ";amp-control 1 after local set (.5): ~A?" (amp-control ind 1)))
	(let ((before-ran #f)
	      (after-ran #f))
	  (reset-hook! after-apply-hook)
	  (reset-hook! before-apply-hook)
	  (add-hook! after-apply-hook (lambda (snd) (set! after-ran snd)))
	  (add-hook! before-apply-hook (lambda (snd) (set! before-ran snd)))
	  (apply-controls ind)
	  (if (not (= ind before-ran)) (snd-display ";before-apply-hook: ~A?" before-ran))
	  (if (not (= ind after-ran)) (snd-display ";after-apply-hook: ~A?" after-ran))
	  (reset-hook! before-apply-hook)
	  (reset-hook! after-apply-hook))
	(revert-sound ind)
	(set! (sync ind) 1)
	(scale-to '#(.1 .2))
	(let ((mx (maxamp ind #t)))
	  (if (or (fneq (list-ref mx 0) .1)
		  (fneq (list-ref mx 1) .2)
		  (fneq (list-ref mx 2) .2)
		  (fneq (list-ref mx 3) .2))
	      (snd-display ";scale to with vector: ~A" mx)))
	(set! (filter-control-env ind) '(0 0 1 1))
	(if (not (feql '(0.0 0.0 1.0 1.0) (filter-control-env ind))) 
	    (snd-display ";set filter-control-env: ~A?" (filter-control-env ind)))
	(set! (filter-control-order ind) 20)
	(if (not (vequal (filter-control-coeffs ind)
			 (vct -0.007 0.010 -0.025 0.029 -0.050 0.055 -0.096 0.109 -0.268 0.241 
			      0.241 -0.268 0.109 -0.096 0.055 -0.050 0.029 -0.025 0.010 -0.007)))
	    (snd-display ";highpass coeffs: ~A" (filter-control-coeffs ind)))
	(set! (filter-control-env ind) (filter-control-env ind))
	(if (not (feql '(0.0 0.0 1.0 1.0) (filter-control-env ind))) 
	    (snd-display ";set filter-control-env to self: ~A?" (filter-control-env ind)))
	(set! (filter-control-env ind) '(0 1 1 0))
	(if (not (vequal (filter-control-coeffs ind)
			 (vct 0.003 0.002 0.004 0.002 0.007 0.003 0.014 0.012 0.059 0.394 
			      0.394 0.059 0.012 0.014 0.003 0.007 0.002 0.004 0.002 0.003)))
	    (snd-display ";lowpass coeffs: ~A" (filter-control-coeffs ind)))
	(close-sound ind))

      (let* ((obind (open-sound "4.aiff"))
	     (amps (maxamp obind #t)))
	(if (< (window-width) 600) 
	    (set! (window-width) 600))
	(if (< (window-height) 600)
	    (set! (window-height) 600))
	(set! (x-bounds obind 0) (list 0.0 0.1))
	(update-time-graph)
	(set! (amp-control obind) 0.1)
	(select-channel 2)
	(if (eq? (without-errors (apply-controls obind 1)) 'no-such-sound) (snd-display ";apply-controls can't find 4.aiff?"))
	(let ((newamps (maxamp obind #t)))
	  (if (or (fneq (car amps) (car newamps))
		  (fneq (cadr amps) (cadr newamps))
		  (> (abs (- (* 0.1 (caddr amps)) (caddr newamps))) .05)
		  (fneq (cadddr amps) (cadddr newamps)))
	      (snd-display ";apply amps:~%  ~A ->~%  ~A?" amps newamps))
	  (undo 1 obind 2)
	  (set! (amp-control obind) 0.1)
	  (make-region 0 (frames obind) obind 1)
	  (without-errors (apply-controls obind 2))
	  (set! newamps (maxamp obind #t))
	  (if (or (fneq (car amps) (car newamps))
		  (> (abs (- (* 0.1 (cadr amps)) (cadr newamps))) .05)
		  (fneq (caddr amps) (caddr newamps))
		  (fneq (cadddr amps) (cadddr newamps)))
	      (snd-display ";apply selection amp:~%  ~A ->~%  ~A?" amps newamps))
	  (if with-gui
	      (let* ((axinfo (axis-info obind 0 time-graph))
		     (losamp (car axinfo))
		     (hisamp (cadr axinfo))
		     (x0 (list-ref axinfo 2))
		     (y0 (list-ref axinfo 3))
		     (x1 (list-ref axinfo 4))
		     (y1 (list-ref axinfo 5))
		     (xpos (+ x0 (* .5 (- x1 x0))))
		     (ypos (+ y0 (* .75 (- y1 y0)))))
		(define (cp-x x) (inexact->exact (+ (list-ref axinfo 10) 
						    (* (- x x0) (/ (- (list-ref axinfo 12) (list-ref axinfo 10)) 
								   (- x1 x0))))))
		(define (cp-y y) (inexact->exact (+ (list-ref axinfo 13) 
						    (* (- y1 y) (/ (- (list-ref axinfo 11) (list-ref axinfo 13)) 
								   (- y1 y0))))))
		(set! (cursor obind) 100)
		(let ((xy (cursor-position obind)))
		  (if (fneq (position->x (car xy)) (/ (cursor obind) (srate obind)))
		      (snd-display ";cursor-position: ~A ~A ~A?" (car xy) (position->x (car xy)) (/ (cursor obind) (srate obind)))))
		(if (fneq (position->x (x->position xpos)) xpos)
		    (snd-display ";x<->position: ~A ~A?" (position->x (x->position xpos)) xpos))
		(if (> (abs (- (position->y (y->position ypos)) ypos)) .5)
		    (snd-display ";y<->position: ~A ~A?" (position->y (y->position ypos)) ypos))
		(if (not (= losamp (left-sample obind 0)))
		    (snd-display ";axis-info[0 losamp]: ~A ~A?" losamp (left-sample obind 0)))
		(if (not (= hisamp (right-sample obind 0)))
		    (snd-display ";axis-info[1 hisamp]: ~A ~A?" hisamp (right-sample obind 0)))
		(if (fneq (list-ref axinfo 6) 0.0)
		    (snd-display ";axis-info[6 xmin]: ~A?" (list-ref axinfo 6)))
		(if (fneq (list-ref axinfo 7) -1.0)
		    (snd-display ";axis-info[7 ymin]: ~A?" (list-ref axinfo 7)))
		(if (fneq (list-ref axinfo 9) 1.0)
		    (snd-display ";axis-info[9 ymax]: ~A?" (list-ref axinfo 9)))
		(if (> (abs (apply - (our-x->position obind x0))) 1) 
		    (snd-display ";x0->position: ~A?" (our-x->position obind x0)))
		(if (> (abs (apply - (our-x->position obind x1))) 1) 
		    (snd-display ";x1->position: ~A?" (our-x->position obind x1)))
		(if (> (abs (apply - (our-x->position obind (* 0.5 (+ x0 x1))))) 1)
		    (snd-display ";xmid->position: ~A?" (our-x->position obind (* 0.5 (+ x0 x1)))))
		(if (not full-test)
		    (begin
		      (if (> (abs (- (x->position xpos) (cp-x xpos))) 1)
			  (snd-display ";cp-x .5: ~A ~A?" (x->position xpos) (cp-x xpos)))
		      (if (> (abs (- (y->position ypos) (cp-y ypos))) 1)
			  (snd-display ";cp-y .75: ~A ~A?" (y->position ypos) (cp-y ypos)))
		      (do ((i 0 (1+ i)))
			  ((= i 10))
			(let ((xpos (+ x0 (my-random (- x1 x0))))
			      (ypos (+ y0 (my-random (- y1 y0)))))
			  (if (> (abs (- (x->position xpos) (cp-x xpos))) 1)
			      (snd-display ";cp-x[~A] ~A: ~A ~A?" i xpos (x->position xpos) (cp-x xpos)))
			  (if (> (abs (- (y->position ypos) (cp-y ypos))) 1)
			      (snd-display ";cp-y[~A] ~A: ~A ~A?" i ypos (y->position ypos) (cp-y ypos)))
			  (if (fneq (position->x (cp-x xpos)) xpos)
			      (snd-display ";x->position cp-x ~A ~A" xpos (position->x (cp-x xpos))))
			  (if (fffneq (position->y (cp-y ypos)) ypos)
			      (snd-display ";y->position cp-y ~A ~A" ypos (position->y (cp-y ypos))))))))
		(set! (left-sample obind 0) 1234)
		(if (not (= 1234 (car (axis-info obind 0))))
		    (snd-display ";axis-info[0 losamp at 1234]: ~A ~A?" (car (axis-info obind 0)) (left-sample obind 0)))
		(set! x0 (list-ref axinfo 2))
		(set! x1 (list-ref axinfo 4))
		(if (> (abs (apply - (our-x->position obind x0))) 1) 
		    (snd-display ";x0a->position: ~A?" (our-x->position obind x0)))
		(if (> (abs (apply - (our-x->position obind x1))) 1) 
		    (snd-display ";x1a->position: ~A?" (our-x->position obind x1)))
		(if (> (abs (apply - (our-x->position obind (* 0.5 (+ x0 x1))))) 1)
		    (snd-display ";xmida->position: ~A?" (our-x->position obind (* 0.5 (+ x0 x1)))))
		(set! (y-bounds obind 0) (list -2.0 3.0))
		(if (fneq (list-ref (axis-info obind 0) 7) -2.0)
		    (snd-display ";axis-info[7 ymin -2.0]: ~A?" (list-ref (axis-info obind 0) 7)))
		(if (fneq (list-ref (axis-info obind 0) 9) 3.0)
		    (snd-display ";axis-info[9 ymax 3.0]: ~A?" (list-ref (axis-info obind 0) 9)))
		
		))
	  (close-sound obind)))

      (let ((ind1 (open-sound "oboe.snd")))
	(test-orig (lambda (snd) (src-sound 2.0 ind1)) (lambda (snd) (src-sound 0.5 ind1)) 'src-sound ind1)
	(test-orig (lambda (snd) (src-channel 2.0)) (lambda (snd) (src-channel 0.5)) 'src-channel ind1)
	(test-orig (lambda (snd) (scale-by 2.0 ind1)) (lambda (snd) (scale-by 0.5 ind1)) 'scale-by ind1)
	(test-orig (lambda (snd) (scale-sound-by 2.0 ind1)) (lambda (snd) (scale-sound-by 0.5 ind1)) 'scale-sound-by ind1)
	(test-orig (lambda (snd) (scale-channel 2.0)) (lambda (snd) (scale-channel 0.5)) 'scale-channel ind1)
	(test-orig (lambda (snd) (reverse-sound ind1)) (lambda (snd) (reverse-sound ind1)) 'reverse-sound ind1)
	(test-orig (lambda (snd) (reverse-channel)) (lambda (snd) (reverse-channel)) 'reverse-channel ind1)
	(test-orig (lambda (snd) (env-sound '(0 1.0 1 2.0) ind1)) (lambda (snd) (env-sound '(0 1.0 1 0.5) ind1)) 'env-sound ind1)
	(test-orig (lambda (snd) (env-sound '(0 1.0 1 2.0 2 1.0) ind1)) (lambda (snd) (env-sound '(0 1.0 1 0.5 2 1.0) ind1)) 'env-sound ind1)
	(test-orig (lambda (snd) (env-channel (make-env :envelope '(0 1.0 1 2.0) :end (frames))))
		   (lambda (snd) (env-channel (make-env :envelope '(0 1.0 1 0.5) :end (frames)))) 'env-channel ind1)
	(test-orig (lambda (snd) (env-channel '(0 1.0 1 2.0)))
		   (lambda (snd) (env-channel '(0 1.0 1 0.5))) 'env-channel ind1)
	(test-orig (lambda (snd) (env-channel (make-env :envelope '(0 2 1 2 2 0.5 3 0.5) :base 0 :end (frames))))
		   (lambda (snd) (env-channel (make-env :envelope '(0 0.5 1 0.5 2 2 3 2) :base 0 :end (frames)))) 'env-channel ind1)
	(test-orig (lambda (snd) (map-channel (lambda (n) (* n 2)))) (lambda (snd) (map-channel (lambda (n) (* n 0.5)))) 'map-channel ind1)
	(test-orig (lambda (snd) (map-channel (lambda (n) (* n 2)) 1234)) (lambda (snd) (map-channel (lambda (n) (* n 0.5)) 1234)) 'map-channel ind1)
	(test-orig (lambda (snd) (map-channel (lambda (n) (* n 2)) 12005 10)) (lambda (snd) (map-channel (lambda (n) (* n 0.5)) 12005 10)) 'map-channel ind1)
	(test-orig (lambda (snd) (map-channel (let ((vect (make-vector 1 0.0))) (lambda (y) (vector-set! vect 0 (* y 2)) vect))))
		   (lambda (snd) (map-channel (lambda (y) (list (* y 0.5))))) 'map-channel ind1)
	(test-orig (lambda (snd) (map-channel 
				  (let ((vect (make-vector 2 0.0))) 
				    (lambda (y) 
				      (vector-set! vect 0 (* y 2))
				      (vector-set! vect 1 (* y 2))
				      vect))))
		   (lambda (snd) (map-channel
				  (let ((outp #f))
				    (lambda (y) 
				      (if outp
					  (set! outp #f)
					  (set! outp (* y 0.5)))
				      outp))))
		   'map-channel ind1)
	(test-orig (lambda (snd) (map-chan (lambda (n) (* n 2)))) (lambda (snd) (map-chan (lambda (n) (* n 0.5)))) 'map-chan ind1)
	(test-orig (lambda (snd) (pad-channel 1000 2000 ind1)) (lambda (snd) (delete-samples 1000 2000 ind1)) 'pad-channel ind1)
	(test-orig (lambda (snd) (clm-channel (make-one-zero :a0 2.0 :a1 0.0)))
		   (lambda (snd) (clm-channel (make-one-zero :a0 0.5 :a1 0.0))) 'clm-channel ind1)
	(test-orig (lambda (snd) (filter-sound (make-one-zero :a0 2.0 :a1 0.0) 0 ind1 0)) 
		   (lambda (snd) (filter-sound (make-one-zero :a0 0.5 :a1 0.0)) 0 ind1 0) 'filter-sound ind1)

	(let ((var (catch #t (lambda () (src-sound '(0 0 1 1))) (lambda args args))))
	  (if (not (eq? (car var) 'out-of-range))
	      (snd-display ";src-sound env at 0: ~A" var)))
	(let ((var (catch #t (lambda () (src-sound '(0 1 1 -1))) (lambda args args))))
	  (if (not (eq? (car var) 'out-of-range))
	      (snd-display ";src-sound env through 0: ~A" var)))

	(scale-to 1.0 ind1)
	(let ((v0 (make-vct 10))
	      (v1 (samples->vct 12000 10 ind1 0)))
	  (vct-set! v0 0 1.0)
	  (array->file "fmv3.snd" v0 10 22050 1)
	  (copy-file "oboe.snd" "fmv4.snd")
	  (convolve-with "fmv3.snd" 1.0 ind1)
	  (convolve-files "fmv4.snd" "fmv3.snd" 1.0 "fmv5.snd")
	  (let ((v2 (samples->vct 12000 10 ind1 0)))
	    (if (not (vfequal v1 v2))
		(snd-display ";~A (orig: 0) ~A ~A" 'convolve-with v1 v2))
	    (file->array "fmv5.snd" 0 12000 10 v2)
	    (if (not (vfequal v1 v2))
		(snd-display ";convolve-files: (orig: 0) ~A ~A" v1 v2)))
	  (delete-file "fmv3.snd")
	  (delete-file "fmv5.snd"))
	(convolve-files "2.snd" "oboe.snd" 0.5 "fmv5.snd")
	(if (fneq (cadr (mus-sound-maxamp "fmv5.snd")) 0.5) (snd-display ";convolve-files stereo: ~A" (mus-sound-maxamp "fmv5.snd")))
	(delete-file "fmv5.snd")
	(scale-to .25 ind1)
	(set! (y-bounds ind1) '())
	(if (not (equal? (y-bounds ind1) (list -.25 .25)))
	    (snd-display ";y-bounds '(): ~A?" (y-bounds ind1)))
	(revert-sound ind1)

	(scale-to 1.0 ind1)
	(let ((v0 (make-vct 10))
	      (v1 (samples->vct 12000 10 ind1 0)))
	  (vct-set! v0 5 1.0)
	  (array->file "fmv3.snd" v0 10 22050 1)
	  (convolve-with "fmv3.snd" 1.0 ind1)
	  (convolve-files "fmv4.snd" "fmv3.snd" 1.0 "fmv5.snd")
	  (let ((v2 (samples->vct 12005 10 ind1 0)))
	    (if (not (vfequal v1 v2))
		(snd-display ";~A (orig: 2) ~A ~A" 'convolve-with v1 v2))
	    (file->array "fmv5.snd" 0 12005 10 v2)
	    (if (not (vfequal v1 v2))
		(snd-display ";convolve-files: (orig: 2) ~A ~A" v1 v2)))
	  (delete-file "fmv3.snd")
	  (delete-file "fmv4.snd")
	  (delete-file "fmv5.snd"))

	(revert-sound ind1)
	(let ((old-val (selection-creates-region))
	      (old-regions (regions)))
	  (set! (selection-creates-region) #f)
	  (select-all ind1)
	  (set! (selection-creates-region) old-val)
	  (if (not (equal? old-regions (regions)))
	      (snd-display ";selection-create-region: ~A -> ~A?" old-regions (regions))))
	(convolve-selection-with "pistol.snd" (maxamp))
	(let ((data (samples->vct 12000 10 ind1 0)))
	  (convolve-with "pistol.snd" (maxamp ind1 0 0) ind1 0 0)
	  (let ((new-data (samples->vct 12000 10 ind1 0)))
	    (if (not (vfequal data new-data))
		(snd-display ";convolve-selection-with: ~A ~A?" data new-data))))
	(revert-sound ind1)
	(make-selection 1000 2000 ind1)
	(let ((ma (maxamp ind1)))
	  (convolve-selection-with "pistol.snd" ma)
	  (if (fneq (maxamp ind1) ma) (snd-display ";convolve-selection-with 1000: ~A ~A?" ma (maxamp ind1))))
	(make-selection 1000 2000 ind1)
	(let ((id (make-region)))
	  (if (not (region? id))
	      (snd-display ";make-region argless: ~A" id))
	  (if (not (= (region-frames id) (selection-frames)))
	      (snd-display ";region/selection-framess: ~A ~A?" (region-frames id) (selection-frames)))
	  (if (fneq (region-sample 0 id) (sample 1000 ind1))
	      (snd-display ";region-sample from make-region: ~A ~A?" (region-sample 0 id) (sample 1000 ind1))))
	(close-sound ind1))
      (let* ((ind (open-sound "2.snd"))
	     (reg (make-region 0 100 ind #t)))
	(if (not (= (region-chans reg) 2))
	    (snd-display ";make-region chan #t: ~A" (region-chans reg)))
	(close-sound ind))

      (let ((ind1 (open-sound "2.snd")))
	(let ((v0 (samples->vct 12000 10 ind1 0))
	      (v1 (samples->vct 12000 10 ind1 1)))
	  (swap-channels ind1)
	  (let ((v2 (samples->vct 12000 10 ind1 0))
		(v3 (samples->vct 12000 10 ind1 1)))
	    (if (or (vequal v0 v2)
		    (vequal v1 v3))
		(snd-display ";swap-channels 0: no change! ~A ~A ~A ~A" v0 v2 v1 v3)))
	  (swap-channels ind1)
	  (let ((v2 (samples->vct 12000 10 ind1 0))
		(v3 (samples->vct 12000 10 ind1 1)))
	    (if (or (not (vequal v0 v2))
		    (not (vequal v1 v3)))
		(snd-display ";swap-channels 1: ~A ~A ~A ~A" v0 v2 v1 v3)))
	  ;; as long as we're here...
	  (set! (cursor ind1 0) 100)
	  (set! (cursor ind1 1) 200)
	  (if (or (not (= (cursor ind1 0) 100)) 
		  (not (= (cursor ind1 1) 200)))
	      (snd-display ";cursor: ~A ~A?" (cursor ind1 0) (cursor ind1 1)))
	  (forward-sample 10 ind1 0)
	  (forward-sample -10 ind1 1)
	  (if (or (not (= (cursor ind1 0) 110)) 
		  (not (= (cursor ind1 1) 190)))
	      (snd-display ";cursor (1): ~A ~A?" (cursor ind1 0) (cursor ind1 1)))
	  (backward-sample -10 ind1 0)
	  (backward-sample 10 ind1 1)
	  (if (or (not (= (cursor ind1 0) 120)) 
		  (not (= (cursor ind1 1) 180)))
	      (snd-display ";cursor (2): ~A ~A?" (cursor ind1 0) (cursor ind1 1)))
	  (set! (sync ind1) 1)
	  (scale-by (list .5 .25) ind1)
	  (scale-by '#(2.0 4.0) ind1)
	  (scale-by #f ind1)
	  (revert-sound ind1)
	  (let ((amps (maxamp ind1 #t)))
	    (swap-channels ind1 0 ind1)
	    (let ((newamps (maxamp ind1 #t)))
	      (if (or (fneq (car amps) (cadr newamps))
		      (fneq (cadr amps) (car newamps)))
		  (snd-display ";swap-channels with cp def: ~A ~A" amps newamps)))
	    (swap-channels ind1 1)
	    (let ((newamps (maxamp ind1 #t)))
	      (if (or (fneq (car amps) (car newamps))
		      (fneq (cadr amps) (cadr newamps)))
		  (snd-display ";swap-channels with cp def 0: ~A ~A" amps newamps))))
	  (close-sound ind1)))

      (let ((ind1 (open-sound "oboe.snd"))
	    (ind2 (open-sound "2.snd")))
	(let ((ups1 (count-matches (lambda (n) (> n .1)) 0 ind1 0))
	      (ups2 (let ((count 0))
		      (scan-chan (lambda (n)
				   (if (> n .1)
				       (set! count (+ count 1)))
				   #f)
				 0 (frames ind1) ind1 0)
		      count)))
	  (if (not (= ups1 ups2))
	      (snd-display ";scan-chan: ~A ~A?" ups1 ups2))
	  (set! ups1 (count-matches (lambda (n) (> n .03)) 0 ind2 0))
	  (set! ups2 (count-matches (lambda (n) (> n .03)) 0 ind2 1))
	  (let ((ups3 (let ((count 0))
			(scan-chan (lambda (n)
				     (if (> n .03)
					 (set! count (+ count 1)))
				     #f)
				   0 (frames ind2) ind2 0)
			count))
		(ups4 (let ((count 0))
			(scan-chan (lambda (n)
				     (if (> n .03)
					 (set! count (+ count 1)))
				     #f)
				   0 (frames ind2) ind2 1)
			count)))
	    (if (not (= ups1 ups3))
		(snd-display ";2[0] scan-chan: ~A ~A?" ups1 ups3))
	    (if (not (= ups2 ups4))
		(snd-display ";2[1] scan-chan: ~A ~A?" ups2 ups4)))

	  (set! (sync ind2) #t)
	  (let ((total
		 (let ((count 0)) 
		   (scan-chans (lambda (n) 
				 (if (> n .03) 
				     (set! count (+ count 1))) 
				 #f))
		   count)))
	    (if (not (= total (+ ups1 ups2)))
		(snd-display ";scan-chans: ~A ~A?" total (+ ups1 ups2))))
	  (set! (sync ind2) #f)
	  (let ((total
		 (let ((count 0)) 
		   (scan-sound-chans (lambda (n) 
				       (if (> n .03) 
					   (set! count (+ count 1))) 
				       #f)
				     0 (frames ind2) ind2)
		   count)))
	    (if (not (= total (+ ups1 ups2)))
		(snd-display ";scan-sound-chans: ~A ~A?" total (+ ups1 ups2))))
	  (set! (sync ind2) #f)
	  (let ((total
		 (let ((count 0)) 
		   (scan-across-all-chans (lambda (nd len) 
					    (do ((i 0 (1+ i)))
						((= i len) #f) 
					      (if (> (vector-ref nd i) .03) 
						  (set! count (+ count 1))))))
		   count))
		(ups3 (count-matches (lambda (n) (> n .03)) 0 ind1 0)))
	    (if (not (= total (+ ups1 ups2 ups3)))
		(snd-display ";scan-across-all-chans: ~A ~A?" total (+ ups1 ups2 ups3))))
	  (let ((total
		 (let ((count 0)) 
		   (scan-all-chans (lambda (n) 
				     (if (> n .03)
					 (set! count (+ count 1)))
				     #f))
		   count))
		(ups3 (count-matches (lambda (n) (> n .03)) 0 ind1 0)))
	    (if (not (= total (+ ups1 ups2 ups3)))
		(snd-display ";scan-all-chans: ~A ~A?" total (+ ups1 ups2 ups3)))))

	(select-sound ind1)
	(forward-graph)
	(if (or (not (= (selected-sound) ind2))
		(not (= (selected-channel) 0)))
	    (snd-display ";forward from ~A 0 to ~A ~A?" ind1 (selected-sound) (selected-channel)))
	(forward-graph)
	(if (or (not (= (selected-sound) ind2))
		(not (= (selected-channel) 1)))
	    (snd-display ";forward from ~A 0 to ~A ~A?" ind2 (selected-sound) (selected-channel)))
	(forward-graph 1)
	(if (or (not (= (selected-sound) ind1))
		(not (= (selected-channel) 0)))
	    (snd-display ";forward from ~A 1 to ~A ~A?" ind2 (selected-sound) (selected-channel)))
	(forward-graph 2)
	(if (or (not (= (selected-sound) ind2))
		(not (= (selected-channel) 1)))
	    (snd-display ";forward from ~A 0 to ~A ~A?" ind1 (selected-sound) (selected-channel)))
	(forward-graph 0)
	(if (or (not (= (selected-sound) ind2))
		(not (= (selected-channel) 1)))
	    (snd-display ";forward 0 from ~A 1 to ~A ~A?" ind2 (selected-sound) (selected-channel)))
	(backward-graph 2)
	(if (or (not (= (selected-sound) ind1))
		(not (= (selected-channel) 0)))
	    (snd-display ";backward 2 from ~A 1 to ~A ~A?" ind2 (selected-sound) (selected-channel)))
	(backward-graph)
	(if (or (not (= (selected-sound) ind2))
		(not (= (selected-channel) 1)))
	    (snd-display ";backward 2 from ~A 0 to ~A ~A?" ind1 (selected-sound) (selected-channel)))
	(forward-graph -1)
	(if (or (not (= (selected-sound) ind2))
		(not (= (selected-channel) 0)))
	    (snd-display ";forward -1 from ~A 1 to ~A ~A?" ind1 (selected-sound) (selected-channel)))
	(backward-graph -1)
	(if (or (not (= (selected-sound) ind2))
		(not (= (selected-channel) 1)))
	    (snd-display ";backward -1 from ~A 0 to ~A ~A?" ind1 (selected-sound) (selected-channel)))

	(close-sound ind1)
	(close-sound ind2))

      (let ((ind1 (open-sound "oboe.snd"))
	    (ind2 (open-sound "2.snd")))
	(let ((ups1 (maxamp ind1 0))
	      (ups2 (maxamp ind2 #t)))
	  (map-chan (lambda (n)
		      (* n 2.0))
		    0 (frames ind1) "times 2" ind1 0)
	  (map-sound-chans (lambda (n)
			     (* n 2.0))
			   0 (frames ind2) "times 2" ind2)
	  (let ((ups3 (maxamp ind1 0))
		(ups4 (maxamp ind2 #t)))
	    (if (fneq ups3 (* ups1 2.0))
		(snd-display ";map-chan: ~A ~A?" ups3 (* ups1 2.0)))
	    (if (or (fneq (car ups4) (* (car ups2) 2.0))
		    (fneq (cadr ups4) (* (cadr ups2) 2.0)))
		(snd-display ";map-sound-chans: ~A ~A?" (map (lambda (n) (* 2 n)) ups2) ups4)))
	  
	  (set! (sync ind2) #t)
	  (set! (sync ind1) #t)
	  (map-chans (lambda (n) (* n 0.5)))
	  (let ((ups3 (maxamp ind1 0))
		(ups4 (maxamp ind2 #t)))
	    (if (fneq ups3 ups1)
		(snd-display ";map-chans: ~A ~A?" ups3 ups1))
	    (if (or (fneq (car ups4) (car ups2))
		    (fneq (cadr ups4) (cadr ups2)))
		(snd-display ";map-chans: ~A ~A?" ups2 ups4)))
	  (set! (sync ind1) #f)

	  (let ((len-err #f))
	    (map-across-all-chans (lambda (data len)
				    (if (not (= len 3))
					(set! len-err len)
					(begin
					  (vector-set! data 0 (* (vector-ref data 0) 4.0))
					  (let ((chan0-sample (vector-ref data 1)))
					    (vector-set! data 1 (vector-ref data 2))
					    (vector-set! data 2 chan0-sample))))
				    data))

	    (if (number? len-err)
		(snd-display ";map-across-all-chans len: ~A?" len-err))
	    (let ((ups3 (maxamp ind1 0))
		  (ups4 (maxamp ind2 #t)))
	      (if (fneq ups3 (* 4 ups1))
		  (snd-display ";map-across-all-chans 1: ~A ~A?" ups3 ups1))
	      (if (or (fneq (car ups4) (cadr ups2))
		      (fneq (car ups4) (cadr ups2)))
		  (snd-display ";map-across-all-chans 2: ~A ~A?" ups2 ups4))))
	  (revert-sound ind1)
	  (revert-sound ind2)
	  (map-all-chans (lambda (n) (* n 4.0)))

	  (let ((ups3 (maxamp ind1 0))
		(ups4 (maxamp ind2 0))
		(ups5 (maxamp ind1 0 0))
		(ups6 (maxamp ind2 0 0)))
	    (if (fneq ups3 (* 4 ups5))
		(snd-display ";map-all-chans: ~A ~A?" ups3 ups5))
	    (if (fneq ups4 (* 4 ups6))
		(snd-display ";map-all-chans(2): ~A ~A?" ups4 ups6)))
  
	  (close-sound ind1)
	  (close-sound ind2)))

      (let* ((ind1 (open-sound "oboe.snd"))
	     (len (frames ind1))
	     (ctr 0))
	(map-chan (lambda (n)
		    (if (= ctr 1) (set! ctr 0) (set! ctr 1))
		    (if (= ctr 0)
			(* n 2.0)
			#f))
		  0 (frames ind1) "cut 2" ind1 0)
	(if (> (frames ind1) (+ (* len 2) 1))
	    (snd-display ";map-chan cut: ~A ~A?" len (frames ind1)))
	(revert-sound ind1)
	(set! ctr 0)
	(map-chan (lambda (n)
		    (set! ctr (1+ ctr))
		    (if (> ctr 3)
			#t
			n))
		  0 (frames ind1) "cut none" ind1 0)
	(if (> ctr 4)
	    (snd-display ";map-chan no-edit count: ~A?" ctr))
	(revert-sound ind1)
	(let ((v1 (make-vct 2)))
	  (map-chan (lambda (n)
		      (vct-set! v1 0 n)
		      (vct-set! v1 1 (* n 3))
		      v1)
		    0 (frames ind1) "cut 2" ind1 0))
	(if (> (abs (- (frames ind1) (* len 2))) 3)
	    (snd-display ";map-chan double: ~A ~A?" len (frames ind1)))
	(close-sound ind1))
      (let* ((ind1 (open-sound "oboe.snd")))
	(test-edpos maxamp 'maxamp (lambda () (scale-by 2.0 ind1 0)) ind1)
	(test-edpos frames 'frames (lambda () (src-sound 2.0 ind1 0)) ind1)
	(test-edpos 
	 (lambda* (#:optional (snd 0) (chn 0) (edpos current-edit-position)) (count-matches (lambda (n1) (> n1 .1)) 0 snd chn edpos)) 
	 'count-matches
	 (lambda () (scale-by 2.0 ind1 0)) 
	 ind1)
	(test-edpos 
	 (lambda* (#:optional (snd 0) (chn 0) (edpos current-edit-position)) (cadr (find (lambda (n2) (> n2 .1)) 0 snd chn edpos)))
	 'find
	 (lambda () (delete-samples 0 100 ind1 0))
	 ind1)
	(test-edpos 
	 (lambda* (#:optional (snd 0) (chn 0) (edpos current-edit-position)) 
		  (let ((samp 0)) 
		    (scan-chan (lambda (n3) 
				 (if (> n3 .1) 
				     samp 
				     (begin 
				       (set! samp (1+ samp)) 
				       #f)))
			       0 (frames snd chn) snd chn edpos)
		    samp))
	 'scan-chan
	 (lambda () (delete-samples 0 100 ind1 0))
	 ind1)

	(src-sound 2.0 ind1 0)
	(play-and-wait 0 ind1 0 #f #f 0)
	(play-and-wait 0 ind1 0 #f #f 1)
	(play-and-wait 0 ind1 0 #f #f (lambda (snd chn) (edit-position snd chn)))
	(undo 1 ind1 0)
	(play-and-wait 0 ind1 0 #f #f 1)

	(delete-samples 0 10000 ind1 0)
	(save-sound-as "fmv.snd" ind1 #f #f #f #f 0)
	(save-sound-as "fmv1.snd" ind1 #f #f #f #f (lambda (snd chn) 1))
	(let ((var (catch #t (lambda () (save-sound-as "fmv2.snd" ind1 #f #f #f 1234)) (lambda args args))))
	  (if (not (eq? (car var) 'no-such-channel))
	      (snd-display ";save-sound-as bad chan: ~A" var)))
	(if (not (= (mus-sound-frames "fmv.snd") (frames ind1 0 0)))
	    (snd-display ";save-sound-as (edpos): ~A ~A?" (mus-sound-frames "fmv.snd") (frames ind1 0 0)))
	(if (not (= (mus-sound-frames "fmv1.snd") (frames ind1 0 1)))
	    (snd-display ";save-sound-as (edpos 1): ~A ~A?" (mus-sound-frames "fmv.snd") (frames ind1 0 1)))
	(if (= (mus-sound-frames "fmv.snd") (frames ind1 0 1))
	    (snd-display ";save-sound-as (edpos 1)(2): ~A ~A?" (mus-sound-frames "fmv.snd") (frames ind1 0 1)))
	(let ((ind2 (open-sound "fmv.snd"))
	      (ind3 (open-sound "fmv1.snd")))
	  (if (not (vequal (samples->vct 12000 10 ind1 0 #f 0) (samples->vct 12000 10 ind2 0)))
	      (snd-display ";save-sound-as (edpos 3): ~A ~A?" (samples->vct 12000 10 ind1 0 #f 0) (samples->vct 12000 10 ind2 0)))
	  (if (not (vequal (samples->vct 12000 10 ind1 0 #f 1) (samples->vct 12000 10 ind3 0)))
	      (snd-display ";save-sound-as (edpos 4): ~A ~A?" (samples->vct 12000 10 ind1 0 #f 1) (samples->vct 12000 10 ind3 0)))
	  (if (vequal (samples->vct 12000 10 ind2 0) (samples->vct 12000 10 ind3 0))
	      (snd-display ";save-sound-as (edpos 5): ~A ~A?" (samples->vct 12000 10 ind2 0) (samples->vct 12000 10 ind3 0)))
	  (select-sound ind3)
	  (set! (comment) "hiho")
	  (if (not (string=? (comment) "hiho")) (snd-display ";set! comment no index: ~A" (comment)))
	  (close-sound ind2)
	  (close-sound ind3))
	(delete-file "fmv.snd")
	(delete-file "fmv1.snd")

	(test-edpos-1 (lambda (snd pos) (reverse-sound snd 0 pos)) 'reverse-sound ind1)
	(test-edpos-1 (lambda (snd pos) (env-sound '(0 0 1 1 2 0) 0 20000 1.0 snd 0 pos)) 'env-sound ind1)
	(test-edpos-1 (lambda (snd pos) (src-sound 0.5 1.0 snd 0 pos)) 'src-sound ind1)
	(test-edpos-1 (lambda (snd pos) (filter-sound (make-fir-filter 6 (list->vct '(.1 .2 .3 .3 .2 .1))) 6 snd 0 pos)) 'filter-sound ind1)
	(test-edpos-1 (lambda (snd pos) (convolve-with "pistol.snd" .5 snd 0 pos)) 'convolve-with ind1)

	(let ((ind (new-sound "fmv.snd"))
	      (v (make-vct 2000))
	      (ctr 0))
	  (vct-map! v (lambda ()
			(let ((val (sin (* ctr 2.0 (/ 3.14159 10.0)))))
			  (set! ctr (1+ ctr))
			  val)))
	  (vct->channel v 0 2000 ind 0)
	  (filter-sound '(0 0 .09 0 .1 1 .11 0 1 0) 1024)
	  (if (> (maxamp) .025) (snd-display ";filter-sound maxamp 1: ~A" (maxamp)))
	  (undo)
	  (filter-sound '(0 0 .19 0 .2 1 .21 0 1 0) 1024)  
	  (if (< (maxamp) .9) (snd-display ";filter-sound maxamp 2: ~A" (maxamp)))
	  (undo)
	  (filter-sound '(0 0 .29 0 .3 1 .31 0 1 0) 1024)  
	  (if (> (maxamp) .02) (snd-display ";filter-sound maxamp 3: ~A" (maxamp)))
	  (close-sound ind))

	(if (and (provided? 'xm) (provided? 'snd-debug))
	    (XtCallCallbacks (menu-option "Files") XmNactivateCallback (snd-global-state))
	    (file-dialog))
	(set! (previous-files-sort-procedure)
	      (lambda (lst)
		(sort lst 
		      (lambda (a b)
			(> (mus-sound-duration a) (mus-sound-duration b))))))
	(if (not (procedure? (previous-files-sort-procedure)))
	    (snd-display ";previous-files-sort-procedure: ~A" (previous-files-sort-procedure)))
	(set! (previous-files-sort) 5)
	(close-sound ind1)
	(let ((val (catch #t
			  (lambda ()
			    (set! (previous-files-sort-procedure) (lambda (a b c) #f)))
			  (lambda args (car args)))))
	  (if (not (eq? val 'bad-arity))
	      (snd-display ";previous-files-sort-procedure arity error: ~A" val)))
	(do ((i 0 (1+ i)))
	    ((= i 5))
	  (set! (previous-files-sort) i))
	(set! (previous-files-sort) 1)
	(dismiss-all-dialogs)
	)

      (with-output-to-file "sndtst" 
	(lambda ()
	  (display (string-append "#!" home-dir "/cl/snd -b
!#
 (use-modules (ice-9 format))
 (if (= (length (script-args)) 2) ;i.e. (\"-l\" \"script\")
   (display \"usage: script file-name...\n\")
   (do ((arg (+ (script-arg) 1) (1+ arg)))
       ((= arg (length (script-args))))
     (let ((name (list-ref (script-args) arg)))
       (display (format #f \"~A: ~A~%\" name (mus-sound-comment name))))))
 (exit)
"))))

      (system "chmod 777 sndtst")
      (let ((val (shell "sndtst fyow.snd")))
        (if (not (string=? val "fyow.snd: ;Written on Tue 11-May-93 at 15:55 PDT by me at localhost (NeXT) using Allegro CL and clm of 11-May-93
"))
            (snd-display ";script: ~A?" val)
            (delete-file "sndtst")))

      (with-output-to-file "sndtst" 
	(lambda ()
	  (display (string-append "#!" home-dir "/cl/snd -b
!#
 (open-sound \"fmv.snd\")
 (scale-by 2.0)
 (save-sound)
 (exit)
"))))
      (system "chmod 777 sndtst")
      (system "cp oboe.snd fmv.snd")
      (sleep 1) ; force dates to be different
      (let* ((ind (open-sound "fmv.snd"))
             (samps (samples->vct 5000 10))
             (date (mus-sound-write-date "fmv.snd"))
             (s-in #f)
             (s-out #f))
        (reset-hook! update-hook)
        (add-hook! update-hook (lambda (snd)
				 (set! s-in snd)
				 (lambda (newsnd)
				   (set! s-out newsnd))))
        (scale-by 3.0)
	(catch #t
	       (lambda ()
		 (add-mark 101 ind)
		 (add-mark 202 ind))
	       (lambda args (snd-display ";got error from add-mark: ~A" args)))
        (system "sndtst") 
        (if (= (mus-sound-write-date "fmv.snd") date)
            (snd-display ";script didn't overwrite fmv.snd?"))
        (set! (sync ind) 123)
        (let ((nind (update-sound ind)))
	  (if (not (equal? (edits nind) (list 0 0)))
	      (snd-display ";update-sound edits: ~A?" (edits nind)))
	  (if (not (equal? (map mark-sample (marks nind 0)) (list 101 202)))
	      (snd-display ";update-sound marks: ~A" (map mark-sample (marks nind 0))))
	  (if (not (= (sync nind) 123)) (snd-display ";update-sound sync: ~A" (sync nind)))
	  (let ((nsamps (samples->vct 5000 10)))
	    (if (not (vequal samps (vct-scale! nsamps 0.5)))
		(snd-display ";udpate-sound amps: ~A ~A?" samps nsamps)))
	  (if (or (not (number? s-in)) (not (= ind s-in))) (snd-display ";update-hook init: ~A ~A" ind s-in))
	  (if (or (not (number? s-out)) (not (= nind s-in))) (snd-display ";update-hook done: ~A ~A" nind s-out)))
	(reset-hook! update-hook)
        (close-sound ind)
        (delete-file "fmv.snd")
        (delete-file "sndtst"))

      (let* ((ind (open-sound "oboe.snd"))
	     (mx (maxamp ind 0))
	     (e0 (channel-amp-envs ind 0)))
	
	(define (peak-env-equal? name index e diff)
	  (let* ((reader (make-sample-reader 0 index 0))
		 (e-size (vct-length (car e)))
		 (samps-per-bin (inexact->exact (ceiling (/ (frames index) e-size))))
		 (mins (car e))
		 (maxs (cadr e))
		 (max-diff 0.0))
	    (call-with-current-continuation
	     (lambda (return)
	       (do ((e-bin 0)
		    (samp 0 (1+ samp))
		    (mx -10.0)
		    (mn 10.0))
		   ((= e-bin e-size) #t)
		 (if (>= samp (inexact->exact samps-per-bin))
		     (let ((mxdiff (abs (- mx (vct-ref maxs e-bin))))
			   (mndiff (abs (- mn (vct-ref mins e-bin)))))
		       (if (> mxdiff max-diff)
			   (set! max-diff mxdiff))
		       (if (> mndiff max-diff)
			   (set! max-diff mndiff))
		       (if (or (> mxdiff diff)
			       (> mndiff diff))
			   (begin
			     (snd-display ";~A: peak-env-equal? [bin ~D of ~D]: (~,4F to ~,4F), diff: ~,5F" 
					  name
					  e-bin e-size
					  mn mx
					  (max mxdiff mndiff))
			     (return #f)))
		       (set! samp 0)
		       (set! mx -10.0)
		       (set! mn 10.0)
		       (set! e-bin (+ e-bin 1))))
		 (let ((val (next-sample reader)))
		   (if (< val mn)
		       (set! mn val))
		   (if (> val mx)
		       (set! mx val))))))
;	    (snd-display ";~A max-diff: ~A" name max-diff)
	    ))
	
	(if (null? e0)
	    (snd-display ";no amp env data")
	    (let ((mx1 (vct-peak (car e0)))
		  (mx2 (vct-peak (cadr e0))))
	      (if (fneq mx (max mx1 mx2))
		  (snd-display ";amp env max: ~A ~A ~A" mx mx1 mx2))
	      (peak-env-equal? "straight peak" ind e0 .0001)
	      (scale-by 3.0)
	      (let* ((e1 (channel-amp-envs ind 0 1))
		     (mx3 (vct-peak (car e1)))
		     (mx4 (vct-peak (cadr e1))))
		(if (or (fneq (* 3.0 mx1) mx3)
			(fneq (* 3.0 mx2) mx4))
		    (snd-display ";3.0 amp env max: ~A ~A ~A ~A" mx1 mx2 mx3 mx4))
		(peak-env-equal? "scaled peak" ind e1 .0001))
	      (if (fneq (maxamp ind 0) (* 3 mx)) 
		  (snd-display ";maxamp after scale: ~A ~A" mx (maxamp ind 0)))
	      (undo)
	      (set! (selection-member? #t) #f)
	      (set! (selection-member? ind 0) #t)
	      (set! (selection-position ind 0) 20000)
	      (set! (selection-frames ind 0) 12000)
	      (scale-selection-by 3.0)
	      (let* ((e1 (channel-amp-envs ind 0 1))
		     (mx3 (vct-peak (car e1)))
		     (mx4 (vct-peak (cadr e1))))
		(if (or (fneq (* 3.0 mx1) mx3)
			(fneq (* 3.0 mx2) mx4))
		    (snd-display ";selection 3.0 amp env max: ~A ~A ~A ~A" mx1 mx2 mx3 mx4))
		(if (fneq (maxamp ind 0) (* 3 mx)) 
		    (snd-display ";maxamp after selection scale: ~A ~A" mx (maxamp ind 0)))
		(peak-env-equal? "selection peak" ind e1 .0001))
	      (map-chan abs ind 0)
	      (let* ((e1 (channel-amp-envs ind 0 2))
		     (mx3 (vct-peak (car e1)))
		     (mx4 (vct-peak (cadr e1))))
		(if (fneq (* 3.0 mx2) mx4)
		    (snd-display ";abs selection 3.0 amp env max: ~A ~A ~A ~A" mx1 mx2 mx3 mx4))
		(if (fneq (maxamp ind 0) (* 3 mx)) 
		    (snd-display ";maxamp after abs selection scale: ~A ~A" mx (maxamp ind 0)))
		(if (ffneq mx3 0.03)
		    (snd-display ";abs max: ~A ~A" mx3 mx4))
		(peak-env-equal? "map-chan peak" ind e1 .0001))
	      (delete-samples 10000 5000)
	      (let* ((e1 (channel-amp-envs ind 0))
		     (mx3 (vct-peak (car e1)))
		     (mx4 (vct-peak (cadr e1))))
		(if (fneq (* 3.0 mx2) mx4)
		    (snd-display ";abs selection 3.0 amp env max: ~A ~A ~A ~A" mx1 mx2 mx3 mx4))
		(if (fneq (maxamp ind 0) (* 3 mx)) 
		    (snd-display ";maxamp after abs selection scale: ~A ~A" mx (maxamp ind 0)))
		(if (ffneq mx3 0.03)
		    (snd-display ";abs max: ~A ~A" mx3 mx4))
		(peak-env-equal? "delete peak" ind e1 .0001))
	      (scale-selection-by -.333)
	      (let* ((e1 (channel-amp-envs ind 0 4))
		     (mx3 (vct-peak (car e1)))
		     (mx4 (vct-peak (cadr e1))))
		(if (fneq (maxamp ind 0) mx)
		    (snd-display ";maxamp after minus abs selection scale: ~A ~A" mx (maxamp ind 0)))
		(if (fneq (maxamp ind 0) mx3)
		    (snd-display ";mx3 maxamp after minus abs selection scale: ~A ~A" mx mx3))
		(peak-env-equal? "scale-selection peak" ind e1 .0001))

	      (revert-sound ind)
	      (ramp-channel 0.0 1.0)
	      (peak-env-equal? "ramp-channel peak" ind (channel-amp-envs ind 0 1) .001)
	      (undo)
	      (env-channel '(0 0 1 1 2 0))
	      (peak-env-equal? "env-channel peak" ind (channel-amp-envs ind 0 1) .002)
	      (undo)
	      (env-channel (make-env '(0 0 1 1 2 0) :scaler 0.5 :end (1- (frames))))
	      (peak-env-equal? "scaled env-channel peak" ind (channel-amp-envs ind 0 1) .002)
	      (undo)
	      (env-channel (make-env '(0 0 1 1 2 0) 0.5 :end (1- (frames))))
	      (peak-env-equal? "scaled nokey env-channel peak" ind (channel-amp-envs ind 0 1) .001)
	      (undo)
	      (env-channel (make-env '(0 0 1 1 2 0) :scaler 0.5 :offset 0.5 :end (1- (frames))))
	      (peak-env-equal? "scaled and offset env-channel peak" ind (channel-amp-envs ind 0 1) .001)
	      (undo)
	      (env-channel (make-env '(0 0 1 1 2 .5 3 0) :base 0.0 :end (1- (frames))))
	      (peak-env-equal? "env-channel base 0.0 peak" ind (channel-amp-envs ind 0 1) .001)
	      (undo)
	      (xramp-channel 0.0 1.0 32.0)
	      (peak-env-equal? "xramp 32.0 peak" ind (channel-amp-envs ind 0 1) .008)
	      (undo)
	      (xramp-channel 0.0 1.0 .032)
	      (peak-env-equal? "xramp .032 peak" ind (channel-amp-envs ind 0 1) .004)
	      (undo)
	      (env-channel (make-env '(0 0 1 1 2 .5 3 0) :base 10.0 :end (1- (frames))))
	      (peak-env-equal? "env-channel base 10.0 peak" ind (channel-amp-envs ind 0 1) .003)
	      (undo)
	      (env-channel (make-env '(0 0 1 1 2 0) :base .10 :end (1- (frames))))
	      (peak-env-equal? "env-channel base .1 peak" ind (channel-amp-envs ind 0 1) .003)
	      (undo)
	      (ptree-channel (lambda (y) (* y 2)) 0 (frames) ind 0 #f #t)
	      (peak-env-equal? "ptree-channel peak" ind (channel-amp-envs ind 0 1) .0001)
	      (undo)
	      (ramp-channel 0.0 1.0)
	      (ptree-channel (lambda (y) (* y 2)) 0 (frames) ind 0 #f #t)
	      (peak-env-equal? "ptree+ramp peak" ind (channel-amp-envs ind 0 2) .01)
	      (undo 2)
	      (xramp-channel 0.0 1.0 3.0)
	      (ptree-channel (lambda (y) (* y 2)) 0 (frames) ind 0 #f #t)
	      (peak-env-equal? "ptree+xramp peak" ind (channel-amp-envs ind 0 2) .004)
	      (undo 2)
	      (ptree-channel (lambda (y data forward)
			       (declare (y real) (data vct) (forward boolean))
			       (* y (vct-ref data 0)))
			     0 (frames) ind 0 #f #t
			     (lambda (pos dur)
			       (vct 0.5)))
	      (peak-env-equal? "ptree+closure peak" ind (channel-amp-envs ind 0 1) .009)
	      (undo)
	      (ramp-channel 0.0 1.0)
	      (ptree-channel (lambda (y data forward)
			       (declare (y real) (data vct) (forward boolean))
			       (* y (vct-ref data 0)))
			     0 (frames) ind 0 #f #t
			     (lambda (pos dur)
			       (vct 0.5)))
	      (peak-env-equal? "ptree+ramp+closure peak" ind (channel-amp-envs ind 0 2) .01)
	      (undo 2)
	      (xramp-channel 0.0 1.0 3.0)
	      (ptree-channel (lambda (y data forward)
			       (declare (y real) (data vct) (forward boolean))
			       (* y (vct-ref data 0)))
			     0 (frames) ind 0 #f #t
			     (lambda (pos dur)
			       (vct 0.5)))
	      (peak-env-equal? "ptree+xramp+closure peak" ind (channel-amp-envs ind 0 2) .001)
	      (undo 2)
	      (insert-samples 1000 5000 (make-vct 5000 .5))
	      (peak-env-equal? "insert-samples peak" ind (channel-amp-envs ind 0 1) .0001)
	      (undo)
	      (set! (samples 500 100) (make-vct 100 .1))
	      (peak-env-equal? "set-samples peak" ind (channel-amp-envs ind 0) .0001)
	      (undo)
	      
	      (revert-sound ind)
	      (ramp-channel 0.0 1.0)
	      (ramp-channel 1.0 0.0)
	      (peak-env-equal? "ramp2 peak" ind (channel-amp-envs ind 0 2) .002)

	      (revert-sound ind)
	      (env-channel '(0 0 1 1))
	      (env-channel '(0 0 1 1 2 0))
	      (peak-env-equal? "env ramp2 peak" ind (channel-amp-envs ind 0 2) .002)

	      (revert-sound ind)
	      (env-channel '(0 0 1 1))
	      (env-channel '(0 0 1 1 2 0))
	      (ptree-channel (lambda (y) (* y 2.0)))
	      (peak-env-equal? "ptree-ramp20 peak" ind (channel-amp-envs ind 0 3) .0001)

	      (revert-sound ind)
	      (ramp-channel 0.0 1.0 12000 5000)
	      (peak-env-equal? "ramp-channel peak" ind (channel-amp-envs ind 0 1) .002)
	      (undo)
	      (env-channel '(0 0 1 1 2 0) 12000 5000)
	      (peak-env-equal? "env-channel peak" ind (channel-amp-envs ind 0 1) .003)
	      (undo)
	      (env-channel (make-env '(0 0 1 1 2 0) :scaler 0.5 :end 4999) 12000 5000)
	      (peak-env-equal? "scaled env-channel peak" ind (channel-amp-envs ind 0 1) .004)
	      (undo)
	      (env-channel (make-env '(0 0 1 1 2 0) 0.5 :end 4999) 12000 5000)
	      (peak-env-equal? "scaled nokey env-channel peak" ind (channel-amp-envs ind 0 1) .004)
	      (undo)
	      (env-channel (make-env '(0 0 1 1 2 0) :scaler 0.5 :offset 0.5 :end 4999) 12000 5000)
	      (peak-env-equal? "scaled and offset env-channel peak" ind (channel-amp-envs ind 0 1) .002)
	      (undo)
	      (xramp-channel 0.0 1.0 32.0 2000 1000)
	      (peak-env-equal? "xramp 32.0 peak (1)" ind (channel-amp-envs ind 0 1) .009)
	      (undo)
	      (xramp-channel 0.0 1.0 .032 2000 1000)
	      (peak-env-equal? "xramp .032 peak (1)" ind (channel-amp-envs ind 0 1) .009)
	      (undo)
	      (env-channel (make-env '(0 0 1 1 2 .5 3 0) :base 10.0 :end 4999) 12000 5000)
	      (peak-env-equal? "env-channel base 10.0 peak" ind (channel-amp-envs ind 0 1) .1)
	      ;; this can be way off because the envelope is not very closely sampled in this case
	      (undo)
	      (ptree-channel (lambda (y) (* y 2)) 2000 1000 ind 0 #f #t)
	      (peak-env-equal? "ptree-channel peak" ind (channel-amp-envs ind 0 1) .0001)
	      (undo)
	      (ramp-channel 0.0 1.0)
	      (ptree-channel (lambda (y) (* y 2)) 2000 1000 ind 0 #f #t)
	      (peak-env-equal? "ptree+ramp peak" ind (channel-amp-envs ind 0 2) .001)
	      (undo 2)
	      (xramp-channel 0.0 1.0 3.0)
	      (ptree-channel (lambda (y) (* y 2)) 2000 1000 ind 0 #f #t)
	      (peak-env-equal? "ptree+xramp peak" ind (channel-amp-envs ind 0 2) .001)
	      (undo 2)
	      (ptree-channel (lambda (y data forward)
			       (declare (y real) (data vct) (forward boolean))
			       (* y (vct-ref data 0)))
			     2000 1000 ind 0 #f #t
			     (lambda (pos dur)
			       (vct 0.5)))
	      (peak-env-equal? "ptree+closure peak" ind (channel-amp-envs ind 0 1) .0001)
	      (undo)
	      (ramp-channel 0.0 1.0)
	      (ptree-channel (lambda (y data forward)
			       (declare (y real) (data vct) (forward boolean))
			       (* y (vct-ref data 0)))
			     2000 1000 ind 0 #f #t
			     (lambda (pos dur)
			       (vct 0.5)))
	      (peak-env-equal? "ptree+ramp+closure peak" ind (channel-amp-envs ind 0 2) .001)
	      
	      (revert-sound ind)
	      (ramp-channel 0.0 1.0)
	      (ramp-channel 1.0 0.0 2000 1000)
	      (peak-env-equal? "ramp2 peak" ind (channel-amp-envs ind 0 2) .002)

	      (revert-sound ind)
	      (env-channel '(0 0 1 1))
	      (env-channel '(0 0 1 1 2 0) 2000 1000)
	      (peak-env-equal? "env ramp2 peak" ind (channel-amp-envs ind 0 2) .002)

	      (revert-sound ind)
	      (env-channel '(0 0 1 1))
	      (env-channel '(0 0 1 1 2 0))
	      (ptree-channel (lambda (y) (* y 2.0)) 2000 1000)
	      (peak-env-equal? "ptree-ramp21 peak" ind (channel-amp-envs ind 0 3) .002)

	      (revert-sound ind)
	      (env-channel '(0 0 1 1))
	      (env-channel '(0 0 1 1 2 0))
	      (env-channel '(0 0 1 1) 12000 5000)
	      (peak-env-equal? "ptree-ramp3 peak" ind (channel-amp-envs ind 0 3) .01)

	      (revert-sound ind)
	      (xen-channel (lambda (y data forward)
			     (* y (list-ref data 0)))
			   0 (frames) ind 0 #f #t
			   (lambda (pos dur)
			     (list 0.5)))
	      (peak-env-equal? "xen peak" ind (channel-amp-envs ind 0 1) .0001)

	      (revert-sound ind)
	      (xen-channel (lambda (y data forward)
			     (* y (list-ref data 0)))
			   2000 1000 ind 0 #f #t
			   (lambda (pos dur)
			     (list 0.5)))
	      (peak-env-equal? "xen peak selection" ind (channel-amp-envs ind 0 1) .0001)

	      ))
	(close-sound ind))

      (let ((ind (new-sound "test.snd")))
	(map-chan (lambda (y) 1.0) 0 50000)
	(ramp-channel 0.5 1.0 1000 4000)
	(let* ((peaks (channel-amp-envs ind 0))
	       (mx (cadr peaks))
	       (mn (car peaks)))
	  (call-with-current-continuation
	   (lambda (break)
	     (do ((i 0 (1+ i)))
		 ((= i (- (vct-length mn) 4)))
	       (if (< (vct-ref mn i) 0.5) (begin (snd-display ";peak min: ~A ~A" (vct-ref mn i) i) (break #f)))
	       (if (< (vct-ref mx i) 0.5) (begin (snd-display ";peak max: ~A ~A" (vct-ref mx i) i) (break #f)))))))
	(undo 2)
	(map-chan (lambda (y) -1.0) 0 50000)
	(ramp-channel 0.5 1.0 1000 4000)
	(let* ((peaks (channel-amp-envs ind 0))
	       (mx (cadr peaks))
	       (mn (car peaks)))
	  (call-with-current-continuation
	   (lambda (break)
	     (do ((i 0 (1+ i)))
		 ((= i (- (vct-length mn) 4)))
	       (if (> (vct-ref mn i) -0.5) (begin (snd-display ";1 peak min: ~A ~A" (vct-ref mn i) i) (break #f)))
	       (if (> (vct-ref mx i) -0.5) (begin (snd-display ";1 peak max: ~A ~A" (vct-ref mx i) i) (break #f)))))))
	(close-sound ind))

      (let ((index (new-sound "fmv.snd" mus-next mus-bshort 22050 2 "channel tests")))
	(define (test-channel-func func val-func init-val)
	  (let* ((len (frames index))
		 (chns (chans index))
		 (val #f))
	    (set! g-init-val init-val)
	    (do ((k 0 (1+ k)))
		((= k 2))
	      (set! val (val-func len))
	      (set! (sync index) k)
	      (do ((i 0 (1+ i)))
		  ((= i chns))
		(map-channel (lambda (n) 0.0) 0 len index i)
		(if (scan-channel (lambda (n) (> (abs n) .001)) 0 len index i)
		    (snd-display ";init scan: ~A?" (scan-channel (lambda (n) (> (abs n) 0.001))))))
	      ;; now it's cleared
	      (do ((i 0 (1+ i)))
		  ((= i chns))
		(map-channel (lambda (n) g-init-val) 0 len index i)
		(func 0 len index i)
		(do ((j 0 (1+ j)))
		    ((= j chns))
		  (let ((vi (channel->vct 0 len index j)))
		    (if (= j i)
			(if (not (vequal vi val))
			    (snd-display ";chan func: ~A ~A" vi val))
			(if (scan-channel (lambda (n) (> (abs n) .001)) 0 len index j)
			    (snd-display ";chan func leaks? ~A ~A: ~A" i j (scan-channel (lambda (n) (> (abs n) 0.001)) 0 len index j))))))
		(map-channel (lambda (n) 0.0) 0 len index i))
	      (do ((i 0 (1+ i)))
		  ((= i chns))
		(map-channel (lambda (n) g-init-val) 0 len index i)
		(let ((ed (edit-position index i)))
		  (map-channel (lambda (n) (+ g-init-val 1.0)) 0 len index i)
		  (func 0 len index i ed)
		  (do ((j 0 (1+ j)))
		      ((= j chns))
		    (let ((vi (channel->vct 0 len index j)))
		      (if (= j i)
			  (if (not (vequal vi val))
			      (snd-display ";ed chan func: ~A ~A" vi val))
			  (if (scan-channel (lambda (n) (> (abs n) 0.001)) 0 len index j)
			      (snd-display ";ed chan func leaks? ~A ~A ~A: ~A" i j ed (scan-channel (lambda (n) (> (abs n) 0.001)) 0 len index j))))))
		  (map-channel (lambda (n) 0.0) 0 len index i)))
	      (let* ((beg (inexact->exact (/ len 3)))
		     (dur beg)
		     (nv (val-func dur)))
		(vct-fill! val 0.0)
		(do ((i beg (1+ i))
		     (j 0 (1+ j)))
		    ((= j dur))
		  (vct-set! val i (vct-ref nv j)))
		(do ((i 0 (1+ i)))
		    ((= i chns))
		  (map-channel (lambda (n) g-init-val) beg dur index i)
		  (func beg dur index i)
		  (add-mark beg index i)
		  (do ((j 0 (1+ j)))
		      ((= j chns))
		    (let ((vi (channel->vct 0 len index j)))
		      (if (= j i)
			  (if (not (vequal vi val))
			      (snd-display ";chan func n: ~A ~A" vi val))
			  (if (scan-channel (lambda (n) (> (abs n) 0.001)) 0 len index j)
			      (snd-display ";dur chan func leaks? ~A ~A: ~A" i j (scan-channel (lambda (n) (> (abs n) 0.001)) 0 len index j))))))
		  (map-channel (lambda (n) 0.0) 0 len index i))))))

	(insert-silence 0 10 index 0)
	(insert-silence 0 10 index 1)

	(test-channel-func (lambda* (beg dur index chan #:optional edpos)
			     (clm-channel (make-env :envelope '(0 0 1 1) :end (1- dur)) beg dur index chan edpos))
			   (lambda (dur)
			     (let ((e (make-env :envelope '(0 0 1 1) :end (1- dur)))
				   (v (make-vct dur)))
			       (do ((i 0 (1+ i)))
				   ((= i dur))
				 (vct-set! v i (env e)))
			       v))
			   0.0)

	(test-channel-func (lambda* (beg dur index chan #:optional edpos)
			     (clm-channel (make-oscil :frequency 0.0 :initial-phase (/ pi 2)) beg dur index chan edpos))
			   (lambda (dur)
			     (let ((v (make-vct dur)))
			       (vct-fill! v 1.0)
			       v))
			   0.0)

	(test-channel-func (lambda* (beg dur index chan #:optional edpos)
			     (scale-channel 0.5 beg dur index chan edpos))
			   (lambda (dur)
			     (let ((v (make-vct dur)))
			       (vct-fill! v 0.5)
			       v))
			   1.0)

	(test-channel-func (lambda* (beg dur index chan #:optional edpos)
			     (env-channel (make-env :envelope '(0 0 1 1) :end (1- dur)) beg dur index chan edpos))
			   (lambda (dur)
			     (let ((e (make-env :envelope '(0 0 1 1) :end (1- dur)))
				   (v (make-vct dur)))
			       (do ((i 0 (1+ i)))
				   ((= i dur))
				 (vct-set! v i (env e)))
			       v))
			   1.0)

	(test-channel-func (lambda* (beg dur index chan #:optional edpos)
			     (env-channel '(0 0 1 1) beg dur index chan edpos))
			   (lambda (dur)
			     (let ((e (make-env :envelope '(0 0 1 1) :end (1- dur)))
				   (v (make-vct dur)))
			       (do ((i 0 (1+ i)))
				   ((= i dur))
				 (vct-set! v i (env e)))
			       v))
			   1.0)

	(test-channel-func (lambda* (beg dur index chan #:optional edpos)
			     (let ((v (make-vct dur)))
			       (vct-fill! v -1.0)
			       (vct->channel v beg dur index chan)))
			   (lambda (dur)
			     (let ((v (make-vct dur)))
			       (vct-fill! v -1.0)
			       v))
			   1.0)

	(test-channel-func (lambda* (beg dur index chan #:optional edpos)
			     (delete-samples beg dur index chan edpos)
			     (pad-channel beg dur index chan edpos))
			   (lambda (dur)
			     (make-vct dur))
			   1.0)

	(test-channel-func (lambda* (beg dur index chan #:optional edpos)
			     (let ((v (make-vct dur)))
			       (vct-fill! v -1.0)
			       (delete-samples beg dur index chan edpos)
			       (insert-samples beg dur v index chan edpos)))
			   (lambda (dur)
			     (let ((v (make-vct dur)))
			       (vct-fill! v -1.0)
			       v))
			   1.0)

	(test-channel-func (lambda* (beg dur index chan #:optional edpos)
			     (let ((v (make-vct dur)))
			       (vct-fill! v -1.0)
			       (set! (samples beg dur index chan #f "test-channel" 0 edpos) v)))
			   (lambda (dur)
			     (let ((v (make-vct dur)))
			       (vct-fill! v -1.0)
			       v))
			   1.0)

	(test-channel-func (lambda* (beg dur index chan #:optional edpos)
			     (env-channel (make-env :envelope '(0 0 1 1) :end (1- dur)) beg dur index chan edpos)
			     (reverse-channel beg dur index chan))
			   (lambda (dur)
			     (let ((e (make-env :envelope '(0 1 1 0) :end (1- dur)))
				   (v (make-vct dur)))
			       (do ((i 0 (1+ i)))
				   ((= i dur))
				 (vct-set! v i (env e)))
			       v))
			   1.0)

	(test-channel-func (lambda* (beg dur index chan #:optional edpos)
			     (env-channel (make-env :envelope '(0 0 1 1) :end (1- dur)) beg dur index chan edpos)
			     (set! (sample (+ beg dur) index chan) 1.0)
			     (smooth-channel beg dur index chan)
			     (if (not (= beg 0))
				 (set! (sample (+ beg dur) index chan) 0.0)))
			   (lambda (dur)
			     (let ((v (make-vct dur)))
			       (do ((i 0 (1+ i)))
				   ((= i dur))
				 (vct-set! v i (+ 0.5 (* 0.5 (cos (+ 3.14159 (/ (* 3.14159 i) dur)))))))
			       v))
			   1.0)
	(if (not (equal? (edits index) (list 276 0)))
	    (snd-display ";channel edits: ~A" (edits index)))
	(let ((old-max (maxamp index #t))
	      (regdata (map (lambda (n)
			      (region-samples->vct 0 10 n))
			    (regions)))
	      (old-pos0 (edit-position index 0))
	      (old-pos1 (edit-position index 1))
	      (old-reglen (map region-frames (regions)))
	      (s61-files '()))
	  (add-hook! save-state-hook
		     (lambda (file)
		       (set! s61-files (cons file s61-files))
		       #f))
	  (save-state "s61.scm")
	  (close-sound index)
	  (map forget-region (regions))
	  (load "s61.scm")
	  (if (not (equal? old-reglen (map region-frames (regions))))
	      (snd-display ";region-frames after save: ~A ~A" old-reglen (map region-frames (regions))))
	  (for-each (lambda (n data)
		      (if (not (vequal data (region-samples->vct 0 10 n)))
			  (snd-display ";region after save ~A: ~A ~A" n data (region-samples->vct 0 10 n))))
		    (regions)
		    regdata)
	  (set! index (find-sound "fmv.snd"))
	  (if (not (equal? (maxamp index #t) old-max))
	      (snd-display ";maxes: ~A ~A" (maxamp index #t) old-max))
	  (if (not (equal? (edits index) (list 276 0))) ; extend adds 2
	      (snd-display ";saved channel edits: ~A" (edits index)))

	  (do ((i 0 (1+ i)))
	      ((= i 10))
	    (let ((pos (random (car (edits index)))))
	      (scale-channel (random 2.0) (random 5) (random 5) index 0 pos)
	      (set! (edit-position index) (inexact->exact (* (car (edits index)) .7)))))

	  (close-sound index)
	  (for-each
	   (lambda (n)
	     (forget-region n))
	   (regions))
	  (for-each
	   (lambda (file)
	     (if (file-exists? file) 
		 (delete-file file)))
	   s61-files)
	  (delete-file "s61.scm")
	  ))

      (let ((index (new-sound "fmv.snd" mus-next mus-bshort 22050 2 "channel tests"))
	    (v (make-vct 10))
	    (sw (sinc-width)))
        (set! (sinc-width) 10)
	(vct-set! v 0 1.0)
	(vct->channel v 0 10 index 0)
	(src-channel 0.5 0 10 index 0)
	(let ((v (make-vct 10))
	      (s (make-src :srate 0.5
			   :input (let ((val 1.0))
				    (lambda (dir)
				      (let ((rtn val))
					(set! val 0.0)
					rtn))))))
	  (vct-set! v 0 (src s))
	  (do ((i 1 (1+ i)))
	      ((= i 10))
	    (vct-set! v i (src s)))
	  (if (not (vequal v (channel->vct 0 10 index 0)))
	      (snd-display ";src-channel: ~A ~A" v (channel->vct 0 10 index 0)))
	  (if (not (vequal (make-vct 10) (channel->vct 0 10 index 1)))
	      (snd-display ";src-channel leaks: ~A" (channel->vct 0 10 index 1)))
	  (let ((tag (catch #t (lambda () (src s 1.0 (lambda (a b) a))) (lambda args (car args)))))
	    (if (not (eq? tag 'bad-arity)) 
		(snd-display ";src bad func: ~A" tag))))
        (revert-sound index)
	(vct->channel v 0 10 index 1)
	(vct->channel v 10 10 index 1)
	(src-channel (make-env :envelope '(1 1 2 2) :end 20) 0 20 index 1)
	(if (not (vequal (channel->vct 0 10 index 1) (vct 1.000 -0.000 -0.048 0.068 -0.059 0.022 0.030 -0.100 0.273 0.606)))
	    (snd-display ";src-channel env: ~A" (channel->vct 0 10 index 1)))
	(if (not (vequal (make-vct 10) (channel->vct 0 10 index 0)))
	    (snd-display ";src-channel env leaks: ~A" (channel->vct 0 10 index 0)))
        (set! (sinc-width) sw)
	(close-sound index))

      (let* ((ind (open-sound "oboe.snd"))
	     (rid0 (make-region 2000 2020 ind 0))
	     (rid0-data (region2vct rid0 0 20)))
        (scale-sound-by 2.0)
        (play-region rid0 #t)
        (let ((nv (region2vct rid0 0 20)))
          (if (not (vequal rid0-data nv)) (snd-display ";deferred region after scaling:~%  ~A~%  ~A" rid0-data nv)))
        (let ((nv (region-to-vct rid0 0 20)))
          (if (not (vequal rid0-data nv)) (snd-display ";deferred region after scaling (rs):~%  ~A~%  ~A" rid0-data nv)))
        (undo)
        (scale-by 4.0)
        (play-region rid0 #t)
        (let ((nv (region2vct rid0 0 20)))
          (if (not (vequal rid0-data nv)) (snd-display ";file region after scaling:~%  ~A~%  ~A" rid0-data nv)))
        (let ((nv (region-to-vct rid0 0 20)))
          (if (not (vequal rid0-data nv)) (snd-display ";file region after scaling (rs):~%  ~A~%  ~A" rid0-data nv)))
        (let* ((rid1 (make-region 2000 2020 ind 0))
	       (rid1-data (region2vct rid1 0 20)))
          (scale-to .5)
          (let ((nv (region2vct rid1 0 20)))
            (if (not (vequal rid1-data nv)) (snd-display ";deferred region after scale-to:~%  ~A~%  ~A" rid1-data nv)))
          (close-sound ind)
          (play-region rid0 #t)
          (play-region rid1 #t)
          (let ((nv (region2vct rid1 0 20)))
            (if (not (vequal rid1-data nv)) (snd-display ";deferred region after close:~%  ~A~%  ~A" rid1-data nv)))
          (let ((nv (region2vct rid0 0 20)))
            (if (not (vequal rid0-data nv)) (snd-display ";file region after close:~%  ~A~%  ~A" rid0-data nv))))

        (for-each
         (lambda (s1 l1 s2 l2)
           (set! ind (open-sound "2.snd"))
           (set! (selection-member? #t) #f)
           (set! (selection-member? ind 0) #t)
           (set! (selection-position ind 0) s1)
           (set! (selection-frames ind 0) l1)
           (set! (selection-member? ind 1) #t)
           (set! (selection-position ind 1) s2)
           (set! (selection-frames ind 1) l2)
           (let* ((rid2 (make-region))
      	          (rid20-data (region2vct rid2 0 l1))
      	          (rid21-data (region2vct rid2 1 l2)))
             (if (not (= (region-chans rid2) 2)) (snd-display ";region-chans of sync'd sound: ~A?" (region-chans rid2)))
             (swap-channels ind 0 ind 1)
             (let ((nv (region2vct rid2 0 l1)))
      	       (if (not (vequal rid20-data nv)) (snd-display ";deferred region after scaling (20):~%  ~A~%  ~A" rid20-data nv)))
             (let ((nv (region-to-vct rid2 0 l1)))
      	       (if (not (vequal rid20-data nv)) (snd-display ";deferred region after scaling (20 rs):~%  ~A~%  ~A" rid20-data nv)))
             (let ((nv (region2vct rid2 1 l2)))
      	       (if (not (vequal rid21-data nv)) (snd-display ";deferred region after scaling (21):~%  ~A~%  ~A" rid21-data nv)))
             (let ((nv (region-to-vct rid2 1 l2)))
      	       (if (not (vequal rid21-data nv)) (snd-display ";deferred region after scaling (21 rs):~%  ~A~%  ~A" rid21-data nv)))
             (close-sound ind)
             (let ((nv (region2vct rid2 0 l1)))
      	       (if (not (vequal rid20-data nv)) (snd-display ";deferred region after scaling (20):~%  ~A~%  ~A" rid20-data nv)))
             (let ((nv (region-to-vct rid2 0 l1)))
      	       (if (not (vequal rid20-data nv)) (snd-display ";deferred region after scaling (20 rs):~%  ~A~%  ~A" rid20-data nv)))
             (let ((nv (region2vct rid2 1 l2)))
      	       (if (not (vequal rid21-data nv)) (snd-display ";deferred region after scaling (21):~%  ~A~%  ~A" rid21-data nv)))
             (let ((nv (region-to-vct rid2 1 l2)))
      	       (if (not (vequal rid21-data nv)) (snd-display ";deferred region after scaling (21 rs):~%  ~A~%  ~A" rid21-data nv)))
             ))
         (list 2000 2000 2000 0 2000 0 2000)
         (list 20 10 20 20 20 10 20)
         (list 2000 2000 2000 2000 0 2000 0)
         (list 20 20 10 20 20 20 10))

	(let ((ind (open-sound "obtest.snd")))
	  (set! (read-only ind) #t)
	  (delete-samples 0 1000 ind 0)
	  (let ((val (save-sound ind)))
	    (if val (snd-display ";save-sound read-only: ~A" val)))
	  (if (not (equal? (edits ind) (list 1 0))) (snd-display ";read-only ignored? ~A" (edits ind)))
	  (if with-gui
	      (let ((str (widget-text (list-ref (sound-widgets ind) 3))))
		(if (not (string=? str "can't write obtest.snd (it is read-only)"))
		    (snd-display ";read-only report-in-minibuffer: ~A?" str))
		(set! str (widget-text (list-ref (sound-widgets ind) 4))) ; listener
		(if (not (string? str))
		    (snd-display ";widget-text of listener?: ~A?" str))))
	  (set! (read-only ind) #f)
	  (revert-sound ind)
	  (save-sound ind)
	  (if with-gui
	      (let ((str (widget-text (list-ref (sound-widgets ind) 3))))
		(if (not (string=? str "(no changes need to be saved)"))
		    (snd-display ";save unneeded report-in-minibuffer: ~A?" str))))
	  (key (char->integer #\j) 4)
	  (if with-gui
	      (let ((str (widget-text (list-ref (sound-widgets ind) 3))))
		(if (not (string=? str "no marks"))
		    (snd-display ";C-j w/o marks: ~A?" str))))
	  (key (char->integer #\x) 4)
	  (key (char->integer #\c) 0)
	  (if with-gui
	      (let ((str (widget-text (list-ref (sound-widgets ind) 3))))
		(if (widget-text (cadr (main-widgets))) 
		    (snd-display ";widget-text of non-text widget: ~A" (widget-text (cadr (main-widget)))))
		(set! (widget-text (list-ref (channel-widgets ind 0) 2)) "F")
		(if (not (string=? (widget-text (list-ref (channel-widgets ind 0) 2)) "F"))
		    (snd-display ";set button label to F: ~A" (widget-text (list-ref (channel-widgets ind 0) 2)) "F"))
		(if (not (string=? str "no marks"))
		    (snd-display ";C-x c w/o marks: ~A?" str))))
	  (add-mark 123)
	  (key (char->integer #\u) 4)
	  (key (char->integer #\6) 4)
	  (key (char->integer #\j) 4)
	  (if with-gui
	      (let ((str (widget-text (list-ref (sound-widgets ind) 3))))
		(if (not (string=? str "no such mark"))
		    (snd-display ";C-u 6 C-j: ~A?" str))))
	  (key (char->integer #\u) 4)
	  (key (char->integer #\6) 4)
	  (key (char->integer #\x) 4)
	  (key (char->integer #\c) 0)
	  (if with-gui
	      (let ((str (widget-text (list-ref (sound-widgets ind) 3))))
		(if (not (string=? str "no such mark"))
		    (snd-display ";C-u 6 C-x c: ~A?" str))))
	  (close-sound ind))

	(let ((ind (view-sound "obtest.snd")))
	  (delete-samples 0 1000 ind 0)
	  (save-sound ind)
	  (if (not (equal? (edits ind) (list 1 0))) (snd-display ";view read-only ignored? ~A" (edits ind)))
	  (if with-gui
	      (let ((str (widget-text (list-ref (sound-widgets ind) 3))))
		(if (not (string=? str "can't write obtest.snd (it is read-only)"))
		    (snd-display ";view read-only report-in-minibuffer: ~A?" str))))
	  (close-sound ind))

	(let ((ind (new-sound "test.snd" mus-next mus-bfloat 22050 1)))
	  (insert-silence 0 150000)
	  (map-channel (lambda (y) 0.5))
	  (env-sound '(0 0 1 1 2 0))
	  (fp 1.0 0.3 20)
	  (let ((old-curse (cursor-follows-play)))
	    (set! (cursor-follows-play) #t)
	    (play-and-wait)
	    (set! (cursor-follows-play) old-curse))
	  (close-sound ind))
	(let ((ind (new-sound "test.snd" mus-next mus-bfloat 22050 1)))
	  (for-each
	   (lambda (dur)
	     (insert-silence 0 dur)
	     (map-channel (lambda (y) 1.0))
	     (env-sound '(0 0 1 1 2 0))
	     (let ((reader (make-sample-reader (1- (frames)) ind 0 -1)))
	       (if (not (= (sample-reader-position reader) (1- (frames)))) (snd-display ";sample-reader-position: ~A" (sample-reader-position reader)))
	       (map-channel (lambda (y) (read-sample reader))))
	     (scan-channel (let ((pos 0)
				 (e (make-env '(0 0 1 1 2 0) :end dur)))
			     (lambda (y)
			       (let ((val (env e)))
				 (if (fneq val y) 
				     (begin
				       (snd-display ";trouble in reverse read at ~D ~A ~A" pos val y)
				       #t)
				     (begin
				       (set! pos (1+ pos))
				       #f))))))
	     (revert-sound))
	   (list 150 1500 150000))
	  (close-sound ind))
	(let ((ind (new-sound "test.snd" mus-next mus-bfloat 22050 1)))
	  (insert-silence 0 1000)
	  (map-channel (lambda (y) 1.0))
	  (env-sound '(0 0 1 1 2 0))
	  (scale-channel 0.0 100 200)
	  (let ((reader (make-sample-reader (1- (frames)) ind 0 -1)))
	    (map-channel (lambda (y) (read-sample reader))))
	  (scan-channel (let ((pos 0)
			      (e (make-env '(0 0 1 1 2 0) :end 1000)))
			  (lambda (y)
			    (let ((val (env e)))
			      (if (or (and (or (> pos 900) (<= pos 700))
					   (fneq val y))
				      (and (> pos 700) (<= pos 900)
					   (fneq y 0.0)))
				  (begin
				    (snd-display ";trouble in reverse read 2 at ~D ~A ~A" pos val y)
				    #t)
				  (begin
				    (set! pos (1+ pos))
				    #f))))))
	  (close-sound ind))
	(let ((ind (new-sound "test.snd" mus-next mus-bfloat 22050 1)))
	  (insert-silence 0 150000)
	  (map-channel (lambda (y) 1.0))
	  (let ((edpos (edit-position)))
	    (do ((i 0 (1+ i)))
		((= i 7))
	      (if (= i 5)
		  (scale-channel 0.5 1000 12345))
	      (env-sound '(0 0 1 1 2.5 0 3 1 4 0))
	      (if (= i 1)
		  (delete-samples 50 100)
		  (if (= i 2)
		      (insert-samples 300 100 (vct-fill! (make-vct 100) 0.5))
		      (if (= i 3)
			  (scale-channel 0.0 1000 1000)
			  (if (= i 4)
			      (vct->channel (vct-fill! (make-vct 100) .5) 500 100)
			      (if (= i 6)
				  (env-sound '(0 1 1 0) 10000 2000))))))
	      (let ((reader (make-sample-reader (1- (frames)) ind 0 -1)))
		(map-channel (lambda (y) (read-sample reader))))
	      (let ((reader (make-sample-reader (1- (frames)) ind 0 -1)))
		(map-channel (lambda (y) (read-sample reader))))
	      (scan-channel (let ((old-reader (make-sample-reader 0 ind 0 1 (- (edit-position ind 0) 2)))
				  (pos 0))
			      (lambda (y)
				(let ((val (read-sample old-reader)))
				  (if (fneq y val)
				      (begin
					(snd-display ";trouble in reverse (~D) read at ~D ~A ~A" i pos val y)
					#t)
				      (begin
					(set! pos (1+ pos))
					#f))))))
	      (set! (edit-position ind 0) edpos)))
	  (close-sound ind))
	(let ((reader #f)
	      (last-proc #f))
	  (define (scan-again)
	    (if (sample-reader-at-end? reader)
		#f
		(let ((val (last-proc (reader))))
		  (if val 
		      (list val (1- (sample-reader-position reader)))
		      (scan-again)))))
	  (define* (my-scan-chan #:optional proc)
	    (if proc 
		(begin
		  (set! last-proc proc)
		  (set! reader (make-sample-reader 0))))
	    (scan-again))
	  (let ((ind (open-sound "oboe.snd"))
		(val #f))
	    (let ((samp (sample 1000)))
	      (set! (cursor ind 0) 1000)
	      (if (fneq (sample) samp)
		  (snd-display ";sample no args: ~A ~A" (sample) samp)))
	    (set! val (my-scan-chan (lambda (y) (> y .1))))
	    (if (not (equal? val (list #t 4423)))
		(snd-display ";my-scan-chan: ~A" val))
	    (set! val (scan-again))
	    (if (not (equal? val (list #t 4463)))
		(snd-display ";scan-again: ~A" val))
	    (let ((val (find (lambda (y)
			       (let ((val (find (lambda (y) (> y .1)))))
				 val)))))
	      (if (not (equal? val (list (list #t 4423) 0)))
		  (snd-display ";find twice: ~A" val)))
	    (let ((val (find (lambda (y)
			       (count-matches (lambda (y) (> y .1)))))))
	      (if (not (equal? val (list 2851 0)))
		  (snd-display ";find+count: ~A" val)))
	    (set! (cursor) 1000)
	    (set! (sample) .5)
	    (if (fneq (sample 1000) .5)
		(snd-display ";set sample no arg: ~A ~A" (sample 1000) (sample 0)))
	    (close-sound ind)))

	;; edit-menu.scm tests
	(let ((ind (view-sound "oboe.snd")))
	  (make-selection 1000 1999 ind 0)
	  (let ((newsnd (selection->new)))
	    (if (not (sound? newsnd)) (snd-display ";selection->new -> ~A" newsnd))
	    (if (not (= (frames newsnd 0) 1000)) (snd-display ";selection->new frames: ~A" (frames newsnd 0)))
	    (if (not (equal? (edits ind 0) (list 0 0))) (snd-display ";selection->new edited original? ~A" (edits ind 0)))
	    (let ((newfile (file-name newsnd)))
	      (close-sound newsnd)
	      (delete-file newfile)
	      (mus-sound-forget newfile)))
	  (make-selection 1000 1999 ind 0)
	  (let ((newsnd (cut-selection->new)))
	    (if (not (sound? newsnd)) (snd-display ";cut-selection->new -> ~A" newsnd))
	    (if (not (= (frames newsnd 0) 1000)) (snd-display ";cut-selection->new frames: ~A" (frames newsnd 0)))
	    (if (not (equal? (edits ind 0) (list 1 0))) (snd-display ";cut-selection->new did not edit original? ~A" (edits ind 0)))
	    (if (not (= (frames ind 0) (- (frames ind 0 0) 1000))) 
		(snd-display ";cut-selection->new cut: ~A ~A" (frames ind 0) (- (frames ind 0 0) 1000)))
	    (undo 1 ind 0)
	    (let ((newfile (file-name newsnd)))
	      (close-sound newsnd)
	      (delete-file newfile)
	      (mus-sound-forget newfile)))
	  (make-selection 1000 1999 ind 0)
	  (append-selection)
	  (if (not (= (frames ind 0) (+ (frames ind 0 0) 1000)))
	      (snd-display ";append-selection: ~A ~A" (frames ind 0) (frames ind 0 0)))
	  (append-sound "oboe.snd")
	  (if (not (= (frames ind 0) (+ (* 2 (frames ind 0 0)) 1000)))
	      (snd-display ";append-sound: ~A ~A" (frames ind 0) (frames ind 0 0)))
	  (revert-sound ind)
	  (let ((m1 (add-mark 1000))
		(m2 (add-mark 12000)))
	    (trim-front)
	    (if (not (equal? (edits ind 0) (list 1 0))) (snd-display ";time-front did not edit original? ~A" (edits ind 0)))
	    (if (not (= (frames ind 0) (- (frames ind 0 0) 1000))) 
		(snd-display ";trim-front: ~A ~A" (frames ind 0) (- (frames ind 0 0) 1000)))
	    (if (not (= (mark-sample m2) 11000)) (snd-display ";trim-front m2: ~A" (mark-sample m2)))
	    (undo 1 ind 0)
	    (trim-back)
	    (if (not (equal? (edits ind 0) (list 1 0))) (snd-display ";time-back did not edit original? ~A" (edits ind 0)))
	    (if (not (= (frames ind 0) 12001)) (snd-display ";trim-back: ~A" (frames ind 0)))
	    (if (not (= (mark-sample m1) 1000)) (snd-display ";trim-back m1: ~A" (mark-sample m1)))
	    (undo 1 ind 0)
	    (add-mark 22000)
	    (crop)
	    (if (not (equal? (edits ind 0) (list 1 0))) (snd-display ";crop did not edit original? ~A" (edits ind 0)))
	    (if (not (= (frames ind 0) 21001)) (snd-display ";crop: ~A" (frames ind 0)))
	    (undo 1 ind 0)
	    (close-sound ind)))

	(let ((ind (new-sound "test.snd")))
	  (map-chan (lambda (y) 1.0) 0 1000)
	  (env-channel (make-env '(0 1 1 1) :scaler .5 :end 1000))
	  (check-maxamp ind .5 "simple scaler")
	  (check-env-vals "simple scaler" (make-env '(0 1 1 1) :scaler .5 :end 1000))
	  (if (= (edit-position) 2)
	      (undo)
	      (snd-display ";env+scl was no-op"))
	  (env-channel (make-env '(0 1 1 1) :offset .5 :end 1000))
	  (check-maxamp ind 1.5 "simple offset")
	  (check-env-vals "simple offset" (make-env '(0 1 1 1) :offset .5 :end 1000))
	  (if (= (edit-position) 2)
	      (undo)
	      (snd-display ";env+offset was no-op"))
	  (env-channel (make-env '(0 0 1 1 2 0) :offset .5 :scaler 2.0 :end 1000))
	  (check-maxamp ind 2.5 "off+scl")
	  (check-env-vals "off+scl" (make-env '(0 0 1 1 2 0) :offset .5 :scaler 2.0 :end 1000))
	  (undo)
	  (env-channel (make-env '(0 -1 1 0 2 -1) :offset .5 :scaler 2.0 :end 1000))
	  (check-maxamp ind 1.5 "off+scl #2") ; 1.5 because abs max
	  (let ((mx -12.0))
	    (scan-chan (lambda (y) 
			 (if (> y mx) 
			     (set! mx y))
			 #f))
	    (if (fneq mx 0.5) (snd-display ";non abs max: ~A (correct: 0.5)" mx)))
	  (check-env-vals "off+scl #2" (make-env '(0 -1 1 0 2 -1) :offset .5 :scaler 2.0 :end 1000))
	  (undo)
	  (env-sound '(0 .5 1 .75 2 .25) 0 (frames) 32.0)
	  (check-maxamp ind 0.75 "xramp")
	  (check-env-vals "xramp" (make-env '(0 .5 1 .75 2 .25) :base 32.0 :end 1000))

	  (close-sound ind))
  
	(let ((ind (new-sound "test.snd")))
	  (pad-channel 0 1000)
	  (set! (sample 100) 1.0)
	  (let ((h (make-hilbert-transform 100)))
	    (map-channel (lambda (y) (hilbert-transform h y)))
	    (map-channel (lambda (y) (hilbert-transform h y)))
	    (map-channel (lambda (y) (hilbert-transform h y)))
	    (map-channel (lambda (y) (hilbert-transform h y)))
	    ;; now ideally we'd be back to an impulse
	    (if (> (abs (- (sample 500) .98)) .01)
		(snd-display ";hilbert impulse: ~A" (sample 500)))
	    (set! (sample 500) 0.0)
	    (if (> (maxamp ind 0) .02)
		(snd-display ";hilbert sidelobes: ~A" (maxamp ind 0)))
	    (revert-sound))
	  (pad-channel 0 1000)
	  (set! (sample 100) 1.0)
	  (let ((lo (make-lowpass (* .1 pi) 20))
		(hi (make-highpass (* .1 pi) 20)))
	    (map-channel (lambda (y) (+ (lowpass lo y) (highpass hi y))))
	    (if (fneq (sample 120) 1.0)
		(snd-display ";lowpass+highpass impulse: ~A" (sample 120)))
	    (set! (sample 120) 0.0)
	    (if (fneq (maxamp ind 0) 0.0)
		(snd-display ";lowpass+highpass sidelobes: ~A" (maxamp ind 0))))
	  (undo 2)
	  (let ((lo (make-bandpass (* .1 pi) (* .2 pi) 20))
		(hi (make-bandstop (* .1 pi) (* .2 pi) 20)))
	    (map-channel (lambda (y) (+ (bandpass lo y) (bandstop hi y))))
	    (if (fneq (sample 120) 1.0)
		(snd-display ";bandpass+bandstop impulse: ~A" (sample 120)))
	    (set! (sample 120) 0.0)
	    (if (fneq (maxamp ind 0) 0.0)
		(snd-display ";bandpass+bandstop sidelobes: ~A" (maxamp ind 0))))
	  (close-sound ind))

	(let ((ind (new-sound "test.snd")))
	  (map-channel (lambda (y) (- 1.0 (random 2.0))) 0 10000)
	  (let ((f2 (make-bandpass-2 (* .12 pi) (* .15 pi) (* .22 pi) (* .25 pi) 100)))
	    (map-channel (lambda (y) (fir-filter f2 y)))
	    (let ((data (channel->vct)))
	      (undo)
	      (let* ((f1 (make-bandpass (* .12 pi) (* .15 pi) 100))
		     (f2 (make-bandpass (* .22 pi) (* .25 pi) 100)))
		(map-channel (lambda (y) (+ (fir-filter f1 y) (fir-filter f2 y))))
		(let ((data1 (channel->vct)))
		  (vct-subtract! data data1)
		  (if (> (vct-peak data) .00001)
		      (snd-display ";fir-filter 2: ~A" (vct-peak data))))
		(undo))))
	  (close-sound ind))


        ))))


;;; ---------------- test 6 vcts ----------------

(if (or full-test (= snd-test 6) (and keep-going (<= snd-test 6)))
    (begin 
      (if (procedure? test-hook) (test-hook 6))
      (do ((clmtest 0 (1+ clmtest))) ((= clmtest tests)) 
	(if (> tests 1) (snd-display ";test ~D " clmtest))
    (let ((v0 (make-vct 10))
	  (v1 (make-vct 10))
	  (vlst (make-vct 3)))
      (if (not (vct? v0)) (snd-display ";v0 isn't a vct?!?"))
      (if (equal? v0 10) (snd-display ";v0 is 10!?"))
      (if (vct? 10) (snd-display ";10 is a vct?"))
      (if (not (= (vct-length v0) 10)) (snd-display ";v0 length = ~D?" (vct-length v0)))
      (vct-fill! v0 1.0)
      (vct-fill! v1 0.5)
      (if (equal? v0 v1) (snd-display ";vct equal? ~A ~A" v0 v1))
      (if (eq? v0 v1) (snd-display ";vct eq? ~A ~A" v0 v1))
      (let ((v2 v1)
	    (v3 (make-vct 10))
	    (v4 (make-vct 3)))
	(if (not (eq? v1 v2)) (snd-display ";vct not eq? ~A ~A" v1 v2))
	(vct-fill! v3 0.5) 
	(if (not (equal? v3 v1)) (snd-display ";vct not equal? ~A ~A" v3 v1))
	(if (equal? v4 v1) (snd-display ";len diff vct equal? ~A ~A" v4 v1))
	(set! (vct-ref v3 0) 1.0)
	(if (fneq (vct-ref v3 0) 1.0) (snd-display ";set! vct-ref: ~A" (vct-ref v3 0))))
      (vct-set! vlst 1 .1)
      (if (not (feql (vct->list vlst) (list 0.0 0.1 0.0))) (snd-display ";vct->list: ~A?" (vct->list vlst)))
      (let* ((vect '#(0.0 1.0 2.0 3.0))
	     (v123 (vct 0.0 1.0 2.0 3.0))
	     (v2 (vector->vct vect))
	     (v3 v2)
	     (str (format #f "~A" v2))
	     (str1 (format #f "~A" (make-vct 32))))
	(if (not (eq? #f (vector->vct (make-vector 0)))) (snd-display ";vector->vct empty vect: ~A" (vector->vct (make-vector 0))))
	(if (not (string=? str "#<vct[len=4]: 0.000 1.000 2.000 3.000>"))
	    (snd-display ";vct print: ~%  ~A~%  ~A?" str v2))
	(if (not (string=? str1 "#<vct[len=32]: 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 ...>"))
	    (snd-display ";vct(32) print: ~%  ~A~%" str1))
	(if (not (vequal v123 v2)) (snd-display ";vector->vct: ~A" v2))
	(if (not (equal? (vct->vector v123) vect)) (snd-display ";vct->vector: ~A ~A" vect (vct->vector v123)))
	(if (not (equal? v3 v2)) (snd-display ";vct=? ~A ~A?" v2 v3))
	(if (not (= (vct-length v2) 4)) (snd-display ";vector->vct length: ~A?" (vct-length v2)))
	(if (fneq (vct-ref v2 2) 2.0) (snd-display ";vector->vct: ~A?" v2))
	(vct-move! v2 0 2)
	(if (fneq (vct-ref v2 0) 2.0) (snd-display ";vct-move!: ~A?" v2)))
      (let ((v2 (make-vct 4)))
	(do ((i 0 (1+ i)))
	    ((= i 4))
	  (vct-set! v2 i i))
	(vct-move! v2 3 2 #t)
	(if (or (fneq (vct-ref v2 3) 2.0) (fneq (vct-ref v2 2) 1.0))
	    (snd-display ";vct-move! back: ~A?" v2)))

      (let ((v0 (make-vct 3)))
	(let ((var (catch #t (lambda () (vct-ref v0 10)) (lambda args args))))
	  (if (not (eq? (car var) 'out-of-range))
	      (snd-display ";vct-ref high index: ~A" var)))
	(let ((var (catch #t (lambda () (vct-ref v0 -1)) (lambda args args))))
	  (if (not (eq? (car var) 'out-of-range))
	      (snd-display ";vct-ref low index: ~A" var)))
	(let ((var (catch #t (lambda () (vct-set! v0 10 1.0)) (lambda args args))))
	  (if (not (eq? (car var) 'out-of-range))
	      (snd-display ";vct-set! high index: ~A" var)))
	(let ((var (catch #t (lambda () (vct-set! v0 -1 1.0)) (lambda args args))))
	  (if (not (eq? (car var) 'out-of-range))
	      (snd-display ";vct-set! low index: ~A" var)))
	(let ((var (catch #t (lambda () (vct-move! v0 10 0 #t)) (lambda args args))))
	  (if (not (eq? (car var) 'out-of-range))
	      (snd-display ";vct-move! high index: ~A" var)))
	(let ((var (catch #t (lambda () (vct-move! v0 0 10 #t)) (lambda args args))))
	  (if (not (eq? (car var) 'out-of-range))
	      (snd-display ";vct-move! high 2 index: ~A" var)))
	(let ((var (catch #t (lambda () (vct-move! v0 -10 0 #f)) (lambda args args))))
	  (if (not (eq? (car var) 'out-of-range))
	      (snd-display ";vct-move! back high index: ~A" var)))
	(let ((var (catch #t (lambda () (vct-move! v0 0 -10 #f)) (lambda args args))))
	  (if (not (eq? (car var) 'out-of-range))
	      (snd-display ";vct-move! back high 2 index: ~A" var))))

      (do ((i 0 (1+ i)))
	  ((= i 10))
	(if (fneq (vct-ref v0 i) 1.0) (snd-display ";fill v0[~D] = ~F?" i (vct-ref v0 i)))
	(if (fneq (vct-ref v1 i) 0.5) (snd-display ";preset v1[~D] = ~F?" i (vct-ref v1 i))))
      (vct-add! v0 v1)
      (do ((i 0 (1+ i)))
	  ((= i 10))
	(if (fneq (vct-ref v0 i) 1.5) (snd-display ";add v0[~D] = ~F?" i (vct-ref v0 i))))
      (vct-subtract! v0 v1)
      (do ((i 0 (1+ i)))
	  ((= i 10))
	(if (fneq (vct-ref v0 i) 1.0) (snd-display ";subtract v0[~D] = ~F?" i (vct-ref v0 i))))
      (let ((v2 (vct-copy v0)))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (if (fneq (vct-ref v2 i) 1.0) (snd-display ";copy v0[~D] = ~F?" i (vct-ref v2 i))))
	(vct-scale! v2 5.0)
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (if (fneq (vct-ref v2 i) 5.0) (snd-display ";scale v2[~D] = ~F?" i (vct-ref v2 i))))
	(vct-offset! v0 -1.0)
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (if (fneq (vct-ref v0 i) 0.0) (snd-display ";offset v0[~D] = ~F?" i (vct-ref v0 i))))
	(vct-multiply! v2 v1)
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (if (fneq (vct-ref v2 i) 2.5) (snd-display ";multiply v2[~D] = ~F?" i (vct-ref v2 i))))
	(if (fneq (vct-peak v2) 2.5) (snd-display ";v2's peak is ~F?" (vct-peak v2)))
	(vct-set! v2 5 123.0)
	(if (fneq (vct-peak v2) 123.0) (snd-display ";v2's set peak is ~F?" (vct-peak v2)))
	(let ((vn (make-vct 32))
	      (vb (make-vct 64))
	      (vs (make-vct 3))
	      (vss (make-vct 1)))
	  (do ((i 0 (1+ i)))
	      ((= i 32))
	    (vct-set! vn i i))
	  (let ((vnew (vct-subseq vn 3)))
	    (if (fneq (vct-ref vnew 0) 3.0) (snd-display ";vct-subseq[3:] ~A?" (vct-ref vnew 0)))
	    (if (not (= (vct-length vnew) 29)) (snd-display ";vct-subseq[3:] length: ~A?" (vct-length vnew))))
	  (let ((vnew (vct-subseq vn 3 8)))
	    (if (fneq (vct-ref vnew 0) 3.0) (snd-display ";vct-subseq[3:8] ~A?" (vct-ref vnew 0)))
	    (if (not (= (vct-length vnew) 6)) (snd-display ";vct-subseq[3:8] length: ~A?" (vct-length vnew))))
	  (vct-subseq vn 3 3 vs)
	  (if (or (fneq (vct-ref vs 0) 3.0)
		  (fneq (vct-ref vs 1) 0.0)
		  (fneq (vct-ref vs 2) 0.0))
	      (snd-display ";vct-subseq[3:3->vs] ~A?" vs))
	  (vct-subseq vn 0 32 vs)
	  (if (not (= (vct-length vs) 3)) (snd-display ";vct-subseq[0:32->vs] length: ~A?" (vct-length vs)))
	  (vct-subseq vn 2 3 vss)
	  (if (fneq (vct-ref vss 0) 2.0) (snd-display ";vct-subseq[2:3->vss] ~A?" (vct-ref vss 0)))
	  (vct-set! vb 8 123.0)
	  (vct-subseq vn 1 8 vb)
	  (if (fneq (vct-ref vb 0) 1.0) (snd-display ";vct-subseq[1:8->vb] ~A?" (vct-ref vb 0)))
	  (if (fneq (vct-ref vb 8) 123.0) (snd-display ";vct-subseq[1:8->vb][8] ~A?" (vct-ref vb 8))))
	(vct-do! v0 (lambda (i) (* i .5)))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (if (fneq (vct-ref v0 i) (* i .5)) (snd-display ";do v0[~D] = ~F?" i (vct-ref v0 i))))
	(vct-map! v0 (lambda () 1.0))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (if (fneq (vct-ref v0 i) 1.0) (snd-display ";map v0[~D] = ~F?" i (vct-ref v0 i))))
	(vcts-do! v0 v1 v2 (lambda (num i) (list i 0.0 (* i 2))))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (if (fneq (vct-ref v0 i) i) (snd-display ";dos v0[~D] = ~F?" i (vct-ref v0 i)))
	  (if (fneq (vct-ref v1 i) 0.0) (snd-display ";dos v1[~D] = ~F?" i (vct-ref v1 i)))
	  (if (fneq (vct-ref v2 i) (* i 2)) (snd-display ";dos v2[~D] = ~F?" i (vct-ref v2 i))))
	(vcts-map! v0 v1 v2 (lambda (num) (list 0.0 1.0 2.0)))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (if (fneq (vct-ref v0 i) 0.0) (snd-display ";maps v0[~D] = ~F?" i (vct-ref v0 i)))
	  (if (fneq (vct-ref v1 i) 1.0) (snd-display ";maps v1[~D] = ~F?" i (vct-ref v1 i)))
	  (if (fneq (vct-ref v2 i) 2.0) (snd-display ";maps v2[~D] = ~F?" i (vct-ref v2 i))))
	(let ((fd (open-sound-file)))
	  (close-sound-file fd 0)
	  (let ((frs (mus-sound-frames (if (little-endian?) "test.wav" "test.snd"))))
	    (if (not (= frs 0))
		(snd-display ";open-sound-file defaults: ~A" frs))))
	(let ((fd (open-sound-file "hiho.snd" 1 22050 "hiho is from snd-test")))
	  (vct->sound-file fd v2 10)
	  (close-sound-file fd 10)
	  (let ((var (catch #t (lambda () (vct->sound-file -1 v2 1)) (lambda args args))))
	    (if (not (eq? (car var) 'out-of-range))
		(snd-display ";vct->sound-file bad fd: ~A" var)))
	  (let ((v3 (make-vct 40)))
	    (file->array "hiho.snd" 0 0 10 v3)
	    (if (fneq (vct-ref v3 5) (vct-ref v2 5))
		(snd-display ";vct->sound-file: ~A ~A?" v2 v3)))))
      (if (fneq ((vct 1.0 2.0 3.0) 1) 2.0)
	  (snd-display ";(vct...) = ~A?" ((vct 1.0 2.0 3.0) 1)))
      (let ((v1 (vct 1 2 3 4)))
	(if (fneq (v1 1) 2.0)
	    (snd-display ";(v1 1) = ~A?" (v1 1))))
      (let ((nind (open-sound "oboe.snd")))
	(set! (speed-control nind) .5)
	(play-and-wait)
	(apply-controls)
	(close-sound nind))
      (let ((v1 (make-vct 32)))
	(vct-map! v1
		  (lambda ()
		    (let ((v2 (make-vct 3)))
		      (vct-map! v2 (lambda () .1))
		      (vct-ref v2 0))))
	(if (fneq (vct-ref v1 12) .1) (snd-display ";vct-map! twice: ~A" (vct-ref v1 12))))
      (let ((hi (make-vct 3)))
	(let ((tag (catch #t
			  (lambda () (vct-subseq hi 1 0))
			  (lambda args (car args)))))
	  (if (not (eq? tag 'out-of-range))
	      (snd-display ";vct-subseq 1 0: ~A" tag)))
	(if (vct) (snd-display ";(vct) -> ~A" (vct)))
	(let ((tag (catch #t (lambda () (make-vct 0)) (lambda args (car args)))))
	  (if (not (eq? tag 'out-of-range)) (snd-display ";make-vct 0 -> ~A" tag)))
	(let ((ho (make-vct 3)))
	  (vct-add! hi ho 4)))
      ))
    ))


;;; ---------------- test 7: colors ----------------
(if (and (or full-test (= snd-test 7) (and keep-going (<= snd-test 7)))
	 (or (provided? 'snd-gtk)
	     (provided? 'snd-motif)))
    (letrec ((test-color
	      (lambda (lst)
		(if (not (null? lst))
		    (let* ((name (list-ref (car lst) 0))
			   (getfnc (list-ref (car lst) 1))
			   (setfnc (lambda (val) (set! (getfnc) val)))
			   (initval (list-ref (car lst) 2)))
		      (if (not (color? initval)) (snd-display ";~A not color?" initval))
		      ;; we'll get warnings here if the cell chosen didn't exactly match the one requested -- not a bug
		      ;; (if (not (equal? (getfnc) initval))
		      ;;	  (snd-display ";~A /= ~A (~A)?" name initval (getfnc)))
		      (setfnc beige)
		      (if (not (equal? (getfnc) beige))
			  (snd-display ";set-~A /= beige (~A)?" name (getfnc)))
		      (setfnc initval)
		      (test-color (cdr lst)))))))
      (if (procedure? test-hook) (test-hook 7))
      (let* ((c1 (catch 'no-such-color
			(lambda () (make-color 0 0 1))
			(lambda args #f)))
	     (c2 c1)
	     (c3 (catch 'no-such-color
			(lambda () (make-color 0 0 1))
			(lambda args #f))))
	(if (not (equal? c1 c2)) (snd-display ";color equal? ~A ~A?" c1 c2))
	(if (not (eq? c1 c2)) (snd-display ";color eq? ~A ~A?" c1 c2))
	(if (provided? 'snd-motif) (if (not (equal? c1 c3)) (snd-display ";diff color equal? ~A ~A?" c1 c3)))
	(if (eq? c1 c3) (snd-display ";diff color eq? ~A ~A?" c1 c3))
	(if (not (equal? (color->list c1) (list 0.0 0.0 1.0)))
	    (snd-display ";color->list: ~A ~A?" c1 (color->list c1))))
      (do ((i 0 (1+ i))) ((= i 16)) 
	(let ((val (colormap-ref i 0))
	      (true-val (list-ref (list '(0.0 0.0 0.0) '(1.0 0.0 0.0) '(0.00520332646677348 0.0 0.0) '(0.0 1.0 1.0)
					'(0.0 0.0 7.01915007248035e-4) '(0.0 0.0 0.0) '(0.0417029068436713 0.0 0.0)
					'(0.0 0.0 0.50780498970016) '(1.0 0.0 0.0) '(1.0 0.0 0.0) '(0.0 0.0 1.0)
					'(1.0 0.0 1.0) '(0.0 0.500007629510948 0.4) '(0.166704814221408 0.166704814221408 0.0)
					'(1.0 0.0 0.0) '(0.0 0.0 1.0))
				  i)))
	  (if (not (feql val true-val))
	      (snd-display ";colormap-ref ~A: ~A (~A)" i val true-val))))
      (let ((curmap (colormap)))
	(set! (colormap) 2)
	(let ((val0 (colormap-ref 0 32))
	      (val1 (colormap-ref 2 32)))
	  (if (equal? val1 val0) (snd-display ";colormap-ref 0 and 2: ~A ~A" val0 val1))
	  (if (not (feql val0 (list 0.0626077668421454 0.0626077668421454 0.0626077668421454)))
	      (snd-display ";colormap-ref 0 32: ~A" val0))
	  (if (not (feql val1 (list 0.171908140688182 0.0 0.0)))
	      (snd-display ";colormap-ref 2 32: ~A" val1))
	  (set! val0 (colormap-ref 0.5))
;	  (if (not (feql val0 (list 1.0 0.33330281528954 0.0)))
;	      (snd-display ";colormap-ref 0.5: ~A" val0))
	  (set! (colormap) curmap)))
      (catch 'no-such-color
	     (lambda () 
	       (load "rgb.scm")
	       (test-color
		(list
		 (list 'basic-color basic-color ivory2)
		 (list 'cursor-color cursor-color red)
		 (list 'data-color data-color black)
		 (list 'enved-waveform-color enved-waveform-color blue)
		 (list 'filter-waveform-color filter-waveform-color blue)
		 (list 'graph-color graph-color white)
		 (list 'highlight-color highlight-color ivory1)
		 (list 'listener-color listener-color alice-blue)
		 (list 'listener-text-color listener-text-color black)
		 (list 'mark-color mark-color red)
		 (list 'mix-color mix-color dark-gray)
		 (list 'selected-mix-color selected-mix-color light-green)
		 (list 'position-color position-color ivory3)
		 (list 'pushed-button-color pushed-button-color lightsteelblue1)
		 (list 'sash-color sash-color light-green)
		 (list 'selected-data-color selected-data-color black)
		 (list 'selected-graph-color selected-graph-color white)
		 (list 'selection-color selection-color lightsteelblue1)
		 (list 'text-focus-color text-focus-color white)
		 (list 'zoom-color zoom-color ivory4)))
	       (let ((ind (open-sound "oboe.snd")))
		 (recolor-widget (cadr (sound-widgets ind)) (make-color 1 0 0))
		 (set! (selected-data-color) light-green)
		 (set! (data-color) blue)
		 (set! (selected-graph-color) black)
		 (let ((red (make-color 1.0 0.0 0.0)))
		   (set! (foreground-color ind 0 cursor-context) red)
		   (let ((col (foreground-color ind 0 cursor-context)))
		     (if (not (equal? col red))
			 (snd-display ";set foreground cursor color: ~A ~A" col red)))
		   (set! (foreground-color) blue)
		   (let ((col (foreground-color)))
		     (if (not (equal? col blue))
			 (snd-display ";set foreground-color: ~A ~A" col black)))
		   (set! (foreground-color ind) black)
		   (let ((col (foreground-color ind)))
		     (if (not (equal? col black))
			 (snd-display ";set foreground-color with ind: ~A ~A" col black))))
		 (close-sound ind)))
	     (lambda args args))
      ))


(reset-hook! graph-hook)
(load "mix.scm")
(clear-sincs)

;;; ---------------- test 8: clm ----------------

(define (jc-reverb decay-dur low-pass volume amp-env)
  "(jc-reverb decay-dur low-pass volume amp-env) is the old Chowning reverberator: (jc-reverb 2.0 #f .1 #f)"
  (let* ((allpass1 (make-all-pass -0.700 0.700 1051))
	 (allpass2 (make-all-pass -0.700 0.700  337))
	 (allpass3 (make-all-pass -0.700 0.700  113))
	 (comb1 (make-comb 0.742 4799))
	 (comb2 (make-comb 0.733 4999))
	 (comb3 (make-comb 0.715 5399))
	 (comb4 (make-comb 0.697 5801))
	 (outdel1 (make-delay (round (* .013 (srate)))))
	 (dur (+ decay-dur (/ (frames) (srate))))
	 (envA (if amp-env (make-env :envelope amp-env :scaler volume :duration dur) #f))
	 (len (round (* dur (srate)))))
    (map-chan
     (let ((comb-sum 0.0)
	   (comb-sum-1 0.0)
	   (comb-sum-2 0.0)
	   (all-sums 0.0)
	   (delA 0.0)
	   (delB 0.0))
       (lambda (inval)
	 (let ((allpass-sum (all-pass allpass3 (all-pass allpass2 (all-pass allpass1 inval)))))
	   (set! comb-sum-2 comb-sum-1)
	   (set! comb-sum-1 comb-sum)
	   (set! comb-sum 
		 (+ (comb comb1 allpass-sum)
		    (comb comb2 allpass-sum)
		    (comb comb3 allpass-sum)
		    (comb comb4 allpass-sum)))
	   (if low-pass
	       (set! all-sums (+ (* .25 (+ comb-sum comb-sum-2)) (* .5 comb-sum-1)))
	       (set! all-sums comb-sum))
	   (+ inval
	      (if envA
		  (* (env envA) (delay outdel1 all-sums))
		  (* volume (delay outdel1 all-sums)))))))
       0 (round (* dur (srate))))))

;;; -------- scissor-tailed flycatcher
;;;
;;; mix a scissor-tailed flycatcher call into the current sound
;;; see bird.scm for lots more birds

(define (bigbird start dur frequency freqskew amplitude
		 freq-envelope amp-envelope partials
		 lpcoeff)
  (define sum-partials
    (lambda (lst sum)
      (if (null? lst)
	  sum
	  (sum-partials (cddr lst) (+ sum (cadr lst))))))
  
  (define scale-partials
    (lambda (lst scl newlst)
      (if (null? lst)
	  newlst
	  (scale-partials (cddr lst) scl (append newlst (list (car lst) (* scl (cadr lst))))))))
  
  (define normalize-partials
    (lambda (lst)
      (scale-partials lst (/ 1.0 (sum-partials lst 0.0)) '())))
  
  (let* ((gls-env (make-env freq-envelope (hz->radians freqskew) dur))
	 (os (make-oscil :frequency frequency))
	 (fil (make-one-pole lpcoeff (- 1.0 lpcoeff)))
	 (coeffs (partials->polynomial (normalize-partials partials)))
	 (amp-env (make-env amp-envelope amplitude dur))
	 (len (round (* (srate) dur)))
	 (beg (round (* (srate) start)))
	 (sf (make-sample-reader beg))
	 (out-data (make-vct len)))
    (vct-map! out-data
	      (lambda ()
		(+ (next-sample sf)
		   (one-pole fil (* (env amp-env)
				    (polynomial coeffs
						(oscil os (env gls-env))))))))
    (free-sample-reader sf)
    (vct->samples beg len out-data)))

(define (scissor begin-time)
  "(scissor beg) is the scissor-tailed flycatcher"
  (let ((scissorf '(0 0  40 1  60 1  100 0)))
    (bigbird begin-time 0.05 1800 1800 .2 
	     scissorf 
	     '(0 0  25 1  75 1  100 0) 
	     '(1 .5  2 1  3 .5  4 .1  5 .01)
	     1.0)))


;;; -------- fm-violin
;;;
;;; here we're using the keyword stuff in guile/ice-9/optargs.scm
;;; CLM version is v.ins, C version is in sndlib.html
;;; a version treating the entire violin as a generator is in fmv.scm.

(define pi 3.141592653589793)

(define fm-violin 
  (lambda* (startime dur frequency amplitude #:key
	    (fm-index 1.0)
	    (amp-env '(0 0  25 1  75 1  100 0))
	    (periodic-vibrato-rate 5.0) 
	    (random-vibrato-rate 16.0)
	    (periodic-vibrato-amplitude 0.0025) 
	    (random-vibrato-amplitude 0.005)
	    (noise-amount 0.0) 
	    (noise-freq 1000.0)
	    (ind-noise-freq 10.0) 
	    (ind-noise-amount 0.0)
	    (amp-noise-freq 20.0) 
	    (amp-noise-amount 0.0)
	    (gliss-env '(0 0  100 0)) 
	    (glissando-amount 0.0) 
	    (fm1-env '(0 1  25 .4  75 .6  100 0))  
	    (fm2-env '(0 1  25 .4  75 .6  100 0)) 
	    (fm3-env '(0 1  25 .4  75 .6  100 0))
	    (fm1-rat 1.0) 
	    (fm2-rat 3.0)	 
	    (fm3-rat 4.0)                    
	    (fm1-index #f) 
	    (fm2-index #f) 
	    (fm3-index #f)
	    (base 1.0)
	    (reverb-amount 0.01)
	    (degree #f) (distance 1.0) (degrees #f)
	    #:allow-other-keys)
    (let* ((beg (floor (* startime (srate))))
	   (len (floor (* dur (srate))))
	   (end (+ beg len))
	   (frq-scl (hz->radians frequency))
	   (modulate (not (zero? fm-index)))
	   (maxdev (* frq-scl fm-index))
	   (logfreq (log frequency))
	   (sqrtfreq (sqrt frequency))
	   (index1 (or fm1-index (min pi (* maxdev (/ 5.0 logfreq)))))
	   (index2 (or fm2-index (min pi (* maxdev 3.0 (/ (- 8.5 logfreq) (+ 3.0 (* frequency .001)))))))
	   (index3 (or fm3-index (min pi (* maxdev (/ 4.0 sqrtfreq)))))
	   (easy-case (and (zero? noise-amount)
			   (equal? fm1-env fm2-env)
			   (equal? fm1-env fm3-env)
			   (= fm1-rat (floor fm1-rat))
			   (= fm2-rat (floor fm2-rat))
			   (= fm3-rat (floor fm3-rat))))
	   (coeffs (and easy-case modulate
			(partials->polynomial
			 (list fm1-rat index1
			       (floor (/ fm2-rat fm1-rat)) index2
			       (floor (/ fm3-rat fm1-rat)) index3))))
	   (norm (or (and easy-case modulate 1.0) index1))
	   (carrier (make-oscil frequency))
	   (fmosc1  (and modulate (make-oscil (* fm1-rat frequency))))
	   (fmosc2  (and modulate (or easy-case (make-oscil (* fm2-rat frequency)))))
	   (fmosc3  (and modulate (or easy-case (make-oscil (* fm3-rat frequency)))))
	   (ampf  (make-env amp-env :scaler amplitude :base base :duration dur))
	   (indf1 (and modulate (make-env fm1-env norm :duration dur)))
	   (indf2 (and modulate (or easy-case (make-env fm2-env index2 :duration dur))))
	   (indf3 (and modulate (or easy-case (make-env fm3-env index3 :duration dur))))
	   (frqf (make-env gliss-env (* glissando-amount frq-scl) :duration dur))
	   (pervib (make-triangle-wave periodic-vibrato-rate (* periodic-vibrato-amplitude frq-scl)))
	   (ranvib (make-rand-interp random-vibrato-rate (* random-vibrato-amplitude frq-scl)))
	   (fm-noi (and (not (= 0.0 noise-amount))
			(make-rand noise-freq (* pi noise-amount))))
	   (ind-noi (and (not (= 0.0 ind-noise-amount)) 
			 (not (= 0.0 ind-noise-freq))
			 (make-rand-interp ind-noise-freq ind-noise-amount)))
	   (amp-noi (and (not (= 0.0 amp-noise-amount)) 
			 (not (= 0.0 amp-noise-freq))
			 (make-rand-interp amp-noise-freq amp-noise-amount)))
	   (vib 0.0) 
	   (modulation 0.0)
	   (loc (make-locsig :channels (channels) :degree (or degree degrees (random 90.0)) :reverb reverb-amount :distance distance))
	   (fuzz 0.0)
	   (ind-fuzz 1.0)
	   (amp-fuzz 1.0)
	   (out-data (make-vct len)))
      (vct-map! out-data
		(lambda ()
		  (if (not (= 0.0 noise-amount))
		      (set! fuzz (rand fm-noi)))
		  (set! vib (+ (env frqf) (triangle-wave pervib) (rand-interp ranvib)))
		  (if ind-noi (set! ind-fuzz (+ 1.0 (rand-interp ind-noi))))
		  (if amp-noi (set! amp-fuzz (+ 1.0 (rand-interp amp-noi))))
		  (if modulate
		      (if easy-case
			  (set! modulation
				(* (env indf1) 
				   (polynomial coeffs (oscil fmosc1 vib)))) ;(* vib fm1-rat)??
			  (set! modulation
				(+ (* (env indf1) (oscil fmosc1 (+ (* fm1-rat vib) fuzz)))
				   (* (env indf2) (oscil fmosc2 (+ (* fm2-rat vib) fuzz)))
				   (* (env indf3) (oscil fmosc3 (+ (* fm3-rat vib) fuzz)))))))
		  (* (env ampf) amp-fuzz
		     (oscil carrier (+ vib (* ind-fuzz modulation))))))
      (if (= (channels) 2)
	  (let ((bsamps (vct-copy out-data)))
	    (mix-vct (vct-scale! bsamps (locsig-ref loc 1)) beg #f 1 #f)
	    (mix-vct (vct-scale! out-data (locsig-ref loc 0)) beg #f 0 #f))
	  (mix-vct out-data beg #f 0 #f)))))

; (fm-violin 0 1 440 .1 :fm-index 2.0)
(define (fltit)
  "(fltit) returns a time-varying filter: (map-chan (fltit))"
  (let* ((coeffs (list .1 .2 .3 .4 .4 .3 .2 .1))
	 (flt (make-fir-filter 8 (list->vct coeffs)))
	 (es (make-vector 8)))
    (do ((i 0 (1+ i)))
	((= i 8))
      (vector-set! es i (make-env (list 0 (list-ref coeffs i) 1 0) :end 100)))
    (vector-set! es 5 (make-env '(0 .4 1 1) :duration 1.0))
    (lambda (x)
      (let ((val (fir-filter flt x))
	    (xcof (mus-xcoeffs flt)))
	(do ((i 0 (1+ i)))
	    ((= i 8))
	  (vct-set! xcof i (env (vector-ref es i))))
	val))))

(define (print-and-check gen name desc insp)
  (if (not (string=? (mus-name gen) name))
      (snd-display ";mus-name ~A: ~A?" name (mus-name gen)))
  (if (not (string=? (mus-describe gen) desc))
      (snd-display ";mus-describe ~A: ~A?" (mus-name gen) (mus-describe gen)))
  (if (not (string=? (mus-inspect gen) insp))
      (snd-display ";mus-inspect ~A: ~A?" (mus-name gen) (mus-inspect gen)))
  (let ((egen gen))
    (if (not (equal? egen gen))
	(snd-display ";equal? ~A: ~A?" gen egen))))

(define (test-gen-equal g0 g1 g2)
  ;; g0 = g1 at start != g2
  (let ((g3 g0)
	(gad (make-frame 2)))
    (if (not (eq? g0 g3))
	(snd-display ";let ~A eq? ~A ~A" (mus-name g0) g0 g3))
    (if (eq? g0 g1)
	(snd-display ";arg ~A eq? ~A ~A" (mus-name g0) g0 g1))
    (if (not (equal? g0 g1))
	(snd-display ";~A equal? ~A ~A" (mus-name g0) g0 g1))
    (if (equal? g0 g2)
	(snd-display ";~A not equal? ~A ~A" (mus-name g0) g0 g2))
    (if (equal? g0 gad)
	(snd-display ";~A equal frame? ~A ~A" (mus-name g0) g0 gad))
    (g0)
    (g3)
    (g3)
    (if (not (eq? g0 g3))
	(snd-display ";run let ~A eq? ~A ~A" (mus-name g0) g0 g3))
    (if (eq? g0 g1)
	(snd-display ";arg ~A eq? ~A ~A" (mus-name g0) g0 g1))
    (if (equal? g0 g1)
	(snd-display ";run ~A equal? ~A ~A" (mus-name g0) g0 g1))
    (if (equal? g0 g2)
	(snd-display ";run ~A not equal? ~A ~A" (mus-name g0) g0 g2))))
    
(define (fm-test gen)
  (set! (mus-frequency gen) 0.0)
  (set! (mus-phase gen) 0.0)
  (gen 0.0)
  (if (fneq (mus-phase gen) 0.0) (snd-display ";~A phase(0): ~A" gen (mus-phase gen)))
  (gen 1.0)
  (if (fneq (mus-phase gen) 1.0) (snd-display ";~A phase(1): ~A" gen (mus-phase gen)))
  (gen 0.0)
  (if (fneq (mus-phase gen) 1.0) (snd-display ";~A phase(1, 0): ~A" gen (mus-phase gen)))
  (set! (mus-frequency gen) (radians->hz 2.0))
  (gen 0.0)
  (if (fneq (mus-phase gen) 3.0) (snd-display ";~A phase(1, 2): ~A ~A" gen (mus-phase gen) (mus-frequency gen)))
  (gen 1.0)
  (if (fneq (mus-phase gen) 6.0) (snd-display ";~A phase(3, 2, 1): ~A ~A" gen (mus-phase gen) (mus-frequency gen)))
  (do ((i 0 (1+ i))) ((= i 10)) (gen 10.0))
  (if (fneq (mus-phase gen) (+ 26 (- 100 (* 2 3.14159 20)))) (snd-display ";~A phase (over): ~A ~A" gen (mus-phase gen) (mus-frequency gen))))

(if (or full-test (= snd-test 8) (and keep-going (<= snd-test 8)))
    (do ((clmtest 0 (1+ clmtest))) ((= clmtest tests))
      (if (procedure? test-hook) (test-hook 8))
      (log-mem clmtest)
      (if (> tests 1) (snd-display ";clm test ~D " clmtest))
      (set! (mus-srate) 22050)
      (if (not (= (mus-file-buffer-size) 8192)) (snd-display ";mus-file-buffer-size: ~D?" (mus-file-buffer-size)))
      (let ((var (catch #t (lambda () (set! (mus-file-buffer-size) #f)) (lambda args args))))
	(if (not (eq? (car var) 'wrong-type-arg))
	    (snd-display ";mus-file-buffer-size bad size: ~A" var)))
      (set! (mus-file-buffer-size) 128)
      (if (not (= (mus-file-buffer-size) 128)) (snd-display ";mus-file-buffer-size: ~D?" (mus-file-buffer-size)))
      (set! (mus-file-buffer-size) 8192)

      (if (not (= (mus-array-print-length) 8)) (snd-display ";mus-array-print-length: ~D?" (mus-array-print-length)))
      (set! (mus-array-print-length) 32)
      (if (not (= (mus-array-print-length) 32)) (snd-display ";set mus-array-print-length: ~D?" (mus-array-print-length)))
      (set! (mus-array-print-length) 8)
      (if (fneq (mus-srate) 22050.0) (snd-display ";mus-srate: ~F?" (mus-srate)))
      (if (fneq (hz->radians 1.0) 2.84951704088598e-4) (snd-display ";hz->radians: ~F?" (hz->radians 1.0)))
      (if (fneq (radians->hz 2.84951704088598e-4) 1.0) (snd-display ";radians->hz: ~F?" (radians->hz 2.84951704088598e-4)))
      (if (fneq (radians->degrees 1.0) 57.2957801818848) (snd-display ";radians->degrees: ~F?" (radians->degrees 1.0)))
      (if (fneq (degrees->radians 57.2957801818848) 1.0) (snd-display ";degrees->radians: ~F?" (degrees->radians 57.2957801818848)))
      (if (fneq (linear->db .25) -12.0411996841431) (snd-display ";linear->db: ~F?" (linear->db .25)))
      (if (fneq (db->linear -12.0411996841431) .25) (snd-display ";db->linear: ~F?" (db->linear -12.0411996841431)))
      (if (fneq (hz->radians 1.0) (in-hz 1.0)) (snd-display ";in-hz: ~F? " (in-hz 1.0)))
      (if (fneq (ring-modulate .4 .5) .2) (snd-display ";ring-modulate: ~F?" (ring-modulate .4 .5)))
      (if (fneq (amplitude-modulate 1.0 .5 .4) .7) (snd-display ";amplitude-modulate: ~F?" (amplitude-modulate 1.0 .5 .4)))
      (if (fneq (contrast-enhancement 0.1 0.75) (sin (+ (* 0.1 (/ pi 2)) (* .75 (sin (* 0.1 2.0 pi))))))
	  (snd-display ";contrast-enhancement: ~F (0.562925306221587)" (contrast-enhancement 0.1 0.75)))
      (let ((v0 (partials->polynomial '(1 1 2 1) 1))
	    (v1 (partials->polynomial '(1 1 2 1) 0))
	    (v2 (partials->polynomial '(1 1 2 1 3 1 5 1) 1))
	    (v3 (partials->polynomial '(1 1 2 1 3 1 5 1) 0))
	    (v4 (partials->polynomial '(1 1 2 .5 3 .1 6 .01) 1))
	    (v5 (partials->polynomial '(1 1 2 .5 3 .1 6 .01) 0)))
	(if (not (fveql v0 '(-1.000 1.000 2.000) 0)) (snd-display ";partials->polynomial(1): ~A?" v0))
	(if (not (fveql v1 '(1.000 2.000 0.0) 0)) (snd-display ";partials->polynomial(2): ~A?" v1))
	(if (not (fveql v2 '(-1.000 3.000 2.000 -16.000 0.000 16.000) 0)) (snd-display ";partials->polynomial(3): ~A?" v2))
	(if (not (fveql v3 '(1.000 2.000 -8.000 0.000 16.000 0.000) 0)) (snd-display ";partials->polynomial(4): ~A?" v3))
	(if (not (fveql v4 '(-0.510 0.700 1.180 0.400 -0.480 0.000 0.320) 0)) (snd-display ";partials->polynomial(5): ~A?" v4))
	(if (not (fveql v5 '(0.900 1.060 0.400 -0.320 0.000 0.320 0.000) 0)) (snd-display ";partials->polynomial(6): ~A?" v5)))

      (let* ((amps (list->vct '(1.0)))
	     (phases (list->vct '(0.0)))
	     (val (sum-of-sines amps phases)))
	(if (fneq val 0.0) (snd-display ";sum-of-sines: ~A 0.0?" val))
	(vct-set! phases 0 (/ pi 2))
	(set! val (sum-of-sines amps phases))
	(if (fneq val 1.0) (snd-display ";sum-of-sines: ~A 1.0?" val))
	(set! amps (list->vct '(0.5 0.25 1.0)))
	(set! phases (list->vct '(1.0 0.5 2.0)))
	(set! val (sum-of-sines amps phases))
	(if (fneq val 1.44989) (snd-display ";sum-of-sines: ~A 1.449?" val)))

      (let ((rdat (make-vct 16))
	    (idat (make-vct 16))
	    (vdat (make-vct 16)))
	(vct-set! rdat 0 1.0)
	(vct-set! vdat 0 1.0)
	(let ((v0 (spectrum rdat idat (make-fft-window rectangular-window 16) 16 1)) ;rectangular here to avoid clobbering 0-th data point
	      (v1 (snd-spectrum vdat rectangular-window 16 #t)))
	  (do ((i 0 (1+ i)))
	      ((= i 8)) ;should all be 1.0 (impulse in)
	    (if (fneq (vct-ref v0 i) (vct-ref v1 i))
		(snd-display ";spectra not equal: ~A ~A" v0 v1))))
	(let ((v0 (spectrum rdat idat (make-fft-window rectangular-window 17) 17 1)) ;rectangular here to avoid clobbering 0-th data point
	      (v1 (snd-spectrum vdat rectangular-window 16 #t)))
	  (do ((i 0 (1+ i)))
	      ((= i 8)) ;should all be 1.0 (impulse in)
	    (if (fneq (vct-ref v0 i) (vct-ref v1 i))
		(snd-display ";spectra not equal: ~A ~A" v0 v1))))
	(let ((var (catch #t (lambda () (spectrum rdat idat #f -1)) (lambda args args))))
	  (if (not (eq? (car var) 'out-of-range))
	      (snd-display ";spectrum bad len: ~A" var))))

      (let ((rdat (make-vct 16))
	    (idat (make-vct 16))
	    (xdat (make-vct 16))
	    (ydat (make-vct 16))
	    (rvec (make-vector 16 0.0))
	    (ivec (make-vector 16 0.0)))
	(vct-set! rdat 0 1.0)
	(vct-set! idat 1 1.0)
	(vct-set! xdat 0 1.0)
	(vct-set! ydat 1 1.0)
	(vector-set! rvec 0 1.0)
	(vector-set! ivec 1 1.0)
	(let ((v0 (convolution rdat idat 8))
	      (vt (vct-convolve! rvec ivec)) ; oops... (should vectors be supported at all?)
	      (v1 (vct-convolve! xdat ydat)))
	  (if (not (vector? vt)) (snd-display ";convolve with vector returns: ~A" vt))
	  (if (or (fneq (vct-ref v0 0) 0.0) (fneq (vct-ref v0 1) 1.0)) (snd-display ";vct convolution: ~A?" v0))
	  (if (or (fneq (vector-ref vt 0) 0.0) (fneq (vector-ref vt 1) 1.0)) (snd-display ";vector convolution: ~A?" v0))
	  (if (or (fneq (vct-ref v1 0) 0.0) (fneq (vct-ref v1 1) 1.0)) (snd-display ";vct-convolve!: ~A?" v1))
	  (do ((i 0 (1+ i)))
	      ((= i 8)) 
	    (if (or (fneq (vct-ref v0 i) (vct-ref v1 i))
		    (fneq (vct-ref v0 i) (vector-ref vt i)))
		(snd-display ";convolutions not equal: ~A ~A ~A" v0 v1 vt))))
	(let ((var (catch #t (lambda () (convolution rdat idat -1)) (lambda args args))))
	  (if (not (eq? (car var) 'out-of-range))
	      (snd-display ";convolution bad len: ~A" var)))
	(convolution rdat idat 20)
	(set! idat (make-vct 8))
	(convolution rdat idat 20))

      (let ((rdat (make-vct 16))
	    (idat (make-vct 16))
	    (xdat (make-vct 16))
	    (ydat (make-vct 16)))
	(vct-set! rdat 3 1.0)
	(vct-set! xdat 3 1.0)
	(fft rdat idat 1)
	(mus-fft xdat ydat 16 1)
	(if (fneq (vct-ref rdat 0) (vct-ref xdat 0)) (snd-display ";ffts: ~A ~A?" rdat xdat))
	(fft rdat idat -1)
	(mus-fft xdat ydat 17 -1) ; mistake is deliberate
	(do ((i 0 (1+ i)))
	    ((= i 16))
	  (if (or (and (= i 3) (or (fneq (vct-ref rdat i) 16.0) (fneq (vct-ref xdat i) 16.0)))
		  (and (not (= i 3)) (or (fneq (vct-ref rdat i) 0.0) (fneq (vct-ref xdat i) 0.0))))
	      (snd-display ";fft real[~D]: ~A ~A?" i (vct-ref rdat i) (vct-ref xdat i)))
	  (if (or (fneq (vct-ref idat i) 0.0) (fneq (vct-ref ydat i) 0.0))
	      (snd-display ";fft imag[~D]: ~A ~A?" i (vct-ref idat i) (vct-ref ydat i))))
	(let ((var (catch #t (lambda () (mus-fft xdat ydat -1 0)) (lambda args args))))
	  (if (not (eq? (car var) 'out-of-range))
	      (snd-display ";mus-fft bad len: ~A" var))))

      (let ((rdat (make-vct 20))
	    (idat (make-vct 19)))
	(vct-set! rdat 3 1.0)
	(mus-fft rdat idat)
	(convolution rdat idat)
	(spectrum rdat idat #f))

      (let ((rdat (make-vector 16))
	    (idat (make-vector 16)))
	(do ((i 0 (1+ i)))
	    ((= i 16))
	  (vector-set! rdat i 0.0)
	  (vector-set! idat i 0.0))
	(vector-set! rdat 3 1.0)
	(fft rdat idat 1)
	(fft rdat idat -1)
	(if (or (fneq (vector-ref rdat 3) 16.0)
		(fneq (vector-ref rdat 4) 0.0))
	    (snd-display ";vector fft real[3 or 4]: ~A ~A?" (vector-ref rdat 3) (vector-ref rdat 4))))

      (let ((v0 (make-vct 10))
	    (v1 (make-vct 10)))
	(vct-fill! v0 1.0)
	(multiply-arrays v0 v1 1)
	(if (not (vequal v0 (vct 0.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0)))
	    (snd-display ";multiply-arrays[0]: ~A?" v0))
	(multiply-arrays v0 v1 100)
	(if (fneq (vct-peak v0) 0.0)
	    (snd-display ";multiply-arrays[100]: ~A?" v0))
	(vct-fill! v0 1.0)
	(vct-fill! v1 0.5)
	(multiply-arrays v0 v1)
	(if (fneq (vct-ref v0 0) 0.5) (snd-display ";multiple-arrays: ~F?" (vct-ref v0 0)))
	(let ((sum (dot-product v0 v1)))
	  (if (fneq sum 2.5) (snd-display ";dot-product: ~F?" sum)))
	(clear-array v0)
	(if (fneq (vct-ref v0 3) 0.0) (snd-display ";clear-array: ~A?" v0))
	(vct-fill! v0 1.0)
	(vct-fill! v1 0.5)
	(let ((v2 (rectangular->polar v0 v1)))
	  (if (fneq (vct-ref v2 0) 1.118) (snd-display ";rectangular->polar: ~A?" v2)))
	(vct-set! v0 0 1.0)
	(vct-set! v1 0 1.0)
	(rectangular->polar v0 v1)
	(if (or (fneq (vct-ref v0 0) (sqrt 2.0))
		(fneq (vct-ref v1 0) (- (atan 1.0 1.0)))) ;(tan (atan 1.0 1.0)) -> 1.0 
	    (snd-display ";rectangular->polar (~A ~A): ~A ~A?" (sqrt 2.0) (- (atan 1.0 1.0)) (vct-ref v0 0) (vct-ref v1 0)))
	(polar->rectangular v0 v1)
	(if (or (fneq (vct-ref v0 0) 1.0)
		(fneq (vct-ref v1 0) 1.0))
	    (snd-display ";polar->rectangular (1 1): ~A ~A?" (vct-ref v0 0) (vct-ref v1 0)))

      (let ((v0 (make-vct 1))
	    (v1 (make-vct 1))
	    (v (make-vct 1))
	    (val .123))
	(vct-set! v0 0 1.0)
	(vct-set! v1 0 1.0)
	(vct-map! v (lambda ()
		      (rectangular->polar v0 v1)
		      (set! val (vct-ref v0 0))
		      (polar->rectangular v0 v1)
		      (vct-ref v1 0)))
	(if (fneq (vct-ref v 0) 1.0) (snd-display ";run r->p not inverted: ~A" v))
	(if (fneq val (sqrt 2.0)) (snd-display ";r->p: ~A" val)))

      (let* ((ind (open-sound "oboe.snd"))
	     (rl (samples->vct 1200 512))
	     (im (make-vct 512)))
	(fft rl im 512)
	(let ((rl-copy (vct-copy rl))
	      (im-copy (vct-copy im)))
	  (rectangular->polar rl im)
	  (polar->rectangular rl im)
	  (do ((i 0 (1+ i)))
	      ((= i 512))
	    (if (or (fneq (vct-ref rl i) (vct-ref rl-copy i))
		    (fneq (vct-ref im i) (vct-ref im-copy i)))
		(snd-display ";polar->rectangular[~D]: ~A ~A ~A ~A" 
			     i 
			     (vct-ref rl i) (vct-ref rl-copy i)
			     (vct-ref im i) (vct-ref im-copy i)))))
	  (close-sound ind)))

      (let ((v0 (make-vct 3)))
	(vct-set! v0 0 1.0)
	(vct-set! v0 1 0.5)
	(vct-set! v0 2 0.1)
	(if (or (fneq (polynomial v0 0.0) 1.0)
		(fneq (polynomial v0 1.0) 1.6)
		(fneq (polynomial v0 2.0) 2.4))
	    (snd-display ";polynomial: ~A ~A ~A?"
				 (polynomial v0 0.0)
				 (polynomial v0 1.0)
				 (polynomial v0 2.0))))

      (let ((v0 (make-vct 10)))
	(do ((i 0 (1+ i))) ((= i 10))
	  (vct-set! v0 i i))
	(if (fneq (array-interp v0 3.5) 3.5) (snd-display ";array-interp: ~F?" (array-interp v0 3.5)))
	(if (fneq (array-interp v0 13.5) 3.5) (snd-display ";array-interp(13.5): ~F?" (array-interp v0 13.5)))
	(if (fneq (array-interp v0 -6.5) 3.5) (snd-display ";array-interp(-6.5): ~F?" (array-interp v0 -6.5)))
	(if (fneq (array-interp v0 103.6) 3.6) (snd-display ";array-interp(103.5): ~F?" (array-interp v0 103.6)))
	(if (fneq (array-interp v0 -106.6) 3.4) (snd-display ";array-interp(-106.6): ~F?" (array-interp v0 -106.6)))
	(if (fneq (array-interp v0 -0.5) 4.5) (snd-display ";array-interp(-0.5): ~F?" (array-interp v0 -0.5)))
	;; interpolating between 9 and 0 here (confusing...)
	(if (fneq (array-interp v0 -0.9) 8.1) (snd-display ";array-interp(-0.9): ~F?" (array-interp v0 -0.9)))
	(if (fneq (array-interp v0 -0.1) 0.9) (snd-display ";array-interp(-0.1): ~F?" (array-interp v0 -0.1)))
	(if (fneq (array-interp v0 9.1) 8.1) (snd-display ";array-interp(9.1): ~F?" (array-interp v0 9.1)))
	(if (fneq (array-interp v0 9.9) 0.9) (snd-display ";array-interp(9.9): ~F?" (array-interp v0 9.9)))
	(if (fneq (array-interp v0 10.1) 0.1) (snd-display ";array-interp(10.1): ~F?" (array-interp v0 10.1)))
	(let ((var (catch #t (lambda () (array-interp v0 1 -10)) (lambda args args))))
	  (if (not (eq? (car var) 'out-of-range))
	      (snd-display ";array-interp bad index: ~A" var))))

      (let ((gen (make-delay 3))
	    (gen2 (make-delay 3))
	    (gen1 (make-delay 4 :initial-contents '(1.0 0.5 0.25 0.0)))
	    (gen3 (make-delay 4 :initial-contents (vct 1.0 0.5 0.25 0.0)))
	    (v0 (make-vct 10))
	    (v1 (make-vct 10)))
	(print-and-check gen 
			 "delay" 
			 "delay: line[3]: [0.000 0.000 0.000]"
			 "dly line[3,3 at 0,0 (external)]: [0.000 0.000 0.000], xscl: 0.000000, yscl: 0.000000")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (delay gen i)))
	(vct-map! v1 (let ((i 0)) (lambda () (let ((val (if (delay? gen2) (delay gen2 i) -1.0))) (set! i (1+ i)) val))))
	(if (not (vequal v1 v0)) (snd-display ";map delay: ~A ~A" v0 v1))
	(if (not (delay? gen)) (snd-display ";~A not delay?" gen))
	(if (not (= (mus-length gen) 3)) (snd-display ";delay length: ~D?" (mus-length gen)))
	(if (or (fneq (vct-ref v0 1) 0.0) (fneq (vct-ref v0 4) 1.0) (fneq (vct-ref v0 8) 5.0))
	    (snd-display ";delay output: ~A" v0))
	(if (or (fneq (delay gen1) 1.0) 
		(fneq (delay gen1) 0.5)
		(fneq (delay gen1) 0.25)
		(fneq (delay gen1) 0.0)
		(fneq (delay gen1) 0.0))
	    (snd-display ";delay with list initial-contents confused"))
	(if (or (fneq (delay gen3) 1.0) 
		(fneq (delay gen3) 0.5)
		(fneq (delay gen3) 0.25)
		(fneq (delay gen3) 0.0)
		(fneq (delay gen3) 0.0))
	    (snd-display ";delay with vct initial-contents confused"))
	(let ((var (catch #t (lambda () (make-delay :size #f)) (lambda args args))))
	  (if (not (eq? (car var) 'wrong-type-arg))
	      (snd-display ";make-delay bad size #f: ~A" var)))
	(let ((var (catch #t (lambda () (make-delay 3 :initial-element (make-oscil))) (lambda args args))))
	  (if (not (eq? (car var) 'wrong-type-arg))
	      (snd-display ";make-delay bad initial element: ~A" var)))
	(let ((var (catch #t (lambda () (make-delay -3)) (lambda args args))))
	  (if (not (eq? (car var) 'out-of-range))
	      (snd-display ";make-delay bad size: ~A" var))))

      (test-gen-equal (let ((d1 (make-delay 3))) (delay d1 1.0) d1) 
		      (let ((d2 (make-delay 3))) (delay d2 1.0) d2)
		      (let ((d3 (make-delay 4))) (delay d3 1.0) d3))
      (test-gen-equal (make-delay 3 :initial-element 1.0) (make-delay 3 :initial-element 1.0) (make-delay 3 :initial-element 0.5))
      (test-gen-equal (make-delay 3 :initial-contents '(1.0 0.0 0.0)) 
		      (make-delay 3 :initial-contents '(1.0 0.0 0.0)) 
		      (make-delay 3 :initial-contents '(1.0 1.0 1.0)))

      (let ((gen (make-delay 5)))
	(delay gen 1.0)
	(delay gen 0.0)
	(delay gen 0.5)
	(let ((data (vct-copy (mus-data gen))))
	  (vct-set! (mus-data gen) 0 0.3)
	  (if (fneq (vct-ref (mus-data gen) 0) 0.3)
	      (snd-display ";delay data 0: ~A" (vct-ref (mus-data gen) 0)))
	  (vct-set! data 0 .75)
	  (set! (mus-data gen) data)
	  (if (fneq (vct-ref (mus-data gen) 0) 0.75)
	      (snd-display ";delay set data 0: ~A" (vct-ref (mus-data gen) 0)))
	  (delay gen 0.0)
	  (delay gen 0.0)
	  (let ((val (delay gen 0.0)))
	    (if (fneq val 0.75)
		(snd-display ";set delay data: ~A ~A" val (mus-data gen)))))
	(if (mus-data (make-oscil))
	    (snd-display ";mus-data osc: ~A" (mus-data (make-oscil)))))

      (let* ((del (make-delay 5 :max-size 8)))
	(delay del 1.0)
	(do ((i 0 (1+ i))) ((= i 4)) (delay del 0.0))
	(let ((v0 (make-vct 5)))
	  (do ((i 0 (1+ i)))
	      ((= i 5))
	    (vct-set! v0 i (delay del 0.0 0.4)))
	  (if (not (vequal v0 (vct 0.600 0.400 0.000 0.000 0.000)))
	      (snd-display ";zdelay: ~A" v0))
	  (delay del 1.0)
	  (delay del 0.0 0.4)
	  (if (not (string=? (mus-describe del) "delay: line[5,8]: [0.000 0.000 0.000 1.000 0.000]"))
	      (snd-display ";describe zdelay: ~A" (mus-describe del)))
	  (if (not (string=? (mus-inspect del) "dly line[5,8 at 4,7 (external)]: [0.000 0.000 0.000 1.000 0.000], xscl: 0.000000, yscl: 0.000000"))
	      (snd-display ";inspect zdelay: ~A" (mus-inspect del)))))
      (let ((tag (catch #t (lambda () 
			     (let ((gen (make-oscil)))
			       (tap gen)))
			(lambda args (car args)))))
	(if (not (eq? tag 'wrong-type-arg))
	    (snd-display ";tap of oscil: ~A" tag)))

      (let ((dly (make-delay 3))
	    (flt (make-one-zero .5 .4))
	    (v (make-vct 20))
	    (inval 1.0))
	(vct-map! v (lambda ()
		      (let ((res (delay dly (+ inval (* (one-zero flt (tap dly)) .6)))))
			(set! inval 0.0)
			res)))
	(if (not (vequal v (vct 0.0 0.0 0.0 1.0 0.0 0.0 0.300 0.240 0.0 0.090 0.144 0.058 0.027 0.065 0.052 0.022 0.026 0.031 0.019 0.013)))
	    (snd-display ";tap with low pass: ~A" v)))
      
      (let ((dly (make-delay 3))
	    (v (make-vct 20))
	    (inval 1.0))
	(vct-map! v (lambda ()
		      (let ((res (delay dly (+ inval (tap dly)))))
			(set! inval 0.0)
			res)))
	(if (not (vequal v (vct 0.0 0.0 0.0 1.0 0.0 0.0 1.0 0.0 0.0 1.0 0.0 0.0 1.0 0.0 0.0 1.0 0.0 0.0 1.0 0.0)))
	    (snd-display ";simple tap: ~A" v)))
      
      (let ((dly (make-delay 6))
	    (v (make-vct 20))
	    (inval 1.0))
	(vct-map! v (lambda ()
		      (let ((res (delay dly (+ inval (tap dly -2)))))
			(set! inval 0.0)
			res)))
	(if (not (vequal v (vct 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 1.0 0.0)))
	    (snd-display ";tap back 2: ~A" v)))

      (let ((dly (make-delay 3))
	    (flt (make-one-zero .5 .4))
	    (v (make-vct 20))
	    (inval 1.0))
	(do ((i 0 (1+ i)))
	    ((= i 20))
	  (vct-set! v i (let ((res (delay dly (+ inval (* (one-zero flt (tap dly)) .6)))))
			  (set! inval 0.0)
			  res)))
	(if (not (vequal v (vct 0.0 0.0 0.0 1.0 0.0 0.0 0.300 0.240 0.0 0.090 0.144 0.058 0.027 0.065 0.052 0.022 0.026 0.031 0.019 0.013)))
	    (snd-display ";tap with low pass: ~A" v)))

      (let ((gen (make-all-pass .4 .6 3))
	    (v0 (make-vct 10))
	    (gen1 (make-all-pass .4 .6 3))
	    (v1 (make-vct 10)))
	(print-and-check gen 
			 "all_pass"
			 "all_pass: feedback: 0.400, feedforward: 0.600, line[3]:[0.000 0.000 0.000]"
			 "dly line[3,3 at 0,0 (external)]: [0.000 0.000 0.000], xscl: 0.600000, yscl: 0.400000")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (all-pass gen 1.0)))
	(vct-map! v1 (lambda () (if (all-pass? gen1) (all-pass gen1 1.0) -1.0)))
	(if (not (vequal v1 v0)) (snd-display ";map all-pass: ~A ~A" v0 v1))
	(if (not (all-pass? gen)) (snd-display ";~A not all-pass?" gen))
	(if (not (= (mus-length gen) 3)) (snd-display ";all-pass length: ~D?" (mus-length gen)))
	(if (not (= (mus-order gen) 3)) (snd-display ";all-pass order: ~D?" (mus-order gen)))
	(if (fneq (mus-feedback gen) .4) (snd-display ";all-pass feedback: ~F?" (mus-feedback gen)))
	(if (fneq (mus-feedforward gen) .6) (snd-display ";all-pass feedforward: ~F?" (mus-feedforward gen)))
	(if (or (fneq (vct-ref v0 1) 0.6) (fneq (vct-ref v0 4) 1.84) (fneq (vct-ref v0 8) 2.336))
	    (snd-display ";all-pass output: ~A" v0))
	(set! (mus-feedback gen) 0.5) 
	(if (fneq (mus-feedback gen) .5) (snd-display ";all-pass set-feedback: ~F?" (mus-feedback gen)))
	(set! (mus-feedforward gen) 0.5) 
	(if (fneq (mus-feedforward gen) .5) (snd-display ";all-pass set-feedforward: ~F?" (mus-feedforward gen))))

      (test-gen-equal (let ((d1 (make-all-pass 0.7 0.5 3))) (all-pass d1 1.0) d1)
		      (let ((d2 (make-all-pass 0.7 0.5 3))) (all-pass d2 1.0) d2) 
		      (let ((d3 (make-all-pass 0.7 0.5 4))) (all-pass d3 1.0) d3))
      (test-gen-equal (make-all-pass 0.7 0.5 3 :initial-element 1.0) 
		      (make-all-pass 0.7 0.5 3 :initial-element 1.0) 
		      (make-all-pass 0.7 0.5 3 :initial-element 0.5))
      (test-gen-equal (make-all-pass 0.7 0.5 3 :initial-element 1.0) 
		      (make-all-pass 0.7 0.5 3 :initial-element 1.0) 
		      (make-all-pass 0.5 0.5 3 :initial-element 1.0))
      (test-gen-equal (make-all-pass 0.7 0.5 3 :initial-contents '(1.0 0.0 0.0)) 
		      (make-all-pass 0.7 0.5 3 :initial-contents '(1.0 0.0 0.0)) 
		      (make-all-pass 0.7 0.5 3 :initial-contents '(1.0 1.0 1.0)))

      (let ((gen (make-comb .4 3))
	    (v0 (make-vct 10))
	    (gen1 (make-comb .4 3))
	    (v1 (make-vct 10)))
	(print-and-check gen 
			 "comb"
			 "comb: scaler: 0.400, line[3]: [0.000 0.000 0.000]"
			 "dly line[3,3 at 0,0 (external)]: [0.000 0.000 0.000], xscl: 0.000000, yscl: 0.400000")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (comb gen 1.0)))
	(vct-map! v1 (lambda () (if (comb? gen1) (comb gen1 1.0) -1.0)))
	(if (not (vequal v0 v1)) (snd-display ";map comb: ~A ~A" v0 v1))
	(if (not (comb? gen)) (snd-display ";~A not comb?" gen))
	(if (not (= (mus-length gen) 3)) (snd-display ";comb length: ~D?" (mus-length gen)))
	(if (not (= (mus-order gen) 3)) (snd-display ";comb order: ~D?" (mus-order gen)))
	(if (fneq (mus-feedback gen) .4) (snd-display ";comb feedback: ~F?" (mus-feedback gen)))
	(if (or (fneq (vct-ref v0 1) 0.0) (fneq (vct-ref v0 4) 1.0) (fneq (vct-ref v0 8) 1.4))
	    (snd-display ";comb output: ~A" v0)))

      (test-gen-equal (let ((d1 (make-comb 0.7 3))) (comb d1 1.0) d1) 
		      (let ((d2 (make-comb 0.7 3))) (comb d2 1.0) d2) 
		      (let ((d3 (make-comb 0.7 4))) (comb d3 1.0) d3))
      (test-gen-equal (make-comb 0.7 3 :initial-element 1.0) 
		      (make-comb 0.7 3 :initial-element 1.0) 
		      (make-comb 0.7 3 :initial-element 0.5))
      (test-gen-equal (make-comb 0.7 3 :initial-element 1.0) 
		      (make-comb 0.7 3 :initial-element 1.0) 
		      (make-comb 0.5 3 :initial-element 1.0))
      (test-gen-equal (make-comb 0.7 3 :initial-contents '(1.0 0.0 0.0)) 
		      (make-comb 0.7 3 :initial-contents '(1.0 0.0 0.0)) 
		      (make-comb 0.7 3 :initial-contents '(1.0 1.0 1.0)))

      (let* ((del (make-comb 0.0 5 :max-size 8)))
	(comb del 1.0)
	(do ((i 0 (1+ i))) ((= i 4)) (comb del 0.0))
	(let ((v0 (make-vct 5)))
	  (do ((i 0 (1+ i)))
	      ((= i 5))
	    (vct-set! v0 i (comb del 0.0 0.4)))
	  (if (not (vequal v0 (vct 0.600 0.400 0.000 0.000 0.000)))
	      (snd-display ";zcomb: ~A" v0))
	  (comb del 1.0)
	  (comb del 0.0 0.4)
	  (if (not (string=? (mus-describe del) "comb: scaler: 0.000, line[5,8]: [0.000 0.000 0.000 1.000 0.000]"))
	      (snd-display ";describe zcomb: ~A" (mus-describe del)))
	  (if (not (string=? (mus-inspect del) "dly line[5,8 at 4,7 (external)]: [0.000 0.000 0.000 1.000 0.000], xscl: 0.000000, yscl: 0.000000"))
	      (snd-display ";inspect zcomb: ~A" (mus-inspect del))))
	(set! (mus-feedback del) 1.0)
	(if (fneq (mus-feedback del) 1.0)
	    (snd-display ";comb feedback set: ~A" (mus-feedback del))))

      (let ((gen (make-notch .4 3))
	    (v0 (make-vct 10))
	    (gen1 (make-notch .4 3))
	    (v1 (make-vct 10)))
	(print-and-check gen 
			 "notch"
			 "notch: scaler: 0.400, line[3]: [0.000 0.000 0.000]"
			 "dly line[3,3 at 0,0 (external)]: [0.000 0.000 0.000], xscl: 0.400000, yscl: 0.000000")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (notch gen 1.0)))
	(vct-map! v1 (lambda () (if (notch? gen1) (notch gen1 1.0) -1.0)))
	(if (not (vequal v0 v1)) (snd-display ";map notch: ~A ~A" v0 v1))
	(if (not (notch? gen)) (snd-display ";~A not notch?" gen))
	(if (not (= (mus-length gen) 3)) (snd-display ";notch length: ~D?" (mus-length gen)))
	(if (not (= (mus-order gen) 3)) (snd-display ";notch order: ~D?" (mus-order gen)))
	(if (fneq (mus-feedforward gen) .4) (snd-display ";notch feedforward: ~F?" (mus-feedforward gen)))
	(if (or (fneq (vct-ref v0 1) 0.4) (fneq (vct-ref v0 4) 1.4) (fneq (vct-ref v0 8) 1.4))
	    (snd-display ";notch output: ~A" v0))
	(set! (mus-feedforward gen) 1.0)
	(if (fneq (mus-feedforward gen) 1.0)
	    (snd-display ";notch feedforward set: ~A" (mus-feedforward gen))))

      (test-gen-equal (let ((d1 (make-notch 0.7 3))) (notch d1 1.0) d1)
		      (let ((d2 (make-notch 0.7 3))) (notch d2 1.0) d2)
		      (let ((d3 (make-notch 0.7 4))) (notch d3 1.0) d3))
      (test-gen-equal (make-notch 0.7 3 :initial-element 1.0) 
		      (make-notch 0.7 3 :initial-element 1.0) 
		      (make-notch 0.7 3 :initial-element 0.5))
      (test-gen-equal (make-notch 0.7 3 :initial-element 1.0) 
		      (make-notch 0.7 3 :initial-element 1.0) 
		      (make-notch 0.5 3 :initial-element 1.0))
      (test-gen-equal (make-notch 0.7 3 :initial-contents '(1.0 0.0 0.0)) 
		      (make-notch 0.7 3 :initial-contents '(1.0 0.0 0.0)) 
		      (make-notch 0.7 3 :initial-contents '(1.0 1.0 1.0)))

      (let ((gen (make-one-pole .4 .7))
	    (v0 (make-vct 10))
	    (gen1 (make-one-pole .4 .7))
	    (v1 (make-vct 10)))
	(print-and-check gen 
			 "one_pole"
			 "one_pole: a0: 0.400, b1: 0.700, y1: 0.000"
			 "smpflt a0: 0.400000, a1: 0.000000, a2: 0.000000, b1: 0.700000, b2: 0.000000, x1: 0.000000, x2: 0.000000, y1: 0.000000, y2: 0.000000")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (one-pole gen 1.0)))
	(vct-map! v1 (lambda () (if (one-pole? gen) (one-pole gen1 1.0) -1.0)))
	(if (not (vequal v0 v1)) (snd-display ";map one-pole: ~A ~A" v0 v1))
	(if (not (one-pole? gen)) (snd-display ";~A not one-pole?" gen))
	(if (not (= (mus-order gen) 1)) (snd-display ";one-pole order: ~D?" (mus-order gen)))
	(if (fneq (mus-a0 gen) .4) (snd-display ";one-pole a0: ~F?" (mus-a0 gen)))
	(if (fneq (mus-b1 gen) .7) (snd-display ";one-pole b1: ~F?" (mus-b1 gen)))
	(if (or (fneq (vct-ref v0 1) 0.120) (fneq (vct-ref v0 4) 0.275) (fneq (vct-ref v0 8) 0.245))
	    (snd-display ";one-pole output: ~A" v0)))

      (let ((gen (make-one-zero .4 .7))
	    (v0 (make-vct 10))
	    (gen1 (make-one-zero .4 .7))
	    (v1 (make-vct 10)))
	(print-and-check gen
			 "one_zero"
			 "one_zero: a0: 0.400, a1: 0.700, x1: 0.000"
			 "smpflt a0: 0.400000, a1: 0.700000, a2: 0.000000, b1: 0.000000, b2: 0.000000, x1: 0.000000, x2: 0.000000, y1: 0.000000, y2: 0.000000")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (one-zero gen 1.0)))
	(vct-map! v1 (lambda () (if (one-zero? gen) (one-zero gen1 1.0) -1.0)))
	(if (not (vequal v0 v1)) (snd-display ";map one-zero: ~A ~A" v0 v1))
	(if (not (one-zero? gen)) (snd-display ";~A not one-zero?" gen))
	(if (not (= (mus-order gen) 1)) (snd-display ";one-zero order: ~D?" (mus-order gen)))
	(if (fneq (mus-a0 gen) .4) (snd-display ";one-zero a0: ~F?" (mus-a0 gen)))
	(if (fneq (mus-a1 gen) .7) (snd-display ";one-zero a1: ~F?" (mus-a1 gen)))
	(if (fneq (vct-ref v0 1) 1.1) (snd-display ";one-zero output: ~A" v0)))

      (let ((gen (make-two-zero .4 .7 .3))
	    (v0 (make-vct 10))
	    (gen1 (make-two-zero .4 .7 .3))
	    (v1 (make-vct 10)))
	(print-and-check gen 
			 "two_zero"
			 "two_zero: a0: 0.400, a1: 0.700, a2: 0.300, x1: 0.000, x2: 0.000"
			 "smpflt a0: 0.400000, a1: 0.700000, a2: 0.300000, b1: 0.000000, b2: 0.000000, x1: 0.000000, x2: 0.000000, y1: 0.000000, y2: 0.000000")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (two-zero gen 1.0)))
	(vct-map! v1 (lambda () (if (two-zero? gen1) (two-zero gen1 1.0) -1.0)))
	(if (not (vequal v0 v1)) (snd-display ";map two-zero: ~A ~A" v0 v1))
	(if (not (two-zero? gen)) (snd-display ";~A not two-zero?" gen))
	(if (not (= (mus-order gen) 2)) (snd-display ";two-zero order: ~D?" (mus-order gen)))
	(if (fneq (mus-a0 gen) .4) (snd-display ";two-zero a0: ~F?" (mus-a0 gen)))
	(if (fneq (mus-a1 gen) .7) (snd-display ";two-zero a1: ~F?" (mus-a1 gen)))
	(if (fneq (mus-a2 gen) .3) (snd-display ";two-zero a2: ~F?" (mus-a2 gen)))
	(if (or (fneq (vct-ref v0 1) 1.1) (fneq (vct-ref v0 8) 1.4)) (snd-display ";two-zero output: ~A" v0)))

      (let ((gen (make-two-zero .4 .7 .3)))
	(let ((val (gen 1.0)))
	  (if (fneq val .4) (snd-display ";2zero->0.4: ~A" val))
	  (if (fneq (mus-x1 gen) 1.0) (snd-display ";2zero x1(1.0): ~A" (mus-x1 gen)))
	  (if (fneq (mus-x2 gen) 0.0) (snd-display ";2zero x2(0.0): ~A" (mus-x2 gen)))
	  (set! val (gen 0.5))
	  (if (fneq val .9) (snd-display ";2zero->0.9: ~A" val))
	  (if (fneq (mus-x1 gen) 0.5) (snd-display ";2zero x1(0.5): ~A" (mus-x1 gen)))
	  (if (fneq (mus-x2 gen) 1.0) (snd-display ";2zero x2(1.0): ~A" (mus-x2 gen)))
	  (set! (mus-x1 gen) .1)
	  (set! (mus-x2 gen) .2)
	  (if (fneq (mus-x1 gen) 0.1) (snd-display ";2zero set x1(0.1): ~A" (mus-x1 gen)))
	  (if (fneq (mus-x2 gen) 0.2) (snd-display ";2zero set x2(0.2): ~A" (mus-x2 gen)))
	  (set! val (gen 1.0))
	  (if (fneq val .53) (snd-display ";2zero->0.53: ~A" val))))

      (let ((gen (make-two-pole .4 .7 .3))
	    (v0 (make-vct 10))
	    (gen1 (make-two-pole .4 .7 .3))
	    (v1 (make-vct 10)))
	(print-and-check gen 
			 "two_pole"
			 "two_pole: a0: 0.400, b1: 0.700, b2: 0.300, y1: 0.000, y2: 0.000"
			 "smpflt a0: 0.400000, a1: 0.000000, a2: 0.000000, b1: 0.700000, b2: 0.300000, x1: 0.000000, x2: 0.000000, y1: 0.000000, y2: 0.000000")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (two-pole gen 1.0)))
	(vct-map! v1 (lambda () (if (two-pole? gen1) (two-pole gen1 1.0) -1.0)))
	(if (not (vequal v0 v1)) (snd-display ";map two-pole: ~A ~A" v0 v1))
	(if (not (two-pole? gen)) (snd-display ";~A not two-pole?" gen))
	(if (not (= (mus-order gen) 2)) (snd-display ";two-pole order: ~D?" (mus-order gen)))
	(if (fneq (mus-a0 gen) .4) (snd-display ";two-pole a0: ~F?" (mus-a0 gen)))
	(if (fneq (mus-b1 gen) .7) (snd-display ";two-pole b1: ~F?" (mus-b1 gen)))
	(if (fneq (mus-b2 gen) .3) (snd-display ";two-pole b2: ~F?" (mus-b2 gen)))
	(if (or (fneq (vct-ref v0 1) 0.12) (fneq (vct-ref v0 8) 0.201)) (snd-display ";two-pole output: ~A" v0)))

      (let ((gen (make-two-pole .4 .7 .3)))
	(let ((val (gen 1.0)))
	  (if (fneq val .4) (snd-display ";a0->out 2pole: ~A" val))
	  (if (fneq (mus-y1 gen) .4) (snd-display ";a0->out 2pole y1 (0.4): ~A" (mus-y1 val)))
	  (if (fneq (mus-y2 gen) 0.0) (snd-display ";a0->out 2pole y2 (0.0): ~A" (mus-y2 val)))
	  (set! val (gen 0.5))
	  (if (fneq val -.08) (snd-display ";a0->out 2pole (-0.08): ~A" val))
	  (if (fneq (mus-y1 gen) -0.08) (snd-display ";a0->out 2pole y1 (-0.08): ~A" (mus-y1 val)))
	  (if (fneq (mus-y2 gen) 0.4) (snd-display ";a0->out 2pole y2 (0.4): ~A" (mus-y2 val)))
	  (set! (mus-y1 gen) .1)
	  (set! (mus-y2 gen) .2)
	  (if (fneq (mus-y1 gen) .1) (snd-display ";a0->out 2pole set y1 (.1): ~A" (mus-y1 val)))
	  (if (fneq (mus-y2 gen) .2) (snd-display ";a0->out 2pole set y2 (.2): ~A" (mus-y2 val)))
	  (set! val (gen 1.0))
	  (if (fneq val 0.27) (snd-display ";a0->out 2pole (0.27): ~A" val))))

      (let ((var (catch #t (lambda () (make-two-pole :b1 3.0)) (lambda args args))))
	(if (not (eq? (car var) 'mus-error))
	    (snd-display ";make-two-pole bad b1: ~A" var)))
      (let ((var (catch #t (lambda () (make-two-pole :b2 2.0)) (lambda args args))))
	(if (not (eq? (car var) 'mus-error))
	    (snd-display ";make-two-pole bad b2: ~A" var)))
      (let ((var (catch #t (lambda () (make-two-pole :b2 2.0 :b1)) (lambda args args))))
	(if (not (eq? (car var) 'mus-error))
	    (snd-display ";make-two-pole bad keys: ~A" var)))
      (let ((var (catch #t (lambda () (make-two-pole :b2 2.0 3.0)) (lambda args args))))
	(if (not (eq? (car var) 'mus-error))
	    (snd-display ";make-two-pole bad args: ~A" var)))

      (let ((gen (make-oscil 440.0))
	    (gen1 (make-oscil 440.0))
	    (gen2 (make-oscil 440.0))
	    (v0 (make-vct 10))
	    (v1 (make-vct 10))
	    (v2 (make-vct 10)))
	(print-and-check gen 
			 "oscil"
			 "oscil freq: 440.000Hz, phase: 0.000"
			 "osc freq: 0.125379, phase: 0.000000")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (oscil gen 0.0))
	  (vct-set! v1 i (mus-apply gen1 0.0 0.0)))
	(vct-map! v2 (lambda () (if (oscil? gen2) (oscil gen2 0.0) -1.0)))
	(if (not (vequal v0 v2)) (snd-display ";map oscil: ~A ~A" v0 v2))
	(if (not (oscil? gen)) (snd-display ";~A not oscil?" gen))
	(if (fneq (mus-phase gen) 1.253787) (snd-display ";oscil phase: ~F?" (mus-phase gen)))
	(if (fneq (mus-frequency gen) 440.0) (snd-display ";oscil frequency: ~F?" (mus-frequency gen)))
	(if (not (= (mus-cosines gen) 1)) (snd-display ";oscil cosines: ~D?" (mus-cosines gen)))
	(if (or (fneq (vct-ref v0 1) 0.125) (fneq (vct-ref v0 8) 0.843)) (snd-display ";oscil output: ~A" v0))
	(set! (mus-phase gen) 0.0)
	(if (fneq (mus-phase gen) 0.0) (snd-display ";oscil set-phase: ~F?" (mus-phase gen)))
	(set! (mus-frequency gen) 100.0)
	(if (fneq (mus-frequency gen) 100.0) (snd-display ";oscil set-frequency: ~F?" (mus-frequency gen)))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (if (fneq (vct-ref v0 i) (vct-ref v1 i))
	      (snd-display ";mus-apply oscil at ~D: ~A ~A?" i (vct-ref v0 i) (vct-ref v1 i))))
	(if (fneq (mus-apply) 0.0)
	    (snd-display ";(mus-apply): ~A" (mus-apply))))

      (let ((o1 (make-oscil (+ (mus-srate) 100)))
	    (o2 (make-oscil 100)))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (let ((val1 (o1))
		(val2 (o2)))
	    (if (fneq val1 val2) (snd-display ";~D: o1: ~A, o2: ~A" i val1 val2)))))

      (fm-test (make-oscil))
      (fm-test (make-sine-summation))
      (fm-test (make-square-wave))
      (fm-test (make-triangle-wave))
      (fm-test (make-sum-of-cosines))
      (fm-test (make-sawtooth-wave))
      (fm-test (make-rand))
      (fm-test (make-rand-interp))
      (fm-test (make-pulse-train))

      (let ((gen (make-oscil 440.0))
	    (gen1 (make-oscil 440.0)))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (let ((oval (oscil gen .1))
		(mval (mus-run gen1 .1)))
	    (if (fneq oval mval)
		(snd-display ";mus-run ~A but oscil ~A?" mval oval)))))

      (let ((gen (make-oscil 440.0))
	    (gen1 (make-oscil 440.0))
	    (gen2 (make-oscil 440.0))
	    (gen3 (make-oscil 440.0))
	    (fm-index (hz->radians 440.0))
	    (v0 (make-vct 10))
	    (v1 (make-vct 10)))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (oscil gen (* fm-index (oscil gen1 0.0))))
	  (vct-set! v1 i (mus-apply gen2 (* fm-index (mus-apply gen3 0.0 0.0)) 0.0)))
	(if (or (fneq (vct-ref v0 1) 0.125) (fneq (vct-ref v0 6) 0.830) (fneq (vct-ref v0 8) 0.987))
	    (snd-display ";oscil fm output: ~A" v0))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (if (fneq (vct-ref v0 i) (vct-ref v1 i))
	      (snd-display ";mus-apply fm oscil at ~D: ~A ~A?" i (vct-ref v0 i) (vct-ref v1 i)))))

      (test-gen-equal (make-oscil 440.0) (make-oscil 440.0) (make-oscil 100.0))
      (test-gen-equal (make-oscil 440.0) (make-oscil 440.0) (make-oscil 440.0 1.0))
      
      (let ((gen (make-oscil 440.0))
	    (gen1 (make-oscil 440.0))
	    (pm-index 2.0)
	    (v0 (make-vct 10)))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (gen 0.0 (* pm-index (gen1 0.0)))))
	(if (or (fneq (vct-ref v0 1) 0.367) (fneq (vct-ref v0 6) 0.854) (fneq (vct-ref v0 8) 0.437))
	    (snd-display ";oscil pm output: ~A" v0)))

      (let ((var (catch #t (lambda () (mus-location (make-oscil))) (lambda args args))))
	(if (not (eq? (car var) 'mus-error))
	    (snd-display ";mus-location bad gen: ~A" var)))
      (let ((var (catch #t (lambda () (set! (mus-location (make-oscil)) 0)) (lambda args args))))
	(if (not (eq? (car var) 'mus-error))
	    (snd-display ";set mus-location bad gen: ~A" var)))
      (let ((var (catch #t (lambda () (mus-scaler (make-oscil))) (lambda args args))))
	(if (not (eq? (car var) 'mus-error))
	    (snd-display ";mus-scaler bad gen: ~A" var)))
      (let ((var (catch #t (lambda () (set! (mus-scaler (make-oscil)) 0)) (lambda args args))))
	(if (not (eq? (car var) 'mus-error))
	    (snd-display ";set mus-scaler bad gen: ~A" var)))
      (let ((var (catch #t (lambda () (mus-length (make-oscil))) (lambda args args))))
	(if (not (eq? (car var) 'mus-error))
	    (snd-display ";mus-length bad gen: ~A" var)))
      (let ((var (catch #t (lambda () (set! (mus-length (make-oscil)) 0)) (lambda args args))))
	(if (not (eq? (car var) 'mus-error))
	    (snd-display ";set mus-length bad gen: ~A" var)))
      (let ((var (catch #t (lambda () (mus-frequency (make-one-pole))) (lambda args args))))
	(if (not (eq? (car var) 'mus-error))
	    (snd-display ";mus-frequency bad gen: ~A" var)))
      (let ((var (catch #t (lambda () (set! (mus-frequency (make-one-pole)) 0)) (lambda args args))))
	(if (not (eq? (car var) 'mus-error))
	    (snd-display ";set mus-frequency bad gen: ~A" var)))
      (let ((var (catch #t (lambda () (mus-scaler (make-delay 3))) (lambda args args))))
	(if (not (eq? (car var) 'mus-error))
	    (snd-display ";mus-scaler bad gen: ~A" var)))
      (let ((var (catch #t (lambda () (set! (mus-scaler (make-delay 3)) 0)) (lambda args args))))
	(if (not (eq? (car var) 'mus-error))
	    (snd-display ";set mus-scaler bad gen: ~A" var)))
      (let ((var (catch #t (lambda () (make-delay (* 1024 1024 40))) (lambda args args))))
	(if (not (eq? (car var) 'out-of-range))
	    (snd-display ";make-delay huge line: ~A" var)))
      (let ((var (catch #t (lambda () (make-delay 32 :max-size (* 1024 1024 40))) (lambda args args))))
	(if (not (eq? (car var) 'out-of-range))
	    (snd-display ";make-delay huge line: ~A" var)))
      (for-each
       (lambda (func)
	 (let ((var (catch #t (lambda () (func (make-oscil))) (lambda args args))))
	   (if (not (eq? (car var) 'mus-error))
	       (snd-display ";~A should be bad gen: ~A" func var))))
       (list mus-x1 mus-x2 mus-y1 mus-y2))
      (for-each
       (lambda (func)
	 (let ((var (catch #t (lambda () (let ((gen (make-oscil))) (set! (func gen) 1.0))) (lambda args args))))
	   (if (not (eq? (car var) 'mus-error))
	       (snd-display ";set ~A should be bad gen: ~A" func var))))
       (list mus-x1 mus-x2 mus-y1 mus-y2))

      (let ((amps (make-vector 3))
	    (oscils (make-vector 3))
	    (fms (make-vector 3))
	    (results (make-vector 10)))
	(do ((i 0 (1+ i))) ((= i 3))
	  (vector-set! amps i (* (+ i 1) .1))
	  (vector-set! oscils i (make-oscil :frequency (* (+ i 1) 220.0)))
	  (vector-set! fms i (* i .05)))
	(do ((i 0 (1+ i))) ((= i 10))
	  (vector-set! results i (oscil-bank amps oscils fms)))
	(if (or (fneq (vector-ref results 1) 0.12639)
		(fneq (vector-ref results 5) 0.48203)
		(fneq (vector-ref results 9) 0.41001))
	    (snd-display ";oscil-bank: ~A?" results)))

      (let ((amps (make-vector 3))
	    (oscils (make-vector 3))
	    (fms (make-vector 3))
	    (results (make-vector 10)))
	(do ((i 0 (1+ i))) ((= i 3))
	  (vector-set! amps i (* (+ i 1) .1))
	  (vector-set! oscils i (make-oscil :frequency (* (+ i 1) 220.0)))
	  (vector-set! fms i (* i .05)))
	(do ((i 0 (1+ i))) ((= i 10))
	  (vector-set! results i (mus-bank oscils amps fms)))
	(if (or (fneq (vector-ref results 1) 0.12639)
		(fneq (vector-ref results 5) 0.48203)
		(fneq (vector-ref results 9) 0.41001))
	    (snd-display ";mus-bank: ~A?" results))
	(do ((i 0 (1+ i))) ((= i 10))
	  (vector-set! results i (mus-bank oscils amps fms (lambda (i) 0.0)))))

      (let ((gen (make-buffer 3)))
	(if (not (buffer-empty? gen)) (snd-display ";new buf not buffer-empty: ~A?" gen))
	(sample->buffer gen 1.0)
	(sample->buffer gen 0.5)
	(sample->buffer gen 0.25)

	(print-and-check gen 
			 "buffer"
			 "buffer: length: 3, loc: 0, fill: 3.000"
			 "rblk buf[3 (external)]: [1.000 0.500 0.250], loc: 0, fill_time: 3.000000, empty: 1")
	(if (not (buffer-full? gen)) (snd-display ";buffer-full: ~A?" gen))
	(if (not (buffer? gen)) (snd-display ";~A not buffer?" gen))
	(if (not (= (mus-length gen) 3)) (snd-display ";buffer length: ~D?" (mus-length gen)))
	(if (not (= (mus-increment gen) 3)) (snd-display ";buffer fill-time: ~D?" (mus-increment gen)))
	(if (or (fneq (buffer->sample gen) 1.0) (fneq (buffer->sample gen) 0.5) (fneq (buffer->sample gen) 0.25))
	    (snd-display (format "buffer output?")))
	(if (not (buffer-empty? gen)) (snd-display ";emptied buf not buffer-empty: ~A?" gen))
	(let ((fr0 (make-frame 2 .1 .2))
	      (fr1 (make-frame 2 0.0 0.0)))
	  (frame->buffer gen fr0)
	  (set! fr1 (buffer->frame gen fr1))
	  (if (not (equal? fr0 fr1)) (snd-display ";frame->buffer: ~A ~A?" fr0 fr1)))
	(set! (mus-data gen) (make-vct 3)))
      (gc)
      (let ((gen (make-buffer 6))
	    (fr1 (make-frame 2 .1 .2))
	    (fr2 (make-frame 2 .3 .4))
	    (fr3 (make-frame 2 .5 .6))
	    (fr4 (make-frame 2 .7 .8)))
	(frame->buffer gen fr1)

	(print-and-check gen 
			 "buffer"
			 "buffer: length: 6, loc: 0, fill: 2.000"
			 "rblk buf[6 (external)]: [0.100 0.200 0.000 0.000 0.000 0.000], loc: 0, fill_time: 2.000000, empty: 1")
	(frame->buffer gen fr2)
	(frame->buffer gen fr3)

	(print-and-check gen 
			 "buffer"
			 "buffer: length: 6, loc: 0, fill: 6.000"
			 "rblk buf[6 (external)]: [0.100 0.200 0.300 0.400 0.500 0.600], loc: 0, fill_time: 6.000000, empty: 1")
	(buffer->frame gen fr2)
	(if (not (equal? fr2 fr1)) (snd-display ";buffer->frame: ~A ~A?" fr1 fr2))

	(print-and-check gen 
			 "buffer"
			 "buffer: length: 6, loc: 2, fill: 6.000"
			 "rblk buf[6 (external)]: [0.100 0.200 0.300 0.400 0.500 0.600], loc: 2, fill_time: 6.000000, empty: 1")
	(let ((f (buffer->frame gen)))
	  (if (not (= (mus-channels f) 1)) (snd-display ";buffer->frame default: ~A?" f))
	  (if (fneq (frame-ref f 0) .3) (snd-display ";buffer->frame: ~A?" f))
	  (buffer->frame gen fr1)
	  (if (not (equal? fr1 (make-frame 2 .4 .5))) (snd-display ";buffer->frame offset: ~A?" fr1))
	  (frame->buffer gen fr4)

	(print-and-check gen 
			 "buffer"
			 "buffer: length: 6, loc: 0, fill: 3.000"
			 "rblk buf[6 (external)]: [0.600 0.700 0.800 0.000 0.000 0.000], loc: 0, fill_time: 3.000000, empty: 1")))

      (test-gen-equal (make-buffer 3) (make-buffer 3) (make-buffer 4))
      (let ((gen (make-buffer 3))
	    (gen1 (make-buffer 3))
	    (gen2 (make-buffer 3)))
	(sample->buffer gen 1.0)
	(sample->buffer gen 0.5)
	(sample->buffer gen1 1.0)
	(sample->buffer gen1 0.5)
	(sample->buffer gen2 1.0)
	(sample->buffer gen2 0.5)
	(sample->buffer gen2 0.25)
	(test-gen-equal gen gen1 gen2))

      (let ((gen (make-sum-of-cosines 10 440.0))
	    (v0 (make-vct 10))
	    (gen1 (make-sum-of-cosines 10 440.0))
	    (v1 (make-vct 10)))
	(print-and-check gen 
			 "sum_of_cosines"
			 "sum_of_cosines freq: 440.000Hz, phase: 0.000, cosines: 10"
			 "cosp freq: 0.125379, phase: 0.000000, cosines: 10, scaler: 0.047619")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (sum-of-cosines gen 0.0)))
	(vct-map! v1 (lambda () (if (sum-of-cosines? gen1) (sum-of-cosines gen1 0.0) -1.0)))
	(if (not (vequal v0 v1)) (snd-display ";map sum-of-cosines: ~A ~A" v0 v1))
	(if (not (sum-of-cosines? gen)) (snd-display ";~A not sum-of-cosines?" gen))
	(if (fneq (mus-phase gen) 1.253787) (snd-display ";sum-of-cosines phase: ~F?" (mus-phase gen)))
	(if (fneq (mus-frequency gen) 440.0) (snd-display ";sum-of-cosines frequency: ~F?" (mus-frequency gen)))
	(if (fneq (mus-scaler gen) (/ 1.0 21.0)) (snd-display ";sum-of-cosines scaler: ~F?" (mus-scaler gen)))
	(if (not (= (mus-cosines gen) 10)) (snd-display ";sum-of-cosines cosines: ~D?" (mus-cosines gen)))
	(if (not (= (mus-length gen) 10)) (snd-display ";sum-of-cosines length: ~D?" (mus-length gen)))
	(if (or (fneq (vct-ref v0 1) 0.736) (fneq (vct-ref v0 8) -0.089)) (snd-display ";sum-of-cosines output: ~A" v0))
	(set! (mus-scaler gen) .5) (if (fneq (mus-scaler gen) 0.5) (snd-display ";sum-of-cosines set-scaler: ~F?" (mus-scaler gen)))
	(set! (mus-cosines gen) 5) (if (not (= (mus-cosines gen) 5)) (snd-display ";set sum-of-cosines cosines: ~D?" (mus-cosines gen))))

      (test-gen-equal (make-sum-of-cosines 3 440.0) (make-sum-of-cosines 3 440.0) (make-sum-of-cosines 5 440.0))
      (test-gen-equal (make-sum-of-cosines 3 440.0) (make-sum-of-cosines 3 440.0) (make-sum-of-cosines 3 440.0 1.0))
      (test-gen-equal (make-sum-of-cosines 3 440.0) (make-sum-of-cosines 3 440.0) (make-sum-of-cosines 3 400.0))

      (let ((gen (make-sine-summation 440.0))
	    (v0 (make-vct 10))
	    (gen1 (make-sine-summation 440.0))
	    (v1 (make-vct 10)))
	(print-and-check gen 
			 "sine_summation"
			 "sine_summation: frequency: 440.000, phase: 0.000, n: 1, a: 0.500, ratio: 1.000"
			 "sss freq: 0.125379, phase: 0.000000, a: 0.500000, b: 1.000000, an: 0.250000, a2: 1.250000, n: 1")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (sine-summation gen 0.0)))
	(vct-map! v1 (lambda () (if (sine-summation? gen1) (sine-summation gen1 0.0) -1.0)))
	(if (not (vequal v0 v1)) (snd-display ";map sine-summation: ~A ~A" v0 v1))
	(if (not (sine-summation? gen)) (snd-display ";~A not sine-summation?" gen))
	(if (fneq (mus-phase gen) 1.253787) (snd-display ";sine-summation phase: ~F?" (mus-phase gen)))
	(if (fneq (mus-frequency gen) 440.0) (snd-display ";sine-summation frequency: ~F?" (mus-frequency gen)))
	(if (or (fneq (vct-ref v0 1) 0.249) (fneq (vct-ref v0 8) 1.296)) (snd-display ";sine-summation output: ~A" v0))
	(if (fneq (mus-scaler gen) 0.5) (snd-display ";mus-scaler (a) sine-summation: ~A" (mus-scaler gen)))
	(set! (mus-scaler gen) 0.75)
	(if (fneq (mus-scaler gen) 0.75) (snd-display ";mus-scaler (set a) sine-summation: ~A" (mus-scaler gen))))

      (test-gen-equal (make-sine-summation 440.0) (make-sine-summation 440.0) (make-sine-summation 100.0))
      (test-gen-equal (make-sine-summation 440.0) (make-sine-summation 440.0) (make-sine-summation 440.0 1.0))
      (test-gen-equal (make-sine-summation 440.0) (make-sine-summation 440.0) (make-sine-summation 440.0 0.0 3))

      (let ((gen1 (make-sine-summation 1000 0 1 0.0 1))
	    (gen2 (make-oscil 1000))
	    (gen3 (make-sine-summation 1000 0 1 0.5 2))
	    (gen4 (make-oscil 1000))
	    (gen5 (make-oscil 3000))
	    (v0 (make-vct 10)))

	(call-with-current-continuation
	 (lambda (give-up)
	   (do ((i 0 (1+ i)))
	       ((= i 100))
	     (let ((ss (sine-summation gen1 0.0))
		   (os (oscil gen2 0.0))
		   (ss1 (sine-summation gen3 0.0))
		   (os1 (+ (oscil gen4 0.0) 
			   (* 0.5 (oscil gen5 0.0)))))
	       (if (ffneq ss os)
		   (begin
		     (snd-display ";sine-summation 1: ~A: os: ~A ss: ~A" i os ss)
		     (give-up)))
	       (if (ffneq ss1 os1)
		   (begin
		     (snd-display ";sine-summation 2: ~A: os1: ~A ss1: ~A" i os1 ss1)
		     (give-up)))))))
	(set! gen1 (make-sine-summation 440.0 0.0 0.0))
	(sine-summation gen1)
	(let ((val (sine-summation gen1)))
	  (if (fneq val 0.125050170279874) (snd-display ";sine-summation n=0: ~A" val))))


      (let ((gen (make-asymmetric-fm 440.0))
	    (v0 (make-vct 10))
	    (gen1 (make-asymmetric-fm 440.0))
	    (v1 (make-vct 10)))
	(print-and-check gen 
			 "asymmetric_fm"
			 "asymmetric-fm freq: 440.000Hz, phase: 0.000, ratio: 1.000, r: 1.000"
			 "asyfm r: 1.000000, freq: 0.125379, phase: 0.000000, ratio: 1.000000, cosr: 0.000000, sinr: 1.000000")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (asymmetric-fm gen 0.0)))
	(vct-map! v1 (lambda () (if (asymmetric-fm? gen1) (asymmetric-fm gen1 0.0) -1.0)))
	(if (not (vequal v0 v1)) (snd-display ";map asymmetric-fm: ~A ~A" v0 v1))
	(if (not (asymmetric-fm? gen)) (snd-display ";~A not asymmetric-fm?" gen))
	(if (fneq (mus-phase gen) 1.253787) (snd-display ";asymmetric-fm phase: ~F?" (mus-phase gen)))
	(set! (mus-phase gen) 1.0)
	(if (fneq (mus-phase gen) 1.0) (snd-display ";set! asymmetric-fm phase: ~F?" (mus-phase gen)))
	(if (fneq (mus-frequency gen) 440.0) (snd-display ";asymmetric-fm frequency: ~F?" (mus-frequency gen)))
	(set! (mus-frequency gen) 100.0)
	(if (fneq (mus-frequency gen) 100.0) (snd-display ";set! asymmetric-fm frequency: ~F?" (mus-frequency gen)))
	(if (or (fneq (vct-ref v0 2) 0.248) (fneq (vct-ref v0 8) .843)) (snd-display ";asymmetric-fm output: ~A" v0))
	(if (fneq (mus-scaler gen) 1.0) (snd-display ";mus-scaler (r) asymmetric-fm: ~A" (mus-scaler gen)))
	(set! (mus-scaler gen) 0.5)
	(if (fneq (mus-scaler gen) 0.5) (snd-display ";mus-scaler (set r) asymmetric-fm: ~A" (mus-scaler gen))))

      (test-gen-equal (make-asymmetric-fm 440.0) (make-asymmetric-fm 440.0) (make-asymmetric-fm 100.0))
      (test-gen-equal (make-asymmetric-fm 440.0) (make-asymmetric-fm 440.0) (make-asymmetric-fm 440.0 1.0))
      (test-gen-equal (make-asymmetric-fm 440.0) (make-asymmetric-fm 440.0) (make-asymmetric-fm 440.0 0.0 3))

      (let ((gen1 (make-asymmetric-fm 1000 0 1.0 0.1))
	    (gen2 (make-oscil 1000)))
	(call-with-current-continuation
	 (lambda (give-up)
	   (do ((i 0 (1+ i)))
	       ((= i 100))
	     (let ((ss (asymmetric-fm gen1 0.0 0.0))
		   (os (oscil gen2 0.0)))
	       (if (fneq ss os)
		   (begin
		     (snd-display ";asymmetric-fm 1: ~A: os: ~A ss: ~A" i os ss)
		     (give-up))))))))

      (let ((vct0 (make-vct 2048))
	    (vct1 (make-vct 2048))
	    (gen3 (make-asymmetric-fm 1000 0 1.0 0.2))
	    (gen4 (make-oscil 1000))
	    (gen5 (make-oscil 200))
	    (fm1 (in-hz (* 1.0 .2 1000)))) ; make notions of "index" match
	(do ((i 0 (1+ i)))
	    ((= i 2048))
	  (vct-set! vct0 i (asymmetric-fm gen3 1.0 0.0))
	  (vct-set! vct1 i (oscil gen4 (* fm1 (oscil gen5)))))
	(let* ((spectr1 (snd-spectrum vct0 rectangular-window 2048 #t))
	       (spectr2 (snd-spectrum vct1 rectangular-window 2048 #t)))
	  (call-with-current-continuation
	   (lambda (give-up)
	     (do ((i 1 (1+ i)))
		 ((= i 512))
	       (if (ffneq (vct-ref spectr1 i) (vct-ref spectr2 i))
		   (begin
		     (snd-display ";asymmetric-fm 2: ~A: ~A ~A" (* i (/ 22050 2048)) (vct-ref spectr1 i) (vct-ref spectr2 i))
		     (give-up))))))))

      (let ((vct0 (make-vct 2048))
	    (vct1 (make-vct 2048))
	    (gen3 (make-asymmetric-fm 1000 0 2.0 0.1))
	    (gen4 (make-asymmetric-fm 1000 0 0.5 0.1)))
	(do ((i 0 (1+ i)))
	    ((= i 2048))
	  (vct-set! vct0 i (asymmetric-fm gen3 2.0 0.0))
	  (vct-set! vct1 i (asymmetric-fm gen4 2.0 0.0)))
	(let* ((spectr1 (snd-spectrum vct0 rectangular-window 2048 #t))
	       (spectr2 (snd-spectrum vct1 rectangular-window 2048 #t))
	       (s1-loc 0)
	       (s2-loc 0))
	  (do ((i 1 (1+ i)))
	      ((= i 256))
	    (if (< (abs (- 1.0 (vct-ref spectr1 i))) .01) (set! s1-loc i))
	    (if (< (abs (- 1.0 (vct-ref spectr2 i))) .01) (set! s2-loc i)))
	  (if (> s2-loc s1-loc) (snd-display ";asymmetric-fm peaks: ~A ~A" s1-loc s2-loc))
	  (let ((center (* (/ 22050 2048) (* .5 (+ s1-loc s2-loc)))))
	    (if (> (abs (- 1000 center)) 50) (snd-display ";asymmetric-fm center: ~A" center)))
	  (set! (mus-scaler gen3) 0.5)
	  (do ((i 0 (1+ i)))
	      ((= i 2048))
	    (vct-set! vct0 i (asymmetric-fm gen3 2.0 0.0)))
	  (set! spectr1 (snd-spectrum vct0 rectangular-window 2048 #t))
	  (do ((i 1 (1+ i)))
	      ((= i 256))
	    (if (< (abs (- 1.0 (vct-ref spectr1 i))) .01) (set! s1-loc i)))
	  (if (not (= s2-loc s1-loc)) (snd-print (format #f "asymmetric-fm set r peaks: ~A ~A" s1-loc s2-loc)))
	  (do ((i 0 (1+ i)))
	      ((= i 2048))
	    (vct-set! vct0 i (asymmetric-fm gen3 2.0 0.0)))
	  (snd-spectrum vct0 rectangular-window 2048 #t 0.0 #t)
	  (do ((i 1 (1+ i)))
	      ((= i 256))
	    (if (< (abs (- 1.0 (vct-ref vct0 i))) .01) (set! s1-loc i)))
	  (if (not (= s2-loc s1-loc)) (snd-print (format #f "asymmetric-fm set r in place peaks: ~A ~A" s1-loc s2-loc)))))

      (let ((gen (make-fir-filter 3 (list->vct '(.5 .25 .125))))
	    (v0 (make-vct 10))
	    (gen1 (make-fir-filter 3 (list->vct '(.5 .25 .125))))
	    (v1 (make-vct 10)))
	(print-and-check gen 
			 "fir_filter"
			 "fir_filter: order: 3"
			 "flt order: 3, state (local): [0.000 0.000 0.000], x: [0.500 0.250 0.125], y: nil")
	(vct-set! v0 0 (fir-filter gen 1.0))
	(do ((i 1 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (fir-filter gen 0.0)))
	(vct-map! v1 (let ((inp 1.0))
		       (lambda () 
			 (let ((val (if (fir-filter? gen1) (fir-filter gen1 inp) -1.0)))
			   (set! inp 0.0)
			   val))))
	(if (not (vequal v0 v1)) (snd-display ";map fir-filter: ~A ~A" v0 v1))
	(if (not (fir-filter? gen)) (snd-display ";~A not fir-filter?" gen))
	(if (not (= (mus-length gen) 3)) (snd-display ";fir-filter length: ~D?" (mus-length gen)))
	(if (or (fneq (vct-ref v0 1) 0.25) (fneq (vct-ref v0 2) .125)) (snd-display ";fir-filter output: ~A" v0))
	(let ((data (mus-xcoeffs gen)))
	  (if (fneq (vct-ref data 1) .25) (snd-display ";fir-filter xcoeffs: ~A?" data))))

      (test-gen-equal (let ((f1 (make-fir-filter 3 (list->vct '(.5 .25 .125))) )) (fir-filter f1 1.0) f1)
		      (let ((f2 (make-fir-filter 3 (list->vct '(.5 .25 .125))) )) (fir-filter f2 1.0) f2)
		      (let ((f3 (make-fir-filter 3 (list->vct '(.75 .25 .125))))) (fir-filter f3 1.0) f3))
      (test-gen-equal (let ((f1 (make-fir-filter 3 (list->vct '(.5 .25 .125))) )) (fir-filter f1 1.0) f1)
		      (let ((f2 (make-fir-filter 3 (list->vct '(.5 .25 .125))) )) (fir-filter f2 1.0) f2)
		      (let ((f3 (make-fir-filter 2 (list->vct '(.5 .25))))) (fir-filter f3 1.0) f3))

      (let* ((coeffs (list .1 .2 .3 .4 .4 .3 .2 .1))
	     (flt (make-fir-filter 8 (list->vct coeffs)))
	     (es (make-vector 8)))
	(do ((i 0 (1+ i)))
	    ((= i 8))
	  (vector-set! es i (make-env (list 0 (list-ref coeffs i) 1 0) :end 101)))
	(vector-set! es 5 (make-env '(0 .4 1 1) :end 101))
	(let ((data (make-vct 100)))
	  (do ((k 0 (1+ k)))
	      ((= k 100))
	    (let ((val (fir-filter flt (if (= (modulo k 12) 0) 1.0 0.0)))
		  (xcof (mus-xcoeffs flt)))
	      (do ((i 0 (1+ i)))
		  ((= i 8))
		(vct-set! xcof i (env (vector-ref es i))))
	      (vct-set! data k val)))
	  (if (or (fneq (vct-ref data 1) .2)
		  (fneq (vct-ref data 10) 0.0)
		  (fneq (vct-ref data 18) 0.166)
		  (fneq (vct-ref data 89) 0.923))
	      (snd-display ";filter xcoeffs: ~A?" data))))

      (let ((gen (make-iir-filter 3 (list->vct '(.5 .25 .125))))
	    (v0 (make-vct 10))
	    (gen1 (make-iir-filter 3 (list->vct '(.5 .25 .125))))
	    (v1 (make-vct 10)))
	(print-and-check gen 
			 "iir_filter"
			 "iir_filter: order: 3"
			 "flt order: 3, state (local): [0.000 0.000 0.000], x: nil, y: [0.500 0.250 0.125]")
	(vct-set! v0 0 (iir-filter gen 1.0))
	(do ((i 1 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (iir-filter gen 0.0)))
	(vct-map! v1 (let ((inp 1.0))
		       (lambda ()
			 (let ((val (if (iir-filter? gen1) (iir-filter gen1 inp) -1.0)))
			   (set! inp 0.0)
			   val))))
	(if (not (vequal v0 v1)) (snd-display ";map iir-filter: ~A ~A" v0 v1))
	(if (not (iir-filter? gen)) (snd-display ";~A not iir-filter?" gen))
	(if (not (= (mus-length gen) 3)) (snd-display ";iir-filter length: ~D?" (mus-length gen)))
	(if (or (fneq (vct-ref v0 1) -0.25) (fneq (vct-ref v0 2) -.062)) (snd-display ";iir-filter output: ~A" v0))
	(let ((data (mus-ycoeffs gen)))
	  (if (fneq (vct-ref data 1) .25) (snd-display ";iir-filter ycoeffs: ~A?" data))))

      (test-gen-equal (let ((f1 (make-iir-filter 3 (list->vct '(.5 .25 .125))))) (iir-filter f1 1.0) f1)
		      (let ((f2 (make-iir-filter 3 (list->vct '(.5 .25 .125))) )) (iir-filter f2 1.0) f2)
		      (let ((f3 (make-iir-filter 3 (list->vct '(.75 .25 .125))))) (iir-filter f3 1.0) f3))
      (test-gen-equal (let ((f1 (make-iir-filter 3 (list->vct '(.5 .25 .125))) )) (iir-filter f1 1.0) f1)
		      (let ((f2 (make-iir-filter 3 (list->vct '(.5 .25 .125))) )) (iir-filter f2 1.0) f2)
		      (let ((f3 (make-iir-filter 2 (list->vct '(.5 .25))))) (iir-filter f3 1.0) f3))

      (let ((gen (make-filter 3 (list->vct '(.5 .25 .125)) (list->vct '(.5 .25 .125))))
	    (v0 (make-vct 10))
	    (gen1 (make-filter 3 (list->vct '(.5 .25 .125)) (list->vct '(.5 .25 .125))))
	    (v1 (make-vct 10)))
	(print-and-check gen 
			 "filter"
			 "filter: order: 3"
			 "flt order: 3, state (local): [0.000 0.000 0.000], x: [0.500 0.250 0.125], y: [0.500 0.250 0.125]")
	(vct-set! v0 0 (filter gen 1.0))
	(do ((i 1 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (filter gen 0.0)))
	(vct-map! v1 (let ((inp 1.0))
		       (lambda () 
			 (let ((val (if (filter? gen1) (filter gen1 inp) -1.0)))
			   (set! inp 0.0)
			   val))))
	(if (not (vequal v0 v1)) (snd-display ";map filter: ~A ~A" v0 v1))
	(if (not (filter? gen)) (snd-display ";~A not filter?" gen))
	(if (not (= (mus-length gen) 3)) (snd-display ";filter length: ~D?" (mus-length gen)))
	(if (or (fneq (vct-ref v0 1) 0.125) (fneq (vct-ref v0 2) .031)) (snd-display ";filter output: ~A" v0))
	(let ((xs (mus-xcoeffs gen))
	      (ys (mus-ycoeffs gen)))
	  (if (or (not (equal? xs (list->vct '(.5 .25 .125))))
		  (not (equal? xs ys)))
	      (snd-display ";mus-xcoeffs: ~A ~A?" xs ys))))

      (let ((var (catch #t (lambda () (make-filter :order 2 :xcoeffs (vct 1.0 0.5) :ycoeffs (vct 2.0 1.0 0.5))) (lambda args args))))
	(if (not (eq? (car var) 'wrong-type-arg))
	    (snd-display ";make-filter bad coeffs: ~A" var)))
      (let ((var (catch #t (lambda () (make-fir-filter :order 22 :xcoeffs (vct 1.0 0.5))) (lambda args args))))
	(if (not (eq? (car var) 'wrong-type-arg))
	    (snd-display ";make-fir-filter bad coeffs: ~A" var)))
      (let ((var (catch #t (lambda () (make-iir-filter :order 22 :ycoeffs (vct 1.0 0.5))) (lambda args args))))
	(if (not (eq? (car var) 'wrong-type-arg))
	    (snd-display ";make-iir-filter bad coeffs: ~A" var)))
      (let ((var (catch #t (lambda () (make-fir-filter -1)) (lambda args args))))
	(if (not (eq? (car var) 'out-of-range))
	    (snd-display ";make-fir-filter bad order: ~A" var)))
      (let ((var (make-filter :order 2 :ycoeffs (vct 1.0 0.5))))
	(if (not (iir-filter? var))
	    (snd-display ";make-filter with only y: ~A" var)))

      (test-gen-equal (let ((f1 (make-filter 3 (list->vct '(.5 .25 .125)) (list->vct '(.5 .25 .125))))) (filter f1 1.0) f1)
		      (let ((f2 (make-filter 3 (list->vct '(.5 .25 .125)) (list->vct '(.5 .25 .125))))) (filter f2 1.0) f2)
		      (let ((f3 (make-filter 3 (list->vct '(.5 .25 .125)) (list->vct '(.5 .5 .5))))) (filter f3 1.0) f3))
      (test-gen-equal (let ((f1 (make-filter 3 (list->vct '(.5 .25 .125)) (list->vct '(.5 .25 .125))))) (filter f1 1.0) f1)
		      (let ((f2 (make-filter 3 (list->vct '(.5 .25 .125)) (list->vct '(.5 .25 .125))))) (filter f2 1.0) f2)
		      (let ((f3 (make-filter 3 (list->vct '(.5 .5 .125)) (list->vct '(.5 .25 .0625))))) (filter f3 1.0) f3))

      (let ((var (catch #t (lambda () (make-filter 0)) (lambda args args))))
	(if (not (eq? (car var) 'no-data))
	    (snd-display ";make-filter no coeffs: ~A" var)))

      (let ((gen (make-sawtooth-wave 440.0))
	    (v0 (make-vct 10))
	    (gen1 (make-sawtooth-wave 440.0))
	    (v1 (make-vct 10)))
	(print-and-check gen 
			 "sawtooth_wave"
			 "sawtooth freq: 440.000Hz, phase: 3.142, amp: 1.000"
			 "sw current_value: 0.000000, freq: 0.125379, phase: 3.141593, base: 0.318310")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (sawtooth-wave gen 0.0)))
	(vct-map! v1 (lambda () (if (sawtooth-wave? gen1) (sawtooth-wave gen1 0.0) -1.0)))
	(if (not (vequal v0 v1)) (snd-display ";map sawtooth: ~A ~A" v0 v1))
	(if (not (sawtooth-wave? gen)) (snd-display ";~A not sawtooth-wave?" gen))
	(if (fneq (mus-phase gen) 4.39538) (snd-display ";sawtooth-wave phase: ~F?" (mus-phase gen))) ;starts at pi
	(if (fneq (mus-frequency gen) 440.0) (snd-display ";sawtooth-wave frequency: ~F?" (mus-frequency gen)))
	(set! (mus-frequency gen) 100.0)
	(if (fneq (mus-frequency gen) 100.0) (snd-display ";set! sawtooth-wave frequency: ~F?" (mus-frequency gen)))
	(if (fneq (mus-scaler gen) 1.0) (snd-display ";sawtooth-wave scaler: ~F?" (mus-scaler gen)))
	(set! (mus-scaler gen) 0.5)
	(if (fneq (mus-scaler gen) 0.5) (snd-display ";set! sawtooth-wave scaler: ~F?" (mus-scaler gen)))
	(if (or (fneq (vct-ref v0 1) 0.04) (fneq (vct-ref v0 8) .319)) (snd-display ";sawtooth-wave output: ~A" v0)))

      (test-gen-equal (make-sawtooth-wave 440.0) (make-sawtooth-wave 440.0) (make-sawtooth-wave 120.0))
      (test-gen-equal (make-sawtooth-wave 440.0) (make-sawtooth-wave 440.0) (make-sawtooth-wave 440.0 1.0 1.0))
      (test-gen-equal (make-sawtooth-wave 440.0) (make-sawtooth-wave 440.0) (make-sawtooth-wave 440.0 0.5))

      (let ((gen (make-square-wave 440.0))
	    (v0 (make-vct 10))
	    (gen1 (make-square-wave 440.0))
	    (v1 (make-vct 10)))
	(print-and-check gen 
			 "square_wave"
			 "square_wave freq: 440.000Hz, phase: 0.000, amp: 1.000"
			 "sw current_value: 1.000000, freq: 0.125379, phase: 0.000000, base: 1.000000")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (square-wave gen 0.0)))
	(let ((w 1.0))
	  (vct-map! v1 (lambda () 
			 (set! w (mus-width gen1))
			 (if (square-wave? gen1) (square-wave gen1 0.0) -1.0)))
	  (if (fneq w 0.5) (snd-display ";mus-width opt: ~A" w)))
	(if (not (vequal v0 v1)) (snd-display ";map square-wave: ~A ~A" v0 v1))
	(if (not (square-wave? gen)) (snd-display ";~A not square-wave?" gen))
	(if (fneq (mus-phase gen) 1.253787) (snd-display ";square-wave phase: ~F?" (mus-phase gen)))
	(if (fneq (mus-frequency gen) 440.0) (snd-display ";square-wave frequency: ~F?" (mus-frequency gen)))
	(if (fneq (mus-scaler gen) 1.0) (snd-display ";square-wave scaler: ~F?" (mus-scaler gen)))
	(set! (mus-scaler gen) 0.5)
	(if (fneq (mus-scaler gen) 0.5) (snd-display ";set! square-wave scaler: ~F?" (mus-scaler gen)))
	(if (fneq (mus-width gen) 0.5) (snd-display ";square-wave width: ~A" (mus-width gen)))
	(set! (mus-width gen) 0.75)
	(if (fneq (mus-width gen) 0.75) (snd-display ";set! square-wave width: ~A" (mus-width gen)))
	(if (or (fneq (vct-ref v0 1) 1.0) (fneq (vct-ref v0 8) 1.0)) (snd-display ";square-wave output: ~A" v0)))

      (test-gen-equal (make-square-wave 440.0) (make-square-wave 440.0) (make-square-wave 120.0))
      (test-gen-equal (make-square-wave 440.0) (make-square-wave 440.0) (make-square-wave 440.0 1.0 1.0))
      (test-gen-equal (make-square-wave 440.0) (make-square-wave 440.0) (make-square-wave 440.0 0.5))

      (let ((gen (make-triangle-wave 440.0))
	    (gen1 (make-triangle-wave 440.0 1.0 pi))
	    (v0 (make-vct 10))
	    (gen2 (make-triangle-wave 440.0))
	    (v1 (make-vct 10)))
	(print-and-check gen 
			 "triangle_wave"
			 "triangle_wave freq: 440.000Hz, phase: 0.000, amp: 1.000"
			 "sw current_value: 0.000000, freq: 0.125379, phase: 0.000000, base: 0.636620")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (triangle-wave gen 0.0)))
	(vct-map! v1 (lambda () (if (triangle-wave? gen2) (triangle-wave gen2 0.0) -1.0)))
	(if (not (vequal v0 v1)) (snd-display ";map triangle-wave: ~A ~A" v0 v1))
	(if (not (triangle-wave? gen)) (snd-display ";~A not triangle-wave?" gen))
	(if (fneq (mus-phase gen) 1.253787) (snd-display ";triangle-wave phase: ~F?" (mus-phase gen)))
	(if (fneq (mus-phase gen1) pi) (snd-display ";init triangle-wave phase: ~F?" (mus-phase gen1)))
	(if (fneq (mus-frequency gen) 440.0) (snd-display ";triangle-wave frequency: ~F?" (mus-frequency gen)))
	(if (fneq (mus-scaler gen) 1.0) (snd-display ";triangle-wave scaler: ~F?" (mus-scaler gen)))
	(set! (mus-scaler gen) 0.5)
	(if (fneq (mus-scaler gen) 0.5) (snd-display ";set! triangle-wave scaler: ~F?" (mus-scaler gen)))
	(if (or (fneq (vct-ref v0 1) 0.080) (fneq (vct-ref v0 8) 0.639)) (snd-display ";triangle-wave output: ~A" v0)))

      (test-gen-equal (make-triangle-wave 440.0) (make-triangle-wave 440.0) (make-triangle-wave 120.0))
      (test-gen-equal (make-triangle-wave 440.0) (make-triangle-wave 440.0) (make-triangle-wave 440.0 1.0 1.0))
      (test-gen-equal (make-triangle-wave 440.0) (make-triangle-wave 440.0) (make-triangle-wave 440.0 0.5))

      (let ((gen (make-pulse-train 440.0))
	    (v0 (make-vct 10))
	    (gen1 (make-pulse-train 440.0))
	    (v1 (make-vct 10)))
	(print-and-check gen 
			 "pulse_train"
			 "pulse_train freq: 440.000Hz, phase: 6.283, amp: 1.000"
			 "sw current_value: 0.000000, freq: 0.125379, phase: 6.283185, base: 1.000000")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (pulse-train gen 0.0)))
	(vct-map! v1 (lambda () (if (pulse-train? gen1) (pulse-train gen1 0.0) -1.0)))
	(if (not (vequal v0 v1)) (snd-display ";map pulse-train: ~A ~A" v0 v1))
	(if (not (pulse-train? gen)) (snd-display ";~A not pulse-train?" gen))
	(if (fneq (mus-phase gen) 1.253787) (snd-display ";pulse-train phase: ~F?" (mus-phase gen)))
	(if (fneq (mus-frequency gen) 440.0) (snd-display ";pulse-train frequency: ~F?" (mus-frequency gen)))
	(if (fneq (mus-scaler gen) 1.0) (snd-display ";pulse-train scaler: ~F?" (mus-scaler gen)))
	(set! (mus-scaler gen) 0.5)
	(if (fneq (mus-scaler gen) 0.5) (snd-display ";set! pulse-train scaler: ~F?" (mus-scaler gen)))
	(if (or (fneq (vct-ref v0 0) 1.0) (fneq (vct-ref v0 8) 0.0)) (snd-display ";pulse-train output: ~A" v0)))

      (test-gen-equal (make-pulse-train 440.0) (make-pulse-train 440.0) (make-pulse-train 120.0))
      (test-gen-equal (make-pulse-train 440.0) (make-pulse-train 440.0) (make-pulse-train 440.0 1.0 1.0))
      (test-gen-equal (make-pulse-train 440.0) (make-pulse-train 440.0) (make-pulse-train 440.0 0.5))

      (let ((gen (make-ppolar .1 1200.0))
	    (v0 (make-vct 10)))
	(vct-set! v0 0 (two-pole gen 1.0))
	(do ((i 1 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (two-pole gen 0.0)))
	(if (not (two-pole? gen)) (snd-display ";~A not ppolar?" gen))
	(if (not (= (mus-order gen) 2)) (snd-display ";ppolar order: ~D?" (mus-order gen)))
	(if (fneq (mus-a0 gen) 1.0) (snd-display ";ppolar a0: ~F?" (mus-a0 gen)))
	(if (fneq (mus-b1 gen) -.188) (snd-display ";ppolar b1: ~F?" (mus-b1 gen)))
	(if (fneq (mus-b2 gen) .01) (snd-display ";ppolar b2: ~F?" (mus-b2 gen)))
	(if (or (fneq (vct-ref v0 0) 1.0) (fneq (vct-ref v0 1) .188)) (snd-display ";ppolar output: ~A" v0)))

      (test-gen-equal (let ((z1 (make-ppolar .1 600.0))) (two-pole z1 1.0) z1)
		      (let ((z2 (make-ppolar .1 600.0))) (two-pole z2 1.0) z2)
		      (let ((z3 (make-ppolar .1 1200.0))) (two-pole z3 1.0) z3))
      (test-gen-equal (let ((z1 (make-ppolar .1 600.0))) (two-pole z1 1.0) z1)
		      (let ((z2 (make-ppolar .1 600.0))) (two-pole z2 1.0) z2)
		      (let ((z3 (make-ppolar .2 1200.0))) (two-pole z3 1.0) z3))
      (test-gen-equal (let ((z1 (make-ppolar .1 600.0))) (two-pole z1 1.0) z1)
		      (let ((z2 (make-ppolar .1 600.0))) (two-pole z2 1.0) z2)
		      (let ((z3 (make-ppolar .1 600.0))) (two-pole z3 0.5) z3))

      (let ((gen (make-zpolar :radius .1 :frequency 1200.0))
	    (v0 (make-vct 10)))
	(vct-set! v0 0 (two-zero gen 1.0))
	(do ((i 1 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (two-zero gen 0.0)))
	(if (not (two-zero? gen)) (snd-display ";~A not zpolar?" gen))
	(if (not (= (mus-order gen) 2)) (snd-display ";zpolar order: ~D?" (mus-order gen)))
	(if (fneq (mus-a0 gen) 1.0) (snd-display ";zpolar a0: ~F?" (mus-a0 gen)))
	(if (fneq (mus-a1 gen) -.188) (snd-display ";zpolar a1: ~F?" (mus-a1 gen)))
	(if (fneq (mus-a2 gen) .01) (snd-display ";zpolar a2: ~F?" (mus-a2 gen)))
	(if (or (fneq (vct-ref v0 0) 1.0) (fneq (vct-ref v0 1) -.188)) (snd-display ";zpolar output: ~A" v0)))

      (test-gen-equal (let ((z1 (make-zpolar .1 600.0))) (two-zero z1 1.0) z1)
		      (let ((z2 (make-zpolar .1 600.0))) (two-zero z2 1.0) z2)
		      (let ((z3 (make-zpolar .1 1200.0))) (two-zero z3 1.0) z3))
      (test-gen-equal (let ((z1 (make-zpolar .1 600.0))) (two-zero z1 1.0) z1)
		      (let ((z2 (make-zpolar .1 600.0))) (two-zero z2 1.0) z2)
		      (let ((z3 (make-zpolar .2 1200.0))) (two-zero z3 1.0) z3))
      (test-gen-equal (let ((z1 (make-zpolar .1 600.0))) (two-zero z1 1.0) z1)
		      (let ((z2 (make-zpolar .1 600.0))) (two-zero z2 1.0) z2)
		      (let ((z3 (make-zpolar .1 600.0))) (two-zero z3 0.5) z3))

      (let ((gen (make-formant .9 1200.0 1.0))
	    (v0 (make-vct 10))
	    (gen1 (make-formant .9 1200.0 1.0))
	    (v1 (make-vct 10)))
	(print-and-check gen 
			 "formant"
			 "formant: radius: 0.900, frequency: 1200.000, (gain: 1.000)"
			 "smpflt a0: 0.063710, a1: 1.000000, a2: -0.900000, b1: -1.695789, b2: 0.810000, x1: 0.000000, x2: 0.000000, y1: 0.000000, y2: 0.000000")
	(vct-set! v0 0 (formant gen 1.0))
	(do ((i 1 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (formant gen 0.0)))
	(vct-map! v1 (let ((inp 1.0))
		       (lambda () 
			 (let ((val (if (formant? gen1) (formant gen1 inp) -1.0)))
			   (set! inp 0.0)
			   val))))
	(if (not (vequal v0 v1)) (snd-display ";map formant: ~A ~A" v0 v1))
	(if (not (formant? gen)) (snd-display ";~A not formant?" gen))
	(if (not (= (mus-order gen) 2)) (snd-display ";formant order: ~D?" (mus-order gen)))
	(if (fneq (mus-a0 gen) 0.06371) (snd-display ";formant a0: ~F?" (mus-a0 gen)))
	(if (fneq (mus-a1 gen) 1.0) (snd-display ";formant a1: ~F?" (mus-a1 gen)))
	(if (fneq (mus-a2 gen) -0.9) (snd-display ";formant a2: ~F?" (mus-a2 gen)))
	(if (fneq (mus-b1 gen) -1.6957893) (snd-display ";formant b1: ~F?" (mus-b1 gen)))
	(if (fneq (mus-b2 gen) 0.81) (snd-display ";formant b2: ~F?" (mus-b2 gen)))
	(if (fneq (mus-formant-radius gen) .9) (snd-display ";formant radius: ~F?" (mus-formant-radius gen)))
	(if (fneq (mus-frequency gen) 1200.0) (snd-display ";formant frequency: ~F?" (mus-frequency gen)))
	(if (or (fneq (vct-ref v0 0) .064) (fneq (vct-ref v0 1) .108)) (snd-display ";formant output: ~A" v0))
	(set! (mus-a0 gen) .5) (if (fneq (mus-a0 gen) 0.5) (snd-display ";formant set-a0: ~F?" (mus-a0 gen)))
	(set! (mus-a1 gen) .5) (if (fneq (mus-a1 gen) 0.5) (snd-display ";formant set-a1: ~F?" (mus-a1 gen)))
	(set! (mus-a2 gen) .5) (if (fneq (mus-a2 gen) 0.5) (snd-display ";formant set-a2: ~F?" (mus-a2 gen)))
	(set! (mus-b1 gen) .5) (if (fneq (mus-b1 gen) 0.5) (snd-display ";formant set-b1: ~F?" (mus-b1 gen)))
	(set! (mus-b2 gen) .5) (if (fneq (mus-b2 gen) 0.5) (snd-display ";formant set-b2: ~F?" (mus-b2 gen)))
	(set! (mus-formant-radius gen) .01) 
	(if (fneq (mus-formant-radius gen) 0.01) (snd-display ";formant set-radius: ~F?" (mus-formant-radius gen))))

      (test-gen-equal (let ((f1 (make-formant .9 1200.0 1.0))) (formant f1 1.0) f1)
		      (let ((f2 (make-formant .9 1200.0 1.0))) (formant f2 1.0) f2)
		      (let ((f3 (make-formant .9 600.0 1.0))) (formant f3 1.0) f3))
      (test-gen-equal (let ((f1 (make-formant .9 1200.0 1.0))) (formant f1 1.0) f1)
		      (let ((f2 (make-formant .9 1200.0 1.0))) (formant f2 1.0) f2)
		      (let ((f3 (make-formant .99 1200.0 1.0))) (formant f3 1.0) f3))
      (test-gen-equal (let ((f1 (make-formant .9 1200.0 1.0))) (formant f1 1.0) f1)
		      (let ((f2 (make-formant .9 1200.0 1.0))) (formant f2 1.0) f2)
		      (let ((f3 (make-formant .9 1200.0 0.5))) (formant f3 1.0) f3))

      (let ((frm (make-formant .1 440.0)))
	(mus-set-formant-radius-and-frequency frm 2.0 100.0)
	(if (fneq (mus-formant-radius frm) 2.0) (snd-display ";set-formant-radius-etc: ~A" (mus-formant-radius frm)))
	(if (fneq (mus-frequency frm) 100.0) (snd-display ";set-formant-radius-etc (frq): ~A" (mus-frequency frm))))

      (let ((fs (make-vector 1))
	    (f0 (make-formant .1 1000.0))
	    (amps (make-vector 1 1.0))
	    (val 1.0)
	    (v0 (make-vct 10))
	    (v1 (make-vct 10)))
	(vector-set! fs 0 (make-formant .1 1000.0))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (formant f0 val))
	  (vct-set! v1 i (formant-bank amps fs val))
	  (set! val 0.0))
	(if (not (vequal v0 v1)) (snd-display ";formant bank: ~A ~A" v0 v1)))

      (let ((fs (make-vector 2))
	    (f0 (make-formant .1 1000.0))
	    (f1 (make-formant .2 100.0))
	    (amps (make-vector 2 1.0))
	    (val 1.0)
	    (v0 (make-vct 10))
	    (v1 (make-vct 10)))
	(vector-set! fs 0 (make-formant .1 1000.0))
	(vector-set! fs 1 (make-formant .2 100.0))
	(vector-set! amps 0 0.5)
	(vector-set! amps 1 0.25)
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (+ (* 0.5 (formant f0 val)) (* 0.25 (formant f1 val))))
	  (vct-set! v1 i (formant-bank amps fs val))
	  (set! val 0.0))
	(if (not (vequal v0 v1)) (snd-display ";formant bank 1: ~A ~A" v0 v1)))

      (let ((fs (make-vector 2))
	    (amps (make-vct 2 1.0))
	    (val 1.0)
	    (v (make-vct 5)))
	(vector-set! fs 0 (make-formant .1 1000.0))
	(vector-set! fs 1 (make-formant .2 100.0))
	(vct-set! amps 0 0.5)
	(vct-set! amps 1 0.25)
	(vct-map! v (lambda () (let ((res (formant-bank amps fs val))) (set! val 0.0) res)))
	(if (not (vequal v (vct 0.146 0.029 -0.011 -0.003 -0.000))) (snd-display ";run formant-bank: ~A" v)))

      (let ((ob (open-sound "oboe.snd")))
	(define (poltergeist frek amp R gain frek-env R-env)
	  ;; test courtesy of Anders Vinjar
	  (let ((filt (make-formant R frek gain))
		(fe (make-env :envelope frek-env :end (frames) :offset frek))
		(re (make-env :envelope R-env :end (frames) :offset R)))
	    (lambda (y)
	      (let ((outval (formant filt (* amp y))))
		(mus-set-formant-radius-and-frequency filt (env re) (env fe))
		outval))))
	(map-chan (poltergeist 300 0.1 0.0 30.0 '(0 100 1 4000.0) '(0 0.99 1 .9)))  ;; should sound like "whyieee?"
	(play-and-wait 0 ob)
	(close-sound ob))

      (let ((gen (make-mixer 2 .5 .25 .125 1.0))
	    (fr0 (make-frame 2 1.0 1.0))
	    (fr1 (make-frame 2 0.0 0.0)))
	(print-and-check gen 
			 "mixer"
			 "mixer: chans: 2, vals: [(0.500 0.250) (0.125 1.000)]"
			 "mixer: chans: 2, vals: [(0.500 0.250) (0.125 1.000)]")
	(print-and-check fr0 
			 "frame"
			 "frame[2]: [1.000 1.000]"
			 "frame[2]: [1.000 1.000]")
	(if (not (frame? fr0)) (snd-display ";~A not a frame?" fr0))
	(if (not (mixer? gen)) (snd-display ";~A not a mixer?" gen))
	(if (equal? fr0 fr1) (snd-display ";frame=? ~A ~A?" fr0 fr1))
	(if (not (= (mus-channels fr0) 2)) (snd-display ";frame channels: ~D?" (mus-channels fr0)))
	(if (not (= (mus-length fr1) 2)) (snd-display ";frame length: ~D?" (mus-length fr0)))
	(if (not (= (mus-channels gen) 2)) (snd-display ";mixer channels: ~D?" (mus-channels gen)))
	(frame->frame gen fr0 fr1)
	(if (or (fneq (frame-ref fr0 0) 1.0)
		(fneq (frame-ref fr1 1) 1.25)
		(fneq (mixer-ref gen 0 0) .5))
	    (snd-display ";fr0: ~A" fr0))
	(frame-set! fr1 0 1.0)
	(set! (frame-ref fr1 1) 1.0)
	(let ((fr3 (frame+ fr0 fr1))
	      (fr4 (frame* fr0 fr1))
	      (fr5 (sample->frame fr1 .5)))
	  (if (or (fneq (frame-ref fr3 0) 2.0)
		  (fneq (frame-ref fr4 0) 1.0))
	      (snd-display ";fr+*: ~A ~A" fr3 fr4))
	  (if (fneq (frame-ref fr5 0) .5) 
	      (snd-display ";sample->frame: ~A?" (frame-ref fr5 0))))
	(let ((fr3 (make-frame 2))
	      (fr4 (make-frame 4)))
	  (frame-set! fr3 0 1.0)
	  (set! (frame-ref fr4 0) 0.5)
	  (frame-set! fr4 2 1.0)
	  (if (not (feql (frame->list (frame+ fr3 fr4)) (list 1.5 0.0)))
	      (snd-display ";frame+ unequal chans: ~A?" (frame+ fr3 fr4))))
	(let ((fr3 (make-frame 2))
	      (fr4 (make-frame 4)))
	  (frame-set! fr3 0 1.0)
	  (frame-set! fr4 0 0.5)
	  (frame-set! fr4 2 1.0)
	  (if (not (feql (frame->list (frame* fr3 fr4)) (list 0.5 0.0)))
	      (snd-display ";frame* unequal chans: ~A?" (frame* fr3 fr4))))
	(let* ((mx1 (make-mixer 2 1.0 0.0 0.0 1.0))
	       (mx2 (mixer* gen mx1))
	       (fr4 (make-frame 2 1.0 1.0))
	       (fr5 (make-frame 2 1.0 1.0))
	       (val (frame->sample mx1 fr1)))
	  (if (fneq val 1.0) (snd-display ";frame->sample: ~A?" val))
	  (if (fneq (frame->sample fr5 fr4) 2.0) (snd-display ";frame->sample ~A" (frame->sample fr5 fr4)))
	  (if (not (equal? (frame->list fr1) (list 1.0 1.0))) (snd-display ";frame->list: ~A?" (frame->list fr1)))
	  (if (or (fneq (mixer-ref mx2 0 1) .25) (fneq (mixer-ref mx2 1 0) .125)) (snd-display ";mixer*: ~A?" mx2))
	  (if (not (equal? mx2 gen)) (snd-display ";mixer=? ~A ~A?" gen mx2))
	  (if (equal? mx2 mx1) (snd-display ";mixer/=? ~A ~A?" mx1 mx2))
	  ;; mus-data doesn't apply from scheme level here
	  ;(if (not (vct? (mus-data fr4))) (snd-display ";mus-data frame: ~A" (mus-data fr4)))
	  ;(if (not (vct? (mus-data mx1))) (snd-display ";mus-data mixer: ~A" (mus-data mx1)))
	  (mixer-set! mx2 0 0 2.0)
	  (if (fneq (mixer-ref mx2 0 0) 2.0) (snd-display ";mixer-set: ~A?" mx2))
	  (set! fr0 (sample->frame mx2 1.0))
	  (if (or (fneq (frame-ref fr0 0) 2.0) (fneq (frame-ref fr0 1) .25)) (snd-display ";sample->frame: ~A?" fr0))
	  (let ((frout (make-frame 2)))
	    (sample->frame mx2 1.0 frout)
	    (if (not (equal? frout fr0)) (snd-display ";sample->frame via frout: ~A ~A?" frout fr0)))))

      (let ((var (catch #t (lambda () (make-mixer 2 0.0 0.0 0.0 0.0 0.0)) (lambda args args))))
	(if (not (eq? (car var) 'mus-error))
	    (snd-display ";make-mixer extra args: ~A" var)))
      (let ((var (catch #t (lambda () (let ((fr1 (make-frame 2 1.0 0.0))) (frame->sample (make-oscil) fr1))) (lambda args args))))
	(if (not (eq? (car var) 'mus-error))
	    (snd-display ";frame->sample bad arg: ~A" var)))

      (let ((fr1 (make-frame 1 1))
	    (fr2 (make-frame 2 1 2))
	    (fr4 (make-frame 4 1 2 3 4)) 
	    (fr8 (make-frame 8 1 2 3 4 5 6 7 8))
	    (mx1 (make-mixer 1 5))
	    (mx1id (make-mixer 1 1))
	    (mx2 (make-mixer 2 1 2 3 4))
	    (mx2id (make-mixer 2 1 0 0 1))
	    (mx4 (make-mixer 4))
	    (mx4id (make-mixer 4))
	    (mx8 (make-mixer 8))
	    (mx8id (make-mixer 8)))
	(do ((i 0 (1+ i)))
	    ((= i 4))
	  (mixer-set! mx4id i i 1)
	  (set! (mixer-ref mx4 0 i) 1))
	(do ((i 0 (1+ i)))
	    ((= i 8))
	  (mixer-set! mx8id i i 1)
	  (mixer-set! mx8 i 0 1))
	(if (not (equal? (frame->frame mx1id fr1) (make-frame 1 1))) (snd-display ";frame->frame 1 id: ~A?"            (frame->frame mx1id fr1)))
	(if (not (equal? (frame->frame mx1 fr1) (make-frame 1 5))) (snd-display ";frame->frame 1: ~A?"                 (frame->frame mx1 fr1)))  
	(if (not (equal? (frame->frame mx2id fr1) (make-frame 2 1 0))) (snd-display ";frame->frame 2 1 id: ~A?"        (frame->frame mx2id fr1)))  
	(if (not (equal? (frame->frame mx2 fr1) (make-frame 2 1 2))) (snd-display ";frame->frame 2 1: ~A?"             (frame->frame mx2 fr1)))  
	(if (not (equal? (frame->frame mx4 fr1) (make-frame 4 1 1 1 1))) (snd-display ";frame->frame 4 1: ~A?"         (frame->frame mx4 fr1)))  
	(if (not (equal? (frame->frame mx8 fr1) (make-frame 8 1 0 0 0 0 0 0 0))) (snd-display ";frame->frame 8 1: ~A?" (frame->frame mx8 fr1))) 
	(if (not (equal? (frame->frame mx1 fr2) (make-frame 1 5))) (snd-display ";frame->frame 1 2: ~A?"               (frame->frame mx1 fr2)))   
	(if (not (equal? (frame->frame mx2id fr2) (make-frame 2 1 2))) (snd-display ";frame->frame 2id 2: ~A?"         (frame->frame mx2id fr2)))  
	(if (not (equal? (frame->frame mx2 fr2) (make-frame 2 7 10))) (snd-display ";frame->frame 2 2: ~A?"            (frame->frame mx2 fr2)))  
	(if (not (equal? (frame->frame mx4id fr2) (make-frame 4 1 2 0 0))) (snd-display ";frame->frame 4id 2: ~A?"     (frame->frame mx4id fr2)))  
	(if (not (equal? (frame->frame mx8id fr2) (make-frame 8 1 2 0 0 0 0 0 0))) (snd-display ";frame->frame 8id 2: ~A?" (frame->frame mx8id fr2)))  
	(if (not (equal? (frame->frame mx4 fr2) (make-frame 4 1 1 1 1))) (snd-display ";frame->frame 4 2: ~A?"         (frame->frame mx4 fr2)))  
	(if (not (equal? (frame->frame mx8 fr2) (make-frame 8 3 0 0 0 0 0 0 0))) (snd-display ";frame->frame 8 2: ~A?" (frame->frame mx8 fr2))) 
	(if (not (equal? (frame->frame mx1 fr4) (make-frame 1 5))) (snd-display ";frame->frame 1 4: ~A?"               (frame->frame mx1 fr4))) 
	(if (not (equal? (frame->frame mx1 fr8) (make-frame 1 5))) (snd-display ";frame->frame 1 8: ~A?"               (frame->frame mx1 fr8))) 
	(if (not (equal? (frame->frame mx8id fr2) (make-frame 8 1 2 0 0 0 0 0 0))) (snd-display ";frame->frame 8id 2: ~A?" (frame->frame mx8id fr2)))
	(if (not (equal? (frame->frame mx4id fr2) (make-frame 4 1 2 0 0))) (snd-display ";frame->frame 4id 2: ~A?"     (frame->frame mx4id fr2)))  
	(if (not (equal? (frame->frame mx8 fr4) (make-frame 8 10 0 0 0 0 0 0 0))) (snd-display ";frame->frame 8 4: ~A?" (frame->frame mx8 fr4))) 
	(if (not (equal? (frame->frame mx4 fr4) (make-frame 4 1 1 1 1))) (snd-display ";frame->frame 4 4: ~A?"         (frame->frame mx4 fr4))))

      (let ((fr1 (make-frame 2))
	    (fr2 (make-frame 2))
	    (mx1 (make-mixer 2))
	    (mx2 (make-mixer 2)))
	(frame-set! fr1 0 .1)
	(let ((fradd (frame+ fr1 fr1 fr2)))
	  (if (not (equal? fr2 fradd)) (snd-display ";frame+ with res frame: ~A ~A" fr2 fradd))
	  (if (not (equal? fr2 (make-frame 2 0.2 0.0))) (snd-display ";frame+ res: ~A" fr2))
	  (set! fradd (frame* fr1 fr1 fr2))
	  (if (not (equal? fr2 fradd)) (snd-display ";frame* with res frame: ~A ~A" fr2 fradd))
	  (if (or (fneq (frame-ref fr2 0) .01) (fneq (frame-ref fr2 1) 0.0)) (snd-display ";frame* res: ~A" fr2)))
	(set! (mixer-ref mx1 0 0) .1)
	(let ((mxadd (mixer* mx1 mx1 mx2)))
	  (if (not (equal? mx2 mxadd)) (snd-display ";mixer* with res frame: ~A ~A" mx2 mxadd))
	  (if (fneq (mixer-ref mx2 0 0) .01) (snd-display ";mixer* res: ~A" mx2))))

      (for-each 
       (lambda (chans)
	 (let ((m1 (make-mixer chans)))
	   (if (or (not (= (mus-channels m1) chans))
		   (not (= (mus-length m1) chans)))
	       (snd-display ";mixer ~A chans but: ~A ~A" chans (mus-channels m1) (mus-length m1)))
	   (do ((i 0 (1+ i)))
	       ((= i chans))
	     (do ((j 0 (1+ j)))
		 ((= j chans))
	       (mixer-set! m1 i j (+ (* i .01) (* j .1)))))
	   (do ((i 0 (1+ i)))
	       ((= i chans))
	     (do ((j 0 (1+ j)))
		 ((= j chans))
	       (if (fneq (mixer-ref m1 i j) (+ (* i .01) (* j .1)))
		   (snd-display ";mixer[~A ~A] = ~A (~A)?" i j (mixer-ref m1 i j) (+ (* i .01) (* j .1))))))
	   (let ((mempty (make-mixer chans))
		 (midentity (make-mixer chans))
		 (mpick (make-mixer chans)))
	     (do ((i 0 (1+ i)))
		 ((= i chans))
	       (mixer-set! midentity i i 1.0))
	     (mixer-set! mpick (1- chans) (1- chans) 1.0)
	     (let ((mzero (mixer* m1 mempty))
		   (msame (mixer* m1 midentity))
		   (mone (mixer* m1 mpick)))
	       (do ((i 0 (1+ i)))
		   ((= i chans))
		 (do ((j 0 (1+ j)))
		     ((= j chans))
		   (if (fneq (mixer-ref mzero i j) 0.0) (snd-display ";mzero ~A ~A = ~A?" i j (mixer-ref mzero i j)))
		   (if (fneq (mixer-ref m1 i j) (mixer-ref msame i j)) (snd-display ";msame ~A ~A?" (mixer-ref msame i j) (mixer-ref m1 i j)))
		   (if (and (fneq (mixer-ref mone i j) 0.0)
			    (not (= i (1- chans)))
			    (not (= j (1- chans))))
		       (snd-display ";mone ~A ~A = ~A?" i j (mixer-ref mone i j)))))))))
       (list 1 2 4 8))

      (let ((gen (make-fft-window hamming-window 16)))
	(if (not (vequal gen (vct 0.080 0.115 0.215 0.364 0.540 0.716 0.865 1.000 1.000 0.865 0.716 0.540 0.364 0.215 0.115 0.080)))
	    (snd-display ";hamming window: ~A" gen)))
      (let ((gen (make-fft-window rectangular-window 16)))
	(if (not (vequal gen (vct 1.000 1.000 1.000 1.000 1.000 1.000 1.000 1.000 1.000 1.000 1.000 1.000 1.000 1.000 1.000 1.000)))
	    (snd-display ";rectangular window: ~A" gen)))
      (let ((gen (make-fft-window hanning-window 16)))
	(if (not (vequal gen (vct 0.000 0.038 0.146 0.309 0.500 0.691 0.854 1.000 1.000 0.854 0.691 0.500 0.309 0.146 0.038 0.000)))
	    (snd-display ";hanning window: ~A" gen)))
      (let ((gen (make-fft-window welch-window 16)))
	(if (not (vequal gen (vct 0.000 0.234 0.438 0.609 0.750 0.859 0.938 1.000 1.000 0.938 0.859 0.750 0.609 0.438 0.234 0.000)))
	    (snd-display ";welch window: ~A" gen)))
      (let ((gen (make-fft-window parzen-window 16)))
	(if (not (vequal gen (vct 0.000 0.125 0.250 0.375 0.500 0.625 0.750 1.000 1.000 0.750 0.625 0.500 0.375 0.250 0.125 0.000)))
	    (snd-display ";parzen window: ~A" gen)))
      (let ((gen (make-fft-window bartlett-window 16)))
	(if (not (vequal gen (vct 0.000 0.125 0.250 0.375 0.500 0.625 0.750 1.000 1.000 0.750 0.625 0.500 0.375 0.250 0.125 0.000)))
	    (snd-display ";bartlett window: ~A" gen)))
      (let ((gen (make-fft-window blackman2-window 16)))
	(if (not (vequal gen (vct 0.005 0.020 0.071 0.177 0.344 0.558 0.775 1.000 1.000 0.775 0.558 0.344 0.177 0.071 0.020 0.005)))
	    (snd-display ";blackman2 window: ~A" gen)))
      (let ((gen (make-fft-window blackman3-window 16)))
	(if (not (vequal gen (vct 0.000 0.003 0.022 0.083 0.217 0.435 0.696 1.000 1.000 0.696 0.435 0.217 0.083 0.022 0.003 0.000)))
	    (snd-display ";blackman3 window: ~A" gen)))
      (let ((gen (make-fft-window blackman4-window 16)))
	(if (not (vequal gen (vct 0.002 0.002 0.003 0.017 0.084 0.263 0.562 1.000 1.000 0.562 0.263 0.084 0.017 0.003 0.002 0.002)))
	    (snd-display ";blackman4 window: ~A" gen)))
      (let ((gen (make-fft-window exponential-window 16)))
	(if (not (vequal gen (vct 0.000 0.087 0.181 0.283 0.394 0.515 0.646 0.944 0.944 0.646 0.515 0.394 0.283 0.181 0.087 0.000)))
	    (snd-display ";exponential window: ~A" gen)))
      (let ((gen (make-fft-window riemann-window 16)))
	(if (not (vequal gen (vct 0.000 0.139 0.300 0.471 0.637 0.784 0.900 1.000 1.000 0.900 0.784 0.637 0.471 0.300 0.139 0.000)))
	    (snd-display ";riemann window: ~A" gen)))
      (let ((gen (make-fft-window kaiser-window 16 2.5)))
	(if (not (vequal gen (vct 0.304 0.426 0.550 0.670 0.779 0.871 0.941 1.000 1.000 0.941 0.871 0.779 0.670 0.550 0.426 0.304)))
	    (snd-display ";kaiser window: ~A" gen)))
      (let ((gen (make-fft-window cauchy-window 16 2.5)))
	(if (not (vequal gen (vct 0.138 0.173 0.221 0.291 0.390 0.532 0.719 1.000 1.000 0.719 0.532 0.390 0.291 0.221 0.173 0.138)))
	    (snd-display ";cauchy window: ~A" gen)))
      (let ((gen (make-fft-window poisson-window 16 2.5)))
	(if (not (vequal gen (vct 0.082 0.112 0.153 0.210 0.287 0.392 0.535 1.000 1.000 0.535 0.392 0.287 0.210 0.153 0.112 0.082)))
	    (snd-display ";poisson window: ~A" gen)))
      (let ((gen (make-fft-window gaussian-window 16 1.0)))
	(if (not (vequal gen (vct 0.607 0.682 0.755 0.823 0.882 0.932 0.969 1.000 1.000 0.969 0.932 0.882 0.823 0.755 0.682 0.607)))
	    (snd-display ";gaussian window: ~A" gen)))
      (let ((gen (make-fft-window tukey-window 16)))
	(if (not (vequal gen (vct 0.000 0.038 0.146 0.309 0.500 0.691 0.854 1.000 1.000 0.854 0.691 0.500 0.309 0.146 0.038 0.000)))
	    (snd-display ";tukey window: ~A" gen)))
      (without-errors
       (let ((gen (make-fft-window dolph-chebyshev-window 16 1.0)))
	 (if (not (vequal gen (vct 0.000 0.494 0.604 0.710 0.806 0.887 0.949 0.987 1.000 0.987 0.949 0.887 0.806 0.710 0.604 0.494)))
	     (snd-display ";dolph-chebyshev window: ~A" gen))))

      (let ((v0 (make-vct 10))
	    (gen (make-env '(0 0 1 1 2 0) :scaler 0.5 :end 10))
	    (v1 (make-vct 10))
	    (gen1 (make-env '(0 0 1 1 2 0) :scaler 0.5 :end 10)))
	(print-and-check gen 
			 "env"
			 "env: linear, pass: 0 (dur: 11), index: 0, scaler: 0.5000, offset: 0.0000, data: [0.000 0.000 1.000 1.000 2.000 0.000]"
			 "seg scaler: 0.5000, offset: 0.0000, rate: 0.100000, current_value: 0.000000, base: 1.000000, offset: 0.000000, scaler: 0.500000, power: 0.000000, init_y: 0.000000, init_power: 0.000000, pass: 0, end: 10, style: 0, index: 0, size: 3, original_data[6]: [0.000 0.000 1.000 1.000 2.000 0.000], rates[3]: [0.100 -0.100 0.000], passes[3]: [5 10 100000000]")
	(if (not (env? gen)) (snd-display ";~A not env?" gen))
	(if (fneq (mus-scaler gen) 0.5) (snd-display ";env scaler ~F?" (mus-scaler gen)))
	(if (fneq (mus-increment gen) 1.0) (snd-display ";env base (1.0): ~A?" (mus-increment gen)))
	(if (not (= (mus-length gen) 10)) (snd-display ";env length: ~A" (mus-length gen)))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (env gen)))
	(let ((off 123.0))
	  (vct-map! v1 (lambda () 
			 (set! off (mus-offset gen1))
			 (if (env? gen1) (env gen1) -1.0)))
	  (if (fneq off 0.0) (snd-display ";mus-offset opt: ~A" off)))
	(if (not (vequal v0 v1)) (snd-display ";map env: ~A ~A" v0 v1))
	(if (or (fneq (vct-ref v0 0) 0.0) (fneq (vct-ref v0 1) .1) (fneq (vct-ref v0 6) .4))
	    (snd-display ";~A output: ~A" gen v0))
	(if (fneq (env-interp 1.5 gen) 0.25) (snd-display ";env-interp ~A at 1.5: ~F?" gen (env-interp 1.5 gen)))
	(set! gen (make-env :envelope '(0 1 1 0) :base 32.0 :end 10))
	(if (fneq (mus-increment gen) 32.0) (snd-display ";env base (32.0): ~A?" (mus-increment gen)))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (env gen)))
	(if (or (fneq (vct-ref v0 0) 1.0) (fneq (vct-ref v0 1) .698) (fneq (vct-ref v0 8) .032))
	    (snd-display ";~A output: ~A" gen v0))
	(set! gen (make-env :envelope '(0 1 1 0) :base .0325 :end 10))
	(if (fneq (mus-increment gen) .0325) (snd-display ";env base (.0325): ~A?" (mus-increment gen)))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (env gen)))
	(if (or (fneq (vct-ref v0 0) 1.0) (fneq (vct-ref v0 1) .986) (fneq (vct-ref v0 8) .513))
	    (snd-display ";~A output: ~A" gen v0))
	(set! gen (make-env :envelope '(0 1 1 .5 2 0) :base 0.0 :end 10 :offset 1.0))
	(if (fneq (mus-offset gen) 1.0) (snd-display ";mus-offset: ~A" (mus-offset gen)))
	(if (fneq (mus-increment gen) 0.0) (snd-display ";env base (0.0): ~A?" (mus-increment gen)))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (if (= i 3)
	      (if (not (= (mus-location gen) 3))
		  (snd-display ";env location: ~A?" (mus-location gen))))
	  (vct-set! v0 i (env gen)))
	(if (or (fneq (vct-ref v0 0) 2.0) (fneq (vct-ref v0 6) 1.5) (fneq (vct-ref v0 8) 1.5))
	    (snd-display ";~A output: ~A" gen v0))
	(if (fneq (env-interp 1.5 gen) 1.5) (snd-display ";env-interp ~A at 1.5: ~F?" gen (env-interp 1.5 gen)))
	(set! (mus-location gen) 6)
	(if (not (= (mus-location gen) 6)) (snd-display ";set! mus-location ~A (6)?" (mus-location gen)))
	(let ((val (env gen)))
	  (if (fneq val 1.5) (snd-display ";set! mus-location 6 -> ~A (1.5)?" val)))
	(set! (mus-location gen) 0)
	(let ((val (env gen)))
	  (if (fneq val 2.0) (snd-display ";set! mus-location 0 -> ~A (2.0)?" val)))
	(let ((gen (make-env '(0 0 1 -1 2 0) :end 10)))
	  (do ((i 0 (1+ i)))
	      ((= i 5))
	    (let ((val (env gen)))
	      (if (fneq val (/ i -5.0)) (snd-display ";neg env: ~D ~A" i val))))
	  (do ((i 0 (1+ i)))
	      ((= i 5))
	    (let ((val (env gen)))
	      (if (fneq val (+ -1.0 (/ i 5.0))) (snd-display ";neg env: ~D ~A" (+ i 5) val)))))
	(let ((gen (make-env '(0 0 1 -1 2 0) :end 10 :base 0.5))
	      (v (vct 0.0 -0.14869 -0.31950 -0.51571 -0.74110 -1.0 -0.74110 -0.51571 -0.31950 -0.14869)))
	  (do ((i 0 (1+ i)))
	      ((= i 10))
	    (let ((val (env gen)))
	      (if (fneq val (vct-ref v i)) (snd-display ";neg exp env: ~D ~A" i val)))))

	(let ((e (make-env '(0 0 1 1) :end 9)))
	  (if (fneq (env-interp 1.0 e) 1.0) (snd-display ";env-interp 0011 at 1: ~A" (env-interp 1.0 e)))
	  (if (fneq (env-interp 2.0 e) 1.0) (snd-display ";env-interp 0011 at 2: ~A" (env-interp 2.0 e)))
	  (if (fneq (env-interp 0.0 e) 0.0) (snd-display ";env-interp 0011 at 0: ~A" (env-interp 0.0 e)))
	  (if (fneq (env-interp 0.45 e) 0.45) (snd-display ";env-interp 0011 at .45: ~A" (env-interp 0.45 e)))
	  (do ((i 0 (1+ i)))
	      ((= i 10))
	    (let ((val (env e)))
	      (if (fneq val (* i .111111)) (snd-display ";ramp env over 10: ~A at ~A" val i)))))
	(let ((e (make-env '(0 0 1 1) :end 9 :base 4.0)))
	  (if (fneq (env-interp 1.0 e) 1.0) (snd-display ";env-interp 0011 4 at 1: ~A" (env-interp 1.0 e)))
	  (if (fneq (env-interp 0.0 e) 0.0) (snd-display ";env-interp 0011 4 at 0: ~A" (env-interp 0.0 e)))
	  (if (fneq (env-interp 0.45 e) 0.2886) (snd-display ";env-interp 0011 4 at .45: ~A" (env-interp 0.45 e))))
	(let ((e (make-env '(0 0 1 1) :end 9 :base 0.2)))
	  (if (fneq (env-interp 1.0 e) 1.0) (snd-display ";env-interp 0011 2 at 1: ~A" (env-interp 1.0 e)))
	  (if (fneq (env-interp 0.0 e) 0.0) (snd-display ";env-interp 0011 2 at 0: ~A" (env-interp 0.0 e)))
	  (if (fneq (env-interp 0.45 e) 0.6441) (snd-display ";env-interp 0011 2 at .45: ~A" (env-interp 0.45 e))))

	(let ((e1 (make-env '(0 0 1 1) :base 32.0 :end 10))
	      (v (vct 0.000 0.013 0.032 0.059 0.097 0.150 0.226 0.333 0.484 0.698 1.00)))
	  (do ((i 0 (1+ i)))
	      ((> i 10))
	    (let ((val (env e1)))
	      (if (fneq val (vct-ref v i))
		  (snd-display ";exp env direct (32.0): ~A ~A" val (vct-ref v i))))))
	  
	(let ((e1 (make-env '(0 1 1 2) :base 32.0 :end 10))
	      (v (vct 1.000 1.013 1.032 1.059 1.097 1.150 1.226 1.333 1.484 1.698 2.00)))
	  (do ((i 0 (1+ i)))
	      ((> i 10))
	    (let ((val (env e1)))
	      (if (fneq val (vct-ref v i))
		  (snd-display ";exp env direct (32.0) offset: ~A ~A" val (vct-ref v i))))))
	  
	(let ((e1 (make-env '(0 0 1 1) :base 0.032 :end 10))
	      (v (vct 0.000 0.301 0.514 0.665 0.772 0.848 0.902 0.940 0.967 0.986 1.0)))
	  (do ((i 0 (1+ i)))
	      ((> i 10))
	    (let ((val (env e1)))
	      (if (fneq val (vct-ref v i))
		  (snd-display ";exp env direct (.032): ~A ~A" val (vct-ref v i))))))
	  
	(let ((e1 (make-env '(0 0 1 1) :base .03125 :end 10))
	      (e2 (make-env '(0 0 1 1 2 0) :base 32.0 :end 10))
	      (e3 (make-env '(0 0 .1 1 2 0) :base 1.1 :end 100)))
	  (do ((i 0 (1+ i)))
	      ((= i 10))
	    (let ((v1 (env-interp (* i .1) e1))
		  (v2 (env e1))
		  (v3 (env-interp (* i .2) e2))
		  (v4 (env e2)))
	      (if (ffneq v1 v2) (snd-display ";env-interp[rmp ~F]: ~A (~A)?" (* .1 i) v1 v2))
	      (if (ffneq v3 v4) (snd-display ";env-interp[pyr ~F]: ~A (~A)?" (* .2 i) v3 v4))))
	  (do ((i 0 (1+ i)))
	      ((= i 100))
	    (let ((v5 (env-interp (* i .02) e3))
		  (v6 (env e3)))
	      (if (ffneq v5 v6) (snd-display ";env-interp[tri ~F]: ~A (~A)?" (* .02 i) v5 v6)))))
	
	(let ((e1 (make-env '(0 0 1 1 2 0) :end 9))
	      (v1 (make-vct 11))
	      (v2 (make-vct 11))
	      (v3 (make-vct 11)))
	  (do ((i 0 (1+ i))) ((= i 11)) (vct-set! v1 i (env e1)))
	  (do ((i 0 (1+ i))) ((= i 11)) (vct-set! v2 i (env e1)))
	  (restart-env e1)
	  (do ((i 0 (1+ i))) ((= i 11)) (vct-set! v3 i (env e1)))
	  (if (not (vequal v1 v3)) (snd-display ";restart-env: ~A ~A?" v1 v3))
	  (if (not (vequal v2 (make-vct 11))) (snd-display ";restart-env 1: ~A?" v2)))

	(set! gen (make-env '(0 0 1 1 2 0) :end 10))
	(do ((i 0 (1+ i))) ((= i 4)) (env gen))
	(let ((val (env gen)))
	  (if (fneq val .8) (snd-display ";env(5): ~A?" val))
	  (restart-env gen)
	  (do ((i 0 (1+ i))) ((= i 4)) (env gen))
	  (set! val (env gen))
	  (if (fneq val .8) (snd-display ";restart-env: ~A?" val))
	  (set! (mus-location gen) 6)
	  (let ((val (env gen)))
	    (if (fneq val 0.8) (snd-display ";set! mus-location 6 -> ~A (0.8)?" val)))))
 
      (let ((gen (make-env '(0 0 1 1) :base .032 :end 11)))
	(set! (mus-location gen) 5)
	(let ((val (env gen)))
	  (if (fneq val 0.817)
	      (snd-display ";set env location with base: ~A ~A" val gen))))

      (test-gen-equal (make-env '(0 0 1 1 2 0) :scaler 0.5 :end 9) (make-env '(0 0 1 1 2 0) :scaler 0.5 :end 9) (make-env '(0 0 1 1 2 0) :scaler 0.25 :end 9))
      (test-gen-equal (make-env '(0 0 1 1 2 0) :scaler 0.5 :end 9) (make-env '(0 0 1 1 2 0) :scaler 0.5 :end 9) (make-env '(0 0 1 1 2 0) :scaler 0.5 :end 10))
      (test-gen-equal (make-env '(0 0 1 1 2 0) :scaler 0.5 :end 9) (make-env '(0 0 1 1 2 0) :scaler 0.5 :end 9) (make-env '(0 0 1 1 3 0) :scaler 0.5 :end 9))

      (let ((var (catch #t (lambda () (make-env :envelope '())) (lambda args args))))
	(if (not (eq? (car var) 'no-data))
	    (snd-display ";make-env null env: ~A" var)))
      (let ((var (catch #t (lambda () (make-env :end 0)) (lambda args args))))
	(if (not (eq? (car var) 'no-data))
	    (snd-display ";make-env no env: ~A" var)))
      (let ((var (catch #t (lambda () (make-env :envelope '(0 0) :end -1)) (lambda args args))))
	(if (not (eq? (car var) 'out-of-range))
	    (snd-display ";make-env bad end: ~A" var)))
      (let ((var (catch #t (lambda () (make-env :envelope '(0 0) :start -1)) (lambda args args))))
	(if (not (eq? (car var) 'out-of-range))
	    (snd-display ";make-env bad start: ~A" var)))
      (let ((var (catch #t (lambda () (make-env :envelope '(0 0) :duration -1.0)) (lambda args args))))
	(if (not (eq? (car var) 'out-of-range))
	    (snd-display ";make-env bad duration: ~A" var)))
      (let ((var (catch #t (lambda () (make-env :envelope '(0 0) :base -1.0)) (lambda args args))))
	(if (not (eq? (car var) 'out-of-range))
	    (snd-display ";make-env bad base: ~A" var)))
      (let ((var (catch #t (lambda () (make-env :envelope '(1 1 0 0) :end 10)) (lambda args args))))
	(if (not (eq? (car var) 'mus-error))
	    (snd-display ";make-env bad env 1 1 0 0: ~A" var)))
      (let ((var (catch #t (lambda () (make-env :envelope '(0 1 -1 0) :end 10)) (lambda args args))))
	(if (not (eq? (car var) 'mus-error))
	    (snd-display ";make-env bad env 0 1 -1 0: ~A" var)))

      (let ((gen (make-table-lookup 440.0 :wave (partials->wave '(1 1 2 1))))
	    (gen1 (make-table-lookup 440.0 :wave (partials->wave '(1 1 2 1) (make-vct 512))))
	    (gen2 (partials->wave '(1 1 2 1 3 1 4 1) #f #t))
	    (gen3 (make-table-lookup))
	    (v0 (make-vct 10))
	    (v1 (make-vct 10))
	    (gen4 (make-table-lookup 440.0 :wave (partials->wave '(1 1 2 1))))
	    (v2 (make-vct 10)))
	(print-and-check gen 
			 "table_lookup"
			 "table_lookup: freq: 440.000Hz, phase: 0.000, length: 512"
			 (mus-inspect gen))
	;; problem with mus-inspect here is that it includes the table pointer itself
	(if (not (= (mus-length gen) 512)) (snd-display ";table-lookup length: ~A?" (mus-length gen)))
	(if (not (= (mus-length gen3) 512)) (snd-display ";default table-lookup length: ~A?" (mus-length gen3)))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (table-lookup gen 0.0))
	  (vct-set! v1 i (mus-apply gen1 0.0)))
	(vct-map! v2 (lambda () (if (table-lookup? gen4) (table-lookup gen4 0.0) -1.0)))
	(if (not (vequal v0 v2)) (snd-display ";map table-lookup: ~A ~A" v0 v2))
	(set! gen4 (make-table-lookup 440.0 :wave (partials->wave '(1 1 2 1))))
	(vct-map! v2 (lambda () (table-lookup gen4)))
	(if (not (vequal v0 v2)) (snd-display ";map table-lookup (no fm): ~A ~A" v0 v2))
	(if (not (table-lookup? gen)) (snd-display ";~A not table-lookup?" gen))
	(if (not (vct? (mus-data gen))) (snd-display ";mus-data table-lookup: ~A" (mus-data gen)))
	(if (fneq (mus-phase gen) 1.253787) (snd-display ";table-lookup phase: ~F?" (mus-phase gen)))
	(set! (mus-phase gen) 1.0)
	(if (fneq (mus-phase gen) 1.0) (snd-display ";set! table-lookup phase: ~F?" (mus-phase gen)))
	(if (fneq (mus-frequency gen) 440.0) (snd-display ";table-lookup frequency: ~F?" (mus-frequency gen)))
	(set! (mus-frequency gen) 100.0)
	(if (fneq (mus-frequency gen) 100.0) (snd-display ";set! table-lookup frequency: ~F?" (mus-frequency gen)))
	(if (or (fneq (vct-ref v0 1) 0.373) (fneq (vct-ref v0 8) 1.75)) (snd-display ";table-lookup output: ~A" v0))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (if (fneq (vct-ref v0 i) (vct-ref v1 i))
	      (snd-display ";mus-apply table-lookup at ~D: ~A ~A?" i (vct-ref v0 i) (vct-ref v1 i))))
	(set! gen (make-table-lookup 440.0 :wave (phase-partials->wave (list 1 1 0 2 1 (* pi .5)))))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (table-lookup gen 0.0)))
	(if (or (fneq (vct-ref v0 1) 1.094) (fneq (vct-ref v0 8) .421)) (snd-display ";table-lookup phase output: ~A" v0))
	(if (or (fneq (vct-peak (partials->wave '(1 1 2 1))) 1.76035475730896)
		(fneq (vct-peak (partials->wave '(1 1 2 1) #f #t)) 1.0)
		(fneq (vct-peak (partials->wave '(1 1 2 1 3 1 4 1) #f #t)) 1.0))
	    (snd-display ";normalized partials?"))
	(set! (mus-data gen) (phase-partials->wave (list 1 1 0 2 1 (* pi .5)) #f #t)))

      (test-gen-equal (make-table-lookup 440.0 :wave (partials->wave '(1 1 2 1)))
		      (make-table-lookup 440.0 :wave (partials->wave '(1 1 2 1)))
		      (make-table-lookup 100.0 :wave (partials->wave '(1 1 2 1))))
      (test-gen-equal (make-table-lookup 440.0 :wave (partials->wave '(1 1 2 1)))
		      (make-table-lookup 440.0 :wave (partials->wave '(1 1 2 1)))
		      (make-table-lookup 440.0 :wave (partials->wave '(1 1 2 .5))))

      (let ((hi (make-table-lookup :size 256)))
	(if (not (= (mus-length hi) 256)) (snd-display ";table-lookup set length: ~A?" (mus-length hi))))
      (let ((tag (catch #t (lambda () (make-table-lookup :size 0)) (lambda args (car args)))))
	(if (not (eq? tag 'out-of-range)) (snd-display ";table-lookup size 0: ~A" tag)))

      (let ((gen0 (make-waveshape 440.0 :wave (partials->waveshape '(1 1))))
	    (gen (make-waveshape 440.0 :size 512 :partials '(1 1)))
	    (v0 (make-vct 10))
	    (gen1 (make-waveshape 440.0 :wave (partials->waveshape '(1 1))))
	    (v1 (make-vct 10)))
	(print-and-check gen 
			 "waveshape"
			 "waveshape freq: 440.000Hz, phase: 0.000, size: 512"
			 "ws freq: 0.125379, phase: 0.000000, offset: 256.000000, table[512 (external)]: [-1.000 -0.996 -0.992 -0.988 -0.984 -0.980 -0.977 -0.973...]")
	(if (not (= (mus-length gen) 512)) (snd-display ";waveshape length: ~A?" (mus-length gen)))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (let ((val0 (waveshape gen0 1.0 0.0))
		(val (waveshape gen 1.0 0.0)))
	    (if (fneq val val0) (snd-display ";waveshape: ~A /= ~F?" val val0))
	    (vct-set! v0 i val)))
	(vct-map! v1 (lambda () (if (waveshape? gen1) (waveshape gen1 1.0 0.0) -1.0)))
	(if (not (vequal v0 v1)) (snd-display ";map waveshape: ~A ~A" v0 v1))
	(set! gen1 (make-waveshape 440.0 :wave (partials->waveshape '(1 1))))
	(vct-map! v1 (lambda () (waveshape gen1 1.0)))
	(if (not (vequal v0 v1)) (snd-display ";1 map waveshape: ~A ~A" v0 v1))
	(if (not (waveshape? gen)) (snd-display ";~A not waveshape?" gen))
	(if (fneq (mus-phase gen) 1.253787) (snd-display ";waveshape phase: ~F?" (mus-phase gen)))
	(set! (mus-phase gen) 1.0)
	(if (fneq (mus-phase gen) 1.0) (snd-display ";set! waveshape phase: ~F?" (mus-phase gen)))
	(if (fneq (mus-frequency gen) 440.0) (snd-display ";waveshape frequency: ~F?" (mus-frequency gen)))
	(set! (mus-frequency gen) 100.0)
	(if (fneq (mus-frequency gen) 100.0) (snd-display ";waveshape frequency: ~F?" (mus-frequency gen)))
	(if (not (vct? (mus-data gen))) (snd-display ";mus-data waveshape: ~A" (mus-data gen)))
	(if (or (fneq (vct-ref v0 1) 0.125) (fneq (vct-ref v0 8) .843)) (snd-display ";waveshape output: ~A" v0))
	(set! (mus-data gen0) (make-vct 32))
	(set! (mus-length gen0) 32)
	(if (not (= (mus-length gen0) 32)) (snd-display ";set mus-length waveshape: ~A" (mus-length gen0))))

      (test-gen-equal (make-waveshape 440.0 :partials '(1 1)) (make-waveshape 440.0 :partials '(1 1)) (make-waveshape 100.0 :partials '(1 1)))
      (test-gen-equal (make-waveshape 440.0 :partials '(1 1)) (make-waveshape 440.0 :partials '(1 1)) (make-waveshape 4400.0 :partials '(1 1 2 .5)))

      (let ((var (catch #t (lambda () (make-waveshape 440.0 :partials '(1 1) :size #f)) (lambda args args))))
	(if (not (eq? (car var) 'wrong-type-arg))
	    (snd-display ";make-waveshape bad size: ~A" var)))
      (let ((var (catch #t (lambda () (make-waveshape 440.0 :wave 3.14)) (lambda args args))))
	(if (not (eq? (car var) 'wrong-type-arg))
	    (snd-display ";make-waveshape bad wave: ~A" var)))
      (let ((var (catch #t (lambda () (make-waveshape 440.0 :size 0)) (lambda args args))))
	(if (not (eq? (car var) 'out-of-range))
	    (snd-display ";make-waveshape bad size -1: ~A" var)))
      (let ((hi (make-waveshape :size 256)))
	(if (not (= (mus-length hi) 256)) (snd-display ";waveshape set length: ~A?" (mus-length hi))))

      (let ((gen (make-wave-train 440.0 0.0 (make-vct 20)))
	    (v0 (make-vct 10))
	    (gen1 (make-wave-train 440.0 0.0 (make-vct 20)))
	    (v1 (make-vct 10)))
	(print-and-check gen 
			 "wave_train"
			 "wave_train freq: 440.000Hz, phase: 0.000, size: 20"
			 "wt freq: 440.000000, phase: 0.000000, wave[20 (external)]: [0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000...], b: rblk buf[20 (local)]: [0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000...], loc: 0, fill_time: 0.000000, empty: 1")
	(do ((i 0 (1+ i)))
	    ((= i 20))
	  (vct-set! (mus-data gen) i (* i .5))
	  (vct-set! (mus-data gen1) i (vct-ref (mus-data gen) i)))
	(if (not (= (vct-length (mus-data gen)) 20)) (snd-display ";wave-train data length: ~A?" (vct-length (mus-data gen))))
	(if (not (= (mus-length gen) 20)) (snd-display ";wave-train length: ~A?" (mus-length gen)))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (wave-train gen 0.0)))
	(vct-map! v1 (lambda () (if (wave-train? gen1) (wave-train gen1) -1.0)))
	(if (not (vequal v0 v1)) (snd-display ";map wave-train: ~A ~A" v0 v1))
	(if (not (wave-train? gen)) (snd-display ";~A not wave-train?" gen))
	(if (fneq (mus-phase gen) 0.0) (snd-display ";wave-train phase: ~F?" (mus-phase gen)))
	(set! (mus-phase gen) 1.0)
	(if (fneq (mus-phase gen) 1.0) (snd-display ";set wave-train phase: ~F?" (mus-phase gen)))
	(if (fneq (mus-frequency gen) 440.0) (snd-display ";wave-train frequency: ~F?" (mus-frequency gen)))
	(set! (mus-frequency gen) 100.0)
	(if (fneq (mus-frequency gen) 100.0) (snd-display ";set wave-train freq: ~A" (mus-frequency gen)))
	(if (or (fneq (vct-ref v0 1) 0.5) (fneq (vct-ref v0 8) 4.0)) (snd-display ";wave-train output: ~A" v0))
	(if (not (vct? (mus-data gen))) (snd-display ";mus-data wave-train: ~A" (mus-data gen)))
	(set! (mus-data gen) (make-vct 3)))
      (set! (mus-data (make-oscil)) (make-vct 3))

      (test-gen-equal (make-wave-train 440.0 0.0 (make-vct 20)) (make-wave-train 440.0 0.0 (make-vct 20)) (make-wave-train 100.0 0.0 (make-vct 20)))
      (test-gen-equal (make-wave-train 440.0 0.0 (make-vct 20)) (make-wave-train 440.0 0.0 (make-vct 20)) (make-wave-train 440.0 1.0 (make-vct 20)))

      (let ((hi (make-wave-train :size 256)))
	(if (not (= (mus-length hi) 256)) (snd-display ";wave-train set length: ~A?" (mus-length hi))))
      (let ((tag (catch #t (lambda () (make-wave-train :size 0)) (lambda args (car args)))))
	(if (not (eq? tag 'out-of-range)) (snd-display ";wave-train size 0: ~A" tag)))

      (let ((gen (make-readin "oboe.snd" 0 1490))
	    (v0 (make-vct 10))
	    (gen1 (make-readin "oboe.snd" 0 1490))
	    (v1 (make-vct 10)))
	(print-and-check gen 
			 "readin"
			 "readin: oboe.snd[chan 0], loc: 1490, dir: 1"
			 "rdin chan: 0, dir: 1, loc: 1490, chans: 1, data_start: 0, data_end: -1, file_end: 50828, file_name: oboe.snd")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (readin gen)))
	(vct-map! v1 (lambda () 
		       (if (readin? gen1) 
			   (if (= (mus-channel gen1) 0) 
			       (readin gen1) 
			       1.0) 
			   (if (string=? (mus-file-name gen1) "oboe.snd")
			       -1.0
			       -1.0))))
	(if (not (vequal v0 v1)) (snd-display ";map readin: ~A ~A" v0 v1))
	(if (not (readin? gen)) (snd-display ";~A not readin?" gen))
	(if (not (mus-input? gen)) (snd-display ";~A not input?" gen))
	(if (not (= (mus-length gen) 50828)) (snd-display ";readin length: ~A?" (mus-length gen)))
	(if (not (= (mus-channel gen) 0)) (snd-display ";readin chan: ~A?" (mus-channel gen)))
	(if (not (string=? (mus-file-name gen) "oboe.snd")) (snd-display ";readin mus-file-name: ~A" (mus-file-name gen)))
	(if (or (fneq (vct-ref v0 1) -0.009) (fneq (vct-ref v0 7) .029)) (snd-display ";readin output: ~A" v0))
	(set! (mus-location gen) 1000)
	(if (not (= (mus-location gen) 1000)) (snd-display ";set! mus-location: ~A?" (mus-location gen)))
	(let ((val (readin gen)))
	  (if (fneq val 0.033) (snd-display ";set! mus-location readin: ~A?" val)))
	(set! (mus-increment gen) -1)
	(if (fneq (mus-increment gen) -1.0) (snd-display ";set increment readin: ~A" (mus-increment gen))))
      (let ((tag (catch #t (lambda () (make-readin "/baddy/hiho" 0 124)) (lambda args args))))
	(if (not (eq? (car tag) 'no-such-file)) (snd-display ";make-readin w/o file: ~A" tag)))
      (let ((tag (catch #t (lambda () (make-readin "oboe.snd" 123 124)) (lambda args args))))
	(if (not (eq? (car tag) 'out-of-range)) (snd-display ";make-readin with bad chan: ~A" tag)))

      (test-gen-equal (make-readin "oboe.snd" 0) (make-readin "oboe.snd" 0) (make-readin "oboe.snd" 0 1230))
      (test-gen-equal (make-readin "oboe.snd" 0) (make-readin "oboe.snd" 0) (make-readin "pistol.snd" 0))
      (test-gen-equal (make-readin "2.snd" 1) (make-readin "2.snd" 1) (make-readin "2.snd" 0))

      (let ((gen (make-readin "2.snd" 1))
	    (v0 (make-vct 10)))
	(print-and-check gen 
			 "readin"
			 "readin: 2.snd[chan 1], loc: 0, dir: 1"
			 "rdin chan: 1, dir: 1, loc: 0, chans: 2, data_start: 0, data_end: -1, file_end: 22051, file_name: 2.snd")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (readin gen)))
	(if (not (= (mus-channel gen) 1)) (snd-display ";readin chan 1: ~A?" (mus-channel gen)))
	(if (or (fneq (vct-ref v0 1) 0.010) (fneq (vct-ref v0 7) -.006)) (snd-display ";readin 1 output: ~A" v0))
	(print-and-check gen 
			 "readin"
			 "readin: 2.snd[chan 1], loc: 10, dir: 1"
			 "rdin chan: 1, dir: 1, loc: 10, chans: 2, data_start: 0, data_end: 8191, file_end: 22051, file_name: 2.snd"))

      (let ((gen (make-file->sample "oboe.snd"))
	    (v0 (make-vct 10)))
	(print-and-check gen 
			 "file2sample"
			 "file2sample: oboe.snd"
			 "rdin chan: 0, dir: 0, loc: 0, chans: 1, data_start: 0, data_end: -1, file_end: 50828, file_name: oboe.snd")
	(if (not (mus-input? gen)) (snd-display ";~A not input?" gen))
	(if (not (= (mus-length gen) 50828)) (snd-display ";file->sample length: ~A?" (mus-length gen)))
	(if (not (string=? (mus-file-name gen) "oboe.snd")) (snd-display ";file->sample mus-file-name: ~A" (mus-file-name gen)))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (file->sample gen (+ 1490 i))))
	(if (not (file->sample? gen)) (snd-display ";~A not file->sample?" gen))
	(if (or (fneq (vct-ref v0 1) -0.009) (fneq (vct-ref v0 7) .029)) (snd-display ";file->sample output: ~A" v0)))

      (let ((gen (make-file->frame "oboe.snd"))
	    (v0 (make-vct 10)))
	(print-and-check gen 
			 "file2frame"
			 "file2frame: oboe.snd"
			 "rdin chan: 0, dir: 0, loc: 0, chans: 1, data_start: 0, data_end: -1, file_end: 50828, file_name: oboe.snd")
	(if (not (mus-input? gen)) (snd-display ";~A not input?" gen))
	(if (not (= (mus-length gen) 50828)) (snd-display ";file->frame length: ~A?" (mus-length gen)))
	(if (not (string=? (mus-file-name gen) "oboe.snd")) (snd-display ";file->frame mus-file-name: ~A" (mus-file-name gen)))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (frame-ref (file->frame gen (+ 1490 i)) 0)))
	(if (not (file->frame? gen)) (snd-display ";~A not file->frame?" gen))
	(if (or (fneq (vct-ref v0 1) -0.009) (fneq (vct-ref v0 7) .029)) (snd-display ";file->frame output: ~A" v0)))

      (if (file-exists? "fmv.snd") (delete-file "fmv.snd"))
      (if (file-exists? "fmv1.snd") (delete-file "fmv1.snd"))
      (if (file-exists? "fmv2.snd") (delete-file "fmv2.snd"))
      (if (file-exists? "fmv3.snd") (delete-file "fmv3.snd"))
      (let ((gen (make-sample->file "fmv.snd" 2 mus-lshort mus-riff)))
	(print-and-check gen 
			 "sample2file"
			 "sample2file: fmv.snd"
			 "rdout chan: 0, loc: 0, file_name: fmv.snd, chans: 2, data_start: 0, data_end: 8191, out_end: 0")
	(if (not (mus-output? gen)) (snd-display ";~A not output?" gen))
	(if (not (sample->file? gen)) (snd-display ";~A not sample->file?" gen))
	(if (not (= (mus-length gen) 8192)) (snd-display ";sample->file length: ~A?" (mus-length gen)))
	(let ((genx gen))
	  (if (not (equal? genx gen)) (snd-display ";sample->file equal? ~A ~A" genx gen)))
	(if (not (string=? (mus-file-name gen) "fmv.snd")) (snd-display ";sample->file mus-file-name: ~A" (mus-file-name gen)))
	(do ((i 0 (1+ i)))
	    ((= i 100))
	  (sample->file gen i 0 (* i .001))
	  (sample->file gen i 1 (* i .01)))
	(outa 50 .015 gen)
	(outb 50 .15 gen)
	(out-any 60 .015 0 gen)
	(out-any 60 .15 1 gen)
	(mus-close gen))
      (let* ((gen (make-file->sample "fmv.snd"))
	     (val0 (in-any 20 0 gen))
	     (val1 (in-any 20 1 gen))
	     (val2 (ina 30 gen))
	     (val3 (inb 30 gen))
	     (val4 (file->sample gen 40 0))
	     (val5 (file->sample gen 40 1))
	     (val6 (in-any 50 0 gen))
	     (val7 (in-any 50 1 gen))
	     (val8 (in-any 60 0 gen))
	     (val9 (in-any 60 1 gen)))
	(print-and-check gen 
			 "file2sample"
			 "file2sample: fmv.snd"
			 "rdin chan: 0, dir: 0, loc: 0, chans: 2, data_start: 20, data_end: 100, file_end: 100, file_name: fmv.snd")
	(if (not (= (mus-channels gen) 2)) (snd-display ";make-sample->file chans: ~A?" (mus-channels gen)))
	(if (not (mus-input? gen)) (snd-display ";~A not input?" gen))
	(if (or (fneq val0 .02) (fneq val1 .2)) (snd-display ";in-any: ~A ~A?" val0 val1))
	(if (or (fneq val2 .03) (fneq val3 .3)) (snd-display ";inab: ~A ~A?" val2 val3))
	(if (or (fneq val4 .04) (fneq val5 .4)) (snd-display ";sample->file: ~A ~A?" val4 val5))
	(if (or (fneq val6 .065) (fneq val7 .65)) (snd-display ";outab: ~A ~A?" val6 val7))
	(if (or (fneq val8 .075) (fneq val9 .75)) (snd-display ";out-any: ~A ~A?" val8 val9)))

      (let ((gen (make-sample->file "fmv.snd" 4 mus-lshort mus-riff)))
	(print-and-check gen 
			 "sample2file"
			 "sample2file: fmv.snd"
			 "rdout chan: 0, loc: 0, file_name: fmv.snd, chans: 4, data_start: 0, data_end: 8191, out_end: 0")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (outa i .1 gen)
	  (outb i .2 gen)
	  (outc i .3 gen)
	  (outd i .4 gen))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (outa i .01 gen)
	  (outb i .02 gen)
	  (outc i .03 gen)
	  (outd i .04 gen))
	(mus-close gen))
      (let* ((gen (make-file->sample "fmv.snd")))
	(print-and-check gen 
			 "file2sample"
			 "file2sample: fmv.snd"
			 "rdin chan: 0, dir: 0, loc: 0, chans: 4, data_start: 0, data_end: -1, file_end: 10, file_name: fmv.snd")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (if (or (fneq (ina i gen) .11)
		  (fneq (inb i gen) .22)
		  (fneq (in-any i 2 gen) .33)
		  (fneq (in-any i 3 gen) .44))
	      (snd-display ";4-chan out/in[~A]: ~A ~A ~A ~A?" i (ina i gen) (inb i gen) (in-any i 2 gen) (in-any i 3 gen)))))

      (let ((var (catch #t (lambda () (make-sample->file "fmv.snd" -1 mus-lshort mus-next)) (lambda args args))))
	(if (not (eq? (car var) 'out-of-range))
	    (snd-display ";make-sample->file bad chans: ~A" var)))
      (let ((var (catch #t (lambda () (mus-location (make-oscil))) (lambda args args))))
	(if (not (eq? (car var) 'mus-error))
	    (snd-display ";mus-location oscil: ~A" var)))
      (let ((var (catch #t (lambda () (make-sample->file "fmv.snd" 1 -1 mus-next)) (lambda args args))))
	(if (not (eq? (car var) 'out-of-range))
	    (snd-display ";make-sample->file bad format: ~A" var)))
      (let ((var (catch #t (lambda () (make-sample->file "fmv.snd" 1 mus-lshort -1)) (lambda args args))))
	(if (not (eq? (car var) 'out-of-range))
	    (snd-display ";make-sample->file bad type: ~A" var)))

      (let ((gen (make-frame->file "fmv1.snd" 2 mus-bshort mus-next)))
	(print-and-check gen 
			 "frame2file"
			 "frame2file: fmv1.snd"
			 "rdout chan: 0, loc: 0, file_name: fmv1.snd, chans: 2, data_start: 0, data_end: 8191, out_end: 0")
	(if (not (mus-output? gen)) (snd-display ";~A not output?" gen))
	(if (not (frame->file? gen)) (snd-display ";~A not frame->file?" gen))
	(if (not (= (mus-length gen) 8192)) (snd-display ";frame->file length: ~A?" (mus-length gen)))
	(if (not (string=? (mus-file-name gen) "fmv1.snd")) (snd-display ";frame->file mus-file-name: ~A" (mus-file-name gen)))
	(set! (mus-length gen) 4096)
	(if (not (= (mus-length gen) 4096)) (snd-display ";frame->file length (1): ~A?" (mus-length gen)))
	(set! (mus-length gen) 8192)
	(let ((fr0 (make-frame 2 0.0 0.0)))
	  (do ((i 0 (1+ i)))
	      ((= i 100))
	    (frame-set! fr0 0 (* i .001))
	    (frame-set! fr0 1 (* i .01))
	    (frame->file gen i fr0)))
	(mus-close gen))
      (let* ((gen (make-file->frame "fmv1.snd"))
	     (val4 (file->frame gen 40))
	     (frout (make-frame 2)))
	(if (or (fneq (frame-ref val4 0) .04) (fneq (frame-ref val4 1) .4))
	    (snd-display ";frame->file output: ~A?" val4))
	(file->frame gen 40 frout)
	(if (not (equal? frout val4))
	    (snd-display ";frame->file output via frame: ~A ~A?" frout val4)))

      (let ((gen (make-sample->file "fmv2.snd" 4 mus-bshort mus-aifc)))
	(print-and-check gen 
			 "sample2file"
			 "sample2file: fmv2.snd"
			 "rdout chan: 0, loc: 0, file_name: fmv2.snd, chans: 4, data_start: 0, data_end: 8191, out_end: 0")
	(if (not (mus-output? gen)) (snd-display ";~A not output?" gen))
	(if (not (sample->file? gen)) (snd-display ";~A not sample->file?" gen))
	(do ((i 0 (1+ i)))
	    ((= i 100))
	  (sample->file gen i 0 (* i .001))
	  (sample->file gen i 1 (* i .01))
	  (sample->file gen i 2 (* i .002))
	  (sample->file gen i 3 (* i .003)))
	(outa 50 .015 gen)
	(outb 50 .15 gen)
	(outc 50 .02 gen)
	(outd 50 .03 gen)
	(out-any 60 .015 0 gen)
	(out-any 60 .15 1 gen)
	(out-any 60 .02 2 gen)
	(out-any 60 .03 3 gen)
	(mus-close gen))
      (let* ((gen (make-file->sample "fmv2.snd"))
	     (val0 (in-any 20 2 gen))
	     (val1 (in-any 20 3 gen))
	     (val2 (file->sample gen 50 2))
	     (val3 (file->sample gen 50 3))
	     (val4 (file->sample gen 60 2))
	     (val5 (file->sample gen 60 3)))
	(if (not (= (mus-channels gen) 4)) (snd-display ";make-file->sample (4) chans: ~A?" (mus-channels gen)))
	(if (not (= (mus-increment gen) 0.0)) (snd-display ";file->sample increment: ~A" (mus-increment gen))) ; dir never set in this case
	(if (or (fneq val0 .04) (fneq val1 .06)) (snd-display ";in-any(0, 4): ~A ~A?" val0 val1))
	(if (or (fneq val2 .12) (fneq val3 .18)) (snd-display ";file->sample(4): ~A ~A?" val2 val3))
	(if (or (fneq val4 .14) (fneq val5 .21)) (snd-display ";in-any(4, 4): ~A ~A?" val4 val5)))

      (let ((v0 (make-vct 1000))
	    (os (make-oscil 440.0)))
	(do ((i 0 (1+ i)))
	    ((= i 1000))
	  (vct-set! v0 i (* .1 (oscil os))))
	(array->file "fmv3.snd" v0 10000 22050 1) ; 10000 deliberate
	(let ((v1 (make-vct 1000)))
	  (file->array "fmv3.snd" 0 0 1000 v1)
	  (do ((i 0 (1+ i)))
	      ((= i 1000))
	    (if (fneq (vct-ref v0 i) (vct-ref v1 i)) 
		(snd-display ";array->file->array: ~A ~A ~A?" i (vct-ref v0 i) (vct-ref v1 i)))))

	(let ((var (catch #t (lambda () (array->file "fmv3.snd" v0 -1 1000 1)) (lambda args args))))
	  (if (not (eq? (car var) 'out-of-range))
	      (snd-display ";array->file bad samps: ~A" var)))
	(let ((var (catch #t (lambda () (array->file "/bad/baddy/fmv3.snd" v0 1 1000 1)) (lambda args args))))
	  (if (not (eq? (car var) 'mus-error))
	      (snd-display ";array->file bad file: ~A" var)))
	(let ((var (catch #t (lambda () (file->array "fmv3.snd" -1 0 -1 v0)) (lambda args args))))
	  (if (not (eq? (car var) 'out-of-range))
	      (snd-display ";file->array bad samps: ~A" var))))

      (let ((gen (make-rand 10000.0))
	    (v0 (make-vct 10)))
	(print-and-check gen 
			 "rand"
			 "rand freq: 10000.000Hz, phase: 0.000, amp: 1.000"
			 "noi freq: 2.849517, phase: 0.000000, base: 1.000000, output: 0.000000, incr: 0.000000")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (rand gen 0.0)))
	(if (not (rand? gen)) (snd-display ";~A not rand?" gen))
	(if (fneq (mus-phase gen) 3.3624296) (snd-display ";rand phase: ~F?" (mus-phase gen)))
	(if (fneq (mus-frequency gen) 10000.0) (snd-display ";rand frequency: ~F?" (mus-frequency gen)))
	(set! (mus-scaler gen) 0.5)
	(if (fneq (mus-scaler gen) 0.5) (snd-display ";set! mus-scaler rand: ~A" (mus-scaler gen)))
	(if (= (vct-ref v0 1) (vct-ref v0 8)) (snd-display ";rand output: ~A" v0)))

      (test-gen-equal (make-rand 1000) (make-rand 1000) (make-rand 500))
      (test-gen-equal (make-rand 1000) (make-rand 1000) (make-rand 1000 0.5))

      (let ((gen (make-rand-interp 4000.0))
	    (v0 (make-vct 10)))
	(print-and-check gen 
			 "rand_interp"
			 (mus-describe gen)
			 (mus-inspect gen)) ; problem here is the random incr field
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (rand-interp gen 0.0)))
	(if (not (rand-interp? gen)) (snd-display ";~A not rand-interp?" gen))
	(if (fneq (mus-phase gen) 5.114882) (snd-display ";rand-interp phase: ~F?" (mus-phase gen)))
	(if (fneq (mus-frequency gen) 4000.0) (snd-display ";rand-interp frequency: ~F?" (mus-frequency gen)))
	(set! (mus-scaler gen) 0.5)
	(if (fneq (mus-scaler gen) 0.5) (snd-display ";set! mus-scaler rand-interp: ~A" (mus-scaler gen)))
	(if (= (vct-ref v0 1) (vct-ref v0 8)) (snd-display ";rand-interp output: ~A" v0)))

      (set! (locsig-type) mus-linear)
      (let* ((gen (make-locsig 30.0 :channels 2))
	     (gen1 (make-locsig 60.0 :channels 2))
	     (gen2 (make-locsig 60.0 :channels 4))
	     (gen200 (make-locsig 200.0 :channels 4))
	     (gen3 gen1)
	     (fr0 (locsig gen 0 1.0)))
	(print-and-check gen 
			 "locsig"
			 "locsig: chans 2, outn: [0.667 0.333]"
			 "locs outn[2]: [0.667 0.333], revn[0]: nil")
	(if (not (locsig? gen)) (snd-display ";~A not locsig?" gen))
	(if (not (eq? gen1 gen3)) (snd-display ";locsig eq? ~A ~A" gen1 gen3))
	(if (not (equal? gen1 gen3)) (snd-display ";locsig equal? ~A ~A" gen1 gen3))
	(if (eq? gen1 gen2) (snd-display ";locsig 1 eq? ~A ~A" gen1 gen2))
	(if (equal? gen gen1) (snd-display ";locsig 2 equal? ~A ~A" gen gen1))
	(if (equal? gen gen2) (snd-display ";locsig 3 equal? ~A ~A" gen gen2))
	(if (or (fneq (frame-ref fr0 0) .667) (fneq (frame-ref fr0 1) .333)) (snd-display ";locsig output: ~A" fr0))
	(if (or (fneq (locsig-ref gen 0) .667) (fneq (locsig-ref gen 1) .333))
	    (snd-display ";locsig ref: ~F ~F?" (locsig-ref gen 0) (locsig-ref gen 1)))
	(set! (locsig-ref gen 0) .25)
	(set! fr0 (locsig gen 0 1.0))
	(if (fneq (frame-ref fr0 0) .25) (snd-display ";set locsig-ref: ~F?" (frame-ref fr0 0)))
	(locsig-set! gen 0 .5)
	(set! fr0 (locsig gen 0 1.0))
	(if (fneq (frame-ref fr0 0) .5) (snd-display ";locsig-set: ~F?" (frame-ref fr0 0)))
	(set! gen (make-locsig 120.0 2.0 .1 :channels 4))
	(set! fr0 (locsig gen 0 1.0))
	(if (or (fneq (frame-ref fr0 1) .333) (fneq (frame-ref fr0 2) .167)) (snd-display ";locsig quad output: ~A" fr0))
	(set! gen (make-locsig 300.0 2.0 .1 :channels 4))
	(set! fr0 (locsig gen 0 1.0))
	(if (or (fneq (frame-ref fr0 3) .333) (fneq (frame-ref fr0 0) .167)) (snd-display ";300 locsig quad output: ~A" fr0))
	(move-locsig gen1 90.0 1.0)
	(if (or (fneq (locsig-ref gen1 0) 0.0) (fneq (locsig-ref gen1 1) 1.0)) (snd-display ";move-locsig 90 1: ~A" gen1))
	(move-locsig gen1 0.0 1.0)
	(if (or (fneq (locsig-ref gen1 0) 1.0) (fneq (locsig-ref gen1 1) 0.0)) (snd-display ";move-locsig 0 1: ~A" gen1))
	(move-locsig gen1 45.0 1.0)
	(if (or (fneq (locsig-ref gen1 0) 0.5) (fneq (locsig-ref gen1 1) 0.5)) (snd-display ";move-locsig 45 1: ~A" gen1)))

      (for-each 
       (lambda (chans)
	 (let ((m1 (make-locsig :channels chans)))
	   (if (or (not (= (mus-channels m1) chans))
		   (not (= (mus-length m1) chans)))
	       (snd-display ";locsig ~A chans but: ~A ~A" chans (mus-channels m1) (mus-length m1)))
	   (do ((i 0 (1+ i)))
	       ((= i chans))
	     (locsig-set! m1 i (* i .1)))
	   (do ((i 0 (1+ i)))
	       ((= i chans))
	     (if (fneq (locsig-ref m1 i) (* i .1))
		 (snd-display ";locsig[~A] = ~A (~A)?" i (locsig-ref m1 i) (* i .1))))))
       (list 1 2 4 8))

      (let ((var (catch #t (lambda () (make-locsig :channels 0)) (lambda args args))))
	(if (not (eq? (car var) 'wrong-type-arg))
	    (snd-display ";make-locsig bad (0) chans: ~A" var)))
      (let ((var (catch #t (lambda () (make-locsig :channels -2)) (lambda args args))))
	(if (not (eq? (car var) 'wrong-type-arg))
	    (snd-display ";make-locsig bad (-2) chans: ~A" var)))
      (let ((var (catch #t (lambda () (make-locsig :output 1)) (lambda args args))))
	(if (not (eq? (car var) 'wrong-type-arg))
	    (snd-display ";make-locsig bad output: ~A" var)))
      (let ((var (catch #t (lambda () (locsig-ref (make-locsig) 1)) (lambda args args))))
	(if (not (eq? (car var) 'mus-error))
	    (snd-display ";locsig-ref bad chan: ~A" var)))
      (let ((var (catch #t (lambda () (make-locsig :revout 1)) (lambda args args))))
	(if (not (eq? (car var) 'wrong-type-arg))
	    (snd-display ";make-locsig bad revout: ~A" var)))
      (let ((var (catch #t (lambda () (let ((locs (make-locsig 200 :channels 2))) (locsig-ref locs -1))) (lambda args args))))
	(if (not (eq? (car var) 'mus-error))
	    (snd-display ";locsig-ref bad chan: ~A" var)))
      (let ((var (catch #t (lambda () (let ((locs (make-locsig))) (locsig-set! locs 2 .1))) (lambda args args))))
	(if (not (eq? (car var) 'mus-error))
	    (snd-display ";locsig-set! bad chan (2): ~A" var)))
      (let ((var (catch #t (lambda () (let ((locs (make-locsig :reverb .1))) (locsig-reverb-ref locs 2))) (lambda args args))))
	(if (not (eq? (car var) 'mus-error))
	    (snd-display ";locsig-reverb-ref bad reverb chan (2): ~A" var)))
      (let ((var (catch #t (lambda () (let ((locs (make-locsig :reverb .1))) (locsig-reverb-set! locs 2 .1))) (lambda args args))))
	(if (not (eq? (car var) 'mus-error))
	    (snd-display ";locsig-reverb-set! bad reverb chan (2): ~A" var)))

      (if (file-exists? "fmv4.snd") (delete-file "fmv4.snd"))
      (if (file-exists? "fmv4.reverb") (delete-file "fmv4.reverb"))
      (let* ((gen (make-frame->file "fmv4.snd" 2 mus-bshort mus-next))
	     (rev (make-frame->file "fmv4.reverb" 1 mus-bshort mus-next))
	     (lc (make-locsig 60.0 :reverb .1 :channels 2 :output gen :revout rev)))
	(do ((i 0 (1+ i)))
	    ((= i 100))
	  (locsig lc i 1.0))
	(if (fneq (locsig-reverb-ref lc 0) .1) (snd-display ";locsig reverb ref: ~A?" (locsig-reverb-ref lc 0)))
	(set! (locsig-reverb-ref lc 0) .3)
	(if (fneq (locsig-reverb-ref lc 0) .3) (snd-display ";set locsig reverb ref: ~A?" (locsig-reverb-ref lc 0)))
	(locsig-reverb-set! lc 0 .2)
	(if (fneq (locsig-reverb-ref lc 0) .2) (snd-display ";locsig reverb set: ~A?" (locsig-reverb-ref lc 0)))
	(mus-close gen)
	(mus-close rev)
	(let ((v0 (make-vct 100))
	      (v1 (make-vct 100))
	      (v2 (make-vct 100)))
	  (file->array "fmv4.snd" 0 0 100 v0)
	  (file->array "fmv4.snd" 1 0 100 v1)
	  (file->array "fmv4.reverb" 0 0 100 v2)
	  (if (fneq (vct-ref v2 0) .1) (snd-display ";locsig reverb: ~A?" v2))
	  (if (fneq (* 2 (vct-ref v0 0)) (vct-ref v1 0)) (snd-display ";locsig direct: ~A ~A?" (vct-ref v0 0) (vct-ref v1 0)))))

      (let* ((gen (make-frame->file "fmv4.snd" 4 mus-bshort mus-next))
	     (rev (make-frame->file "fmv4.reverb" 4 mus-bshort mus-next))
	     (lc (make-locsig 60.0 :reverb .1 :channels 4 :distance 4.0 :output gen :revout rev)))
	(print-and-check lc
			 "locsig"
			 "locsig: chans 4, outn: [0.083 0.167 0.000 0.000], revn: [0.017 0.033 0.000 0.000]"
			 "locs outn[4]: [0.083 0.167 0.000 0.000], revn[4]: [0.017 0.033 0.000 0.000]")
	(do ((i 0 (1+ i)))
	    ((= i 100))
	  (locsig lc i 1.0))
	(do ((i 0 (1+ i)))
	    ((= i 4))
	  (locsig-reverb-set! lc i (* i .1))
	  (if (fneq (locsig-reverb-ref lc i) (* i .1))
	      (snd-display ";locsig reverb set![~A]: ~A?" i (locsig-reverb-ref lc i))))
	(print-and-check lc
			 "locsig"
			 "locsig: chans 4, outn: [0.083 0.167 0.000 0.000], revn: [0.000 0.100 0.200 0.300]"
			 "locs outn[4]: [0.083 0.167 0.000 0.000], revn[4]: [0.000 0.100 0.200 0.300]")
	(mus-close gen)
	(mus-close rev))

	(print-and-check (make-locsig 160 :channels 4)
			 "locsig"
			 "locsig: chans 4, outn: [0.000 0.222 0.778 0.000]"
			 "locs outn[4]: [0.000 0.222 0.778 0.000], revn[0]: nil")
	(print-and-check (make-locsig -200 :channels 4)
			 "locsig"
			 "locsig: chans 4, outn: [0.000 0.222 0.778 0.000]"
			 "locs outn[4]: [0.000 0.222 0.778 0.000], revn[0]: nil")
	(print-and-check (make-locsig 160 :channels 4 :distance .5)
			 "locsig"
			 "locsig: chans 4, outn: [0.000 0.222 0.778 0.000]"
			 "locs outn[4]: [0.000 0.222 0.778 0.000], revn[0]: nil")
	(print-and-check (make-locsig 320 :channels 4)
			 "locsig"
			 "locsig: chans 4, outn: [0.556 0.000 0.000 0.444]"
			 "locs outn[4]: [0.556 0.000 0.000 0.444], revn[0]: nil")
	(print-and-check (make-locsig -40 :channels 4)
			 "locsig"
			 "locsig: chans 4, outn: [0.556 0.000 0.000 0.444]"
			 "locs outn[4]: [0.556 0.000 0.000 0.444], revn[0]: nil")
	(print-and-check (make-locsig 320 :channels 2)
			 "locsig"
			 "locsig: chans 2, outn: [0.000 1.000]"
			 "locs outn[2]: [0.000 1.000], revn[0]: nil")
	(print-and-check (make-locsig -40 :channels 2)
			 "locsig"
			 "locsig: chans 2, outn: [0.000 1.000]"
			 "locs outn[2]: [0.000 1.000], revn[0]: nil")
	(letrec ((locsig-data
		  (lambda (gen)
		    (let* ((chans (mus-channels gen))
			   (dat (make-vct chans)))
		      (do ((i 0 (1+ i)))
			  ((= i chans))
			(vct-set! dat i (locsig-ref gen i)))
		      dat))))
	  (let ((gen (make-locsig -.1 :channels 8)))
	    (if (not (vequal (locsig-data gen) (vct 0.998 0.000 0.000 0.000 0.000 0.000 0.000 0.002)))
		(snd-display ";locsig -.1(8): ~A" (locsig-data gen)))
	    (set! gen (make-locsig -359.9 :channels 8))
	    (if (not (vequal (locsig-data gen) (vct 0.998 0.002 0.000 0.000 0.000 0.000 0.000 0.000)))
		(snd-display ";locsig -359.9(8): ~A" (locsig-data gen)))
	    (set! gen (make-locsig -359.9 :channels 4))
	    (if (not (vequal (locsig-data gen) (vct 0.999 0.001 0.000 0.000)))
		(snd-display ";locsig -359.9(4): ~A" (locsig-data gen)))
	    (set! gen (make-locsig -360.1 :channels 8))
	    (if (not (vequal (locsig-data gen) (vct 0.998 0.000 0.000 0.000 0.000 0.000 0.000 0.002)))
		(snd-display ";locsig -360.1(8): ~A" (locsig-data gen)))
	    (set! gen (make-locsig -700 :channels 8))
	    (if (not (vequal (locsig-data gen) (vct 0.556 0.444 0.000 0.000 0.000 0.000 0.000 0.000)))
		(snd-display ";locsig -700(8): ~A" (locsig-data gen)))
	    (set! gen (make-locsig -700 :channels 2))
	    (if (not (vequal (locsig-data gen) (vct 0.778 0.222)))
		(snd-display ";locsig -700(2): ~A" (locsig-data gen)))
	    (set! gen (make-locsig 20 :channels 2))
	    (if (not (vequal (locsig-data gen) (vct 0.778 0.222)))
		(snd-display ";locsig 20(2): ~A" (locsig-data gen)))
	    (set! gen (make-locsig 123456.0 :channels 8))
	    (if (not (vequal (locsig-data gen) (vct 0.467 0.000 0.000 0.000 0.000 0.000 0.000 0.533)))
		(snd-display ";locsig 123456(8): ~A" (locsig-data gen)))
	    (set! gen (make-locsig 336.0 :channels 8))
	    (if (not (vequal (locsig-data gen) (vct 0.467 0.000 0.000 0.000 0.000 0.000 0.000 0.533)))
		(snd-display ";locsig 336(8): ~A" (locsig-data gen)))
	    (set! gen (make-locsig -123456.0 :channels 8))
	    (if (not (vequal (locsig-data gen) (vct 0.467 0.533 0.000 0.000 0.000 0.000 0.000 0.000)))
		(snd-display ";locsig -123456(8): ~A" (locsig-data gen)))
	    (set! gen (make-locsig 24.0 :channels 8))
	    (if (not (vequal (locsig-data gen) (vct 0.467 0.533 0.000 0.000 0.000 0.000 0.000 0.000)))
		(snd-display ";locsig 24(8): ~A" (locsig-data gen)))))

	(for-each 
	 (lambda (rev-chans)
	   
	   (define (locsig-scalers chans degree type)
	     (define (fmod a b)
	       (let ((pos (inexact->exact (floor (/ a b)))))
		 (- a (* pos b))))
	     (if (= chans 1)
		 (vct 1.0)
		 (let* ((deg (if (= chans 2)
				 (max 0.0 (min 90.0 degree))
				 (fmod degree 360.0)))
			(degs-per-chan (if (= chans 2)
					   90.0
					   (/ 360.0 chans)))
			(pos (/ deg degs-per-chan))
			(left (inexact->exact (floor pos)))
			(right (modulo (+ left 1) chans))
			(frac (- pos left))
			(v (make-vct chans)))
		   (if (= type mus-linear)
		       (begin
			 (vct-set! v left (- 1.0 frac))
			 (vct-set! v right frac))
		       (let* ((ldeg (* (/ pi 2) (- 0.5 frac)))
			      (norm (/ (sqrt 2.0) 2.0))
			      (c (cos ldeg))
			      (s (sin ldeg)))
			 (vct-set! v left (* norm (+ c s)))
			 (vct-set! v right (* norm (- c s)))))
		   v)))
	   
	   (if (file-exists? "test.reverb") (delete-file "test.reverb"))
	   (let ((revfile (if (> rev-chans 0)
			      (make-frame->file "test.reverb" rev-chans mus-bshort mus-next)
			      #f)))
	     (for-each
	      (lambda (type)
		;; global type def as well as local par override etc
		
		(set! (locsig-type) type)
		(if (not (= (locsig-type) type)) (snd-display ";locsig-type: ~A ~A" type (locsig-type)))
		
		(call-with-current-continuation
		 (lambda (quit)
		   
		   (for-each 
		    (lambda (deg)
		      (let ((gen (make-locsig deg :channels 1 :revout revfile :reverb .1 :distance 2.0))
			    (revs (if revfile (locsig-scalers rev-chans deg type))))
			(if (not (= (mus-channels gen) 1)) (snd-display ";locsig ~A: ~A" deg gen))
			(if (fneq (locsig-ref gen 0) 0.5) (snd-display ";locsig scaler[~A] ~A: ~A" type deg (locsig-ref gen 0)))
			(if revfile
			    (do ((i 0 (1+ i)))
				((= i rev-chans))
			      (if (fneq (locsig-reverb-ref gen i) (* (/ .1 (sqrt 2.0)) (vct-ref revs i)))
				  (begin 
				    (snd-display ";mono locrev[~A] ~A at ~A: ~A ~A" 
						 type gen deg 
						 (locsig-reverb-ref gen i) 
						 (* (/ .1 (sqrt 2.0)) (vct-ref revs i)))
				    (quit)))))))
		    (list 0.0 45.0 90.0 1234.0))
		   
		   (for-each
		    (lambda (ltype)
		      (for-each 
		       (lambda (deg)
			 (let ((gen (make-locsig deg :channels 1 :type ltype)))
			   (if (not (= (mus-channels gen) 1)) (snd-display ";locsig ~A: ~A" deg gen))
			   (if (fneq (locsig-ref gen 0) 1.0) (snd-display ";locsig[~A] scaler ~A: ~A" ltype deg (locsig-ref gen 0)))))
		       (list 0.0 45.0 90.0 1234.0)))
		    (list mus-linear mus-sinusoidal))
		   
		   (for-each
		    (lambda (chans)
		      (for-each 
		       (lambda (deg)
			 (let ((gen (make-locsig deg :channels chans :revout revfile :reverb .1)))
			   (if (not (= (mus-channels gen) chans)) (begin (snd-display ";multi locsig ~A: ~A" deg gen) (quit)))
			   (let ((scalers (locsig-scalers chans deg type))
				 (revs (if revfile (locsig-scalers rev-chans deg type))))
			     (do ((i 0 (1+ i)))
				 ((= i chans))
			       (if (fneq (locsig-ref gen i) (vct-ref scalers i)) 
				   (begin 
				     (snd-display ";locsig[~A] ~A at ~A: ~A ~A" type gen deg (locsig-ref gen i) (vct-ref scalers i)) 
				     (quit))))
			     (if revfile
				 (do ((i 0 (1+ i)))
				     ((= i rev-chans))
				   (if (fneq (locsig-reverb-ref gen i) (* .1 (vct-ref revs i)))
				       (begin 
					 (snd-display ";locrev[~A] ~A at ~A: ~A ~A" 
						      type gen deg 
						      (locsig-reverb-ref gen i) 
						      (* .1 (vct-ref revs i)))
					 (quit))))))))
		       (list 0.0 45.0 90.0 120.0 180.0 275.0 315.0 300.0 15.0 1234.0)))
		    (list 2 3 4 5 8 12 16 24))
		   
		   (for-each
		    (lambda (chans)
		      (for-each 
		       (lambda (ltype)
			 (for-each
			  (lambda (deg)
			    (let ((gen (make-locsig deg :channels chans :type ltype :revout revfile :reverb .1)))
			      (if (not (= (mus-channels gen) chans)) (begin (snd-display ";stereo locsig ~A: ~A" deg gen) (quit)))
			      (let ((scalers (locsig-scalers chans deg ltype))
				    (revs (if revfile (locsig-scalers rev-chans deg ltype))))
				(do ((i 0 (1+ i)))
				    ((= i chans))
				  (if (fneq (locsig-ref gen i) (vct-ref scalers i)) 
				      (begin
					(snd-display ";locsig[~A] ~A at ~A: ~A ~A" ltype gen deg (locsig-ref gen i) (vct-ref scalers i))
					(quit))))
				(if revfile
				    (do ((i 0 (1+ i)))
					((= i rev-chans))
				      (if (fneq (locsig-reverb-ref gen i) (* .1 (vct-ref revs i)))
					  (begin 
					    (snd-display ";locrev[~A] ~A at ~A: ~A ~A" 
							 type gen deg 
							 (locsig-reverb-ref gen i) 
							 (* .1 (vct-ref revs i)))
					    (quit))))))))
			  (list 0.0 45.0 90.0 120.0 180.0 275.0 315.0 300.0 15.0 1234.0)))
		       (list mus-linear mus-sinusoidal)))
		    (list 2 3 4 5 8 12 16 24))
		   )))
	      (list mus-linear mus-sinusoidal))
	     (if revfile (mus-close revfile))))
	 (list 0 1 2 4))
	
	(let ((gen (make-src :srate 2.0))
	      (v0 (make-vct 10))
	      (rd (make-readin "oboe.snd" 0 2000))
	      (gen1 (make-src :srate 2.0))
	      (v1 (make-vct 10))
	      (rd1 (make-readin "oboe.snd" 0 2000)))
	  (print-and-check gen 
			   "src"
			   "src: width: 10, x: 0.000, incr: 2.000, sinc table len: 10000"
			   "sr x: 0.000000, incr: 2.000000, width: 10, sinc table len: 10000, data[21]: [0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000...]")
	  (do ((i 0 (1+ i)))
	      ((= i 10))
	    (vct-set! v0 i (src gen 0.0 (lambda (dir) (readin rd)))))
	  (vct-map! v1 (lambda () (if (src? gen1) (src gen1 0.0 (lambda (dir) (readin rd1))))))
	  (if (not (vequal v0 v1)) (snd-display ";run src: ~A ~A" v0 v1))
	  (if (not (src? gen)) (snd-display ";~A not scr?" gen))
	  (if (or (fneq (vct-ref v0 1) .001) (fneq (vct-ref v0 7) .021)) (snd-display ";src output: ~A" v0))
	  (if (fneq (mus-increment gen) 2.0) (snd-display ";src increment: ~F?" (mus-increment gen)))
	  (if (fneq (mus-increment rd) 1.0) (snd-display ";readin increment: ~F?" (mus-increment rd)))
	  (if (not (= (mus-length gen) 10)) (snd-display ";src length: ~A" (mus-length gen)))
	  (let ((gold gen))
	    (set! gen (make-src (lambda (dir)
				  0.0)))
	    (if (equal? gen gold) (snd-display ";src eqaul? ~A ~A" gen gold))))
	
	(let ((var (catch #t (lambda () (make-src :width -1)) (lambda args args))))
	  (if (not (eq? (car var) 'out-of-range))
	      (snd-display ";make-src bad width: ~A" var)))

	(let ((s1 (make-src (lambda (y) 1.0) 2.0)))
	  (src s1 25.0) ; try to tickle segfault
	  (src s1 25.0)
	  (src s1 125.0)
	  (src s1 -25.0)
	  (src s1 -125.0))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (make-src (lambda (y) 1.0) 1.5 :width (+ 5 (* i 10))))
	(clear-sincs)

      (let ((gen (make-granulate :expansion 2.0))
	    (v0 (make-vct 1000))
	    (rd (make-readin "oboe.snd" 0 4000))
	    (gen1 (make-granulate :expansion 2.0))
	    (v1 (make-vct 1000))
	    (rd1 (make-readin "oboe.snd" 0 4000)))
	(print-and-check gen 
			 "granulate"
			 "granulate: expansion: 2.000 (551/1102), scaler: 0.600, length: 0.150 secs (3308 samps), ramp: 0.060"
			 "grn_info s20: 1102, s50: 441, rmp: 1323, amp: 0.600000, len: 3308, cur_out: 0, cur_in: 0, input_hop: 551, ctr: 0, output_hop: 1102, in_data_start: 5513, in_data[5513]: [0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000...], data[4410]: [0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000...]")
	(do ((i 0 (1+ i)))
	    ((= i 1000))
	  (vct-set! v0 i (granulate gen (lambda (dir) (readin rd)))))
	(vct-map! v1 (lambda () (if (granulate? gen1) (granulate gen1 (lambda (dir) (readin rd1))))))
	(let ((worst (abs (- (vct-peak v0) (vct-peak v1)))))
	  (if (> worst .01) (snd-display ";run granulate: ~A" worst)))
	(let ((genx gen1))
	  (if (not (equal? genx gen1))
	      (snd-display ";granulate equal? ~A ~A ~A" genx gen1 (equal? genx gen1))))
	(if (= (vct-peak v0) 0.0) (snd-display ";granulate output peak: ~F?" (vct-peak v0)))
	(if (not (granulate? gen)) (snd-display ";~A not granulate?" gen))
	(if (fneq (mus-increment gen) 2.0) (snd-display ";granulate increment: ~F?" (mus-increment gen)))
	(if (fneq (mus-scaler gen) 0.6) (snd-display ";granulate scaler: ~F?" (mus-scaler gen)))
	(if (ffneq (mus-frequency gen) 20.0) (snd-display ";granulate frequency: ~F?" (mus-frequency gen)))
	(if (not (= (mus-ramp gen) 1323)) (snd-display ";granulate ramp: ~F?" (mus-ramp gen)))
	(if (not (= (mus-length gen) 3308)) (snd-display ";granulate length: ~A?" (mus-length gen)))
	(if (not (= (mus-hop gen) 1102)) (snd-display ";granulate hop: ~A?" (mus-hop gen)))
	(set! (mus-hop gen) 1000) (if (not (= (mus-hop gen) 1000)) (snd-display ";granulate set-hop: ~A?" (mus-hop gen)))
	(set! (mus-ramp gen) 1000) (if (not (= (mus-ramp gen) 1000)) (snd-display ";granulate set-ramp: ~A?" (mus-ramp gen)))
	(set! (mus-length gen) 3000) (if (not (= (mus-length gen) 3000)) (snd-display ";granulate set-length: ~A?" (mus-length gen)))
	(set! (mus-increment gen) 3.0)
	(if (> (abs (- (mus-increment gen) 3.0)) .01) (snd-display ";granulate set-increment: ~F?" (mus-increment gen)))
	(set! (mus-frequency gen) 10.0)
	(if (ffneq (mus-frequency gen) 10.0) (snd-display ";set granulate freq: ~A" (mus-frequency gen)))
	(let ((tag (catch #t (lambda () (granulate gen (lambda (a b) a))) (lambda args (car args)))))
	  (if (not (eq? tag 'bad-arity)) 
	      (snd-display ";granulate bad func: ~A" tag))))
      (let ((var (catch #t (lambda () (make-granulate :hop 35.0 :length 35.0)) (lambda args args))))
	(if (not (eq? (car var) 'out-of-range))
	    (snd-display ";make-granulate bad sizes: ~A" var)))

      (let* ((v0 (make-vct 32))
	     (v1 (make-vct 256))
	     (v2 (make-vct 256))
	     (v01 (make-vct 32))
	     (v11 (make-vct 256))
	     (v21 (make-vct 256)))
	(do ((i 1 (1+ i)))
	    ((= i 16))
	  (vct-set! v0 i (/ 1.0 i))
	  (vct-set! v01 i (/ 1.0 i)))
	(vct-set! v1 0 1.0)
	(vct-set! v11 0 1.0)
	(let ((gen (make-convolve :filter v0))
	      (n -1)
	      (gen1 (make-convolve :filter v01))
	      (n1 -1))
	  (print-and-check gen 
			   "convolve"
			   "convolve: size: 64"
			   "conv fftsize: 64, fftsize2: 32, filtersize: 32, ctr: 32, rl1: [0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000...], rl2: [0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000...], buf: [0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000...], filter: [0.000 1.000 0.500 0.333 0.250 0.200 0.167 0.143...]")
	  (if (not (convolve? gen)) (snd-display ";~A not convolve?" gen))
	  (let ((genx gen1))
	    (if (not (equal? genx gen1)) (snd-display ";convolve equal?: ~A ~A ~A" genx gen1 (equal? genx gen1))))
	  (if (not (= (mus-length gen) 64)) (snd-display ";convolve fft len: ~D?" (mus-length gen)))
	  (do ((i 0 (1+ i)))
	      ((= i 128))
	    (vct-set! v2 i (convolve gen (lambda (dir) (set! n (+ n 1)) (vct-ref v1 n)))))
	  (vct-map! v21 (lambda () (if (convolve? gen1) (convolve gen1 (lambda (dir) (set! n1 (+ n1 1)) (vct-ref v11 n1))))))
	  (if (not (vequal v2 v21)) (snd-display ";run gran: ~A ~A" v2 v21))
	  (if (or (fneq (vct-ref v2 0) 0.0)
		  (fneq (vct-ref v2 1) 1.0)
		  (fneq (vct-ref v2 4) 0.25)
		  (fneq (vct-ref v2 7) 0.143))
	      (snd-display ";convolve output: ~A?" v2))
	  (let ((tag (catch #t (lambda () (convolve gen (lambda (a b) a))) (lambda args (car args)))))
	    (if (not (eq? tag 'bad-arity)) 
		(snd-display ";convolve bad func: ~A" tag))))

	(convolve-files "oboe.snd" "fyow.snd" .5 "fmv.snd")
	(if (fneq (cadr (mus-sound-maxamp "fmv.snd")) .5) 
	    (snd-display ";convolve-files: ~A /= .5?" (cadr (mus-sound-maxamp "fmv.snd"))))
	(play-sound "fmv.snd"))

      (let* ((fd (mus-sound-open-input "oboe.snd"))
	     (chans (mus-sound-chans "oboe.snd"))
	     (data (make-sound-data chans 2000)))
	(if (not (sound-data? data)) (snd-display ";~A not sound-data?" data))
	(if (not (= (sound-data-chans data) 1)) (snd-display ";sound-data chans: ~A?" (sound-data-chans data)))
	(if (not (= (sound-data-length data) 2000)) (snd-display ";sound-data length: ~A?" (sound-data-length data)))
	(mus-sound-read fd 0 1999 chans data)
	(let ((val (sound-data-ref data 0 1497)))
	  (mus-sound-close-input fd)
	  (if (fneq val 0.02893066) (snd-display ";mus-sound-read: ~F?" val))))

      (let ((ind (new-sound "fmv.snd")))
	(set! (sample 1) .1)
	(save-sound ind)
	(if (not (equal? (edits ind 0) (list 0 0)))
	    (snd-display ";weird: edits not cleared after save-sound?: ~A" (edits ind 0)))
	(close-sound ind)
	(set! ind (open-sound "fmv.snd"))
	(if (not (= (frames ind 0) 2))
	    (snd-display ";save-sound 2 samps: ~A?" (frames ind 0)))
	(if (or (fneq (sample 0) 0.0)
		(fneq (sample 1) 0.1))
	    (snd-display ";save-sound: ~A ~A?" (sample 0) (sample 1)))
	(do ((i 3 (1+ i)))
	    ((= i 6))
	  (set! (sample i) (* i .1))
	  (save-sound ind)
	  (if (not (equal? (edits ind 0) (list 0 0)))
	      (snd-display ";weird: edits not cleared after save-sound ~A?: ~A" i (edits ind 0)))
	  (close-sound ind)
	  (set! ind (open-sound "fmv.snd"))
	  (if (not (= (frames ind 0) (+ i 1)))
	      (snd-display ";save-sound ~A samps: ~A?" (+ i 1) (frames ind 0)))
	  (if (or (fneq (sample 0) 0.0)
		  (fneq (sample 1) 0.1)
		  (fneq (sample i) (* i 0.1)))
	      (snd-display ";save-sound ~A: ~A ~A ~A?" i (sample 0) (sample 1) (sample i))))
	(close-sound ind))

      (let ((nind (new-sound "fmv.snd" mus-aifc mus-bshort 22050 1 "this is a comment")))
	(time (fm-violin 0 1 440 .1))
	(scissor 2.0) 
	(play-and-wait 0 nind)
	(save-sound nind)
	(let ((oboe-index (or (find-sound "oboe.snd") (open-sound "oboe.snd"))))
	  (cnvtest oboe-index nind .1) 
	  (select-sound nind)
	  (select-channel 0)
	  (if (not (= (selected-sound) nind)) (snd-display ";selected-sound: ~A?" (selected-sound)))
	  (if (not (= (selected-channel) 0)) (snd-display ";selected-channel: ~A?" (selected-channel)))
	  (jc-reverb 1.0 #f .1 #f) 
	  (play-and-wait 0 nind)
	  (voiced->unvoiced 1.0 256 2.0 2.0) 
	  (map-chan (fltit))
	  (close-sound oboe-index))
	(let ((fr (frames nind 0)))
	  (do ((k 0 (1+ k)))
	      ((= k 10))
	    (delete-samples 10 100 nind 0)
	    (save-sound nind)) ;flush out memory leaks here
	  (if (not (= (frames nind 0) (- fr 1000)))
	      (snd-display ";delete-samples: ~A ~A" fr (frames nind 0))))
	(revert-sound nind)
	(close-sound nind))
      (if (file-exists? "fmv.snd") (delete-file "fmv.snd"))

      (let ((nind (new-sound "fmv.snd")))
	(if (not (= (header-type nind) (default-output-type)))
	    (snd-display ";new-sound default header-type: ~A ~A?"
			       (mus-header-type-name (header-type nind))
			       (mus-header-type-name (default-output-type))))
	(if (not (= (data-format nind) (default-output-format)))
	    (snd-display ";new-sound default data-format: ~A ~A?"
			       (mus-data-format-name (data-format nind))
			       (mus-data-format-name (default-output-format))))
	(if (not (= (chans nind) (default-output-chans)))
	    (snd-display ";new-sound default chans: ~A ~A?" (chans nind) (default-output-chans)))
	(if (not (= (srate nind) (default-output-srate)))
	    (snd-display ";new-sound default srate: ~A ~A?" (srate nind) (default-output-srate)))
	(close-sound nind)
	(if (file-exists? "fmv.snd") (delete-file "fmv.snd")))
      (let ((nind (new-sound "fmv.snd" mus-nist mus-bshort 22050 1 "this is a comment")))
	(set! (sample 0 nind) 1.0) 
	(start-progress-report nind)
	(convolve-with "oboe.snd") 
	(progress-report .1 "hiho" 0 1 nind)
	(if (fneq (sample 1000) -0.22299) (snd-display ";convolve-with: ~A?" (sample 1000)))
	(progress-report .3 "hiho" 0 1 nind)
	(revert-sound nind)
	(progress-report .5 "hiho" 0 1 nind)
	(set! (sample 200) .0001) 
	(set! (sample 100) 1.0) 
	(progress-report .8 "hiho" 0 1 nind)
	(smooth-sound 0 100) 
	(finish-progress-report nind)
	(if (or (fneq (sample 50) .5) (fneq (sample 30) 0.20608) (fneq (sample 90) 0.9755))
	    (snd-display ";smooth: ~A ~A ~A?" (sample 50) (sample 30) (sample 90)))
	(undo) 
	(set! (sinc-width) 40) 
	(set! (sample 100) 0.5) 
	(if (fneq (sample 100) 0.5) (snd-display ";set-sample 100: ~A?" (sample 100)))
	(src-sound .1) 
	(if (or (fneq (sample 1000) 0.5) (fneq (sample 1024) 0.0625) (fneq (sample 1010) 0.0))
	    (snd-display ";src-sound: ~A ~A ~A?" (sample 1000) (sample 1024) (sample 1010)))
	(revert-sound)
	(close-sound nind))
      (let ((nind (new-sound "fmv.snd" mus-riff mus-lshort 22050 1 "this is a comment")))
	(mix "pistol.snd") 
	(map-chan (expsrc 2.0 nind)) 
	(play-and-wait 0 nind)
	(undo) 
	(let ((eds (edits)))
	  (if (or (not (= (car eds) 1)) (not (= (cadr eds) 1)))
	      (snd-display ";undo edits: ~A?" eds))
	  (if (not (= (edit-position) (car eds)))
	      (snd-display ";undo edit-position: ~A ~A?" (edit-position) eds)))
	(expsnd '(0 1 2 .4)) 
	(map-chan (comb-chord .95 100 .3)) 
	(map-chan (formants .99 900 .02 1800 .01 2700)) 
	(map-chan (moving-formant .99 '(0 1200 1 2400))) 
	(scale-to .3) 
	(play-and-wait 0)
	(let ((eds (edits)))
	  (if (or (not (= (car eds) 6)) (not (= (cadr eds) 0)))
	      (snd-display ";edits(6): ~A?" eds))
	  (if (not (= (edit-position) (car eds)))
	      (snd-display ";edit-position(6): ~A ~A?" (edit-position) eds)))
	(set! (edit-position) 1)
	(if (not (= (edit-position) 1))
	    (snd-display ";set edit-position(1): ~A?" (edit-position)))
	(set! (edit-position) 4)
	(if (not (= (edit-position) 4))
	    (snd-display ";set edit-position(4): ~A?" (edit-position)))
	(revert-sound nind)
	(mix "pistol.snd") 
	(map-chan (zecho .5 .75 6 10.0) 0 65000) 
	(map-chan (am 440)) 
	(add-mark 1200)
	(add-mark 2300)
	(key (char->integer #\x) 4)
	(key (char->integer #\c) 0) ; trigger mark-define-region
	(reverse-sound nind) 
	(play-and-wait 0 nind)
	(revert-sound nind)
	(let ((mid (mix-sound "pistol.snd" 0)))
	  (if (not (equal? (mix-home mid) (list (selected-sound) 0)))
	      (snd-display ";mix-sound mix-home: ~A (~A or ~A 0)" (mix-home mid) (selected-sound) nind)))
	(hello-dentist 40.0 .1) 
	(fp 1.0 .3 20) 
	(play-and-wait 0 nind)
	(revert-sound nind)
	(enveloped-mix "oboe.snd" 0 '(0 0 1 1 2 0)) 
	(pvoc :pitch 0.5 :time 1.0 :snd nind) 
	(play-and-wait 0 nind)
	(revert-sound nind)
	(close-sound nind))

      (if (file-exists? "fmv.snd") (delete-file "fmv.snd"))
      (if (file-exists? "fmv1.snd") (delete-file "fmv1.snd"))
      (if (file-exists? "fmv2.snd") (delete-file "fmv2.snd"))
      (if (file-exists? "fmv3.snd") (delete-file "fmv3.snd"))
      (let ((v0 (make-vct 12)))
	(vct-fill! v0 0.1)
	(array->file "fmv1.snd" v0 12 22050 1)
	(vct-fill! v0 0.2)
	(array->file "fmv2.snd" v0 12 22050 2)
	(vct-fill! v0 0.3)
	(array->file "fmv3.snd" v0 12 22050 4)
	(do ((i 0 (1+ i))) ((= i 12)) (vct-set! v0 i (* i .01)))
	(array->file "fmv.snd" v0 12 22050 1)
	(mus-mix "fmv.snd" "fmv1.snd")
	(file->array "fmv.snd" 0 0 12 v0)
	(do ((i 0 (1+ i))) ((= i 12)) (if (fneq (vct-ref v0 i) (+ 0.1 (* i .01))) (snd-display ";mus-mix(1->1): ~A?" v0)))
	(mus-mix "fmv.snd" "fmv2.snd" 3 9 0 (make-mixer 2 0.3 0.0 0.7 0.0))
	(file->array "fmv.snd" 0 0 12 v0)
	(if (or (fneq (vct-ref v0 0) .1) (fneq (vct-ref v0 3) .33) (fneq (vct-ref v0 9) .19)) (snd-display ";mus-mix(2->1): ~A?" v0))
	(mus-mix "fmv.snd" "fmv3.snd")
	(file->array "fmv.snd" 0 0 12 v0)
	(if (or (fneq (vct-ref v0 0) .4) (fneq (vct-ref v0 3) .33)) (snd-display ";mus-mix(4->1): ~A?" v0))
	(let ((e0 (make-env '(0 0 1 1) :end 10))
	      (vf (make-vector 1))
	      (vf1 (make-vector 1)))
	  (vector-set! vf 0 vf1)
	  (vector-set! vf1 0 e0)
	  (mus-mix "fmv.snd" "fmv1.snd" 0 12 0 (make-mixer 1 1.0) vf)
	  (file->array "fmv.snd" 0 0 12 v0)
	  (if (or (fneq (vct-ref v0 0) .4) (fneq (vct-ref v0 3) .360) (fneq (vct-ref v0 9) .28)) (snd-display ";mus-mix(env): ~A?" v0))
	  (mus-mix "fmv.snd" "fmv2.snd" 0 12 0 (make-mixer 2 1.0 1.0 1.0 1.0) vf)) ; clm2xen should protect us here
	(let ((vf (make-vector 2))
	      (vf1 (make-vector 2))
	      (vf2 (make-vector 2)))
	  (vector-set! vf 0 vf1)
	  (vector-set! vf 1 vf2)
	  (vector-set! vf1 0 (make-env '(0 0 1 1) :end 9))
	  (vector-set! vf2 1 (make-env '(0 0 1 1) :end 9))
	  (mus-mix "fmv.snd" "fmv2.snd" 0 12 0 (make-mixer 2 1.0 1.0 1.0 1.0) vf)
	  (let ((tag (catch #t
			    (lambda ()
			      (vector-set! vf 0 (make-oscil))
			      (mus-mix "fmv.snd" "fmv2.snd" 0 12 0 (make-mixer 2 1.0 1.0 1.0 1.0) vf))
			    (lambda args (car args)))))
	    (if (not (eq? tag 'bad-type))
		(snd-display ";mix w oscil-vect: ~A" tag)))
	  (vector-set! vf 0 vf1)
	  (vector-set! vf 1 vf2)
	  (let ((tag (catch #t
			    (lambda ()
			      (vector-set! vf1 0 (make-oscil))
			      (vector-set! vf2 1 (sqrt -1.0))
			      (mus-mix "fmv.snd" "fmv2.snd" 0 12 0 (make-mixer 2 1.0 1.0 1.0 1.0) vf))
			    (lambda args (car args)))))
	    (if (not (eq? tag 'bad-type))
		(snd-display ";mix w oscil-env: ~A" tag))))
	(delete-file "fmv.snd")
	(do ((i 0 (1+ i))) ((= i 12)) (vct-set! v0 i (* i .01)))
	(array->file "fmv.snd" v0 12 22050 4)
	(mus-mix "fmv.snd" "fmv1.snd")
	(file->array "fmv.snd" 0 0 3 v0) ; chan 0 start 0 len 3
	(if (or (fneq (vct-ref v0 0) .1) (fneq (vct-ref v0 2) .18)) (snd-display ";mus-mix(1->4): ~A?" v0))
	(mus-mix "fmv.snd" "fmv2.snd"  0 3 0 (make-mixer 2 0.3 0.0 0.7 0.0))
	(file->array "fmv.snd" 0 0 3 v0)
	(if (or (fneq (vct-ref v0 0) .3) (fneq (vct-ref v0 2) .38)) (snd-display ";mus-mix(2->4): ~A?" v0))
	(mus-mix "fmv.snd" "fmv3.snd" 0 2 0)
	(file->array "fmv.snd" 0 0 3 v0)
	(if (or (fneq (vct-ref v0 0) .6) (fneq (vct-ref v0 2) .38)) (snd-display ";mus-mix(4->4): ~A?" v0)))

      (if (file-exists? "fmv.snd") (delete-file "fmv.snd"))
      (let ((v0 (make-vct 12))
	    (len (mus-sound-frames "oboe.snd")))
	(array->file "fmv.snd" v0 12 22050 1)
	(mus-mix "fmv.snd" "oboe.snd")
	(mus-mix "fmv.snd" "oboe.snd" 0 len 0 (make-mixer 1 0.5))
	(let* ((egen (make-vector 1))
	       (outv (make-vector 1)))
	  (vector-set! outv 0 egen)
	  (vector-set! egen 0 (make-env :envelope '(0 0 1 1) :end len))
	  (mus-mix "fmv.snd" "oboe.snd" 0 len 0 #f outv)
	  (vector-set! egen 0 (make-env :envelope '(0 1 1 0) :end len))
	  (mus-mix "fmv.snd" "oboe.snd" 0 len 0 (make-mixer 1 1.0) outv))
	(let ((ind-oboe (open-sound "oboe.snd"))
	      (ind-mix (open-sound "fmv.snd")))
	  (if (not (vequal (samples->vct 1000 10 ind-oboe)
			   (vct-scale! (samples->vct 1000 10 ind-mix) (/ 1.0 2.5))))
	      (snd-display ";mus-mix 1 chan: ~A ~A"
			   (samples->vct 1000 10 ind-oboe)
			   (samples->vct 1000 10 ind-mix)))
	  (close-sound ind-oboe)
	  (close-sound ind-mix))
	(delete-file "fmv.snd")
	(let ((v0 (make-vct 12))
	      (len (mus-sound-frames "2.snd")))
	  (array->file "fmv.snd" v0 12 22050 2)
	  (if (not (= (mus-sound-chans "fmv.snd") 2))
	      (snd-display ";array->file chans? ~A" (mus-sound-chans "fmv.snd")))
	  (mus-mix "fmv.snd" "2.snd")
	  (mus-mix "fmv.snd" "2.snd" 0 len 0 (make-mixer 2 0.5 0.0 0.0 0.5))
	  (let* ((egen0 (make-vector 2))
		 (egen1 (make-vector 2))
		 (outv (make-vector 2)))
	    (vector-set! outv 0 egen0)
	    (vector-set! outv 1 egen1)
	    (vector-set! egen0 0 (make-env :envelope '(0 0 1 1) :end len))
	    (vector-set! egen1 1 (make-env :envelope '(0 0 1 1) :end len))
	    (mus-mix "fmv.snd" "2.snd" 0 len 0 #f outv))
	  (let ((ind-mix (open-sound "fmv.snd")))
	    (if (not (= (channels ind-mix) 2))
		(snd-display ";fmv re-read chans? ~A ~A" (mus-sound-chans "fmv.snd") (channels ind-mix)))
	    (if (not (vequal (samples->vct 1000 10 ind-mix 0)
			     (vct 0.003 0.010 0.012 0.011 0.008 0.004 0.002 0.002 0.007 0.017)))
		(snd-display ";mus-mix 2 chan (2.snd written: ~A): ~A ~A"
			     (strftime "%d-%b %H:%M %Z" (localtime (mus-sound-write-date "2.snd")))
			     (samples->vct 1000 10 ind-mix 0)
			     (samples->vct 1000 10 ind-mix 1)))
	    (close-sound ind-mix)
	    (delete-file "fmv.snd"))))

      (let* ((ind (open-sound "oboe.snd"))
	     (pi2 (* 2.0 pi))
	     (pv (make-phase-vocoder #f
				    512 4 128 1.0
				    #f ;no change to analysis
				    #f ;no change to edits
				    #f ;no change to synthesis
				    ))
	    (reader (make-sample-reader 0)))
	(if (not (phase-vocoder? pv)) (snd-display ";~A not phase-vocoder?" pv))
	(print-and-check pv 
			 "phase_vocoder"
			 "phase_vocoder: outctr: 128, interp: 128, filptr: 0, N: 512, D: 128, in_data: nil"
			 "pv_info outctr: 128, interp: 128, filptr: 0, N: 512, D: 128, in_data: nil, amps: [0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000...], freqs: [0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000...]")
	(select-sound ind)
	(map-chan (lambda (val)
 		    (phase-vocoder pv (lambda (dir) 
					(next-sample reader)))))
	(vct-set! (pv-amp-increments pv) 0 .1)
	(if (fneq (vct-ref (pv-amp-increments pv) 0) .1)
	    (snd-display ";set pv-amp-increments: ~A?" (vct-ref (pv-amp-increments pv) 0)))
	(vct-set! (pv-amps pv) 0 .1)
	(if (fneq (vct-ref (pv-amps pv) 0) .1)
	    (snd-display ";set pv-amps: ~A?" (vct-ref (pv-amps pv) 0)))
	(vct-set! (pv-phases pv) 0 .1)
	(if (fneq (vct-ref (pv-phases pv) 0) .1)
	    (snd-display ";set pv-phases: ~A?" (vct-ref (pv-phases pv) 0)))
	(vct-set! (pv-phase-increments pv) 0 .1)
	(if (fneq (vct-ref (pv-phase-increments pv) 0) .1)
	    (snd-display ";set pv-phase-increments: ~A?" (vct-ref (pv-phase-increments pv) 0)))
	(vct-set! (pv-freqs pv) 0 .1)
	(if (fneq (vct-ref (pv-freqs pv) 0) .1)
	    (snd-display ";set pv-freqs: ~A?" (vct-ref (pv-freqs pv) 0)))
	(undo 1)
	(free-sample-reader reader)
	(let ((lastphases (make-vct 512)))
	  (set! pv (make-phase-vocoder #f
				       512 4 128 1.0
				       #f ;no change to analysis
				       (lambda (v)
					; new editing func changes pitch
					 (let* ((N (mus-length v)) ;mus-increment => interp, mus-data => in-data
						(D (mus-hop v))
						(freqs (pv-freqs v)))
					   (do ((k 0 (1+ k))
						(pscl (/ 1.0 D))
						(kscl (/ pi2 N)))
					       ((= k (inexact->exact (floor (/ N 2)))))
					     (let ((phasediff (- (vct-ref freqs k) (vct-ref lastphases k))))
					       (vct-set! lastphases k (vct-ref freqs k))
					       (if (> phasediff pi) (do () ((<= phasediff pi)) (set! phasediff (- phasediff pi2))))
					       (if (< phasediff (- pi)) (do () ((>= phasediff (- pi))) (set! phasediff (+ phasediff pi2))))
					       (vct-set! freqs k 
							 (* 0.5
							    (+ (* pscl phasediff)
							       (* k kscl))))))
					   #f))
				       #f ; no change to synthesis
				       ))
	  (set! reader (make-sample-reader 0))
	  (map-chan (lambda (val)
		      (phase-vocoder pv (lambda (dir) 
					  (next-sample reader))))))
	(undo 1)
	(free-sample-reader reader)
	(set! pv (make-phase-vocoder #f
				     512 4 (inexact->exact (* 128 2.0)) 1.0
				     #f ;no change to analysis
				     #f ;no change to edits
				     #f ;no change to synthesis
				     ))
	(set! reader (make-sample-reader 0))
	(let* ((len (inexact->exact (* 2.0 (frames ind))))
	       (data (make-vct len)))
	  (vct-map! data
		    (lambda ()
		      (phase-vocoder pv (lambda (dir) (next-sample reader)))))
	  (set! (samples 0 len) data))
	(undo 1)
	(free-sample-reader reader)

	(let ((incalls 0)
	      (outcalls 0))
	  (set! pv (make-phase-vocoder #f
				       512 4 (inexact->exact (* 128 2.0)) 1.0
				       (lambda (v infunc)
					 (set! incalls (+ incalls 1))
					 #t)
				       #f ;no change to edits
				       (lambda (v)
					 (set! outcalls (+ outcalls 1))
					 0.0)
				       ))
	  (set! reader (make-sample-reader 0))
	  (let* ((len (inexact->exact (* 2.0 (frames ind))))
		 (data (make-vct len)))
	    (vct-map! data
		      (lambda ()
			(phase-vocoder pv (lambda (dir) (next-sample reader)))))
	    (set! (samples 0 len) data))
	  (undo 1)
	  (free-sample-reader reader)
	  (if (or (= incalls 0)
		  (= outcalls 0))
	      (snd-display ";phase-vocoder incalls: ~A, outcalls: ~A" incalls outcalls))
	  (set! (pv-outctr pv) (pv-outctr pv))
	  (let ((tag (catch #t (lambda () (phase-vocoder pv (lambda (a b) a))) (lambda args (car args)))))
	    (if (not (eq? tag 'bad-arity)) 
		(snd-display ";phase-vocoder bad func: ~A" tag))))
	(let ((tag (catch #t 
			  (lambda () (make-phase-vocoder #f 512 4 256 1.0 (lambda (a b c) #f) #f #f)) 
			  (lambda args args))))
	  (if (not (eq? (car tag) 'bad-arity)) (snd-display ";make-phase-vocoder bad analyze func: ~A" tag)))
	(let ((tag (catch #t
			  (lambda () (make-phase-vocoder #f 512 4 256 1.0 (lambda (a b) 0.0) (lambda (a b c) #f) #f)) 
			  (lambda args args))))
	  (if (not (eq? (car tag) 'bad-arity)) (snd-display ";make-phase-vocoder bad edit func: ~A" tag)))
	(let ((tag (catch #t 
			  (lambda () (make-phase-vocoder #f 512 4 256 1.0 (lambda (a b) 0.0) (lambda (a) #f) (lambda (a b) 0)))
			  (lambda args args))))
	  (if (not (eq? (car tag) 'bad-arity)) (snd-display ";make-phase-vocoder bad synthesize func: ~A" tag)))
	(make-phase-vocoder (lambda (dir) 0.0))
	(let ((genx (make-phase-vocoder :input (lambda (dir) 0.0))))
	  (if (fneq (mus-frequency genx) 1.0) (snd-display ";mus-frequency phase-vocoder: ~A" (mus-frequency genx)))
	  (set! (mus-frequency genx) 2.0)
	  (if (fneq (mus-frequency genx) 2.0) (snd-display ";set mus-frequency phase-vocoder: ~A" (mus-frequency genx)))
	  (if (fneq (mus-increment genx) 128) (snd-display ";mus-increment phase-vocoder: ~A" (mus-increment genx)))
	  (set! (mus-increment genx) 256)
	  (if (fneq (mus-increment genx) 256) (snd-display ";set mus-increment phase-vocoder: ~A" (mus-increment genx)))
	  (let ((genxx genx))
	    (if (not (equal? genx genxx)) (snd-display ";phase-vocoder equal: ~A ~A" genxx genx))))
	(close-sound ind))

      (load "moog.scm")
      (let ((ind (open-sound "oboe.snd")))
	(let ((gen (make-moog-filter 500.0 .1)))
	  (if (fneq 500.0 (car gen)) (snd-display ";moog freq: ~A" (car gen)))
	  (if (fneq .1 (cadr gen)) (snd-display ";moog Q: ~A" (cadr gen)))
	  (if (not (vct? (list-ref gen 2))) (snd-display ";moog state: ~A" (list-ref gen 2)))
	  (if (fneq 0.0 (list-ref gen 3)) (snd-display ";moog A? ~A" (list-ref gen 3)))
	  (if (fneq -0.861 (list-ref gen 4)) (snd-display ";moog freqtable: ~A" (lisst-ref gen 4)))
	  (let ((vals (make-vct 20)))
	    (vct-set! vals 0 (moog-filter gen 1.0))
	    (do ((i 1 (1+ i)))
		((= i 20))
	      (vct-set! vals i (moog-filter gen 0.0)))
	    (if (not (vequal vals (vct 0.0    0.0    0.0025 0.0062 0.0120 0.0198 0.0292 0.0398 0.0510 0.0625
				       0.0739 0.0847 0.0946 0.1036 0.1113 0.1177 0.1228 0.1266 0.1290 0.1301)))
		(snd-display ";moog output: ~A" vals))))
	(close-sound ind))

      ))


;;; ---------------- test 9: mix ----------------

(if (or full-test (= snd-test 9) (and keep-going (<= snd-test 9)))
    (begin
    (do ((test-ctr 0 (1+ test-ctr)))
	((= test-ctr tests))
      (let ((new-index (new-sound "hiho.wave" mus-next mus-bshort 22050 1)))
	(if (procedure? test-hook) (test-hook 9))
	(log-mem test-ctr)
	(select-sound new-index)
	(if (find-mix 0 new-index 0) (snd-display ";found non-existent mix? ~A" (find-mix 0 new-index 0)))
	(let ((mix-id (mix "pistol.snd" 100)))
	  (if (not (mix? mix-id)) (snd-display ";~A not mix?" mix-id))
	  (mix-panel)
	  (let ((pos (mix-position mix-id))
		(len (mix-frames mix-id))
		(loc (mix-locked mix-id))
		(anc (mix-anchor mix-id))
		(spd (mix-speed mix-id))
		(trk (mix-track mix-id))
		(snd (car (mix-home mix-id)))
		(chn (cadr (mix-home mix-id)))
		(chns (mix-chans mix-id))
		(amp (mix-amp mix-id 0))
		(mr (make-mix-sample-reader mix-id)))
	    (if (not (mix-sample-reader? mr)) (snd-display ";~A not mix-sample-reader?" mr))
	    (let ((reader-string (format #f "~A" mr)))
	      (if (not (string=? (substring reader-string 0 22) "#<mix-sample-reader 0x"))
		  (snd-display ";mix sample reader actually got: [~S]" (substring reader-string 0 22)))
	      (if (not (string=? (substring reader-string 29 62) (string-append ": " home-dir "/cl/pistol.snd via mix")))
		  (snd-display ";mix sample reader actually got: [~S]" (substring reader-string 29 62))))
	    (let ((var (catch #t (lambda () (mix-amp mix-id 1234)) (lambda args args))))
	      (if (not (eq? (car var) 'no-such-channel))
		  (snd-display ";mix-amp bad chan: ~A" var)))
	    (let ((var (catch #t (lambda () (set! (mix-amp mix-id 1234) .1)) (lambda args args))))
	      (if (not (eq? (car var) 'no-such-channel))
		  (snd-display ";set mix-amp bad chan: ~A" var)))
	    (let ((var (catch #t (lambda () (set! (mix-amp-env mix-id 1234) '(0 0 1 1))) (lambda args args))))
	      (if (not (eq? (car var) 'no-such-channel))
		  (snd-display ";set mix-amp-env bad chan: ~A" var)))
	    (do ((i 0 (1+ i)))
		((= i 99))
	      (let ((mx (if (odd? i) (next-mix-sample mr) (read-mix-sample mr)))
		    (sx (sample (+ 100 i))))
		(if (fneq mx sx) (snd-display ";next-mix-sample: ~A ~A?" mx sx))))
	    (let ((mx (mr))
		  (sx (sample 199)))
	      (if (fneq mx sx) (snd-display ";mix-sample 100: ~A ~A?" mx sx)))
	    (free-mix-sample-reader mr)
	    (if (not (= pos 100)) (snd-display ";mix-position: ~A?" pos))
	    (if (not (= len 41623)) (snd-display ";mix-frames: ~A?" len))
	    (if loc (snd-display ";mix-locked: ~A?" loc))
	    (if (not (= anc 0)) (snd-display ";mix-anchor: ~A?" anc))
	    (if (not (= trk 0)) (snd-display ";mix-track: ~A?" trk))
	    (if (not (= snd new-index)) (snd-display ";s mix-home: ~A?" snd))		
	    (if (not (= chn 0)) (snd-display ";c mix-home: ~A?" chn))
	    (if (not (= chns 1)) (snd-display ";mix-chans: ~A?" chn))
	    (if (fneq amp 1.0) (snd-display ";mix-amp: ~A?" amp))
	    (if (fneq spd 1.0) (snd-display ";mix-speed: ~A?" spd))
	    (catch 'mus-error
		   (lambda () (play-mix mix-id))
		   (lambda args (snd-display ";can't play mix")))
	    (set! (mix-position mix-id) 200) 
	    (set! (mix-name mix-id) "asdf") 
	    (set! (mix-amp mix-id 0) 0.5) 
	    (set! (mix-speed mix-id) 2.0) 
	    (set! (mix-track mix-id) 3) 
	    (catch 'mus-error
		   (lambda () (play-track 3))
		   (lambda args (snd-display ";can't play track")))
	    (catch 'mus-error
		   (lambda () (play-track 3 #t))
		   (lambda args (snd-display ";can't play track #t")))
	    (catch 'mus-error
		   (lambda () (play-track 3 new-index 0))
		   (lambda args (snd-display ";can't play track new-index")))
	    (set! (mix-anchor mix-id) 30) 
	    (set! (mix-amp-env mix-id 0) '(0.0 0.0 1.0 1.0)) 
	    (let ((val (mix-amp-env mix-id 0)))
	      (set! (mix-amp-env mix-id 0) (mix-amp-env mix-id 0))
	      (if (not (feql (mix-amp-env mix-id 0) val)) 
		  (snd-display ";set mix-amp-env to self: ~A ~A" val (mix-amp-env mix-id 0))))
	    (set! (mix-tag-y mix-id) 20) 
	    (let ((pos (mix-position mix-id))
		  (spd (mix-speed mix-id))
		  (trk (mix-track mix-id))
		  (amp (mix-amp mix-id 0))
		  (nam (mix-name mix-id))
		  (my (mix-tag-y mix-id))
		  (anc (mix-anchor mix-id)))
	      (if (not (= pos 200)) (snd-display ";set-mix-position: ~A?" pos))
	      (if (not (= my 20)) (snd-display ";set-mix-tag-y: ~A?" my))
	      (if (not (= trk 3)) (snd-display ";set-mix-track: ~A?" trk))
	      (if (fneq amp 0.5) (snd-display ";set-mix-amp: ~A?" amp))
	      (if (fneq spd 2.0) (snd-display ";set-mix-speed: ~A?" spd))
	      (if (not (= anc 30)) (snd-display ";set-mix-anchor: ~A?" anc))
	      (if (not (equal? (mix-amp-env mix-id 0) '(0.0 0.0 1.0 1.0))) (snd-display ";set-mix-amp-env: ~A?" (mix-amp-env mix-id 0)))
	      (if (not (string=? nam "asdf")) (snd-display ";set-mix-name: ~A?" nam))
	      (if (and (selected-mix) (= mix-id (selected-mix))) (snd-display ";selected-mix: ~A?" mix-id))
	      (set! (selected-mix) mix-id)
	      (if (not (= mix-id (selected-mix))) (snd-display ";set! select-mix: ~A ~A?" mix-id (selected-mix)))
	      (set! (selected-mix) #f)
	      (select-mix mix-id)
	      (if (not (= mix-id (selected-mix))) (snd-display ";select-mix: ~A ~A?" mix-id (selected-mix))))
	    (let* ((id (make-region 0 100))
		   (m0 (mix-region 100 id))
		   (m1 (mix-region 200 id)))
	      (select-mix m0)
	      (set! (selected-mix) m1)
	      (select-mix mix-id))
	    (if (not (= (mix-name->id "asdf") mix-id)) (snd-display ";mix-name->id: ~A?" (mix-name->id "asdf")))))
	(set! (cursor) 0)
	(let ((nid (forward-mix)))
	  (if (or (not (mix? nid))
		  (not (= (cursor) (mix-position nid))))
	      (snd-display ";forward-mix ~A ~A ~A?" nid (cursor) (and (mix? nid) (mix-position nid))))
	  (let ((nid1 (forward-mix 2)))
	    (if (or (not (mix? nid1))
		    (= nid nid1)
		    (not (= (cursor) (mix-position nid1))))
		(snd-display ";forward-mix(2) ~A ~A ~A ~A?" nid nid1 (cursor) (and (mix? nid1) (mix-position nid1))))
	    (set! nid1 (backward-mix))
	    (if (or (not (mix? nid1))
		    (not (= (cursor) (mix-position nid1))))
		(snd-display ";backward-mix(2) ~A ~A ~A?" nid1 (cursor) (and (mix? nid1) (mix-position nid1))))))
	(let ((nid (find-mix 100)))
	  (if (or (not (mix? nid))
		  (not (= (mix-position nid) 100)))
	      (snd-display ";find-mix(100): ~A ~A?" nid (and (mix? nid) (mix-position nid)))))
	(let ((nid (find-mix 200)))
	  (if (or (not (mix? nid))
		  (not (= (mix-position nid) 200)))
	      (snd-display ";find-mix(200): ~A ~A?" nid (and (mix? nid) (mix-position nid)))))
	(let ((mix-id (mix "oboe.snd" 100)))
	  (set! (mix-waveform-height) 40)
	  (set! (mix-property :hiho mix-id) 123)
	  (if (not (= (mix-property :hiho mix-id) 123)) (snd-display ";mix-property: ~A" (mix-property mix-id)))
	  (if (mix-property :not-there mix-id) (snd-display ";mix-not-property: ~A" (mix-property :not-there mix-id)))
	  (update-time-graph)
	  (set! (mix-waveform-height) 20)
	  (if (not (sound? (list mix-id))) (snd-display ";mix oboe: ~D not ok?" mix-id))
	  (if (not (= (chans (list mix-id)) 1)) (snd-display ";mix oboe: chans ~D?" (chans (list mix-id))))
	  (if (not (= (channels (list mix-id)) 1)) (snd-display ";mix oboe: channels ~D?" (channels (list mix-id))))
	  (if (not (= (frames (list mix-id)) 50828)) (snd-display ";mix oboe: frames ~D?" (frames (list mix-id))))
	  (if (not (= (srate (list mix-id)) 22050)) (snd-display ";mix oboe: srate ~D?" (srate (list mix-id))))
	  (if (not (= (data-location (list mix-id)) 28)) (snd-display ";mix oboe: location ~D?" (data-location (list mix-id))))
	  (if (not (= (data-size (list mix-id)) (* 50828 2))) (snd-display ";mix oboe: size ~D?" (data-size (list mix-id))))
	  (if (not (= (data-format (list mix-id)) mus-bshort)) (snd-display ";mix oboe: format ~A?" (data-format (list mix-id))))
	  (if (fneq (maxamp (list mix-id)) .14724) (snd-display ";mix oboe: maxamp ~F?" (maxamp (list mix-id))))
	  (if (comment (list mix-id)) (snd-display ";mix oboe: comment ~A?" (comment (list mix-id))))
	  (if (not (string=? (short-file-name (list mix-id)) "oboe.snd")) (snd-display ";mix oboe short name: ~S?" (short-file-name (list mix-id))))
	  (let ((matches (count-matches (lambda (a) (> a .125)) 0 (list mix-id))))
	    (if (not (= matches 1313)) (snd-display ";mix count-matches: ~A?" matches)))
	  (let ((opt (optimization)))
	    (set! (optimization) 0)
	    (let ((matches (count-matches (lambda (a) (> a .125)) 0 (list mix-id))))
	      (if (not (= matches 1313)) (snd-display ";unopt mix count-matches: ~A?" matches)))
	    (set! (optimization) opt))
	  (let ((spot (find (lambda (a) (> a .13)) 0 (list mix-id))))
	    (if (or (null? spot) (not (= (cadr spot) 8862))) (snd-display ";mix find: ~A?" spot)))
	  (let ((eds (edits (list mix-id))))
	    (if (or (not (= (car eds) 0)) (not (= (cadr eds) 0)))
		(snd-display ";mix edits: ~A?" eds))
	    (if (not (= (edit-position (list mix-id)) (car eds)))
		(snd-display ";mix edit-position: ~A ~A?" (edit-position (list mix-id)) eds)))
	  (let ((samps1 (samples->vct 0 50828 (list mix-id) 0))
		(vr (make-sample-reader 0 (list mix-id) 0 1)))
	    (if (not (sample-reader? vr)) (snd-display ";(mix) ~A not sample-reader?" vr))
	    (catch 'break
		   (lambda ()
		     (do ((i 0 (1+ i)))
			 ((= i 50828))
		       (if (not (= (vr) (samps1 i)))
			   (begin
			     (snd-display ";(mix) readers disagree at ~D" i)
			     (throw 'break)))))
		   (lambda args (car args)))
	    (free-sample-reader vr))
	  (insert-sample 100 .5 (list mix-id)) 
	  (if (or (fneq (sample 100 (list mix-id)) .5)
		  (not (= (frames (list mix-id)) 50829)))
	      (snd-display ";(mix) insert-sample: ~A ~A?" (sample 100 (list mix-id)) (frames (list mix-id))))
	  (let ((v0 (make-vector 3))
		(v1 (make-vct 3)))
	    (vct-fill! v1 .75)
	    (do ((i 0 (1+ i))) ((= i 3)) (vector-set! v0 i .25))
	    (insert-samples 200 3 v0 (list mix-id)) 
	    (insert-samples 300 3 v1 (list mix-id)) 
	    (if (or (fneq (sample 201 (list mix-id)) .25)
		    (fneq (sample 301 (list mix-id)) .75)
		    (not (= (frames (list mix-id)) 50835)))
		(snd-display ";(mix) insert-samples: ~A ~A ~A?" (sample 201 (list mix-id)) (sample 301 (list mix-id)) (frames (list mix-id)))))
	  (undo 2)
	  (set! (sample 50 (list mix-id)) .5) 
	  (if (fneq (sample 50 (list mix-id)) .5) (snd-display ";(mix) set-sample: ~A?" (sample 50 (list mix-id))))
	  (let ((v0 (make-vector 3)))
	    (do ((i 0 (1+ i))) ((= i 3)) (vector-set! v0 i .25))
	    (set! (samples 60 3 (list mix-id)) v0) 
	    (if (or (fneq (sample 60 (list mix-id)) .25) (fneq (sample 61 (list mix-id)) .25))
		(snd-display ";(mix) set-samples: ~A ~A ~A?" (sample 60 (list mix-id)) (sample 61 (list mix-id)) (sample 62 (list mix-id)))))
	  (undo)
	  (let ((fr (frames (list mix-id))))
	    (delete-sample 100 (list mix-id)) 
	    (if (not (= (frames (list mix-id)) (1- fr))) (snd-display ";(mix) delete-sample: ~A from ~A?" (frames (list mix-id)) fr)))
	  (let ((fr (frames (list mix-id))))
	    (delete-samples 0 100 (list mix-id)) 
	    (if (not (= (frames (list mix-id)) (- fr 100))) (snd-display ";(mix) delete-samples: ~A from ~A?" (frames (list mix-id)) fr)))
	  (undo 2)
	  (let ((maxa (maxamp (list mix-id))))
	  (scale-to .5 (list mix-id)) 
	  (let ((newmaxa (maxamp (list mix-id))))
	    (if (fneq newmaxa .5) (snd-display ";(mix) scale-to: ~A?" newmaxa))
	    (undo)
	    (scale-by 2.0 (list mix-id)) 
	    (set! newmaxa (maxamp (list mix-id)))
	    (if (fneq newmaxa (* 2.0 maxa)) (snd-display ";(mix) scale-by: ~A?" newmaxa))
	    (revert-sound)
	    (let ((tag (catch 'no-such-mix
			      (lambda ()
				(delete-sample 100 (list mix-id)))
			      (lambda args (car args)))))
	      (if (not (eq? tag 'no-such-mix))
		  (snd-display ";edit of invalid mix: ~A ~A" tag (edits))))
	    )))
	;; now track tests (mix.scm)
	(revert-sound new-index)
	(let ((mix-ids (make-vector 6)))
	  (do ((i 0 (1+ i)))
	      ((= i 6))
	    (vector-set! mix-ids i (mix "oboe.snd" (* i 1000))))
	  (set! (mix-track (vector-ref mix-ids 0)) 1)
	  (set! (mix-track (vector-ref mix-ids 2)) 1)
	  (set! (mix-track (vector-ref mix-ids 4)) 1)
	  (if (not (= (track-position (track 1)) 0)) (snd-display ";track-position: ~D?" (track-position (track 1))))
	  (let* ((mr (make-track-sample-reader 1))
		 (reader-string (format #f "~A" mr)))
	      (if (not (string=? (substring reader-string 0 24) "#<track-sample-reader 0x"))
		  (snd-display ";track sample reader actually got: [~S]" (substring reader-string 0 24)))
	      (if (not (string=? (substring reader-string 31) (string-append ": " home-dir "/cl/oboe.snd chan 0 via mixes '(10 12 14)>")))
		  (snd-display ";track sample reader actually got (2): [~S]" (substring reader-string 31)))
	      (free-track-sample-reader mr))
	  (let ((curend (track-end (track 1))))
	    (set-track-position (track 1) 500)
	    (if (not (= (track-position (track 1)) 500)) (snd-display ";set-track-position: ~D?" (track-position (track 1))))
	    (if (not (= (mix-position (vector-ref mix-ids 0)) 500)) (snd-display ";track-position ~D = ~D?" 0 (mix-position (vector-ref mix-ids 0))))
	    (if (not (= (mix-position (vector-ref mix-ids 1)) 1000)) (snd-display ";track-position ~D = ~D?" 1 (mix-position (vector-ref mix-ids 1))))
	    (if (not (= (mix-position (vector-ref mix-ids 4)) 4500)) (snd-display ";track-position ~D = ~D?" 4 (mix-position (vector-ref mix-ids 4))))
	    (if (not (= (track-end (track 1)) (+ curend 500))) (snd-display ";track-end: ~D (~D)?" (track-end (track 1)) (+ curend 500))))
	  (if (not (= (track-length (track 1)) (+ (frames (list (vector-ref mix-ids 0))) 4000)))
	      (snd-display ";track-length: ~D (~D)?" (track-length (track 1)) (+ 4000 50828)))
	  (set-track-amp (track 1) .5)
	  (if (fneq (mix-amp (vector-ref mix-ids 2) 0) .5) (snd-display ";set-track-amp ~F?" (mix-amp (vector-ref mix-ids 2) 0)))
	  (incf-track-amp (track 1) .25)
	  (if (fneq (mix-amp (vector-ref mix-ids 4) 0) .75) (snd-display ";incf-track-amp ~F?" (mix-amp (vector-ref mix-ids 4) 0)))
	  (transpose-track (track 1) 12)
	  (if (fneq (mix-speed (vector-ref mix-ids 2)) 2.0)
	      (snd-display ";transpose-track: ~F?" (mix-speed (vector-ref mix-ids 2))))
	  (if (not (= (frames (list (vector-ref mix-ids 1))) 50828))
	      (snd-display ";transpose-track mixup: ~D (~D)?" (frames (list (vector-ref mix-ids 1))) 50828))
	  (set-track-tempo (track 1) 2.0)
	  (if (not (= (track-length (track 1)) (/ (+ 4000 50828) 2)))
	      (snd-display ";track-tempo: ~D (~D)?" (track-length (track 1)) (/ (+ 4000 50828) 2)))
	  (catch 'no-such-color
		 (lambda () (set-track-color (track 1) (make-color .8 .8 .8)))
		 (lambda args args))
	  (set! (mix-track (vector-ref mix-ids 1)) 2)
	  (set! (mix-track (vector-ref mix-ids 3)) 2)
	  (catch 'no-such-color 
		 (lambda () (set-track-color (track 2) (make-color .2 .8 0)))
		 (lambda args args))
	  (let ((t2 (track->vct (track 2)))
		(t3 (mix->vct (vector-ref mix-ids 5))))
	    (if (or (fneq (vct-ref t2 1000) (vct-ref t3 1000))
		    (fneq (vct-ref t3 1000) 0.0328369))
		(snd-display ";track->vct: ~F, mix->vct: ~F (.0328369)?" (vct-ref t2 1000) (vct-ref t3 1000))))
	  (set-track-amp-env (track 1) 0 '(0 0 1 1))
	  (filter-track (track 1) '(.1 .2 .3 .3 .2 .1))
	  (play-and-wait))
	(let ((v1 (envelope-interp 1.0 '(0 0 2.0 1.0)))
	      (v2 (envelope-interp 1.0 '(0 0.0 1 1.0 2 0.0)))
	      (v3 (envelope-interp 2.0 '(0 0.0 1 1.0)))
	      (v4 (envelope-interp 0.0 '(1 .5 2 0))))
	  (if (fneq v1 0.5) (snd-display ";envelope-interp(1): ~F (0.5)?" v1))
	  (if (fneq v2 1.0) (snd-display ";envelope-interp(2): ~F (1.0)?" v2))
	  (if (fneq v3 1.0) (snd-display ";envelope-interp(3): ~F (1.0)?" v3))
	  (if (fneq v4 0.5) (snd-display ";envelope-interp(4): ~F (0.5)?" v4)))
	(let ((v1 (multiply-envelopes '(0.0 0.0 2.0 0.5) '(0.0 0.0 1.0 2.0 2.0 1.0)))
	      (v2 (window-envelope 1.0 3.0 '(0.0 0.0 5.0 1.0))))
	  (if (not (feql v1 (list 0.0 0.0 0.5 0.5 1.0 0.5))) (snd-display ";multiply-envelopes: ~A?" v1))
	  (if (not (feql v2 (list 1.0 0.2 3.0 0.6))) (snd-display ";window-envelope: ~A?" v2)))
	(close-sound new-index))
      (let ((index (open-sound "pistol.snd"))
	    (data (samples->vct 0 100)))
	(convolve-with "oboe.snd" #f)
	(let ((scl (maxamp)))
	  (convolve-with "oboe.snd" scl index 0 0)
	  (if (fneq (maxamp) scl) 
	      (snd-display ";convolve-with amps: ~A ~A" (maxamp) scl)
	      (let ((preader (make-sample-reader 0 index 0 1 1))
		    (reader (make-sample-reader 0))
		    (len (frames)))
		(call-with-current-continuation 
		 (lambda (break) 
		   (do ((i 0 (1+ i))) 
		       ((= i len))
		     (let ((val0 (preader))
			   (val1 (reader)))
		       (if (fneq val0 val1)
			   (begin
			     (snd-display ";convolve-with amps at: ~A: ~A ~A" i val0 val1)
			     (break))))))))))
	(close-sound index)
	(let ((reader (make-sample-reader 0 "pistol.snd")))
	  (do ((i 0 (1+ i)))
	      ((= i 10))
	    (if (fneq (vct-ref data i) (next-sample reader))
		(snd-display ";external reader trouble")))
	  (free-sample-reader reader)))
      )
    (dismiss-all-dialogs)

    (let ((ind (new-sound "new.snd"))
	  (mxs (make-vector 10)))
      (call-with-current-continuation
       (lambda (quit)
	 (do ((i 0 (1+ i)))
	     ((= i 10))
	   (let ((v (make-vct 1)))
	     (vct-set! v 0 (* i .05))
	     (vector-set! mxs i (mix-vct v i ind 0))
	     (if (not (mix? (vector-ref mxs i)))
		 (quit (snd-display ";mix-vct at ~A failed? " i))
		 (set! (mix-track (vector-ref mxs i)) 33))))
	 (let ((tr (make-track-sample-reader 33)))
	   (do ((i 0 (1+ i)))
	       ((= i 10))
	     (let ((val (if (odd? i) (next-track-sample tr) (read-track-sample tr))))
	       (if (fneq val (* i .05))
		   (begin
		     (close-sound ind)
		     (quit (snd-display ";read track at ~A: ~A?" i val))))))
	   (free-track-sample-reader tr)
	   (save-sound ind)
	   (if (not (mix? (vector-ref mxs 0)))
	       (snd-display ";saved mixes not re-activated?"))
	   (close-sound ind)))))

    (let* ((ind (open-sound "oboe.snd"))
	   (open-readers (make-vector 100 #f))
	   (mix1 (mix-vct (vct 0.1 0.2 0.3) 120 ind 0 #t "origin!"))
	   (mix2 (mix-vct (vct 0.1 0.2 0.3) 1200 ind 0 #t))
	   (mix3 (mix-vct (vct 0.1 0.2 0.3) 12000 ind 0 #t))
	   (reg1 (make-region 200 300 ind 0)))
      (set! (mix-track mix1) 123)
      (set! (mix-track mix2) 123)
      (set! (mix-track mix3) 123)
      (do ((i 0 (1+ i)))
	  ((= i sample-reader-tests))
	(let* ((cur (random 4))
	       (r (random 100)))
	  (if (= cur 0)
	      (begin
		(vector-set! open-readers r (make-sample-reader (random 30000) ind 0))
		(if (not (sample-reader? (vector-ref open-readers r))) (snd-display ";sample-reader? ~A?" (vector-ref open-readers r)))
		(next-sample (vector-ref open-readers r))
		(if (not (equal? (list ind 0) (sample-reader-home (vector-ref open-readers r))))
		    (snd-display ";sample-reader-home ~A?" (sample-reader-home (vector-ref open-readers r)))))
	      (if (= cur 1)
		  (begin
		    (vector-set! open-readers r (make-region-sample-reader (random 90) reg1))
		    (if (not (sample-reader? (vector-ref open-readers r))) (snd-display ";region-sample-reader? ~A?" (vector-ref open-readers r)))
		    (next-sample (vector-ref open-readers r)))
		  (if (= cur 2)
		      (begin
			(vector-set! open-readers r (make-mix-sample-reader mix1))
			(if (not (mix-sample-reader? (vector-ref open-readers r))) (snd-display ";mix-sample-reader? ~A?" (vector-ref open-readers r)))
			(let ((val (next-mix-sample (vector-ref open-readers r))))
			  (if (fneq val 0.1) (snd-display ";next-mix-sample: ~A" val))))
		      (begin
			(vector-set! open-readers r (make-track-sample-reader 123))
			(if (not (track-sample-reader? (vector-ref open-readers r))) (snd-display ";track-sample-reader? ~A?" (vector-ref open-readers r)))
			(let ((val (next-track-sample (vector-ref open-readers r))))
			  (if (fneq val 0.1) (snd-display ";next-track-sample: ~A" val)))))))
	  (if (> (random 1.0) .25)
	      (let ((rr (random 100)))
		(if (vector-ref open-readers rr)
		    (if (sample-reader? (vector-ref open-readers rr)) (free-sample-reader (vector-ref open-readers rr))
			(if (mix-sample-reader? (vector-ref open-readers rr)) (free-mix-sample-reader (vector-ref open-readers rr))
			    (if (track-sample-reader? (vector-ref open-readers rr)) (free-track-sample-reader (vector-ref open-readers rr))))))
		(vector-set! open-readers rr #f)))))
      (do ((i 0 (1+ i)))
	  ((= i 100))
	(vector-set! open-readers i #f))
      (close-sound ind)
      (gc))

    (let ((id (open-sound "oboe.snd")))
      (make-selection 1000 2000 id 0)
      (let ((mix-id (mix-selection 3000 id 0)))
	(set! (mix-amp mix-id 0) .5)
	(if (fneq (mix-amp mix-id 0) .5)
	    (snd-display ";mix-amp .5: ~A" (mix-amp mix-id 0)))
	(scale-by .5)
	(if (not (mix-locked mix-id))
	    (snd-display ";mix not locked? ~A" mix-id))
	(let ((var (catch #t (lambda () (set! (mix-amp mix-id 0) 1.0)) (lambda args args))))
	  (if (not (eq? (car var) 'no-such-mix))
	      (snd-display ";set locked mix amp: ~A" var)))
	(let ((var (catch #t (lambda () (set! (mix-position mix-id) 10)) (lambda args args))))
	  (if (not (eq? (car var) 'no-such-mix))
	      (snd-display ";set locked mix position: ~A" var)))
	(let ((var (catch #t (lambda () (set! (mix-speed mix-id) 1.5)) (lambda args args))))
	  (if (not (eq? (car var) 'no-such-mix))
	      (snd-display ";set locked mix speed: ~A" var)))
	(let ((var (catch #t (lambda () (set! (mix-amp-env mix-id 0) '(0 0 1 1))) (lambda args args))))
	  (if (not (eq? (car var) 'no-such-mix))
	      (snd-display ";set locked mix amp env: ~A" var)))
	(undo)
	(if (mix-locked mix-id)
	    (snd-display ";undo locked mix: ~A" mix-id)
	    (begin
	      (set! (mix-position mix-id) 10)
	      (if (not (= (mix-position mix-id) 10))
		  (snd-display ";mix-position 10: ~A" (mix-position mix-id)))))
	(close-sound id)))
    (set! (print-length) 30)
    (let ((index (new-sound "test.snd"))
	  (v1 (make-vct 1))
	  (v2 (make-vct 2))
	  (v3 (make-vct 3)))
      (vct-fill! v1 .1)
      (vct-fill! v2 .2)
      (vct-fill! v3 .3)
      (let ((id1 (map (lambda (start)
			(mix-vct v1 start))
		      (list 0 10 20)))
	    (id2 (map (lambda (start)
			(mix-vct v2 start))
		      (list 1 12 23)))
	    (id3 (map (lambda (start)
			(mix-vct v3 start))
		      (list 2 14 26)))
	    (trk1 (unused-track)))
	(if (not (vequal (channel->vct)
			 (vct .1 .2 .5 .3 .3  0 0  0 0 0  
			      .1 0  .2 .2 .3 .3 .3 0 0 0
			      .1 0  0  .2 .2  0 .3 .3 .3)))
	    (snd-display ";mix tests off to a bad start: ~A" (channel->vct)))
	(if (not (vequal (mix->vct (car id2)) (vct .2 .2)))
	    (snd-display ";mix->vct of .2: ~A" (mix->vct (car id2))))
	(for-each
	 (lambda (proc name)
	   (let ((tag (catch #t (lambda () (proc (track trk1))) (lambda args (car args)))))
	     (if (not (eq? tag 'no-such-track)) (snd-display ";~A err: ~A" name tag))))
	 (list track-position track-end track-length track-amp track-speed)
	 (list 'track-position 'track-end 'track-length 'track-amp 'track-speed))
	(set! (mix-track (car id1)) trk1)
	(let ((tr1 (track trk1)))
	  (if (not (equal? tr1 (list (car id1))))
	      (snd-display ";1 track->~A ~A" tr1 (car id1)))
	  (if (not (= (track-position tr1) (mix-position (car id1))))
	      (snd-display ";1 track-position ~A ~A (~A)" tr1 (track-position tr1) (mix-position (car id1))))
	  (if (not (= (track-length tr1) (mix-frames (car id1))))
	      (snd-display ";1 track-length ~A ~A (~A)" tr1 (track-length tr1) (mix-frames (car id1))))
	  (if (not (= (track-end tr1) (+ (mix-position (car id1)) (mix-frames (car id1)))))
	      (snd-display ";1 track-end ~A ~A ~A" (track-end tr1) (mix-position (car id1)) (mix-frames (car id1))))
	  (if (fneq (track-amp tr1) (mix-amp (car id1) 0))
	      (snd-display ";1 track-amp: ~A ~A" (track-amp tr1) (mix-amp (car id1) 0)))
	  (if (fneq (track-speed tr1) (mix-speed (car id1)))
	      (snd-display ";1 track-speed: ~A ~A" (track-speed tr1) (mix-speed (car id1))))
	  (if (not (vequal (track->vct tr1) (mix->vct (car id1))))
	      (snd-display ";1 track->vct ~A ~A" (track->vct tr1) (mix->vct (car id1))))
	  (delete-track tr1)
	  (if (fneq (mix-amp (car id1) 0) 0.0)
	      (snd-display ";1 delete-track amp: ~A" (mix-amp (car id1) 0)))
	  (if (not (vequal (channel->vct)
			   (vct 0 .2 .5 .3 .3  0 0  0 0 0  
				.1 0  .2 .2 .3 .3 .3 0 0 0
				.1 0  0  .2 .2  0 .3 .3 .3)))
	      (snd-display ";first mix deleted: ~A" (channel->vct)))
	  (undo)
	  (if (fneq (mix-amp (car id1) 0) 1.0)
	      (snd-display ";1 undo delete-track amp: ~A" (mix-amp (car id1) 0)))
	  (set! (track-amp tr1) 2.0)
	  (if (not (vequal (channel->vct)
			   (vct .2 .2 .5 .3 .3  0 0  0 0 0  
				.1 0  .2 .2 .3 .3 .3 0 0 0
				.1 0  0  .2 .2  0 .3 .3 .3)))
	      (snd-display ";1 set track-amp: ~A" (channel->vct)))
	  (set! (track-position tr1) 8)
	  (if (not (= (track-position tr1) 8))
	      (snd-display ";moved track 1: ~A" (track-position tr1)))
	  (if (not (vequal (channel->vct)
			   (vct 0 .2 .5 .3 .3  0 0  0 .2 0  
				.1 0  .2 .2 .3 .3 .3 0 0 0
				.1 0  0  .2 .2  0 .3 .3 .3)))
	      (snd-display ";1 set track-position 8: ~A" (channel->vct)))
	  (reverse-track tr1)
	  (if (not (vequal (channel->vct)
			   (vct 0 .2 .5 .3 .3  0 0  0 .2 0  
				.1 0  .2 .2 .3 .3 .3 0 0 0
				.1 0  0  .2 .2  0 .3 .3 .3)))
	      (snd-display ";1 reverse track: ~A" (channel->vct)))
	  
	  (let* ((trk2 (unused-track))
		 (tr2 (make-track trk2 (list (cadr id1) (cadr id2) (cadr id3)))))
	    (if (not (= (track-position tr2) (mix-position (cadr id1))))
		(snd-display ";2 track-position ~A ~A (~A)" tr2 (track-position tr2) (mix-position (cadr id1))))
	    (set! (track-amp tr2) 2.0)
	    (if (not (vequal (channel->vct)
			     (vct 0 .2 .5 .3 .3  0 0  0 .2 0  
				  .2 0  .4 .4 .6 .6 .6 0 0 0
				  .1 0  0  .2 .2  0 .3 .3 .3)))
		(snd-display ";2 set track-amp: ~A" (channel->vct)))
	    (set! (track-position tr2) (- (track-position tr2) 1))
	    (if (not (vequal (channel->vct)
			     (vct 0 .2 .5 .3 .3  0 0  0 .2 .2  
				  0 .4 .4 .6 .6 .6 0 0 0 0
				  .1 0  0  .2 .2  0 .3 .3 .3)))
		(snd-display ";2 set track-position: ~A" (channel->vct)))
	    (delete-all-tracks)
	    (if (not (vequal (channel->vct)
			     (vct 0 .2 .5 .3 .3  0 0  0 0 0
				  0 0 0 0 0 0 0 0 0 0
				  .1 0  0  .2 .2  0 .3 .3 .3)))
		(snd-display ";2 delete-all-tracks: ~A" (channel->vct)))
	    (undo)
	    (if (not (vequal (channel->vct)
			     (vct 0 .2 .5 .3 .3  0 0  0 .2 .2  
				  0 .4 .4 .6 .6 .6 0 0 0 0
				  .1 0  0  .2 .2  0 .3 .3 .3)))
		(snd-display ";2 undo delete-all-tracks: ~A" (channel->vct)))
	    (revert-sound index)
	    
	    (set! id1 (map (lambda (start)
			     (mix-vct v1 start))
			   (list 0 10 20)))
	    (set! id2 (map (lambda (start)
			     (mix-vct v2 start))
			   (list 1 12 23)))
	    (set! id3 (map (lambda (start)
			     (mix-vct v3 start))
			   (list 2 14 26)))
	    (if (not (vequal (channel->vct)
			     (vct .1 .2 .5 .3 .3  0 0  0 0 0  
				  .1 0  .2 .2 .3 .3 .3 0 0 0
				  .1 0  0  .2 .2  0 .3 .3 .3)))
		(snd-display ";mix tests 2nd start: ~A" (channel->vct)))
	    (set! tr1 (make-track (unused-track) id1))
	    (set! tr2 (make-track (unused-track) id3))
	    (let ((old-pos (map mix-position tr1)))
	      (if (not (equal? old-pos (map mix-position id1)))
		  (snd-display ";old-pos: ~A ~A" old-pos (map mix-position id1)))
	      (set-track-tempo tr1 2) ; tempo > 1 is faster
	      (if (not (vequal (channel->vct)
			       (vct .1 .2 .5 .3 .3  .1 0  0 0 0  
				    .1 0  .2 .2 .3 .3 .3 0 0 0
				    0 0  0  .2 .2  0 .3 .3 .3)))
		  (snd-display ";3 track-tempo .5: ~A -> ~A, ~A" old-pos (map mix-position tr1) (channel->vct))))
	    (set! (track-amp tr1) 0.0)
	    (if (not (vequal (channel->vct)
			     (vct 0 .2 .5 .3 .3  0 0  0 0 0  
				  0 0  .2 .2 .3 .3 .3 0 0 0
				  0 0  0  .2 .2  0 .3 .3 .3)))
		(snd-display ";3 track-amp 0: ~A" (channel->vct)))
	    (delete-all-mixes)
	    (if (fneq (vct-peak (channel->vct)) 0.0)
		(snd-display ";2 delete-all-mixes: ~A ~A" (vct-peak (channel->vct)) (channel->vct)))))
	
	(close-sound index)
	))

    (let* ((oboe (open-sound "oboe.snd"))
	   (orig-vals (channel->vct 0 10 oboe 0))
	   (mix-vals (vct-fill! (make-vct 10) .1))
	   (md (mix-vct mix-vals 0 oboe 0 #t))
	   (vals (channel->vct 0 10 oboe 0)))
      (if (not (vequal vals (vct-add! (vct-copy orig-vals) mix-vals)))
	  (snd-display ";mix ~A = ~A + ~A" vals orig-vals mix-vals))
      (if (not (equal? (edits (list md)) (list 0 0)))
	  (snd-display ";initial mix edits: ~A?" (edits (list md))))
      (scale-by 3.0 (list md))
      (let ((new-vals (channel->vct 0 10 oboe 0))
	    (old-vals (vct-add! (vct-scale! (vct-copy mix-vals) 3.0) orig-vals)))
	(if (not (vequal new-vals old-vals))
	    (snd-display ";scale-by mix ~A: ~A ~A" md vals new-vals)))
      (if (not (equal? (edits (list md)) (list 1 0)))
	  (snd-display ";scaled mix edits: ~A?" (edits (list md))))
      (let ((tag (catch 'no-such-edit
			(lambda ()
			  (undo 1 (list md)))
			(lambda args (car args)))))
	(if (not (eq? tag 'no-such-edit))
	    (snd-display ";undo 1 (~A) got: ~A with ~A" md tag (edits (list md)))))
      (if (not (equal? (edits (list md)) (list 1 0)))
	  (snd-display ";undo scaled mix edits: ~A?" (edits (list md))))
      (let ((tag (catch 'no-such-edit
			(lambda ()
			  (revert-sound (list md)))
			(lambda args (car args)))))
	(if (not (eq? tag 'no-such-edit))
	    (snd-display ";revert-sound (~A) got: ~A with ~A" md tag (edits (list md)))))
      (if (not (equal? (edits (list md)) (list 1 0)))
	  (snd-display ";revert scaled mix edits: ~A?" (edits (list md))))
      (undo 1 oboe)
      (if (not (equal? (edits (list md)) (list 0 1)))
	  (snd-display ";outer undo scaled mix edits: ~A?" (edits (list md))))
      (if (not (vequal (channel->vct 0 10 oboe 0) vals))
	  (snd-display ";undo outer mix: ~A ~A" vals (channel->vct 0 10 oboe 0)))
      (redo 1 oboe)
      (if (not (equal? (edits (list md)) (list 1 0)))
	  (snd-display ";redo scaled mix edits: ~A?" (edits (list md))))
      (let ((new-vals (channel->vct 0 10 oboe 0))
	    (old-vals (vct-add! (vct-scale! (vct-copy mix-vals) 3.0) orig-vals)))
	(if (not (vequal new-vals old-vals))
	    (snd-display ";redo scale-by mix ~A: ~A ~A" md vals new-vals)))
      (set! (sample 1 (list md)) .5)
      (if (not (equal? (edits (list md)) (list 2 0)))
	  (snd-display ";set .5 mix edits: ~A?" (edits (list md))))
      (let ((new-vals (channel->vct 0 10 oboe 0))
	    (old-vals (vct-add! (vct-scale! (vct-copy mix-vals) 3.0) orig-vals)))
	(vct-set! old-vals 1 .5)
	(if (not (vequal new-vals old-vals))
	    (snd-display ";set 1 to .5 mix ~A: ~A ~A" md vals new-vals)))
      (scale-by .5)
      (if (not (equal? (edits (list md)) (list 2 0)))
	  (snd-display ";outer scale set .5 mix edits: ~A?" (edits (list md))))
      (revert-sound)
      (redo)
      (if (not (equal? (edits (list md)) (list 0 2)))
	  (snd-display ";revert outer mix edits: ~A?" (edits (list md))))
      (scale-by 3.0 (list md))
      (let ((new-vals (channel->vct 0 10 oboe 0))
	    (old-vals (vct-add! (vct-scale! (vct-copy mix-vals) 3.0) orig-vals)))
	(if (not (vequal new-vals old-vals))
	    (snd-display ";3rd scale-by mix ~A: ~A ~A" md vals new-vals)))
      (if (not (equal? (edits (list md)) (list 1 0)))
	  (snd-display ";3rd scaled mix edits: ~A?" (edits (list md))))
      (scale-by 3.0 (list md))
      (let ((new-vals (channel->vct 0 10 oboe 0))
	    (old-vals (vct-add! (vct-scale! (vct-copy mix-vals) 9.0) orig-vals)))
	(if (not (vequal new-vals old-vals))
	    (snd-display ";4th scale-by mix ~A: ~A ~A" md vals new-vals)))
      (if (not (equal? (edits (list md)) (list 2 0)))
	  (snd-display ";4th scaled mix edits: ~A?" (edits (list md))))
      (if (and (mix? md) (not (mix-locked md))) (set! (mix-frames md) 4))
      (let ((tag (catch #t
			(lambda () (set! (mix-frames md) -1))
			(lambda args (car args)))))
	(if (not (eq? tag 'wrong-type-arg))
	    (snd-display ";set mix-frame -1: ~A"  tag)))

      (revert-sound oboe)
      (delete-sample 100)
      (scale-by 2.0)
      (revert-sound oboe)
      (redo 32 oboe 0)
      (if (not (= (edit-position oboe 0) 2))
	  (snd-display ";redo 32: ~A" (edit-position oboe 0)))
      (undo 32 oboe 0)
      (if (not (= (edit-position oboe 0) 0))
	  (snd-display ";undo 32: ~A" (edit-position oboe 0)))

      (close-sound oboe))

    (let* ((ind (open-sound "2.snd"))
	   (md (mix "1a.snd" 1000 0 ind 1 #t)))
      (if (or (not (equal? (edits ind 0) (list 0 0)))
	      (not (equal? (edits ind 1) (list 1 0))))
	  (snd-display ";mix into chan2: ~A ~A" (edits ind 0) (edits ind 1)))
      (add-hook! select-mix-hook (lambda (id) (if (not (= id md)) (snd-display ";select-mix-hook: ~A ~A" id md))))
      (select-mix md)
      (reset-hook! select-mix-hook)
      (if (fneq (maxamp ind 1) .1665) (snd-display ";maxamp after mix into chan 2: ~A" (maxamp ind 1)))
      (set! (mix-amp md 0) 0.0)
      (if (or (not (equal? (edits ind 0) (list 0 0)))
	      (not (equal? (edits ind 1) (list 2 0))))
	  (snd-display ";mix into chan2 zeroed: ~A ~A" (edits ind 0) (edits ind 1)))
      (if (fneq (maxamp ind 1) .066) (snd-display ";maxamp after mix zeroed into chan 2: ~A" (maxamp ind 1)))
      (set! (mix-amp md 0) 0.5)
      (if (fneq (maxamp ind 1) .116) (snd-display ";maxamp after mix 0.5 into chan 2: ~A" (maxamp ind 1)))
      (set! (mix-speed md) 2.0)
      (if (fneq (/ (mix-frames md) (mus-sound-frames "1a.snd")) 0.5)
	  (snd-display ";mix srate chan 2: ~A" (mix-frames md)))
      (update-time-graph)
      (set! (mix-speed md) 0.5)
      (update-time-graph)
      (set! (mix-amp md 0) 1.0)
      (if (fneq (maxamp ind 1) .166) (snd-display ";non-sinc mix-speed: ~A" (maxamp ind 1)))
      (set! (mix-amp-env md 0) '(0 0 1 1 2 0))
      (update-time-graph)
      (set! (mix-speed md) 1.0)
      (update-time-graph)
      (revert-sound ind)
      (set! (sync ind) 1)
      (let ((m0 (maxamp ind 0))
	    (m1 (maxamp ind 1))
	    (len (frames ind 0)))
	(mix-panel-applies-to-track)
	(set! md (mix "2.snd")) ; should double both chans, no len change
	(if (or (not (= (frames ind 0) len))
		(fneq (maxamp ind 0) (* 2 m0))
		(fneq (maxamp ind 1) (* 2 m1)))
	    (snd-display ";mix twice syncd: 0: ~A -> ~A, m1: ~A -> ~A, len: ~A -> ~A"
			 m0 (maxamp ind 0) m1 (maxamp ind 1) len (frames ind 0)))
	(if (or (= (mix-sync md) 0)
		(not (= (mix-sync md) (mix-sync (1+ md)))))
	    (snd-display ";mix-panel-applies-to-track setup: ~A ~A" (mix-sync md) (mix-sync (1+ md))))
	(if (and (provided? 'snd-motif)
		 (provided? 'xm))
	    (begin
	      (mix-panel)
	      (let* ((mixd (list-ref (dialog-widgets) 16))
		     (spdscr (find-child mixd "speed"))
		     (dragged #f))
		(add-hook! mix-drag-hook (lambda (n) (set! dragged n)))
		(XtCallCallbacks spdscr XmNvalueChangedCallback
				 (let ((cb (XmScrollBarCallbackStruct)))
				   (set! (.value cb) 650)
				   (set! (.event cb) (XEvent))
				   cb))
		(if (fneq (mix-speed md) (mix-speed (1+ md)))
		    (snd-display ";sybcd mix speed value-changed: ~A ~A" (mix-speed md) (mix-speed (1+ md))))
		(let* ((xy (mix-tag-position md))
		       (cwid (car (channel-widgets ind 0)))
		       (x (+ (car xy) 1))
		       (y (- (cadr xy) 2))
		       (pos (mix-position md)))
		  (drag-event cwid 1 0 x y (+ x 50) y) (force-event)
		  (if (= (mix-position md) pos)
		      (snd-display ";pos: ~A -> ~A ~A" pos (mix-position md) (mix-position (1+ md))))
		  (XtUnmanageChild mixd)
		  (if (or (not dragged)
			  (not (= dragged md)))
		      (snd-display ";mix-drag-hook: ~A (~A)" dragged md))
		  (reset-hook! mix-drag-hook)
		  ))))
	(reset-hook! mix-position-changed-hook)
	(reset-hook! mix-speed-changed-hook)
	(reset-hook! multichannel-mix-hook)
	(close-sound ind)))
    
    (let ((ind (new-sound "fmv.snd" mus-next mus-bshort 22050 1 "mix tests")))
      (insert-silence 0 20 ind)
      (let ((indout (new-sound "test.snd" mus-next mus-bshort 22050 1 "mix tests")))
	(insert-silence 0 10 indout)
	(set! (sample 2 indout 0) .5)
	(set! (sample 5 indout 0) .25)
	(save-sound indout)
	(close-sound indout))
      (let ((tag (mix "test.snd")))
	(let ((samps (channel->vct 0 20))
	      (v (make-vct 20 0.0)))
	  (vct-set! v 2 .5)
	  (vct-set! v 5 .25)
	  (if (not (vequal samps v))
	      (snd-display ";mix 1->1: ~A ~A" samps v)))
	(if (not (mix? tag)) (snd-display ";mix 1->1 tag: ~A" tag))
	(undo))
      (let ((tag (mix "test.snd" 5)))
	(let ((samps (channel->vct 0 20))
	      (v (make-vct 20 0.0)))
	  (vct-set! v 7 .5)
	  (vct-set! v 10 .25)
	  (if (not (vequal samps v))
	      (snd-display ";mix 1->1 at 5: ~A ~A" samps v)))
	(if (not (mix? tag)) (snd-display ";mix 1->1 at 5 tag: ~A" tag))
	(undo))
      (let ((tag (mix "test.snd" 0 0 ind 0 #f)))
	(let ((samps (channel->vct 0 20))
	      (v (make-vct 20 0.0)))
	  (vct-set! v 2 .5)
	  (vct-set! v 5 .25)
	  (if (not (vequal samps v))
	      (snd-display ";mix 1->1 at 0 #f: ~A ~A" samps v)))
	(if (mix? tag) (snd-display ";mix 1->1 at 5 #f tag: ~A" tag))
	(undo))
      (let ((indout (new-sound "test.snd" mus-next mus-bshort 22050 2 "mix tests")))
	(insert-silence 0 10 indout 0)
	(insert-silence 0 10 indout 1)
	(set! (sample 2 indout 0) .5)
	(set! (sample 5 indout 0) .25)
	(set! (sample 2 indout 1) .95)
	(set! (sample 5 indout 1) .125)
	(save-sound indout)
	(close-sound indout))
      (let ((tag (mix "test.snd" 0 1)))
	(let ((samps (channel->vct 0 20))
	      (v (make-vct 20 0.0)))
	  (vct-set! v 2 .95)
	  (vct-set! v 5 .125)
	  (if (not (vequal samps v))
	      (snd-display ";mix 2->1: ~A ~A" samps v)))
	(if (not (mix? tag)) (snd-display ";mix 2->1 tag: ~A" tag))
	(undo))
      (let ((tag (mix "test.snd" 5 1)))
	(let ((samps (channel->vct 0 20))
	      (v (make-vct 20 0.0)))
	  (vct-set! v 7 .95)
	  (vct-set! v 10 .125)
	  (if (not (vequal samps v))
	      (snd-display ";mix 2->1 at 5: ~A ~A" samps v)))
	(if (not (mix? tag)) (snd-display ";mix 2->1 at 5 tag: ~A" tag))
	(undo))
      (close-sound ind)
      (set! ind (new-sound "fmv.snd" mus-next mus-bshort 22050 2 "mix tests"))
      (insert-silence 0 20 ind 0)
      (insert-silence 0 20 ind 1)
      (let ((tag (mix "test.snd")))
	(let ((samps0 (channel->vct 0 20 ind 0))
	      (samps1 (channel->vct 0 20 ind 1))
	      (v (make-vct 20 0.0)))
	  (if (not (vequal samps1 v))
	      (snd-display ";mix 1->1 (2): ~A ~A" samps1 v))
	  (vct-set! v 2 .5)
	  (vct-set! v 5 .25)
	  (if (not (vequal samps0 v))
	      (snd-display ";mix 1->1 (3): ~A ~A" samps0 v)))
	(if (not (mix? tag)) (snd-display ";mix 1->1 tag: ~A" tag))
	(undo 1 ind 0))
      (let ((tag (mix "test.snd" 0 1 ind 1 #f)))
	(let ((samps0 (channel->vct 0 20 ind 0))
	      (samps1 (channel->vct 0 20 ind 1))
	      (v (make-vct 20 0.0)))
	  (if (not (vequal samps0 v))
	      (snd-display ";mix 1->1 (4): ~A ~A" samps0 v))
	  (vct-set! v 2 .95)
	  (vct-set! v 5 .125)
	  (if (not (vequal samps1 v))
	      (snd-display ";mix 1->1 (5): ~A ~A" samps1 v)))
	(if (mix? tag) (snd-display ";mix 1->1 tag (5): ~A" tag))
	(undo 1 ind 1))
      (set! (sync ind) 1)
      (let ((tag (mix "test.snd")))
	(let ((samps0 (channel->vct 0 20 ind 0))
	      (samps1 (channel->vct 0 20 ind 1))
	      (v (make-vct 20 0.0)))
	  (vct-set! v 2 .5)
	  (vct-set! v 5 .25)
	  (if (not (vequal samps0 v))
	      (snd-display ";mix 1->1 (6): ~A ~A" samps0 v))
	  (vct-set! v 2 .95)
	  (vct-set! v 5 .125)
	  (if (not (vequal samps1 v))
	      (snd-display ";mix 1->1 (7): ~A ~A" samps1 v)))
	(undo))
      (set! (cursor ind) 5)
      (let ((tag (mix "test.snd")))
	(let ((samps0 (channel->vct 0 20 ind 0))
	      (samps1 (channel->vct 0 20 ind 1))
	      (v (make-vct 20 0.0)))
	  (vct-set! v 7 .5)
	  (vct-set! v 10 .25)
	  (if (not (vequal samps0 v))
	      (snd-display ";mix 1->1 (8): ~A ~A" samps0 v))
	  (vct-set! v 7 .95)
	  (vct-set! v 10 .125)
	  (if (not (vequal samps1 v))
	      (snd-display ";mix 1->1 (9): ~A ~A" samps1 v)))
	(undo))
      (close-sound ind))
    (delete-file "test.snd")
    (delete-file "fmv.snd")

    ;; check ripple_mixes
    (let* ((ind (open-sound "oboe.snd"))
	   (data (channel->vct 100 100))
	   (m1 (mix-vct data 321 ind 0 #t))
	   (m2 (mix-vct data 123 ind 0 #t)))
      (set! (mix-position m1) 500)
      (if (not (= (mix-position m1) 500)) (snd-display ";mix-position m1[0]: ~A" (mix-position m1)))
      (if (not (= (mix-position m2) 123)) (snd-display ";mix-position m2[0]: ~A" (mix-position m2)))
      (undo)
      (set! (mix-position m2) 500)
      (if (not (= (mix-position m2) 500)) (snd-display ";mix-position m2[1]: ~A" (mix-position m2)))
      (if (not (= (mix-position m1) 321)) (snd-display ";mix-position m1[1]: ~A" (mix-position m1)))
      (undo)
      (insert-silence 0 100)
      (if (not (= (mix-position m1) (+ 100 321))) (snd-display ";mix-position m1[2]: ~A" (mix-position m1)))
      (if (not (= (mix-position m2) (+ 100 123))) (snd-display ";mix-position m2[2]: ~A" (mix-position m2)))
      (delete-samples 0 50)
      (if (not (= (mix-position m1) (+ 50 321))) (snd-display ";mix-position m1[3]: ~A" (mix-position m1)))
      (if (not (= (mix-position m2) (+ 50 123))) (snd-display ";mix-position m2[3]: ~A" (mix-position m2)))
      (undo 2)
      (set! (mix-track m1) 1)
      (set! (mix-track m2) 1)
      (reverse-track (track 1))
      (if (not (= (mix-position m1) 123)) (snd-display ";mix-position m1[4]: ~A" (mix-position m1)))
      (if (not (= (mix-position m2) 321)) (snd-display ";mix-position m1[4]: ~A" (mix-position m2)))
      (undo)
      (set! (mix-position m2) 500)
      (undo)
      (scale-channel 0.5 1000 100)
      (if (not (= (mix-position m2) 123)) (snd-display ";mix-position m2[5]: ~A" (mix-position m2)))
      (if (not (= (mix-position m1) 321)) (snd-display ";mix-position m1[5]: ~A" (mix-position m1)))
      (undo)
      (set! (mix-position m2) 500)
      (undo)
      (ptree-channel (lambda (y) (* y 0.5)) 2000 100)
      (if (not (= (mix-position m2) 123)) (snd-display ";mix-position m2[6]: ~A" (mix-position m2)))
      (if (not (= (mix-position m1) 321)) (snd-display ";mix-position m1[6]: ~A" (mix-position m1)))
      (undo)
      (set! (mix-position m2) 500)
      (undo)
      (ramp-channel 0.0 1.0 3000 100)
      (if (not (= (mix-position m2) 123)) (snd-display ";mix-position m2[7]: ~A" (mix-position m2)))
      (if (not (= (mix-position m1) 321)) (snd-display ";mix-position m1[7]: ~A" (mix-position m1)))
      (close-sound ind))

    ;; check that current console is correct
    (let ((ind (open-sound "storm.snd")))
      (set! (x-bounds) (list 0 80.0))
      (make-selection 1000000 1050000)
      (let ((m1 (mix-selection 900000))
	    (m2 (mix-selection 400000)))
	(as-one-edit (lambda () 
		       (set! (mix-position m1) 0) 
		       (set! (mix-position m2) 1)))
	(if (or (not (= (mix-position m1) 0))
		(not (= (mix-position m2) 1)))
	    (snd-display ";as-one-edit positions: ~A ~A" (mix-position m1) (mix-position m2)))
	(undo)
	(if (or (not (= (mix-position m1) 900000))
		(not (= (mix-position m2) 400000)))
	    (snd-display ";as-one-edit positions after undo: (~A): ~A (~A): ~A" m1 (mix-position m1) m2 (mix-position m2)))
	(redo)
	(if (or (not (= (mix-position m1) 0))
		(not (= (mix-position m2) 1)))
	    (snd-display ";as-one-edit positions after redo: ~A ~A" (mix-position m1) (mix-position m2)))
	(close-sound ind)))

    (let ((ind (open-sound "2.snd")))
      (make-selection 0 10000 ind)
      (if (not (= (selection-chans) 2))
	  (snd-display ";stereo selection: ~A" (selection-chans)))
      (set! (sync ind) #t)
      (let ((md (mix-selection 500 ind)))
	(if (not (= (mix-chans md) 2))
	    (snd-display ";mix-chans of stereo selection: ~A" (mix-chans md)))
	(if (not (mix? (1+ md)))
	    (snd-display ";where is 2nd mix? ~A ~A" md (mixes)))
	(if (not (= (edit-position ind 0) 1))
	    (snd-display ";edit-position 0 after stereo mix selection: ~A" (edit-position ind 0)))
	(if (not (= (edit-position ind 1) 1))
	    (snd-display ";edit-position 1 after stereo mix selection: ~A" (edit-position ind 1)))
	(set! (sync ind) #f)
	(undo 1 ind 0)
	(delete-sample 25 ind 0)
	(set! (mix-position (1+ md)) 750)
	(if (not (= (edit-position ind 1) 2))
	    (snd-display ";edit-position 1 after stereo mix selection moved: ~A" (edit-position ind 2)))
	(if (fneq (maxamp (list (1+ md))) 0.03332)
	    (snd-display ";maxamp of 2nd sel mix: ~A" (maxamp (list (1+ md)))))
	(if (fneq (sample 1005 ind 1) 0.011)
	    (snd-display ";mixed sel samp: ~A" (sample 1005 ind 1)))
	(scale-channel .5 0 10000 (list (1+ md)) 1)
	(if (fneq (sample 1005 ind 1) 0.0084)
	    (snd-display ";mixed sel samp 2: ~A" (sample 1005 ind 1)))
	(revert-sound ind)
	(delete-sample 25 ind 1)
	(if (or (mix? md) (mix? (1+ md)))
	    (snd-display ";undo mix stereo sel: ~A ~A" (mix? md) (mix? (1+ md))))
	(close-sound ind)))

    (let ((ind (new-sound "test.snd"))
	  (v (make-vct 20)))
      (do ((i 0 (1+ i))) ((= i 20)) (vct-set! v i (* i .01)))
      (vct->channel v)
      (do ((i 0 (1+ i))) ((= i 20)) (vct-set! v i (* i -.01)))
      (let ((mx (mix-vct v 10)))
	(let ((hi (make-mix-sample-reader mx))
	      (ho (make-mix-sample-reader mx 5)))
	  (call-with-current-continuation
	   (lambda (break)
	     (do ((i 0 (1+ i)))
		 ((= i 10))
	       (let ((ho-val (ho))
		     (hi-val (hi)))
		 (if (fneq hi-val (* i -.01))
		     (begin
		       (snd-display "mix-reader at ~A from 0: ~A" i hi-val)
		       (break)))
		 (if (fneq ho-val (* (+ i 5) -.01))
		     (begin
		       (snd-display "mix-reader at ~A from 5: ~A" i ho-val)
		       (break)))))))))
      (revert-sound ind)
      (set! v (make-vct 21))
      (vct-fill! v 0.5)
      (vct->channel v)
      (let ((mx (mix-vct v 10)))
	(set! (mix-amp-env mx 0) '(0 0 1 1))
	(let ((hi (make-mix-sample-reader mx 0))
	      (ho (make-mix-sample-reader mx 10)))
	  (call-with-current-continuation
	   (lambda (break)
	     (do ((i 0 (1+ i)))
		 ((= i 10))
	       (let ((ho-val (ho))
		     (hi-val (hi)))
		 (if (fneq hi-val (* i .025))
		     (begin
		       (snd-display "mix-reader env'd at ~A from 0: ~A" i hi-val)
		       (break)))
		 (if (fneq ho-val (* (+ i 10) .025))
		     (begin
		       (snd-display "mix-reader env'd at ~A from 10: ~A" i ho-val)
		       (break)))))))))
      (close-sound ind))
    ))

(clear-sincs)

(define maxval 0.0)
(define data-max
  (lambda (beg end)
    (set! maxval 0.0)
    (apply for-each 
	   (lambda (snd chn)
	     (scan-chan (lambda (n)
			  (set! maxval (max maxval (abs n)))
			  #f)
			0 #f snd chn))
	   (all-chans))
    maxval))

(define data-max2
  (lambda (beg end snd)
    (set! maxval 0.0)
    (do ((i 0 (1+ i)))
	((= i (chans snd)) maxval)
      (scan-chan (lambda (n)
		   (set! maxval (max maxval (abs n)))
		   #f)
		 0 #f snd i))))

(define data-max1
  (lambda (beg end snd chn)
    (set! maxval 0.0)
    (scan-chan 
     (lambda (data)
       (let ((curval (abs data)))
	 (if (> curval maxval) (set! maxval curval))
	 #f))
     beg end snd chn)
    maxval))

(load "marks.scm")

;;; ---------------- test 10: marks ----------------
(if (or full-test (= snd-test 10) (and keep-going (<= snd-test 10)))
    (begin 
	(if (procedure? test-hook) (test-hook 10))
    (do ((test-ctr 0 (1+ test-ctr)))
	((= test-ctr tests))
      (if (> tests 1) (snd-display ";test ~D" test-ctr))
      (let ((ind0 (view-sound "oboe.snd"))
	    (ind1 (view-sound "pistol.snd"))
	    (v0 (make-vct 100))
	    (vc (make-vector 10)))
	(log-mem test-ctr)
	(vct-fill! v0 .1)
	(vector-set! vc 0 (mix-vct v0 0 ind0))
	(vector-set! vc 1 (mix-vct v0 1000 ind0))
	(vector-set! vc 2 (mix-vct v0 2000 ind0))
	(vector-set! vc 3 (mix-vct v0 3000 ind0))
	(vector-set! vc 4 (mix-vct v0 4000 ind0))
	(vector-set! vc 5 (mix-vct v0 0 ind1))
	(vector-set! vc 6 (mix-vct v0 1000 ind1))
	(vector-set! vc 7 (mix-vct v0 2000 ind1))
	(vector-set! vc 8 (mix-vct v0 3000 ind1))
	(vector-set! vc 9 (mix-vct v0 4000 ind1))
	(let ((t0 (make-track 1 (list (vector-ref vc 0) (vector-ref vc 3) (vector-ref vc 5))))
	      (t1 (make-track 2 (list (vector-ref vc 2) (vector-ref vc 6) (vector-ref vc 8)))))
	  (set-track-amp t0 .5)
	  (time (transpose-track t1 3))
	  (catch 'no-such-color
		 (lambda () (set-track-color t1 (make-color 0 0 1)))
		 (lambda args args))
	  (let ((t0e (track-end t0)))
	    (set-track-position t0 1000)
	    (if (not (= (track-position t0) 1000)) (snd-display ";track-position: ~A?" (track-position t0)))
	    (if (not (= (track-end t0) (+ t0e 1000))) (snd-display ";track-end: ~A ~A?" t0e (track-end t0))))
	  (if (not (= (track-length t0) 3100)) (snd-display ";track-length: ~A?" (track-length t0)))
	  (set-track-tempo t0 2.0)
	  (if with-gui
	      (let ((col (color->list (track-color t1))))
		(if (or (fneq (car col) 0.0) (fneq (cadr col) 0.0) (fneq (caddr col) 1.0))
		    (snd-display ";track-color: ~A?" col))))
	  (if (not (= (track-length t0) 1600)) (snd-display ";track-tempo -> length: ~A?" (track-length t0))))
	(close-sound ind0)
	(close-sound ind1)
	(set! ind0 (new-sound "fmv.snd" mus-aifc mus-bshort 22050 1 "this is a comment"))
	(let ((v0 (make-vector 10)))
	  (do ((i 0 (1+ i))) ((= i 10)) (vector-set! v0 i 1.0))
	  (insert-samples 0 10 v0 ind0) 
	  (time (env-sound '(0 0 1 1) 0 10 1.0 ind0))
	  (do ((i 0 (1+ i))) ((= i 10)) (if (fneq (sample i) (* i .1111)) (snd-display ";1 env-sound[~D]: ~A?" i (sample i))))
	  (undo) 
	  (env-sound (make-env '(0 0 1 1) :end 9) 0 10 1.0 ind0) 
	  (do ((i 0 (1+ i))) ((= i 10)) (if (fneq (sample i) (* i .1111)) (snd-display ";2 env-sound[~D]: ~A?" i (sample i))))
	  (undo) 
	  (env-sound '(0 0 .5 1 1 1) 0 10 0.0 ind0) 
	  (if (or (fneq (sample 3) 0.0) (fneq (sample 8) 1.0) )
	      (snd-display ";env-sound stepped: ~A ~A?" (sample 3) (sample 8)))
	  (undo) 
	  (env-sound '(0 0 1 1) 0 10 32.0 ind0) 
	  (if (or (fneq (sample 3) 0.070) (fneq (sample 8) 0.67) )
	      (snd-display ";env-sound exp: ~A ~A?" (sample 3) (sample 8)))
	  (undo) 
	  (env-sound (make-env '(0 0 1 1) :base 32.0 :end 9) 0 10 32.0 ind0) 
	  (if (or (fneq (sample 3) 0.070) (fneq (sample 8) 0.67) )
	      (snd-display ";env-sound exp: ~A ~A?" (sample 3) (sample 8)))
	  (undo)
	  (env-sound '(0 2))
	  (do ((i 0 (1+ i))) ((= i 10)) (if (fneq (sample i) 2.0) (snd-display ";3 env-sound[~D]: ~A?" i (sample i))))
	  (undo)
	  (env-sound '(0 2) 2 4 1.0 ind0)
	  (if (or (fneq (sample 1) 1.0) (fneq (sample 2) 2.0) (fneq (sample 5) 2.0) (fneq (sample 8) 1.0))
	      (snd-display ";3 env-sound exp: ~A ~A ~A ~A?" (sample 1) (sample 2) (sample 5) (sample 8)))
	  (undo) 
	  (do ((i 1 (1+ i))) ((= i 10)) (set! (sample i) 0.0))
	  (filter-sound '(0 1 1 0) 4)
	  (if (or (fneq (sample 1) 0.3678) (fneq (sample 2) .3678) (fneq (sample 3) .132) (fneq (sample 4) 0.0))
	      (snd-display ";filter-sound env: ~A?" (samples 0 8)))
	  (undo)
	  (filter-sound '(0 1 1 0) 1024)
	  (undo)
	  (filter-sound (make-fir-filter 6 (list->vct '(.1 .2 .3 .3 .2 .1))))
	  (undo)
	  (filter-sound (make-delay 120))
	  (undo)
	  (filter-sound (make-formant .99 1200))
	  (undo)
	  (let ((vc0 (make-vct 4)))
	    (vct-set! vc0 0 .125) (vct-set! vc0 1 .25) (vct-set! vc0 2 .25) (vct-set! vc0 3 .125) 
	    (filter-sound vc0 4) 
	    (if (or (fneq (sample 0) 0.125) (fneq (sample 1) .25) (fneq (sample 2) .25) (fneq (sample 5) 0.0))
		(snd-display ";filter-sound direct: ~A?" (samples 0 8)))
	    (revert-sound)))
	(close-sound ind0)

	(set! ind0 (new-sound "fmv.snd" mus-aifc mus-bshort 22050 2 "this is a comment"))
	(let ((v0 (make-vector 10))
	      (ind1 (new-sound "fmv1.snd" mus-aifc mus-bshort 22050 1 "this is a comment")))
	  (set! (sync ind0) 123)
	  (set! (sync ind1) 123)
	  (do ((i 0 (1+ i))) ((= i 10)) (vector-set! v0 i 1.0))
	  (insert-samples 0 10 v0 ind0 0)
	  (insert-samples 0 10 v0 ind0 1)
	  (insert-samples 0 10 v0 ind1 0)
	  (env-sound '(0 0 1 1) 0 10 1.0 ind0)
	  (do ((i 0 (1+ i))) 
	      ((= i 10)) 
	    (if (fneq (sample i ind0 0) (* i .1111)) (snd-display ";ind0:0 1 env-sound[~D]: ~A?" i (sample i ind0 0)))
	    (if (fneq (sample i ind0 1) (* i .1111)) (snd-display ";ind0:1 1 env-sound[~D]: ~A?" i (sample i ind0 1)))
	    (if (fneq (sample i ind1 0) (* i .1111)) (snd-display ";ind1:0 1 env-sound[~D]: ~A?" i (sample i ind1 0))))
	  (undo) 
	  (env-sound (make-env '(0 0 1 1) :end 9) 0 10 1.0 ind0) 
	  (do ((i 0 (1+ i))) 
	      ((= i 10)) 
	    (if (fneq (sample i ind0 0) (* i .1111)) (snd-display ";ind0:0 2 env-sound[~D]: ~A?" i (sample i ind0 0)))
	    (if (fneq (sample i ind0 1) (* i .1111)) (snd-display ";ind0:1 2 env-sound[~D]: ~A?" i (sample i ind0 1)))
	    (if (fneq (sample i ind1 0) (* i .1111)) (snd-display ";ind1:0 2 env-sound[~D]: ~A?" i (sample i ind1 0))))
	  (undo) 
	  (env-sound '(0 0 .5 1 1 1) 0 10 0.0 ind0) 
	  (if (or (fneq (sample 3 ind0 0) 0.0) (fneq (sample 8 ind0 0) 1.0) ) 
	      (snd-display ";ind0:0 env-sound stepped: ~A ~A?" (sample 3 ind0 0) (sample 8 ind0 0)))
	  (if (or (fneq (sample 3 ind0 1) 0.0) (fneq (sample 8 ind0 1) 1.0) ) 
	      (snd-display ";ind0:1 env-sound stepped: ~A ~A?" (sample 3 ind0 1) (sample 8 ind0 1)))
	  (if (or (fneq (sample 3 ind1 0) 0.0) (fneq (sample 8 ind1 0) 1.0) ) 
	      (snd-display ";ind1:0 env-sound stepped: ~A ~A?" (sample 3 ind1 0) (sample 8 ind1 0)))
	  (undo)
	  (revert-sound ind0)
	  (revert-sound ind1)
	  (insert-samples 0 10 v0 ind0 0)
	  (insert-samples 0 10 v0 ind0 1)
	  (insert-samples 0 10 v0 ind1 0)
	  (filter-sound (make-one-zero :a0 0.5 :a1 0.0) 0 ind0)
	  (do ((i 0 (1+ i))) 
	      ((= i 10)) 
	    (if (fneq (sample i ind0 0) 0.5) (snd-display ";ind0:0 1 filter-sound[~D]: ~A?" i (sample i ind0 0)))
	    (if (fneq (sample i ind0 1) 0.5) (snd-display ";ind0:1 1 filter-sound[~D]: ~A?" i (sample i ind0 1)))
	    (if (fneq (sample i ind1 0) 0.5) (snd-display ";ind1:0 1 filter-sound[~D]: ~A?" i (sample i ind1 0))))

	  (close-sound ind1))
	(close-sound ind0)

	(set! ind0 (new-sound "fmv.snd" mus-aifc mus-bshort 22050 1 "this is a comment"))
	(let ((v0 (make-vct 10))
	      (old5 (sample 5 ind0)))
	  (vct-fill! v0 0.1)
	  (insert-samples 10 10 v0 ind0)
	  (env-sound '(0 0 1 2) 10 10 1.0 ind0)
	  (do ((i 0 (1+ i))) ((= i 10)) 
	    (if (fneq (sample (+ i 10) ind0) (* i .0222)) (snd-display ";env-sound [~D]: ~A?" (+ i 10) (sample (+ i 10) ind0))))
	  (if (fneq (sample 5 ind0) old5) (snd-display ";env-sound 5: ~A ~A?" old5 (sample 5 ind0)))
	  (undo)
	  (env-sound '(0 0 1 2) 10 10 4.0 ind0)
	  (set! v0 (samples->vct 10 10))
	  (if (or (fneq (vct-ref v0 3) 0.039) (fneq (vct-ref v0 8) .162)) (snd-display ";env-sound 4: ~A" v0))
	  (undo)
	  (env-sound '(0 0 1 2) 10 10 .05 ind0)
	  (set! v0 (samples->vct 10 10))
	  (if (or (fneq (vct-ref v0 3) 0.133) (fneq (vct-ref v0 8) .196)) (snd-display ";env-sound 05: ~A" v0)))
	
	(close-sound ind0)
	(set! ind0 (new-sound "fmv.snd" mus-aifc mus-bshort 22050 2 "this is a comment"))
	(set! ind1 (new-sound "fmv1.snd" mus-next mus-bshort 22050 1 "this is a comment"))
	(let ((v0 (make-vector 10)))
	  (do ((i 0 (1+ i))) ((= i 10)) (vector-set! v0 i 1.0))
	  (insert-samples 0 10 v0 ind0 0) 
	  (do ((i 0 (1+ i))) ((= i 10)) (vector-set! v0 i 0.1))
	  (insert-samples 0 10 v0 ind0 1) 
	  (do ((i 0 (1+ i))) ((= i 10)) (vector-set! v0 i 0.01))
	  (insert-samples 0 10 v0 ind1 0) 
	  (let ((val (data-max1 0 9 ind0 0)))
	    (if (fneq val 1.0) (snd-display ";scan-chan[0,0]: ~A?" val)))
	  (let ((val (data-max1 0 9 ind0 1)))
	    (if (fneq val 0.1) (snd-display ";scan-chan[0,1]: ~A?" val)))
	  (let ((val (data-max1 0 9 ind1 0)))
	    (if (fneq val 0.01) (snd-display ";scan-chan[1,0]: ~A?" val)))
	  (let ((val (data-max1 0 9 #f #f)))
	    (if (fneq val 0.01) (snd-display ";scan-chans: ~A?" val)))
	  (let ((val (data-max 0 9)))
	    (if (fneq val 1.0) (snd-display ";scan-all-chans: ~A?" val)))
	  (let ((val (data-max2 0 9 ind0)))
	    (if (fneq val 1.0) (snd-display ";scan-across-sound-chans: ~A?" val))))
	(close-sound ind0)
	(close-sound ind1)

	(set! ind0 (new-sound "fmv.snd" mus-aifc mus-bshort 22050 2 "this is a comment"))
	(mix "oboe.snd")
	(let ((m1 (add-mark 100)))
	  (delete-sample 10)
	  (let ((m2 (add-mark 200)))
	    (delete-sample 10)
	    (let ((m3 (add-mark 300)))
	      (undo)
	      (save-sound)
	      (if (not (= (length (marks ind0 0)) 2))
		  (snd-display ";marks after save: ~A" (marks ind0 0)))
	      (if (or (not (mark? m1))
		      (not (= (mark-sample m1) 99)))
		  (snd-display ";save-sound mark1: ~A" (mark-sample m1)))
	      (if (or (not (mark? m2))
		      (not (= (mark-sample m2) 200)))
		  (snd-display ";save-sound mark2: ~A" (mark-sample m2)))
	      (if (mark? m3) (snd-display ";save-sound mark3: ~A" m3)))))
	(close-sound ind0)

	(let ((fd (open-sound "oboe.snd"))
	      (m1 (add-mark 123))
	      (sync-val (+ 1 (mark-sync-max))))
	  (if (not (mark? m1)) (snd-display ";mark?"))
	  (if (not (= (mark-sample m1) 123)) (snd-display ";add-mark: ~A? " (mark-sample m1)))
	  (set! (mark-property :hiho m1) 123)
	  (if (not (= (mark-property :hiho m1) 123)) (snd-display ";mark-property: ~A" (mark-property m1)))
	  (if (mark-property :not-there m1) (snd-display ";mark-not-property: ~A" (mark-property :not-there m1)))
	  (if (not (eq? (without-errors (mark-sample 12345678)) 'no-such-mark)) (snd-display ";mark-sample err: ~A?" (mark-sample 12345678)))
	  (if (not (eq? (without-errors (add-mark 123 123)) 'no-such-sound)) (snd-display ";add-mark err: ~A?" (add-mark 123 123)))
	  (let ((m2 (without-errors (add-mark 12345 fd 0))))
	    (if (eq? m2 'no-such-mark) (snd-display ";add-mark failed?"))
	    (if (not (= (mark-sample m2) 12345)) (snd-display ";add-mark 0 0: ~A?" (mark-sample m2)))
	    (if (not (= (mark-sync m2) 0)) (snd-display ";init mark-sync: ~A?" (mark-sync m2)))
	    (set! (mark-sync m2) sync-val)
	    (if (not (= (mark-sync m2) sync-val)) (snd-display ";set-mark-sync (~A): ~A?" sync-val (mark-sync m2)))
	    (let* ((syncs (syncd-marks sync-val))
		   (chans (marks fd 0))
		   (samps (map mark-sample chans)))
	      (if (not (equal? syncs (list m2))) (snd-display ";syncd-marks: ~A?" syncs))
	      (if (not (equal? chans (list m1 m2))) (snd-display ";marks: ~A?" chans))
	      (if (not (equal? samps (list (mark-sample m1) (mark-sample m2)))) (snd-display ";map samps: ~A?" samps))
	      (delete-samples 200 100 fd 0)
	      (set! chans (marks fd))
	      (set! samps (map mark-sample (car chans)))
	      (if (not (equal? samps (list (mark-sample m1 0) (- (mark-sample m2 0) 100)))) (snd-display ";map samps: ~A?" samps))
	      (let ((descr (describe-mark m2)))
		(if (not (equal? descr (list (list 'mark m2 'sound fd "oboe.snd" 'channel 0) 12345 12245)))
		    (snd-display ";describe-mark: ~A?" descr)))
	      (set! (mark-sync m1) (mark-sync m2))
	      (move-syncd-marks sync-val 100)
	      (set! chans (marks fd))
	      (set! samps (map mark-sample (car chans)))
	      (if (not (equal? samps (list (+ (mark-sample m1 0) 100) (mark-sample m2 0)))) (snd-display ";syncd move samps: ~A?" samps))
	      (set! (cursor) 500)
	      (backward-mark)
	      (if (not (= (cursor) (mark-sample m1))) (snd-display ";backward-mark: ~A?" (cursor)))
	      (forward-mark 1)
	      (if (not (= (cursor) (mark-sample m2))) (snd-display ";forward-mark: ~A?" (cursor)))
	      (set! (mark-sync m1) #t)
	      (if (not (= (mark-sync m1) 1)) (snd-display ";mark-sync via bool: ~A" (mark-sync m1)))
	      (delete-mark m1)
	      (set! chans (marks fd 0))
	      (if (not (equal? chans (list m2))) (snd-display ";delete-mark? ~A" chans))
	      (undo)
	      (set! chans (marks fd 0))
	      (if (not (equal? chans (list m1 m2))) (snd-display ";delete-mark then undo? ~A" chans))
	      (redo)
	      (if (not (string=? (mark-name m2) "")) (snd-display ";init mark-name: ~A?" (mark-name m2)))
	      (set! (mark-name m2) "hiho!")
	      (if (not (string=? (mark-name m2) "hiho!")) (snd-display ";set-mark-name: ~A?" (mark-name m2)))
	      (undo)
	      (if (not (string=? (mark-name m2) "")) (snd-display ";undo mark-name: ~A?" (mark-name m2)))
	      (redo)
	      (if (not (string=? (mark-name m2) "hiho!")) (snd-display ";redo mark-name: ~A?" (mark-name m2)))
	      (let ((m3 (find-mark "hiho!"))
		    (m4 (find-mark (mark-sample m2)))
		    (m5 (find-mark "not-a-mark"))
		    (m6 (find-mark 123456787))
		    (m7 (mark-name->id "hiho!")))
		(if (not (eq? m2 m3 m4 m7)) (snd-display ";find-mark: ~A ~A ~A ~A?" m2 m3 m4 m7))
		(if (not (eq? m5 m6 #f)) (snd-display ";find-not-a-mark: ~A ~A?" m5 m6))
		(set! (mark-sample m2) 2000)
		(set! m1 (add-mark 1000))
		(set! m3 (add-mark 3000))
		(set! m4 (add-mark 4000))
		(insert-samples 2500 500 (make-vct 500) fd 0)
		(set! samps (map mark-sample (marks fd 0)))
		(if (not (equal? samps '(1000 2000 3500 4500))) (snd-display ";insert ripple: ~A?" samps))
		(set! (mark-sample m3) 300)
		(set! (cursor) 500)
		(backward-mark)
		(if (not (= (cursor) 300)) (snd-display ";sort marks: ~A?" (cursor)))
		(if (not (equal? (mark-home m2) (list fd 0))) (snd-display ";mark-home: ~A?" (mark-home m2)))
		(let ((sd (open-sound "4.aiff")))
		  (set! m3 (add-mark 1000 sd 2))
		  (set! m4 (add-mark 1000 sd 3))
		  (if (not (equal? (mark-home m3) (list sd 2))) (snd-display ";marks->sound 4: ~A?" (mark-home m3)))
		  (close-sound sd))
		(let ((file (save-marks fd)))
		  (if (or (not file)
			  (not (string=? file (string-append home-dir "/cl/oboe.marks"))))
		      (snd-display ";save-marks -> ~A?" file)))
		(close-sound fd)
		(let ((fd (open-sound "pistol.snd")))
		  (let ((file (save-marks)))
		    (if file
			(snd-display ";save-marks no marks -> ~A?" file)))
		  (close-sound fd))
		(let ((fd (open-sound "oboe.snd")))
		  (load "oboe.marks")
		  (let ((mlst (marks fd 0)))
		    (if (not (= (length mlst) 2)) (snd-display ";restore-marks: ~A?" mlst))
		    (if (or (not (= (mark-sample (car mlst)) 123))
			    (not (= (mark-sample (cadr mlst)) 12345)))
			(snd-display ";restored-marks: ~D ~D?" (mark-sample (car mlst)) (mark-sample (cadr mlst)))))
		  (close-sound fd))
		(let ((fd (open-sound "oboe.snd")))
		  (let ((m1 (add-mark 1000)))
		    (let ((m2 (add-mark 2500)))
		      (let ((m3 (add-mark (- (frames) 4000))))
			(let ((ms (marks fd 0)))
			  (src-sound -.5)
			  (if (not (equal? (marks fd 0) (reverse (marks fd 0 0))))
			      (snd-display ";src rev marks: ~A ~A" (marks fd 0) (reverse (marks fd 0 0))))
			  (let ((ms1 (map mark-sample (marks fd 0))))
			    (if (not (equal? ms1 (list 7998 96654 99654))) ; off-by-1 somewhere...
				(snd-display ";src rev mark locs: ~A" ms1)))))))
		  (close-sound fd))
		(let ((fd (open-sound "4.aiff")))
		  (let ((m1 (add-mark 1000 fd 0))
			(m2 (add-mark 2000 fd 1))
			(m3 (add-mark 3000 fd 2))
			(m4 (add-mark 4000 fd 3)))
		    (if (= (length (marks)) 0) (snd-display ";marks (no args): ~A" (marks)))
		    (save-marks fd)
		    (close-sound fd)
		    (set! fd (open-sound "4.aiff"))
		    (load "4.marks")
		    (delete-file "4.marks")
		    (do ((i 0 (1+ i)))
			((= i 4))
		      (let ((mlst (marks fd i)))
			(if (not (= (length mlst) 1))
			    (snd-display ";save-marks[~A]: ~A?" i mlst))
			(if (not (= (mark-sample (car mlst)) (* (+ i 1) 1000)))
			    (snd-display ";save-marks[~A] at ~A?" i (mark-sample (car mlst))))))
		    (close-sound fd)))
		
		))))

	(let* ((ind (open-sound "pistol.snd"))
	       (samp1 1834)
	       (samp2 8345)
	       (m1 (add-mark samp1 ind 0))
	       (m2 (add-mark samp2)))
	  (src-sound -1)
	  (if (not (= (mark-sample m1) 39788))
	      (snd-display ";src -1 m1 -> ~A" (mark-sample m1)))
	  (if (not (= (mark-sample m2) 33277))
	      (snd-display ";src -1 m2 -> ~A" (mark-sample m2)))
	  (undo)
	  (src-sound .5)
	  (if (not (= (mark-sample m1) (* 2 samp1)))
	      (snd-display ";src .5 m1 -> ~A" (mark-sample m1)))
	  (if (not (= (mark-sample m2) (* 2 samp2)))
	      (snd-display ";src .5 m2 -> ~A" (mark-sample m2)))
	  (undo)
	  (delete-samples 1000 100)
	  (if (not (= (mark-sample m1) (- samp1 100)))
	      (snd-display ";delete 100 m1 -> ~A" (mark-sample m1)))
	  (insert-silence 1000 100)
	  (if (not (= (mark-sample m1) samp1))
	      (snd-display ";insert 100 m1 -> ~A" (mark-sample m1)))
	  (revert-sound ind)
	  (delete-samples 2000 100)
	  (if (not (= (mark-sample m1) samp1))
	      (snd-display ";delete(2) 100 m1 -> ~A" (mark-sample m1)))
	  (if (not (= (mark-sample m2) (- samp2 100)))
	      (snd-display ";delete(2) 100 m2 -> ~A" (mark-sample m2)))
	  (insert-silence 2000 100)
	  (if (not (= (mark-sample m1) samp1))
	      (snd-display ";insert(2) 100 m1 -> ~A" (mark-sample m1)))
	  (if (not (= (mark-sample m2) samp2))
	      (snd-display ";insert(2) 100 m2 -> ~A" (mark-sample m2)))
	  (revert-sound ind)
	  (delete-samples 10000 100)
	  (if (not (= (mark-sample m1) samp1))
	      (snd-display ";delete(3) 100 m1 -> ~A" (mark-sample m1)))
	  (if (not (= (mark-sample m2) samp2))
	      (snd-display ";delete(3) 100 m2 -> ~A" (mark-sample m2)))
	  (insert-silence 10000 100)
	  (if (not (= (mark-sample m1) samp1))
	      (snd-display ";insert(3) 100 m1 -> ~A" (mark-sample m1)))
	  (if (not (= (mark-sample m2) samp2))
	      (snd-display ";insert(3) 100 m2 -> ~A" (mark-sample m2)))
	  (src-sound '(0 .5 1 .5 2 1))
	  (if (not (= (mark-sample m1) (* 2 samp1)))
	      (snd-display ";src env .5 m1 -> ~A" (mark-sample m1)))
	  (if (not (= (mark-sample m2) (* 2 samp2)))
	      (snd-display ";src env .5 m2 -> ~A" (mark-sample m2)))
	  (undo)
	  (reverse-sound)
	  (if (not (= (mark-sample m1) 39788))
	      (snd-display ";reverse-sound m1 -> ~A" (mark-sample m1)))
	  (if (not (= (mark-sample m2) 33277))
	      (snd-display ";reverse-sound m2 -> ~A" (mark-sample m2)))
	  (undo)
	  (src-sound '(0 -.5 1 -.5 2 -1))
	  (if (not (= (mark-sample m1) 68598))
	      (snd-display ";src -env m1 -> ~A" (mark-sample m1)))
	  (if (not (= (mark-sample m2) 61160))
	      (snd-display ";src -env m2 -> ~A" (mark-sample m2)))
	  (revert-sound ind)
	  (src-channel (make-env '(0 .5 1 1) :end 8000) 2000 10000)
	  (if (not (= (mark-sample m1) samp1))
	      (snd-display ";src-channel(1) m1 -> ~A" (mark-sample m1)))
	  (if (not (= (mark-sample m2) 11345))
	      (snd-display ";src-channel(1) m2 -> ~A" (mark-sample m2)))
	  (undo)
	  (src-channel (make-env '(0 .5 1 1) :end 8000) 0 8000)
	  (if (not (= (mark-sample m1) 3303))
	      (snd-display ";src-channel(2) m1 -> ~A" (mark-sample m1)))
	  (if (not (= (mark-sample m2) samp2))
	      (snd-display ";src-channel(2) m2 -> ~A" (mark-sample m2)))
	  (undo)
	  (src-channel (make-env '(0 .5 1 1) :end 8000) 10000 8000)
	  (if (not (= (mark-sample m1) samp1))
	      (snd-display ";src-channel(3) m1 -> ~A" (mark-sample m1)))
	  (if (not (= (mark-sample m2) samp2))
	      (snd-display ";src-channel(3) m2 -> ~A" (mark-sample m2)))
	  (close-sound ind)
	  (set! ind (open-sound "2.snd"))
	  (set! (sync ind) #t)
	  (let ((m3 (add-mark 1000 ind 0))
		(m4 (add-mark 8000 ind 1)))
	    (swap-channels)
	    (if (or (not (equal? (mark-home m3) (list ind 1)))
		    (not (equal? (mark-home m4) (list ind 0))))
		(snd-display ";swapped mark homes: ~A ~A?" (mark-home m3) (mark-home m4)))
	    (if (or (not (= (mark-sample m3) 1000))
		    (not (= (mark-sample m4) 8000)))
		(snd-display ";swapped mark samples: ~A ~A?" (mark-sample m3) (mark-sample m4)))
	    (close-sound ind))
	  (set! ind (open-sound "2.snd"))
	  (set! (sync ind) #t)
	  (let ((m3 (add-mark 1000 ind 0)))
	    (delete-samples 1000 10 ind 1)
	    (swap-channels)
	    (if (not (equal? (mark-home m3) (list ind 1)))
		(snd-display ";edited swapped mark home: ~A?" (mark-home m3)))
	    (if (not (= (mark-sample m3) 1000))
		(snd-display ";edited swapped mark sample: ~A" (mark-sample m3)))
	    (delete-marks))
	  (close-sound ind))

	(let* ((ind (open-sound "oboe.snd"))
	       (m1 (add-mark 123 ind 0))
	       (m2 (add-mark 234 ind 0)))
	  (define-selection-via-marks m1 m2)
	  (if (not (selection?))
	      (snd-display ";define-selection-via-marks failed?")
	      (let ((mc (selection-members)))
		(if (not (equal? mc (list (list ind 0)))) (snd-display ";selection-members after mark definition: ~A (should be '((~A 0)))" mc ind))
		(if (not (= (selection-position) 123)) (snd-display ";selection-position 123: ~A" (selection-position)))
		(if (not (= (selection-frames) 112)) (snd-display ";selection-frames 112: ~A" (selection-frames)))))
	  (set! m1 (add-mark 1000 ind 0))
	  (set! m2 (add-mark 2000 ind 0))
	  (define-selection-via-marks m1 m2)
	  (if (not (selection?))
	      (snd-display ";define-selection-via-marks repeat failed?")
	      (let ((mc (selection-members)))
		(if (not (equal? mc (list (list ind 0)))) (snd-display ";selection-members after 2nd mark definition: ~A (should be '((~A 0)))" mc ind))
		(if (not (= (selection-position) 1000)) (snd-display ";selection-position 1000: ~A" (selection-position)))
		(if (not (= (selection-frames) 1001)) (snd-display ";selection-frames 1001: ~A" (selection-frames)))))
	  (set! (selection-member? #t) #f)
	  (if (selection?) (snd-display ";can't clear selection via selection-member?"))
	  (set! (selection-member? ind 0) #t)
	  (set! (selection-position ind 0) 2000)
	  (set! (selection-frames ind 0) 1234)
	  (snap-marks)
	  (set! m1 (find-mark 2000 ind 0))
	  (if (not (mark? m1)) (snd-display ";snap-marks start: ~A" (map mark-sample (marks ind 0))))
	  (set! m2 (find-mark (+ 2000 1234)))
	  (if (not (mark? m2)) (snd-display ";snap-marks end: ~A" (map mark-sample (marks ind 0))))
	  (set! (selection-position ind 0) (+ (frames ind 0) 1123))
	  (if (not (= (selection-position ind 0) (1- (frames ind ))))
	      (snd-display ";selection position past eof: ~A ~A" (selection-position ind 0) (1- (frames ind ))))
	  (revert-sound ind)
	  (src-sound '(0 .5 1 1.75665))
	  ;; trying to hit previous dur on the nose "by accident..."
	  (close-sound ind)
	  )

	(let ((ind (open-sound "oboe.snd"))
	      (mtests 100))
	  (do ((i 0 (1+ i)))
	      ((= i mtests))
	    (let* ((current-marks (marks ind 0))
		   (current-samples (map mark-sample current-marks)))

	      (if (not (null? current-marks))
		  (let ((id (list-ref current-marks (irandom (- (length current-marks) 1)))))
		    (if (not (= id (find-mark (mark-sample id)))) 
			(snd-display ";two marks at ~A? ~A" (mark-sample id) (map mark-sample current-marks)))
		    (if (find-mark "not-a-name") (snd-display ";find-bogus-mark: ~A" (find-mark "not-a-name")))))

	      (case (irandom 15)
		((0) (let* ((beg (irandom (frames)))
			    (dur (max 1 (irandom 100)))
			    (end (+ beg dur)))
		       (insert-silence beg dur)
		       (if (not (null? current-marks))
			   (for-each
			    (lambda (id old-loc)
			      (if (> old-loc beg)
				  (begin
				    (if (not (mark? id))
					(snd-display ";insert clobbered mark: ~A" id)
					(if (not (= (mark-sample id) (+ old-loc dur)))
					    (snd-display ";insert, mark ~D ~D -> ~D (~D)" id old-loc (mark-sample id) dur))))))
			    current-marks
			    current-samples))))
		((1) (if (> (car (edits ind 0)) 0) (undo)))
		((2) (if (> (cadr (edits ind 0)) 0) (redo)))
		((3) (if (> (maxamp ind 0) .1) (scale-channel .5) (scale-channel 2.0))
		     (if (not (equal? (marks ind 0) current-marks))
			 (snd-display ";scaling changed marks: ~A ~A" (marks ind 0) current-marks))
		     (if (not (equal? (map mark-sample (marks ind 0)) current-samples))
			 (snd-display ";scaling changed mark locations: ~A ~A" (map mark-sample (marks ind 0)) current-samples)))
		((4) (set! (sample (irandom (1- (frames)))) .5)
		     (if (not (equal? (marks ind 0) current-marks))
			 (snd-display ";set-sample changed marks: ~A ~A" (marks ind 0) current-marks))
		     (if (not (equal? (map mark-sample (marks ind 0)) current-samples))
			 (snd-display ";set-sample changed mark locations: ~A ~A" (map mark-sample (marks ind 0)) current-samples)))
		((5) (let* ((beg (irandom (frames)))
			    (dur (max 1 (irandom 100)))
			    (end (+ beg dur)))
		       (delete-samples beg dur)
		       (if (not (null? current-marks))
			   (for-each
			    (lambda (id old-loc)
			      (if (and (> old-loc beg)
				       (< old-loc end)
				       (mark? id))
				  (snd-display ";delete did not clobber mark: ~A ~A [~A ~A]" id old-loc beg end)
				  (if (and (> old-loc end)
					   (not (= (mark-sample id) (- old-loc dur))))
				      (snd-display ";delete ripple mark ~D ~D -> ~D (~D)" id old-loc (mark-sample id) dur)
				      (if (and (< old-loc beg)
					       (not (= (mark-sample id) old-loc)))
					  (snd-display ";delete but mark before: ~A ~A ~A ~A" id old-loc (mark-sample id) beg)))))
			    current-marks
			    current-samples))))
		((6) (revert-sound))
		((7) (if (and (not (null? current-marks))
			      (> (length current-marks) 1))
			 (let ((id (list-ref current-marks (irandom (- (length current-marks) 1)))))
			   (delete-mark id)
			   (if (mark? id)
			       (snd-display ";delete-mark failed? ~A" id))
			   (if (not (= (length (marks ind 0)) (1- (length current-marks))))
			       (snd-display ";delete-mark list trouble: ~A ~A ~A" id current-marks (marks ind 0))))))
		((8) (let ((rate (if (> (frames) 200000) 2.0 0.5)))
		       (src-channel rate)
		       (if (not (null? current-marks))
			   (for-each
			    (lambda (id old-loc)
			      (if (not (mark? id))
				  (snd-display ";src-channel clobbered mark: ~A" id)
				  (if (> (abs (- (/ old-loc rate) (mark-sample id))) 2)
				      (snd-display ";src moved mark: ~A ~A ~A (~A -> ~A)" 
						   id old-loc (mark-sample id) rate (- (/ old-loc rate) (mark-sample id))))))
			    current-marks
			    current-samples))))
		((9) (reverse-channel)
		     (if (not (null? current-marks))
			 (for-each
			  (lambda (id old-loc)
			    (if (not (mark? id))
				(snd-display ";reverse-channel clobbered mark: ~A" id)
				(if (> (abs (- (- (frames) old-loc) (mark-sample id))) 2)
				    (snd-display ";reverse moved mark: ~A ~A ~A (~A)" 
						 id old-loc (- (frames) old-loc) (mark-sample id)))))
			  current-marks
			  current-samples)))
		(else (add-mark (irandom (1- (frames))))))))
	  (close-sound ind))

	(if (and (provided? 'snd-motif) (provided? 'xm)) (mark-sync-color "blue"))
	(let ((ind (open-sound "oboe.snd")))
	  (let ((m0 (add-mark 4321)))
	    (delete-sample 100)
	    (let ((m1 (add-mark 1234)))
	      (let ((val0 (describe-mark m0))
		    (val1 (describe-mark m1)))
		(if (or (not (= (list-ref (car val0) 1) m0))
			(not (= (list-ref (car val0) 3) ind))
			(not (= (list-ref (car val0) 6) 0))
			(not (= (list-ref val0 1) 4321))
			(not (= (list-ref val0 2) 4320)))
		    (snd-display ";describe-mark m0: ~A" val0))
		(if (or (not (= (list-ref (car val1) 1) m1))
			(not (= (list-ref (car val1) 3) ind))
			(not (= (list-ref (car val1) 6) 0))
			(not (eq? (list-ref val1 1) #f))
			(not (= (list-ref val1 2) 1234)))
		    (snd-display ";describe-mark m1: ~A" val1))
		(delete-mark m0)
		(delete-sample 5000)
		(set! val0 (describe-mark m0))
		(set! val1 (describe-mark m1))
		(if (or (not (= (list-ref (car val0) 1) m0))
			(not (= (list-ref (car val0) 3) ind))
			(not (= (list-ref (car val0) 6) 0))
			(not (= (list-ref val0 1) 4321))
			(not (eq? (list-ref val0 2) #f))
			(not (eq? (list-ref val0 3) #f)))
		    (snd-display ";describe-mark m0 [1]: ~A" val0))
		(if (or (not (= (list-ref (car val1) 1) m1))
			(not (= (list-ref (car val1) 3) ind))
			(not (= (list-ref (car val1) 6) 0))
			(not (eq? (list-ref val1 1) #f))
			(not (= (list-ref val1 2) 1234))
			(not (= (list-ref val1 3) 1234)))
		    (snd-display ";describe-mark m1 [1]: ~A" val1)))))
	  (revert-sound ind)
	  (add-hook! draw-mark-hook (lambda (id) #t))
	  (let ((m0 (add-mark 4321))
		(m1 (add-mark 1234))
		(dur (/ (frames ind) (srate ind))))
	    (pad-marks (list m0 m1) .01)
	    (if (fneq (/ (frames ind) (srate ind)) (+ dur .02))
		(snd-display ";pad-marks: ~A ~A" dur (/ (frames ind) (srate ind))))
	    (if (not (= (mark-sample m0) 4763)) (snd-display ";pad-marks m0 pos: ~A" (mark-sample m0)))
	    (if (fneq (sample 1235) 0.0) (snd-display ";pad-marks 1235: ~A" (sample 1235))))
	  (close-sound ind))
	(reset-hook! draw-mark-hook)
	(let ((ind (open-sound "oboe.snd")))
	  (if (forward-mark) (snd-display ";forward-mark when no marks: ~A" (forward-mark)))
	  (if (backward-mark) (snd-display ";backward-mark when no marks: ~A" (backward-mark)))
	  (if (find-mark 12345) (snd-display ";find-mark when no marks: ~A" (find-mark 12345)))
	  (let ((m0 (add-mark 123 ind 0)))
	    (delete-sample 0)
	    (let ((m1 (add-mark 23 ind 0)))
	      (set! (mark-name m1) "23")
	      (delete-sample 0)
	      (let ((m00 (find-mark 123 ind 0 0))
		    (m01 (find-mark "23"))
		    (m02 (find-mark 121)))
		(if (not m00) (snd-display ";can't find 00th mark"))
		(if (not m01) (snd-display ";can't find 01th mark"))
		(if (not m02) (snd-display ";can't find 02th mark"))
		(delete-mark (find-mark "23"))
		(scale-by 2.0)
		(set! m1 (add-mark 1234))
		(set! (mark-name m1) "23")
		(let ((m10 (find-mark "23"))
		      (m11 (find-mark "23" ind 0 1))
		      (m12 (find-mark "23" ind 0 2)))
		  (if (not m10) (snd-display ";can't find 10th mark")
		      (if (not (= (mark-sample m10) 1234)) (snd-display ";mark 10th: ~A" (mark-sample m10))))
		  (if (not m11) (snd-display ";can't find 11th mark")
		      (if (not (= (mark-sample m11 1) 23)) (snd-display ";mark 11th: ~A" (mark-sample m11 1))))
		  (if (mark? m12) (snd-display ";found 12th mark: ~A ~A ~A" m12 (mark-sample m12 2) (mark-name m12 2)))))))
	  (close-sound ind))
	  
	  ))))


;;; ---------------- test 11: dialogs ----------------

(define (string-equal-ignoring-white-space s1 s2)
  (let ((len1 (string-length s2)))
    (define (white-space? str pos)
      (or (char=? (string-ref str pos) #\space)
	  (char=? (string-ref str pos) #\newline)))
    (call-with-current-continuation
     (lambda (return)
       (do ((i 0)
	    (j 0))
	   ((= i len1) (begin (while (and (< j len1) (white-space? s2 j)) (set! j (+ j 1))) (= j len1)))
	 (if (char=? (string-ref s1 i) (string-ref s2 j))
	     (begin
	       (set! i (+ i 1))
	       (set! j (+ j 1)))
	     (begin
	       (while (and (< i len1) (white-space? s1 i)) (set! i (+ i 1)))
	       (while (and (< j len1) (white-space? s2 j)) (set! j (+ j 1)))
	       (if (not (char=? (string-ref s1 i) (string-ref s2 j)))
		   (return #f)))))))))


(defvar env1 '(0 0 1 0))
(defvar env2 '(0 0 1 1))
(defvar ramp-up-env '(0 0 1 1))
(define-envelope "env4" '(0 1 1 0))

(if (and with-gui
	 (or full-test (= snd-test 11) (and keep-going (<= snd-test 11))))
    (begin
      (if (procedure? test-hook) (test-hook 11))
     (without-errors (peaks))
     (mus-audio-describe) 
     (let ((envd (enved-dialog) ))
       (let ((cold (color-dialog))
	     (ord (orientation-dialog))
	     (trd (transform-dialog))
	     (fild (file-dialog))
	     (regd (region-dialog))
	     (ehd (without-errors (edit-header-dialog))))
	 (open-file-dialog #f)
	 (mix-file-dialog #f)
	 (if (not (provided? 'snd-gtk))
	     (begin
	       ;(recorder-dialog) 
	       (set! (recorder-file) "hiho.snd")
	       (if (not (string=? (recorder-file) "hiho.snd")) (snd-display ";set-recorder-file: ~A?" (recorder-file)))
	       (set! (recorder-in-format) mus-mulaw)
	       (if (not (= (recorder-in-format) mus-mulaw)) (snd-display ";set-recorder-in-format: ~A?" (recorder-in-format)))
	       (set! (recorder-in-device) mus-audio-line-in)
	       (if (not (= (recorder-in-device) mus-audio-line-in)) (snd-display ";set-recorder-in-device: ~A?" (recorder-in-device)))
	       (set! (recorder-out-format) mus-mulaw)
	       (if (not (= (recorder-out-format) mus-mulaw)) (snd-display ";set-recorder-out-format: ~A?" (recorder-out-format)))
	       (set! (recorder-srate) 44100)
	       (if (not (= (recorder-srate) 44100)) (snd-display ";set-recorder-srate: ~A?" (recorder-srate)))
	       (set! (recorder-gain 0) 0.5)
	       (if (fneq (recorder-gain 0) 0.5) (snd-display ";set-recorder-gain: ~A?" (recorder-gain 0)))
	       (set! (recorder-out-amp 0) 0.5)
	       (if (> (abs (- (recorder-out-amp 0) 0.5)) .01) (snd-display ";set-recorder-out-amp: ~A?" (recorder-out-amp 0)))
	       (set! (recorder-in-amp 0 0) 0.5)
	       (if (> (abs (- (recorder-in-amp 0 0) 0.5)) .01) (snd-display ";set-recorder-in-amp: ~A?" (recorder-in-amp 0 0)))))
	 (let ((held (help-dialog "Test" "snd-test here")))
	   (if (not (= (length (menu-widgets)) 6)) (snd-display ";menu-widgets: ~A?" (menu-widgets)))
	   (if (not (equal? (widget-position (car (menu-widgets))) (list 0 0)))
	       (snd-display ";position main menubar: ~A?" (widget-position (car (menu-widgets)))))
	   (save-envelopes "hiho.env")
	   (load "hiho.env")
	   (if (not (equal? env4 (list 0.0 1.0 1.0 0.0))) (snd-display ";save-envelopes: ~A?" env4))
	   (delete-file "hiho.env")
	   (dismiss-all-dialogs)
	   )))

     (let ((ind (open-sound "oboe.snd")))
       (edit-header-dialog ind)
       (dismiss-all-dialogs)
       (close-sound ind))
     (let ((str1 (snd-help open-sound))
	   (str2 (snd-help 'open-sound))
	   (str3 (snd-help "open-sound")))
       (if (or (not (string? str1)) ; can happen if we're running -DTIMING
	       (not (string-equal-ignoring-white-space str2 str3)))
	   (snd-display ";snd-help open-sound: ~A ~A ~A" str1 str2 str3)))
     (if (not (string-equal-ignoring-white-space (snd-help enved-base) "(enved-base): envelope editor exponential base value (1.0)"))
	 (snd-display ";snd-help enved-base: ~A?" (snd-help enved-base)))
     (if (not (string-equal-ignoring-white-space (snd-help vu-font) "(vu-font): name of font used to make VU meter labels (courier)"))
	 (snd-display ";snd-help vu-font: ~A?" (snd-help vu-font)))
     (if (not (string-equal-ignoring-white-space (snd-help 'enved-base) "(enved-base): envelope editor exponential base value (1.0)"))
	 (snd-display ";snd-help 'enved-base: ~A?" (snd-help 'enved-base)))
     (if (not (string-equal-ignoring-white-space (snd-help 'vu-font) "(vu-font): name of font used to make VU meter labels (courier)"))
	 (snd-display ";snd-help 'vu-font: ~A?" (snd-help 'vu-font)))
     (if (not (string-equal-ignoring-white-space (snd-help "enved-base") "(enved-base): envelope editor exponential base value (1.0)"))
	 (snd-display ";snd-help \"enved-base\": ~A?" (snd-help "enved-base")))
     (if (not (string-equal-ignoring-white-space (snd-help "vu-font") "(vu-font): name of font used to make VU meter labels (courier)"))
	 (snd-display ";snd-help \"vu-font\": ~A?" (snd-help "vu-font")))
     (let ((str1 (snd-help 'hamming-window))
	   (str2 (snd-help "hamming-window")))
       (if (or (not (string-equal-ignoring-white-space str1 str2))
	       (not (string-equal-ignoring-white-space str1 "A raised cosine")))
	   (snd-display ";snd-help hamming-window: ~A ~A" str1 str2)))

     (set! (show-indices) #t)
     (let ((ind (open-sound "oboe.snd")))
       (if (< (length (sound-widgets ind)) 4)
	   (snd-display ";sound-widgets: ~A?" (sound-widgets ind)))
       (report-in-minibuffer "hi there" ind)
       (if with-gui
	   (let ((str (widget-text (list-ref (sound-widgets ind) 3))))
	     (if (not (string=? str "hi there"))
		 (snd-display ";report-in-minibuffer: ~A?" str))))
       (append-to-minibuffer "away!" ind)
       (if with-gui
	   (let ((str (widget-text (list-ref (sound-widgets ind) 3))))
	     (if (not (string=? str "hi thereaway!"))
		 (snd-display ";report-in-minibuffer 1: ~A?" str))
	     (if (widget-text (cadr (main-widgets))) 
		 (snd-display ";widget text should be #f: ~A" (widget-text (cadr (main-widgets)))))
	     (let ((str (format #f "~D: ~A" ind (short-file-name ind)))
		   (txt (widget-text (cadr (sound-widgets ind)))))
	       (if (or (not (string? txt))
		       (not (string=? str txt)))
		   (snd-display ";name text: ~A ~A" str txt)))))
       (close-sound ind))
     (if (file-exists? "link-oboe.snd")
	 (let* ((ind (open-sound "link-oboe.snd"))
		(linked-str (format #f "~D: (~A)" ind (short-file-name ind))))
	   (if with-gui
	       (if (not (string=? linked-str (widget-text (cadr (sound-widgets ind)))))
		   (snd-display ";linked name text: ~A ~A" linked-str (widget-text (cadr (sound-widgets ind))))))
	   (if (and (provided? 'xm) (provided? 'snd-debug))
	       (XtCallCallbacks (cadr (sound-widgets ind)) XmNactivateCallback (snd-sound-pointer ind)))
	   (close-sound ind)))
     (set! (show-indices) #f)
     (if (file-exists? "link-oboe.snd")
	 (let* ((ind (open-sound "link-oboe.snd"))
		(linked-str (format #f "(~A)" (short-file-name ind))))
	   (if with-gui
	       (if (not (string=? linked-str (widget-text (cadr (sound-widgets ind)))))
		   (snd-display ";linked name text (no index): ~A ~A" linked-str (widget-text (cadr (sound-widgets ind))))))
	   (close-sound ind)))

     (if (and (provided? 'xm)
	      (provided? 'snd-motif))
	 (begin
	   (snd-error "a test")
	   (let ((errwid (list-ref (dialog-widgets) 3)))
	     (if (not (Widget? errwid))
		 (snd-display ";snd-error no dialog?")
		 (let ((OK (find-child errwid "OK")))
		   (if (Widget? OK)
		       (XtCallCallbacks OK XmNactivateCallback #f)))))))

     ))

(define sf-dir-files
  (if (string? sf-dir) 
      (let ((good-files '()))
	(for-each ; omit bad headers (test cases) 
	 (lambda (file)
	   (catch 'mus-error
		  (lambda () 
		    (if (< (mus-sound-chans (string-append sf-dir file)) 256)
			(set! good-files (cons file good-files))))
		  (lambda args 
		    (car args))))
	 (sound-files-in-directory sf-dir))
	good-files)
      #f))

(define sf-dir-len (if sf-dir-files (length sf-dir-files) 0))
(define buffer-menu #f)

(define (remove-if p l)
  (cond ((null? l) '())
	((p (car l)) (remove-if p (cdr l)))
	(else (cons (car l) (remove-if p (cdr l))))))


;;; ---------------- test 12:  extensions etc ----------------

(define (spectral-difference snd1 snd2)
  (let* ((size (max (frames snd1) (frames snd2)))
	 (pow2 (ceiling (/ (log size) (log 2))))
	 (fftlen (inexact->exact (expt 2 pow2)))
	 (fdr1 (make-vct fftlen))
	 (fdr2 (make-vct fftlen)) )
    (samples->vct 0 fftlen snd1 0 fdr1)
    (samples->vct 0 fftlen snd2 0 fdr2)
    (let* ((spectr1 (snd-spectrum fdr1 blackman2-window fftlen #t))
	   (spectr2 (snd-spectrum fdr2 blackman2-window fftlen #t))
	   (diff 0.0)
	   (diffs (vct-subtract! spectr1 spectr2))
	   (len (vct-length diffs)))
      (do ((i 0 (1+ i)))
	  ((= i len) diff)
	(set! diff (+ diff (abs (vct-ref diffs i))))))))

(define (test-spectral-difference snd1 snd2 maxok)
  (let ((s1 (open-sound snd1))
	(s2 (open-sound snd2)))
    (let ((diff (spectral-difference s1 s2)))
      (close-sound s1)
      (close-sound s2)
      (if (> diff maxok)
	  (snd-display ";translate spectral difference ~A: ~A > ~A?" snd2 diff maxok)))))

(if (or full-test (= snd-test 12) (and keep-going (<= snd-test 12)))
    (if sf-dir-files
	(let ((open-files '())
	      (open-ctr 0))
	  (if (procedure? test-hook) (test-hook 12))
	  (add-sound-file-extension "wave")
	  (do ()
	      ((= open-ctr 32))
	    (let* ((len (length open-files))
		   (open-chance (* (- 8 len) .125))
		   (close-chance (* len .125)))
	      (if (or (= len 0) (> (random 1.0) .5))
		  (let* ((choice (inexact->exact (floor (my-random sf-dir-len))))
			 (name (string-append sf-dir (list-ref sf-dir-files choice)))
			 (ht (mus-sound-header-type name))
			 (df (mus-sound-data-format name))
			 (fd (if (or (= ht mus-raw) (= df -1)) 
				 -1 
				 (or (view-sound name) -1))))
		    (if (not (= fd -1))
			(begin
			  (set! open-ctr (+ open-ctr 1))
			  (set! open-files (cons fd open-files)))))
		  (if (and (> len 0) (> (random 1.0) 0.3))
		      (let* ((choice (inexact->exact (floor (my-random (exact->inexact (length open-files))))))
			     (fd (list-ref open-files choice)))
			(close-sound fd)
			(set! open-files (remove-if (lambda (a) (= a fd)) open-files)))))))
	  (if open-files (map close-sound open-files))
	  (if (not (= (length (sounds)) 0)) (snd-display ";active-sounds: ~A?" (sounds)))
	  (let* ((name (string-append sf-dir (list-ref sf-dir-files 0)))
		 (index (view-sound name)))
	    (if (not (string=? name (file-name index))) (snd-display ";file-name: ~A?" (file-name index)))
	    (close-sound index))
	  (let ((fd (open-raw-sound (string-append sf-dir "addf8.nh") 1 8012 mus-mulaw)))
	    (if (not (= (data-format fd) mus-mulaw)) (snd-display ";open-raw-sound: ~A?" (mus-data-format-name (data-format fd))))
	    (close-sound fd))

	  (time (test-spectral-difference "oboe.snd" (string-append sf-dir "oboe.g723_24") 20.0))
	  (test-spectral-difference "oboe.snd" (string-append sf-dir "oboe.g723_40") 3.0)
	  (test-spectral-difference "oboe.snd" (string-append sf-dir "oboe.g721") 6.0)
	  (test-spectral-difference (string-append sf-dir "o2.wave") (string-append sf-dir "o2_dvi.wave") 10.0)
	  (test-spectral-difference (string-append sf-dir "wood.riff") (string-append sf-dir "wood.sds") 4.0)
	  (test-spectral-difference (string-append sf-dir "nist-10.wav") (string-append sf-dir "nist-shortpack.wav") 1.0)

	  ;;; dangling readers (overall)
	  (let ((ind (open-sound "oboe.snd")))
	    (let ((hi (make-sample-reader 0 ind 0)))
	      (close-sound ind)
	      (if (not (sample-reader? hi)) (snd-display ";dangling reader? ~A" hi))
	      (let ((name (format #f "~A" hi)))
		(if (not (string? name)) (snd-display ";dangling reader format: ~A" name))
		(set! name (inspect-sample-reader hi))
		(if (not (string? name)) (snd-display ";dangling reader inspect: ~A" name)))
	      (let* ((val (hi))
		     (val1 (next-sample hi))
		     (val2 (previous-sample hi))
		     (val3 (read-sample hi)))
		(if (or (fneq val 0.0) (fneq val1 0.0) (fneq val2 0.0) (fneq val3 0.0))
		    (snd-display ";dangling read: ~A ~A ~A ~A" val val1 val2 val3))
		(if (sample-reader-home hi) (snd-display ";dangling reader home: ~A" (sample-reader-home hi)))
		(if (not (= (sample-reader-position hi) 0)) (snd-display ";dangling sample-reader-position: ~A" (sample-reader-position hi)))
		(if (not (sample-reader-at-end? hi)) (snd-display ";dangling reader eof: ~A" (sample-reader-at-end? hi)))
		(free-sample-reader hi))))
	  ;;; same (pruned edit)
	  (let ((ind (open-sound "oboe.snd")))
	    (delete-samples 100 100)
	    (let ((hi (make-sample-reader 0 ind 0)))
	      (revert-sound)
	      (delete-samples 100 100)
	      (if (not (sample-reader? hi)) (snd-display ";pruned dangling reader? ~A" hi))
	      (let ((name (format #f "~A" hi)))
		(if (not (string? name)) (snd-display ";pruned dangling reader format: ~A" name))
		(set! name (inspect-sample-reader hi))
		(if (not (string? name)) (snd-display ";pruned dangling reader inspect: ~A" name)))
	      (let* ((val (hi))
		     (val1 (next-sample hi))
		     (val2 (previous-sample hi))
		     (val3 (read-sample hi)))
		(if (or (fneq val 0.0) (fneq val1 0.0) (fneq val2 0.0) (fneq val3 0.0))
		    (snd-display ";pruned dangling read: ~A ~A ~A ~A" val val1 val2 val3))
		(if (not (equal? (sample-reader-home hi) (list ind 0))) (snd-display ";pruned dangling reader home: ~A" (sample-reader-home hi)))
		(if (not (sample-reader-at-end? hi)) (snd-display ";pruned dangling reader eof: ~A" (sample-reader-at-end? hi)))
		(free-sample-reader hi)))
	    (close-sound ind))
	  ;; region reader
	  (let* ((ind (open-sound "oboe.snd"))
		 (reg (make-region 1000 2000 ind 0))
		 (rd (make-region-sample-reader 0 reg)))
	    (let ((val (rd)))
	      (if (fneq val .0328) (snd-display ";region-sample-reader at start: ~A" val))
	      (if (not (string? (format #f "~A" rd))) (snd-display ";region-sample-reader: ~A" (format #f "~A" rd)))
	      (close-sound ind)
	      ;; reader is still ok presumably
	      (set! val (next-sample rd))
	      (if (fneq val .0348) (snd-display ";region-sample-reader at 1: ~A" val))
	      (forget-region reg)
	      (set! val (read-sample rd))
	      (if (fneq val 0.0) (snd-display ";region-sample-reader at end: ~A" val))
	      (if (not (sample-reader-at-end? rd)) (snd-display ";region-sample-reader after deletion?"))
	      (free-sample-reader rd)))
	  ;; mix reader
	  (let ((save-md 0))
	    (mix-click-sets-amp)
	    (let* ((ind (open-sound "oboe.snd"))
		   (reg (make-region 1000 2000 ind 0))
		   (md (mix-region 0 reg ind 0))
		   (rd (make-mix-sample-reader md)))
	      (set! (mix-property :hi md) "hi")
	      (set! save-md md)
	      (if (not (string=? (mix-property :hi md) "hi")) (snd-display ";mix(9)-property: ~A" (mix-property :hi md)))
	      (let ((val (rd)))
		(if (fneq val .0328) (snd-display ";mix-sample-reader at start: ~A" val))
		(if (not (string? (format #f "~A" rd))) (snd-display ";mix-sample-reader: ~A" (format #f "~A" rd)))
		(close-sound ind)
		(let ((tag (catch #t
				  (lambda () (mix-property :hi md))
				  (lambda args (car args)))))
		  (if (not (eq? tag 'no-such-mix)) (snd-display ";mix-property bad mix: ~A" tag)))
		(let ((str (format #f "~A" rd)))
		  (if (not (string=? str "#<mix-sample-reader: inactive>")) (snd-display ";mix-sample-reader released: ~A" str))
		  (set! val (read-mix-sample rd))
		  (if (fneq val 0.0) (snd-display ";mix-sample-reader at end: ~A" val))
		  (free-mix-sample-reader rd))))
	    ;; track reader
	    (let* ((ind (open-sound "oboe.snd"))
		   (reg (make-region 1000 2000 ind 0))
		   (md (mix-region 0 reg ind 0)))
	      (set! (mix-track md) 101)
	      (let ((rd (make-track-sample-reader 101)))
		(let ((val (rd)))
		  (if (fneq val .0328) (snd-display ";track-sample-reader at start: ~A" val))
		  (if (not (string? (format #f "~A" rd))) (snd-display ";track-sample-reader: ~A" (format #f "~A" rd)))
		  (close-sound ind)
		  (let ((tag (catch #t
				    (lambda () (mix-property :hi save-md))
				    (lambda args (car args)))))
		    (if (not (eq? tag 'no-such-mix)) (snd-display ";mix-property(2) bad mix: ~A" tag)))
		  (let ((str (format #f "~A" rd)))
		    (if (not (string? str)) (snd-display ";track-sample-reader released: ~A" str))
		    (set! val (read-track-sample rd))
		    (if (fneq val 0.0) (snd-display ";track-sample-reader at end: ~A" val))
		    (free-track-sample-reader rd)
		    (for-each
		     (lambda (n b)
		       (let ((tag (catch #t
					 (lambda ()
					   (n md))
					 (lambda args (car args)))))
			 (if (not (eq? tag 'no-such-mix))
			     (snd-display ";~A: ~A" b tag))))
		     (list mix-amp mix-anchor mix-chans mix-track mix-frames mix-locked mix-name
			   mix-position mix-home mix-speed mix-tag-y)
		     (list 'mix-amp 'mix-anchor 'mix-chans 'mix-track 'mix-frames 'mix-locked 'mix-name
			   'mix-position 'mix-home 'mix-speed 'mix-tag-y)))
		  ))))
	  (reset-hook! mix-click-hook)
	  (reset-hook! close-hook)
	  
	  (let* ((ind (open-sound "oboe.snd"))
		 (reg (make-region 1000 2000 ind 0))
		 (md1 (mix-region 0 reg ind 0))
		 (md2 (mix-region 1000 reg ind 0)))
	    (set! (mix-track md1) 102)
	    (set! (mix-track md2) 102)
	    (let ((rd (make-track-sample-reader 102)))
	      (let ((val (rd)))
		(if (fneq val .0328) (snd-display ";track-sample-reader(1) at start: ~A" val))
		(if (not (string? (format #f "~A" rd))) (snd-display ";track-sample-reader(1): ~A" (format #f "~A" rd)))
		(undo 1)
		(delete-sample 5000)
		(let ((str (format #f "~A" rd)))
		  (if (not (string? str)) (snd-display ";track-sample-reader (1) released: ~A" str))
		  (set! val (read-track-sample rd))
		  (if (fneq val 0.0348) (snd-display ";track-sample-reader (1) at end: ~A" val))
		  (close-sound ind)
		  (let ((str (format #f "~A" rd)))
		    (if (not (string? str)) (snd-display ";track-sample-reader (2) released: ~A" str))
		    (set! val (next-track-sample rd))
		    (if (fneq val 0.0) (snd-display ";track-sample-reader (2) at end: ~A" val))
		    (free-track-sample-reader rd))))))
	  )))

(define read-or-run
  (lambda (fil)
    (let ((val (peek-char fil)))
      (or (and val (read-char fil))
          (c-g?)
          (read-or-run fil)))))

(define execute-and-wait
  (lambda (cmd)
    (let ((fil (open-pipe cmd "r")))
      (do ((val (read-or-run fil) (read-or-run fil)))
          ((or (eq? val #t) (eof-object? val))
           (eq? val #t))
        (write-char val (current-output-port)))
      (close-pipe fil))))

(define loop-through-files
  (lambda (description make-cmd select)
    (let* ((data (if select 
		     (selection-to-temps mus-next mus-out-format) 
		     (sound-to-temps mus-next mus-out-format)))
           (input-names (temp-filenames data))
           (files (vector-length input-names))
           (output-names (make-vector files ""))
           (stopped #f))
      (do ((i 0 (1+ i)))
          ((or stopped (= i files)))
        (vector-set! output-names i (string-append (tmpnam) ".snd"))
        (set! stopped (execute-and-wait (make-cmd (vector-ref input-names i) (vector-ref output-names i)))))
      (if select 
	  (temps-to-selection data output-names description)
	  (temps-to-sound data output-names description)))))

(define copyfile-1
  (lambda (select)
    (loop-through-files
      "(cp)"
      (lambda (in out)
        (string-append "cp " in " " out))
      select)))

(define clm-fm-violin
  (lambda (dur frq amp)
    (let* ((beg (/ (cursor) (srate)))
           (fmv-call (string-append "(fm-violin "
                                    (number->string beg) " "
                                    (number->string dur) " "
                                    (number->string frq) " "
                                    (number->string amp) ")")))
      (loop-through-files
       fmv-call
       (lambda (in out)
       (string-append
        "lisp -I clm.dxl "
        "-e '(progn (restart-clm) "
        "      (with-sound (:play nil :output \"" out "\") "
        "        (mix \"" in "\") "
                 fmv-call
        "        ) (exit))'"))
       #f))))

  (defmacro carg0 (hook)
    `(let ((str (with-output-to-string (lambda () (display (hook->list ,hook))))))
       (if (not (string=? str "(#<procedure arg0 (() 32)>)"))
	   (snd-display ";~A: ~A?" ',hook str))))

  (defmacro carg1 (hook)
    `(let ((str (with-output-to-string (lambda () (display (hook->list ,hook))))))
       (if (not (string=? str "(#<procedure arg1 ((n) (+ n 32))>)"))
	   (snd-display ";~A: ~A?" ',hook str))))

  (defmacro carg2 (hook)
    `(let ((str (with-output-to-string (lambda () (display (hook->list ,hook))))))
       (if (not (string=? str "(#<procedure arg2 ((n m) (+ n m 32))>)"))
	   (snd-display ";~A: ~A?" ',hook str))))
  
  (defmacro carg3 (hook)
    `(let ((str (with-output-to-string (lambda () (display (hook->list ,hook))))))
       (if (not (string=? str "(#<procedure arg3 ((a b c) (+ a b c 32))>)"))
	   (snd-display ";~A: ~A?" ',hook str))))

  (defmacro carg4 (hook)
    `(let ((str (with-output-to-string (lambda () (display (hook->list ,hook))))))
       (if (not (string=? str "(#<procedure arg4 ((a b c d) (+ a b c d 32))>)"))
	   (snd-display ";~A: ~A?" ',hook str))))
  
  (defmacro carg5 (hook)
    `(let ((str (with-output-to-string (lambda () (display (hook->list ,hook))))))
       (if (not (string=? str "(#<procedure arg5 ((a b c d e) (list 0 0 1 1))>)"))
	   (snd-display ";~A: ~A?" ',hook str))))
  
  (defmacro carg6 (hook)
    `(let ((str (with-output-to-string (lambda () (display (hook->list ,hook))))))
       (if (not (string=? str "(#<procedure arg6 ((a b c d e f) (+ a b c d e f 32))>)"))
	   (snd-display ";~A: ~A?" ',hook str))))

(define (test-hooks)
  (define (arg0) 32)
  (define (arg1 n) (+ n 32))
  (define (arg2 n m) (+ n m 32))
  (define (arg3 a b c) (+ a b c 32))
  (define (arg4 a b c d) (+ a b c d 32))
  (define (arg5 a b c d e) (list 0 0 1 1))
  (define (arg6 a b c d e f) (+ a b c d e f 32))
  (reset-almost-all-hooks)

  (add-hook! after-graph-hook arg2) (carg2 after-graph-hook)
  (add-hook! lisp-graph-hook arg2) (carg2 lisp-graph-hook)
  (add-hook! before-transform-hook arg2) (carg2 before-transform-hook)
  (add-hook! mix-position-changed-hook arg2) (carg2 mix-position-changed-hook)
  (add-hook! stop-playing-channel-hook arg2) (carg2 stop-playing-channel-hook)
  (add-hook! save-hook arg2) (carg2 save-hook)
  (add-hook! mus-error-hook arg2) (carg2 mus-error-hook)
  (add-hook! mouse-enter-graph-hook arg2) (carg2 mouse-enter-graph-hook)
  (add-hook! mouse-leave-graph-hook arg2) (carg2 mouse-leave-graph-hook)
  (add-hook! open-raw-sound-hook arg2) (carg2 open-raw-sound-hook)
  (add-hook! select-channel-hook arg2) (carg2 select-channel-hook)
  (add-hook! help-hook arg2) (carg2 help-hook)

  (add-hook! save-state-hook arg1) (carg1 save-state-hook)
  (add-hook! new-sound-hook arg1) (carg1 new-sound-hook)
  (add-hook! after-open-hook arg1) (carg1 after-open-hook)
  (add-hook! update-hook arg1) (carg1 update-hook)
  (add-hook! close-hook arg1) (carg1 close-hook)
  (add-hook! draw-mark-hook arg1) (carg1 draw-mark-hook)
  (add-hook! drop-hook arg1) (carg1 drop-hook)
  (add-hook! just-sounds-hook arg1) (carg1 just-sounds-hook)
  (add-hook! mark-click-hook arg1) (carg1 mark-click-hook)
  (add-hook! listener-click-hook arg1) (carg1 listener-click-hook)
  (add-hook! mix-click-hook arg1) (carg1 mix-click-hook)
  (add-hook! after-save-state-hook arg1) (carg1 after-save-state-hook)
  (add-hook! mark-drag-hook arg1) (carg1 mark-drag-hook)
  (add-hook! mix-drag-hook arg1) (carg1 mix-drag-hook)
  (add-hook! mix-amp-changed-hook arg1) (carg1 mix-amp-changed-hook)
  (add-hook! mix-speed-changed-hook arg1) (carg1 mix-speed-changed-hook)
  (add-hook! name-click-hook arg1) (carg1 name-click-hook)
  (add-hook! before-apply-hook arg1) (carg1 before-apply-hook)
  (add-hook! after-apply-hook arg1) (carg1 after-apply-hook)
  (add-hook! open-hook arg1) (carg1 open-hook)
  (add-hook! output-comment-hook arg1) (carg1 output-comment-hook)
  (add-hook! multichannel-mix-hook arg1) (carg1 multichannel-mix-hook)
  (add-hook! play-hook arg1) (carg1 play-hook)
  (add-hook! dac-hook arg1) (carg1 dac-hook)
  (add-hook! new-widget-hook arg1) (carg1 new-widget-hook)
  (add-hook! snd-error-hook arg1) (carg1 snd-error-hook)
  (add-hook! snd-warning-hook arg1) (carg1 snd-warning-hook)
  (add-hook! start-hook arg1) (carg1 start-hook)
  (add-hook! start-playing-hook arg1) (carg1 start-playing-hook)
  (add-hook! stop-playing-hook arg1) (carg1 stop-playing-hook)
  (add-hook! stop-playing-region-hook arg1) (carg1 stop-playing-region-hook)
  (add-hook! mouse-enter-listener-hook arg1) (carg1 mouse-enter-listener-hook)
  (add-hook! mouse-leave-listener-hook arg1) (carg1 mouse-leave-listener-hook)
  (add-hook! window-property-changed-hook arg1) (carg1 window-property-changed-hook)
  (add-hook! select-sound-hook arg1) (carg1 select-sound-hook)
  (add-hook! select-mix-hook arg1) (carg1 select-mix-hook)
  (add-hook! print-hook arg1) (carg1 print-hook)
  (add-hook! read-hook arg1) (carg1 read-hook)
  (add-hook! bad-header-hook arg1) (carg1 bad-header-hook)
  (add-hook! previous-files-select-hook arg1) (carg1 previous-files-select-hook)

  (add-hook! exit-hook arg0) (carg0 exit-hook)
  (add-hook! stop-dac-hook arg0) (carg0 stop-dac-hook)
  (add-hook! output-name-hook arg0) (carg0 output-name-hook)
  (add-hook! stop-playing-selection-hook arg0) (carg0 stop-playing-selection-hook)
  (add-hook! color-hook arg0) (carg0 color-hook)
  (add-hook! orientation-hook arg0) (carg0 orientation-hook)

  (add-hook! during-open-hook arg3) (carg3 during-open-hook)
  (add-hook! transform-hook arg3) (carg3 transform-hook)
  (add-hook! mouse-enter-label-hook arg3) (carg3 mouse-enter-label-hook)
  (add-hook! mouse-leave-label-hook arg3) (carg3 mouse-leave-label-hook)
  (add-hook! initial-graph-hook arg3) (carg3 initial-graph-hook)

  (add-hook! graph-hook arg4) (carg4 graph-hook)
  (add-hook! key-press-hook arg4) (carg4 key-press-hook)
  (add-hook! mark-hook arg4) (carg4 mark-hook)

  (add-hook! mouse-drag-hook arg6) (carg6 mouse-drag-hook)
  (add-hook! mouse-press-hook arg6) (carg6 mouse-press-hook)
  (add-hook! mouse-release-hook arg6) (carg6 mouse-release-hook)

  (add-hook! enved-hook arg5) (carg5 enved-hook)
  (reset-almost-all-hooks)
  (for-each 
   (lambda (n) 
     (if (and (not (hook-empty? n))
	      (not (eq? n optimization-hook)))
	 (snd-display ";~A not empty?" n)))
   (snd-hooks))
  )
  
;;; ---------------- test 13: menus, edit lists, hooks, seach/key funcs ----------------

(define (test-menus)
  (for-each-child
   (car (menu-widgets))
   (lambda (w)
     (if (not (XmIsRowColumn w))
	 (let ((option-holder (cadr (XtGetValues w (list XmNsubMenuId 0)))))
	   (for-each-child
	    option-holder
	    (lambda (menu)
	      (if (and (XmIsPushButton menu)
		       (XtIsSensitive menu)
		       (not (member (XtName menu)
				    (list "Exit" "New" 
					  "Save   C-x C-s" 
					  "Close  C-x k" 
					  "Mix Panel" "clm" "fm-violin"))))
		  (XtCallCallbacks menu XmNactivateCallback (snd-global-state)))))))))
  (dismiss-all-dialogs))

(reset-almost-all-hooks)

(if (or full-test (= snd-test 13) (and keep-going (<= snd-test 13)))
    (let ((fd (view-sound "oboe.snd"))
	  (mb (add-to-main-menu "clm")))
      (if (procedure? test-hook) (test-hook 13))

      (let ((var (catch #t (lambda () (add-to-menu -1 "fm-violin" (lambda () #f))) (lambda args args))))
	(if (not (eq? (car var) 'no-such-menu))
	    (snd-display ";add-to-menu bad menu: ~A" var)))

      (set! (cursor fd) 2000)
      (set! (transform-graph-type) graph-once)
      (set! (transform-graph? fd) #t)
      (if with-gui
	  (begin
	    (add-to-menu mb "fm-violin" (lambda () (if (sound?) (clm-fm-violin .1 660 .1))))
	    (add-to-menu mb "not here" (lambda () (snd-display ";oops")))
	    (set! (menu-sensitive mb "not here") #f)
	    (if (menu-sensitive mb "not here") (snd-display ";menu-sensitive?"))
	    (remove-from-menu mb "not here")
	    (add-to-menu 3 "Denoise" (lambda () (report-in-minibuffer "denoise")))
	    (change-menu-label 3 "Denoise" "hiho")))
      (reset-hook! help-hook)
      (let ((hi (snd-help 'cursor-position)))
	(add-hook! help-hook (lambda (a b) 
			       (if (not (string=? a "cursor-position"))
				   (snd-display ";help-hook subject: ~A" a))
			       (if (not (string=? b "(cursor-position (snd #f) (chn #f)): current cursor position (x y in pixels) in snd's channel chn"))
				   (snd-display ";help-hook text: ~A" b))
			       (string-append "hiho:" b)))
	(let ((ho (snd-help 'cursor-position)))
	  (if (not (= (string-length ho) (+ 5 (string-length hi))))
	      (snd-display ";help-hook ~A -> ~A" hi ho))
	  (reset-hook! help-hook)
	  (add-hook! help-hook (lambda (a b) #f))
	  (set! ho (snd-help 'cursor-position))
	  (if (not (string=? hi ho))
	      (snd-display ";help-hook #f: ~A ~A" hi ho))
	  (reset-hook! help-hook)))
      (if include-clm
	  (begin
	    (clm-fm-violin .1 660 .1)
	    (play-and-wait)))
      (let ((fr (frames fd))
	    (chn (chans fd))
	    (sr (srate fd))
	    (mx (maxamp fd)))
	(copyfile-1 #f)
	(if (not (equal? (edit-fragment) '("(cp)" "set" 0 50828))) (snd-display ";copyfile-1: ~A?" (edit-fragment)))
	(if (or (not (= fr (frames fd)))
		(not (= chn (chans fd)))
		(fneq mx (maxamp fd))
		(fneq sr (srate fd)))
	    (snd-display ";copyfile(1): ~A ~A ~A ~A?" (frames fd) (chans fd) (srate fd) (maxamp fd)))
	(let ((eds (edits)))
	  (preload-file "oboe.snd")
	  (preload-directory ".")
	  (select-all)
	  (copyfile-1 #t)
	  (if (not (equal? (edit-fragment) '("(cp)" "set" 0 50828))) (snd-display ";copyfile-1 (select): ~A?" (edit-fragment)))
	  (if (not (equal? (edits) (list (+ (car eds) 1) (cadr eds)))) (snd-display ";copyfile-1 (select eds): ~A ~A?" eds (edits)))
	  (if (or (not (= fr (frames fd)))
		  (not (= chn (chans fd)))
		  (fneq mx (maxamp fd))
		  (fneq sr (srate fd)))
	      (snd-display ";copyfile(2): ~A ~A ~A ~A?" (frames fd) (chans fd) (srate fd) (maxamp fd)))))

      (set! (transform-size fd 0) 256)
      (for-each
       (lambda (dpy-type fft-type)
	 (set! (transform-graph-type fd 0) dpy-type)
	 (set! (transform-type fd 0) fft-type)
	 (update-transform-graph fd 0)
	 (transform-samples->vct fd 0))
       (list graph-once graph-as-sonogram graph-as-spectrogram
	     graph-once graph-as-sonogram graph-as-spectrogram)
       (list fourier-transform fourier-transform fourier-transform 
	     autocorrelation autocorrelation autocorrelation))
      (let ((tag (catch #t
			(lambda ()
			  (transform-sample 5000 0 fd 0))
			(lambda args (car args)))))
	(if (not (eq? tag 'no-such-sample))
	    (snd-display ";access invalid (bin) transform sample: ~A" tag)))
      (let ((tag (catch #t
			(lambda ()
			  (transform-sample 0 5000 fd 0))
			(lambda args (car args)))))
	(if (not (eq? tag 'no-such-sample))
	    (snd-display ";access invalid (slice) transform sample: ~A" tag)))
      (close-sound fd)
      (set! (transform-type) fourier-transform)

      (add-hook! after-open-hook
		 (lambda (snd)
		   (set! (x-axis-style snd #t) x-axis-in-samples)))
      (set! fd (open-sound "2.snd"))
      (close-sound fd)
      (reset-hook! after-open-hook)

      (add-hook! after-open-hook
		 (lambda (snd)
		   (set! (x-axis-style snd #t) x-axis-as-percentage)))
      (add-hook! initial-graph-hook
		 (lambda (snd chn dur)
		   (if (mus-sound-maxamp-exists? (file-name snd))
		       (let* ((amp-vals (mus-sound-maxamp (file-name snd)))
			      (max-val (list-ref amp-vals (+ (* chn 2) 1))))
			 (list 0.0 dur (- max-val) max-val))
		       (list 0.0 dur -1.0 1.0))))
      (reset-hook! after-open-hook)
      (reset-hook! initial-graph-hook)

      (add-hook! initial-graph-hook
		 (lambda (snd chn dur)
		   (list 0.0 dur -1.0 1.0 "a label" -4.0 4.0)))
      (set! fd (open-sound "2.snd"))
      (let ((ax (axis-info)))
	(if (and (list-p ax)
		 (or (fneq (list-ref ax 2) 0.0)
		     (fneq (list-ref ax 3) -1.0)
		     (fneq (list-ref ax 4) (mus-sound-duration "2.snd"))
		     (fneq (list-ref ax 5) 1.0)
		     (fneq (list-ref ax 6) 0.0)
		     (fneq (list-ref ax 7) -4.0)
		     (fneq (list-ref ax 8) (mus-sound-duration "2.snd"))
		     (fneq (list-ref ax 9) 4.0)))
	    (snd-display ";initial-graph-hook with ymin/max: ~A" ax))
	(reset-hook! initial-graph-hook))
      (set! (selection-position fd 1) 1000)
      (set! (selection-frames fd 1) 10)
      (set! (selection-member? fd 1) #t)
      (if (selection-member? fd 0) (snd-display ";chan 0 is selection-member?"))
      (do ((i 0 (1+ i))) ((= i 2))
	(set! (selection-position fd i) 1000)
	(set! (selection-frames fd i) 10)
	(set! (selection-member? fd i) #t))
      (scale-selection-to '#(.5 .25))
      (if (or (fneq (maxamp fd 0) .5)
	      (fneq (maxamp fd 1) .25))
	  (snd-display ";scale-selection-to with vector: ~A" (maxamp fd #t)))
      (close-sound fd)

      (set! fd (open-sound "obtest.snd"))
      (let ((names (short-file-name #t)))
	(if (provided? 'xm) (XSynchronize (XtDisplay (cadr (main-widgets))) #t))
	(change-window-property "SND_VERSION" "WM_NAME"
				(format #f "snd (~A)~A"
					(strftime "%d-%b %H:%M %Z" (localtime (current-time)))
					(if (null? names)
					    ""
					    (format #f ":~{~A~^, ~}" names)))))
      (let ((gotit #f)
	    (oldsize (vu-size)))
	(add-hook! window-property-changed-hook (lambda (hi) (set! gotit #t) #f))
	(change-window-property "SND_VERSION" "SND_COMMAND" "(set! (vu-size) .5)")
	(reset-hook! window-property-changed-hook)
	(change-window-property "SND_VERSION" "SND_COMMAND" "(make-vector 10 3.14)")
	(if (or (not gotit)
		(fneq (vu-size) 0.5))
	    (snd-display ";property vu-size: ~A" (vu-size)))
	(if (provided? 'xm) (XSynchronize (XtDisplay (cadr (main-widgets))) #f))
	(set! (vu-size) oldsize))

      (if (and (provided? 'snd-motif) (provided? 'xm)) (load "new-effects.scm"))

      (add-hook! menu-hook
		 (lambda (name option)
		   (if (and (string=? name "File")
			    (string=? option "Exit"))
		       (begin
			 (snd-display ";no exit!")
			 #f)
		       #t))) ; #t to make sure other menu items remain active
      (let ((ctr 0))
	(add-hook! menu-hook
		   (lambda (name option)
		     (if (and (string=? name "Options")
			      (string=? option "Save options"))
			 (begin
			   (set! ctr (+ ctr 1))
			   #f)
			 #t)))
	(add-hook! menu-hook
		   (lambda (name option)
		     (if (and (string=? name "View")
			      (string=? option "Files"))
			 (set! ctr (+ ctr 1)))
		     #t))
	(if (provided? 'xm)
	    (add-hook! menu-hook
		       (lambda (name option)
			 (if (and (string=? name "Effects")
				  (string=? option "Invert"))
			     (set! ctr (+ ctr 1)))
			 #t)))

	(let ((added 0))
	  (set! (with-background-processes) #t)
	  (set! (vu-size) 1.25)
	  (add-hook! new-widget-hook
		     (lambda (w)
		       (set! added (+ added 1))))
	  (if (provided? 'snd-motif)
	      (without-errors
	       (test-menus))) ; built-in self-test function

	  (set! (with-background-processes) #f)
	  (if (= added 0)
	      (snd-display ";no widgets added?"))
	  (reset-hook! new-widget-hook))

	(if (provided? 'snd-ladspa)
	    (if (file-exists? "/home/bil/test/cmt/plugins")
		(begin
		  (set! (ladspa-dir) "/home/bil/test/cmt/plugins")
		  (apply-ladspa (make-sample-reader 0) (list "cmt" "delay_5s" .3 .5) 1000 "delayed")
		  (let ((tag (catch #t 
				    (lambda () 
				      (apply-ladspa (make-sample-reader 0) (list "cmt" "delay_4s" .3 .5) 1000 "delayed"))
				    (lambda args args))))
		    (if (not (eq? (car tag) 'no-such-plugin))
			(snd-display ";apply-ladspa bad plugin: ~A" tag)))
		  (let ((tag (catch #t 
				    (lambda () 
				      (apply-ladspa (list (make-sample-reader 0) (make-sample-reader 0)) (list "cmt" "delay_5s" .3 .5) 1000 "delayed"))
				    (lambda args args))))
		    (if (not (eq? (car tag) 'plugin-error))
			(snd-display ";apply-ladspa reader mismatch: ~A" tag)))
		  (let ((vals (list-ladspa)))
		    (if (not (list-p vals))
			(snd-display ";ladspa list: ~A" vals))
		    (let ((descr (analyse-ladspa "cmt" "delay_5s")))
		      (if (or (not (list-p descr))
			      (not (string? (car descr)))
			      (not (string=? (car descr) "Echo Delay Line (Maximum Delay 5s)")))
			  (snd-display ";analyse-ladspa: ~A" descr))))
		  (let ((tag (catch #t 
				    (lambda () (analyse-ladspa "cmt" "delay_no_delay"))
				    (lambda args (car args)))))
		    (if (not (eq? tag 'no-such-plugin)) (snd-display ";analyse-ladspa tag: ~A" tag)))
		  (let ((tag (catch #t
				    (lambda ()
				      (apply-ladspa (list (make-sample-reader 0) (make-sample-reader 0)) (list #f) 1000 "delayed"))
				    (lambda args (car args)))))
		    (if (not (eq? tag 'wrong-type-arg)) (snd-display ";apply-ladspa tag: ~A" tag)))
		  (init-ladspa))
		(snd-display ";ladspa loaded but can't find plugin directory: ~A" (ladspa-dir))))

	(revert-sound fd)
	(close-sound fd)
	(if (not (= ctr 2)) (snd-display ";ctr after test-menus: ~A? " ctr))
	(reset-hook! menu-hook))

      (test-hooks)
      (add-hook! bad-header-hook (lambda (n) #t))
      (let ((ind (open-sound "oboe.snd")))
	(set! (cursor) 2000)
	(key (char->integer #\u) 4 ind)
	(key (char->integer #\1) 0 ind)
	(key (char->integer #\0) 0 ind)
	(key (char->integer #\0) 0 ind)
	(key (char->integer #\x) 4 ind)
	(key (char->integer #\z) 4 ind)
	(if (not (equal? (edit-fragment) (list "C-x C-z" "set" 2000 100)))
	    (snd-display ";C-x C-z fragment: ~A" (edit-fragment)))
	(if (not (vequal (samples->vct 2010 10) (vct 0.064 0.063 0.063 0.062 0.062 0.061 0.060 0.059 0.059 0.058)))
	    (snd-display ";C-x C-z samps: ~A" (samples->vct 2010 10)))
	(set! (cursor) 0)
	(select-all)
	(key (char->integer #\x) 4 ind)
	(key (char->integer #\o) 0 ind)
	(key (char->integer #\x) 4 ind)
	(key (char->integer #\p) 0 ind)
	(set! (selection-member? #t) #f)
	(revert-sound ind)
	(set! (search-procedure ind) (lambda (n4) (> n4 .1)))
	(key (char->integer #\a) 4 ind 0)
	(if (not (= (cursor ind 0) 0))
	    (snd-display ";C-a cursor: ~D?" (cursor ind 0)))
	(key (char->integer #\s) 4 ind 0)
	(key (char->integer #\s) 4 ind 0)
	(if (not (= (cursor ind 0) 4423))
	    (snd-display ";search-procedure C-s C-s cursor: ~D?" (cursor ind 0)))
	(if with-gui
	    (let ((str (widget-text (list-ref (sound-widgets ind) 3))))
	      (if (not (string=? str "y = .101 at .201 (4423)"))
		  (snd-display ";C-s 4423 report-in-minibuffer: ~A?" str))))
	(let ((str (with-output-to-string (lambda () (display (search-procedure ind))))))
	  (if (not (string=? str "#<procedure #f ((n4) (> n4 0.1))>"))
	      (snd-display ";search-procedure: ~A?" str)))

	(set! (search-procedure ind) (lambda (n) (> n .2)))
	(set! (cursor ind 0) 0)
	(key (char->integer #\s) 4 ind 0)
	(key (char->integer #\s) 4 ind 0)
	(if (not (= (cursor ind 0) 0))
	    (snd-display ";search-procedure C-s C-s cursor failed: ~D?" (cursor ind 0)))
	(if with-gui
	    (let ((str (widget-text (list-ref (sound-widgets ind) 3))))
	      (if (not (or (string=? str "not found") ; the lack of search expr is a bug
			   (string=? str "not found (wrapped)")))
		  (snd-display ";C-s failure report-in-minibuffer: ~A?" str))))
	(let ((str (with-output-to-string (lambda () (display (search-procedure ind))))))
	  (if (not (string=? str "#<procedure #f ((n) (> n 0.2))>"))
	      (snd-display ";search-procedure (1): ~A?" str)))

	(reset-hook! (edit-hook ind 0))
	(add-hook! (edit-hook ind 0) (lambda () (+ snd chn)))
	(let ((str (with-output-to-string (lambda () (display (hook->list (edit-hook ind 0)))))))
	  (if (not (string=? str "(#<procedure #f (() (+ snd chn))>)"))
	      (snd-display ";edit-hook: ~A?" str)))
	(reset-hook! (edit-hook ind 0))
	(reset-hook! (after-edit-hook ind 0))
	(add-hook! (after-edit-hook ind 0) (lambda () (+ snd chn)))
	(let ((str (with-output-to-string (lambda () (display (hook->list (after-edit-hook ind 0)))))))
	  (if (not (string=? str "(#<procedure #f (() (+ snd chn))>)"))
	      (snd-display ";after-edit-hook: ~A?" str)))
	(reset-hook! (after-edit-hook ind 0))
	(reset-hook! (undo-hook ind 0))
	(add-hook! (undo-hook ind 0) (lambda () (+ snd chn)))
	(let ((str (with-output-to-string (lambda () (display (hook->list (undo-hook ind 0)))))))
	  (if (not (string=? str "(#<procedure #f (() (+ snd chn))>)"))
	      (snd-display ";undo-hook: ~A?" str)))
	(reset-hook! (undo-hook ind 0))
	(let ((calls 0))
	  (add-hook! (undo-hook ind 0) (lambda () (set! calls (1+ calls))))
	  (delete-sample 0 ind 0)
	  (undo 1)
	  (redo 1)
	  (revert-sound ind)
	  (if (not (= calls 3)) (snd-display ";undo-hook called ~A times" calls)))
	(reset-hook! (undo-hook ind 0))

	(let ((opt (optimization)))
	  (set! (optimization) 0)
	  (set! (search-procedure ind) (lambda (n4) (> n4 .1)))
	  (key (char->integer #\a) 4 ind 0)
	  (key (char->integer #\s) 4 ind 0)
	  (key (char->integer #\s) 4 ind 0)
	  (if (not (= (cursor ind 0) 4423))
	      (snd-display ";unopt search-procedure C-s C-s cursor: ~D?" (cursor ind 0)))
	  (set! (search-procedure ind) (lambda (n) (> n .2)))
	  (set! (cursor ind 0) (1- (frames)))
	  (key (char->integer #\r) 4 ind 0)
	  (key (char->integer #\r) 4 ind 0)
	  (set! (optimization) opt))

	(set! (search-procedure ind) #f)
	(close-sound ind)
	)

      (if (not (hook-empty? open-raw-sound-hook)) (reset-hook! open-raw-sound-hook))
      (add-hook! open-raw-sound-hook (lambda (file choices) (list 1 22050 mus-bshort)))
      (let* ((ind (open-sound "../sf1/addf8.nh")))
	(play-and-wait 0 ind)
	(reset-hook! open-raw-sound-hook)
	(if (or (not (= (chans ind) 1))
		(not (= (srate ind) 22050))
		(not (= (data-format ind) mus-bshort))
		(not (= (frames ind) 23808)))
	    (snd-display ";open-raw: ~A ~A ~A ~A" 
				 (chans ind) (srate ind) (data-format ind) (frames ind)))
	(set! (search-procedure ind) (lambda (n) (> n .2)))
	(close-sound ind))

      (let ((ind (open-sound "oboe.snd")))
	(save-sound-as "test.snd" ind mus-raw)
	(close-sound ind)
	(reset-hook! open-raw-sound-hook)
	(add-hook! open-raw-sound-hook 
		   (lambda (file choice)
		     (if (not (string=? (substring file (- (string-length file) 8)) "test.snd"))
			 (snd-display ";open-raw-sound-hook file: ~A?" (substring file (- (string-length file) 8))))
		     (if (not (eq? choice #f))
			 (snd-display ";open-raw-sound-hook choice: ~A?" choice))
		     (list 2 44100 mus-mulaw)))
	(set! ind (open-sound "test.snd"))
	(if (or (not (= (header-type ind) mus-raw))
		(not (= (data-format ind) mus-mulaw))
		(not (= (chans ind) 2))
		(not (= (srate ind) 44100))
		(not (= (frames ind) 50828)))
	    (snd-display ";open-raw-sound-hook 1: ~A ~A ~A ~A ~A" 
				 (header-type ind) (data-format ind) (chans ind) (srate ind) (frames ind)))
	(close-sound ind)
	(add-hook! open-raw-sound-hook
		   (lambda (file choice)
		     ;; append to list
		     (if (not (equal? choice (list 2 44100 mus-mulaw)))
			 (snd-display ";open-raw-sound-hook 2: ~A" choice))
		     (list 1 22050 mus-lint))
		   #t)
	(set! ind (open-sound "test.snd"))
	(if (or (not (= (header-type ind) mus-raw))
		(not (= (data-format ind) mus-lint))
		(not (= (chans ind) 1))
		(not (= (srate ind) 22050))
		(not (= (frames ind) (/ 50828 2))))
	    (snd-display ";open-raw-sound-hook 3: ~A ~A ~A ~A ~A" 
				 (header-type ind) (data-format ind) (chans ind) (srate ind) (frames ind)))
	(close-sound ind)
	(reset-hook! open-raw-sound-hook)
	(add-hook! open-raw-sound-hook 
		   (lambda (file choice)
		     (list 2)))
	(set! ind (open-sound "test.snd"))
	(if (or (not (= (header-type ind) mus-raw))
		(not (= (data-format ind) mus-lint))
		(not (= (chans ind) 2))
		(not (= (srate ind) 22050)))
	    (snd-display ";open-raw-sound-hook 4: ~A ~A ~A ~A"
				 (header-type ind) (data-format ind) (chans ind) (srate ind)))
	(close-sound ind)
	(reset-hook! open-raw-sound-hook)
	(add-hook! open-raw-sound-hook 
		   (lambda (file choice)
		     (list 1 22050 mus-bshort 120 320)))
	(set! ind (open-sound "test.snd"))
	(if (or (not (= (header-type ind) mus-raw))
		(not (= (data-format ind) mus-bshort))
		(not (= (chans ind) 1))
		(not (= (srate ind) 22050))
		(not (= (data-location ind) 120))
		(not (= (data-size ind) 320))
		(not (= (frames ind) 160)))
	    (snd-display ";open-raw-sound-hook 5: ~A ~A ~A ~A ~A ~A ~A" 
				 (header-type ind) (data-format ind) (chans ind) (srate ind)
				 (data-location ind) (data-size ind) (/ (frames ind) 2)))
	(close-sound ind)
	(reset-hook! open-raw-sound-hook))

      (let ((ind #f)
	    (op #f)
	    (sl #f)
	    (aop #f)
	    (dop #f)
	    (cl #f)
	    (ig #f)
	    (scl #f)
	    (other #f))
	(add-hook! open-hook 
		   (lambda (filename)
		     (if (not (string=? filename (mus-expand-filename "oboe.snd")))
			 (snd-display ";open-hook: ~A?" filename))
		     (set! op #t)
		     #f))
	(add-hook! after-open-hook 
		   (lambda (snd)
		     (set! aop snd)))
	(add-hook! during-open-hook 
		   (lambda (fd filename reason)
		     (set! dop #t)
		     (if (not (string=? filename (mus-expand-filename "oboe.snd")))
			 (snd-display ";during-open-hook filename: ~A?" filename))
		     (if (not (= reason 1))
			 (snd-display ";during-open-hook reason: ~A?" reason))))
	(add-hook! initial-graph-hook
		   (lambda (snd chn dur)
		     (if (not (= chn 0))
			 (snd-display ";initial-graph-hook (channel): ~A not 0?" chn))
		     (set! ig #t)
		     #f))

	(set! ind (open-sound "oboe.snd"))

	(if (not op) (snd-display ";open-hook not called?"))
	(if (not dop) (snd-display ";during-open-hook not called?"))
	(if (not ig) (snd-display ";initial-graph-hook not called?"))
	(if (not (number? aop)) (snd-display ";after-open-hook not called?"))
	(if (not (= aop ind)) (snd-display ";after-open-hook ~A but ind: ~A?" aop ind))
	(reset-hook! open-hook)
	(reset-hook! during-open-hook)
	(reset-hook! after-open-hook)
	(reset-hook! initial-graph-hook)

	(add-hook! open-hook (lambda (filename) #t))
	(let ((pistol (open-sound "pistol.snd")))
	  (if (not (eq? pistol #f))
	      (begin
		(snd-display ";open-hook #t, but open-sound -> ~A" pistol)
		(if (sound? pistol) (close-sound pistol)))))
	(reset-hook! open-hook)

	(let ((gr #f)
	      (agr #f)
	      (gbf #f)
	      (abf #f))
	  (reset-hook! before-transform-hook)
	  (reset-hook! transform-hook)
	  (reset-hook! after-graph-hook)
	  (reset-hook! graph-hook)
	  (add-hook! graph-hook
		     (lambda (snd chn y0 y1)
		       (if (not (= snd ind))
			   (snd-display ";graph-hook: ~A not ~A?" snd ind))
		       (if (not (= chn 0))
			   (snd-display ";graph-hook (channel): ~A not 0?" chn))
		       (set! gr #t)
		       #f))
	  (add-hook! after-graph-hook
		     (lambda (snd chn)
		       (if (not (= snd ind))
			   (snd-display ";after-graph-hook: ~A not ~A?" snd ind))
		       (if (not (= chn 0))
			   (snd-display ";after-graph-hook (channel): ~A not 0?" chn))
		       (set! agr #t)))
	  (add-hook! before-transform-hook
		     (lambda (snd chn)
		       (set! gbf #t)
		       (cursor)))
	  (add-hook! transform-hook
		     (lambda (snd chn scale)
		       (set! abf #t)
		       (if (and (transform-graph? snd chn) 
				(= (transform-graph-type snd chn) graph-once))
			   (report-in-minibuffer 
			    (number->string (/ (* 2.0 (vct-peak (transform-samples->vct snd chn)))
					       (transform-size snd chn)))
			    snd)
			   #f)))
	  (set! (transform-graph? ind 0) #t)
	  (set! (time-graph? ind 0) #t)
	  (update-time-graph ind 0)
	  (update-transform-graph ind 0)
	  (if (not gr) (snd-display ";graph-hook not called? ~A ~A ~A ~A" (time-graph? ind) (short-file-name ind) ind (sounds)))
	  (if (not agr) (snd-display ";after-graph-hook not called?"))
	  (if (not gbf) (snd-display ";before-transform-hook not called?"))
	  (if (not abf) (snd-display ";transform-hook not called?"))
	  (reset-hook! before-transform-hook)
	  (set! (transform-graph? ind 0) #f)
	  (reset-hook! graph-hook)
	  (reset-hook! after-graph-hook))

	(set! other (open-sound "pistol.snd"))
	
	(add-hook! select-sound-hook 
		   (lambda (snd) 
		     (if (not (= snd ind))
			 (snd-display ";select-sound-hook: ~A not ~A?" snd ind))
		     (set! sl #t)))
	(add-hook! select-channel-hook 
		   (lambda (snd chn) 
		     (if (not (= snd ind))
			 (snd-display ";select-channel-hook: ~A not ~A?" snd ind))
		     (if (not (= chn 0))
			 (snd-display ";select-channel-hook (channel): ~A not 0?" chn))
		     (set! scl #t)))

	(select-sound ind)
	(if (not sl) (snd-display ";select-sound-hook not called?"))
	(if (not scl) (snd-display ";select-channel-hook not called?"))
	(reset-hook! select-sound-hook)
	(reset-hook! select-channel-hook)

	(let ((spl #f)
	      (stl #f)
	      (ph #f)
	      (ph1 #f)
	      (pc #f))
	  (if (defined? 'enable-play) (enable-play))

	  (add-hook! start-playing-hook
		     (lambda (snd)
		       (if (not (= snd ind))
			   (snd-display ";start-playing-hook: ~A not ~A?" snd ind))
		       (set! spl #t)
		       #f))
	  (add-hook! stop-playing-hook
		     (lambda (snd)
		       (if (not (= snd ind))
			   (snd-display ";stop-playing-hook: ~A not ~A?" snd ind))
		       (set! stl #t)))
	  (add-hook! stop-playing-channel-hook
		     (lambda (snd chn)
		       (if (not (= snd ind))
			   (snd-display ";stop-playing-channel-hook: ~A not ~A?" snd ind))
		       (if (not (= chn 0))
			   (snd-display ";stop-playing-channel-hook (channel): ~A not 0?" chn))
		       (set! pc #t)))
	  (add-hook! play-hook
		     (lambda (n)
		       (if (< n 128)
			   (snd-display ";play-hook samps: ~A?" n))
		       (set! (expand-control-hop) (expand-control-hop))
		       (set! (expand-control-length) (expand-control-length))
		       (set! (expand-control-ramp) (expand-control-ramp))
		       (set! (contrast-control-amp) (contrast-control-amp))
		       (set! (reverb-control-lowpass) (reverb-control-lowpass))
		       (set! (reverb-control-feedback) (reverb-control-feedback))
		       (set! ph #t)))
	  (add-hook! dac-hook
		     (lambda (n)
		       (if (not (sound-data? n))
			   (snd-display ";dac-hook data: ~A?" n))
		       (if (< (sound-data-length n) 128)
			   (snd-display ";dac-hook data length: ~A?" (sound-data-length n)))
		       (set! ph1 #t)))

	  (set! (expand-control? ind) #t)
	  (set! (reverb-control? ind) #t)
	  (play-and-wait 0 ind)
	  (set! (reverb-control? ind) #f)
	  (set! (expand-control? ind) #f)

	  (if (not spl) (snd-display ";start-playing-hook not called?"))
	  (if (not stl) (snd-display ";stop-playing-hook not called?"))
	  (if (not pc) (snd-display ";stop-playing-channel-hook not called?"))
	  (if (not ph) (snd-display ";play-hook not called?"))
	  (if (not ph1) (snd-display ";dac-hook not called?"))
	  (reset-hook! start-playing-hook)
	  (reset-hook! stop-playing-hook)
	  (reset-hook! stop-playing-channel-hook)
	  (reset-hook! play-hook)
	  (reset-hook! dac-hook)

	  (add-hook! play-hook
		     (lambda (n)
		       (set! (expand-control-hop) .02)
		       (set! (expand-control-length) .02)
		       (set! (expand-control-ramp) .2)
		       (set! (contrast-control-amp) 0.5)
		       (set! (reverb-control-lowpass) .02)
		       (set! (reverb-control-feedback) .02)))

	  (play-and-wait 0 ind)
	  (reset-hook! play-hook)

	  (add-hook! start-playing-hook (lambda (sp) #t))
	  (play "4.aiff")
	  (reset-hook! start-playing-hook)

	  (let ((sr -1)
		(ss #f)
		(old-reg (selection-creates-region)))
	    (set! (selection-creates-region) #t)
	    (add-hook! stop-playing-region-hook (lambda (n) (set! sr n)))
	    (add-hook! stop-playing-selection-hook (lambda () (set! ss #t)))
	    (let ((reg (select-all)))
	      (play-selection #t)
	      (play-region reg #t)
	      (if (not (= sr reg)) (snd-display ";stop-playing-region-hook: ~A ~A" reg sr))
	      (if (not ss) (snd-display ";stop-playing-selection-hook: ~A" ss)))
	    (reset-hook! stop-playing-region-hook)
	    (reset-hook! stop-playing-selection-hook))

	  (let ((ctr 0))
	    (add-hook! dac-hook
		       (lambda (n)
			 (set! ctr (1+ ctr))
			 (stop-playing)))
	    (play-and-wait 0 ind)
	    (if (> ctr 2) (snd-display ";stop-playing: ~A" ctr))
	    (reset-hook! dac-hook))

	  (let ((pl (make-player ind 0))
		(ctr 0))
	    (if (not (player? pl)) (snd-display ";make-player: ~A" pl))
	    (add-hook! dac-hook
		       (lambda (n)
			 (set! ctr (1+ ctr))
			 (if (player? pl)
			     (stop-player pl)
			     (if (= ctr 1)
				 (snd-display ";player messed up")))))
	    (add-player pl)
	    (start-playing 1 22050 #f)
	    (if (> ctr 2) (snd-display ";stop-player: ~A" ctr))
	    (reset-hook! dac-hook))
	    
	  (if (defined? 'disable-play) (disable-play))
	  )

	(let ((e0 #f)
	      (e1 #f)
	      (u0 #f)
	      (u1 #f)
	      (a0 #f)
	      (a1 #f))
	  (add-hook! (edit-hook ind 0) 
		     (lambda ()
		       (set! e0 #t)
		       #t))
	  (add-hook! (edit-hook other 0) 
		     (lambda ()
		       (set! e1 #t)
		       #f))
	  (add-hook! (undo-hook ind 0) 
		     (lambda ()
		       (set! u0 #t)))
	  (add-hook! (undo-hook other 0) 
		     (lambda ()
		       (set! u1 #t)))
	  (add-hook! (after-edit-hook ind 0)
		     (lambda ()
		       (set! a0 #t)))
	  (add-hook! (after-edit-hook other 0)
		     (lambda ()
		       (set! a1 #t)))
	  
	  ;; edit of ind should be disallowed, but not other
	  (delete-sample 0 ind 0)
	  (if (not (= (edit-position ind 0) 0))
	      (snd-display ";edit-hook #t didn't disallow edit!"))
	  (if (not e0) (snd-display ";edit-hook #t not called?"))
	  (if a0 (snd-display ";after-edit-hook 0 called?"))
	  (undo 1 ind 0)
	  (if u0 (snd-display ";undo-hook called?"))
	  
	  (delete-sample 0 other 0)
	  (if (not (= (edit-position other 0) 1))
	      (snd-display ";edit-hook #f didn't allow edit!"))
	  (if (not e1) (snd-display ";edit-hook #f not called?"))
	  (if (not a1) (snd-display ";after-edit-hook 1 not called?"))
	  (undo 1 other 0)
	  (if (not u1) (snd-display ";undo-hook not called?"))

	  (reset-hook! (edit-hook ind 0))
	  (reset-hook! (edit-hook other 0))
	  (reset-hook! (after-edit-hook ind 0))
	  (reset-hook! (after-edit-hook other 0))
	  (reset-hook! (undo-hook ind 0))
	  (reset-hook! (undo-hook other 0)))

	(let ((se #f)
	      (sw #f)
	      (me #f))
	  (add-hook! snd-error-hook
		     (lambda (msg)
		       (set! se #t)
		       #t))
	  (add-hook! snd-warning-hook
		     (lambda (msg)
		       (set! sw #t)
		       #t))
	  (add-hook! mus-error-hook
		     (lambda (typ msg)
		       (set! me #t)
		       #t))

	  (snd-error "uhoh")
	  (snd-warning "hiho")
	  (mus-sound-samples "/bad/baddy")
	  
	  (if (not se) (snd-display ";snd-error-hook not called?"))
	  (if (not sw) (snd-display ";snd-warning-hook not called?"))
	  (if (not me) (snd-display ";mus-error-hook not called?"))
	  (reset-hook! snd-error-hook)
	  (reset-hook! snd-warning-hook)
	  (reset-hook! mus-error-hook)
	  (add-hook! snd-error-hook
		     (lambda (msg)
		       (set! se msg)
		       #f))
	  (snd-error "not an error")
	  (if (not (string=? se "not an error"))
	      (snd-display ";snd-error-hook saw: ~A" se))
	  (reset-hook! snd-error-hook))

	(add-hook! exit-hook (lambda () #f))
	(add-hook! exit-hook (lambda () #t))
	(add-hook! exit-hook (lambda () #f))
	(exit)
	(reset-hook! exit-hook)

	(let ((sh #f))
	  (if (file-exists? "baddy.snd") (delete-file "baddy.snd"))
	  (add-hook! save-hook
		     (lambda (snd filename)
		       (if (or (not (string? filename))
			       (not (string=? filename (mus-expand-filename "baddy.snd"))))
			   (snd-display ";save-hook filename: ~A?" filename))
		       (if (not (= snd ind))
			   (snd-display ";save-hook snd: ~A ~A?" snd ind))
		       (set! sh #t)
		       #t))
	  (save-sound-as "baddy.snd" ind)
	  (if (not sh) (snd-display ";save-hook not called?"))
	  (if (file-exists? "baddy.snd")
	      (begin
		(snd-display ";save-hook didn't cancel save?")
		(delete-file "baddy.snd")))
	  (reset-hook! save-hook))

	;; transform-hooks require some way to force the fft to run to completion
	;; property-changed hook is similar (seems to happen whenever it's good and ready)

	(add-hook! close-hook
		   (lambda (snd)
		     (if (not (= snd ind))
			 (snd-display ";close-hook: ~A not ~A?" snd ind))
		     (set! cl #t)))
	
	(close-sound ind)
	(if (not cl) (snd-display ";close-hook not called?"))
	(reset-hook! close-hook)
	(close-sound other))
      
      (add-hook! print-hook (lambda (str) 
			      (if (and (char=? (string-ref str 0) #\#) 
				       (or (and (= (print-length) 30) ; test 9
						(not (string=? str "#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...)")))
					   (and (= (print-length) 12) ; just test 13
						(not (string=? str "#(0 0 0 0 0 0 0 0 0 0 0 0 ...)")))))
				  (snd-display ";vector abbreviation: ~A" str))
			      #f))
      (let ((v (make-vector 128 0)))
	(snd-print v)
	(reset-hook! print-hook))

      (let ((ind (new-sound "fmv.snd" mus-next mus-bshort 22050 1 "auto-update test"))
	    (ind1 (new-sound "fmv1.snd" mus-next mus-bshort 22050 1 "auto-update test"))
	    (old-update (auto-update)))
	(pad-channel 0 1000 ind 0)
	(pad-channel 0 1000 ind1 0)
	(save-sound ind)
	(save-sound ind1)
	(set! (auto-update) #t)
	(sleep 1) ; make sure write dates differ(!)
	(system "cp oboe.snd fmv1.snd") ; ind1 needs auto-update now
	(set! (sample 100 ind 0) 0.5)
	(save-sound ind) ; this should cause auto-update scan of all files
	(set! ind1 (find-sound "fmv1.snd")) ; hmmm auto-update can change any file's index!
	(if (not (= (frames ind1) (mus-sound-frames "oboe.snd")))
	    (snd-display ";fmv1 after update: ~A" (frames ind1)))
	(set! (auto-update) old-update)
	(close-sound ind)
	(close-sound ind1)
	(delete-file "fmv.snd")
	(delete-file "fmv1.snd"))
      ))


(define (test-panel func name)
  (if (and (not (feql (func #t) (map func (sounds))))
	   (not (feql (func #t) (map func (reverse (sounds))))))
      (snd-display ";test-panel ~A: ~A ~A?" name (func #t) (map func (sounds)))))

(define (flatten lst)
  (cond ((null? lst) '())
	((list-p lst)
	 (if (list-p (car lst))
	     (append (flatten (car lst)) (flatten (cdr lst)))
	   (cons (car lst) (flatten (cdr lst)))))
	(#t lst)))

(define (all-chans-reversed)
  (let ((sndlist '())
	(chnlist '()))
    (for-each (lambda (snd)
		(do ((i (1- (channels snd)) (1- i)))
		    ((< i 0))
		  (set! sndlist (cons snd sndlist))
		  (set! chnlist (cons i chnlist))))
	      (reverse (sounds)))
    (list sndlist chnlist)))

(define (test-channel func name)
  (if (and (not (equal? (flatten (func #t #t)) (apply map func (all-chans))))
	   (not (equal? (flatten (func #t #t)) (apply map func (all-chans-reversed)))))
      (snd-display ";test-channel ~A: ~A ~A?" name (flatten (func #t #t)) (apply map func (all-chans)))))

(define duration 
  (lambda (ind)
    (/ (frames ind) (srate ind))))

(define outputs (make-vector 24))
(define delay-line #f)
(define delay-time 0.5)
(define rev-funcs-set #f)

(define (safe-make-region beg end snd)
  (let ((len (frames snd)))
    ;(snd-display ";make ~D ~D " beg end)
    (if (> len 1)
	(if (< end len)
	    (make-region beg end snd)
	    (if (< beg len)
		(make-region beg (1- len) snd)
		(make-region 0 (1- len) snd))))))

(define sfile 0)

(define* (clone-sound-as new-name #:optional snd)
  ;; copies any edit-sounds to save-dir!
  (let* ((tmpf (snd-tempnam))
	 (scm (string-append (substring tmpf 0 (- (string-length tmpf) 3)) "scm"))
	 (oldsnd (or snd (selected-sound))))
    (if (not (string? (save-dir))) (set! (save-dir) "/tmp"))
    (save-edit-history scm oldsnd)
    (copy-file (file-name oldsnd) new-name)
    (set! sfile (open-sound new-name))
    (load scm)
    (delete-file scm)
    sfile))


;;; ---------------- test 14: all together now ----------------

(define cur-dir-files (remove-if 
		       (lambda (file) (<= (catch #t 
						 (lambda () 
						   (mus-sound-frames file))
						 (lambda args 0))
					  0))
		       (sound-files-in-directory ".")))
(define cur-dir-len (length cur-dir-files))

(if (or full-test (= snd-test 14) (and keep-going (<= snd-test 14)))
    (let* ((stereo-files '())
	   (quad-files '())
	   (mono-files '())
	   (octo-files '())
	   (open-files '())
	   (s8-snd (if (file-exists? "s8.snd") "s8.snd" "oboe.snd"))
	   (open-ctr 0))
      (if (procedure? test-hook) (test-hook 14))
      (do ((i 0 (1+ i)))
	  ((= i cur-dir-len))
	(let* ((name (list-ref cur-dir-files i))
	       (ht (mus-sound-header-type name))
	       (df (mus-sound-data-format name))
	       (len (mus-sound-frames name))
	       (chans (mus-sound-chans name)))
	  (if (and (not (= ht mus-raw))
		   (not (= len 0))
		   (not (= df -1)))
	      (if (= chans 1)
		  (set! mono-files (cons name mono-files))
		(if (= chans 2)
		    (set! stereo-files (cons name stereo-files))
		  (if (= chans 4)
		      (set! quad-files (cons name quad-files))
		    (if (= chans 8)
			(set! octo-files (cons name octo-files)))))))))
      
      (set! buffer-menu (add-to-main-menu "Buffers"))  
      (add-hook! open-hook open-buffer)
      (add-hook! close-hook close-buffer)
      
      (do ((test-ctr 0 (1+ test-ctr)))
	  ((= test-ctr tests))
	(if (> (length open-files) 8)
	    (begin
	      (map close-sound open-files)
	      (set! open-files '())))
	(log-mem test-ctr)
	(let* ((len (length open-files))
	       (open-chance (max 0.0 (* (- 8 len) .125)))
	       (close-chance (* len .125)))
	  (if (or (= len 0) (rs open-chance))
	      (let* ((choice (my-random cur-dir-len))
		     (name (list-ref cur-dir-files choice))
		     (ht (mus-sound-header-type name))
		     (df (mus-sound-data-format name))
		     (fd (if (or (= ht mus-raw) (= df -1)) -1 (view-sound name))))
		(if (and (number? fd)
			 (not (= fd -1)))
		    (set! open-files (cons fd open-files))))
	    (if (and (> len 0) (rs close-chance))
		(let* ((choice (my-random (length open-files)))
		       (fd (list-ref open-files choice)))
		  (close-sound fd)
		  (set! open-files (remove-if (lambda (a) (= a fd)) open-files)))))
	  
	  (set! open-ctr (length open-files))
	  (if (= open-ctr 0)
	      (let ((fd (view-sound "oboe.snd")))
		(set! open-ctr 1)
		(set! open-files (cons fd open-files))))

	  (let ((choose-fd (lambda () (list-ref (sounds) (my-random (length (sounds)))))))

	    (if (> tests 1) (begin (snd-display ";main test ~D " test-ctr) (mus-sound-prune)))

	    (let* ((frame-list (map frames open-files))
		   (curloc (max 0 (min 1200 (1- (list-ref frame-list 0))))) ; max 0 since z.snd has 0 frames
		   (curfd (choose-fd))
		   (old-marks (length (marks curfd 0))))
	      (set! test14-file (short-file-name curfd))
	      (if (> (duration curfd) 0.0)
		  (begin
		    (set! (x-bounds curfd) (list 0.0 (min (duration curfd) 1.0)))
		    (let ((xb (x-bounds curfd)))
		      (if (or (fneq (car xb) 0.0) 
			      (fneq (cadr xb) (min (duration curfd) 1.0))) 
			  (snd-display ";x-bounds: ~A?" xb)))))
	      (set! (y-bounds curfd) (list -0.5 0.5))
	      (let ((yb (y-bounds curfd)))
		(if (or (fneq (car yb) -0.5) (fneq (cadr yb) 0.5)) (snd-display ";y-bounds: ~A?" yb)))
	      (set! (cursor curfd) curloc)
	      (let ((cl (cursor curfd)))
		(if (not (= cl curloc)) 
		    (begin
		      (snd-display ";cursor ~A /= ~A?" cl curloc)
		      (set! curloc (cursor)))))
	      (let* ((id (add-mark curloc curfd)))
		(if (and (number? id) (not (= id -1)))
		    (let* ((cl (mark-sample id))
			   (new-marks (length (marks curfd 0))))
		      (if (not (= cl curloc)) (snd-display ";mark ~A /= ~A?" cl curloc))
		      (if (not (= new-marks (1+ old-marks))) (snd-display ";marks ~A ~A?" new-marks old-marks))
		      (let ((new-id (find-mark curloc curfd)))
			(if (or (not (mark? new-id))
				(not (= id new-id)))
			    (snd-display ";find-mark (by sample): ~A ~A (~A for ~A ~A)?" 
						 id new-id curloc (mark-sample id) (mark-sample new-id))))
		      (set! (mark-name id) "hiho")
		      (let ((new-id (find-mark "hiho" curfd)))
			(if (or (not (mark? new-id))
				(not (= id new-id)))
			    (snd-display ";find-mark (by name): ~A ~A?" id new-id)))
		      (if (not (string=? (mark-name id) "hiho")) (snd-display ";mark name: ~A?" (mark-name id)))
		      (set! (mark-sample id) (max 0 (- curloc 100)))
		      (set! cl (mark-sample id))
		      (if (not (= cl (max 0 (- curloc 100)))) (snd-display ";set mark ~A /= ~A?" cl curloc))
		      (delete-mark id)))
		(if (> (duration curfd) 1.2) (set! (x-bounds curfd) '(1.0 1.1)))
		(if (> (frames curfd) 25)
		    (begin
		      (add-mark 10 curfd)
		      (add-mark 20 curfd)
		      (key (char->integer #\m) 0 curfd)
		      (set! (cursor curfd) 0)
		      (forward-mark 1 curfd)
		      (if (and (> (frames curfd) 10)
			       (not (= (cursor curfd) 10)))
			  (snd-display ";forward-mark (10): ~A (~A)?" (cursor curfd) (frames curfd)))
		      (forward-mark 1 curfd)
		      (if (and (> (frames curfd) 20)
			       (not (= (cursor curfd) 20)))
			  (snd-display ";forward-mark (20): ~A (~A)?" (cursor curfd) (frames curfd)))
		      (set! (cursor curfd) 25)
		      (backward-mark 2 curfd)
		      (if (and (> (frames curfd) 10)
			       (not (= (cursor curfd) 10)))
			  (snd-display ";backward-mark (10): ~A (~A)?" (cursor curfd) (frames curfd)))
		      (forward-sample 5 curfd)
		      (if (and (> (frames curfd) 15)
			       (not (= (cursor curfd) 15)))
			  (snd-display ";forward-sample (5): ~A (~A)?" (cursor curfd) (frames curfd)))
		      (backward-sample 1 curfd)
		      (if (and (> (frames curfd) 15)
			       (not (= (cursor curfd) 14)))
			  (snd-display ";backward-sample (1): ~A (~A)?" (cursor curfd) (frames curfd)))
		      (let ((new-marks (length (marks curfd 0))))
			(delete-marks curfd)
			(if (> (duration curfd) 0.0)
			    (set! (x-bounds curfd) (list 0.0 (min (duration curfd) 0.1))))
			(set! (y-bounds curfd) '(-1.0 1.0))
			(if (or (> (length (marks curfd 0)) 0)
				(not (= new-marks (+ old-marks 2))))
			    (snd-display ";delete marks: ~A ~A?" new-marks old-marks)))))
		))
	  
	    (if (rs 0.5)
		(add-hook! exit-hook (lambda () (report-in-minibuffer "") (unsaved-edits? 0)))
	    (reset-hook! exit-hook))

	    (key (char->integer #\x) 4)
	    (key (char->integer #\() 0)
	    (key (char->integer #\f) 4)
	    (key (char->integer #\f) 4)
	    (key (char->integer #\x) 4)
	    (key (char->integer #\)) 0)
	    (key (char->integer #\x) 4)
	    (key (char->integer #\e) 0)

	    (key (char->integer #\u) 4)
	    (key (char->integer #\.) 4)
	    (key (char->integer #\5) 4)
	    (key (char->integer #\x) 4)
	    (key (char->integer #\v) 4)

	    (key (char->integer #\>) 4 (choose-fd))
	    (key (char->integer #\i) 4 (choose-fd))
	    (key (char->integer #\<) 4 (choose-fd))
	    (key (char->integer #\i) 4 (choose-fd))
	    (key (char->integer #\>) 0 (choose-fd))
	    (key (char->integer #\i) 4 (choose-fd))
	    (key (char->integer #\<) 0 (choose-fd))
	    (key (char->integer #\i) 4 (choose-fd))
	    (key (char->integer #\a) 4 (choose-fd))
	    (key (char->integer #\i) 4 (choose-fd))
	    (key (char->integer #\e) 4 (choose-fd))
	    (key (char->integer #\i) 4 (choose-fd))
	    (key (char->integer #\b) 4 (choose-fd))
	    (key (char->integer #\i) 4 (choose-fd))
	    (if (not (provided? 'snd-gtk)) (key (char->integer #\p) 4 (choose-fd))) ;this is apparently getting hung in gtk (or maybe it's the c-q below)
	    (key (char->integer #\i) 4 (choose-fd))
	    (key (char->integer #\n) 4 (choose-fd))
	    (key (char->integer #\i) 4 (choose-fd))
	    (key (char->integer #\l) 4 (choose-fd))
	    (if (rs 0.5) (begin (key (char->integer #\x) 4) (key (char->integer #\b) 0)))
	    (set! (cursor (choose-fd)) 1200)
	    (safe-make-region 1000 2000 (choose-fd))
	    (if (= (length (regions)) 0)
		(snd-display ";safe-make-region failed?")
		(begin
		  (if (selection?) (delete-selection))
		  (set! (cursor (choose-fd)) 0)
		  (insert-region (cursor) (car (regions)) (choose-fd))))
	    (revert-sound (choose-fd))
	    (key (char->integer #\m) 4 (choose-fd))
	    (key (char->integer #\v) 4 (choose-fd))
	    (key (char->integer #\d) 4 (choose-fd))
	    (key (char->integer #\z) 4 (choose-fd))
	    (key (char->integer #\o) 4 (choose-fd))
	    (if (rs 0.5) (begin (key (char->integer #\x) 4)) (key (char->integer #\u) 0))
	    (undo 2 (choose-fd))
	    (key (char->integer #\<) 4 (choose-fd))
	    (key (char->integer #\i) 4 (choose-fd))
	    (key (char->integer #\w) 4 (choose-fd))
	    (key (char->integer #\y) 4 (choose-fd))
	    (if (not (provided? 'snd-gtk)) (key (char->integer #\q) 4 (choose-fd)))
	    (set! (cursor (choose-fd)) 8000)
	    (if (rs 0.5) (begin (key (char->integer #\x) 4) (key (char->integer #\f) 0) (key (char->integer #\g) 4)))
	    (if (rs 0.5) (begin (key (char->integer #\x) 4) (key (char->integer #\i) 0) (key (char->integer #\g) 4)))
	    (if (rs 0.5) (begin (key (char->integer #\x) 4) (key (char->integer #\l) 0) (key (char->integer #\g) 4)))
	    (if (rs 0.5) (begin (key (char->integer #\x) 4) (key (char->integer #\u) 0)))
	    (if (rs 0.5) (begin (key (char->integer #\x) 4) (key (char->integer #\r) 0)))
	    (if (rs 0.5) (begin (key (char->integer #\x) 4) (key (char->integer #\v) 0)))
	    (if (rs 0.5) (begin (key (char->integer #\x) 4) (key (char->integer #\o) 4)))
	    (if (rs 0.5) (begin (key (char->integer #\x) 4) (key (char->integer #\u) 4)))

	    (revert-sound)
	    (select-all)
	    (without-errors
	     (if (and (region? 0) (selection?))
		 ;; these are not necessarily coupled any more
		 (let ((r1 (region-rms (car (regions))))
		       (r2 (selection-rms))
		       (r3 (selection-rms-1))
		       (r4 (region-rms-1 (car (regions)))))
		   (if (fneq r1 r4)
		       (snd-display ";region rms: ~A ~A?" r1 r4))
		   (if (fneq r2 r3)
		       (snd-display ";selection rms: ~A ~A?" r2 r3)))))

	    (forward-graph (choose-fd))
	    (backward-graph (choose-fd))
	    (forward-mix (choose-fd))
	    (backward-mix (choose-fd))

	    (without-errors (protect-region (list-ref (regions) 2) #t))
	    (without-errors (play-region (list-ref (regions) 2) #t))
	    (without-errors (mix-region))
	    (play-and-wait)
	    (scale-to .1 (choose-fd))
	    (scale-by 2.0 (choose-fd))
	    (equalize-panes)
	    (save-controls)
	    (set! (amp-control) .5)
	    (test-panel amp-control 'amp-control)
	    (restore-controls)
	    (report-in-minibuffer "hi")
	    (append-to-minibuffer "ho")
	  
	    (without-errors
	     (begin
	       (let ((cfd (choose-fd)))
		 (safe-make-region 1000 2000 cfd)
		 (src-selection .5)
		 (undo 1 cfd))
	       (let ((cfd (choose-fd)))
		 (safe-make-region 1000 2000 cfd)
		 (src-selection -1.5)
		 (undo 1 cfd))
	       (let ((cfd (choose-fd)))
		 (safe-make-region 1000 2000 cfd)
		 (scale-selection-by .5)
		 (undo 1 cfd))
	       (let ((cfd (choose-fd)))
		 (safe-make-region 1000 2000 cfd)
		 (env-selection '(0 0 1 1 2 0))
		 (undo 1 cfd))
	       (let ((cfd (choose-fd)))
		 (safe-make-region 1000 2000 cfd)
		 (scale-selection-to .5)
		 (reverse-selection)
		 (undo 2 cfd))
	       (if (> (length (regions)) 2) (forget-region (list-ref (regions) 2)))))
	    (map revert-sound open-files)

	    (without-errors
	     (let ((cfd (car open-files)))
	       (set! (sync cfd) 1)
	       (if (not (null? (cdr open-files))) (set! (sync (cadr open-files)) 1))
	       (if (rs 0.5)
		   (begin
		     (safe-make-region 1000 2000 cfd)
		     (src-selection .5)
		     (undo 1 cfd)))
	       (if (rs 0.5)
		   (begin
		     (safe-make-region 1000 2000 cfd)
		     (src-selection -1.5)
		     (undo 1 cfd)))
	       (if (rs 0.5)
		   (begin
		     (safe-make-region 1000 2000 cfd)
		     (env-selection '(0 0 1 1 2 0))
		     (undo 1 cfd)))
	       (if (rs 0.5)
		   (begin
		     (safe-make-region 1000 2000 cfd)
		     (reverse-selection)
		     (undo 1 cfd)))
	       (if (rs 0.5)
		   (begin
		     (safe-make-region 1000 2000 cfd)
		     (filter-selection '(0 0 .1 1 1 0) 40)
		     (undo 1 cfd)))
	       (if (rs 0.5)
		   (begin
		     (safe-make-region 1000 2000 cfd)
		     (convolve-selection-with "oboe.snd")
		     (undo 1 cfd)))
	       (if (rs 0.5)
		   (begin
		     (safe-make-region 1000 2000 cfd)
		     (smooth-selection)
		     (undo 1 cfd)))
	       (if (rs 0.5)
		   (begin
		     (safe-make-region 1000 2000 cfd)
		     (scale-selection-by .5)
		     (undo 1 cfd)))
	       (if (rs 0.5)
		   (begin
		     (scale-selection-to .5)
		     (reverse-selection)
		     (undo 2)
		     (src-selection '(0 .5 1 1))
		     (undo)))
	       (revert-sound cfd)
	       (if (not (null? (cdr open-files))) (revert-sound (cadr open-files)))))
	  
	    (if (> (frames) 1) 
		(begin
		  (make-region 0 (frames))
		  (convolve-selection-with "fyow.snd" .5)
		  (play-and-wait)))
	    (convolve-with "fyow.snd" .25)
	    (insert-sound "oboe.snd")
	    (reset-hook! graph-hook)
	    (reset-hook! transform-hook)
	    (map revert-sound open-files)

	    (let ((ind (choose-fd)))
	      (select-sound ind)
	      (for-each
	       (lambda (func func1)
		 (pad-channel 0 100 ind 0)
		 (func 0)
		 (pad-channel 0 100 ind 0)
		 (func1 0)
		 (revert-sound ind)
		 (if (> (chans ind) 1)
		     (begin
		       (pad-channel 0 100 ind 1)
		       (func 0)
		       (pad-channel 0 100 ind 1)
		       (func1 0)
		       (revert-sound ind)))
		 (delete-samples 0 1000 ind 0)
		 (func (* 2 (frames ind 0)))
		 (delete-samples 0 10000 ind 0)
		 (func1 (* 2 (frames ind 0)))
		 (revert-sound ind)
		 (if (> (chans ind) 1)
		     (begin
		       (delete-samples 0 1000 ind 1)
		       (func (* 2 (frames ind 1)))
		       (delete-samples 0 10000 ind 1)
		       (func1 (* 2 (frames ind 1)))
		       (revert-sound ind))))
	       (list (lambda (beg) (insert-sound "2a.snd" beg))
		     (lambda (beg) (reverse-sound))
		     (lambda (beg) (scale-sound-by 2.0))
		     (lambda (beg) (convolve-with "2a.snd" 0.5))
		     (lambda (beg) (env-sound '(0 0 1 1 2 0)))
		     (lambda (beg) (smooth-sound)))
	       (list (lambda (beg) (insert-sound "4a.snd" beg))
		     (lambda (beg) (reverse-sound))
		     (lambda (beg) (scale-sound-to 0.5))
		     (lambda (beg) (src-sound 2.0))
		     (lambda (beg) (env-sound '(0 0 1 1)))
		     (lambda (beg) (insert-silence beg 100)))))
	  
	    (let ((ind (open-sound "z.snd")))
	      (if (not (null? (peak-env-info ind))) (snd-display ";peak-env-info of empty sound: ~A" (peak-env-info ind)))
	      (restore-controls)
	      (if (not (equal? (peak-env-info ind) '()))
		  (snd-display ";peak-env-info z.snd: ~A" (peak-env-info ind)))
	      (let ((var (catch #t (lambda () (write-peak-env-info-file ind 0 "hi")) (lambda args args))))
		(if (not (eq? (car var) 'no-such-envelope))
		    (snd-display ";write-peak-env-info-file null env: ~A" var)))
	      (let ((var (catch #t (lambda () (read-peak-env-info-file ind 0 "hi")) (lambda args args))))
		(if (and (not (eq? (car var) 'no-such-file))
			 (not (eq? (car var) 'mus-error)))
		    (snd-display ";read-peak-env-info-file null file: ~A" var)))
	      (if (not (= (frames ind) 0)) (snd-display ";frames z.snd ~A" (frames ind)))
	      (if (not (eq? (samples) #f)) (snd-display ";samples of empty file (z): ~A" (samples)))
	      (if (not (eq? (channel->vct) #f)) (snd-display ";channel->vct of empty file (z): ~A" (channel->vct)))
	      (if (fneq (maxamp ind) 0.0) (snd-display ";maxamp z.snd ~A" (maxamp ind)))
	      (if (fneq (sample 100 ind) 0.0) (snd-display ";sample 100 z.snd ~A" (sample 100 ind)))
	      (let ((var (catch #t (lambda () (samples->vct 1)) (lambda args args))))
		(if (not (eq? (car var) 'out-of-range))
		    (snd-display ";samples->vct null: ~A" var)))
	      (scale-by 2.0)
	      (if (not (= (edit-position ind 0) 0)) (snd-display ";scale z: ~A" (edit-position ind 0)))
	      (env-sound '(0 0 1 1))
	      (if (not (= (edit-position ind 0) 0)) (snd-display ";env z: ~A" (edit-position ind 0)))
	      (smooth-sound)
	      (if (not (= (edit-position ind 0) 0)) (snd-display ";smooth z: ~A" (edit-position ind 0)))
	      (reverse-sound)
	      (if (not (= (edit-position ind 0) 0)) (snd-display ";reverse z: ~A" (edit-position ind 0)))
	      (src-sound 2.0)
	      (if (not (= (edit-position ind 0) 0)) (snd-display ";src z: ~A" (edit-position ind 0)))
	      (insert-sound "z.snd")
	      (if (not (= (edit-position ind 0) 0)) (snd-display ";insert z: ~A" (edit-position ind 0)))
	      (mix "z.snd")
	      (if (not (= (edit-position ind 0) 0)) (snd-display ";mix z: ~A" (edit-position ind 0)))
	      (filter-sound (make-one-zero :a0 2.0 :a1 0.0))
	      (if (not (= (edit-position ind 0) 0)) (snd-display ";filter z: ~A" (edit-position ind 0)))
	      (if (not (= (mus-sound-duration "z.snd") 0.0)) (snd-display ";duration z.snd: ~A" (mus-sound-duration "z.snd")))
	      (catch 'mus-error
		     (lambda () (convolve-with "z.snd" 1.0))
		     (lambda args args))
	      (if (not (= (edit-position ind 0) 0)) (snd-display ";convolve z: ~A" (edit-position ind 0)))
	      (let ((tag (catch #t (lambda () (find (lambda (y) *> y .1))) (lambda args (car args)))))
		(if (not (eq? tag 'no-such-sample)) (snd-display ";find z: ~A" tag)))
	      (let ((tag (catch #t (lambda () (count-matches (lambda (y) *> y .1))) (lambda args (car args)))))
		(if (not (eq? tag 'no-such-sample)) (snd-display ";count z: ~A" tag)))
	      (let* ((reader (make-sample-reader 0))
		     (val (next-sample reader))
		     (str (format #f "~A" reader)))
		(if (fneq val 0.0) (snd-display ";sample-reader z.snd: ~A" val))
		(if (not (string? str)) (snd-display ";z.snd reader: ~A" str)))
	      (if (not (equal? (cursor-position) (list 0 0))) (snd-display ";cursor-position z: ~A" (cursor-position)))
	      (if (not (= (cursor) 0)) (snd-display ";cursor z: ~A" (cursor)))
	      (let ((pl (make-player ind 0)))
		(add-player pl)
		(start-playing 1 22050 #f))
	      (revert-sound ind)
	      (set! (transform-graph? ind 0) #t)
	      (add-hook! lisp-graph-hook display-energy)
	      (set! (x-bounds) (list 0.0 .01))
	      (set! (sample 0) 0.5)
	      (set! (x-bounds) (list 0.0 .001))
	      (close-sound ind))
	    (if (channel-amp-envs "z.snd" 0 100)
		(snd-display ";channel-amp-envs of empty file: ~A" (channel-amp-envs "z.snd" 0 100)))

	    (let ((zz (view-sound "z.snd")))
	      (select-sound zz)
	      (let ((md (mix "4.aiff")))
		(add-mark 0)
		(add-mark 1200)
		(delete-marks)
		(if (and (number? md) (>= md 0))
		    (begin
		      (set! (mix-locked md) #t)
		      (if (not (mix-locked md)) (snd-display ";set-mix-locked: ~A?" (mix-locked md))))))
	      (revert-sound zz)
	      (let ((editctr (edit-position zz)))
		(if (not (= (edit-position) 0)) (snd-display ";revert-sound edit-position: ~A" (edit-position)))
		(as-one-edit 
		 (lambda ()
		   (mix s8-snd 24000)
		   (select-all)
		   (if (selection?) 
		       (begin
			 (filter-selection '(0 0 .2 1 .5 0 1 0) 40)
			 (delete-selection)
			 (mix-region)))))
		(if (not (= (edit-position) 1)) (snd-display ";as-one-edit mix zz: ~A -> ~A" editctr (edit-position))))
	      (close-sound zz))
	    (let ((s8 (view-sound s8-snd)))
	      (select-sound s8)
	      (if (= (channels s8) 8)
		  (begin
		    (select-channel 5)
		    (if (or (not (number? (selected-channel)))
			    (not (= (selected-channel) 5))) 
			(snd-display ";select-channel: ~A?" (selected-channel)))))
	      (let ((editctr (edit-position)))
		(as-one-edit 
		 (lambda ()
		   (select-all)
		   (delete-selection)
		   (mix "4.aiff")
		   (set! (sync) 1)
		   (mix "oboe.snd" 60000)
		   (scale-by .1)
		   (set! (sync) 1)
		   (if (> (channels s8) 3)
		       (select-channel 3))
		   (insert-region 80000)))
		(if (not (= (edit-position) (1+ editctr))) (snd-display ";as-one-edit s8: ~A -> ~A" editctr (edit-position))))
	      (revert-sound s8)
	      (close-sound s8))
	  
	    (let ((cfd (choose-fd)))
	      (if (> (chans cfd) 1)
		  (let ((uval (my-random 3)))
		    (set! (channel-style cfd) uval)
		    (if (not (= uval (channel-style cfd))) (snd-display ";channel-style: ~A ~A?" uval (channel-style cfd)))))
	      (if (rs 0.5) (src-sound 2.5 1.0 cfd))
	      (if (rs 0.5) (src-sound -2.5 1.0 cfd))
	      (if (rs 0.5) (src-sound .5 1.0 cfd))
	      (if (rs 0.5) (revert-sound cfd))
	      (if (rs 0.5) (src-sound -.5 1.0 cfd))
	      (if (rs 0.5) (src-sound '(0 .5 1 1.5) 1.0 cfd))
	      (if (rs 0.5) (if (> (frames cfd) 0) (src-sound (make-env '(0 .5 1 1.5) :end (1- (frames cfd))) 1.0 cfd)))
	      (if (rs 0.5) (revert-sound cfd))
	      (if (rs 0.5) (filter-sound '(0 1 .2 0 .5 1 1 0) 20 cfd))      ; FIR direct form
	      (if (rs 0.5) (filter-sound '(0 0 .1 0 .11 1 .12 0 1 0) 2048 cfd))
	      (if (rs 0.5) (env-sound '(0 0 .5 1 1 0) 0 (frames cfd) 1.0 cfd))
	      (if (rs 0.5)
		  (begin
		   (insert-sample 1200 .1 cfd)
		   (if (fneq (sample 1200 cfd) .1) (snd-display ";insert-sample(looped): ~A?" (sample 1200 cfd)))))
	      (revert-sound cfd))

	  (let ((cfd (open-sound "obtest.snd")))
	    (select-sound cfd)
	    (let ((cfd2 (open-sound "pistol.snd")))
	      (select-sound cfd2)
	      ;; now run apply a few times
	      (set! (amp-control) .5) 
	      (set! (speed-control) 2.0) 
	      (test-panel speed-control 'speed-control)
	      (apply-controls) 
	      (play-and-wait)

	      (if (fneq (reverb-control-decay cfd) (reverb-control-decay))
		  (snd-display ";reverb-control-decay local: ~A, global: ~A" (reverb-control-decay cfd) (reverb-control-decay)))
	      (set! (reverb-control?) #t)
	      (set! (reverb-control-scale) .2) 
	      (test-panel reverb-control-scale 'reverb-control-scale)
	      (test-panel reverb-control-length 'reverb-control-length)
	      (test-panel reverb-control-lowpass 'reverb-control-lowpass)
	      (test-panel reverb-control-feedback 'reverb-control-feedback)
	      (apply-controls) 
	      (play-and-wait)
	      (set! (contrast-control?) #t)
	      (set! (contrast-control) .5) 
	      (test-panel contrast-control 'contrast-control)
	      (test-panel contrast-control-amp 'contrast-control-amp)
	      (apply-controls) 
	      (play-and-wait)
	      (set! (expand-control?) #t)
	      (set! (expand-control) 2.5) 
	      (test-panel expand-control 'expand-control)
	      (test-panel expand-control-length 'expand-control-length)
	      (test-panel expand-control-hop 'expand-control-hop)
	      (test-panel expand-control-ramp 'expand-control-ramp)
	      (apply-controls) 
	      (play-and-wait)
	      (set! (filter-control?) #t)
	      (set! (filter-control-order) 40) 
	      (test-panel filter-control-order 'filter-control-order)
	      (set! (filter-control-env) '(0 0 .1 1 .2 0 1 0)) 
	      (filter-control-env) 
	      (apply-controls) 
	      (play-and-wait)
	      (set! (amp-control) 1.5) 
	      (test-panel amp-control 'amp-control)
	      (apply-controls) 
	      (play-and-wait)
	      (swap-channels cfd 0 cfd2 0)
	      (set! (amp-control #t) .75)
	      (test-panel amp-control 'amp-control)
	      (if (> (abs (- (amp-control cfd2) .75)) .05) (snd-display ";set-amp .75 #t -> ~A?" (amp-control cfd2)))
	      (set! (contrast-control-amp #t) .75)
	      (if (fneq (contrast-control-amp cfd2) .75) (snd-display ";set-contrast-control-amp .75 #t -> ~A?" (contrast-control-amp cfd2)))
	      (set! (expand-control-length #t) .025)
	      (if (fneq (expand-control-length cfd2) .025) (snd-display ";set-expand-control-length .025 #t -> ~A?" (expand-control-length cfd2)))
	      (set! (expand-control-hop #t) .025)
	      (if (fneq (expand-control-hop cfd2) .025) (snd-display ";set-expand-control-hop .025 #t -> ~A?" (expand-control-hop cfd2)))
	      (set! (expand-control-ramp #t) .025)
	      (if (fneq (expand-control-ramp cfd2) .025) (snd-display ";set-expand-control-ramp .025 #t -> ~A?" (expand-control-ramp cfd2)))
	      (let ((clone (clone-sound-as "/tmp/cloned.snd" cfd2)))
		(if (not (= (frames cfd2) (frames clone)))
		    (snd-display ";clone frames: ~A ~A" (frames cfd2) (frames clone)))
		(if (not (equal? (edits cfd2) (edits clone)))
		    (snd-display ";clone edits: ~A ~A" (edits cfd2) (edits clone)))
		(let ((eds (apply + (edits))))
		  (call-with-current-continuation
		   (lambda (break)
		     (do ((i 0 (1+ i)))
			 ((= i eds))
		       (if (not (equal? (edit-fragment i cfd2) (edit-fragment i clone)))
			   (begin
			     (snd-display ";clone fragment[~A]: ~A ~A?" i (edit-fragment i cfd2) (edit-fragment i clone))
			     (break)))))))
		(close-sound clone))
	      (delete-file "/tmp/cloned.snd")
	      (mus-sound-forget "/tmp/cloned.snd")
	      (close-sound cfd2)
	      (close-sound cfd)))
	  (add-hook! (edit-hook) (lambda () #f))
	  (let ((editctr (edit-position)))
	    (as-one-edit (lambda () (set! (sample 200) .2) (set! (sample 300) .3)))
	    (if (not (= (edit-position) (1+ editctr))) (snd-display ";as-one-edit: ~A -> ~A" editctr (edit-position)))
	    (as-one-edit (lambda () #f))
	    (if (not (= (edit-position) (1+ editctr))) (snd-display ";as-one-edit nil: ~A -> ~A" editctr (edit-position))))
	  (delete-sample 250)
	  (add-hook! (undo-hook) (lambda () #f))
	  (undo)
	  (delete-sample 250)
	  (undo)
	  (as-one-edit (lambda () (set! (sample 20) .2) (set! (sample 30) .3)))
	  (undo 1)
	  (as-one-edit (lambda () (set! (sample 2) .2) (as-one-edit (lambda () (set! (sample 3) .3)))))
	  (undo 2)
	  (reset-hook! (undo-hook))
	  (reset-hook! (edit-hook))
	  (add-hook! snd-error-hook 
		     (lambda (msg) 
		       (if (not (string=? msg "hiho")) (snd-display ";snd-error-hook: ~A?" msg))
		       #t))
	  (snd-error "hiho")
	  (add-hook! snd-warning-hook 
		     (lambda (msg) 
		       (if (not (string=? msg "hiho")) (snd-display ";snd-warning-hook: ~A?" msg))
		       #t))
	  (snd-warning "hiho")
	  (reset-hook! snd-error-hook)
	  (reset-hook! snd-warning-hook)
	  (add-hook! name-click-hook 
		     (lambda (n) 
		       #t))
	  (redo 1)
	  (reset-hook! name-click-hook)
	  (set! (transform-graph?) #t)
	  (test-channel transform-graph? 'transform-graph?)
	  (test-channel time-graph? 'time-graph?)
	  (test-channel lisp-graph? 'lisp-graph?)
	  (test-channel frames 'frames)
	  (test-channel cursor 'cursor)
	  (test-channel cursor-size 'cursor-size)
	  (test-channel cursor-style 'cursor-style)
	  (test-channel left-sample 'left-sample)
	  (test-channel right-sample 'right-sample)
	  (test-channel squelch-update 'squelch-update)
	  (test-channel x-zoom-slider 'x-zoom-slider)
	  (test-channel y-zoom-slider 'y-zoom-slider)
	  (test-channel x-position-slider 'x-position-slider)
	  (test-channel y-position-slider 'y-position-slider)
	  (test-channel edit-position 'edit-position)
	  (test-channel maxamp 'maxamp)
	  (test-channel edit-hook 'edit-hook)
	  (test-channel after-edit-hook 'after-edit-hook)
	  (test-channel undo-hook 'undo-hook)
	  (if (<= tests 2)
	      (set! (transform-type)
		    (add-transform "histogram" "bins" 0.0 1.0 
				   (lambda (len fd)
				     (let ((v (make-vct len))
					   (steps (/ len 16))
					   (step (/ 1.0 len)))
				       (vct-fill! v 0.0)
				       (do ((i 0 (1+ i)))
					   ((= i len) v)
					 (let* ((val (abs (next-sample fd)))
						(bin (inexact->exact (* val 16.0))))
					   (if (< bin steps)
					       (do ((j 0 (1+ j)))
						   ((= j steps))
						 (vct-set! v (+ j bin) (+ step (vct-ref v (+ j bin)))))))))))))
	  (set! (x-bounds) '(.1 .2))
	  (set! (transform-type) graph-once)
	  (set! (x-bounds) '(.1 .2))
	  (add-hook! lisp-graph-hook display-energy)
	  (shell "df")
	  (reset-hook! graph-hook)
	  (add-hook! graph-hook correlate)
	  (set! (x-bounds) '(.1 .12))
	  (set! (x-bounds) '(.1 .2))
	  (remove-hook! graph-hook correlate)
	  (set! (lisp-graph?) #f)
	  (map-chan 
	   (let ((sum-of-squares 0.0)
		 (buffer (make-vector 128 0.0))
		 (position 0)
		 (current-sample 0)
		 (chan-samples (frames)))
	     (lambda (y)
	       (let ((old-y (vector-ref buffer position)))
		 (set! sum-of-squares (- (+ sum-of-squares (* y y)) (* old-y old-y)))
		 (vector-set! buffer position y)
		 (set! position (1+ position))
		 (if (= position 128) (set! position 0))
		 (set! current-sample (1+ current-sample))
		 (if (> sum-of-squares .01)
		     (if (= current-sample chan-samples)
			 ;; at end return trailing samples as long as it looks like sound
			 (let ((temp-buffer (make-vector 128 0.0)))
			   (do ((i 0 (1+ i)))
			       ((= i 128) temp-buffer)
			     (let ((final-y (vector-ref buffer position)))
			       (vector-set! temp-buffer i (if (> sum-of-squares .01) final-y 0.0))
			       (set! sum-of-squares (- sum-of-squares (* final-y final-y)))
			       (set! position (1+ position))
			       (if (= position 128) (set! position 0)))))
			 old-y)
		     #f)))))

	  (let ((maxval1 (+ (maxamp) .01)))
	    (if (not (every-sample? (lambda (y) (< y maxval1)))) 
		(let ((res (scan-chan (lambda (y) (>= y maxval1)))))
		  (snd-display ";~A, every-sample: ~A ~A [~A: ~A]?" (short-file-name) maxval1 res (cursor) (sample (cursor)))
		  (do ((i 0 (1+ i)))
		      ((= i (edit-position)))
		    (snd-display ";~D: ~A ~A" i (maxamp #f 0 i) (edit-fragment i))))))
		    
	  (map-chan (echo .5 .75) 0 60000)
	  (reset-hook! transform-hook)
	  (reset-hook! lisp-graph-hook)
	  (add-hook! lisp-graph-hook 
		     (lambda (snd chn) 
		       (if (> (random 1.0) .5) 
			   (graph '#(0 1 2)) 
			   (graph (list '#(0 1 2) '#(3 2 0))))))

	  (for-each
	   (lambda (snd)
	     (if (rs .5)
		 (set! (sync snd) (inexact->exact (my-random 3)))))
	   (sounds))
	  (add-hook! graph-hook superimpose-ffts)
	  (do ((i 0 (1+ i)))
	      ((= i 10))
	    (for-each
	     (lambda (snd)
	       (if (and (> (frames snd) 0) (rs .5))
		   (let* ((dur (/ (frames snd) (srate snd)))
			  (start (max 0.0 (min (- dur .1) (my-random dur)))))
		     (if (> dur 0.0) 
			 (set! (x-bounds snd 0) (list start (min (+ start .1) dur)))))))
	     (sounds)))
	  (reset-hook! graph-hook)
	  (reset-hook! lisp-graph-hook)

	  ;; new variable settings 
	  (letrec ((reset-vars
		    (lambda (lst)
		      (if (not (null? lst))
			  (let* ((name (list-ref (car lst) 0))
				 (index (if (list-ref (car lst) 2) (choose-fd) #f))
				 (getfnc (list-ref (car lst) 1))
				 (setfnc (lambda (val snd) (set! (getfnc snd) val)))
				 (setfnc-1 (lambda (val) (set! (getfnc) val)))
				 (minval (list-ref (car lst) 3))
				 (maxval (list-ref (car lst) 4)))
			    
			    (if index
				(if (equal? minval #f)
				    (setfnc (rs 0.5) index)
				  (if (exact? minval)
				      (if (equal? name #t)
					  (setfnc (inexact->exact
						   (floor (expt 2 (min 31 (ceiling (/ (log (+ minval (floor (* (- maxval minval) (my-random 1.0))))) 
											(log 2)))))))
						  index)
					(setfnc (+ minval (inexact->exact (floor (* (- maxval minval) (my-random 1.0))))) index))
				    (setfnc (+ minval (* (- maxval minval) (my-random 1.0))) index)))
			      (if (equal? minval #f)
				  (setfnc-1 (rs 0.5))
				(if (exact? minval)
				    (if (equal? name #t)
					(setfnc-1 (inexact->exact
						 (floor (expt 2 (min 31 (ceiling (/ (log (+ minval (floor (* (- maxval minval) (my-random 1.0))))) 
										    (log 2))))))))
				      (setfnc-1 (+ minval (inexact->exact (floor (* (- maxval minval) (my-random 1.0)))))))
				  (setfnc-1 (+ minval (* (- maxval minval) (my-random 1.0)))))))
			    (reset-vars (cdr lst)))))))
		  (reset-vars 
		   (list
		    (list 'amp-control amp-control #t .1 1.0)
		    ;(list 'ask-before-overwrite ask-before-overwrite #f #f #t)
		    (list 'auto-resize auto-resize #f #f #t)
		    (list 'auto-update auto-update #f #f #t)
		    (list 'channel-style channel-style #f 0 2)
		    (list 'color-cutoff color-cutoff #f 0.0 0.2)
		    (list 'color-inverted color-inverted #f #f #t)
		    (list 'color-scale color-scale #f 0.1 1000.0)
		    (list 'contrast-control contrast-control #t 0.0 1.0)
		    (list 'contrast-control-amp contrast-control-amp #t 0.0 1.0)
		    (list 'contrast-control? contrast-control? #t #f #t)
		    (list 'auto-update-interval auto-update-interval #f 60.0 120.0)
		    (list 'cursor-follows-play cursor-follows-play #f #f #t)
		    (list 'data-clipped data-clipped #f #f #t)
		    (list 'default-output-chans default-output-chans #f 1 8)
		    ;(list 'default-output-format default-output-format #f 1 12)
		    (list 'default-output-srate default-output-srate #f 22050 44100)
		    ;(list 'default-output-type default-output-type #f 0 2)
		    (list 'dot-size dot-size #f 1 10)
		    (list 'enved-base enved-base #f 0.01  100.0)
		    (list 'enved-clip? enved-clip? #f #f #t)
		    (list 'enved-in-dB enved-in-dB #f #f #t)
		    (list 'enved-exp? enved-exp? #f #f #t)
		    (list 'enved-power enved-power #f 3.0 3.5)
		    (list 'enved-target enved-target #f 0 2)
		    (list 'enved-wave? enved-wave? #f #f #t)
		    (list 'expand-control expand-control #t 0.1 5.0)
		    (list 'expand-control-hop expand-control-hop #t 0.01 0.5)
		    (list 'expand-control-length expand-control-length #t 0.1 0.25)
		    (list 'expand-control-ramp expand-control-ramp #t 0.1 0.4)
		    (list 'expand-control? expand-control? #t #f #t)
		    (list 'fft-window-beta fft-window-beta #f 0.0  1.0)
		    (list 'fft-log-frequency fft-log-frequency #f #f #t)
		    (list 'fft-log-magnitude fft-log-magnitude #f #f #t)
		    (list 'transform-size transform-size #f 16 (if (<= tests 10) 4096 128))
		    (list 'transform-graph-type transform-graph-type #f 0 2)
		    (list 'fft-window fft-window #f 0 dolph-chebyshev-window)
		    (list 'transform-graph? transform-graph? #t #f #t)
		    (list 'filter-control-in-dB filter-control-in-dB #t #f #t)
		    (list 'filter-control-order filter-control-order #t 2 (if (<= tests 10) 400 40))
		    (list 'filter-control? filter-control? #t #f #t)
		    (list 'graph-cursor graph-cursor #f 0 35)
		    (list 'time-graph-style time-graph-style #f 0 4)
		    (list 'lisp-graph-style lisp-graph-style #f 0 4)
		    (list 'transform-graph-style transform-graph-style #f 0 4)
		    (list 'graphs-horizontal graphs-horizontal #f #f #t)
		    (list 'max-transform-peaks max-transform-peaks #f 1 100)
		    (list 'max-regions max-regions #f 1 32)
		    (list 'min-dB min-dB #f -120.0 -30.0)
		    (list 'selection-creates-region selection-creates-region #f #f #t)
		    (list 'transform-normalization transform-normalization #f dont-normalize normalize-globally)
		    (list 'previous-files-sort previous-files-sort #f 0 5)
		    (list 'print-length print-length #f 2 32)
		    (list 'region-graph-style region-graph-style #f graph-lines graph-lollipops)
		    (list 'reverb-control-decay reverb-control-decay #f 0.0 2.0)
		    (list 'reverb-control-feedback reverb-control-feedback #t 1.00 1.1)
		    (list 'reverb-control-length reverb-control-length #t 1.0 2.0)
		    (list 'reverb-control-lowpass reverb-control-lowpass #t 0.2 0.99)
		    (list 'reverb-control-scale reverb-control-scale #t 0.0 0.2)
		    (list 'reverb-control? reverb-control? #t #f #t)
		    (list 'show-axes show-axes #f 0 2)
		    (list 'show-transform-peaks show-transform-peaks #f #f #t)
		    (list 'show-indices show-indices #f #f #t)
		    (list 'show-backtrace show-backtrace #f #f #t)
		    (list 'show-marks show-marks #f #f #t)
		    (list 'show-mix-waveforms show-mix-waveforms #t #f #t)
		    (list 'show-selection-transform show-selection-transform #f #f #t)
		    (list 'show-y-zero show-y-zero #f #f #t)
		    (list 'sinc-width sinc-width #f 4 100)
		    (list 'spectro-cutoff spectro-cutoff #f 0.5 0.8)
		    (list 'spectro-hop spectro-hop #f 2 20)
		    (list 'spectro-start spectro-start #f 0.0 0.1)
		    (list 'spectro-x-angle spectro-x-angle #f 0.0 90.0)
		    (list 'spectro-x-scale spectro-x-scale #f 0.1 2.0)
		    (list 'spectro-y-angle spectro-y-angle #f 0.0 90.0)
		    (list 'spectro-y-scale spectro-y-scale #f 0.1 2.0)
		    (list 'spectro-z-angle spectro-z-angle #f 0.0 359.0)
		    (list 'spectro-z-scale spectro-z-scale #f 0.1 0.2)
		    (list 'speed-control speed-control #t 0.1 5.0)
		    (list 'speed-control-style speed-control-style #f 0 2)
		    (list 'speed-control-tones speed-control-tones #f 2 100)
		    (list 'sync sync #t 0 5)
		    (list 'transform-type transform-type #f fourier-transform (if (<= tests 10) 6 3))
		    (list 'verbose-cursor verbose-cursor #f #f #t)
		    (list 'wavelet-type wavelet-type #f 0 10)
		    (list 'time-graph? time-graph? #t #f #t)
		    (list 'x-axis-style x-axis-style #f 0 2)
		    (list 'beats-per-minute beats-per-minute #f 60.0 120.0)
		    (list 'zero-pad zero-pad #f 0 2)
		    (list 'zoom-focus-style zoom-focus-style #f 0 3))))
	  
	  (save-options "hiho.scm")
	  (if (not (= (transform-type) fourier-transform))
	      (begin
		(set! (transform-graph? #t #t) #f)
		(set! (transform-size) (min (transform-size) 128))))

	  )))
      (if open-files (map close-sound open-files))
      (set! open-files '())
      (set! (mus-rand-seed) 1234)
      (if (not (= (mus-rand-seed) 1234)) (snd-display ";mus-rand-seed: ~A (1234)!" (mus-rand-seed)))
      (let ((val (mus-random 1.0))
	    (val1 (mus-random 1.0)))
	(if (or (fneq val -0.7828) 
		(fneq val1 -0.8804))
	    (snd-display ";mus-random: ~A ~A?" val val1))
	(if (= (mus-rand-seed) 1234) (snd-display ";mus-rand-seed: ~A!" (mus-rand-seed))))
      (set! (mus-rand-seed) 1234)
      (let ((val (mus-random 1.0))
	    (val1 (mus-random 1.0)))
	(if (or (fneq val -0.7828) 
		(fneq val1 -0.8804))
	    (snd-display ";mus-random repeated: ~A ~A?" val val1)))
      )
    )

(set! (data-clipped) #f)

(define prefix-it
  (lambda (n id)
    (let* ((ns (number->string n))
	   (digits (string-length ns)))
      (key (char->integer #\u) 0 id)
      (do ((i 0 (1+ i)))
	  ((= i digits))
	(key (char->integer (string-ref ns i)) 0 id)))))

(define prefix-uit
  (lambda (n id)
    (let* ((ns (number->string n))
	   (digits (string-length ns)))
      (do ((i 0 (1+ i)))
	  ((= i digits))
	(key (char->integer (string-ref ns i)) 0 id)))))

(define funcs (list time-graph-type wavo-hop wavo-trace max-transform-peaks show-transform-peaks zero-pad transform-graph-type fft-window 
		    verbose-cursor fft-log-frequency fft-log-magnitude min-dB wavelet-type transform-size fft-window-beta transform-type 
		    transform-normalization show-mix-waveforms graph-style dot-size show-axes show-y-zero show-marks
		    spectro-x-angle spectro-x-scale spectro-y-angle spectro-y-scale spectro-z-angle spectro-z-scale
		    spectro-hop spectro-cutoff spectro-start graphs-horizontal x-axis-style beats-per-minute
		    ))
(define func-names (list 'time-graph-type 'wavo-hop 'wavo-trace 'max-transform-peaks 'show-transform-peaks 'zero-pad 'transform-graph-type 'fft-window
			 'verbose-cursor 'fft-log-frequency 'fft-log-magnitude 'min-dB 'wavelet-type 'transform-size 'fft-window-beta 'transform-type
			 'transform-normalization 'show-mix-waveforms 'graph-style 'dot-size 'show-axes 'show-y-zero 'show-marks
			 'spectro-x-angle 'spectro-x-scale 'spectro-y-angle 'spectro-y-scale 'spectro-z-angle 'spectro-z-scale
			 'spectro-hop 'spectro-cutoff 'spectro-start 'graphs-horizontal 'x-axis-style 'beats-per-minute
			 ))
(define new-values (list graph-as-wavogram 12 512 3 #t 32 graph-as-sonogram cauchy-window
			 #t #t #t -120.0 3 32 .5 autocorrelation
			 0 #t graph-lollipops 8 show-no-axes #t #f
			 32.0 .5 32.0 .5 32.0 .5
			 14 .3 .1 #f x-axis-in-samples 120.0
			 ))

(define (test-history-channel func name new-value snd1 snd2 snd3)
  (define test-equal
    (lambda (nv new-value)
      (if (and (number? nv)
	       (inexact? nv))
	  (not (fneq nv new-value))
	  (equal? nv new-value))))
  (define chan-equal? 
    (lambda (vals new-value)
      (cond ((null? vals) #t)
	    ((list-p vals) (and (chan-equal? (car vals) new-value)
			       (chan-equal? (cdr vals) new-value)))
	    (else (test-equal vals new-value)))))
  (if (and (not (equal? (flatten (func #t #t)) (apply map func (all-chans))))
	   (not (equal? (flatten (func #t #t)) (apply map func (all-chans-reversed)))))
      (snd-display ";test-history-channel ~A[0]: ~A ~A?" name (flatten (func #t #t)) (apply map func (all-chans))))
  (let ((old-value (func))
	(old-chan-value (func snd1 0)))
    (set! (func snd1 0) new-value)
    (let ((nv (func snd1 0)))
      (if (not (test-equal nv new-value))
	  (snd-display ";test-history-channel set-~A[1]: ~A ~A?" name new-value (func snd1 0))))
    (set! (func snd3 2) new-value)
    (let ((nv (func snd3 2)))
      (if (not (test-equal nv new-value))
	  (snd-display ";test-history-channel set-~A[2]: ~A ~A?" name new-value (func snd3 2))))
    (if (not (test-equal old-value new-value))
	(let ((nv (func snd3 1)))
	  (if (test-equal nv new-value)
	      (snd-display ";test-history-channel set-~A[3]: ~A ~A?" name new-value (func snd3 1)))))
    (set! (func snd2 #t) new-value)
    (let ((nv (func snd2 1)))
      (if (not (test-equal nv new-value))
	  (snd-display ";test-history-channel set-~A[4]: ~A ~A?" name new-value (func snd2 1))))
    (set! (func) new-value)
    (if (not (chan-equal? (flatten (func #t #t)) new-value))
	(snd-display ";test-history-channel ~A[5]: ~A ~A?" name (flatten (func #t #t)) (apply map func (all-chans))))
    (set! (func) old-value)
    ))
      
(load "rubber.scm")
(set! (transform-type) fourier-transform)

;;; ---------------- test 15: chan-local vars ----------------

(define (smoother y0 y1 num)
   (let ((v (make-vct (1+ num))) 
	 (angle (if (> y1 y0) pi 0.0)) 
	 (off (* .5 (+ y0 y1))) 
	 (incr (/ pi num))
	 (scale (* 0.5 (abs (- y1 y0)))))
     (do ((i 0 (1+ i)))
         ((= i num) v)
       (vct-set! v i (+ off (* scale (cos (+ angle (* i incr)))))))))

(if (and with-gui
	 (or full-test (= snd-test 15) (and keep-going (<= snd-test 15))))
    (let ((obi (open-sound (car (match-sound-files (lambda (file) 
						     (and (not (= (mus-sound-header-type file) mus-raw))
							  (= (mus-sound-chans file) 1))))))))

      (define (test-selection ind beg len scaler)
	(set! (selection-member? ind 0) #t)
	(set! (selection-position) beg)
	(set! (selection-frames) len)
	(scale-selection-by scaler)
	(let* ((diff 0.0)
	       (pos (edit-position ind 0))
	       (old-reader (make-sample-reader beg ind 0 1 (1- pos)))
	       (new-reader (make-sample-reader beg ind 0 1 pos)))
	  (do ((i 0 (1+ i)))
	      ((= i len))
	    (let* ((ov (* scaler (old-reader)))
		   (nv (next-sample new-reader))
		   (val (abs (- ov nv))))
	      (set! diff (+ diff val))))
	  (if (> diff 0.0) (snd-display ";diff (~D ~D): ~A" beg len diff))
	  (set! diff 0.0)
	  (do ((i 0 (1+ i)))
	      ((= i 100))
	    (let* ((ov (next-sample old-reader))
		   (nv (next-sample new-reader))
		   (val (abs (- ov nv))))
	      (set! diff (+ diff val))))
	  (if (> diff 0.0) (snd-display ";zdiff (~D ~D): ~A" beg len diff))
	  (free-sample-reader old-reader)
	  (free-sample-reader new-reader)))

      (define (test-selection-to ind beg len maxval)
	(set! (selection-member? ind 0) #t)
	(set! (selection-position) beg)
	(set! (selection-frames) len)
	(scale-selection-to maxval)
	(let* ((newmax 0.0)
	       (new-reader (make-sample-reader beg ind 0)))
	  (do ((i 0 (1+ i)))
	      ((= i len))
	    (let* ((nv (abs (next-sample new-reader))))
	      (if (> nv newmax) (set! newmax nv))))
	  (if (fneq newmax maxval)
	      (snd-display ";scale-selection-to (~D ~D) ~A: ~A?" beg len maxval newmax))
	  (free-sample-reader new-reader)))

      (define play-with-amps
	(lambda (sound . amps)
	  (let ((chans (chans sound)))
	    (do ((chan 0 (1+ chan)))
		((= chan chans))
	      (let ((player (make-player sound chan)))
		(if (not (player? player)) (snd-display ";player? ~A -> #f?" player))
		(if (not (equal? (player-home player) (list sound chan)))
		    (snd-display ";player-home ~A ~A?" (player-home player) (list sound chan)))
		(set! (amp-control player) (list-ref amps chan))
		(set! (speed-control player) .5)
		(set! (expand-control? player) #t)
		(set! (expand-control player) 2.0)
		(set! (contrast-control? player) #t)
		(set! (contrast-control player) 1.0)
		(set! (reverb-control? player) #t)
		(set! (reverb-control-scale player) .02)
		(add-player player)))
	    (start-playing chans (srate sound) #f))))

      (if (procedure? test-hook) (test-hook 15))
      (if (not (equal? (all-chans) (list (list obi) (list 0)))) (snd-display ";all-chans: ~A?" (all-chans)))
      (let ((s2i (open-sound (car (match-sound-files (lambda (file) (= (mus-sound-chans file) 2)))))))
	(if (and (not (equal? (all-chans) (list (list obi s2i s2i) (list 0 0 1))))
		 (not (equal? (all-chans) (list (list s2i s2i obi) (list 0 1 0)))))
		 (snd-display ";all-chans(2): ~A?" (all-chans)))
	(if (not (string=? (finfo "oboe.snd") "oboe.snd: chans: 1, srate: 22050, Sun, big endian short (16 bits), len: 2.305"))
	    (snd-display ";finfo: ~A?" (finfo "oboe.snd")))
	(close-sound s2i)
	(close-sound obi)
	(if (not (equal? (all-chans) '(() ()))) (snd-display ";all-chans(0): ~A?" (all-chans)))
	(set! obi (open-sound "oboe.snd"))
	(set! (cursor obi) 1000)
	(if (not (= (locate-zero .001) 1050)) (snd-display ";locate-zero: ~A?" (locate-zero .001)))
	(add-hook! graph-hook auto-dot)
	(add-hook! graph-hook superimpose-ffts)
	(set! (transform-graph? obi 0) #t)
	(update-graphs)
	(set! s2i (open-sound (car (match-sound-files (lambda (file) (= (mus-sound-chans file) 2))))))
	(if (not (= (chans s2i) 2)) (snd-display ";match 2 got ~A with ~A chans" (short-file-name s2i) (chans s2i)))
	(update-graphs)
	(remove-hook! graph-hook auto-dot)
	(remove-hook! graph-hook superimpose-ffts)
	(set! (transform-graph? obi 0) #f)
	(select-sound obi)
	(let ((m1 (add-mark 100 obi 0)))
	  (first-mark-in-window-at-left)
	  (if (> (abs (- (left-sample obi 0) 100)) 1) (snd-display ";mark-in-window: ~A ~A?" (left-sample obi 0) (mark-sample m1)))
	  (delete-mark m1))
	(close-sound s2i)
	(safe-make-region 1000 2000 obi)
	(delete-selection-and-smooth)
	(if (not (equal? (edit-fragment 0 obi 0) '(#f "init" 0 50828))) 
	    (snd-display ";edit-fragment(0): ~A?" (edit-fragment 0 obi 0)))
	(if (not (equal? (edit-fragment 1 obi 0) '("delete-samples" "delete" 1000 1001))) 
	    (snd-display ";edit-fragment(1): ~A?" (edit-fragment 0 obi 0)))
	(if (not (equal? (edit-fragment 2 obi 0) '("smooth-sound" "set" 984 32))) 
	    (snd-display ";edit-fragment(2): ~A?" (edit-fragment 0 obi 0)))

	(let ((samp100 (sample 1100 obi 0)))
	  (safe-make-region 1000 2000 obi)
	  (eval-over-selection (lambda (val) (* 2.0 val)))
	  (let ((nsamp100 (sample 1100 obi 0)))
	    (if (fneq (* 2.0 samp100) nsamp100) 
		(snd-display ";eval-over-selection: ~A ~A [~A ~A]?" 
				     samp100 nsamp100 (selection-position) (selection-frames)))
	    (let ((m2 (add-mark 1000 obi 0))
		  (m3 (add-mark 2000 obi 0)))
	      (if (not (equal? (marks obi 0) (list m2 m3))) (snd-display ";add-mark: ~A ~A?" (marks obi 0) (list m2 m3)))
	      (eval-between-marks (lambda (val) (* 2.0 val)))
	      (let ((msamp100 (sample 1100 obi 0)))
		(if (fneq (* 2.0 nsamp100) msamp100) (snd-display ";eval-between-marks: ~A ~A?" nsamp100 msamp100))
		(revert-sound obi)))))
	(let ((maxa (maxamp obi)))
	  (normalized-mix "pistol.snd" 1000 0 obi 0)
	  (let ((nmaxa (maxamp obi)))
	    (if (fneq maxa nmaxa) (snd-display ";normalized-mix: ~A ~A?" maxa nmaxa)))
	  (revert-sound obi))
	(set! s2i (open-sound (car (match-sound-files (lambda (file) 
							  (and (= (mus-sound-chans file) 2)
							       (> (mus-sound-frames file) 1000)))))))
	(if (not (= (chans s2i) 2)) (snd-display ";match 2+1000 got ~A with ~A chans" (short-file-name s2i) (chans s2i)))
	(let ((o1 (sample 1000 obi 0))
	      (s1 (sample 1000 s2i 0))
	      (s2 (sample 1000 s2i 1)))
	  (do-all-chans (lambda (val) (if val (* 2.0 val) #f)) "double all samples")
	  (let ((o11 (sample 1000 obi 0))
		(s11 (sample 1000 s2i 0))
		(s21 (sample 1000 s2i 1)))
	    (if (or (fneq (* 2.0 o1) o11)
		    (fneq (* 2.0 s1) s11)
		    (fneq (* 2.0 s2) s21))
		(snd-display ";do-all-chans: ~A?" (list o1 s1 s2 o11 s11 s21)))))
	(update-graphs)
	(let ((m1 (maxamp obi 0))
	      (m2 (maxamp s2i 0))
	      (m3 (maxamp s2i 1))
	      (mc (apply map maxamp (list (list obi s2i s2i) (list 0 0 1)))))
	  (if (or (fneq m1 (car mc))
		  (fneq m2 (cadr mc))
		  (fneq m3 (caddr mc)))
	      (snd-display ";map maxamp all-chans: ~A ~A ~A ~A?" m1 m2 m3 mc))
	  (set! (sync obi) 1)
	  (set! (sync s2i) 1)
	  (do-chans (lambda (val) (if val (* 2.0 val) #f)) "*2")
	  (let ((mc1 (apply map maxamp (list (list obi s2i s2i) (list 0 0 1)))))
	    (if (or (fneq (* 2.0 m1) (car mc1))
		    (fneq (* 2.0 m2) (cadr mc1))
		    (fneq (* 2.0 m3) (caddr mc1)))
		(snd-display ";do-chans: ~A ~A?" mc mc1))
	    (set! (sync obi) 0)
	    (set! (sync s2i) 0)
	    (select-sound s2i)
	    (do-sound-chans (lambda (val) (if val (* 0.5 val) #f)) "/2")
	    (let ((mc2 (apply map maxamp (list (list obi s2i s2i) (list 0 0 1)))))
	      (if (or (fneq (* 2.0 m1) (car mc2))
		      (fneq m2 (cadr mc2))
		      (fneq m3 (caddr mc2)))
		  (snd-display ";do-sound-chans: ~A ~A ~A?" mc mc1 mc2)))
	    (if (every-sample? (lambda (val) (> val .5))) (snd-display ";every-sample(0)?")) 
	    (if (not (every-sample? (lambda (val) (< val 5.0)))) (snd-display ";every-sample(1)?")) 
	    (select-sound obi)
	    (let ((bins (sort-samples 32)))
	      (if (not (= (vector-ref bins 1) 4504)) (snd-display ";sort-samples: ~A?" bins)))
	    ))
	(revert-sound s2i)
	(revert-sound obi)
	(set! (sync obi) 3)
	(set! (sync s2i) 3)
	(let* ((half-way (inexact->exact (* 0.5 (frames obi))))
	       (o1 (sample half-way obi 0))
	       (s1 (sample half-way s2i 0))
	       (s2 (sample half-way s2i 1)))
	  (place-sound obi s2i '(0 .5 1 .5))
	  (let ((s21 (sample half-way s2i 0))
		(s22 (sample half-way s2i 1)))
	    (revert-sound s2i)
	    (place-sound obi s2i 45.0)
	    (let ((s31 (sample half-way s2i 0))
		  (s32 (sample half-way s2i 1)))
	      (if (or (fneq (+ s1 (* 0.5 o1)) s21)
			(fneq (+ s2 (* 0.5 o1)) s22)
			(fneq s21 s31)
			(fneq s22 s32))
		    (snd-display ";place: ~A " (list o1 s1 s2 s21 s22 s31 s32))))))
	(revert-sound s2i)
	(revert-sound obi)
	(set! (sync obi) 0)
	(set! (sync s2i) 0)
	(if (or (fneq ((compand) 0.0) 0.0)
		(fneq ((compand) 1.0) 1.0)
		(fneq ((compand) .1) .2)
		(fneq ((compand) .99) .997)
		(fneq ((compand) .95) .984))
	    (snd-display ";compand: ~A?" (list ((compand) 0.0) ((compand) 1.0) ((compand) .1) ((compand) .99) ((compand) .95))))
	
	(close-sound obi)
	(revert-sound s2i)
	(let ((s1 (sample 1000 s2i 0))
	      (s2 (sample 1000 s2i 1)))
	  (set! (sync s2i) 4)
	  (select-all)
	  (if (not (= (selection-chans) 2)) 
	      (begin
		(snd-display ";selection-chans(2): ~A?" (selection-chans))
		(for-each
		 (lambda (snd)
		   (do ((i 0 (1+ i)))
		       ((= i (chans snd)))
		     (if (selection-member? snd i)
			 (snd-display ";  ~A[~A] at ~A" (short-file-name snd) i (selection-position snd i)))))
		 (sounds))))
	  (if (not (= (selection-srate) (srate s2i))) (snd-display ";selection-srate: ~A ~A?" (selection-srate) (srate s2i)))
	  (swap-selection-channels)
	  (if (or (fneq s1 (sample 1000 s2i 1))
		  (fneq s2 (sample 1000 s2i 0)))
	      (snd-display ";swap-selection-channels: ~A?" (list s1 s2 (sample 1000 s2i 0) (sample 1000 s2i 1)))))
	(revert-sound s2i)
	(close-sound s2i)

	(set! obi (open-sound "oboe.snd"))
	(select-all)
	(for-each forget-region (regions))
	(if (not (equal? (regions) '())) (snd-display ";no regions? ~A" (regions)))
	(let ((id (make-region 100 200 obi 0)))
	  (if (not (equal? (regions) (list id))) (snd-display ";make-region regions: ~A?" (regions))))

	;; need tests for mixes 
	;; and all the tempsound -to- soundtemp calls

	(revert-sound obi)
	(let ((oldlen (frames obi)))
	  (env-sound-interp '(0 0 1 1 2 0) 2.0 obi 0)
	  (let ((newlen (frames obi)))
	    (if (> (abs (- (* 2 oldlen) newlen)) 3)
		(snd-display ";env-sound-interp: ~A ~A?" oldlen newlen))))

	(close-sound obi)
	)

      (let* ((id (open-sound "oboe.snd"))
	     (fr (frames id 0))
	     (mx (maxamp id 0)))
	(set! (frames id 0) 25000)
	(if (not (= (frames id 0) 25000)) (snd-display ";set-frames 25000: ~A?" (frames id 0)))
	(if (not (= (edit-position id 0) 1)) (snd-display ";set-frames 25000 edit: ~A?" (edit-position id 0)))
	(set! (frames id 0) 75000)
	(if (not (= (frames id 0) 75000)) (snd-display ";set-frames 75000: ~A?" (frames id 0)))
	(if (not (= (edit-position id 0) 2)) (snd-display ";set-frames 75000 edit: ~A?" (edit-position id 0)))
	(if (fneq (sample 30000 id 0) 0.0) (snd-display ";set-frames 75000 zeros: ~A?" (sample 30000 id 0)))
	(set! (frames id 0) 0)
	(if (not (= (frames id 0) 0)) (snd-display ";set-frames 0: ~A?" (frames id 0)))
	(set! (frames id 0) 100)
	(if (not (= (frames id 0) 100)) (snd-display ";set-frames 100: ~A?" (frames id 0)))
	(revert-sound)
	(if (fneq (sample 30000 id 0) -0.0844) (snd-display ";revert from set-frames: ~A?" (sample 30000 id 0)))
	(if (not (= fr (frames id 0))) (snd-display ";revert set-frames: ~A != ~A?" (frames id 0) fr))
	(set! (maxamp id 0) .5)
	(if (fneq (maxamp id 0) .5) (snd-display ";set-maxamp: ~A?" (maxamp id 0)))
	(if (not (= (edit-position id 0) 1)) (snd-display ";set-maxamp edit: ~A?" (edit-position id 0)))
	(set! (maxamp id 0) .1)
	(if (fneq (maxamp id 0) .1) (snd-display ";set-maxamp .1: ~A?" (maxamp id 0)))
	(if (not (= (edit-position id 0) 2)) (snd-display ";set-maxamp .1 edit: ~A?" (edit-position id 0)))
	(revert-sound)
	(if (fneq (maxamp id 0) mx) (snd-display ";maxamp after set: ~A ~A?" (maxamp id 0) mx))
	(set! (x-position-slider id 0) .1)
	(if (fneq (x-position-slider id 0) .1) (snd-display ";set x-position-slider .1: ~A?" (x-position-slider id 0)))
	;(if (> (abs (- (left-sample id 0) 5083)) 3) (snd-display ";set x-position-slider sample 5083: ~A?" (left-sample id 0)))
	(set! (x-zoom-slider id 0) .5)
	(if (fneq (x-zoom-slider id 0) .5) (snd-display ";set x-zoom-slider: ~A?" (x-zoom-slider id 0)))
	(if (> (abs (- fr (* 2 (- (right-sample id 0) (left-sample id 0))))) 10)
	    (snd-display ";set x-zoom-slider: ~A ~A -> ~A?" 
			       (left-sample id 0) (right-sample id 0)
			       (abs (- fr (* 2 (right-sample id 0) (left-sample id 0))))))
	(set! (y-position-slider id 0) .1)
	(if (fneq (y-position-slider id 0) .1) (snd-display ";set y-position-slider .1: ~A?" (y-position-slider id 0)))
	(set! (y-zoom-slider id 0) .5)
	(if (fneq (y-zoom-slider id 0) .5) (snd-display ";set y-zoom-slider: ~A?" (y-zoom-slider id 0)))
	(let ((vals (channel-amp-envs "oboe.snd" 0 10)))
	  (if (not (equal? vals
			   (list (vct -4.8828125e-4 -0.104156494140625 -0.125213623046875 -0.1356201171875 -0.138916015625 
				   -0.14093017578125 -0.14093017578125 -0.131439208984375 -0.11248779296875 -0.080047607421875)
				 (vct 0.0 0.10955810546875 0.130706787109375 0.14068603515625 0.141204833984375 0.147247314453125 
                                   0.145904541015625 0.140289306640625 0.126861572265625 0.08172607421875))))
	      (snd-display ";channel-amp-envs: ~A?" vals)))

	(let ((len (length (channel-properties id 0))))
	  (if (channel-property 'hiho id 0)
	      (snd-display ";channel-property 'hiho: ~A?" (channel-property 'hiho id 0)))
	  (set! (channel-property 'hiho id 0) 123)
	  (if (not (= (channel-property 'hiho id 0) 123))
	      (snd-display ";channel-property 'hiho (123): ~A?" (channel-property 'hiho id 0)))
	  (if (channel-property 'hi id 0)
	      (snd-display ";channel-property 'hi: ~A?" (channel-property 'hi id 0)))
	  (set! (channel-property 'hi id 0) 3.1415)
	  (if (fneq (channel-property 'hi id 0) 3.1415)
	      (snd-display ";channel-property 'hi (3.1415): ~A?" (channel-property 'hi id 0)))
	  (if (not (= (channel-property 'hiho id 0) 123))
	      (snd-display ";channel-property '2nd hiho (123): ~A?" (channel-property 'hiho id 0)))
	  (if (not (= (length (channel-properties id 0)) (+ len 2)))
	      (snd-display ";channel-properties: ~A?" (channel-properties id 0))))

	(let ((len (length (sound-properties id))))
	  (if (sound-property 'hiho id)
	      (snd-display ";sound-property 'hiho: ~A?" (sound-property 'hiho id)))
	  (set! (sound-property 'hiho id) 123)
	  (if (not (= (sound-property 'hiho id) 123))
	      (snd-display ";sound-property 'hiho (123): ~A?" (sound-property 'hiho id)))
	  (if (sound-property 'hi id)
	      (snd-display ";sound-property 'hi: ~A?" (sound-property 'hi id)))
	  (set! (sound-property 'hi id) 3.1415)
	  (if (fneq (sound-property 'hi id) 3.1415)
	      (snd-display ";sound-property 'hi (3.1415): ~A?" (sound-property 'hi id)))
	  (if (not (= (sound-property 'hiho id) 123))
	      (snd-display ";sound-property '2nd hiho (123): ~A?" (sound-property 'hiho id)))
	  (if (not (= (length (sound-properties id)) (+ len 2)))
	      (snd-display ";sound-properties: ~A?" (sound-properties id))))

	(close-sound id))

      (let ((id (open-sound "oboe.snd")))
	(prefix-it 1000 id)
	(key (char->integer #\x) 4 id)
	(key (char->integer #\b) 4 id)
	(let ((left (left-sample id)))
	  (if (and (not (= left 1000)) (not (= left 1001))) (snd-display ";u1000: ~A" left)))
	(prefix-it 0 id)
	(key (char->integer #\x) 4 id)
	(key (char->integer #\b) 4 id)
	(let ((left (left-sample id)))
	  (if (not (= left 0)) (snd-display ";u0: ~A" left)))
	(set! (cursor id) 1234)
	(prefix-it 0 id)
	(key (char->integer #\f) 4 id)
	(let ((cr (cursor id)))
	  (if (not (= cr 1234)) (snd-display ";0f: ~A" cr)))
	(prefix-it 100 id)
	(key (char->integer #\f) 4 id)
	(let ((cr (cursor id)))
	  (if (not (= cr 1334)) (snd-display ";100f: ~A" cr)))
	(prefix-it -100 id)
	(key (char->integer #\f) 4 id)
	(let ((cr (cursor id)))
	  (if (not (= cr 1234)) (snd-display ";-100f: ~A" cr)))
	(prefix-it 1 id)
	(key (char->integer #\f) 4 id)
	(let ((cr (cursor id)))
	  (if (not (= cr 1235)) (snd-display ";1f: ~A" cr)))
	(key (char->integer #\+) 4 id)
	(key (char->integer #\f) 4 id)
	(let ((cr (cursor id)))
	  (if (not (= cr 1236)) (snd-display ";+f: ~A" cr)))
	(key (char->integer #\-) 4 id)
	(key (char->integer #\f) 4 id)
	(let ((cr (cursor id)))
	  (if (not (= cr 1235)) (snd-display ";-f: ~A" cr)))
	(prefix-it 1000 id)
	(key (char->integer #\x) 4 id)
	(key (char->integer #\p) 4 id)
	(let ((left (left-sample id))
	      (right (right-sample id)))
	  (if (> (abs (- right left 1000)) 2) (snd-display ";1000xp: ~A:~A" left right)))
	(prefix-it 1 id)
	(key (char->integer #\.) 0 id)
	(key (char->integer #\2) 0 id)
	(key (char->integer #\x) 4 id)
	(key (char->integer #\p) 4 id)
	(let ((left (left-sample id))
	      (right (right-sample id)))
	  (if (> (abs (- right left (* 22050 1.2))) 2) (snd-display ";1.2xp: ~A:~A" left right)))
	
	(prefix-uit 1000 id)
	(key (char->integer #\x) 4 id)
	(key (char->integer #\b) 4 id)
	(let ((left (left-sample id)))
	  (if (and (not (= left 1000)) (not (= left 1001))) (snd-display ";uu1000: ~A" left)))
	(prefix-uit 0 id)
	(key (char->integer #\x) 4 id)
	(key (char->integer #\b) 4 id)
	(let ((left (left-sample id)))
	  (if (not (= left 0)) (snd-display ";uu0: ~A" left)))
	(set! (cursor id) 1234)
	(prefix-uit 0 id)
	(key (char->integer #\f) 4 id)
	(let ((cr (cursor id)))
	  (if (not (= cr 1234)) (snd-display ";u0f: ~A" cr)))
	(prefix-uit 100 id)
	(key (char->integer #\f) 4 id)
	(let ((cr (cursor id)))
	  (if (not (= cr 1334)) (snd-display ";u100f: ~A" cr)))
	(prefix-uit -100 id)
	(key (char->integer #\f) 4 id)
	(let ((cr (cursor id)))
	  (if (not (= cr 1234)) (snd-display ";u-100f: ~A" cr)))
	(prefix-uit 1 id)
	(key (char->integer #\f) 4 id)
	(let ((cr (cursor id)))
	  (if (not (= cr 1235)) (snd-display ";u1f: ~A" cr)))
	(key (char->integer #\+) 4 id)
	(key (char->integer #\f) 4 id)
	(let ((cr (cursor id)))
	  (if (not (= cr 1236)) (snd-display ";u+f: ~A" cr)))
	(key (char->integer #\-) 4 id)
	(key (char->integer #\f) 4 id)
	(let ((cr (cursor id)))
	  (if (not (= cr 1235)) (snd-display ";u-f: ~A" cr)))
	(prefix-uit 1000 id)
	(key (char->integer #\x) 4 id)
	(key (char->integer #\p) 4 id)
	(let ((left (left-sample id))
	      (right (right-sample id)))
	  (if (> (abs (- right left 1000)) 2) (snd-display ";u1000xp: ~A:~A" left right)))
	(prefix-uit 1 id)
	(key (char->integer #\.) 0 id)
	(key (char->integer #\2) 0 id)
	(key (char->integer #\x) 4 id)
	(key (char->integer #\p) 4 id)
	(let ((left (left-sample id))
	      (right (right-sample id)))
	  (if (> (abs (- right left (* 22050 1.2))) 2) (snd-display ";u1.2xp: ~A:~A" left right)))
	(close-sound id))
      (let ((id (open-sound (car (match-sound-files (lambda (file) 
							(and (>= (mus-sound-chans file) 2)
							     (> (mus-sound-frames file) 1000))))))))
	(set! (sync id) 1)
	(select-sound id)
	(make-region 200 500 id)
	(select-channel 1)
	(key (char->integer #\x) 4 id)
	(key (char->integer #\v) 0 id)
	(let ((x0 (x-bounds id 0))
	      (x1 (x-bounds id 1)))
	  (if (or (fneq (car x0) (car x1)) 
		  (fneq (cadr x0) (cadr x1)))
	      (snd-display ";C-X v: ~A ~A?" x0 x1)))
	(key (char->integer #\u) 4 id)
	(key (char->integer #\1) 0 id)
	(key (char->integer #\x) 4 id)
	(key (char->integer #\q) 0 id)
	(close-sound id))

      (let ((snd1 (open-sound "oboe.snd"))
	    (snd2 (or (open-sound "2.snd") (open-sound "4.aiff")))
	    (snd3 (open-sound "4.aiff")))
	(define tests-1
	  (lambda (f fn nv)
	    (if (not (null? f))
		(begin
		  (test-history-channel (car f) (car fn) (car nv) snd1 snd2 snd3)
		  (tests-1 (cdr f) (cdr fn) (cdr nv))))))
	(tests-1 funcs func-names new-values)
	(close-sound snd1)
	(close-sound snd2)

	(set! (time-graph-style snd3 #t) graph-filled)
	(do ((i 0 (1+ i))) ((= i 4)) 
	  (if (not (= (time-graph-style snd3 i) graph-filled)) 
	      (snd-display ";set time-graph-style ~A ~A: ~A" snd3 i (time-graph-style snd3 i))))
	(set! (time-graph-style snd3 2) graph-lines)
	(do ((i 0 (1+ i))) ((= i 4)) 
	  (if (and (not (= i 2))
		   (not (= (time-graph-style snd3 i) graph-filled)))
	      (snd-display ";set (2) time-graph-style ~A ~A: ~A" snd3 i (time-graph-style snd3 i))))
	(if (not (= (time-graph-style snd3 2) graph-lines)) 
	    (snd-display ";set time-graph-style (2): ~A" (time-graph-style snd3 2)))
	(set! (time-graph-style snd3 #t) graph-dots)
	(do ((i 0 (1+ i))) ((= i 4)) 
	  (if (not (= (time-graph-style snd3 i) graph-dots)) 
	      (snd-display ";set time-graph-style (all): ~A" (time-graph-style snd3 i))))
	(set! (graph-style) graph-dots-and-lines)
	(do ((i 0 (1+ i))) ((= i 4)) 
	  (if (not (= (time-graph-style snd3 i) graph-dots-and-lines)) 
	      (snd-display ";set time-graph-style (dal): ~A" (time-graph-style snd3 i))))

	(set! (lisp-graph-style snd3 #t) graph-filled)
	(do ((i 0 (1+ i))) ((= i 4)) 
	  (if (not (= (lisp-graph-style snd3 i) graph-filled)) 
	      (snd-display ";set lisp-graph-style ~A ~A: ~A" snd3 i (lisp-graph-style snd3 i))))
	(set! (lisp-graph-style snd3 2) graph-lines)
	(do ((i 0 (1+ i))) ((= i 4)) 
	  (if (and (not (= i 2))
		   (not (= (lisp-graph-style snd3 i) graph-filled)))
	      (snd-display ";set (2) lisp-graph-style ~A ~A: ~A" snd3 i (lisp-graph-style snd3 i))))
	(if (not (= (lisp-graph-style snd3 2) graph-lines)) 
	    (snd-display ";set lisp-graph-style (2): ~A" (lisp-graph-style snd3 2)))
	(set! (lisp-graph-style snd3 #t) graph-lines)
	(do ((i 0 (1+ i))) ((= i 4)) 
	  (if (not (= (time-graph-style snd3 i) graph-dots-and-lines)) 
	      (snd-display ";set lisp -> time-graph-style (dal): ~A" (time-graph-style snd3 i))))

	(set! (transform-graph-style snd3 #t) graph-filled)
	(do ((i 0 (1+ i))) ((= i 4)) 
	  (if (not (= (transform-graph-style snd3 i) graph-filled)) 
	      (snd-display ";set transform-graph-style ~A ~A: ~A" snd3 i (transform-graph-style snd3 i))))
	(set! (transform-graph-style snd3 2) graph-lines)
	(do ((i 0 (1+ i))) ((= i 4)) 
	  (if (and (not (= i 2))
		   (not (= (transform-graph-style snd3 i) graph-filled)))
	      (snd-display ";set (2) transform-graph-style ~A ~A: ~A" snd3 i (transform-graph-style snd3 i))))
	(if (not (= (transform-graph-style snd3 2) graph-lines)) 
	    (snd-display ";set transform-graph-style (2): ~A" (transform-graph-style snd3 2)))
	(do ((i 0 (1+ i))) ((= i 4)) 
	  (if (not (= (time-graph-style snd3 i) graph-dots-and-lines)) 
	      (snd-display ";set fft and lisp -> time-graph-style (dal): ~A" (time-graph-style snd3 i))))
	(do ((i 0 (1+ i))) ((= i 4)) 
	  (if (not (= (lisp-graph-style snd3 i) graph-lines)) 
	      (snd-display ";set fft and lisp -> lisp-graph-style (dal): ~A" (lisp-graph-style snd3 i))))

	(close-sound snd3))

      (let ((snd2 (open-sound "2.snd")))
	(if (sound? snd2)
	    (play-with-amps snd2 0.2 0.1))
	(close-sound snd2))
      (let ((ind (open-sound "pistol.snd")))
	(if (selection-member? ind 0) 
	    (snd-display ";initial selection-member? ~A ~A?" 
			       (selection-member? ind 0)
			       (selection?)))
	(set! (selection-member? ind 0) #t)
	(if (or (not (selection-member? ind 0))
		(not (selection-member? ind)))
	    (snd-display ";selection-member? ~A ~A ~A?" 
			       (selection-member? ind 0)
			       (selection-member? ind)
			       (selection?)))
	(if (not (= (selection-frames) 1))
	    (snd-display ";initial selection-frames: ~A?" (selection-frames)))
	(set! (selection-frames) 1200)
	(if (not (= (selection-frames) 1200))
	    (snd-display ";selection-frames: 1200 ~A?" (selection-frames)))
	(delete-selection)
	(if (selection?) (snd-display ";selection active after cut?"))
	(undo)
	(if (not (selection?)) (snd-display ";selection inactive after undo?"))
	(if (or (not (selection-member? ind 0))
		(not (selection-member? ind)))
	    (snd-display ";selection-member? after undo ~A ~A ~A?" 
			       (selection-member? ind 0)
			       (selection-member? ind)
			       (selection?)))
	(if (or (not (= (selection-frames) 1200))
		(not (= (selection-position) 0)))
	    (snd-display ";selection after undo: '(0 1200) '(~A ~A)?" 
			       (selection-position) 
			       (selection-frames)))
	(set! (selection-position) 1000)
	(if (or (not (= (selection-frames) 200))
		(not (= (selection-position) 1000)))
	    (snd-display ";selection after reposition: '(1000 200) '(~A ~A)?" 
			       (selection-position) 
			       (selection-frames)))
	(reverse-selection)
	(if (or (not (= (selection-frames) 200))
		(not (= (selection-position) 1000)))
	    (snd-display ";selection after reverse: '(1000 200) '(~A ~A)?" 
			       (selection-position) 
			       (selection-frames)))

	(let ((old-frames (frames ind)))
	  (src-selection .5)
	  (if (or (> (abs (- (frames ind) (+ 200 old-frames))) 5)
		  (> (abs (- (selection-frames) 400)) 5))
	      (snd-display ";selection after src .5: '(1000 400) '(~A ~A)?" 
				 (selection-position) 
				 (selection-frames)))
	  (undo)
	  (redo)
	  (if (or (> (abs (- (frames ind) (+ 200 old-frames))) 5)
		  (> (abs (- (selection-frames) 400)) 5))
	      (snd-display ";selection after src .5 with undo/redo: '(1000 400) '(~A ~A)?" 
				 (selection-position) 
				 (selection-frames)))
	  (undo 3))
	(close-sound ind))

      (if (< (print-length) 12) (set! (print-length) 12))
      (let ((ind (new-sound "hi.snd")))
	(do ((i 0 (1+ i)))
	    ((= i 10)) 
	  (set! (sample i ind) (* i .1)))
	(select-all ind)
	(set! (sample 10 ind) 1.0)
	(smooth-selection)
	(if (not (vequal (vct-subseq (samples->vct 0 11 ind) 0 9) (vct-subseq (smoother 0.0 1.0 10) 0 9)))
	    (snd-display ";smooth-selection: ~A ~A?" (samples->vct 0 11 ind) (smoother 0.0 1.0 10)))
	(revert-sound)
	(do ((i 0 (1+ i)))
	    ((= i 10)) 
	  (set! (sample i ind) (- 1.0 (* i .1))))
	(select-all ind)
	(set! (sample 10 ind) 0.0)
	(smooth-selection)
	(if (not (vequal (vct-subseq (samples->vct 0 11 ind) 0 9) (vct-subseq (smoother 1.0 0.0 10) 0 9)))
	    (snd-display ";smooth-selection back: ~A ~A?" (samples->vct 0 11 ind) (smoother 1.0 0.0 10)))
	(close-sound ind))

      (let ((ind (new-sound "hi.snd")))
	(do ((i 0 (1+ i)))
	    ((= i 10)) 
	  (set! (sample i ind) (* i .1)))
	(set! (sample 10 ind) 1.0)
	(smooth-sound 0 10 ind)
	(if (not (vequal (vct-subseq (samples->vct 0 11 ind) 0 9) (vct-subseq (smoother 0.0 1.0 10) 0 9)))
	    (snd-display ";smooth-sound: ~A ~A?" (samples->vct 0 11 ind) (smoother 0.0 1.0 10)))
	(revert-sound)
	(do ((i 0 (1+ i)))
	    ((= i 10)) 
	  (set! (sample i ind) (- 1.0 (* i .1))))
	(set! (sample 10 ind) 0.0)
	(smooth-sound 0 10 ind)
	(if (not (vequal (vct-subseq (samples->vct 0 11 ind) 0 9) (vct-subseq (smoother 1.0 0.0 10) 0 9)))
	    (snd-display ";smooth-sound back: ~A ~A?" (samples->vct 0 11 ind) (smoother 1.0 0.0 10)))
	(close-sound ind))
      (if (file-exists? "hi.snd") (delete-file "hi.snd"))

      (let* ((ind (open-sound "oboe.snd"))
	     (len (frames ind)))
	(set! (cursor ind) 1200)
	(key (char->integer #\u) 4 ind)
	(key (char->integer #\1) 0 ind)
	(key (char->integer #\0) 0 ind)
	(key (char->integer #\0) 0 ind)
	(key (char->integer #\o) 4 ind)
	(if (not (= (frames ind) (+ 100 len)))
	    (snd-display ";C-o len: ~A? " (frames)))
	(if with-gui
	    (let ((reader (make-sample-reader 1200 ind)))
	      (do ((i 0 (1+ i)))
		  ((= i 100))
		(let ((val (next-sample reader)))
		  (if (fneq val 0.0) (snd-display ";C-o[~D]: ~A?" i val))))
	      (if (not (= (sample-reader-position reader) 1300)) (snd-display ";reader pos: ~A" (sample-reader-position reader)))
	      (free-sample-reader reader)))
	(revert-sound ind)
	(set! (cursor ind) 1200)
	(key (char->integer #\u) 4 ind)
	(key (char->integer #\1) 0 ind)
	(key (char->integer #\0) 0 ind)
	(key (char->integer #\0) 0 ind)
	(key (char->integer #\z) 4 ind)
	(if (not (= (frames ind) len))
	    (snd-display ";C-z len: ~A? " (frames)))
	(if with-gui
	    (let ((reader (make-sample-reader 1200 ind)))
	      (do ((i 0 (1+ i)))
		  ((= i 100))
		(let ((val (next-sample reader)))
		  (if (fneq val 0.0) (snd-display ";C-z[~D]: ~A?" i val))))
	      (free-sample-reader reader)))
	(set! (cursor ind) 0)
	(key (char->integer #\u) 4 ind)
	(key (char->integer #\3) 0 ind)
	(key (char->integer #\.) 0 ind)
	(key (char->integer #\0) 0 ind)
	(key (char->integer #\z) 4 ind)
	(if (fneq (maxamp ind 0) 0.0) (snd-display ";C-z full: ~A" (maxamp)))
	(revert-sound ind)
	(set! (cursor ind) 1200)
	(key (char->integer #\u) 4 ind)
	(key (char->integer #\1) 0 ind)
	(key (char->integer #\.) 0 ind)
	(key (char->integer #\0) 0 ind)
	(key (char->integer #\o) 4 ind)
	(if (not (= (frames ind) (+ (srate ind) len)))
	    (snd-display ";C-o 1.0 len: ~A? " (frames)))
	(if with-gui
	    (let ((reader (make-sample-reader 1200 ind)))
	      (do ((i 0 (1+ i)))
		  ((= i (srate ind)))
		(let ((val (next-sample reader)))
		  (if (fneq val 0.0) (snd-display ";C-o 1.0[~D]: ~A?" i val))))
	      (free-sample-reader reader)))
	(revert-sound ind)
	(set! (cursor ind) 1200)
	(key (char->integer #\u) 4 ind)
	(key (char->integer #\1) 0 ind)
	(key (char->integer #\.) 0 ind)
	(key (char->integer #\0) 0 ind)
	(key (char->integer #\z) 4 ind)
	(if (not (= (frames ind) len))
	    (snd-display ";C-z 1.0 len: ~A? " (frames)))
	(if with-gui
	    (let ((reader (make-sample-reader 1200 ind)))
	      (do ((i 0 (1+ i)))
		  ((= i (srate ind)))
		(let ((val (next-sample reader)))
		  (if (fneq val 0.0) (snd-display ";C-z 1.0[~D]: ~A?" i val))))
	      (free-sample-reader reader)))
	(close-sound ind))

      (let ((ind (open-sound "2.snd")))
	(set! (sync ind) 1)
	(key (char->integer #\>) 4)
	(key (char->integer #\space) 4)
	(key (char->integer #\<) 4)
	(if (or (not (selection-member? ind 0))
		(not (selection-member? ind 1))
		(not (= (selection-position ind 0) 0))
		(not (= (selection-position ind 1) 0))
		(not (= (selection-frames ind 0) (frames ind 0)))
		(not (= (selection-frames ind 1) (frames ind 1))))
	    (snd-display ";sync selection via <-: ~A ~A ~A ~A ~A ~A"
			 (selection-member? ind 0) (selection-member? ind 1)
			 (selection-position ind 0) (selection-position ind 1)
			 (selection-frames ind 0) (selection-frames ind 1)))
	(key (char->integer #\space) 4)
	(key (char->integer #\>) 4)
	(if (or (not (selection-member? ind 0))
		(not (selection-member? ind 1))
		(not (= (selection-position ind 0) 0))
		(not (= (selection-position ind 1) 0))
		(not (= (selection-frames ind 0) (frames ind 0)))
		(not (= (selection-frames ind 1) (frames ind 1))))
	    (snd-display ";sync selection via ->: ~A ~A ~A ~A ~A ~A"
			 (selection-member? ind 0) (selection-member? ind 1)
			 (selection-position ind 0) (selection-position ind 1)
			 (selection-frames ind 0) (selection-frames ind 1)))
	(set! (cursor ind 1) 0)
	(set! (cursor ind 0) 1000)
	(if (not (= (cursor ind 1) 1000)) (snd-display ";syncd cursors: ~A ~A" (cursor ind 0) (cursor ind 1)))
	(key (char->integer #\f) 4)
	(if (not (= (cursor ind 1) 1001)) (snd-display ";syncd cursors C-f: ~A ~A" (cursor ind 0) (cursor ind 1)))
	(close-sound ind))

      (let ((ind (open-sound "oboe.snd")))
	(test-selection ind 1200 100 2.0)
	(test-selection ind 600 1200 2.0)
	(test-selection ind 0 100 2.0)
	(test-selection ind 22500 (- 50827 22500) 0.5)
	(test-selection ind 0 50828 0.5)

	(test-selection-to ind 1200 100 1.0)
	(test-selection-to ind 600 1200 0.1)
	(test-selection-to ind 0 100 0.5)
	(test-selection-to ind 22500 (- 50827 22500) 2.0)
	(test-selection-to ind 0 50828 0.5)

	(revert-sound ind)
	(make-selection 1200 1200)
	(if (not (selection?)) (snd-display ";no selection from 1 samp region?"))
	(if (not (= (selection-frames) 1)) (snd-display ";1 samp selection: ~A samps?" (selection-frames)))
	(scale-selection-to 1.0)
	(if (fneq (sample 1200 ind 0) 1.0) (snd-display ";scale 1 samp selection: ~A?" (sample 1200 ind 0)))

	(revert-sound ind)
	(let ((id (make-region 500 1000)))
	  (src-selection .5)
	  (if (> (abs (- (region-frames id) 500)) 1) (snd-display ";region-frames after src-selection: ~A?" (region-frames id)))
	  (let ((reg-mix-id (mix-region 1500 id ind 0)))
	    (if (not (= (mix-frames reg-mix-id) (region-frames id)))
		(snd-display ";mix-region: ~A != ~A?" (region-frames id) (mix-frames reg-mix-id)))
	    (if (not (equal? (mix-home reg-mix-id) (list ind 0)))
		(snd-display ";mix-region mix-home ~A (~A 0)?" (mix-home reg-mix-id) ind))
	    (let ((sel-mix-id (mix-selection 2500 ind 0)))
	      (if (not (= (selection-frames) (mix-frames sel-mix-id)))
		  (snd-display ";mix-selection: ~A != ~A?" (selection-frames) (mix-frames sel-mix-id)))
	      (if (> (abs (- (* 2 (mix-frames reg-mix-id)) (mix-frames sel-mix-id))) 3)
		  (snd-display ";mix selection and region: ~A ~A (~A ~A)?" 
				       (mix-frames reg-mix-id) (mix-frames sel-mix-id) (region-frames id) (selection-frames)))
	      (if (not (equal? (mix-home sel-mix-id) (list ind 0)))
		  (snd-display ";mix-selection mix-home: ~A (~A 0)?" (mix-home sel-mix-id) ind))
	      (insert-selection 3000 ind 0)
	      (insert-selection 3000 ind)
	      (if (and (provided? 'xm) (provided? 'snd-debug))
		  (begin
		    (set! (cursor ind 0) 3000)
		    (XtCallCallbacks (menu-option "Insert Selection C-x i") XmNactivateCallback (snd-global-state))))
	      (mix-selection 3000 ind)
	      (if (and (provided? 'xm) (provided? 'snd-debug))
		  (begin
		    (XtCallCallbacks (menu-option "Mix Selection    C-x q") XmNactivateCallback (snd-global-state))
		    (XtCallCallbacks (menu-option "Play Selection   C-x p") XmNactivateCallback (snd-global-state))))
	      (delete-selection)
	      (revert-sound ind))))
	(close-sound ind))

      (if (file-exists? "storm.snd")
	  (let ((ind (open-sound "storm.snd")))
	    (set! (sinc-width) 10)
	    (time (src-sound 1.3))
	    (time (env-sound '(0 0 1 1 2 0)))
	    (time (filter-sound '(0 1 .2 0 .5 1 1 0) 20))      ; FIR direct form
	    (time (filter-sound '(0 0 .1 0 .11 1 .12 0 1 0) 2048)) ; convolution
	    (revert-sound ind)
	    (let ((reg (make-region 0 123000 ind 0))) ; force copy branch to execute
	      (region-samples->vct 0 10 reg 0 (make-vct 10)))
	    (ramp-channel 0.0 1.0)
	    (ramp-channel 0.0 1.0)
	    (ramp-channel 0.0 1.0)
	    (ramp-channel 0.0 1.0) ; force env 
	    (close-sound ind)))
      (if (file-exists? "1a.snd")
	  (let ((ind1 (open-sound "1a.snd")))
	    (time (rubber-sound 1.25))
	    (close-sound ind1)))

      (let* ((oboe (open-sound "oboe.snd"))
	     (a4 (open-sound "4.aiff"))
	     (sr (srate oboe))
	     (fr (frames oboe 0))
	     (typ (header-type oboe))
	     (frm (data-format oboe))
	     (loc (data-location oboe))
	     (com (comment oboe)))
	(save-sound-as "test.aif" oboe mus-aifc)
	(let ((oboe-aif (open-sound "test.aif")))
	  (if (not (= (header-type oboe-aif) mus-aifc)) (snd-display ";oboe-aif header: ~A?" (mus-header-type-name (header-type oboe-aif))))
	  (set! (srate oboe-aif) (* sr 2.0))
	  (if (fneq (* sr 2.0) (srate oboe-aif)) (snd-display ";set! srate: ~A ~A" (* sr 2.0) (srate oboe-aif)))
	  (set! (header-type oboe-aif) mus-next)
	  (if (not (= (header-type oboe-aif) mus-next)) (snd-display ";set! header: ~A?" (mus-header-type-name (header-type oboe-aif))))
	  (set! (data-location oboe-aif) 28)
	  (if (not (= (data-location oboe-aif) 28)) (snd-display ";set! data-location: ~A?" (data-location oboe-aif)))
	  (set! (data-format oboe-aif) mus-mulaw)
	  (if (not (= (data-format oboe-aif) mus-mulaw)) (snd-display ";set! format: ~A?" (mus-data-format-name (data-format oboe-aif))))
	  (save-sound-as "test.aif" oboe-aif mus-aifc mus-bshort 22050 0)
	  (close-sound oboe-aif)
	  (delete-file "test.aif")
	  (set! (selected-sound) a4)
	  (if (not (= (selected-sound) a4)) (snd-display ";set! selected-sound: ~A ~A?" (selected-sound) a4))
	  (set! (selected-channel) 2)
	  (if (not (= (selected-channel a4) 2)) (snd-display ";set! selected-channel: ~A?" (selected-channel a4)))
	  (set! (selected-channel a4) 3)
	  (if (not (= (selected-channel a4) 3)) (snd-display ";set! selected-channel a4: ~A?" (selected-channel a4)))
	  (close-sound a4)
	  (close-sound oboe)))

      (load "env.scm")
      (if (fneq (envelope-interp .1 '(0 0 1 1)) 0.1) 
	  (snd-display ";envelope-interp .1 -> ~A?" (envelope-interp .1 '(0 0 1 1))))
      (if (fneq (envelope-interp .1 '(0 0 1 1) 32.0) 0.01336172) 
	  (snd-display ";envelope-interp .013 -> ~A?" (envelope-interp .1 '(0 0 1 1) 32.0)))
      (if (fneq (envelope-interp .1 '(0 0 1 1) .012) 0.36177473) 
	  (snd-display ";envelope-interp .361 -> ~A?" (envelope-interp .1 '(0 0 1 1) .012))) 
      (if (fneq (envelope-interp .3 '(0 0 .5 1 1 0)) .6)
	  (snd-display ";envelope-interp .3 '(0 0 .5 1 1 0)) -> ~A" (envelope-interp .3 '(0 0 .5 1 1 0))))
      (if (not (feql (window-envelope 1.0 3.0 '(0.0 0.0 5.0 1.0)) (list 1.0 0.2 3.0 0.6))) 
	  (snd-display ";window-envelope: ~A?" (window-envelope 1.0 3.0 '(0.0 0.0 5.0 1.0))))
      (if (not (feql (multiply-envelopes '(0 0 1 1) '(0 0 1 1 2 0)) (list 0 0 0.5 0.5 1 0))) 
	  (snd-display ";multiply-envelopes: ~A?" (multiply-envelopes '(0 0 1 1) '(0 0 1 1 2 0))))
      (if (fneq (max-envelope '(0 0 1 1 2 3 4 0)) 3.0)
	  (snd-display ";max-envelope: ~A?" (max-envelope '(0 0 1 1 2 3 4 0))))
      (if (fneq (integrate-envelope '(0 0 1 1)) 0.5) 
	  (snd-display ";integrate-envelope: ~A?" (integrate-envelope '(0 0 1 1))))
      (if (fneq (integrate-envelope '(0 1 1 1)) 1.0) 
	  (snd-display ";integrate-envelope: ~A?" (integrate-envelope '(0 1 1 1))))
      (if (fneq (integrate-envelope '(0 0 1 1 2 .5)) 1.25) 
	  (snd-display ";integrate-envelope: ~A?" (integrate-envelope '(0 0 1 1 2 .5))))
      (if (not (feql (stretch-envelope '(0 0 1 1) .1 .2) (list 0 0 0.2 0.1 1.0 1))) 
	  (snd-display ";stretch-envelope att: ~A?" (stretch-envelope '(0 0 1 1) .1 .2)))
      (if (not (feql (stretch-envelope '(0 0 1 1 2 0) .1 .2 1.5 1.6) (list 0 0 0.2 0.1 1.1 1 1.6 0.5 2.0 0))) 
	  (snd-display ";stretch-envelope dec: ~A?" (stretch-envelope '(0 0 1 1 2 0) .1 .2 1.5 1.6)))
      (if (not (feql (add-envelopes '(0 0 1 1 2 0) '(0 0 1 1)) '(0 0 0.5 1.5 1 1)))
	  (snd-display ";add-envelopes: ~A" (add-envelopes '(0 0 1 1 2 0) '(0 0 1 1))))
      (if (not (feql (scale-envelope '(0 0 1 1) 2) '(0 0 1 2)))
	  (snd-display ";scale-envelope: ~A" (scale-envelope '(0 0 1 1) 2)))
      (if (not (feql (scale-envelope '(0 0 1 1) 2 1) '(0 1 1 3)))
	  (snd-display ";scale-envelope off: ~A" (scale-envelope '(0 0 1 1) 2 1)))
      (if (not (feql (reverse-envelope '(0 0 1 1)) '(0 1 1 0)))
	  (snd-display ";reverse-envelope ramp: ~A" (reverse-envelope '(0 0 1 1))))
      (if (not (feql (reverse-envelope '(0 0 .5 1 2 0)) '(0 0 1.5 1 2 0)))
	  (snd-display ";reverse-envelope ramp 2: ~A" (reverse-envelope '(0 0 .5 1 2 0))))
      (if (not (feql (reverse-envelope '(0 0 .5 1 2 1)) '(0 1 1.5 1 2 0)))
	  (snd-display ";reverse-envelope ramp 2: ~A" (reverse-envelope '(0 0 .5 1 2 1))))
      (if (not (feql (concatenate-envelopes '(0 0 1 1) '(0 1 1 0)) '(0.0 0 1.0 1 2.0 0)))
	  (snd-display ";concatenate-envelopes: ~A" (concatenate-envelopes '(0 0 1 1) '(0 1 1 0))))
      (if (not (feql (concatenate-envelopes '(0 0 1 1.5) '(0 1 1 0)) '(0.0 0 1.0 1.5 1.01 1 2.01 0)))
	  (snd-display ";concatenate-envelopes: ~A" (concatenate-envelopes '(0 0 1 1.5) '(0 1 1 0))))
      (if (not (feql (repeat-envelope '(0 0 1 100) 2) '(0 0 1 100 1.01 0 2.01 100)))
	  (snd-display ";repeat-envelope 0: ~A" (repeat-envelope '(0 0 1 100) 2)))
      (if (not (feql (repeat-envelope '(0 0 1.5 1 2 0) 2) '(0 0 1.5 1 2.0 0 3.5 1 4.0 0)))
	  (snd-display ";repeat-envelope 1: ~A" (repeat-envelope '(0 0 1.5 1 2 0) 2)))
      (if (not (feql (repeat-envelope '(0 0 1.5 1 2 0) 2 #f #t) '(0.0 0 0.75 1 1.0 0 1.75 1 2.0 0)))
	  (snd-display ";repeat-envelope 2: ~A" (repeat-envelope '(0 0 1.5 1 2 0) 2 #f #t)))
      (if (not (feql (repeat-envelope '(0 0 1.5 1 2 0) 2 #t) '(0 0 1.5 1 2.0 0 2.5 1 4.0 0)))
	  (snd-display ";repeat-envelope 3: ~A" (repeat-envelope '(0 0 1.5 1 2 0) 2 #t)))
      (if (not (feql (repeat-envelope '(0 0 1.5 1 2 0) 3) '(0 0 1.5 1 2.0 0 3.5 1 4.0 0 5.5 1 6.0 0)))
	  (snd-display ";repeat-envelope 4: ~A" (repeat-envelope '(0 0 1.5 1 2 0) 3)))

      (let ((ind (new-sound "fmv.snd"))
	    (v (make-vct 20)))
	(vct-fill! v 1.0)
	(vct->channel v)
	(set! (selection-position ind 0) 5)
	(set! (selection-frames) 5)
	(scale-selection-to 0.5)
	(insert-selection 15 ind)
	(if (not (= (frames ind) 25)) (snd-display ";insert-selection 5: ~A" (frames ind)))
	(if (not (vequal (channel->vct 0 25) (vct 1.0 1.0 1.0 1.0 1.0 0.5 0.5 0.5 0.5 0.5 
						  1.0 1.0 1.0 1.0 1.0 0.5 0.5 0.5 0.5 0.5
						  1.0 1.0 1.0 1.0 1.0)))
	    (snd-display ";insert-selection: ~A" (channel->vct 0 25)))
	(mix-selection 1)
	(if (not (vequal (channel->vct 0 10) (vct 1.0 1.5 1.5 1.5 1.5 1.0 0.5 0.5 0.5 0.5)))
	    (snd-display ";mix-selection: ~A" (channel->vct 0 10)))
	(close-sound ind))

      (let ((ind (new-sound "fmv.snd"))
	    (v (make-vct 2000))
	    (ctr 0)
	    (old-size (transform-size))
	    (old-type (transform-type))
	    (old-norm (transform-normalization))
	    (old-grf (transform-graph-type)))
	(vct-map! v (lambda ()
		      (let ((val (sin (* ctr 2.0 (/ 3.14159 10.0)))))
			(set! ctr (1+ ctr))
			val)))
	(vct->channel v 0 2000 ind 0)
	(set! (transform-size) 256)
	(set! (transform-type) fourier-transform)
	(set! (transform-normalization) normalize-by-channel)
	(set! (transform-graph-type) graph-once)
	(set! (zero-pad) 0)
	(set! (transform-graph?) #t)
	(make-selection 0 200)
	(set! (show-selection-transform) #t)
	(set! (selection-frames) 300)
	(update-transform-graph)
	(let* ((data (transform-samples->vct))
	       (peak (vct-peak data)))
	  (if (< peak 40.0) (snd-display ";transform selection peak: ~A" peak))
	  (if (> (* .5 peak) (vct-ref data 51)) (snd-display ";transform selection at 51: ~A, peak: ~A" (vct-ref data 51) peak)))
	(for-each
	 (lambda (pad)
	   (set! (zero-pad) pad)
	   (update-transform-graph)
	   (let* ((data (transform-samples->vct))
		  (peak (vct-peak data))
		  (pval (vct-ref data (inexact->exact (* .1 (vct-length data))))))
	     (if (> (* .5 peak) pval)
		 (snd-display ";transform selection padded ~D: ~A, peak: ~A" pad pval peak))))
	 (list 1 0 3 31))
	(set! (transform-size) old-size)
	(set! (transform-type) old-type)
	(set! (transform-normalization) old-norm)
	(set! (transform-graph-type) old-grf)
	(close-sound ind))
      ))

;;; ---------------- test 16: regularized funcs ----------------

(define (undo-env s c)
  (let ((len (car (edits s c))))
    (if (> len 0)
	(call-with-current-continuation
	 (lambda (break)
	   (do ((i 1 (1+ i)))
	       ((> i len) #f)
	     (let ((ed (edit-fragment i s c)))
	       (if (and ed
			(or (string=? (cadr ed) "env")
			    (string=? (cadr ed) "ptree")))
		   (begin
		     (set! (edit-position s c) (1- i))
		     (break #t)))))))
	#f)))

(define (opt-test choice)
  (let* ((snds (sounds))
	 (cursnd (list-ref snds (random (length snds))))
	 (curchn (random (chans cursnd)))
	 (chan-list (all-chans))
	 (cur-maxamps (apply map maxamp chan-list))
	 (cur-edits (apply map edit-position chan-list))
	 (cur-frames (apply map frames chan-list))
	 (cur-amp (maxamp cursnd curchn))
	 (cur-edit (edit-position cursnd curchn))
	 (cur-frame (frames cursnd curchn)))
    (case choice
      ;; scale-channel
      ((0) (let* ((scaler (if (< (maxamp cursnd curchn) 1.0) (+ 1.0 (random 1.0)) (+ 0.5 (random 0.5))))
		  (cur-loc (random cur-frame))
		  (cur-samp (sample cur-loc cursnd curchn)))
	     (scale-channel scaler 0 (frames cursnd curchn) cursnd curchn)
	     (if (not (= (edit-position cursnd curchn) (1+ cur-edit))) 
		 (snd-display ";scale-channel ~A[~A] edit pos: ~A ~A" (short-file-name cursnd) curchn (edit-position cursnd curchn) cur-edit))
	     (if (not (= (frames cursnd curchn) cur-frame))
		 (snd-display ";scale-channel ~A[~A] frames: ~A ~A" (short-file-name cursnd) curchn (frames cursnd curchn) cur-frame))
	     (if (fneq (maxamp cursnd curchn) (* scaler cur-amp))
		 (snd-display ";scale-channel ~A[~A] maxamp: ~A ~A (~A, scaler: ~A)" 
			      (short-file-name cursnd) curchn (maxamp cursnd curchn) (* scaler cur-amp)
			      (abs (- (maxamp cursnd curchn) (* scaler cur-amp)))
			      scaler))
	     (if (fneq (sample cur-loc cursnd curchn) (* scaler cur-samp))
		 (snd-display ";scale-channel ~A[~A] cur-samp: ~A ~A" (short-file-name cursnd) curchn (sample cur-loc cursnd curchn) (* scaler cur-samp)))
	     (for-each
	      (lambda (s c amp ed fr)
		(if (not (and (= s cursnd)
			      (= c curchn)))
		    (begin
		      (if (not (= (edit-position s c) ed))
			  (snd-display ";scale-channel ~A[~A] wrong edit pos: ~A ~A" (short-file-name s) c (edit-position s c) ed))
		      (if (not (= (frames s c) fr))
			  (snd-display ";scale-channel ~A[~A] wrong frames: ~A ~A" (short-file-name s) c (frames s c) fr))
		      (if (fneq (maxamp s c) amp)
			  (snd-display ";scale-channel ~A[~A] wrong maxamp: ~A ~A" (short-file-name s) c (maxamp s c) amp)))))
	      (car chan-list)
	      (cadr chan-list)
	      cur-maxamps
	      cur-edits
	      cur-frames)))
      
      ;; scale-by
      ((1) (let* ((maxscl (apply max cur-maxamps))
		  (scaler (if (< maxscl 1.0) (+ 1.0 (random 1.0)) (+ 0.5 (random 0.5)))))
	     (scale-by scaler cursnd curchn)
	     (for-each
	      (lambda (s c amp ed fr)
		(if (or (and (= (sync cursnd) 0) 
			     (or (not (= s cursnd))
				 (not (= c curchn))))
			(not (= (sync s) (sync cursnd))))
		    (begin
		      (if (not (= (edit-position s c) ed))
			  (snd-display ";scale-by ~A[~A] wrong edit pos: ~A ~A" (short-file-name s) c (edit-position s c) ed))
		      (if (not (= (frames s c) fr))
			  (snd-display ";scale-by ~A[~A] wrong frames: ~A ~A" (short-file-name s) c (frames s c) fr))
		      (if (fneq (maxamp s c) amp)
			  (snd-display ";scale-by ~A[~A] wrong maxamp: ~A ~A" (short-file-name s) c (maxamp s c) amp)))
		    (begin
		      (if (not (= (edit-position s c) (1+ ed))) 
			  (snd-display ";scale-by ~A[~A] edit pos: ~A ~A" (short-file-name s) c (edit-position s c) ed))
		      (if (not (= (frames s c) fr))
			  (snd-display ";scale-by ~A[~A] frames: ~A ~A" (short-file-name s) c (frames s c) fr))
		      (if (fneq (maxamp s c) (* scaler amp))
			  (snd-display ";scale-by ~A[~A] maxamp: ~A ~A" (short-file-name s) c (maxamp s c) (* scaler amp))))))
	      (car chan-list)
	      (cadr chan-list)
	      cur-maxamps
	      cur-edits
	      cur-frames)))
      
      ;; scale-sound-by
      ((4) (let* ((maxscl (apply max cur-maxamps))
		  (scaler (if (< maxscl 1.0) (+ 1.0 (random 1.0)) (+ 0.5 (random 0.5)))))
	     (scale-sound-by scaler 1000 1000 cursnd)
	     (for-each
	      (lambda (s c amp ed fr)
		(if (not (= s cursnd))
		    (begin
		      (if (not (= (edit-position s c) ed))
			  (snd-display ";scale-sound-by ~A[~A] wrong edit pos: ~A ~A" (short-file-name s) c (edit-position s c) ed))
		      (if (not (= (frames s c) fr))
			  (snd-display ";scale-sound-by ~A[~A] wrong frames: ~A ~A" (short-file-name s) c (frames s c) fr))
		      (if (fneq (maxamp s c) amp)
			  (snd-display ";scale-sound-by ~A[~A] wrong maxamp: ~A ~A" (short-file-name s) c (maxamp s c) amp)))
		    (begin
		      (if (not (= (edit-position s c) (1+ ed))) 
			  (snd-display ";scale-sound-by ~A[~A] edit pos: ~A ~A" (short-file-name s) c (edit-position s c) ed))
		      (if (not (= (frames s c) fr))
			  (snd-display ";scale-sound-by ~A[~A] frames: ~A ~A" (short-file-name s) c (frames s c) fr)))))
	      (car chan-list)
	      (cadr chan-list)
	      cur-maxamps
	      cur-edits
	      cur-frames)))

      ((5) (let ((pos (edit-position cursnd curchn)))
	     (if (> pos 0)
		 (undo (random pos) cursnd curchn))))

      ((6) (let ((len (frames cursnd curchn)))
	     (if (> len 10000)
		 (let ((beg (random (inexact->exact (/ len 2)))))
		   (delete-samples beg (+ 10 (random 100)) cursnd curchn)))))

      ((7) (let ((beg (random (+ (frames cursnd curchn) 100))))
	     (set! (samples beg (+ 10 (random 100)) cursnd curchn) (make-vct 10 1.0))))

      ((8) (let ((beg (random (+ (frames cursnd curchn) 100))))
	     (insert-samples beg (+ 10 (random 100)) (make-vct 10 1.0) cursnd curchn)))

      ((9) (add-mark (random (frames cursnd curchn)) cursnd curchn))

      ((10) (let ((beg (random (+ (frames cursnd curchn) 100))))
	      (mix-vct (make-vct (+ 10 (random 100)) (random 1.0)) beg cursnd curchn)))

      ((11) (let ((beg (random (+ (frames cursnd curchn) 100))))
	      (pad-channel beg (+ 10 (random 100)) cursnd curchn)))

      ((12) (let* ((beg (random (- (frames cursnd curchn) 210)))
		   (dur (+ 10 (random 200)))
		   (preader0 (make-sample-reader (+ beg dur -1) cursnd curchn -1))
		   (reader0 (make-sample-reader beg cursnd curchn)))
	      (ptree-channel (lambda (y) (* y 2.0)) beg dur cursnd curchn #f #t)
	      (let* ((preader1 (make-sample-reader (+ beg dur -1) cursnd curchn -1))
		     (reader1 (make-sample-reader beg cursnd curchn)))
		(do ((i 0 (1+ i)))
		    ((= i dur))
		  (let ((pval0 (preader0))
			(val0 (reader0))
			(pval1 (preader1))
			(val1 (reader1)))
		    (if (or (fneq (* val0 2) val1)
			    (fneq (* pval0 2) pval1))
			(begin
			  (snd-display ";read ptree at ~A: ~A ~A ~A ~A (~A ~A ~A ~A): ~A" 
				       i val0 val1 pval0 pval1
				       reader0 reader1 preader0 preader1
				       (display-edits cursnd curchn))
			  (throw 'mus-error))))))))

      ((13) (let ((beg (random (- (frames cursnd curchn) 100))))
	      (scale-channel .5 beg (+ 10 (random 100)) cursnd curchn)))
      
      ((14) (let ((beg (random (- (frames cursnd curchn) 200))))
	      (scale-channel .5 beg (+ 10 (random 100)) cursnd curchn)
	      (scale-channel .5 (+ beg 10) (+ 10 (random 100)) cursnd curchn)))
      
      ((15) (let ((beg (random (- (frames cursnd curchn) 200))))
	      (scale-channel .5 beg (+ 10 (random 100)) cursnd curchn)
	      (scale-channel 2.0 beg (+ 10 (random 100)) cursnd curchn)))
      
      ((16) (let ((beg (random (- (frames cursnd curchn) 200))))
	      (pad-channel beg (+ 10 (random 100)) cursnd curchn)
	      (pad-channel (+ beg 10) (+ 10 (random 100)) cursnd curchn)))
      
      ((17) (let ((beg (random (- (frames cursnd curchn) 200))))
	      (pad-channel beg (+ 10 (random 100)) cursnd curchn)
	      (pad-channel beg (+ 10 (random 100)) cursnd curchn)))
      
      ((18) (let ((beg (random (- (frames cursnd curchn) 200))))
	      (delete-sample beg cursnd curchn)
	      (delete-sample (+ beg (random 100)) cursnd curchn)))
      
      ((19) (let ((beg (random (+ (frames cursnd curchn) 200))))
	      (set! (sample beg cursnd curchn) .1)
	      (set! (sample (+ beg (random 100)) cursnd curchn) .2)))

      ((20) (let ((beg (random (- (frames cursnd curchn) 200))))
	      (ramp-channel (- (random 2.0) 1.0) (- (random 2.0) 1.0) beg (+ 10 (random 100)) cursnd curchn)))
      
      ((21) (let* ((pts (1+ (random 8)))
		   (maxpt 0.0)
		   (e (let ((e1 '())
			    (x 0.0)
			    (y 0.0))
			(do ((i 0 (1+ i)))
			    ((= i pts))
			  (set! e1 (cons x e1))
			  (if (> (random 3) 0)
			      (set! y (- (random 2.0) 1.0)))
			  (set! e1 (cons y e1))
			  (if (> (abs y) maxpt) (set! maxpt (abs y)))
			  (set! x (+ x (+ .01 (random 1.0)))))
			(reverse e1)))
		   (beg (random (- (frames cursnd curchn) 300)))
		   (dur (+ 80 (random 200)))
		   (reader0 (make-sample-reader beg cursnd curchn)))
	      (env-channel e beg dur cursnd curchn)
	      (let* ((reader1 (make-sample-reader beg cursnd curchn))
		     (en (make-env e :end (1- dur))))
		(do ((i 0 (1+ i)))
		    ((= i dur))
		  (let* ((e0 (env en))
			 (val00 (reader0))
			 (val0 (* e0 val00))
			 (val1 (reader1)))
		    (if (fneq val0 val1)
			(begin
			  (save-state "baddy.scm")
			  (snd-display ";read env off by ~A: ~%    (~A) at ~A: ~%    ~A ~A (~A ~A) [~A ~A]:~%    ~A" 
				       (abs (- val0 val1))
				       e i val0 val1
				       reader0 reader1 e0 val00
				       (display-edits cursnd curchn))
			  (throw 'mus-error))))))))
      
      ;; env-channel
      ((2) (let* ((pts (1+ (random 6)))
		  (maxpt 0.0)
		  (e (let ((e1 '())
			   (x 0.0)
			   (y 0.0))
		       (do ((i 0 (1+ i)))
			   ((= i pts))
			 (set! e1 (cons x e1))
			 (if (> (random 3) 0)
			     (set! y (- (random 2.0) 1.0)))
			 (set! e1 (cons y e1))
			 (if (> (abs y) maxpt) (set! maxpt (abs y)))
			 (set! x (+ x (+ .01 (random 1.0)))))
		       (reverse e1))))
	     (if (undo-env cursnd curchn)
		 (begin
		   (set! cur-maxamps (apply map maxamp chan-list))
		   (set! cur-edits (apply map edit-position chan-list))
		   (set! cur-frames (apply map frames chan-list))
		   (set! cur-amp (maxamp cursnd curchn))
		   (set! cur-edit (edit-position cursnd curchn))
		   (set! cur-frame (frames cursnd curchn))))
	     (env-channel e 0 (frames cursnd curchn) cursnd curchn)
	     (if (not (= (edit-position cursnd curchn) (1+ cur-edit))) 
		 (snd-display ";env-channel ~A[~A] edit pos: ~A ~A" (short-file-name cursnd) curchn (edit-position cursnd curchn) cur-edit))
	     (if (not (= (frames cursnd curchn) cur-frame))
		 (snd-display ";env-channel ~A[~A] frames: ~A ~A" (short-file-name cursnd) curchn (frames cursnd curchn) cur-frame))
	     (if (> (- (maxamp cursnd curchn) .01) (* maxpt cur-amp))
		 (begin
		   (snd-display ";env-channel ~A[~A] maxamp: ~A ~A from ~A" (short-file-name cursnd) curchn (maxamp cursnd curchn) (* maxpt cur-amp) e)
		   (throw 'mus-error)))
	     (for-each
	      (lambda (s c amp ed fr)
		(if (not (and (= s cursnd)
			      (= c curchn)))
		    (begin
		      (if (not (= (edit-position s c) ed))
			  (snd-display ";env-channel ~A[~A] wrong edit pos: ~A ~A" (short-file-name s) c (edit-position s c) ed))
		      (if (not (= (frames s c) fr))
			  (snd-display ";env-channel ~A[~A] wrong frames: ~A ~A" (short-file-name s) c (frames s c) fr))
		      (if (fneq (maxamp s c) amp)
			  (snd-display ";env-channel ~A[~A] wrong maxamp: ~A ~A" (short-file-name s) c (maxamp s c) amp)))))
	      (car chan-list)
	      (cadr chan-list)
	      cur-maxamps
	      cur-edits
	      cur-frames)))

      ;; env-sound
      ((3) (let* ((pts (1+ (random 6)))
		  (maxpt 0.0)
		  (recalc #f)
		  (e (let ((e1 '())
			   (x 0.0)
			   (y 0.0))
		       (do ((i 0 (1+ i)))
			   ((= i pts))
			 (set! e1 (cons x e1))
			 (if (> (random 3) 0)
			     (set! y (- (random 2.0) 1.0)))
			 (set! e1 (cons y e1))
			 (if (> (abs y) maxpt) (set! maxpt (abs y)))
			 (set! x (+ x (+ .01 (random 1.0)))))
		       (reverse e1)))
		  (end (apply min cur-frames)) ; env-sound can lengthen a shorter sound if syncd+multichannel
		  (beg (random (inexact->exact (/ end 2)))))
	     (for-each
	      (lambda (s c)
		(if (not (or (and (= (sync cursnd) 0) 
				  (or (not (= s cursnd)) 
				      (not (= c curchn))))
			     (not (= (sync s) (sync cursnd)))))
		    (let ((val (undo-env s c)))
		      (set! recalc (or recalc val)))))
	      (car chan-list)
	      (cadr chan-list))
	     (if recalc
		 (begin
		   (set! cur-maxamps (apply map maxamp chan-list))
		   (set! cur-edits (apply map edit-position chan-list))
		   (set! cur-frames (apply map frames chan-list))
		   (set! cur-amp (maxamp cursnd curchn))
		   (set! cur-edit (edit-position cursnd curchn))
		   (set! cur-frame (frames cursnd curchn))))
	     (env-sound e beg (max pts (- end beg)) 1.0 cursnd curchn) ; dur here, not end point
	     (for-each
	      (lambda (s c amp ed fr)
		(if (or (and (= (sync cursnd) 0) 
			     (or (not (= s cursnd)) 
				 (not (= c curchn))))
			(not (= (sync s) (sync cursnd))))
		    (begin
		      (if (not (= (edit-position s c) ed))
			  (snd-display ";env-sound ~A[~A] wrong edit pos: ~A ~A" (short-file-name s) c (edit-position s c) ed))
		      (if (not (= (frames s c) fr))
			  (snd-display ";env-sound ~A[~A] wrong frames: ~A ~A" (short-file-name s) c (frames s c) fr))
		      (if (fneq (maxamp s c) amp)
			  (snd-display ";env-sound ~A[~A] wrong maxamp: ~A ~A" (short-file-name s) c (maxamp s c) amp)))
		    (begin
		      (if (not (= (edit-position s c) (1+ ed))) 
			  (snd-display ";env-sound ~A[~A] edit pos: ~A ~A" (short-file-name s) c (edit-position s c) ed))
		      (if (not (= (frames s c) fr))
			  (snd-display ";env-sound ~A[~A] frames: ~A ~A" (short-file-name s) c (frames s c) fr)))))
	      (car chan-list)
	      (cadr chan-list)
	      cur-maxamps
	      cur-edits
	      cur-frames)))
      )))

(define (amp-envs-equal? snd chn pos0 pos1 df)
  (let* ((env0 (channel-amp-envs snd chn pos0))
	 (len0 (and env0 (list-p env0) (= (length env0) 2) (vct-length (cadr env0))))
	 (env1 (channel-amp-envs snd chn pos1))
	 (len1 (and env1 (list-p env1) (= (length env1) 2) (vct-length (cadr env1)))))
    (call-with-current-continuation
     (lambda (break)
       (if (and len0 len1)
	   (let* ((minlen (min len0 len1))
		  (inc0 (/ len0 minlen))
		  (inc1 (/ len1 minlen))
		  (e0 (cadr env0))
		  (e1 (cadr env1)))
	     (if (and (exact? inc0)
		      (exact? inc1))
		 (do ((i 0 (1+ i)))
		     ((= i minlen))
		   (let ((max0 -1.0)
			 (max1 -1.0))
		     (if (= inc0 1)
			 (set! max0 (vct-ref e0 i))
			 (do ((j 0 (1+ j)))
			     ((= j inc0))
			   (if (> (vct-ref e0 (+ j (* inc0 i))) max0)
			       (set! max0 (vct-ref e0 (+ j (* inc0 i)))))))
		     (if (= inc1 1)
			 (set! max1 (vct-ref e1 i))
			 (do ((j 0 (1+ j)))
			     ((= j inc1))
			   (if (> (vct-ref e1 (+ j (* inc1 i))) max1)
			       (set! max1 (vct-ref e1 (+ j (* inc1 i)))))))
		     (if (> (abs (- max0 max1)) df)
			 (begin
			   (snd-display ";amp-env ~A: ~A ~A" i max0 max1)
			   (break #f)))
		     (set! max0 -1.0)
		     (set! max1 -1.0)))
		 (snd-display ";lens: ~A ~A" len0 len1))))
       #t))))
	 
(define (check-edit-tree expected-tree expected-vals name)
  (define (vequal-at v0 v1)
    (call-with-current-continuation
     (lambda (return)
       (let ((len (vct-length v0)))
	 (do ((i 0 (1+ i)))
	     ((= i len) #f)
	   (if (> (abs (- (vct-ref v0 i) (vct-ref v1 i))) .0001)
	       (return (list i (vct-ref v0 i) (vct-ref v1 i)))))))))
  (define (edits-not-equal? tl0 tl1 pos)
    (if (null? tl0)
	(if (null? tl1)
	    #f
	    (list pos tl0 #f))
	(let ((t0 (car tl0))
	      (t1 (car tl1)))
	  (if (or (not (= (car t0) (car t1)))
		  (not (= (cadr t0) (cadr t1)))
		  (not (= (caddr t0) (caddr t1)))
		  (not (= (cadddr t0) (cadddr t1)))
		  (> (abs (- (list-ref t0 4) (list-ref t1 4))) .0001)
		  (> (abs (- (list-ref t0 5) (list-ref t1 5))) .0001) ; rmp0
		  (> (abs (- (list-ref t0 6) (list-ref t1 6))) .0001)) ; rmp1
	      (list pos t0 t1)
	      (edits-not-equal? (cdr tl0) (cdr tl1) (1+ pos))))))
  (let* ((current-vals (channel->vct))
	 (len (vct-length current-vals)))
    (if (and expected-vals (not (= len (vct-length expected-vals))))
	(snd-display ";~A: lengths differ: ~A ~A" name len (vct-length expected-vals))
	(if (and expected-vals (not (vequal current-vals expected-vals)))
	    (let ((bad-data (vequal-at current-vals expected-vals)))
	      (snd-display ";checking ~A, vals disagree (loc cur expect): ~A" name bad-data)
	      (throw 'uhoh)
	      )
	    (let* ((tree (edit-tree))
		   (bad-data (edits-not-equal? tree expected-tree 0)))
	      (if bad-data
		  (snd-display ";checking ~A, trees disagree (loc cur expect): ~A~%  in ~A" name bad-data (edit-tree)))
	      (if (> len 5)
		  (let* ((split-loc (+ 2 (random (- len 3))))
			 (fread (make-sample-reader split-loc))
			 (bread (make-sample-reader (1- split-loc) #f #f -1))
			 (split-vals (make-vct len)))
		    (do ((i split-loc (1+ i)))
			((= i len))
		      (vct-set! split-vals i (fread)))
		    (do ((i (1- split-loc) (1- i)))
			((< i 0))
		      (vct-set! split-vals i (bread)))
		    (if (and expected-vals (not (vequal split-vals expected-vals)))
			(let ((bad-data (vequal-at split-vals expected-vals)))
			  (snd-display ";checking ~A, split vals disagree (loc cur expect): ~A" name bad-data)
			  (throw 'uhoh)
			  )))))))))
		
(define (reversed-read snd chn)
  (let* ((len (frames snd chn))
	 (data (make-vct len))
	 (sf (make-sample-reader (1- len) snd chn -1)))
    (do ((i (1- len) (1- i)))
	((< i 0))
      (vct-set! data i (read-sample sf)))
    data))

(define (zigzag-read snd chn)
  (let* ((len (frames snd chn))
	 (data (make-vct len))
	 (sf (make-sample-reader 3 snd chn 1)))
    (do ((i 3 (1+ i)))
	((= i 6))
      (vct-set! data i (next-sample sf)))
    (do ((i 6 (1- i)))
	((= i 0))
      (vct-set! data i (previous-sample sf)))
    (do ((i 0 (1+ i)))
	((= i len))
      (vct-set! data i (next-sample sf)))
    data))

(define (zigzag-check name snd chn)
  (let* ((len (frames snd chn))
	 (data (channel->vct))
	 (sf (make-sample-reader 3 snd chn)))
    (do ((i 3 (1+ i)))
	((= i 8))
      (let ((val (next-sample sf)))
	(if (fneq (vct-ref data i) val)
	    (snd-display ";~A: forward data[~D]: ~A ~A" name i val (vct-ref data i)))))
    (do ((i 7 (1- i)))
	((= i 0))
      (let ((val (previous-sample sf)))
	(if (fneq (vct-ref data i) val)
	    (snd-display ";~A: backward data[~D]: ~A ~A" name i val (vct-ref data i)))))))

(define (init-sound val dur chans)
  (let ((ind (new-sound "test.snd" mus-next mus-bshort 22050 chans)))
    (do ((i 0 (1+ i)))
	((= i chans))
      (insert-silence 0 dur ind i)
      (map-channel (lambda (y) val) 0 (frames) ind i))
    ind))

(define (check-back-and-forth ind name v)
  (if (not (vequal v (channel->vct 0 (frames) ind 0)))
      (snd-display ";~A forth: ~A ~A" name (channel->vct 0 (frames) ind 0) v))
  (if (not (vequal v (reversed-read ind 0)))
      (snd-display ";~A back: ~A ~A" name (reversed-read ind 0) v)))
  

(define (rampx-channel r0 r1)
  (xramp-channel r0 r1 3.0 0 (frames)))

(define (check-both-chans ind name f0 f1)
  (let ((c0 (scan-channel f0 0 (frames) ind 0))
	(c1 (scan-channel f1 0 (frames) ind 1)))
    (if c0 (snd-display ";~A swap c0: ~A" name c0))
    (if c1 (snd-display ";~A swap c1: ~A" name c1))))

(if (or full-test (= snd-test 16) (and keep-going (<= snd-test 16)))
    (begin
      (if (procedure? test-hook) (test-hook 16))
      (let ((oboe (open-sound "oboe.snd")))

	(for-each
	 (lambda (func name)
	   (func)
	   (if (not (= (edit-position oboe) 0))
	       (snd-display ";dur:0 ~A? ~A ~A" name (edit-position oboe) (edit-fragment))))
	 (list 
	  (lambda () (scale-channel 2.0 0 0 oboe))
	  (lambda () (env-channel (make-env '(0 0 1 1) :end 123) 0 0 oboe))
	  (lambda () (clm-channel (make-oscil) 0 0 oboe))
	  (lambda () (vct->channel (make-vct 3) 0 0 oboe))
	  (lambda () (smooth-channel 0 0 oboe))
	  (lambda () (pad-channel 0 0 oboe))
	  (lambda () (src-channel 2.0 0 0 oboe))
	  (lambda () (mix-channel "pistol.snd" 0 0 oboe))
	  (lambda () (insert-channel "pistol.snd" 0 0 oboe))
	  (lambda () (reverse-channel 0 0 oboe))
	  (lambda () (play-channel 0 0 oboe))
	  (lambda () (scale-sound-by 2.0 0 0 oboe))
	  (lambda () (env-sound '(0 0 1 1) 0 0 oboe))
	  (lambda () (set-samples 0 0 (make-vct 3) oboe))
	  (lambda () (smooth-sound 0 0 oboe))
	  (lambda () (insert-silence 0 0 oboe)))
	 (list 
	  "scale-channel" "env-channel" "clm-channel" "vct->channel" "smooth-channel" "pad-channel" "src-channel"
	  "mix-channel" "insert-channel" "reverse-channel" "play-channel" 
	  "scale-sound-by" "env-sound" "set-samples" "smooth-sound" "insert-silence"))

	(for-each
	 (lambda (func name)
	   (let ((tag (catch #t
			     func
			     (lambda args (car args)))))
	     (if (not (eq? tag 'no-such-sample))
		 (snd-display ";~A beg -1->~A" name tag))
	     (if (not (= (edit-position oboe) 0))
		 (snd-display ";beg:-1 ~A? ~A ~A" name (edit-position oboe) (edit-fragment)))))
	 (list 
	  (lambda () (scale-channel 2.0 -1 123 oboe))
	  (lambda () (env-channel (make-env '(0 0 1 1) :end 123) -1 123 oboe))
	  (lambda () (clm-channel (make-oscil) -1 123 oboe))
	  (lambda () (vct->channel (make-vct 3) -1 123 oboe))
	  (lambda () (smooth-channel -1 123 oboe))
	  (lambda () (pad-channel -1 123 oboe))
	  (lambda () (src-channel 2.0 -1 123 oboe))
	  (lambda () (mix-channel "pistol.snd" -1 123 oboe))
	  (lambda () (insert-channel "pistol.snd" -1 123 oboe))
	  (lambda () (reverse-channel -1 123 oboe))
	  (lambda () (play-channel -1 123 oboe))
	  (lambda () (scale-sound-by 2.0 -1 123 oboe))
	  (lambda () (env-sound '(0 0 1 1) -1 123 oboe))
	  (lambda () (set-samples -1 123 (make-vct 3) oboe))
	  (lambda () (smooth-sound -1 123 oboe))
	  (lambda () (insert-silence -1 123 oboe))
	  (lambda () (ptree-channel (lambda (y) (+ y .1)) -1 123 oboe)))
	 (list 
	  "scale-channel" "env-channel" "clm-channel" "vct->channel" "smooth-channel" "pad-channel" "src-channel"
	  "mix-channel" "insert-channel" "reverse-channel" "play-channel" 
	  "scale-sound-by" "env-sound" "set-samples" "smooth-sound" "insert-silence" "ptree-channel"))

	(scale-channel 2.0 12345678 123 oboe)
	(if (not (= (edit-position oboe) 0))
	    (snd-display ";beg:12345678 scale-channel? ~A ~A" (edit-position oboe) (edit-fragment)))
	(env-channel (make-env '(0 0 1 1) :end 123) 12345678 123 oboe)
	(if (not (= (edit-position oboe) 0))
	    (snd-display ";beg:12345678 env-channel? ~A ~A" (edit-position oboe) (edit-fragment)))
	(smooth-channel 12345678 123 oboe)
	(if (not (= (edit-position oboe) 0))
	    (snd-display ";beg:12345678 smooth-channel? ~A ~A" (edit-position oboe) (edit-fragment)))
	(src-channel 2.0 12345678 123 oboe)
	(if (not (= (edit-position oboe) 0))
	    (snd-display ";beg:12345678 src-channel? ~A ~A" (edit-position oboe) (edit-fragment)))
	(reverse-channel 12345678 123 oboe)
	(if (not (= (edit-position oboe) 0))
	    (snd-display ";beg:12345678 reverse-channel? ~A ~A" (edit-position oboe) (edit-fragment)))
	(play-channel 12345678 123 oboe)

	(scale-channel 2.0 0 123 oboe 0)
	(if (not (= (edit-position oboe) 1))
	    (snd-display ";oboe scale-channel? ~A ~A" (edit-position oboe) (edit-fragment)))
	(env-channel (make-env '(0 0 1 1) :end 123) 0 123 oboe 0)
	(if (not (= (edit-position oboe) 2))
	    (snd-display ";oboe env-channel? ~A ~A" (edit-position oboe) (edit-fragment)))
	(clm-channel (make-oscil) 0 123 oboe 0)
	(if (not (= (edit-position oboe) 3))
	    (snd-display ";oboe clm-channel? ~A ~A" (edit-position oboe) (edit-fragment)))
	(vct->channel (make-vct 3) 0 123 oboe 0)
	(if (not (= (edit-position oboe) 4))
	    (snd-display ";oboe vct->channel? ~A ~A" (edit-position oboe) (edit-fragment)))
	(smooth-channel 0 123 oboe 0)
	(if (not (= (edit-position oboe) 5))
	    (snd-display ";oboe smooth-channel? ~A ~A" (edit-position oboe) (edit-fragment)))
	(pad-channel 0 123 oboe 0)
	(if (not (= (edit-position oboe) 6))
	    (snd-display ";oboe pad-channel? ~A ~A" (edit-position oboe) (edit-fragment)))
	(src-channel 2.0 0 123 oboe 0)
	(if (not (= (edit-position oboe) 7))
	    (snd-display ";oboe src-channel? ~A ~A" (edit-position oboe) (edit-fragment)))
	(mix-channel "pistol.snd" 0 123 oboe 0)
	(if (not (= (edit-position oboe) 8))
	    (snd-display ";oboe mix-channel? ~A ~A" (edit-position oboe) (edit-fragment)))
	(insert-channel "pistol.snd" 0 123 oboe 0)
	(if (not (= (edit-position oboe) 9))
	    (snd-display ";oboe insert-channel? ~A ~A" (edit-position oboe) (edit-fragment)))
	(reverse-channel 0 123 oboe 0)
	(if (not (= (edit-position oboe) 10))
	    (snd-display ";oboe reverse-channel? ~A ~A" (edit-position oboe) (edit-fragment)))
	(revert-sound)
	
	(let ((tag (catch #t (lambda () (scale-channel 2.0 0 123 oboe 0 (lambda (hi) #f))) (lambda args (car args)))))
	  (if (not (eq? tag 'bad-arity)) (snd-display ";bad edpos scale-channel: ~A" tag))
	  (if (not (= (edit-position oboe) 0))
	      (snd-display ";edpos:func scale-channel? ~A ~A" (edit-position oboe) (edit-fragment))))
	(let ((tag (catch #t (lambda () (env-channel (make-env '(0 0 1 1) :end 123) 0 123 oboe 0 (lambda (hi) #f))) (lambda args (car args)))))
	  (if (not (= (edit-position oboe) 0))
	      (snd-display ";edpos:func env-channel? ~A ~A" (edit-position oboe) (edit-fragment))))
	(let ((tag (catch #t (lambda () (clm-channel (make-oscil) 0 123 oboe 0 (lambda (hi) #f))) (lambda args (car args)))))
	  (if (not (= (edit-position oboe) 0))
	      (snd-display ";edpos:func clm-channel? ~A ~A" (edit-position oboe) (edit-fragment))))
	(let ((tag (catch #t (lambda () (vct->channel (make-vct 3) 0 123 oboe 0 (lambda (hi) #f))) (lambda args (car args)))))
	  (if (not (= (edit-position oboe) 0))
	      (snd-display ";edpos:func vct->channel? ~A ~A" (edit-position oboe) (edit-fragment))))
	(let ((tag (catch #t (lambda () (smooth-channel 0 123 oboe 0 (lambda (hi) #f))) (lambda args (car args)))))
	  (if (not (= (edit-position oboe) 0))
	      (snd-display ";edpos:func smooth-channel? ~A ~A" (edit-position oboe) (edit-fragment))))
	(let ((tag (catch #t (lambda () (pad-channel 0 123 oboe 0 (lambda (hi) #f))) (lambda args (car args)))))
	  (if (not (= (edit-position oboe) 0))
	      (snd-display ";edpos:func pad-channel? ~A ~A" (edit-position oboe) (edit-fragment))))
	(let ((tag (catch #t (lambda () (src-channel 2.0 0 123 oboe 0 (lambda (hi) #f))) (lambda args (car args)))))
	  (if (not (= (edit-position oboe) 0))
	      (snd-display ";edpos:func src-channel? ~A ~A" (edit-position oboe) (edit-fragment))))
	(let ((tag (catch #t (lambda () (mix-channel "pistol.snd" 0 123 oboe 0 (lambda (hi) #f))) (lambda args (car args)))))
	  (if (not (= (edit-position oboe) 0))
	      (snd-display ";edpos:func mix-channel? ~A ~A" (edit-position oboe) (edit-fragment))))
	(let ((tag (catch #t (lambda () (insert-channel "pistol.snd" 0 123 oboe 0 (lambda (hi) #f))) (lambda args (car args)))))
	  (if (not (= (edit-position oboe) 0))
	      (snd-display ";edpos:func insert-channel? ~A ~A" (edit-position oboe) (edit-fragment))))
	(let ((tag (catch #t (lambda () (reverse-channel 0 123 oboe 0 (lambda (hi) #f))) (lambda args (car args)))))
	  (if (not (= (edit-position oboe) 0))
	      (snd-display ";edpos:func reverse-channel? ~A ~A" (edit-position oboe) (edit-fragment))))

	(let ((tag (catch #t (lambda () (scale-channel 2.0 0 123 oboe 0 123)) (lambda args (car args)))))
	  (if (not (eq? tag 'no-such-edit)) (snd-display ";bad edpos scale-channel: ~A" tag))
	  (if (not (= (edit-position oboe) 0))
	      (snd-display ";edpos 123 scale-channel? ~A ~A" (edit-position oboe) (edit-fragment))))
	(let ((tag (catch #t (lambda () (env-channel (make-env '(0 0 1 1) :end 123) 0 123 oboe 0 123)) (lambda args (car args)))))
	  (if (not (= (edit-position oboe) 0))
	      (snd-display ";edpos 123 env-channel? ~A ~A" (edit-position oboe) (edit-fragment))))
	(let ((tag (catch #t (lambda () (clm-channel (make-oscil) 0 123 oboe 0 123)) (lambda args (car args)))))
	  (if (not (= (edit-position oboe) 0))
	      (snd-display ";edpos 123 clm-channel? ~A ~A" (edit-position oboe) (edit-fragment))))
	(let ((tag (catch #t (lambda () (vct->channel (make-vct 3) 0 123 oboe 0 123)) (lambda args (car args)))))
	  (if (not (= (edit-position oboe) 0))
	      (snd-display ";edpos 123 vct->channel? ~A ~A" (edit-position oboe) (edit-fragment))))
	(let ((tag (catch #t (lambda () (smooth-channel 0 123 oboe 0 123)) (lambda args (car args)))))
	  (if (not (= (edit-position oboe) 0))
	      (snd-display ";edpos 123 smooth-channel? ~A ~A" (edit-position oboe) (edit-fragment))))
	(let ((tag (catch #t (lambda () (pad-channel 0 123 oboe 0 123)) (lambda args (car args)))))
	  (if (not (= (edit-position oboe) 0))
	      (snd-display ";edpos 123 pad-channel? ~A ~A" (edit-position oboe) (edit-fragment))))
	(let ((tag (catch #t (lambda () (src-channel 2.0 0 123 oboe 0 123)) (lambda args (car args)))))
	  (if (not (= (edit-position oboe) 0))
	      (snd-display ";edpos 123 src-channel? ~A ~A" (edit-position oboe) (edit-fragment))))
	(let ((tag (catch #t (lambda () (mix-channel "pistol.snd" 0 123 oboe 0 123)) (lambda args (car args)))))
	  (if (not (= (edit-position oboe) 0))
	      (snd-display ";edpos 123 mix-channel? ~A ~A" (edit-position oboe) (edit-fragment))))
	(let ((tag (catch #t (lambda () (insert-channel "pistol.snd" 0 123 oboe 0 123)) (lambda args (car args)))))
	  (if (not (= (edit-position oboe) 0))
	      (snd-display ";edpos 123 insert-channel? ~A ~A" (edit-position oboe) (edit-fragment))))
	(let ((tag (catch #t (lambda () (reverse-channel 0 123 oboe 0 123)) (lambda args (car args)))))
	  (if (not (= (edit-position oboe) 0))
	      (snd-display ";edpos 123 reverse-channel? ~A ~A" (edit-position oboe) (edit-fragment))))
	(let ((tag (catch #t (lambda () (play-channel 0 123 oboe 0 123)) (lambda args (car args)))))
	  (if (not (eq? tag 'no-such-edit)) (snd-display ";bad edpos play-channel: ~A" tag)))
	(revert-sound oboe)

	(let ((oldv (channel->vct 1000 10 oboe)))
	  (mix-channel "oboe.snd" 0)
	  (vct-scale! oldv 2.0)
	  (if (not (vequal oldv (channel->vct 1000 10 oboe)))
	      (snd-display ";mix-channel at 0: ~A ~A" oldv (channel->vct 1000 10 oboe)))
	  (revert-sound oboe)
	  (vct-scale! oldv 0.5)
	  (insert-channel "oboe.snd" 0)
	  (if (not (vequal oldv (channel->vct 1000 10 oboe)))
	      (snd-display ";insert-channel at 0: ~A ~A" oldv (channel->vct 1000 10 oboe)))
	  (if (not (= (frames oboe 0) (* 2 (frames oboe 0 0))))
	      (snd-display ";insert-channel frames: ~A ~A" (frames oboe 0) (frames oboe 0 0)))
	  (revert-sound oboe))
  
	(close-sound oboe)

	(if (not (= (default-output-chans) 1)) (set! (default-output-chans) 1))
	(let ((ind (new-sound "fmv.snd"))
	      (v0 (vct-fill! (make-vct 20) 1.0)))
	  (vct->channel v0)
	  (if (not (= (frames) 20)) (snd-display ";vct->channel new 20: ~A" (frames)))
	  (if (fneq (maxamp) 1.0) (snd-display ";vct 1->new: ~A" (maxamp)))
	  
	  (env-channel (make-env '(0 0 1 1 2 1) :base 0 :end 19))
	  (let ((v1 (channel->vct)))
	    (if (not (vequal v1 (vct 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1)))
		(snd-display ";env-channel step 1: ~A" v1)))
	  (undo)
	  (env-channel (make-env '(0 0 1 1 2 1) :base 0 :end 19) 8)
	  (let ((v1 (channel->vct)))
	    (if (not (vequal v1 (vct 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1)))
		(snd-display ";env-channel step 1 at 8: ~A" v1)))
	  (undo)
	  (env-channel (make-env '(0 0 1 1 2 1) :base 0 :end 11))
	  (let ((v1 (channel->vct)))
	    (if (not (vequal v1 (vct 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1)))
		(snd-display ";env-channel step 1 at 0: ~A" v1)))
	  (undo)
	  (env-channel (make-env '(0 0 1 1 2 1) :base 0 :end 11) 4)
	  (let ((v1 (channel->vct)))
	    (if (not (vequal v1 (vct 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1)))
		(snd-display ";env-channel step 1 at 4: ~A" v1)))
	  (undo)
	  (env-channel (make-env '(0 0 1 1 2 1) :base 0 :end 11) 4 3)
	  (let ((v1 (channel->vct)))
	    (if (not (vequal v1 (vct 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1)))
		(snd-display ";env-channel step 1 at 4 by 3: ~A" v1)))
	  (undo)
	  (env-channel (make-env '(0 1 1 0 2 0) :base 0 :end 7) 0 12)
	  (let ((v1 (channel->vct)))
	    (if (not (vequal v1 (vct 1 1 1 1 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1)))
		(snd-display ";env-channel step 1 at 0 for 7: ~A" v1)))
	  (undo)
	  (env-channel (make-env '(0 0 1 1 2 1 3 0 4 0) :base 0 :end 19))
	  (let ((v1 (channel->vct)))
	    (if (not (vequal v1 (vct 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0)))
		(snd-display ";env-channel step 1: ~A" v1)))
	  (env-channel (make-env '(0 0 1 .5 2 .25 3 0 4 0) :base 0 :end 20))
	  (let ((v1 (channel->vct)))
	    (if (not (vequal v1 (vct 0 0 0 0 0 0 .5 .5 .5 .5 .5 .25 .25 .25 .25 0 0 0 0 0)))
		(snd-display ";env-channel step 1 (.5): ~A" v1)))
	  (close-sound ind))

	(set! (x-axis-style) x-axis-as-percentage)
	(let* ((ind (open-sound "2.snd"))
	       (fr (frames))
	       (m0 (maxamp ind 0))
	       (m1 (maxamp ind 1)))
	  (set! (sync ind) 64)
	  (insert-sound "2.snd")
	  (insert-sound "2.snd")
	  (if (not (= (frames) (* 3 fr))) (snd-display ";2.snd 3x = ~A ~A" fr (frames)))
	  (if (not (= (frames ind 0) (frames ind 1))) (snd-display ";insert sync'd: ~A ~A" (frames ind 0) (frames ind 1)))
	  (swap-channels)
	  (if (or (fneq m0 (maxamp ind 1)) (fneq m1 (maxamp ind 0)))
	      (snd-display ";swapped: ~A ~A -> ~A ~A" m0 m1 (maxamp ind 0) (maxamp ind 1)))
	  (close-sound ind))
	(set! (x-axis-style) x-axis-in-seconds)

	(let ((oboe0 (open-sound "oboe.snd"))
	      (oboe1 (open-sound "oboe.snd")))

	  (define (funcs-equal? name func0 func1)
	    (func0 #f #f oboe0)
	    (func1 #f #f oboe1)
	    (if (not (vequal (channel->vct 1000 100 oboe0) (channel->vct 1000 100 oboe1)))
		(snd-display ";~A via #f: ~A ~A" name (channel->vct 1000 100 oboe0) (channel->vct 1000 100 oboe1)))
	    (revert-sound oboe0)
	    (revert-sound oboe1)
	    (select-sound oboe0)
	    (func0)
	    (select-sound oboe1)
	    (func1)
	    (if (not (vequal (channel->vct 1000 100 oboe0) (channel->vct 1000 100 oboe1)))
		(snd-display ";~A via none: ~A ~A" name (channel->vct 1000 100 oboe0) (channel->vct 1000 100 oboe1)))
	    (revert-sound oboe0)
	    (revert-sound oboe1)
	    (func0 0 (frames oboe0) oboe0)
	    (func1 0 (frames oboe1) oboe1)
	    (if (not (vequal (channel->vct 1000 100 oboe0) (channel->vct 1000 100 oboe1)))
		(snd-display ";~A via frames: ~A ~A" name (channel->vct 1000 100 oboe0) (channel->vct 1000 100 oboe1)))
	    (revert-sound oboe0)
	    (revert-sound oboe1))

	  (funcs-equal? "scale-sound-by" 
			(lambda args (apply scale-sound-by (cons 2.0 args)))
			(lambda args (apply scale-channel (cons 2.0 args))))
	  (funcs-equal? "scale-and-ramp" 
			(lambda args (apply scale-sound-by (cons 0.0 args)))
			(lambda args (apply ramp-channel (cons 0.0 (cons 0.0 args)))))
	  (funcs-equal? "scale-and-ramp" 
			(lambda args (apply scale-sound-by (cons 2.0 args)))
			(lambda args (apply ramp-channel (cons 2.0 (cons 2.0 args)))))
	  (funcs-equal? "smooth-sound"
			(lambda args (apply smooth-sound args))
			(lambda args (apply smooth-channel args)))
	  (funcs-equal? "env-sound"
			(lambda args (apply env-sound (list (list 0 0 1 1)
							    (if (> (length args) 0) (car args) 0)
							    (if (and (> (length args) 1) 
								     (number? (cadr args)))
								(1- (cadr args))
								#f)
							    1.0
							    (if (> (length args) 2)
								(caddr args)
								(selected-sound)))))
			(lambda args (apply env-channel 
					    (cons (make-env :envelope (list 0 0 1 1) 
							    :end (if (and (> (length args) 1)
									  (number? (cadr args)))
								     (cadr args)
								     (1- (frames (if (> (length args) 2)
										     (caddr args)
										     (selected-sound))))))
						  args))))
	  (funcs-equal? "map-chan"
			(lambda args (map-chan (lambda (n) (* n 2)) 
					       (if (> (length args) 0) (car args) 0)
					       (if (and (> (length args) 1) 
							(number? (cadr args)))
						   (1- (cadr args))
						   #f)
					       "testing..."
					       (if (> (length args) 2)
						   (caddr args)
						   (selected-sound))))
			(lambda args (map-channel (lambda (n) (* n 2))
						  (if (> (length args) 0) (car args) 0)
						  (if (and (> (length args) 1) 
							   (number? (cadr args)))
						      (1- (cadr args))
						      #f)
					       (if (> (length args) 2)
						   (caddr args)
						   (selected-sound)))))

	  (funcs-equal? "src-sound"
			(lambda args (apply src-sound (list 2.0 1.0 (if (> (length args) 2) (caddr args) #f))))
			(lambda args (apply src-channel (cons 2.0 args))))
	  (funcs-equal? "reverse-sound"
			(lambda args (apply reverse-sound (list (if (> (length args) 2) (caddr args) #f))))
			(lambda args (apply reverse-channel args)))
	  (funcs-equal? "mix"
			(lambda args (apply mix (list "pistol.snd" 0 0 (if (> (length args) 2) (caddr args) #f))))
			(lambda args (apply mix-channel "pistol.snd" args)))
	  (funcs-equal? "insert-sound"
			(lambda args (apply insert-sound (list "pistol.snd" 0 0 (if (> (length args) 2) (caddr args) #f))))
			(lambda args (apply insert-channel "pistol.snd" args)))
	  (funcs-equal? "ptree-channel"
			(lambda args scale-channel (cons 2.0 args))
			(lambda args ptree-channel (cons (lambda (y) (* y 2.0)) args)))
	  (funcs-equal? "ptree-channel"
			(lambda args map-channel (cons (lambda (n) (+ n .2)) args))
			(lambda args ptree-channel (cons (lambda (y) (+ y .2)) args)))
	  (close-sound oboe0)
	  (close-sound oboe1))

	(let ((ind (open-sound "oboe.snd")))
	  (scale-by .5)
	  (scale-by .25)
	  (undo)
	  (for-each
	   (lambda (func name)
	     (let ((tag (catch #t (lambda () (func ind)) (lambda args (car args)))))
	       (if (not (eq? tag 'no-such-edit))
		   (snd-display ";~A upon about-to-be-clobbered data: ~A" name tag))))
	   (list (lambda (n) (scale-channel .5 0 #f n 0 2))
		 (lambda (n) (env-channel '(0 0 1 1 2 0) 0 #f n 0 2))
		 (if (> (optimization) 0)
		     (lambda (n) (ptree-channel (lambda (y) y) 0 #f n 0 2 #f))
		     (lambda (n) (pad-channel 0 100 n 0 2)))
		 ;;(lambda (n) (map-channel (lambda (y) y) 0 #f n 0 2)) ; actually will work
		 (lambda (n) (pad-channel 100 100 n 0 2))
		 (lambda (n) (delete-sample 100 n 0 2))
		 (lambda (n) (set! (sample 100 n 0 2) .5))
		 )
	   (list "scale" "env" "ptree" 
		 ;;"map" 
		 "pad" "delete" "set"
		 ))
	  (close-sound ind))

	(let ((ind (new-sound "test.snd")))
	  (insert-silence 0 1000)
	  (map-chan (lambda (y) 1.0))
	  (ptree-channel (lambda (y) (* y .5)))
	  (insert-silence 100 200)
	  (if (fneq (sample 500) 0.5)
	      (snd-display ";trailing ptree rmp0 trouble: ~A" (sample 500)))
	  (revert-sound ind)

	  (insert-silence 0 1000)
	  (map-chan (lambda (y) 1.0))
	  (scale-by .5)
	  (ptree-channel (lambda (y) (* y .5)))
	  (insert-silence 100 200)
	  (if (fneq (sample 500) 0.25)
	      (snd-display ";trailing ptree scaled rmp0 trouble: ~A" (sample 500)))
	  (scale-by 2.0)
	  (if (fneq (sample 500) 0.5)
	      (snd-display ";trailing ptree post scaled rmp0 trouble: ~A" (sample 500)))
	  (revert-sound ind)

	  (insert-silence 0 1000)
	  (map-chan (lambda (y) 1.0))
	  (ptree-channel (lambda (y) (* y .5)))
	  (delete-samples 100 200)
	  (if (fneq (sample 500) 0.5)
	      (snd-display ";trailing ptree post delete rmp0 trouble: ~A" (sample 500)))
	  (if (fneq (sample 0) 0.5)
	      (snd-display ";trailing ptree pre delete rmp0 trouble: ~A" (sample 500)))
	  (revert-sound ind)

	  (insert-silence 0 1000)
	  (map-chan (lambda (y) 1.0))
	  (ptree-channel (lambda (y) (* y .5)))
	  (set! (sample 100) .95)
	  (if (fneq (sample 500) 0.5)
	      (snd-display ";trailing ptree post change rmp0 trouble: ~A" (sample 500)))
	  (if (fneq (sample 0) 0.5)
	      (snd-display ";trailing ptree pre change rmp0 trouble: ~A" (sample 500)))
	  (revert-sound ind)

	  (insert-silence 0 1000)
	  (map-chan (lambda (y) 1.0))
	  (ptree-channel (lambda (y) (* y .1)))
	  (delete-samples 100 200)
	  (if (fneq (sample 500) 0.1)
	      (snd-display ";trailing ptree post delete(1) loc trouble: ~A" (sample 500)))
	  (if (fneq (sample 0) 0.1)
	      (snd-display ";trailing ptree pre delete(1) loc trouble: ~A" (sample 500)))

	  (insert-silence 0 1000)
	  (map-chan (lambda (y) 1.0))
	  (scale-by .5)
	  (ptree-channel (lambda (y) (* y .5)))
	  (scale-by .5)
	  (if (fneq (sample 500) 0.125)
	      (snd-display ";scl-ptree-scl trouble: ~A" (sample 500)))
	  (revert-sound ind)

	  (insert-silence 0 1000)
	  (map-chan (lambda (y) 1.0))
	  (ptree-channel (lambda (y) (* y .5)))
	  (env-sound '(0 0 1 1 2 0))
	  (if (or (fneq (sample 0) 0.0)
		  (fneq (sample 999) 0.0005)
		  (fneq (sample 500) 0.5)
		  (fneq (sample 250) 0.25)
		  (fneq (sample 750) 0.25))
	      (snd-display ";ptree-env trouble: ~A"
			   (map sample (list 0 999 500 250 750))))

	  (insert-silence 0 1000)
	  (map-chan (lambda (y) 1.0))
	  (ptree-channel (lambda (y) (* y .5)))
	  (make-selection 100 200)
	  (scale-selection-by .5)
	  (if (or (fneq (sample 500) 0.5)
		  (fneq (sample 50) 0.5)
		  (fneq (sample 150) 0.25))
	      (snd-display ";ptree-scl-selection trouble: ~A" (map sample (list 500 50 150))))
	  (revert-sound ind)
	  (close-sound ind))

	(let ((ind (open-sound "oboe.snd"))
	      (ind1 (new-sound "test.snd"))
	      (old-save-dir (save-dir)))
	  (set! (save-dir) #f)
	  (map-channel (lambda (y) 0.5) 0 100 ind1 0)
	  (save-sound ind1)
	  (close-sound ind1)
	  (insert-sound "test.snd" 12345)
	  (let ((vals (channel->vct (- 12345 50) 200 ind 0)))
	    (save-state "hiho.scm")
	    (close-sound ind)
	    (map forget-region (regions))
	    (load "hiho.scm")
	    (set! ind (find-sound "oboe.snd"))
	    (if (not (sound? ind))
		(snd-display ";save hiho failed?")
		(let ((new-vals (channel->vct (- 12345 50) 200 ind 0)))
		  (if (not (vequal vals new-vals))
		      (snd-display ";save state hiho vals: ~A ~A" vals new-vals))))
	    (close-sound ind))
	  (set! (save-dir) old-save-dir))

	(let ((ind (open-sound "oboe.snd")))
	  (for-each
	   (lambda (func val name)
	     (func ind)
	     (save-state "s61.scm")
	     (close-sound ind)
	     (map forget-region (regions))
	     (load "s61.scm")
	     (set! ind (find-sound "oboe.snd"))
	     (if (fneq (maxamp ind) val)
		 (snd-display ";saved ~A max: ~A" name (maxamp ind)))
	     (revert-sound ind))
	   (list (lambda (ind)
		   (ptree-channel (lambda (y) (* y .5))))
		 (lambda (ind)
		   (ptree-channel (lambda (y data forward)
				    (declare (y real) (data vct) (forward boolean))
				    (* y (vct-ref data 0)))
				  0 #f ind 0 #f #f
				  (lambda (pos dur)
				    (vct 0.5))))
		 (lambda (ind)
		   (scale-by 0.0)
		   (pad-channel 0 10 ind 0 0))
		 (lambda (ind)
		   (scale-by 0.0)
		   (scale-channel 0.5 0 #f ind 0 0))
		 (lambda (ind)
		   (scale-by 0.0)
		   (env-channel '(0 0 1 .5 2 0) 0 #f ind 0 0))
		 (lambda (ind)
		   (scale-by 0.0)
		   (set! (sample 0 ind 0 0) 0.9))
		 (lambda (ind)
		   (scale-by 0.0)
		   (delete-samples 0 100 ind 0 0))
		 (lambda (ind)
		   (scale-by 0.0)
		   (ptree-channel (lambda (y) (* y 0.5)) 0 #f ind 0 0 #f))
		 (lambda (ind)
		   (scale-by 0.0)
		   (ptree-channel (lambda (y data forward)
				    (declare (y real) (data vct) (forward boolean))
				    (* y (vct-ref data 0)))
				  0 #f ind 0 0 #f
				  (lambda (pos dur)
				    (vct 0.5))))
		 (lambda (ind)
		   (insert-samples 100 10 (make-vct 10 0.1) ind 0 0))	  
		 )
	   (list .0736 .0736 .147 .0736 .0736 0.9 .147 .0736 .0736 .147)
	   (list "ptree" "ptree with init" "pad edpos" "scl edpos" "env edpos" 
		 "set edpos" "delete edpos" "ptree edpos" "init ptree edpos" "insert edpos"))
	  (close-sound ind))

	(let ((ind-ptree (new-sound "test1.snd"))
	      (ind-closure (new-sound "test2.snd"))
	      (ind-map (new-sound "test3.snd")))
	  (for-each
	   (lambda (m)
	     (insert-silence 0 9 m 0)
	     (map-channel (lambda (y) 1.0) 0 #f m 0))
	   (list ind-ptree ind-closure ind-map))
	  (for-each
	   (lambda (pt cl mp vc name)
	     (let ((edpt (edit-position ind-ptree 0))
		   (edcl (edit-position ind-closure 0))
		   (edmp (edit-position ind-map 0)))
	       (pt ind-ptree)
	       (cl ind-closure)
	       (mp ind-map)
	       (let ((ptv (samples->vct 0 (frames ind-ptree) ind-ptree 0))
		     (ptc (samples->vct 0 (frames ind-closure) ind-closure 0))
		     (ptm (samples->vct 0 (frames ind-map) ind-map 0)))
		 (if (not (vequal ptv vc)) (snd-display ";~A ptree: ~A ~A" name ptv vc))
		 (if (not (vequal ptc vc)) (snd-display ";~A closure: ~A ~A" name ptc vc))
		 (if (not (vequal ptm vc)) (snd-display ";~A map: ~A ~A" name ptm vc)))
	       
	       (let ((ptv (reversed-read ind-ptree 0))
		     (ptc (reversed-read ind-closure 0))
		     (ptm (reversed-read ind-map 0)))
		 (if (not (vequal ptv vc)) (snd-display ";reversed ~A ptree: ~A ~A" name ptv vc))
		 (if (not (vequal ptc vc)) (snd-display ";reversed ~A closure: ~A ~A" name ptc vc))
		 (if (not (vequal ptm vc)) (snd-display ";reversed ~A map: ~A ~A" name ptm vc)))
	       
	       (let ((ptv (zigzag-read ind-ptree 0))
		     (ptc (zigzag-read ind-closure 0))
		     (ptm (zigzag-read ind-map 0)))
		 (if (not (vequal ptv vc)) (snd-display ";zigzag ~A ptree: ~A ~A" name ptv vc))
		 (if (not (vequal ptc vc)) (snd-display ";zigzag ~A closure: ~A ~A" name ptc vc))
		 (if (not (vequal ptm vc)) (snd-display ";zigzag ~A map: ~A ~A" name ptm vc)))
	       
	       (set! (edit-position ind-ptree 0) edpt)
	       (set! (edit-position ind-closure 0) edcl)
	       (set! (edit-position ind-map 0) edmp)))
	   
	   (list 
	    (lambda (ind) 
	      (ptree-channel (lambda (y) 1.0) 0 #f ind 0 #f #f))
	    (lambda (ind) 
	      (scale-by 0.5 ind 0) 
	      (ptree-channel (lambda (y) y) 0 #f ind 0 #f #f))
	    (lambda (ind)
	      (ptree-channel (lambda (y) y) 0 #f ind 0 #f #f)
	      (scale-by 0.5 ind 0))
	    (lambda (ind)
	      (ptree-channel (lambda (y) (* y 0.5)) 0 #f ind 0 #f #f)
	      (delete-samples 2 3 ind 0))
	    (lambda (ind)
	      (ptree-channel (lambda (y) (* y 0.5)) 0 #f ind 0 #f #f)
	      (set! (samples 2 3 ind 0) (make-vct 3)))
	    (lambda (ind)
	      (set! (samples 0 10 ind 0) (vct 0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))
	      (ptree-channel (lambda (y) (* y 0.5)) 0 #f ind 0 #f #f)
	      (delete-sample 2 ind 0)
	      (delete-sample 6 ind 0))
	    
	    (lambda (ind) 
	      (ptree-channel (lambda (y) 1.0) 2 #f ind 0 #f #f))
	    (lambda (ind) 
	      (scale-by 0.5 ind 0) 
	      (ptree-channel (lambda (y) y) 2 #f ind 0 #f #f))
	    (lambda (ind)
	      (ptree-channel (lambda (y) y) 2 #f ind 0 #f #f)
	      (scale-by 0.5 ind 0))
	    (lambda (ind)
	      (ptree-channel (lambda (y) (* y 0.5)) 2 #f ind 0 #f #f)
	      (delete-samples 2 3 ind 0))
	    (lambda (ind)
	      (ptree-channel (lambda (y) (* y 0.5)) 2 #f ind 0 #f #f)
	      (set! (samples 2 3 ind 0) (make-vct 3)))
	    (lambda (ind)
	      (set! (samples 0 10 ind 0) (vct 0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))
	      (ptree-channel (lambda (y) (* y 0.5)) 2 #f ind 0 #f #f)
	      (delete-sample 2 ind 0)
	      (delete-sample 6 ind 0))

	    (lambda (ind)
	      ;; forced-fallback
	      (ptree-channel (let ((sym (list 1))) (lambda (y) (if (eq? (car sym) 1) (* y 0.5) y))) 2 3 ind 0 #f #f))
	    (lambda (ind)
	      ;; forced-fallback
	      (ptree-channel (let ((sym (list 1))) (lambda (y) (if (eq? (car sym) 1) (* y 0.5) y))) 0 #f ind 0 #f #f))

	    (lambda (ind)
	      (scale-by 0.0)
	      (ptree-channel (lambda (y) y) 0 #f ind 0 2 #f)
	      (scale-by 0.5 ind 0))

	    )
	   
	   (list 
	    (lambda (ind) 
	      (ptree-channel (lambda (y data dir) 
			       (declare (y real) (data vct) (dir boolean)) 
			       1.0) 
			     0 #f ind 0 #f #f 
			     (lambda (pos dur) (vct 0.0))))
	    (lambda (ind) 
	      (scale-by 0.5 ind 0) 
	      (ptree-channel (lambda (y data dir) 
			       (declare (y real) (data vct) (dir boolean))
			       y) 
			     0 #f ind 0 #f #f 
			     (lambda (pos dur) (vct 0.0))))
	    (lambda (ind) 
	      (ptree-channel (lambda (y data dir) 
			       (declare (y real) (data vct) (dir boolean))
			       y) 
			     0 #f ind 0 #f #f 
			     (lambda (pos dur) (vct 0.0)))
	      (scale-by 0.5 ind 0) )
	    (lambda (ind) 
	      (ptree-channel (lambda (y data dir) 
			       (declare (y real) (data vct) (dir boolean))
			       (* y (vct-ref data 0)))
			     0 #f ind 0 #f #f 
			     (lambda (pos dur) (vct 0.5)))
	      (delete-samples 2 3 ind 0))
	    (lambda (ind) 
	      (ptree-channel (lambda (y data dir) 
			       (declare (y real) (data vct) (dir boolean))
			       (* y (vct-ref data 0)))
			     0 #f ind 0 #f #f 
			     (lambda (pos dur) (vct 0.5)))
	      (set! (samples 2 3 ind 0) (make-vct 3)))
	    (lambda (ind) 
	      (set! (samples 0 10 ind 0) (vct 0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))
	      (ptree-channel (lambda (y data dir) 
			       (declare (y real) (data vct) (dir boolean))
			       (* y (vct-ref data 0)))
			     0 #f ind 0 #f #f 
			     (lambda (pos dur) (vct 0.5)))
	      (delete-sample 2 ind 0)
	      (delete-sample 6 ind 0))
	    
	    (lambda (ind) 
	      (ptree-channel (lambda (y data dir) 
			       (declare (y real) (data vct) (dir boolean)) 
			       1.0) 
			     2 #f ind 0 #f #f 
			     (lambda (pos dur) (vct 0.0))))
	    (lambda (ind) 
	      (scale-by 0.5 ind 0) 
	      (ptree-channel (lambda (y data dir) 
			       (declare (y real) (data vct) (dir boolean))
			       y) 
			     2 #f ind 0 #f #f 
			     (lambda (pos dur) (vct 0.0))))
	    (lambda (ind) 
	      (ptree-channel (lambda (y data dir) 
			       (declare (y real) (data vct) (dir boolean))
			       y) 
			     2 #f ind 0 #f #f 
			     (lambda (pos dur) (vct 0.0)))
	      (scale-by 0.5 ind 0) )
	    (lambda (ind) 
	      (ptree-channel (lambda (y data dir) 
			       (declare (y real) (data vct) (dir boolean))
			       (* y (vct-ref data 0)))
			     2 #f ind 0 #f #f 
			     (lambda (pos dur) (vct 0.5)))
	      (delete-samples 2 3 ind 0))
	    (lambda (ind) 
	      (ptree-channel (lambda (y data dir) 
			       (declare (y real) (data vct) (dir boolean))
			       (* y (vct-ref data 0)))
			     2 #f ind 0 #f #f 
			     (lambda (pos dur) (vct 0.5)))
	      (set! (samples 2 3 ind 0) (make-vct 3)))
	    (lambda (ind) 
	      (set! (samples 0 10 ind 0) (vct 0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))
	      (ptree-channel (lambda (y data dir) 
			       (declare (y real) (data vct) (dir boolean))
			       (* y (vct-ref data 0)))
			     2 #f ind 0 #f #f 
			     (lambda (pos dur) (vct 0.5)))
	      (delete-sample 2 ind 0)
	      (delete-sample 6 ind 0))

	    (lambda (ind)
	      ;; forced-fallback
	      (ptree-channel (let ((sym (list 1))) 
			       (lambda (y data dir)
				 (declare (y real) (data vct) (dir boolean))
				 (if (eq? (car sym) 1) (* y 0.5) (* y (vct-ref data 0)))))
			     2 3 ind 0 #f #f
			     (lambda (pos dur)
			       (vct 1.0))))
	    (lambda (ind)
	      ;; forced-fallback
	      (ptree-channel (let ((sym (list 1))) 
			       (lambda (y data dir)
				 (declare (y real) (data vct) (dir boolean))
				 (if (eq? (car sym) 1) (* y 0.5) (* y (vct-ref data 0)))))
			     0 #f ind 0 #f #f
			     (lambda (pos dur)
			       (vct 1.0))))
	    (lambda (ind) 
	      (scale-by 0.0)
	      (ptree-channel (lambda (y data dir) 
			       (declare (y real) (data vct) (dir boolean))
			       y) 
			     0 #f ind 0 2 #f 
			     (lambda (pos dur) (vct 0.0)))
	      (scale-by 0.5 ind 0) )

	    )
	   
	   (list 
	    (lambda (ind) 
	      (map-channel (lambda (y) 1.0) 0 #f ind 0))
	    (lambda (ind)
	      (scale-by 0.5 ind 0)
	      (map-channel (lambda (y) y) 0 #f ind 0))
	    (lambda (ind)
	      (map-channel (lambda (y) y) 0 #f ind 0)
	      (scale-by 0.5 ind 0))
	    (lambda (ind)
	      (map-channel (lambda (y) (* y 0.5)) 0 #f ind 0)
	      (delete-samples 2 3 ind 0))
	    (lambda (ind)
	      (map-channel (lambda (y) (* y 0.5)) 0 #f ind 0)
	      (set! (samples 2 3 ind 0) (make-vct 3)))
	    (lambda (ind)
	      (set! (samples 0 10 ind 0) (vct 0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))
	      (map-channel (lambda (y) (* y 0.5)) 0 #f ind 0)
	      (delete-sample 2 ind 0)
	      (delete-sample 6 ind 0))
	    
	    (lambda (ind) 
	      (map-channel (lambda (y) 1.0) 2 #f ind 0))
	    (lambda (ind)
	      (scale-by 0.5 ind 0)
	      (map-channel (lambda (y) y) 2 #f ind 0))
	    (lambda (ind)
	      (map-channel (lambda (y) y) 2 #f ind 0)
	      (scale-by 0.5 ind 0))
	    (lambda (ind)
	      (map-channel (lambda (y) (* y 0.5)) 2 #f ind 0)
	      (delete-samples 2 3 ind 0))
	    (lambda (ind)
	      (map-channel (lambda (y) (* y 0.5)) 2 #f ind 0)
	      (set! (samples 2 3 ind 0) (make-vct 3)))
	    (lambda (ind)
	      (set! (samples 0 10 ind 0) (vct 0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))
	      (map-channel (lambda (y) (* y 0.5)) 2 #f ind 0)
	      (delete-sample 2 ind 0)
	      (delete-sample 6 ind 0))

	    (lambda (ind)
	      ;; forced-fallback
	      (map-channel (let ((sym (list 1))) (lambda (y) (if (eq? (car sym) 1) (* y 0.5) y))) 2 3 ind 0))
	    (lambda (ind)
	      ;; forced-fallback
	      (map-channel (let ((sym (list 1))) (lambda (y) (if (eq? (car sym) 1) (* y 0.5) y))) 0 #f ind 0))
	    (lambda (ind)
	      (scale-by 0.0)
	      (map-channel (lambda (y) y) 0 #f ind 0 2)
	      (scale-by 0.5 ind 0))

	    )
	   
	   (list 
	    (make-vct 10 1.0)
	    (make-vct 10 0.5)
	    (make-vct 10 0.5)
	    (make-vct 7 0.5)
	    (vct 0.5 0.5 0.0 0.0 0.0 0.5 0.5 0.5 0.5 0.5)
	    (vct-scale! (vct 0.0 1.0 3.0 4.0 5.0 6.0 8.0 9.0) 0.5)
	    
	    (make-vct 10 1.0)
	    (make-vct 10 0.5)
	    (make-vct 10 0.5)
	    (vct 1.0 1.0 0.5 0.5 0.5 0.5 0.5)
	    (vct 1.0 1.0 0.0 0.0 0.0 0.5 0.5 0.5 0.5 0.5)
	    (vct 0.0 1.0 1.5 2.0 2.5 3.0 4.0 4.5)

	    (vct 1.0 1.0 0.5 0.5 0.5 1.0 1.0 1.0 1.0 1.0)
	    (make-vct 10 0.5)
	    (make-vct 10 0.5)
	    )
	   
	   (list 
	    "identity"
	    "half"
	    "flah"
	    "2:3 delete"
	    "2:3 change"
	    "step delete"
	    
	    "2 identity"
	    "2 half"
	    "2 flah"
	    "2 2:3 delete"
	    "2 2:3 change"
	    "2 step delete"

	    "fallback 1"
	    "fallback 2"
	    "edpos"
	    )
	   )

	  (for-each
	   (lambda (m)
	     (close-sound m))
	   (list ind-ptree ind-closure ind-map))
	  )

      (let ((ind (new-sound "test.snd")))
	(map-chan (lambda (y) (random 1.0)) 0 10)
	(ramp-channel 0.0 1.0)
	(zigzag-check "ramp" ind 0)
	(undo)

	(ptree-channel (lambda (y) (* y 0.5)))
	(zigzag-check "ptree" ind 0)
	(undo)
	(ptree-channel (lambda (y) (* y 0.5)))
	(ptree-channel (lambda (y) (* y 1.5)))
	(zigzag-check "ptree2" ind 0)
	(ramp-channel 0.0 1.0)
	(zigzag-check "ramp-ptree2" ind 0)
	(ramp-channel 0.0 1.0)
	(zigzag-check "ramp2-ptree2" ind 0)
	(ramp-channel 0.0 1.0)
	(zigzag-check "ramp3-ptree2" ind 0)
	(undo 3)
	(xramp-channel 0.0 1.0 32.0)
	(zigzag-check "xramp-ptree2" ind 0)
	(undo 3)

	(scale-channel 0.0)
	(ptree-channel (lambda (y) (+ y 0.5)))
	(zigzag-check "ptree-zero" ind 0)
	(undo)
	(ptree-channel (lambda (y) (+ y 0.5)))
	(ptree-channel (lambda (y) (+ y 1.5)))
	(zigzag-check "ptree2-zero" ind 0)
	(ramp-channel 0.0 1.0)
	(zigzag-check "ramp-ptree2-zero" ind 0)
	(ramp-channel 0.0 1.0)
	(zigzag-check "ramp2-ptree2-zero" ind 0)
	(ramp-channel 0.0 1.0)
	(zigzag-check "ramp3-ptree2-zero" ind 0)
	(undo 3)
	(xramp-channel 0.0 1.0 32.0)
	(zigzag-check "xramp-ptree2-zero" ind 0)
	(undo 4)

	(ramp-channel 0.0 1.0)
	(ramp-channel 1.0 0.0)
	(zigzag-check "ramp2" ind 0)
	(undo 2)
	(xramp-channel 0.0 1.0 3.0)
	(xramp-channel 1.0 0.0 0.3)
	(zigzag-check "xramp2" ind 0)
	(undo 2)
	(xramp-channel 0.0 1.0 3.0)
	(xramp-channel 1.0 0.0 0.3)
	(ramp-channel 0.0 1.0)
	(zigzag-check "ramp+xramp2" ind 0)
	(undo 3)
	(ramp-channel 0.0 1.0)
	(xramp-channel 1.0 0.0 0.3)
	(ramp-channel 0.0 1.0)
	(zigzag-check "ramp+xramp+ramp" ind 0)
	(undo 3)
	(ramp-channel 0.0 1.0)
	(ramp-channel 1.0 0.0)
	(ramp-channel 0.1 0.8)
	(zigzag-check "ramp3" ind 0)
	(undo 3)
	(xramp-channel 0.0 1.0 32.0)
	(zigzag-check "xramp" ind 0)
	(undo)
	(scale-channel 0.5)
	(set! (sample 4) .5)
	(delete-sample 2)
	(insert-sample 1 .1)
	(zigzag-check "simple" ind 0)
	(undo 4)
	(ramp-channel 0.0 1.0)
	(xramp-channel 1.0 0.0 32.0)
	(zigzag-check "xramp+ramp" ind 0)
	(undo 2)
	(xramp-channel 0.0 1.0 32.0)
	(ramp-channel 1.0 0.0)
	(zigzag-check "ramp+xramp" ind 0)
	(undo 2)
	(xramp-channel 0.0 1.0 32.0)
	(ramp-channel 1.0 0.0)
	(ramp-channel 1.0 0.0)
	(zigzag-check "ramp2+xramp" ind 0)
	(undo 3)
	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y) (* y 0.5)))
	(zigzag-check "ptree+ramp" ind 0)
	(undo 2)
	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y) (* y 0.5)))
	(zigzag-check "ptree+ramp2" ind 0)
	(undo 3)
	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y) (+ y 0.5)))
	(zigzag-check "ptree+ramp3" ind 0)
	(undo 4)
	(ramp-channel 0.0 1.0)
	(xramp-channel 0.0 1.0 32.0)
	(ptree-channel (lambda (y) (* y 0.5)))
	(zigzag-check "ptree+xramp+ramp" ind 0)
	(undo 1)
	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y) (* y 0.5)))
	(zigzag-check "ptree+ramp+xramp+ramp" ind 0)
	(undo 4)

	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y) (* y 0.5)))
	(ramp-channel 0.0 1.0)
	(zigzag-check "ramp+ptree+ramp" ind 0)
	(ramp-channel 0.0 1.0)
	(zigzag-check "ramp2+ptree+ramp" ind 0)
	(undo 2)
	(xramp-channel 0.0 1.0 .3)
	(zigzag-check "xramp+ptree+ramp" ind 0)
	(undo 3)
	(xramp-channel 0.0 1.0 .3)
	(ptree-channel (lambda (y) (* y 0.5)))
	(ramp-channel 0.0 1.0)
	(zigzag-check "ramp+ptree+xramp" ind 0)
	(ramp-channel 0.0 1.0)
	(zigzag-check "ramp2+ptree+xramp" ind 0)
	(undo 4)
	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y) (* y 0.5)))
	(ramp-channel 0.0 1.0)
	(zigzag-check "ramp+ptree+ramp2" ind 0)
	(undo 4)

	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y data forward)
			 (declare (y real) (data vct) (forward boolean))
			 (* y (vct-ref data 0)))
		       0 (frames) ind 0 #f #f
		       (lambda (pos dur)
			 (vct 0.5)))
	(ramp-channel 0.0 1.0)
	(zigzag-check "ramp+ptreec+ramp" ind 0)
	(ramp-channel 0.0 1.0)
	(zigzag-check "ramp2+ptreec+ramp" ind 0)
	(undo 2)
	(xramp-channel 0.0 1.0 .3)
	(zigzag-check "xramp+ptreec+ramp" ind 0)
	(undo 3)
	(xramp-channel 0.0 1.0 .3)
	(ptree-channel (lambda (y data forward)
			 (declare (y real) (data vct) (forward boolean))
			 (* y (vct-ref data 0)))
		       0 (frames) ind 0 #f #f
		       (lambda (pos dur)
			 (vct 0.5)))
	(ramp-channel 0.0 1.0)
	(zigzag-check "ramp+ptreec+xramp" ind 0)
	(ramp-channel 0.0 1.0)
	(zigzag-check "ramp2+ptreec+xramp" ind 0)
	(undo 4)
	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y data forward)
			 (declare (y real) (data vct) (forward boolean))
			 (* y (vct-ref data 0)))
		       0 (frames) ind 0 #f #f
		       (lambda (pos dur)
			 (vct 0.5)))
	(ramp-channel 0.0 1.0)
	(zigzag-check "ramp+ptreec+ramp2" ind 0)
	(undo 4)

	(pad-channel 2 3)
	(zigzag-check "zero" ind 0)
	(undo)
	(ptree-channel (lambda (y data forward)
			 (declare (y real) (data vct) (forward boolean))
			 (* y (vct-ref data 0)))
		       0 (frames) ind 0 #f #f
		       (lambda (pos dur)
			 (vct 0.5)))
	(zigzag-check "ptree+closure" ind 0)
	(undo)
	(ramp-channel 0.0 1.0)
	(cosine-channel-via-ptree 0 (frames) ind 0 #f)
	(zigzag-check "ptree+ramp" ind 0)
	(undo 2)
	(xramp-channel 0.0 1.0 .3)
	(cosine-channel-via-ptree 0 (frames) ind 0 #f)
	(zigzag-check "ptree+xramp" ind 0)
	(undo 2)
	(ramp-channel 0.0 1.0)
	(ramp-channel 1.0 0.0)
	(cosine-channel-via-ptree 0 (frames) ind 0 #f)
	(zigzag-check "ptree+ramp2" ind 0)
	(undo 3)
	(cosine-channel-via-ptree 0 (frames) ind 0 #f)
	(ptree-channel (lambda (y) (* y 0.5)))
	(zigzag-check "ptree+ptreec" ind 0)
	(undo 2)
	(scale-channel 0.0 3 4)
	(cosine-channel-via-ptree 0 (frames) ind 0 #f)
	(ptree-channel (lambda (y) (* y 0.5)))
	(zigzag-check "ptree+ptreec+zero" ind 0)
	(undo 3)

	(ramp-channel 0.0 1.0)
	(xen-channel (lambda (y data forward)
		       (+ y (list-ref data 0)))
		     0 (frames) ind 0 #f #f
		     (lambda (pos dur)
		       (list 0.5)))
	(zigzag-check "xen" ind 0)

	;; zero checks
	(undo 2)
	(scale-channel 0.0 3 4)
	(ptree-channel (lambda (y) (* y 0.5)))
	(zigzag-check "ptree+zero" ind 0)
	(undo 2)
	(scale-channel 0.0 3 4)
	(ptree-channel (lambda (y) (* y 0.5)))
	(ptree-channel (lambda (y) (+ y .1)))
	(zigzag-check "ptree2+zero" ind 0)
	(undo 3)
	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y) (* y 0.5)))
	(ptree-channel (lambda (y) (+ y .1)))
	(zigzag-check "ptree2+ramp" ind 0)
	(undo 3)
	(pad-channel 2 4)
	(ptree-channel (lambda (y) (* y 0.5)))
	(zigzag-check "ptree+pad" ind 0)
	(undo 2)
	(scale-channel 0.0 3 4)
	(cosine-channel-via-ptree 0 (frames) ind 0 #f)
	(zigzag-check "ptree+closure+zero" ind 0)
	(undo 2)
	(ramp-channel 0.0 1.0)
	(scale-channel 0.0 2 4)
	(cosine-channel-via-ptree 0 (frames) ind 0 #f)
	(zigzag-check "ptree+ramp+zero" ind 0)
	(undo 3)
	(scale-channel 0.0 3 4)
	(xen-channel (lambda (y data forward)
		       (let ((val (vct-ref data (1+ (vct-ref data 0)))))
			 (if forward
			     (vct-set! data 0 (1+ (vct-ref data 0)))
			     (vct-set! data 0 (1- (vct-ref data 0))))
			 val))
		     0 (frames) ind 0 #f #f
		     (lambda (pos dur)
		       (vct pos .1 .2 .3 .4 .5 .6 .7 .8 .9 1.0 1.1 1.2 1.3 1.4)))
	(zigzag-check "xen+zero" ind 0)
	(undo 2)
	(xramp-channel 0.0 1.0 .025)
	(xen-channel (lambda (y data forward)
		       (let ((val (vct-ref data (1+ (vct-ref data 0)))))
			 (if forward
			     (vct-set! data 0 (1+ (vct-ref data 0)))
			     (vct-set! data 0 (1- (vct-ref data 0))))
			 val))
		     0 (frames) ind 0 #f #f
		     (lambda (pos dur)
		       (vct pos .1 .2 .3 .4 .5 .6 .7 .8 .9 1.0 1.1 1.2 1.3 1.4)))
	(zigzag-check "xen+xramp" ind 0)
	(undo 2)
	(ramp-channel 0.0 1.0)
	(ramp-channel 1.0 0.0)
	(xen-channel (lambda (y data forward)
		       (let ((val (vct-ref data (1+ (vct-ref data 0)))))
			 (if forward
			     (vct-set! data 0 (1+ (vct-ref data 0)))
			     (vct-set! data 0 (1- (vct-ref data 0))))
			 val))
		     0 (frames) ind 0 #f #f
		     (lambda (pos dur)
		       (vct pos .1 .2 .3 .4 .5 .6 .7 .8 .9 1.0 1.1 1.2 1.3 1.4)))
	(zigzag-check "xen+ramp2" ind 0)
	(undo 3)
	(revert-sound ind)
	(map-chan (lambda (y) (random 1.0)) 0 10)
	(ramp-channel 0.0 1.0)
	(xen-channel (lambda (y data forward)
		       (let ((val (vct-ref data (1+ (vct-ref data 0)))))
			 (if forward
			     (vct-set! data 0 (1+ (vct-ref data 0)))
			     (vct-set! data 0 (1- (vct-ref data 0))))
			 val))
		     0 (frames) ind 0 #f #f
		     (lambda (pos dur)
		       (vct pos .1 .2 .3 .4 .5 .6 .7 .8 .9 1.0 1.1 1.2 1.3 1.4)))
	(ramp-channel 0.0 1.0)
	(zigzag-check "ramp+xen+ramp" ind 0)
	(ramp-channel 0.0 1.0)
	(zigzag-check "ramp+xen+ramp2" ind 0)
	(undo 3)
	(ramp-channel 0.0 1.0)
	(xen-channel (lambda (y data forward)
		       (let ((val (vct-ref data (1+ (vct-ref data 0)))))
			 (if forward
			     (vct-set! data 0 (1+ (vct-ref data 0)))
			     (vct-set! data 0 (1- (vct-ref data 0))))
			 val))
		     0 (frames) ind 0 #f #f
		     (lambda (pos dur)
		       (vct pos .1 .2 .3 .4 .5 .6 .7 .8 .9 1.0 1.1 1.2 1.3 1.4)))
	(ramp-channel 0.0 1.0)
	(zigzag-check "ramp2+xen+ramp" ind 0)
	(undo 4)
	(ptree-channel (lambda (y) (* y 0.5)))
	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y) (* y 0.25)))
	(zigzag-check "ptree+ramp+ptree" ind 0)
	(ramp-channel 0.0 1.0)
	(zigzag-check "ptree+ramp+ptree+ramp" ind 0)
	(ramp-channel 0.0 1.0)
	(zigzag-check "ptree+ramp+ptree+ramp2" ind 0)
	(undo 3)
	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y) (* y 0.25)))
	(zigzag-check "ptree+ramp2+ptree" ind 0)
	(ramp-channel 0.0 1.0)
	(zigzag-check "ptree+ramp2+ptree+ramp" ind 0)
	(undo 2)
	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y) (* y 0.25)))
	(zigzag-check "ptree+ramp3+ptree" ind 0)
	(undo 5)
	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y) (* y 0.25)))
	(ptree-channel (lambda (y) (* y 0.5)))
	(zigzag-check "ptree2+ramp2" ind 0)
	(undo 4)
	(xramp-channel 0.0 1.0 32)
	(ptree-channel (lambda (y) (* y 0.25)))
	(ptree-channel (lambda (y) (* y 0.5)))
	(zigzag-check "ptree2+xramp" ind 0)
	(undo)
	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(zigzag-check "ramp2+ptree+xramp" ind 0)
	(undo 4)
	(xramp-channel 0.0 1.0 32)
	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y) (* y 0.25)))
	(zigzag-check "prx" ind 0)
	(undo 3)
	(scale-channel 0.0)
	(ptree-channel (lambda (y) (* y 0.25)))
	(xramp-channel 0.0 1.0 32)
	(ramp-channel 0.0 1.0)
	(zigzag-check "rxpz" ind 0)
	(ramp-channel 0.0 1.0)
	(zigzag-check "r2xpz" ind 0)
	(undo 3)
	(ramp-channel 0.0 1.0)
	(xramp-channel 0.0 1.0 32)
	(zigzag-check "xrpz" ind 0)
	(ramp-channel 0.0 1.0)
	(zigzag-check "rxrpz" ind 0)
	(undo 5)
	(ptree-channel (lambda (y) (* y 0.25)))
	(ramp-channel 0.0 1.0)
	(xramp-channel 0.0 1.0 32)
	(ramp-channel 0.0 1.0)
	(zigzag-check "rxrp" ind 0)
	(undo 4)
	(ptree-channel (lambda (y) (* y 0.25)))
	(xramp-channel 0.0 1.0 32)
	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(zigzag-check "r2xp" ind 0)
	(undo 4)
	(scale-channel 0.0)
	(ptree-channel (lambda (y) (* y 0.25)))
	(xramp-channel 0.0 1.0 32)
	(ptree-channel (lambda (y) (* y 0.5)))
	(zigzag-check "pxpz" ind 0)
	(undo 2)
	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y) (* y 0.5)))
	(zigzag-check "prpz" ind 0)
	(undo)
	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y) (* y 0.5)))
	(zigzag-check "pr2pz" ind 0)
	(undo)
	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y) (* y 0.5)))
	(zigzag-check "pr3pz" ind 0)
	(undo 6)
	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y) (* y 0.5)))
	(ptree-channel (lambda (y) (* y 0.5)))
	(zigzag-check "p2r3" ind 0)
	(undo 4)
	(ptree-channel (lambda (y) (* y 0.5)))
	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y) (* y 0.5)))
	(zigzag-check "prpr" ind 0)
	(ramp-channel 0.0 1.0)
	(zigzag-check "rprpr" ind 0)
	(undo 2)
	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y) (* y 0.5)))
	(zigzag-check "pr2pr" ind 0)
	(undo 4)
	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y) (* y 0.5)))
	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y) (* y 0.5)))
	(zigzag-check "prpr2" ind 0)
	(undo 5)
	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y) (* y 0.5)))
	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y) (* y 0.5)))
	(zigzag-check "prpr" ind 0)
	(ramp-channel 0.0 1.0)
	(zigzag-check "rprpr" ind 0)
	(undo 5)
	(xramp-channel 0.0 1.0 32)
	(ramp-channel 0.0 1.0)
	(ramp-channel 0.0 1.0)
	(ptree-channel (lambda (y) (* y 0.5)))
	(zigzag-check "pr2x" ind 0)
	(undo 4)
	(xramp-channel 0.0 1.0 32)
	(xramp-channel 0.0 1.0 32)
	(ptree-channel (lambda (y) (* y 0.5)))
	(zigzag-check "px2" ind 0)
	(undo 3)
	(ptree-channel (lambda (y) (* y 0.5)))
	(xramp-channel 0.0 1.0 32)
	(ramp-channel 0.0 1.0)
	(zigzag-check "rxp" ind 0)
	(undo 2)
	(ramp-channel 0.0 1.0)
	(xramp-channel 0.0 1.0 32)
	(zigzag-check "xrp" ind 0)
	(undo 2)
	(xramp-channel 0.0 1.0 32)
	(ptree-channel (lambda (y) (* y 0.5)))
	(zigzag-check "pxp" ind 0)
	(undo 3)

	;; ramp[n]-ptree[c][zero] or xen checks
	(revert-sound ind)
	(map-chan (lambda (y) (random 1.0)) 0 10)
	(for-each
	 (lambda (func name twice)
	   (func)
	   (zigzag-check "first" ind 0)
	   (ramp-channel 0.0 1.0)
	   (zigzag-check name ind 0)
	   (undo 2)
	   (scale-channel 0.0)
	   (func)
	   (zigzag-check "first-zero" ind 0)
	   (ramp-channel 0.0 1.0)
	   (zigzag-check (string-append name "-zero") ind 0)
	   (undo 3)
	   (func)
	   (ramp-channel 0.0 1.0)
	   (ramp-channel 0.0 1.0)
	   (zigzag-check (string-append name "2") ind 0)
	   (undo 3)
	   (scale-channel 0.0)
	   (func)
	   (ramp-channel 0.0 1.0)
	   (ramp-channel 0.0 1.0)
	   (zigzag-check (string-append name "2-zero") ind 0)
	   (undo 4)
	   (func)
	   (ramp-channel 0.0 1.0)
	   (ramp-channel 0.0 1.0)
	   (ramp-channel 0.0 1.0)
	   (zigzag-check (string-append name "3") ind 0)
	   (undo 4)
	   (scale-channel 0.0)
	   (func)
	   (ramp-channel 0.0 1.0)
	   (ramp-channel 0.0 1.0)
	   (ramp-channel 0.0 1.0)
	   (zigzag-check (string-append name "4-zero") ind 0)
	   (undo 5)
	   (func)
	   (xramp-channel 0.0 1.0 32.0)
	   (zigzag-check (string-append name "x1") ind 0)
	   (if twice
	       (begin
		 (xramp-channel 0.0 1.0 32.0)
		 (zigzag-check (string-append name "x2") ind 0)
		 (undo 1)))
	   (undo 2)
	   (scale-channel 0.0)
	   (func)
	   (xramp-channel 0.0 1.0 32)
	   (zigzag-check (string-append name "x1-zero") ind 0)
	   (if twice
	       (begin
		 (xramp-channel 0.0 1.0 32.0)
		 (zigzag-check (string-append name "x2-zero") ind 0)
		 (undo 1)))
	   (undo 3)
	   (ramp-channel 0.0 1.0)
	   (ramp-channel 0.0 1.0)
	   (ramp-channel 0.0 1.0)
	   (func)
	   (zigzag-check (string-append name "-r3") ind 0)
	   (undo 4))
	 (list (lambda () (ptree-channel (lambda (y) (+ y 0.5))))
	       (lambda () (ptree-channel (lambda (y data forward)
					   (declare (y real) (data vct) (forward boolean))
					   (* y (vct-ref data 0)))
					 0 (frames) ind 0 #f #f
					 (lambda (pos dur)
					   (vct 0.5))))
	       (lambda () (xen-channel (lambda (y data forward)
					 (let ((val (vct-ref data (1+ (vct-ref data 0)))))
					   (if forward
					       (vct-set! data 0 (1+ (vct-ref data 0)))
					       (vct-set! data 0 (1- (vct-ref data 0))))
					   val))
				       0 (frames) ind 0 #f #f
				       (lambda (pos dur)
					 (vct pos .1 .2 .3 .4 .5 .6 .7 .8 .9 1.0 1.1 1.2 1.3 1.4)))))
	 (list "ramp-ptree" "ramp-ptreec" "ramp-xen")
	 (list #t #t #f))
	(close-sound ind))

	(let ((ind (new-sound "test.snd")))
	  (insert-silence 0 100)
	  (map-chan (lambda (y) 1.0))
	  (cosine-channel-via-ptree)
	  (delete-sample 10)
	  (set! (sample 20) .5)
	  (insert-silence 30 1)
	  (if (or (fneq (sample 12) .393)
		  (fneq (sample 0) 0.0)
		  (fneq (sample 25) .723)
		  (fneq (sample 30) 0.0)
		  (fneq (sample 20) 0.5)
		  (fneq (sample 21) .632)
		  (fneq (sample 31) .822)
		  (fneq (sample 50) 1.0))
	      (snd-display ";cosine-chan with edits: ~A"
			   (map sample (list 12 0 25 30 20 21 31 50))))
	  (if (and (> (optimization) 0)
		   (not (string=? (display-edits) (string-append "
EDITS: 6

 (begin) [0:2]:
   (at 0, cp->sounds[0][0:0, 1.000000]) [file: " home-dir "/cl/test.snd[0]]
   (at 1, end_mark)

 (silence 0 100) ; insert-silence [1:3]:
   (at 0, cp->sounds[-1][0:99, 0.000000])
   (at 100, cp->sounds[0][0:0, 1.000000]) [file: " home-dir "/cl/test.snd[0]]
   (at 101, end_mark)

 (set 0 101) ; map-channel [2:2]:
   (at 0, cp->sounds[1][0:100, 1.000000]) [buf: 101] 
   (at 101, end_mark)

 (ptree[0] 0 101) ; ptree 0 0 101 [3:2]:
   (at 0, cp->sounds[1][0:100, 1.000000, loc: 0, pos: 0, scl: 1.000000, code: (lambda (y data forward) (declare (y real) (data vct) (forward boolean)) (let* ((angle (vct-ref data 0)) (incr (vct-ref data 1)) (val (* y (cos angle)))) (if forward (vct-set! data 0 (+ angle incr)) (vct-set! data 0 (- angle incr))) val)), init: (lambda (frag-beg frag-dur) (let ((incr (/ pi frag-dur))) (vct (+ (* -0.5 pi) (* frag-beg incr)) incr)))]) [buf: 101] 
   (at 101, end_mark)

 (delete 10 1) ; delete-sample [4:3]:
   (at 0, cp->sounds[1][0:9, 1.000000, loc: 0, pos: 0, scl: 1.000000, code: (lambda (y data forward) (declare (y real) (data vct) (forward boolean)) (let* ((angle (vct-ref data 0)) (incr (vct-ref data 1)) (val (* y (cos angle)))) (if forward (vct-set! data 0 (+ angle incr)) (vct-set! data 0 (- angle incr))) val)), init: (lambda (frag-beg frag-dur) (let ((incr (/ pi frag-dur))) (vct (+ (* -0.5 pi) (* frag-beg incr)) incr)))]) [buf: 101] 
   (at 10, cp->sounds[1][11:100, 1.000000, loc: 0, pos: 11, scl: 1.000000, code: (lambda (y data forward) (declare (y real) (data vct) (forward boolean)) (let* ((angle (vct-ref data 0)) (incr (vct-ref data 1)) (val (* y (cos angle)))) (if forward (vct-set! data 0 (+ angle incr)) (vct-set! data 0 (- angle incr))) val)), init: (lambda (frag-beg frag-dur) (let ((incr (/ pi frag-dur))) (vct (+ (* -0.5 pi) (* frag-beg incr)) incr)))]) [buf: 101] 
   (at 100, end_mark)

 (set 20 1) ; set! sample [5:5]:
   (at 0, cp->sounds[1][0:9, 1.000000, loc: 0, pos: 0, scl: 1.000000, code: (lambda (y data forward) (declare (y real) (data vct) (forward boolean)) (let* ((angle (vct-ref data 0)) (incr (vct-ref data 1)) (val (* y (cos angle)))) (if forward (vct-set! data 0 (+ angle incr)) (vct-set! data 0 (- angle incr))) val)), init: (lambda (frag-beg frag-dur) (let ((incr (/ pi frag-dur))) (vct (+ (* -0.5 pi) (* frag-beg incr)) incr)))]) [buf: 101] 
   (at 10, cp->sounds[1][11:20, 1.000000, loc: 0, pos: 11, scl: 1.000000, code: (lambda (y data forward) (declare (y real) (data vct) (forward boolean)) (let* ((angle (vct-ref data 0)) (incr (vct-ref data 1)) (val (* y (cos angle)))) (if forward (vct-set! data 0 (+ angle incr)) (vct-set! data 0 (- angle incr))) val)), init: (lambda (frag-beg frag-dur) (let ((incr (/ pi frag-dur))) (vct (+ (* -0.5 pi) (* frag-beg incr)) incr)))]) [buf: 101] 
   (at 20, cp->sounds[2][0:0, 1.000000]) [buf: 1] 
   (at 21, cp->sounds[1][22:100, 1.000000, loc: 0, pos: 22, scl: 1.000000, code: (lambda (y data forward) (declare (y real) (data vct) (forward boolean)) (let* ((angle (vct-ref data 0)) (incr (vct-ref data 1)) (val (* y (cos angle)))) (if forward (vct-set! data 0 (+ angle incr)) (vct-set! data 0 (- angle incr))) val)), init: (lambda (frag-beg frag-dur) (let ((incr (/ pi frag-dur))) (vct (+ (* -0.5 pi) (* frag-beg incr)) incr)))]) [buf: 101] 
   (at 100, end_mark)

 (silence 30 1) ; insert-silence [6:7]:
   (at 0, cp->sounds[1][0:9, 1.000000, loc: 0, pos: 0, scl: 1.000000, code: (lambda (y data forward) (declare (y real) (data vct) (forward boolean)) (let* ((angle (vct-ref data 0)) (incr (vct-ref data 1)) (val (* y (cos angle)))) (if forward (vct-set! data 0 (+ angle incr)) (vct-set! data 0 (- angle incr))) val)), init: (lambda (frag-beg frag-dur) (let ((incr (/ pi frag-dur))) (vct (+ (* -0.5 pi) (* frag-beg incr)) incr)))]) [buf: 101] 
   (at 10, cp->sounds[1][11:20, 1.000000, loc: 0, pos: 11, scl: 1.000000, code: (lambda (y data forward) (declare (y real) (data vct) (forward boolean)) (let* ((angle (vct-ref data 0)) (incr (vct-ref data 1)) (val (* y (cos angle)))) (if forward (vct-set! data 0 (+ angle incr)) (vct-set! data 0 (- angle incr))) val)), init: (lambda (frag-beg frag-dur) (let ((incr (/ pi frag-dur))) (vct (+ (* -0.5 pi) (* frag-beg incr)) incr)))]) [buf: 101] 
   (at 20, cp->sounds[2][0:0, 1.000000]) [buf: 1] 
   (at 21, cp->sounds[1][22:30, 1.000000, loc: 0, pos: 22, scl: 1.000000, code: (lambda (y data forward) (declare (y real) (data vct) (forward boolean)) (let* ((angle (vct-ref data 0)) (incr (vct-ref data 1)) (val (* y (cos angle)))) (if forward (vct-set! data 0 (+ angle incr)) (vct-set! data 0 (- angle incr))) val)), init: (lambda (frag-beg frag-dur) (let ((incr (/ pi frag-dur))) (vct (+ (* -0.5 pi) (* frag-beg incr)) incr)))]) [buf: 101] 
   (at 30, cp->sounds[-1][0:0, 0.000000])
   (at 31, cp->sounds[1][31:100, 1.000000, loc: 0, pos: 31, scl: 1.000000, code: (lambda (y data forward) (declare (y real) (data vct) (forward boolean)) (let* ((angle (vct-ref data 0)) (incr (vct-ref data 1)) (val (* y (cos angle)))) (if forward (vct-set! data 0 (+ angle incr)) (vct-set! data 0 (- angle incr))) val)), init: (lambda (frag-beg frag-dur) (let ((incr (/ pi frag-dur))) (vct (+ (* -0.5 pi) (* frag-beg incr)) incr)))]) [buf: 101] 
   (at 101, end_mark)
"))))
	      (snd-display ";cosine channel edits: ~A"
			   (display-edits)))
	  (close-sound ind))


	(let ((ind (open-sound "oboe.snd")))
	  (scale-by 0.0)
	  (ptree-channel (lambda (y) (+ y .1)))
	  (set! (sample 100) .05)
	  (let ((mx (maxamp)))
	    (if (fneq mx .1)
		(snd-display ";scale+ptree+set -> ~A" mx)))
	  (if (and (> (optimization) 0)
		   (not (string=? (display-edits) (string-append "
EDITS: 3

 (begin) [0:2]:
   (at 0, cp->sounds[0][0:50827, 1.000000]) [file: " home-dir "/cl/oboe.snd[0]]
   (at 50828, end_mark)

 (scale 0 50828) ; scale-channel 0.0000 0 50828 [1:2]:
   (at 0, cp->sounds[0][0:50827, 0.000000]) [file: " home-dir "/cl/oboe.snd[0]]
   (at 50828, end_mark)

 (ptree[0] 0 50828) ; ptree 0 0 50828 [2:2]:
   (at 0, cp->sounds[0][0:50827, 1.000000, loc: 0, pos: 0, scl: 0.000000, code: (lambda (y) (+ y 0.1))]) [file: " home-dir "/cl/oboe.snd[0]]
   (at 50828, end_mark)

 (set 100 1) ; set! sample [3:4]:
   (at 0, cp->sounds[0][0:99, 1.000000, loc: 0, pos: 0, scl: 0.000000, code: (lambda (y) (+ y 0.1))]) [file: " home-dir "/cl/oboe.snd[0]]
   (at 100, cp->sounds[1][0:0, 1.000000]) [buf: 1] 
   (at 101, cp->sounds[0][101:50827, 1.000000, loc: 0, pos: 101, scl: 0.000000, code: (lambda (y) (+ y 0.1))]) [file: " home-dir "/cl/oboe.snd[0]]
   (at 50828, end_mark)
"))))
	      (snd-display ";ptree split: ~A" (display-edits)))
	  (undo)
	  (delete-sample 100)
	  (let ((mx (maxamp)))
	    (if (fneq mx .1)
		(snd-display ";scale+ptree+delete -> ~A" mx)))
	  (undo)
	  (insert-samples 100 3 (make-vct 3 .01))
	  (let ((mx (maxamp)))
	    (if (fneq mx .1)
		(snd-display ";scale+ptree+insert -> ~A" mx)))
	  (undo)
	  (mix-vct (make-vct 3 .01) 100)
	  (let ((mx (maxamp)))
	    (if (fneq mx .11)
		(snd-display ";scale+ptree+mix -> ~A" mx)))
	  (undo)
	  (ptree-channel (lambda (y) .01) 100 100)
	  (let ((mx (maxamp)))
	    (if (fneq mx .1)
		(snd-display ";scale+ptree+ptree -> ~A" mx)))
	  (undo)
	  (env-channel '(0 0 1 1) 100 100)
	  (let ((mx (maxamp)))
	    (if (fneq mx .1)
		(snd-display ";scale+ptree+env -> ~A" mx)))
	  (revert-sound)
	  (scale-by 0.01)
	  (ptree-channel (lambda (y) .1))
	  (set! (sample 100) .05)
	  (let ((mx (maxamp)))
	    (if (fneq mx .1)
		(snd-display ";(1)scale+ptree+set -> ~A" mx)))
	  (undo)
	  (delete-sample 100)
	  (let ((mx (maxamp)))
	    (if (fneq mx .1)
		(snd-display ";(1)scale+ptree+delete -> ~A" mx)))
	  (undo)
	  (insert-samples 100 3 (make-vct 3 .01))
	  (let ((mx (maxamp)))
	    (if (fneq mx .1)
		(snd-display ";(1)scale+ptree+insert -> ~A" mx)))
	  (undo)
	  (mix-vct (make-vct 3 .01) 100)
	  (let ((mx (maxamp)))
	    (if (fneq mx .11)
		(snd-display ";(1)scale+ptree+mix -> ~A" mx)))
	  (revert-sound)
	  (ptree-channel (lambda (y) .1))
	  (set! (sample 100) .05)
	  (let ((mx (maxamp)))
	    (if (fneq mx .1)
		(snd-display ";(2)scale+ptree+set -> ~A" mx)))
	  (undo)
	  (delete-sample 100)
	  (let ((mx (maxamp)))
	    (if (fneq mx .1)
		(snd-display ";(2)scale+ptree+delete -> ~A" mx)))
	  (undo)
	  (insert-samples 100 3 (make-vct 3 .01))
	  (let ((mx (maxamp)))
	    (if (fneq mx .1)
		(snd-display ";(2)scale+ptree+insert -> ~A" mx)))
	  (undo)
	  (mix-vct (make-vct 3 .01) 100)
	  (let ((mx (maxamp)))
	    (if (fneq mx .11)
		(snd-display ";(2)scale+ptree+mix -> ~A" mx)))
	  (revert-sound)
	  (env-sound '(0 0 1 .01 2 0))
	  (ptree-channel (lambda (y) .1))
	  (set! (sample 100) .05)
	  (let ((mx (maxamp)))
	    (if (fneq mx .1)
		(snd-display ";(3)env+ptree+set -> ~A" mx)))
	  (undo)
	  (delete-sample 100)
	  (let ((mx (maxamp)))
	    (if (fneq mx .1)
		(snd-display ";(3)env+ptree+delete -> ~A" mx)))
	  (undo)
	  (insert-samples 100 3 (make-vct 3 .01))
	  (let ((mx (maxamp)))
	    (if (fneq mx .1)
		(snd-display ";(3)env+ptree+insert -> ~A" mx)))
	  (undo)
	  (mix-vct (make-vct 3 .01) 100)
	  (let ((mx (maxamp)))
	    (if (fneq mx .11)
		(snd-display ";(3)env+ptree+mix -> ~A" mx)))
	  (revert-sound)
	  
	  (env-sound '(0 0 1 .679 2 0))
	  (set! (sample 100) .05)
	  (let ((mx (maxamp)))
	    (if (fneq mx .1)
		(snd-display ";(1)env+set -> ~A" mx)))
	  (undo)
	  (delete-sample 100)
	  (let ((mx (maxamp)))
	    (if (fneq mx .1)
		(snd-display ";(1)env+delete -> ~A" mx)))
	  (undo)
	  (insert-samples 100 3 (make-vct 3 .01))
	  (let ((mx (maxamp)))
	    (if (fneq mx .1)
		(snd-display ";(1)env+insert -> ~A" mx)))
	  (undo)
	  (mix-vct (make-vct 3 .01) 100)
	  (let ((mx (maxamp)))
	    (if (fneq mx .1)
		(snd-display ";(1)env+mix -> ~A" mx)))
	  (revert-sound)
	  
	  (close-sound ind))
	
	(let ((ind (new-sound "test.snd")))
	  (map-chan (lambda (y) 1.0) 0 100)
	  (ramp-channel 0.0 1.0)
	  (smooth-channel 0 99)
	  (let ((orig-data (channel->vct)))
	    (undo)
	    (smooth-channel-via-ptree 0 99)
	    (let ((diff (vct-peak (vct-subtract! orig-data (channel->vct)))))
	      (if (> diff .00001)
		  (snd-display ";smooth-channel-via-ptree diff: ~A" diff))))
	  (close-sound ind))

	(set! (x-axis-style) x-axis-in-beats)
	(let ((ind (open-sound "storm.snd")))
	  (reverse-channel 500000 1000000)
	  (set! (sample 0 ind 0 current-edit-position) .1)
	  (if (fneq (sample 0 ind 0 current-edit-position) .1) 
	      (snd-display ";set sample + edpos: ~A" (sample 0 ind 0 current-edit-position)))
	  (close-sound ind))
	(set! (x-axis-style) x-axis-in-seconds)
	
	(for-each 
	 (lambda (out-chans)
	   (let ((ind (new-sound "new.snd" mus-next mus-bfloat 22050 out-chans "edpos testing"))
		 (mx (apply max (map sync (sounds)))))
	     (set! (sync ind) (+ mx 1))
	     (for-each 
	      (lambda (in-sound)
		(for-each
		 (lambda (func)
		   (for-each 
		    (lambda (edpos)
		      (func edpos)
		      (revert-sound ind))
		    (list (lambda () current-edit-position)
			  (lambda () 0)
			  (lambda () (lambda (s c) (1- (edit-position s c))))
			  (lambda () (lambda (s c) (edit-position s c)))
			  (lambda () (lambda (s c) current-edit-position))
			  (lambda () (lambda (s c) 0)))))
		 (list 
		  (lambda (posfunc)
		    (let ((chn (min (random (1+ out-chans)) (1- out-chans))))
		      (if (not (vequal (channel->vct 0 (frames ind chn) ind chn 0) (vct 0.0)))
			  (snd-display ";start bad: ~A" (channel->vct 0 (frames ind chn) ind chn 0)))
		      (set! (sample 0 ind chn) .1)
		      (if (not (vequal (channel->vct 0 (frames ind chn) ind chn) (vct 0.1)))
			  (snd-display ";set bad: ~A" (channel->vct 0 (frames ind chn) ind chn)))
		      (pad-channel 0 1 ind chn (posfunc))
		      (let ((pos (posfunc))) (if (procedure? pos)
			    (set! pos (pos ind chn)))
			(let ((data (channel->vct 0 (frames ind chn) ind chn)))
			  (if (or (and (= pos 0) 
				       (not (vequal data (vct 0.0 0.0))))
				  (and (or (= pos current-edit-position) 
					   (= pos (edit-position ind chn)))
				       (not (vequal data (vct 0.0 0.1))))			  
				  (and (= pos (1- (edit-position ind chn)))
				       (not (vequal data (vct 0.0 0.0)))))
			      (snd-display ";pos[~A]: edpos ~A of ~A, pad result[~A, ~A]: ~A" 
					   chn pos (edit-position ind chn) (frames ind chn pos) (frames ind chn) data))
			  (if (> (chans ind) 1)
			      (do ((i 0 (1+ i)))
				  ((= i (chans ind)))
				(if (not (= i chn))
				    (let ((data (channel->vct 0 (frames ind i) ind i)))
				      (if (not (vequal data (vct 0.0)))
					  (snd-display ";pad[~A / ~A] empty: ~A" i chn data))))))))))
		  (lambda (posfunc)
		    (let ((chn (min (random (1+ out-chans)) (1- out-chans))))
		      (set! (sample 0 ind chn) .1)
		      (scale-channel 2.0 0 1 ind chn (posfunc))
		      (let ((pos (posfunc)))
			(if (procedure? pos) (set! pos (pos ind chn)))
			(let ((data (channel->vct 0 (frames ind chn) ind chn)))
			  (if (or (and (= pos 0) 
				       (not (vequal data (vct 0.0))))
				  (and (or (= pos current-edit-position) 
					   (= pos (edit-position ind chn)))
				       (not (vequal data (vct 0.2))))			  
				  (and (= pos (1- (edit-position ind chn)))
				       (not (vequal data (vct 0.0)))))
			      (snd-display ";pos[~A]: edpos ~A of ~A, scale result[~A, ~A]: ~A" 
					   chn pos (edit-position ind chn) (frames ind chn pos) (frames ind chn) data))
			  (if (> (chans ind) 1)
			      (do ((i 0 (1+ i)))
				  ((= i (chans ind)))
				(if (not (= i chn))
				    (let ((data (channel->vct 0 (frames ind i) ind i)))
				      (if (not (vequal data (vct 0.0)))
					  (snd-display ";scale[~A / ~A] empty: ~A" i chn data)))))))))))))
	      (list "2a.snd" "1a.snd" "4a.snd"))
	     (close-sound ind)))
	 (list 1 2 4))

	(let ((ind (open-sound "oboe.snd")))
	  (map-channel (lambda (y) #f))
	  (if (not (= (frames ind) 0)) (snd-display ";map-channel #f frames: ~A" (frames ind)))
	  (if (equal? (edits ind) (list 0 0)) (snd-display ";map-channel #f edits backed up"))
	  (undo 1 ind)
	  (if (= (frames ind) 0) (snd-display ";map-channel #f frames after undo: ~A" (frames ind)))
	  (let ((tag (catch #t (lambda () (map-channel (lambda (y) "hiho"))) (lambda args (car args)))))
	    (if (not (eq? tag 'bad-type)) (snd-display ";map-channel bad-type: ~A" tag)))
	  (let* ((ctr 0)
		 (tag (catch #t (lambda () (scan-channel (lambda (y) (set! ctr (1+ ctr)) (asdf)))) (lambda args (car args)))))
	    (if (not (= ctr 1)) (snd-display ";scan-channel error exit: ~A" ctr))
	    (if (not (eq? tag 'unbound-variable)) (snd-display ";scan-channel unbound: ~A" tag)))
	  (let ((val (scan-channel (lambda (y) #f)))) (if val (snd-display ";scan-channel func #f: ~A" val)))
	  (let ((val (scan-channel (lambda (y) #f) 1234))) (if val (snd-display ";scan-channel func #f with beg: ~A" val)))
	  (let ((val (scan-channel (lambda (y) #f) 1234 4321))) (if val (snd-display ";scan-channel func #f with beg+dur: ~A" val)))
	  (revert-sound ind)
	  (let ((del (make-delay 1000))
		(len (frames)))
	    (clm-channel del 0 (frames) ind 0 0 2000)
	    (if (not (= (frames ind) (+ 2000 len)))
		(snd-display ";clm-channel overlap length: ~A ~A" len (frames)))
	    (if (not (equal? (edit-tree) '((0 1 0 52827 1.0 0.0 0.0 0) (52828 -2 0 0 0.0 0.0 0.0 0))))
		(snd-display ";clm-channel overlaps: ~A" (edit-tree)))
	    (let ((reader (make-sample-reader 0))
		  (preader (make-sample-reader 0 ind 0 1 0)))
	      (call-with-current-continuation
	       (lambda (break)
		 (do ((i 0 (1+ i)))
		     ((= i 1000))
		   (let ((val (reader)))
		     (if (fneq val 0.0)
			 (begin
			   (snd-display ";clm-channel overlap delayed: ~A: ~A" i val)
			   (break)))))
		 (do ((i 0 (1+ i)))
		     ((= i len))
		   (let ((val0 (preader))
			 (val1 (reader)))
		     (if (fneq val0 val1)
			 (begin
			   (snd-display ";clm-channel overlap main: ~A: ~A ~A" (+ i 1000) val0 val1)
			   (break)))))
		 (do ((i 0 (1+ i)))
		     ((= i 1000))
		   (if (fneq (reader) 0.0)
		       (begin
			 (snd-display ";clm-channel overlap trailing garbage")
			 (break)))))))
	    (let ((tag (catch #t
			      (lambda () 
				(let ((fr (make-frame 3)))
				  (clm-channel fr)))
			      (lambda args (car args)))))
	      (if (not (eq? tag 'mus-error))
		  (snd-display ";clm-channel gen no run: ~A" tag))))
	  (close-sound ind))

	(let* ((ind (open-sound "oboe.snd"))
	       (oldamp 0.0)
	       (oldloc 0)
	       (ctr 0))
	  (scan-channel (lambda (y)
			  (if (>= (abs y) oldamp) 
			      (begin
				(set! oldloc ctr)
				(set! oldamp (abs y))))
			  (set! ctr (1+ ctr))
			  #f))
	  (scale-by 10.0)
	  (scale-by 0.1)
	  (reverse-channel 0 #f ind 0 1)
	  (let ((amp 0.0)
		(loc 0)
		(ctr (1- (frames))))
	    (scan-channel (lambda (y)
			    (if (> (abs y) amp) 
				(begin
				  (set! amp (abs y))
				  (set! loc ctr)))
			    (set! ctr (1- ctr))
			    #f))
	    ;; can't use maxamp here because it may be set by scaling process
	    (if (or (fneq oldamp (* .1 amp))
		    (not (= loc oldloc)))
		(snd-display ";reverse edpos screwup: ~A at ~A,  ~A at ~A" oldamp oldloc amp loc)))
	  (undo)
	  (reverse-channel 0 #f ind 0 2)
	  (let ((amp 0.0)
		(loc 0)
		(ctr (1- (frames))))
	    (scan-channel (lambda (y)
			    (if (> (abs y) amp) 
				(begin
				  (set! amp (abs y))
				  (set! loc ctr)))
			    (set! ctr (1- ctr))
			    #f))
	    ;; can't use maxamp here because it may be set by scaling process
	    (if (or (fneq oldamp amp)
		    (not (= loc oldloc)))
		(snd-display ";reverse unscaled edpos screwup: ~A at ~A,  ~A at ~A" oldamp oldloc amp loc)))
	  
	  (close-sound ind))

	(let ((ind (new-sound "fmv.snd" mus-next mus-bfloat 22050 1 "edit trees"))
	      (vals (make-vct 100)))
	  (select-sound ind)
	  (select-channel 0)
	  (check-edit-tree '((0 0 0 0 1.0 0.0 0.0 0) (1 -2 0 0 0.0 0.0 0.0 0)) (make-vct 1) "initial new-sound")
	  (vct-fill! vals 1.0)
	  (set! (samples 0 100) vals)
	  (check-edit-tree '((0 1 0 99 1.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 0)) vals "set first samps to one")
	  (scale-channel 0.5 10 20)
	  (do ((i 10 (1+ i)))
	      ((= i 30))
	    (vct-set! vals i 0.5))
	  (check-edit-tree '((0 1 0 9 1.0 0.0 0.0 0) (10 1 10 29 0.5 0.0 0.0 0) (30 1 30 99 1.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 0)) 
			   vals "scale-channel 0.5 10 20")
	  (env-channel (make-env '(0 0 1 1) :end 10) 15 10)
	  (let ((e (make-env '(0 0 1 1) :end 9)))
	    (do ((i 15 (1+ i)))
		((= i 25))
	      (vct-set! vals i (* (vct-ref vals i) (env e)))))
	  (check-edit-tree '((0 1 0 9 1.0 0.0 0.0 0) (10 1 10 14 0.5 0.0 0.0 0) (15 1 15 24 0.5 -1.49011614158923e-9 1.0 1)
			     (25 1 25 29 0.5 0.0 0.0 0) (30 1 30 99 1.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 0)) 
			   vals "env-channel 15 10")
	  (scale-to 1.0)
	  (check-edit-tree '((0 1 0 9 1.0 0.0 0.0 0) (10 1 10 14 0.5 0.0 0.0 0) (15 1 15 24 0.5 -1.49011614158923e-9 1.0 1)
			     (25 1 25 29 0.5 0.0 0.0 0) (30 1 30 99 1.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 0)) 
			   vals "env-channel 15 10 a")
	  (select-all)
	  (if (fneq (selection-maxamp) 1.0)
	      (snd-display ";selection-maxamp in checker: ~A" (selection-maxamp)))
	  (scale-selection-to 1.0)
	  (check-edit-tree '((0 1 0 9 1.0 0.0 0.0 0) (10 1 10 14 0.5 0.0 0.0 0) (15 1 15 24 0.5 -1.49011614158923e-9 1.0 1)
			     (25 1 25 29 0.5 0.0 0.0 0) (30 1 30 99 1.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 0)) 
			   vals "env-channel 15 10 b")
	  (set! (selection-position) 5)
	  (set! (selection-frames) 10)
	  (scale-selection-to .5)
	  (do ((i 5 (1+ i)))
	      ((= i 15))
	    (vct-set! vals i (* (vct-ref vals i) 0.5)))
	  (check-edit-tree '((0 1 0 4 1.0 0.0 0.0 0) (5 1 5 9 0.5 0.0 0.0 0) (10 1 10 14 0.25 0.0 0.0 0) (15 1 15 24 0.5 -1.49011614158923e-9 1.0 1) 
			     (25 1 25 29 0.5 0.0 0.0 0) (30 1 30 99 1.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 0))
			   vals "scale-selection-to .5")
	  (set! (sample 20) .1)
	  (vct-set! vals 20 .1)
	  (check-edit-tree '((0 1 0 4 1.0 0.0 0.0 0) (5 1 5 9 0.5 0.0 0.0 0) (10 1 10 14 0.25 0.0 0.0 0) 
			     (15 1 15 19 0.5 -1.49011614158923e-9 0.444444447755814 1) (20 2 0 0 1.0 0.0 0.0 0)
			     (21 1 21 24 0.5 0.666666686534882 1.0 1) (25 1 25 29 0.5 0.0 0.0 0) 
			     (30 1 30 99 1.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 0))
			   vals "set 20 .1")
	  (reverse-channel 5 10)
	  (do ((i 5 (1+ i))
	       (j 14 (1- j)))
	      ((= i 10))
	    (let ((temp (vct-ref vals i)))
	      (vct-set! vals i (vct-ref vals j))
	      (vct-set! vals j temp)))
	  (check-edit-tree '((0 1 0 4 1.0 0.0 0.0 0) (5 3 0 9 1.0 0.0 0.0 0) 
			     (15 1 15 19 0.5 -1.49011614158923e-9 0.444444447755814 1) (20 2 0 0 1.0 0.0 0.0 0) 
			     (21 1 21 24 0.5 0.666666686534882 1.0 1) (25 1 25 29 0.5 0.0 0.0 0) 
			     (30 1 30 99 1.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 0))
			   vals "reverse-channel 5 10")
	  (if (fneq (selection-maxamp) .5) (snd-display ";selection-maxamp before: ~A" (selection-maxamp)))
	  (let ((mixvals (make-vct 10))
		(old-sample4 (sample 4))
		(old-sample5 (sample 5)))
	    (vct-fill! mixvals .1)
	    (let ((id (mix-vct mixvals 4)))
	      (do ((i 4 (1+ i))
		   (j 0 (1+ j)))
		  ((= i 14))
		(vct-set! vals i (+ (vct-ref vals i) (vct-ref mixvals j))))
	      (check-edit-tree '((0 1 0 3 1.0 0.0 0.0 0) (4 4 0 9 1.0 0.0 0.0 0) 
				 (14 3 9 9 1.0 0.0 0.0 0) (15 1 15 19 0.5 -1.49011614158923e-9 0.444444447755814 1) 
				 (20 2 0 0 1.0 0.0 0.0 0) (21 1 21 24 0.5 0.666666686534882 1.0 1) 
				 (25 1 25 29 0.5 0.0 0.0 0) (30 1 30 99 1.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 0))
			       vals (format #f "mix-vct (id: ~A (~A) [~A ~A] + .1 -> [~A ~A] [~A ~A]) 4 (.1)" 
					    id ind
					    old-sample4 old-sample5
					    (sample 4) (sample 5) 
					    (vct-ref vals 4) (vct-ref vals 5)))))
	  (delete-samples 28 12)
	  (insert-silence 28 12)
	  (do ((i 28 (1+ i)))
	      ((= i 40))
	    (vct-set! vals i 0.0))
	  (let ((old-vals (vct-copy vals)))
	    (check-edit-tree '((0 1 0 3 1.0 0.0 0.0 0) (4 4 0 9 1.0 0.0 0.0 0)
			       (14 3 9 9 1.0 0.0 0.0 0) (15 1 15 19 0.5 -1.49011614158923e-9 0.444444447755814 1) 
			       (20 2 0 0 1.0 0.0 0.0 0) (21 1 21 24 0.5 0.666666686534882 1.0 1) 
			       (25 1 25 27 0.5 0.0 0.0 0) (28 -1 0 11 0.0 0.0 0.0 0)
			       (40 1 40 99 1.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 0))
			     vals "delete/insert")
	    (if (fneq (selection-maxamp) .6) (snd-display ";selection-maxamp after: ~A" (selection-maxamp)))
	    (set! (selection-position) 50)
	    (set! (selection-frames) 10)
	    (scale-selection-by .1)
	    (if (fneq (selection-maxamp) .1) (snd-display ";re-selection-maxamp: ~A" (selection-maxamp)))
	    (do ((i 50 (1+ i)))
		((= i 60))
	      (vct-set! vals i .1))
	    (check-edit-tree '((0 1 0 3 1.0 0.0 0.0 0) (4 4 0 9 1.0 0.0 0.0 0) (14 3 9 9 1.0 0.0 0.0 0) 
			       (15 1 15 19 0.5 -1.49011614158923e-9 0.444444447755814 1) 
			       (20 2 0 0 1.0 0.0 0.0 0) (21 1 21 24 0.5 0.666666686534882 1.0 1)
			       (25 1 25 27 0.5 0.0 0.0 0) (28 -1 0 11 0.0 0.0 0.0 0) (40 1 40 49 1.0 0.0 0.0 0) 
			       (50 1 50 59 0.100000001490116 0.0 0.0 0) (60 1 60 99 1.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 0))
			     vals "scale-selection-by .1")
	    (env-channel (make-env '(0 0 1 1 2 0 3 0) :end 30 :base 0) 50 30)
	    (let ((e (make-env '(0 0 1 1 2 0 3 0) :end 30 :base 0)))
	      (do ((i 50 (1+ i)))
		  ((= i 80))
		(vct-set! vals i (* (vct-ref vals i) (env e)))))
	    (check-edit-tree '((0 1 0 3 1.0 0.0 0.0 0) (4 4 0 9 1.0 0.0 0.0 0) (14 3 9 9 1.0 0.0 0.0 0) 
			       (15 1 15 19 0.5 -1.49011614158923e-9 0.444444447755814 1) 
			       (20 2 0 0 1.0 0.0 0.0 0) (21 1 21 24 0.5 0.666666686534882 1.0 1)
			       (25 1 25 27 0.5 0.0 0.0 0) (28 -1 0 11 0.0 0.0 0.0 0) (40 1 40 49 1.0 0.0 0.0 0) 
			       (50 1 50 59 0.0 0.0 0.0 0) (60 1 60 60 0.0 0.0 0.0 0) (61 1 61 70 1.0 0.0 0.0 0) 
			       (71 1 71 79 0.0 0.0 0.0 0) (80 1 80 99 1.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 0))
			     vals "step env 30")
	    (undo 2)
	    (check-edit-tree '((0 1 0 3 1.0 0.0 0.0 0) (4 4 0 9 1.0 0.0 0.0 0) (14 3 9 9 1.0 0.0 0.0 0) 
			       (15 1 15 19 0.5 -1.49011614158923e-9 0.444444447755814 1) (20 2 0 0 1.0 0.0 0.0 0) 
			       (21 1 21 24 0.5 0.666666686534882 1.0 1) (25 1 25 27 0.5 0.0 0.0 0) (28 -1 0 11 0.0 0.0 0.0 0) 
			       (40 1 40 99 1.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 0))
			     old-vals "undo to delete/insert (over step env)"))
	  (redo 2)
	  (check-edit-tree '((0 1 0 3 1.0 0.0 0.0 0) (4 4 0 9 1.0 0.0 0.0 0) (14 3 9 9 1.0 0.0 0.0 0) 
			     (15 1 15 19 0.5 -1.49011614158923e-9 0.444444447755814 1) (20 2 0 0 1.0 0.0 0.0 0) 
			     (21 1 21 24 0.5 0.666666686534882 1.0 1) (25 1 25 27 0.5 0.0 0.0 0) (28 -1 0 11 0.0 0.0 0.0 0) 
			     (40 1 40 49 1.0 0.0 0.0 0) (50 1 50 59 0.0 0.0 0.0 0) (60 1 60 60 0.0 0.0 0.0 0) 
			     (61 1 61 70 1.0 0.0 0.0 0) (71 1 71 79 0.0 0.0 0.0 0) (80 1 80 99 1.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 0))
			   vals "redo past step env 30")
	  (set! (sample 75) -.5)
	  (vct-set! vals 75 -.5)
	  (let ((flt (make-one-zero 0.5 0.5))
		(flt1 (make-one-zero 0.5 0.5)))
	    (clm-channel flt 75 10)
	    (do ((i 75 (1+ i)))
		((= i 85))
	      (vct-set! vals i (one-zero flt1 (vct-ref vals i))))
	    (check-edit-tree '((0 1 0 3 1.0 0.0 0.0 0) (4 4 0 9 1.0 0.0 0.0 0) (14 3 9 9 1.0 0.0 0.0 0) 
			       (15 1 15 19 0.5 -1.49011614158923e-9 0.444444447755814 1) (20 2 0 0 1.0 0.0 0.0 0)
			       (21 1 21 24 0.5 0.666666686534882 1.0 1) (25 1 25 27 0.5 0.0 0.0 0) (28 -1 0 11 0.0 0.0 0.0 0)
			       (40 1 40 49 1.0 0.0 0.0 0) (50 1 50 59 0.0 0.0 0.0 0) (60 1 60 60 0.0 0.0 0.0 0) 
			       (61 1 61 70 1.0 0.0 0.0 0) (71 1 71 74 0.0 0.0 0.0 0) (75 6 0 9 1.0 0.0 0.0 0) 
			       (85 1 85 99 1.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 0))
			     vals "clm-channel 75 10"))
	  (map-channel (lambda (y) (* y .5)) 3 11)
	  (do ((i 3 (1+ i)))
	      ((= i 14))
	    (vct-set! vals i (* .5 (vct-ref vals i))))
	  (check-edit-tree '((0 1 0 2 1.0 0.0 0.0 0) (3 7 0 10 1.0 0.0 0.0 0) (14 3 9 9 1.0 0.0 0.0 0) 
			     (15 1 15 19 0.5 -1.49011614158923e-9 0.444444447755814 1) (20 2 0 0 1.0 0.0 0.0 0) 
			     (21 1 21 24 0.5 0.666666686534882 1.0 1) (25 1 25 27 0.5 0.0 0.0 0) (28 -1 0 11 0.0 0.0 0.0 0) 
			     (40 1 40 49 1.0 0.0 0.0 0) (50 1 50 59 0.0 0.0 0.0 0) (60 1 60 60 0.0 0.0 0.0 0) 
			     (61 1 61 70 1.0 0.0 0.0 0) (71 1 71 74 0.0 0.0 0.0 0) (75 6 0 9 1.0 0.0 0.0 0)
			     (85 1 85 99 1.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 0))
			   vals "map-channel 3 14")
	  (map-channel (let ((reader (make-sample-reader 50)))
			 (lambda (y)
			   (- y (reader))))
		       0 25)
	  (do ((i 0 (1+ i))
	       (j 50 (1+ j)))
	      ((= i 25))
	    (vct-set! vals i (- (vct-ref vals i) (vct-ref vals j))))
	  (check-edit-tree '((0 8 0 24 1.0 0.0 0.0 0) (25 1 25 27 0.5 0.0 0.0 0) (28 -1 0 11 0.0 0.0 0.0 0) 
			     (40 1 40 49 1.0 0.0 0.0 0) (50 1 50 59 0.0 0.0 0.0 0) (60 1 60 60 0.0 0.0 0.0 0) 
			     (61 1 61 70 1.0 0.0 0.0 0) (71 1 71 74 0.0 0.0 0.0 0) (75 6 0 9 1.0 0.0 0.0 0) 
			     (85 1 85 99 1.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 0))
			   vals "back set via map-channel")
	  (set! (selection-position) 20)
	  (set! (selection-frames) 70)
	  (env-selection '(0 0 1 1))
	  (if (fneq (selection-maxamp ind 0) 1.0) (snd-display ";selection-maxamp after env-selection: ~A" (selection-maxamp ind 0)))
	  (do ((i 20 (1+ i))
	       (x 0.0)
	       (incr (/ 1.0 69.0)))
	      ((= i 90))
	    (vct-set! vals i (* (vct-ref vals i) x))
	    (set! x (+ x incr)))
	  (check-edit-tree '((0 8 0 19 1.0 0.0 0.0 0) (20 8 20 24 1.0 -2.69948563502709e-10 0.0579710155725479 2) (25 1 25 27 0.5 0.0724637657403946 0.101449273526669 2) (28 -1 0 11 0.0 0.0 0.0 1) (40 1 40 49 1.0 0.289855062961578 0.420289844274521 2) (50 1 50 59 0.0 0.0 0.0 1) (60 1 60 60 0.0 0.0 0.0 1) (61 1 61 70 1.0 0.594202876091003 0.724637687206268 2) (71 1 71 74 0.0 0.0 0.0 1) (75 6 0 9 1.0 0.797101438045502 0.927536249160767 2) (85 1 85 89 1.0 0.942028999328613 1.0 2) (90 1 90 99 1.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 0))
			   vals "env-selection")
	  (scale-to .5)
	  (vct-scale! vals .5)
	  (check-edit-tree '((0 8 0 19 0.5 0.0 0.0 0) (20 8 20 24 0.5 -2.69948563502709e-10 0.0579710155725479 2) (25 1 25 27 0.25 0.0724637657403946 0.101449273526669 2) (28 -1 0 11 0.0 0.0 0.0 1) (40 1 40 49 0.5 0.289855062961578 0.420289844274521 2) (50 1 50 59 0.0 0.0 0.0 1) (60 1 60 60 0.0 0.0 0.0 1) (61 1 61 70 0.5 0.594202876091003 0.724637687206268 2) (71 1 71 74 0.0 0.0 0.0 1) (75 6 0 9 0.5 0.797101438045502 0.927536249160767 2) (85 1 85 89 0.5 0.942028999328613 1.0 2) (90 1 90 99 0.5 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 0))
			   vals "scale-to")
	  (if (fneq (selection-maxamp) .5) (snd-display ";selection-maxamp after scale: ~A" (selection-maxamp)))
	  (delete-samples 0 100)
	  (insert-silence 0 100)
	  (vct-fill! vals 0.0)
	  (check-edit-tree '((0 -1 0 99 0.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 0))
			   vals "second set...")

	  (set! (sample 50) .5)
	  (vct-set! vals 50 .5)
	  (check-edit-tree '((0 -1 0 49 0.0 0.0 0.0 0) (50 9 0 0 1.0 0.0 0.0 0) (51 -1 51 99 0.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 0))
			   vals "split silence")
	  (map-channel (lambda (y) 1.0) 0 25)
	  (do ((i 0 (1+ i)))
	      ((= i 25))
	    (vct-set! vals i 1.0))
	  (check-edit-tree '((0 10 0 24 1.0 0.0 0.0 0) (25 -1 25 49 0.0 0.0 0.0 0) (50 9 0 0 1.0 0.0 0.0 0) (51 -1 51 99 0.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 0))
			   vals "clobber silence start")
	  (map-channel (lambda (y) 1.0) 75 25)
	  (do ((i 75 (1+ i)))
	      ((= i 100))
	    (vct-set! vals i 1.0))
	  (check-edit-tree '((0 10 0 24 1.0 0.0 0.0 0) (25 -1 25 49 0.0 0.0 0.0 0) (50 9 0 0 1.0 0.0 0.0 0) (51 -1 51 74 0.0 0.0 0.0 0) (75 11 0 24 1.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 0))
			   vals "clobber silence end")
	  (scale-channel 0.0 0 100)
	  (vct-fill! vals 0.0)
	  (check-edit-tree '((0 10 0 24 0.0 0.0 0.0 0) (25 -1 25 49 0.0 0.0 0.0 0) (50 9 0 0 0.0 0.0 0.0 0) (51 -1 51 74 0.0 0.0 0.0 0) (75 11 0 24 0.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 0))
			   vals "scale all to 0.0")
	  (let ((e (make-env '(0 0 1 1) :end 100))
		(e1 (make-env '(0 0 1 1) :end 100)))
	    (map-channel (lambda (y) (env e)))
	    (do ((i 0 (1+ i)))
		((= i 100))
	      (vct-set! vals i (env e1))))
	  (check-edit-tree '((0 12 0 99 1.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 0))
			   vals "env start")
	  (set! (sample 50) -.5)
	  (vct-set! vals 50 -.5)
	  (check-edit-tree '((0 12 0 49 1.0 0.0 0.0 0) (50 13 0 0 1.0 0.0 0.0 0) (51 12 51 99 1.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 0))
			   vals "split env segment")
	  (map-channel (lambda (y) 1.0) 0 25)
	  (do ((i 0 (1+ i)))
	      ((= i 25))
	    (vct-set! vals i 1.0))
	  (check-edit-tree '((0 14 0 24 1.0 0.0 0.0 0) (25 12 25 49 1.0 0.0 0.0 0) (50 13 0 0 1.0 0.0 0.0 0) (51 12 51 99 1.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 0))
			   vals "clobber env start")
	  (map-channel (lambda (y) 1.0) 75 25)
	  (do ((i 75 (1+ i)))
	      ((= i 100))
	    (vct-set! vals i 1.0))
	  (check-edit-tree '((0 14 0 24 1.0 0.0 0.0 0) (25 12 25 49 1.0 0.0 0.0 0) (50 13 0 0 1.0 0.0 0.0 0) (51 12 51 74 1.0 0.0 0.0 0) (75 15 0 24 1.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 0))
			   vals "clobber env end")
	  (save-edit-history "hiho.scm")
	  (revert-sound ind)
	  (set! sfile ind)
	  (load "hiho.scm")
	  (check-edit-tree '((0 14 0 24 1.0 0.0 0.0 0) (25 12 25 49 1.0 0.0 0.0 0) (50 13 0 0 1.0 0.0 0.0 0) (51 12 51 74 1.0 0.0 0.0 0) (75 15 0 24 1.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 0))
			   vals "reload edits")
	  (if (not (equal? (edits) (list 27 0))) (snd-display ";edits after reload: ~A" (edits)))
	  (delete-file "hiho.scm")

	  (env-channel (make-env '(0 1 1 0 2 1) :end 19) 50 20)
	  (let ((e (make-env '(0 1 1 0 2 1) :end 19)))
	    (do ((i 50 (1+ i)))
		((= i 70))
	      (vct-set! vals i (* (env e) (vct-ref vals i)))))
	  (check-edit-tree '((0 14 0 24 1.0 0.0 0.0 0) (25 12 25 49 1.0 0.0 0.0 0) (50 13 0 0 1.0 1.0 1.0 1) (51 12 51 60 1.0 0.899999976158142 -2.38418582654276e-8 1) (61 12 61 69 1.0 0.111111111938953 1.0 1) (70 12 70 74 1.0 0.0 0.0 0) (75 15 0 24 1.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 0))
			   vals "env on env")
	  (env-channel (make-env '(0 1 1 0 2 1) :end 79) 10 80)
	  (let ((e (make-env '(0 1 1 0 2 1) :end 79)))
	    (do ((i 10 (1+ i)))
		((= i 90))
	      (vct-set! vals i (* (env e) (vct-ref vals i)))))
	  (check-edit-tree '((0 14 0 9 1.0 0.0 0.0 0) (10 14 10 24 1.0 1.0 0.649999976158142 1) (25 12 25 49 1.0 0.625 0.025000000372529 1) 
			     (50 13 0 0 1.0 1.0 1.0 3) (51 12 51 60 1.0 0.899999976158142 -2.38418582654276e-8 3) 
			     (61 12 61 69 1.0 0.111111111938953 1.0 3) (70 12 70 74 1.0 0.512820541858673 0.615384638309479 1) 
			     (75 15 0 14 1.0 0.64102566242218 1.0 1) (90 15 15 24 1.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 0))
			   vals "env on env 2")
	  (env-channel (make-env '(0 1 1 0 2 1) :end 19) 50 20)
	  (let ((e (make-env '(0 1 1 0 2 1) :end 19)))
	    (do ((i 50 (1+ i)))
		((= i 70))
	      (vct-set! vals i (* (env e) (vct-ref vals i)))))
	  (check-edit-tree '((0 14 0 9 1.0 0.0 0.0 0) (10 14 10 24 1.0 1.0 0.649999976158142 2) (25 12 25 49 1.0 0.625 0.025000000372529 2) (50 13 0 0 1.0 1.0 1.0 4) (51 12 51 60 1.0 0.899999976158142 -2.38418582654276e-8 4) (61 12 61 69 1.0 0.111111111938953 1.0 4) (70 12 70 74 1.0 0.512820541858673 0.615384638309479 2) (75 15 0 14 1.0 0.64102566242218 1.0 2) (90 15 15 24 1.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 1))
			   vals "env on env 3")
	  (delete-samples 10 20)
	  (insert-silence 10 20)
	  (do ((i 10 (1+ i)))
	      ((= i 30))
	    (vct-set! vals i 0.0))
	  (check-edit-tree '((0 14 0 9 1.0 0.0 0.0 0) (10 -1 0 19 0.0 0.0 0.0 1) (30 12 30 49 1.0 0.5 0.025000000372529 2) (50 13 0 0 1.0 1.0 1.0 4) (51 12 51 60 1.0 0.899999976158142 -2.38418582654276e-8 4) (61 12 61 69 1.0 0.111111111938953 1.0 4) (70 12 70 74 1.0 0.512820541858673 0.615384638309479 2) (75 15 0 14 1.0 0.64102566242218 1.0 2) (90 15 15 24 1.0 0.0 0.0 0) (100 -2 0 0 0.0 0.0 0.0 1))
			   vals "env preclobbered")
	  (close-sound ind))

	(for-each
	 (lambda (dur)
	   (let* ((i1 (new-sound))
		  (v (vct-fill! (make-vct dur) 1.0)))
	     (define (check-env name r e)
	       (call-with-current-continuation
		(lambda (break)
		  (do ((i 0 (1+ i)))
		      ((= i dur))
		    (let ((rv (r))
			  (ev (e)))
		      (if (fneq rv ev) 
			  (begin
			    (snd-display ";~A env check [~A]: ~A ~A" name i rv ev)
			    (break))))))))
	     (vct->channel v)
	     (env-sound '(0 0 1 1))
	     (check-env 'ramp (make-sample-reader 0) (make-env '(0 0 1 1) :end (1- dur)))
	     (reverse-channel)
	     (check-env 'rev-ramp (make-sample-reader 0) (make-env '(0 1 1 0) :end (1- dur)))
	     (undo 2)
	     (env-sound '(0 0 1 1 2 0))
	     (check-env 'ramp (make-sample-reader 0) (make-env '(0 0 1 1 2 0) :end (1- dur)))
	     (let ((cur-read (make-sample-reader 0)))
	       (reverse-channel)
	       (let ((rev-read (make-sample-reader (1- dur) i1 0 -1)))
		 (check-env 'rev-pyr cur-read rev-read)))
	     (undo 2)
	     (env-sound '(0 0 1 1 2 0 3 1))
	     (check-env '3-ramp (make-sample-reader 0) (make-env '(0 0 1 1 2 0 3 1) :end (1- dur)))
	     (let ((cur-read (make-sample-reader 0)))
	       (reverse-channel)
	       (let ((rev-read (make-sample-reader (1- dur) i1 0 -1)))
		 (check-env 'rev-pyr cur-read rev-read)))
	     (undo 2)
	     (env-sound '(0 0 1 1 2 1 3 0))
	     (check-env 'sqoff (make-sample-reader 0) (make-env '(0 0 1 1 2 1 3 0) :end (1- dur)))
	     (undo 1)
	     (env-sound '(0 0 1 .5 2 .5 3 0))
	     (check-env '5sqoff (make-sample-reader 0) (make-env '(0 0 1 .5 2 .5 3 0) :end (1- dur)))
	     (undo 1)
	     (scale-channel .5)
	     (env-sound '(0 0 1 1))
	     (check-env 'scl-ramp (make-sample-reader 0) (make-env '(0 0 1 1) :end (1- dur) :scaler .5))
	     (reverse-channel)
	     (check-env 'scl-rev-ramp (make-sample-reader 0) (make-env '(0 1 1 0) :end (1- dur) :scaler .5))
	     (undo 2)
	     (env-sound '(0 0 1 1 2 0))
	     (check-env 'scl-3-ramp (make-sample-reader 0) (make-env '(0 0 1 1 2 0) :end (1- dur) :scaler .5))
	     (let ((cur-read (make-sample-reader 0)))
	       (reverse-channel)
	       (let ((rev-read (make-sample-reader (1- dur) i1 0 -1)))
		 (check-env 'scl-rev-pyr cur-read rev-read)))
	     (undo 3)
	     (if (= dur 10000)
		 (begin
		   (for-each 
		    (lambda (beg local-dur)
		      (env-sound '(0 0 1 1 2 0))
		      (scale-channel .5 beg local-dur)
		      (check-env 'env+scl 
				 (make-sample-reader 0)
				 (let ((e (make-env '(0 0 1 1 2 0) :end (1- dur)))
				       (ctr 0))
				   (lambda ()
				     (let ((val (env e)))
				       (set! ctr (1+ ctr))
				       (if (and (> ctr beg)
						(<= ctr (+ beg local-dur)))
					   (* val .5)
					   val)))))
		      (undo 2))
		    (list 0    0    1000 1000 4000 5000 6000 5000)
		    (list 1000 6000 1000 4000 2000 1000 1000 5000))))
	     (if (= dur 10000)
		 (begin
		   (for-each 
		    (lambda (env-beg env-dur scl-beg scl-dur)
		      (env-channel '(0 0 1 1 2 1 3 0) env-beg env-dur)
		      (scale-channel .5 scl-beg scl-dur)
		      (check-env 'env+scl-partial
				 (make-sample-reader 0)
				 (let ((e (make-env '(0 0 1 1 2 1 3 0) :end (1- env-dur)))
				       (ctr 0))
				   (lambda ()
				     (let ((val 1.0))
				       (set! ctr (1+ ctr))
				       (if (and (> ctr env-beg)
						(<= ctr (+ env-beg env-dur)))
					   (set! val (* val (env e))))
				       (if (and (> ctr scl-beg)
						(<= ctr (+ scl-beg scl-dur)))
					   (set! val (* val 0.5)))
				       val))))
		      (undo 2))
		    (list 0    0     1000 1000 4000 5000 6000 5000)
		    (list 1000 6000  1000 4000 2000 1000 1000 5000)
		    (list 500  0     0    2000 5000 4000 0    8000)
		    (list 200  10000 1500 1000 500  2000 2000 2000))))
	     (env-sound '(0 0 1 1))
	     (env-sound '(0 0 1 1))
	     (check-env 'unenv-ramp 
			(make-sample-reader 0) 
			(let ((e (make-env '(0 0 1 1) :end (1- dur))))
			  (lambda ()
			    (let ((val (env e)))
			      (* val val)))))
	     (undo 2)
	     (env-sound '(0 0 1 1))
	     (let ((v1 (vct-fill! (make-vct 3) 1.0)))
	       (vct->channel v1 3 3)
	       (let ((vals (channel->vct 0 10)))
		 (if (not (vequal vals (vct 0.0 (/ 1.111 dur) (/ 2.222 dur) 1 1 1 (/ 6.66  dur) (/ 7.77  dur) (/ 8.88  dur) (/ 10.0 dur))))
		     (snd-display "; 1 vals: ~A" vals))))
	     (undo 2)
	     (env-sound '(0 0 1 1))
	     (let ((v1 (vct-fill! (make-vct 3) 1.0)))
	       (delete-samples 3 3)
	       (insert-samples 3 3 v1)
	       (let ((vals (channel->vct 0 10)))
		 (if (not (vequal vals (vct 0.0 (/ 1.111 dur) (/ 2.222 dur) 1 1 1 (/ 6.66  dur) (/ 7.77  dur) (/ 8.88  dur) (/ 10.0 dur))))
		     (snd-display "; 2 vals: ~A" vals))))
	     (undo 3)
	     (env-sound '(0 0 1 1))
	     (let ((v1 (vct-fill! (make-vct 3) 1.0)))
	       (insert-samples 3 3 v1)
	       (delete-samples 3 3))
	     (check-env '5-ramp (make-sample-reader 0) (make-env '(0 0 1 1) :end (1- dur)))
	     (undo 3)
	     (env-sound '(0 0 1 1 2 0))
	     (let ((v1 (vct-fill! (make-vct 3) 1.0)))
	       (if (= dur 10)
		   (begin
		     (vct->channel v1 3 3)
		     (let ((vals (channel->vct 0 10)))
		       (if (not (vequal vals (vct 0.0 .2 .4 1 1 1 .75 .5 .25 0)))
			   (snd-display "; 4 vals (~A): ~A" dur vals))))
		   (begin
		     (vct-fill! v1 0.0)
		     (vct->channel v1 4998 3)
		     (let ((vals (channel->vct 4995 10)))
		       (if (not (vequal vals (vct 0.999 0.999 1.000 0.000 0.000 0.000 1.000 0.999 0.999 0.999)))
			   (snd-display "; 4 vals big: ~A" vals))))))
	     (undo 2)
	     (if (= dur 10)
		 (begin
		   (env-sound '(0 0 1 1 2 0))
		   (let ((v1 (vct-fill! (make-vct 3) 1.0)))
		     (delete-samples 3 3)
		     (insert-samples 3 3 v1)
		     (let ((vals (channel->vct 0 10)))
		       (if (not (vequal vals (vct 0.0 .2 .4 1 1 1 .75 .5 .25 0)))
			   (snd-display "; 2 vals: ~A" vals))))
		   (undo 3)
		   (env-sound '(0 0 1 1 2 0))
		   (let ((v1 (vct-fill! (make-vct 3) 1.0)))
		     (vct->channel v1 0 3)
		     (let ((vals (channel->vct 0 10)))
		       (if (not (vequal vals (vct 1.000 1.000 1.000 0.600 0.800 1.000 0.750 0.500 0.250 0.000)))
			   (snd-display "; 4 vals: ~A" vals))))
		   (undo 2)
		   (env-sound '(0 0 1 1 2 0))
		   (let ((v1 (vct-fill! (make-vct 3) 1.0)))
		     (vct->channel v1 7 3)
		     (let ((vals (channel->vct 0 10)))
		       (if (not (vequal vals (vct 0.000 0.200 0.400 0.600 0.800 1.000 0.750 1.000 1.000 1.000)))
			   (snd-display "; 5 vals: ~A" vals))))
		   (undo 2)))
	     (let ((file (file-name i1)))
	       (close-sound i1)
	       (if (file-exists? file) (delete-file file)))
	     ))
	 (list 10 10000))
	
	(let ((ind (new-sound "fmv.snd" mus-next mus-bfloat 22050 1 "envd edit trees"))
	      (vals (make-vct 10000)))
	  (select-sound ind)
	  (select-channel 0)
	  (check-edit-tree '((0 0 0 0 1.0 0.0 0.0 0) (1 -2 0 0 0.0 0.0 0.0 0)) (make-vct 1) "initial new-sound")
	  (vct-fill! vals 1.0)
	  (set! (samples 0 10000) vals)
	  (check-edit-tree '((0 1 0 9999 1.0 0.0 0.0 0) (10000 -2 0 0 0.0 0.0 0.0 0)) vals "envd set first samps to one")
	  (env-sound '(0 0 1 1))
	  (let ((e (make-env '(0 0 1 1) :end 9999)))
	    (vct-map! vals (lambda () (e))))
	  (check-edit-tree '((0 1 0 9999 1.0 2.52621252909424e-12 1.0 1) (10000 -2 0 0 0.0 0.0 0.0 0))
			   vals "env frag '(0 0 1 1)")
	  (delete-samples 1000 1000)
	  (let ((v1 (make-vct 9000)))
	    (do ((i 0 (1+ i)))
		((= i 1000))
	      (vct-set! v1 i (vct-ref vals i)))
	    (do ((i 1000 (1+ i))
		 (j 2000 (1+ j)))
		((= i 9000))
	      (vct-set! v1 i (vct-ref vals j)))
	    (check-edit-tree '((0 1 0 999 1.0 2.52621252909424e-12 0.0999099910259247 1) 
                               (1000 1 2000 9999 1.0 0.200020000338554 1.0 1) 
			       (9000 -2 0 0 0.0 0.0 0.0 0))
			     v1 "env frag del"))
	  (undo 1)
	  (delete-samples 9000 1000)
	  (insert-samples 3000 1000 (make-vct 1000))
	  (do ((i 9999 (1- i)))
	      ((< i 4000))
	    (vct-set! vals i (vct-ref vals (- i 1000))))
	  (do ((i 3000 (1+ i)))
	      ((= i 4000))
	    (vct-set! vals i 0.0))
	  (check-edit-tree '((0 1 0 2999 1.0 2.52621252909424e-12 0.29993000626564 1) 
                             (3000 2 0 999 1.0 0.0 0.0 0) 
                             (4000 1 3000 8999 1.0 0.300030022859573 0.899990022182465 1) 
                             (10000 -2 0 0 0.0 0.0 0.0 0))
			   vals "envd ins/del")
	  (delete-samples 0 1000)
	  (insert-samples 0 1000 (make-vct 1000))
	  (do ((i 0 (1+ i)))
	      ((= i 1000))
	    (vct-set! vals i 0.0))
	  (check-edit-tree '((0 3 0 999 1.0 0.0 0.0 0) 
                             (1000 1 1000 2999 1.0 0.100010007619858 0.29993000626564 1) 
                             (3000 2 0 999 1.0 0.0 0.0 0)
                             (4000 1 3000 8999 1.0 0.300030022859573 0.899990022182465 1) 
                             (10000 -2 0 0 0.0 0.0 0.0 0))
			   vals "envd predel")
	  (scale-by 0.5)
	  (do ((i 0 (1+ i)))
	      ((= i 10000))
	    (vct-set! vals i (* (vct-ref vals i) 0.5)))
	  (check-edit-tree '((0 3 0 999 0.5 0.0 0.0 0) 
			     (1000 1 1000 2999 0.5 0.100010007619858 0.29993000626564 1) 
			     (3000 2 0 999 0.5 0.0 0.0 0) 
			     (4000 1 3000 8999 0.5 0.300030022859573 0.899990022182465 1) 
			     (10000 -2 0 0 0.0 0.0 0.0 0))
			   vals "envd scl")
	  (reverse-channel)
	  (do ((i 0 (1+ i))
	       (j 9999 (1- j)))
	      ((= i 5000))
	    (let ((temp (vct-ref vals i)))
	      (vct-set! vals i (vct-ref vals j))
	      (vct-set! vals j temp)))
	  (check-edit-tree '((0 4 0 9999 1.0 0.0 0.0 0) (10000 -2 0 0 0.0 0.0 0.0 0))
			   vals "envd rev")
	  
	  (revert-sound ind)
	  (set! vals (make-vct 100000))
	  (vct-fill! vals 1.0)
	  (vct->channel vals 0 100000)
	  (env-channel (make-env '(0 0 1 1 2 0) :end 9999) 30000 10000)
	  (let ((e (make-env '(0 0 1 1 2 0) :end 9999)))
	    (do ((i 30000 (1+ i)))
		((= i 40000))
	      (vct-set! vals i (env e))))
	  (check-edit-tree '((0 1 0 29999 1.0 0.0 0.0 0) 
			     (30000 1 30000 35000 1.0 1.71387285873709e-12 1.0 1) 
			     (35001 1 35001 39999 1.0 0.999799966812134 6.29921462214078e-17 1)
			     (40000 1 40000 99999 1.0 0.0 0.0 0) 
			     (100000 -2 0 0 0.0 0.0 0.0 0))
			   vals "partial env")
	  (scale-channel .5 10000 10000)
	  (env-channel (make-env '(0 0 1 1 2 0) :end 9999) 30000 10000) ; env over env
	  (let ((e (make-env '(0 0 1 1 2 0) :end 9999)))
	    (do ((i 30000 (1+ i)))
		((= i 40000))
	      (vct-set! vals i (* (vct-ref vals i) (env e)))))
	  (do ((i 10000 (1+ i)))
	      ((= i 20000))
	    (vct-set! vals i (* (vct-ref vals i) 0.5)))
	  (check-edit-tree '((0 1 0 9999 1.0 0.0 0.0 0) (10000 1 10000 19999 0.5 0.0 0.0 0) (20000 1 20000 29999 1.0 0.0 0.0 0) (30000 1 30000 35000 1.0 5.05242505818848e-12 1.0 3) (35001 1 35001 39999 1.0 0.999799966812134 4.75964753721136e-17 3) (40000 1 40000 99999 1.0 0.0 0.0 0) (100000 -2 0 0 0.0 0.0 0.0 0))
			   vals "env over env")
	  (env-channel (make-env '(0 0 1 1 2 0) :end 9999) 5000 10000) ; env over scl
	  (let ((e (make-env '(0 0 1 1 2 0) :end 9999)))
	    (do ((i 5000 (1+ i)))
		((= i 15000))
	      (vct-set! vals i (* (vct-ref vals i) (env e)))))
	  (check-edit-tree '((0 1 0 4999 1.0 0.0 0.0 0) (5000 1 5000 9999 1.0 5.05242505818848e-12 0.999800026416779 1) (10000 1 10000 10000 0.5 1.0 1.0 1) (10001 1 10001 14999 0.5 0.999799966812134 4.75964753721136e-17 1) (15000 1 15000 19999 0.5 0.0 0.0 0) (20000 1 20000 29999 1.0 0.0 0.0 0) (30000 1 30000 35000 1.0 5.05242505818848e-12 1.0 3) (35001 1 35001 39999 1.0 0.999799966812134 4.75964753721136e-17 3) (40000 1 40000 99999 1.0 0.0 0.0 0) (100000 -2 0 0 0.0 0.0 0.0 0))
			   vals "env over scl")
	  (ramp-channel .5 -.5 25000 1000)
	  (let ((e (make-env '(0 .5 1 -.5) :end 999)))
	    (do ((i 25000 (1+ i)))
		((= i 26000))
	      (vct-set! vals i (* (vct-ref vals i) (env e)))))
	  (check-edit-tree '((0 1 0 4999 1.0 0.0 0.0 0) (5000 1 5000 9999 1.0 5.05242505818848e-12 0.999800026416779 1) (10000 1 10000 10000 0.5 1.0 1.0 1) (10001 1 10001 14999 0.5 0.999799966812134 4.75964753721136e-17 1) (15000 1 15000 19999 0.5 0.0 0.0 0) (20000 1 20000 24999 1.0 0.0 0.0 0) (25000 1 25000 25999 1.0 0.5 -0.5 1) (26000 1 26000 29999 1.0 0.0 0.0 0) (30000 1 30000 35000 1.0 5.05242505818848e-12 1.0 3) (35001 1 35001 39999 1.0 0.999799966812134 4.75964753721136e-17 3) (40000 1 40000 99999 1.0 0.0 0.0 0) (100000 -2 0 0 0.0 0.0 0.0 0))
			   vals "ramp")
	  (scale-by -1.0)
	  (vct-scale! vals -1.0)
	  (check-edit-tree '((0 1 0 4999 -1.0 0.0 0.0 0) (5000 1 5000 9999 -1.0 5.05242505818848e-12 0.999800026416779 1) (10000 1 10000 10000 -0.5 1.0 1.0 1) (10001 1 10001 14999 -0.5 0.999799966812134 4.75964753721136e-17 1) (15000 1 15000 19999 -0.5 0.0 0.0 0) (20000 1 20000 24999 -1.0 0.0 0.0 0) (25000 1 25000 25999 -1.0 0.5 -0.5 1) (26000 1 26000 29999 -1.0 0.0 0.0 0) (30000 1 30000 35000 -1.0 5.05242505818848e-12 1.0 3) (35001 1 35001 39999 -1.0 0.999799966812134 4.75964753721136e-17 3) (40000 1 40000 99999 -1.0 0.0 0.0 0) (100000 -2 0 0 0.0 0.0 0.0 0))
			   vals "invert")
	  (let ((reader (make-sample-reader 0 ind 0 1 (1- (edit-position)))))
	    (map-channel (lambda (y)
			   (+ (reader) y)))
	    (check-edit-tree '((0 2 0 99999 1.0 0.0 0.0 0) (100000 -2 0 0 0.0 0.0 0.0 0))
			     (make-vct 100000) "invert and add")
	    (if (fneq (maxamp) 0.0) (snd-display ";invert-and-add maxamp: ~A" (maxamp))))

	  (undo 1)
	  (ramp-channel -1.0 1.0 50000 30000)
	  (let ((e (make-env '(0 -1.0 1 1.0) :end 29999)))
	    (do ((i 50000 (1+ i)))
		((= i 80000))
	      (vct-set! vals i (* (vct-ref vals i) (env e)))))
	  (check-edit-tree '((0 1 0 4999 -1.0 0.0 0.0 0) (5000 1 5000 9999 -1.0 5.05242505818848e-12 0.999800026416779 1) (10000 1 10000 10000 -0.5 1.0 1.0 1) (10001 1 10001 14999 -0.5 0.999799966812134 4.75964753721136e-17 1) (15000 1 15000 19999 -0.5 0.0 0.0 0) (20000 1 20000 24999 -1.0 0.0 0.0 0) (25000 1 25000 25999 -1.0 0.5 -0.5 1) (26000 1 26000 29999 -1.0 0.0 0.0 0) (30000 1 30000 35000 -1.0 5.05242505818848e-12 1.0 3) (35001 1 35001 39999 -1.0 0.999799966812134 4.75964753721136e-17 3) (40000 1 40000 49999 -1.0 0.0 0.0 0) (50000 1 50000 79999 -1.0 -0.999999940395355 1.00000011920929 1) (80000 1 80000 99999 -1.0 0.0 0.0 0) (100000 -2 0 0 0.0 0.0 0.0 0))
			   vals "ramp")
	  (env-sound '(0 0 1 1))
	  (reverse-channel)
	  (delete-samples 1 99999)
	  (if (fneq (sample 0) -1.0) (snd-display ";sample at end: ~A" (sample 0)))
	  (if (not (= (frames) 1)) (snd-display ";length at end: ~A" (frames)))
	  (check-edit-tree '((0 2 0 0 1.0 0.0 0.0 0) (1 -2 0 0 0.0 0.0 0.0 0))
			   (vct-fill! (make-vct 1) -1.0) "at end")
	  (close-sound ind))

	;; a special case that catches the round-off problem
	(let ((ind (open-sound "oboe.snd")))
	  (env-channel '(0.0 0.984011617147162 0.644050741979388 0.110976689002195 1.17272046995914 0.384709990674106 
                         1.25650287720397 0.551452668245628 1.4389507801877 0.843827758574229 2.16614272265275 0.226832341237953))
	  (let ((val (sample 50827)))
	    (if (or (not (number? val))
		    (fneq val 0.0))
		(snd-display ";round-off env: ~A" val)))
	  (check-edit-tree '((0 0 0 15112 1.0 0.984011590480804 0.110976688563824 1) 
			     (15113 0 15113 27517 1.0 0.110998757183552 0.384709984064102 1) 
			     (27518 0 27518 29483 1.0 0.384794801473618 0.551452696323395 1) 
			     (29484 0 29484 33764 1.0 0.551521003246307 0.843827784061432 1) 
			     (33765 0 33765 50827 1.0 0.843791604042053 0.226832345128059 1) 
			     (50828 -2 0 0 0.0 0.0 0.0 0))
			   #f "round-off test")
	  (revert-sound ind)
	  (map-channel (lambda (y) 1.0))
	  (env-channel '(0 0 1 1 2 0))
	  (scale-channel .5 1000 1000)
	  (let ((val (sample 800)))
	    (if (fneq val .0314)
		(snd-display ";scl on env trouble: ~A" val)))
	  (check-edit-tree '((0 1 0 999 1.0 -1.13455122033312e-12 0.0393090434372425 1) 
			     (1000 1 1000 1999 0.5 0.0393483936786652 0.0786574333906174 1) 
			     (2000 1 2000 25414 1.0 0.0786574333906174 1.0 1) 
			     (25415 1 25415 50827 1.0 0.999960660934448 -4.22838847269347e-17 1) 
			     (50828 -2 0 0 0.0 0.0 0.0 0))
			   #f "scl on env")
	  (revert-sound ind)
	  (map-channel (lambda (y) 1.0))
	  (ramp-channel 0.0 1.0)
	  (ramp-channel 0.0 1.0)
	  (ramp-channel 0.0 1.0)
	  (let ((val (sample 20000)))
	    (if (fneq val (expt (/ 20000.0 50828) 3))
		(snd-display ";ramp-channels piled up: ~A" val)))
	  (check-edit-tree '((0 1 0 50827 1.0 1.16525265456656e-13 1.0 4) (50828 -2 0 0 0.0 0.0 0.0 0))
			   #f "ramp upon ramp")
	  (revert-sound ind)

	  (map-channel (lambda (y) 1.0))
	  (ramp-channel 0.5 1.0) ; val = 0.5 + (20000/50828)*0.5
	  (ramp-channel 0.0 0.5) ; val * (20000/50828)*0.5
	  (ramp-channel 0.1 0.4) ; val * (0.1 + (20000/50828)*0.3)
	  (let* ((val (sample 20000))
		 (ratio (/ 20000.0 50828))
		 (val1 (+ 0.5 (* 0.5 ratio)))
		 (val2 (* val1 (* 0.5 ratio)))
		 (val3 (* val2 (+ 0.1 (* ratio 0.3)))))
	    (if (fneq val val3)
		(snd-display ";ramp-channels piled up (2): ~A ~A" val val3)))

	  (revert-sound ind)
	  (env-channel '(0 0 1 1 2 0))
	  (check-edit-tree '((0 0 0 25414 1.0 -1.13455122033312e-12 1.0 1) 
			     (25415 0 25415 50827 1.0 0.999960660934448 -4.22838847269347e-17 1) 
			     (50828 -2 0 0 0.0 0.0 0.0 0))
			   #f "env+scl 0")
	  (scale-channel .5 0 1000)
	  (check-edit-tree '((0 0 0 999 0.5 -1.13455122033312e-12 0.0393483899533749 1) 
			     (1000 0 1000 25414 1.0 0.0393483899533749 1.0 1) 
			     (25415 0 25415 50827 1.0 0.999960660934448 -4.22838847269347e-17 1) 
			     (50828 -2 0 0 0.0 0.0 0.0 0))
			   #f "env+scl 1")
	  (undo)
	  (scale-channel .5 1000 1000)
	  (check-edit-tree '((0 0 0 999 1.0 -1.13455122033312e-12 0.0393483899533749 1) 
			     (1000 0 1000 1999 0.5 0.0393483899533749 0.0786967799067497 1) 
			     (2000 0 2000 25414 1.0 0.0786967799067497 1.0 1) 
			     (25415 0 25415 50827 1.0 0.999960660934448 -4.22838847269347e-17 1)
			     (50828 -2 0 0 0.0 0.0 0.0 0))
			   #f "env+scl 2")
	  (undo)
	  (scale-channel .5 0 25415)
	  (check-edit-tree '((0 0 0 25414 0.5 -1.13455122033312e-12 0.999960660934448 1) 
			     (25415 0 25415 50827 1.0 0.999960660934448 -4.22838847269347e-17 1) 
			     (50828 -2 0 0 0.0 0.0 0.0 0))
			   #f "env+scl 3")
	  (undo)
	  (scale-channel .5 20000 10000)
	  (check-edit-tree '((0 0 0 19999 1.0 -1.13455122033312e-12 0.786967813968658 1)
			     (20000 0 20000 25414 0.5 0.786967813968658 1.0 1) 
			     (25415 0 25415 29999 0.5 0.999960660934448 0.819541215896606 1) 
			     (30000 0 30000 50827 1.0 0.819541215896606 -4.22838847269347e-17 1) 
			     (50828 -2 0 0 0.0 0.0 0.0 0))
			   #f "env+scl 4")
	  (undo)
	  (scale-channel .5 30000 1000)
	  (check-edit-tree '((0 0 0 25414 1.0 -1.13455122033312e-12 1.0 1) 
			     (25415 0 25415 29999 1.0 0.999960660934448 0.819541215896606 1) 
			     (30000 0 30000 30999 0.5 0.819541215896606 0.780191242694855 1) 
			     (31000 0 31000 50827 1.0 0.780191242694855 -4.22838847269347e-17 1) 
			     (50828 -2 0 0 0.0 0.0 0.0 0))
			   #f "env+scl 5")
	  (undo)
	  (scale-channel .5 25415 1000)
	  (check-edit-tree '((0 0 0 25414 1.0 -1.13455122033312e-12 0.999960660934448 1) 
			     (25415 0 25415 26414 0.5 0.999960660934448 0.960610747337341 1) 
			     (26415 0 26415 50827 1.0 0.960610747337341 -4.22838847269347e-17 1) 
			     (50828 -2 0 0 0.0 0.0 0.0 0))
			   #f "env+scl 6")
	  (undo)
	  (scale-channel .5 40000 10828)
	  (check-edit-tree '((0 0 0 25414 1.0 -1.13455122033312e-12 1.0 1) 
			     (25415 0 25415 39999 1.0 0.999960660934448 0.426041781902313 1) 
			     (40000 0 40000 50827 0.5 0.426041781902313 0.0 1) 
			     (50828 -2 0 0 0.0 0.0 0.0 0))
			   #f "env+scl 7")

	  (close-sound ind))

	(for-each
	 (lambda (dur)
	   (let* ((i1 (new-sound))
		  (i2 (new-sound "fmv1.snd" mus-next mus-bfloat 44100 2))
		  (v (vct-fill! (make-vct dur) 1.0)))
	     (define (check-env name r e)
	       (call-with-current-continuation
		(lambda (break)
		  (do ((i 0 (1+ i)))
		      ((= i dur))
		    (let ((rv (r))
			  (ev (e)))
		      (if (fneq rv ev) 
			  (begin
			    (snd-display ";~A env check [~A]: ~A ~A" name i rv ev)
			    (throw 'uhoh)
			    (break))))))))
	     (define (check-envs name r-maker e-maker)
	       (check-env (format #f "~A-1-0" name) (r-maker i1 0) (e-maker i1 0))
	       (check-env (format #f "~A-2-0" name) (r-maker i2 0) (e-maker i2 0))
	       (check-env (format #f "~A-2-1" name) (r-maker i2 1) (e-maker i2 1)))
	     (vct->channel v 0 dur i1)
	     (vct->channel v 0 dur i2 0)
	     (vct->channel v 0 dur i2 1)
	     (set! (sync i1) 1)
	     (set! (sync i2) 1)
	     (env-sound '(0 0 1 1))
	     (check-envs 'ramps (lambda (s c) (make-sample-reader 0 s c)) (lambda (s c) (make-env '(0 0 1 1) :end (1- dur))))
	     (reverse-sound)
	     (check-envs 'rev-ramps (lambda (s c) (make-sample-reader 0 s c)) (lambda (s c) (make-env '(0 1 1 0) :end (1- dur))))
	     (undo 2)
	     (env-sound '(0 0 1 1 2 0))
	     (check-envs 'ramps (lambda (s c) (make-sample-reader 0 s c)) (lambda (s c) (make-env '(0 0 1 1 2 0) :end (1- dur))))
	     (undo 1)
	     (scale-by .5)
	     (env-sound '(0 0 1 1))
	     (check-envs 'scl-ramps (lambda (s c) (make-sample-reader 0 s c)) (lambda (s c) (make-env '(0 0 1 1) :end (1- dur) :scaler .5)))
	     (reverse-sound)
	     (check-envs 'scl-rev-ramps (lambda (s c) (make-sample-reader 0)) (lambda (s c) (make-env '(0 1 1 0) :end (1- dur) :scaler .5)))
	     (undo 3)
	     (env-sound '(0 0 1 1))
	     (env-sound '(0 0 1 1))
	     (check-envs 'unenv-ramps
			 (lambda (s c)
			   (make-sample-reader 0 s c))
			 (lambda (s c)
			   (let ((e (make-env '(0 0 1 1) :end (1- dur))))
			     (lambda ()
			       (let ((val (env e)))
				 (* val val))))))
	     (undo 2)
	     (env-sound '(0 0 1 1))
	     (let ((v1 (vct-fill! (make-vct 3) 1.0)))
	       (vct->channel v1 3 3 i1)
	       (vct->channel v1 3 3 i2 0)
	       (vct->channel v1 3 3 i2 1)
	       (let ((vals (channel->vct 0 10 i1 0)))
		 (if (not (vequal vals (vct 0.0 (/ 1.111 dur) (/ 2.222 dur) 1 1 1 (/ 6.66  dur) (/ 7.77  dur) (/ 8.88  dur) (/ 10.0 dur))))
		     (snd-display "; 1 0 vals: ~A" vals))
		 (set! vals (channel->vct 0 10 i2 0))
		 (if (not (vequal vals (vct 0.0 (/ 1.111 dur) (/ 2.222 dur) 1 1 1 (/ 6.66  dur) (/ 7.77  dur) (/ 8.88  dur) (/ 10.0 dur))))
		     (snd-display "; 2 0 vals: ~A" vals))
		 (set! vals (channel->vct 0 10 i2 1))
		 (if (not (vequal vals (vct 0.0 (/ 1.111 dur) (/ 2.222 dur) 1 1 1 (/ 6.66  dur) (/ 7.77  dur) (/ 8.88  dur) (/ 10.0 dur))))
		     (snd-display "; 2 1 vals: ~A" vals))))
	     (let ((file (file-name i1)))
	       (close-sound i1)
	       (if (file-exists? file) (delete-file file)))
	     (close-sound i2)
	     ))
	 (list 10 10000))

	(let ((data (map
		     (lambda (sound)
		       (if (file-exists? sound)
			   (let ((ind (view-sound sound))
				 (old-opt (optimization)))
			     (set! (squelch-update ind) #t)
			     (set! (optimization) 5)
			     (let ((times (map
					   (lambda (function)
					     (let ((start (get-internal-real-time)))
					       (function)
					       (revert-sound)
					       (/ (- (get-internal-real-time) start) 100)))
					   (list (lambda () (scale-channel 2.0))
						 (lambda () (reverse-channel))
						 (lambda () (env-channel '(0 0 1 1)))
						 (lambda () (map-channel (lambda (y) (* y 2))))
						 (lambda () (ptree-channel (lambda (y) (+ y .2)) #f #f ind 0 #f #t))
						 (lambda () (scan-channel (lambda (y) (> y 1.0))))
						 (lambda () (pad-channel 0 2000))
						 (lambda () (vct->channel (vct-fill! (make-vct 1000) .1)) 0 1000)
						 (lambda () (clm-channel (make-two-zero .5 .5)))
						 (lambda () (mix "pistol.snd" 12345))
						 (lambda () (src-channel 2.0))
						 (lambda () (delete-samples 10 200))
						 ))))
			       (set! (optimization) old-opt)
			       (close-sound ind)
			       times))))
		     (list "1a.snd" "oboe.snd" "storm.snd" (string-append home-dir "/test/sound/away.snd")))))
	  (snd-display ";         scl   rev   env   map   ptree  scn  pad   wrt   clm   mix   src   del")
	  (snd-display ";1a:   ~{~6,F~}" (car data))  
	  (snd-display ";oboe: ~{~6,F~}" (cadr data))  
	  (snd-display ";storm:~{~6,F~}" (caddr data))
	  (if (list-p (cadddr data))
	      (snd-display ";away: ~{~6,F~}" (cadddr data))))

;;; timings:  scl   rev   env   map   scn   pad   wrt   clm   mix   src   del  
;;; 1a:        0.0   0.0  0.01   0.0  0.01   0.0   0.0  0.01  0.01  0.01   0.0
;;; oboe:      0.0  0.01  0.01  0.11  0.06   0.0   0.0  0.01  0.01  0.03   0.0
;;; storm:     0.0  0.15  0.41  2.16  1.24   0.0  0.01  0.29  0.14  0.75   0.0
;;; away:      0.0  1.53  8.09 24.54 13.58  0.02  0.01  2.95  0.04  8.34  0.02
;;;
;;; after run scan/map opt:
;;; 1a:       0.01   0.0   0.0  0.01   0.0  0.01   0.0   0.0  0.01   0.0  0.01
;;; oboe:     0.01   0.0  0.01   0.0   0.0   0.0  0.01   0.0  0.01  0.02   0.0
;;; storm:    0.01  0.09  0.01  0.23  0.16   0.0   0.0  0.17  0.01  0.57  0.01
;;; away:     0.01  1.07  0.04   2.4  1.68   0.0   0.0  1.76  0.03  4.49  0.02

	(if (and with-big-file (file-exists? "/zap/sounds/bigger.snd"))
	    (begin
	      (if (hook-empty? initial-graph-hook)
		  (load "peak-env.scm"))
	      (reset-hook! after-graph-hook)
	      (reset-hook! mouse-click-hook)
	      (let ((ind (open-sound "/zap/sounds/bigger.snd"))
		    (vals (make-vct 100))
		    (old-vals #f)
		    (new-vals #f)
		    (maxa 0.0))
		(select-sound ind)
		(select-channel 0)
		(set! (squelch-update) #t)
		(if (not (fieql (edit-tree) '((0 0 0 3175199999 1.0 0.0 0.0 0) (3175200000 -2 0 0 0.0 0.0 0.0 0))))
		    (snd-display ";bigger initial tree: ~A" (edit-tree)))
		(vct-fill! vals 1.0)
		(set! maxa (maxamp))
		(scale-channel 0.5)
		(set! old-vals (channel->vct (- (* 44100 50000) 50) 200))
		(if (fneq (maxamp) (* 0.5 maxa)) (snd-display ";bigger scale: ~A ~A" maxa (maxamp)))
		(set! (samples (* 44100 50000) 100) vals)
		(if (not (fieql (edit-tree) '((0 0 0 2204999999 0.5 0.0 0.0 0) 
					      (2205000000 1 0 99 1.0 0.0 0.0 0) 
					      (2205000100 0 2205000100 3175199999 0.5 0.0 0.0 0) (3175200000 -2 0 0 0.0 0.0 0.0 0))))
		    (snd-display ";bigger set tree: ~A" (edit-tree)))
		(set! new-vals (channel->vct (- (* 44100 50000) 50) 200))
		(do ((i 50 (1+ i))) ((= i 150)) (vct-set! old-vals i 1.0))
		(if (not (vequal new-vals old-vals)) (snd-display ";bigger set ~A ~A" old-vals new-vals))
		(env-channel (make-env '(0 0 1 1) :end (* 44100 60000)) 1000 (* 44100 60000))
		(if (not (fieql (edit-tree) '((0 0 0 999 0.5 0.0 0.0 0) 
					      (1000 0 1000 2204999999 0.5 1.12130420080871e-17 0.83333295583725 1) 
					      (2205000000 1 0 99 1.0 0.83333295583725 0.833333015441895 1) 
					      (2205000100 0 2205000100 2646000999 0.5 0.833333015441895 1.0 1) 
					      (2646001000 0 2646001000 3175199999 0.5 0.0 0.0 0) 
					      (3175200000 -2 0 0 0.0 0.0 0.0 0))))
		    (snd-display ";bigger with env: ~A" (edit-tree)))
		(revert-sound ind)
		(env-channel (make-env '(0 0 1 1 2 0) :end 100) (* 44100 50000) 100)
		(if (not (fieql (edit-tree) '((0 0 0 2204999999 1.0 0.0 0.0 0) 
					      (2205000000 1 0 99 1.0 0.0 0.0 0) 
					      (2205000100 0 2205000100 3175199999 1.0 0.0 0.0 0) (3175200000 -2 0 0 0.0 0.0 0.0 0))))
		    (snd-display ";bigger short env: ~A" (edit-tree)))
		(let ((r (make-sample-reader (* 44100 50000)))
		      (v (make-vct 10)))
		  (do ((i 0 (1+ i)))
		      ((= i 10))
		    (vct-set! v i (read-sample r)))
		  (if (not (vequal v (vct 0.0 0.001472 0.00584 0.01297 0.02264 0.03453 0.04827 0.06339 0.07941 0.09576)))
		      (snd-display ";bigger short env vals: ~A" v)))
		(revert-sound)
		(scale-to 1.0)
		(if (fneq (maxamp) 1.0) (snd-display ";bigger scale-to 1.0 maxamp: ~A" (maxamp)))
		(set! (sample (* 44100 51000)) 0.0)
		(if (not (fieql (edit-tree) '((0 0 0 2249099999 1.18574941158295 0.0 0.0 0) 
					      (2249100000 1 0 0 1.0 0.0 0.0 0) 
					      (2249100001 0 2249100001 3175199999 1.18574941158295 0.0 0.0 0) (3175200000 -2 0 0 0.0 0.0 0.0 0))))
		    (snd-display ";bigger set 0 samp: ~A" (edit-tree)))
		(if (fneq (sample (* 44100 51000)) 0.0) (snd-display ";bigger 0 samp: ~A" (sample (* 44100 51000))))
		(delete-samples (* 44100 52000) 100)
		(if (not (= (frames) (- 3175200000 100))) (snd-display ";bigger deletion frames: ~A" (frames)))
		(if (not (= (frames ind 0 0) 3175200000)) (snd-display ";bigger edpos deletion frames: ~A" (frames ind 0 0)))
		(if (not (= (frames ind 0 (edit-position)) (- 3175200000 100))) 
		    (snd-display ";bigger ed deletion frames: ~A" (frames ind 0 (edit-position))))
		(if (not (fieql (edit-tree) '((0 0 0 2249099999 1.18574941158295 0.0 0.0 0) 
					      (2249100000 1 0 0 1.0 0.0 0.0 0) 
					      (2249100001 0 2249100001 2293199999 1.18574941158295 0.0 0.0 0) 
					      (2293200000 0 2293200100 3175199999 1.18574941158295 0.0 0.0 0) (3175199900 -2 0 0 0.0 0.0 0.0 0))))
		    (snd-display ";bigger deletion: ~A" (edit-tree)))
		(delete-samples 954624868 67)
		(revert-sound)
		(delete-samples 1000 (* 44100 50000))
		(if (not (= (frames) (- 3175200000 (* 44100 50000)))) (snd-display ";bigger big deletion: ~A" (frames)))
		(if (not (fieql (edit-tree) '((0 0 0 999 1.0 0.0 0.0 0) (1000 0 1085232704 3175199999 1.0 0.0 0.0 0) (970200000 -2 0 0 0.0 0.0 0.0 0))))
		    (snd-display ";bigger big delete: ~A" (edit-tree)))
		(insert-silence 0 (* 44100 50000))
		(if (not (= (frames) 3175200000)) (snd-display ";bigger silence: ~A" (frames)))
		(if (not (fieql (edit-tree) '((0 -1 0 2204999999 0.0 0.0 0.0 0) 
					      (2205000000 0 0 999 1.0 0.0 0.0 0) 
					      (2205001000 0 1085232704 3175199999 1.0 0.0 0.0 0) (3175200000 -2 0 0 0.0 0.0 0.0 0))))
		    (snd-display ";bigger pad: ~A" (edit-tree)))
		(revert-sound)
		(pad-channel (* 44100 50000) 100)
		(if (fneq (sample (+ (* 44100 50000) 10)) 0.0) (snd-display ";bigger pad samp: ~A" (sample (+ (* 44100 50000) 10))))
		(if (not (= (frames) (+ 3175200000 100))) (snd-display ";bigger pad frames: ~A" (frames)))
		(map-channel (lambda (y) (+ y .2)) (* 44100 50000) 10)
		(if (fneq (sample (+ (* 44100 50000) 1)) 0.2) (snd-display ";bigger map samp: ~A" (sample (+ (* 44100 50000) 1))))
		(if (not (fieql (edit-tree) '((0 0 0 2204999999 1.0 0.0 0.0 0) 
					      (2205000000 1 0 9 1.0 0.0 0.0 0) 
					      (2205000010 -1 10 99 0.0 0.0 0.0 0) 
					      (2205000100 0 2205000000 3175199999 1.0 0.0 0.0 0) (3175200100 -2 0 0 0.0 0.0 0.0 0))))
		    (snd-display ";bigger map: ~A" (edit-tree)))
		(save-edit-history "hiho.scm")
		(revert-sound)
		(set! sfile ind)
		(load "hiho.scm")
		(if (not (fieql (edit-tree) '((0 0 0 2204999999 1.0 0.0 0.0 0) 
					      (2205000000 1 0 9 1.0 0.0 0.0 0) 
					      (2205000010 -1 10 99 0.0 0.0 0.0 0) 
					      (2205000100 0 2205000000 3175199999 1.0 0.0 0.0 0) (3175200100 -2 0 0 0.0 0.0 0.0 0))))
		    (snd-display ";bigger reload: ~A" (edit-tree)))
		(delete-file "hiho.scm")
		(let ((flt (make-one-zero 0.5 0.5))
		      (flt1 (make-one-zero 0.5 0.5)))
		  (clm-channel flt (* 44100 65000) 10)
		  (if (not (fieql (edit-tree) '((0 0 0 2204999999 1.0 0.0 0.0 0) 
						(2205000000 1 0 9 1.0 0.0 0.0 0) 
						(2205000010 -1 10 99 0.0 0.0 0.0 0) (2205000100 0 2205000000 2866499899 1.0 0.0 0.0 0) 
						(2866500000 2 0 9 1.0 0.0 0.0 0) (2866500010 0 2866499910 3175199999 1.0 0.0 0.0 0) 
						(3175200100 -2 0 0 0.0 0.0 0.0 0))))
		      (snd-display ";bigger clm: ~A" (edit-tree)))
		  (if (not (vequal (channel->vct (* 44100 65000) 10) (vct 0.011 0.069 0.164 0.255 0.343 0.425 0.501 0.568 0.627 0.676)))
		      (snd-display ";bigger clm vals: ~A" (channel->vct (* 44100 65000) 10))))
		
		(let ((r (make-readin "/zap/sounds/bigger.snd" :start (* 44100 65000)))
		      (v (make-vct 10)))
		  (do ((i 0 (1+ i)))
		      ((= i 10))
		    (vct-set! v i (readin r)))
		  (if (not (vequal v (vct 0.000 0.095 0.189 0.280 0.366 0.447 0.521 0.586 0.643 0.689)))
		      (snd-display ";bigger (orig) readin vals: ~A" v)))
		(revert-sound)
		(let ((found (scan-channel (lambda (y) (> y .5)) (* 44100 50000))))
		  (if (not (equal? found (list #t 2205000009)))
		      (snd-display ";bigger scan: ~A" found)))
		(set! (squelch-update) #f)
		(close-sound ind))))

	(let ((ind-map (view-sound "oboe.snd"))
	      (ind-ptree (view-sound "oboe.snd")))
	  (map-channel (lambda (y) (+ y .1)) #f #f ind-map)
	  (ptree-channel (lambda (y) (+ y .1)) #f #f ind-ptree)
	  (if (not (vequal (channel->vct 0 (frames ind-map) ind-map) (channel->vct 0 (frames ind-ptree) ind-ptree)))
	      (snd-display ";ptree + .1 differs"))
	  (undo 1 ind-map)
	  (undo 1 ind-ptree)
	  (scale-by 2.0 ind-map)
	  (scale-by 2.0 ind-ptree)
	  (map-channel (lambda (y) (+ y .1)) #f #f ind-map)
	  (ptree-channel (lambda (y) (+ y .1)) #f #f ind-ptree)
	  (if (not (vequal (channel->vct 0 (frames ind-map) ind-map) (channel->vct 0 (frames ind-ptree) ind-ptree)))
	      (snd-display ";ptree + .1 differs"))
	  (scale-by 2.0 ind-map)
	  (scale-by 2.0 ind-ptree)
	  (if (not (vequal (channel->vct 0 (frames ind-map) ind-map) (channel->vct 0 (frames ind-ptree) ind-ptree)))
	      (snd-display ";ptree + .1 differs"))
	  (if (and (> (optimization) 0)
		   (not (string=? (display-edits ind-ptree) (string-append "
EDITS: 3

 (begin) [0:2]:
   (at 0, cp->sounds[0][0:50827, 1.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 50828, end_mark)

 (scale 0 50828) ; scale-channel 2.0000 0 50828 [1:2]:
   (at 0, cp->sounds[0][0:50827, 2.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 50828, end_mark)

 (ptree[0] 0 50828) ; ptree 0 0 50828 [2:2]:
   (at 0, cp->sounds[0][0:50827, 1.000000, loc: 0, pos: 0, scl: 2.000000, code: (lambda (y) (+ y 0.1))]) [file: /home/bil/cl/oboe.snd[0]]
   (at 50828, end_mark)

 (scale 0 50828) ; scale-channel 2.0000 0 50828 [3:2]:
   (at 0, cp->sounds[0][0:50827, 2.000000, loc: 0, pos: 0, scl: 2.000000, code: (lambda (y) (+ y 0.1))]) [file: /home/bil/cl/oboe.snd[0]]
   (at 50828, end_mark)
"))))
	      (snd-display ";ptree display edits: ~A" (display-edits ind-ptree)))
	  (revert-sound ind-map)
	  (revert-sound ind-ptree)
	  
	  (map-channel (lambda (y) (* 2.0 (sin y))) #f #f ind-map)
	  (ptree-channel (lambda (y) (* 2.0 (sin y))) #f #f ind-ptree)
	  (if (not (vequal (channel->vct 0 (frames ind-map) ind-map) (channel->vct 0 (frames ind-ptree) ind-ptree)))
	      (snd-display ";ptree sin differs"))
	  (map-channel (lambda (y) (* 2.0 (sin y))) #f #f ind-map)
	  (ptree-channel (lambda (y) (* 2.0 (sin y))) #f #f ind-ptree)
	  (if (not (vequal (channel->vct 0 (frames ind-map) ind-map) (channel->vct 0 (frames ind-ptree) ind-ptree)))
	      (snd-display ";ptree sin (2) differs"))
	  (if (and (> (optimization) 0)
		   (not (string=? (display-edits ind-ptree) (string-append "
EDITS: 2

 (begin) [0:2]:
   (at 0, cp->sounds[0][0:50827, 1.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 50828, end_mark)

 (ptree[0] 0 50828) ; ptree 0 0 50828 [1:2]:
   (at 0, cp->sounds[0][0:50827, 1.000000, loc: 0, pos: 0, scl: 1.000000, code: (lambda (y) (* 2.0 (sin y)))]) [file: /home/bil/cl/oboe.snd[0]]
   (at 50828, end_mark)

 (ptree[1] 0 50828) ; ptree 1 0 50828 [2:2]:
   (at 0, cp->sounds[0][0:50827, 1.000000, loc2: 1, pos2: 0, scl2: 1.000000, loc: 0, pos: 0, scl: 1.000000, code: (lambda (y) (* 2.0 (sin y)))]) [file: /home/bil/cl/oboe.snd[0]]
   (at 50828, end_mark)
"))))
	      (snd-display ";ptree display: ~A" (display-edits ind-ptree)))
	  
	  (revert-sound ind-map)
	  (revert-sound ind-ptree)
	  (env-channel '(0 0 1 1 2 0) #f #f ind-map)
	  (env-channel '(0 0 1 1 2 0) #f #f ind-ptree)
	  (map-channel (lambda (y) (* y y)) #f #f ind-map)
	  (ptree-channel (lambda (y) (* y y)) #f #f ind-ptree)
	  (if (not (vequal (channel->vct 0 (frames ind-map) ind-map) (channel->vct 0 (frames ind-ptree) ind-ptree)))
	      (snd-display ";ptree y*y differs"))
	  
	  (revert-sound ind-map)
	  (revert-sound ind-ptree)
	  (map-channel (lambda (y) (* y y)) #f #f ind-map)
	  (ptree-channel (lambda (y) (* y y)) #f #f ind-ptree)
	  (env-channel '(0 0 1 1 2 0) #f #f ind-map)
	  (env-channel '(0 0 1 1 2 0) #f #f ind-ptree)
	  (if (not (vequal (channel->vct 0 (frames ind-map) ind-map) (channel->vct 0 (frames ind-ptree) ind-ptree)))
	      (snd-display ";ptree y*y differs"))
	  
	  (revert-sound ind-map)
	  (revert-sound ind-ptree)
	  (map-channel (lambda (y) (+ y .1)) 100 100 ind-map)
	  (ptree-channel (lambda (y) (+ y .1)) 100 100 ind-ptree)
	  (if (not (vequal (channel->vct 0 (frames ind-map) ind-map) (channel->vct 0 (frames ind-ptree) ind-ptree)))
	      (snd-display ";ptree[100] + .1 differs"))
	  (scale-by 2.0 ind-map)
	  (scale-by 2.0 ind-ptree)
	  (map-channel (lambda (y) (+ y .2))  1000 100 ind-map)
	  (ptree-channel (lambda (y) (+ y .2)) 1000 100 ind-ptree)
	  (if (not (vequal (channel->vct 0 (frames ind-map) ind-map) (channel->vct 0 (frames ind-ptree) ind-ptree)))
	      (snd-display ";ptree[1000] + .2 differs"))
	  (if (and (> (optimization) 0)
		   (not (string=? (display-edits ind-ptree) (string-append "
EDITS: 3

 (begin) [0:2]:
   (at 0, cp->sounds[0][0:50827, 1.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 50828, end_mark)

 (ptree[0] 100 100) ; ptree 0 100 100 [1:4]:
   (at 0, cp->sounds[0][0:99, 1.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 100, cp->sounds[0][100:199, 1.000000, loc: 0, pos: 0, scl: 1.000000, code: (lambda (y) (+ y 0.1))]) [file: /home/bil/cl/oboe.snd[0]]
   (at 200, cp->sounds[0][200:50827, 1.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 50828, end_mark)

 (scale 0 50828) ; scale-channel 2.0000 0 50828 [2:4]:
   (at 0, cp->sounds[0][0:99, 2.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 100, cp->sounds[0][100:199, 2.000000, loc: 0, pos: 0, scl: 1.000000, code: (lambda (y) (+ y 0.1))]) [file: /home/bil/cl/oboe.snd[0]]
   (at 200, cp->sounds[0][200:50827, 2.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 50828, end_mark)

 (ptree[1] 1000 100) ; ptree 1 1000 100 [3:6]:
   (at 0, cp->sounds[0][0:99, 2.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 100, cp->sounds[0][100:199, 2.000000, loc: 0, pos: 0, scl: 1.000000, code: (lambda (y) (+ y 0.1))]) [file: /home/bil/cl/oboe.snd[0]]
   (at 200, cp->sounds[0][200:999, 2.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 1000, cp->sounds[0][1000:1099, 1.000000, loc: 1, pos: 0, scl: 2.000000, code: (lambda (y) (+ y 0.2))]) [file: /home/bil/cl/oboe.snd[0]]
   (at 1100, cp->sounds[0][1100:50827, 2.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 50828, end_mark)
"))))
	      (snd-display ";ptree[1000] display: ~A" (display-edits ind-ptree)))
	  
	  (env-channel '(0 0 1 1 2 0) 2000 1000 ind-map)
	  (env-channel '(0 0 1 1 2 0) 2000 1000 ind-ptree)
	  (map-channel (lambda (y) (+ y .3))  4000 100 ind-map)
	  (ptree-channel (lambda (y) (+ y .3)) 4000 100 ind-ptree)
	  (if (not (vequal (channel->vct 0 (frames ind-map) ind-map) (channel->vct 0 (frames ind-ptree) ind-ptree)))
	      (snd-display ";ptree[2000] + .2 differs"))
	  (map-channel (lambda (y) (+ y .1)) 0 3200 ind-map)
	  (ptree-channel (lambda (y) (+ y .1)) 0 3200 ind-ptree)
	  (if (not (vequal (channel->vct 0 (frames ind-map) ind-map) (channel->vct 0 (frames ind-ptree) ind-ptree)))
	      (snd-display ";ptree[3200] + .2 differs"))
	  (if (and (> (optimization) 0)
		   (not (string=? (display-edits ind-ptree) (string-append "
EDITS: 6

 (begin) [0:2]:
   (at 0, cp->sounds[0][0:50827, 1.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 50828, end_mark)

 (ptree[0] 100 100) ; ptree 0 100 100 [1:4]:
   (at 0, cp->sounds[0][0:99, 1.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 100, cp->sounds[0][100:199, 1.000000, loc: 0, pos: 0, scl: 1.000000, code: (lambda (y) (+ y 0.1))]) [file: /home/bil/cl/oboe.snd[0]]
   (at 200, cp->sounds[0][200:50827, 1.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 50828, end_mark)

 (scale 0 50828) ; scale-channel 2.0000 0 50828 [2:4]:
   (at 0, cp->sounds[0][0:99, 2.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 100, cp->sounds[0][100:199, 2.000000, loc: 0, pos: 0, scl: 1.000000, code: (lambda (y) (+ y 0.1))]) [file: /home/bil/cl/oboe.snd[0]]
   (at 200, cp->sounds[0][200:50827, 2.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 50828, end_mark)

 (ptree[1] 1000 100) ; ptree 1 1000 100 [3:6]:
   (at 0, cp->sounds[0][0:99, 2.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 100, cp->sounds[0][100:199, 2.000000, loc: 0, pos: 0, scl: 1.000000, code: (lambda (y) (+ y 0.1))]) [file: /home/bil/cl/oboe.snd[0]]
   (at 200, cp->sounds[0][200:999, 2.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 1000, cp->sounds[0][1000:1099, 1.000000, loc: 1, pos: 0, scl: 2.000000, code: (lambda (y) (+ y 0.2))]) [file: /home/bil/cl/oboe.snd[0]]
   (at 1100, cp->sounds[0][1100:50827, 2.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 50828, end_mark)

 (ramp 2501 499) ; env-channel (make-env '(0.000 0.000 1.000 1.000 2.000 0.000 ) :base 1.0000 :end 999) 2000 1000 [4:9]:
   (at 0, cp->sounds[0][0:99, 2.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 100, cp->sounds[0][100:199, 2.000000, loc: 0, pos: 0, scl: 1.000000, code: (lambda (y) (+ y 0.1))]) [file: /home/bil/cl/oboe.snd[0]]
   (at 200, cp->sounds[0][200:999, 2.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 1000, cp->sounds[0][1000:1099, 1.000000, loc: 1, pos: 0, scl: 2.000000, code: (lambda (y) (+ y 0.2))]) [file: /home/bil/cl/oboe.snd[0]]
   (at 1100, cp->sounds[0][1100:1999, 2.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 2000, cp->sounds[0][2000:2500, 2.000000, -0.000000 -> 1.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 2501, cp->sounds[0][2501:2999, 2.000000, 0.997996 -> 0.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 3000, cp->sounds[0][3000:50827, 2.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 50828, end_mark)

 (ptree[2] 4000 100) ; ptree 2 4000 100 [5:11]:
   (at 0, cp->sounds[0][0:99, 2.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 100, cp->sounds[0][100:199, 2.000000, loc: 0, pos: 0, scl: 1.000000, code: (lambda (y) (+ y 0.1))]) [file: /home/bil/cl/oboe.snd[0]]
   (at 200, cp->sounds[0][200:999, 2.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 1000, cp->sounds[0][1000:1099, 1.000000, loc: 1, pos: 0, scl: 2.000000, code: (lambda (y) (+ y 0.2))]) [file: /home/bil/cl/oboe.snd[0]]
   (at 1100, cp->sounds[0][1100:1999, 2.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 2000, cp->sounds[0][2000:2500, 2.000000, -0.000000 -> 1.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 2501, cp->sounds[0][2501:2999, 2.000000, 0.997996 -> 0.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 3000, cp->sounds[0][3000:3999, 2.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 4000, cp->sounds[0][4000:4099, 1.000000, loc: 2, pos: 0, scl: 2.000000, code: (lambda (y) (+ y 0.3))]) [file: /home/bil/cl/oboe.snd[0]]
   (at 4100, cp->sounds[0][4100:50827, 2.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 50828, end_mark)

 (ptree[3] 0 3200) ; ptree 3 0 3200 [6:12]:
   (at 0, cp->sounds[0][0:99, 1.000000, loc: 3, pos: 0, scl: 2.000000, code: (lambda (y) (+ y 0.1))]) [file: /home/bil/cl/oboe.snd[0]]
   (at 100, cp->sounds[0][100:199, 1.000000, loc2: 3, pos2: 100, scl2: 2.000000, loc: 0, pos: 0, scl: 1.000000, code: (lambda (y) (+ y 0.1))]) [file: /home/bil/cl/oboe.snd[0]]
   (at 200, cp->sounds[0][200:999, 1.000000, loc: 3, pos: 200, scl: 2.000000, code: (lambda (y) (+ y 0.1))]) [file: /home/bil/cl/oboe.snd[0]]
   (at 1000, cp->sounds[0][1000:1099, 1.000000, loc2: 3, pos2: 1000, scl2: 1.000000, loc: 1, pos: 0, scl: 2.000000, code: (lambda (y) (+ y 0.2))]) [file: /home/bil/cl/oboe.snd[0]]
   (at 1100, cp->sounds[0][1100:1999, 1.000000, loc: 3, pos: 1100, scl: 2.000000, code: (lambda (y) (+ y 0.1))]) [file: /home/bil/cl/oboe.snd[0]]
   (at 2000, cp->sounds[0][2000:2500, 1.000000, -0.000000 -> 1.000000, loc: 3, pos: 2000, scl: 2.000000, code: (lambda (y) (+ y 0.1))]) [file: /home/bil/cl/oboe.snd[0]]
   (at 2501, cp->sounds[0][2501:2999, 1.000000, 0.997996 -> 0.000000, loc: 3, pos: 2501, scl: 2.000000, code: (lambda (y) (+ y 0.1))]) [file: /home/bil/cl/oboe.snd[0]]
   (at 3000, cp->sounds[0][3000:3199, 1.000000, loc: 3, pos: 3000, scl: 2.000000, code: (lambda (y) (+ y 0.1))]) [file: /home/bil/cl/oboe.snd[0]]
   (at 3200, cp->sounds[0][3200:3999, 2.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 4000, cp->sounds[0][4000:4099, 1.000000, loc: 2, pos: 0, scl: 2.000000, code: (lambda (y) (+ y 0.3))]) [file: /home/bil/cl/oboe.snd[0]]
   (at 4100, cp->sounds[0][4100:50827, 2.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 50828, end_mark)
"))))
	      (snd-display ";ptree[3200] display: ~A" (display-edits ind-ptree)))
	  (undo 1 ind-ptree)
	  (let ((reader (make-sample-reader (1- (frames)) ind-ptree 0 -1)))
	    (map-channel (lambda (y) (read-sample reader)) 0 (frames) ind-ptree))
	  (let ((reader (make-sample-reader (1- (frames)) ind-ptree 0 -1)))
	    (map-channel (lambda (y) (read-sample reader)) 0 (frames) ind-ptree))
	  (scan-channel (let ((old-reader (make-sample-reader 0 ind-ptree 0 1 (- (edit-position ind-ptree 0) 2)))
			      (pos 0))
			  (lambda (y)
			    (let ((val (read-sample old-reader)))
			      (if (fneq y val)
				  (begin
				    (snd-display ";trouble in reverse ptree read at ~D ~A ~A" pos val y)
				    #t)
				  (begin
				    (set! pos (1+ pos))
				    #f))))))
	  (close-sound ind-map)
	  (close-sound ind-ptree))

	(let ((ind (new-sound "fmv.snd" mus-next mus-bfloat)))
	  (set! (sinc-width) 10)
	  (pad-channel 0 1000 ind)
	  (set! (sample 100) 0.5)
	  (if (fneq (sample 100 ind 0 2) 0.5) (snd-display ";sample 100 (2): ~A" (sample 100 ind 0 2)))
	  (if (fneq (sample 100 ind 0 1) 0.0) (snd-display ";sample 100 (1): ~A" (sample 100 ind 0 1)))
	  (src-channel 0.5)
	  (let ((mx (maxamp ind 0)))
	    (if (fneq mx 0.5) (snd-display ";src-channel max .5: ~A" mx)))
	  (if (fneq (sample 200) 0.5) (snd-display ";src-channel 0.5 200: ~A" (sample 200)))
	  (if (not (vequal (channel->vct 180 40 ind 0)
			   (vct 0.000 -0.000 0.000 0.001 -0.000 -0.003 0.000 0.007 -0.000 -0.012
				0.000 0.020 -0.000 -0.033 0.000 0.054 -0.000 -0.100 -0.000 0.316
				0.500 0.316 -0.000 -0.100 -0.000 0.054 0.000 -0.033 -0.000 0.020
				0.000 -0.012 -0.000 0.007 0.000 -0.003 -0.000 0.001 0.000 -0.000)))
	      (snd-display ";scr-channel 0.5 -> ~A" (channel->vct 180 40 ind 0)))
	  (undo 1 ind 0)
	  (src-channel 0.25)
	  (let ((mx (maxamp ind 0)))
	    (if (fneq mx 0.5) (snd-display ";src-channel max .25: ~A" mx)))
	  (if (fneq (sample 400) 0.5) (snd-display ";src-channel 0.25 400: ~A" (sample 400)))
	  (if (not (vequal (channel->vct 360 80 ind 0)
			   (vct 0.000 -0.000 -0.000 -0.000 0.000 0.000 0.001 0.001 -0.000 -0.002
				-0.003 -0.003 0.000 0.004 0.007 0.006 -0.000 -0.008 -0.012 -0.010
				0.000 0.013 0.020 0.016 -0.000 -0.021 -0.033 -0.026 0.000 0.034
				0.054 0.044 -0.000 -0.060 -0.100 -0.087 -0.000 0.148 0.316 0.449
				0.500 0.449 0.316 0.148 -0.000 -0.087 -0.100 -0.060 -0.000 0.044
				0.054 0.034 0.000 -0.026 -0.033 -0.021 -0.000 0.016 0.020 0.013
				0.000 -0.010 -0.012 -0.008 -0.000 0.006 0.007 0.004 0.000 -0.003
				-0.003 -0.002 -0.000 0.001 0.001 0.000 0.000 -0.000 -0.000 -0.000)))
	      (snd-display ";scr-channel 0.25 -> ~A" (channel->vct 360 80 ind 0)))
	  (undo 2 ind 0)
	  (map-channel (let ((i 0)) (lambda (y) (let ((val (sin (* i (/ 3.14159 100))))) (set! i (1+ i)) (* .5 val)))))
	  (for-each
	   (lambda (sr df)
	     (src-channel sr)
	     (if (> (abs (- (maxamp ind 0) .5)) df) (snd-display ";src-channel sine ~A: ~A" sr (maxamp ind 0)))
	     (if (integer? sr)
		 (let ((r0 (make-sample-reader 0))
		       (r1 (make-sample-reader 0 ind 0 1 (1- (edit-position))))
		       (sri (inexact->exact sr)))
		   (do ((i 0 (1+ i)))
		       ((= i 500))
		     (let ((diff (abs (- (r0) (r1)))))
		       (if (> diff df) (snd-display ";src-channel ~A diff ~D: ~A" sr i diff))
		       (do ((j 1 (1+ j)))
			   ((= j sri))
			 (r1))))))
	     (do ((i 0 (1+ i)))
		 ((= i 50))
	       (let ((s1 (sample i ind 0 (edit-position)))
		     (s2 (sample (inexact->exact (* sr i)) ind 0 (1- (edit-position))))
		     (s3 (sample i ind 0 1)))
		 (if (> (abs (- s1 s2)) df) (snd-display ";sample ~D src(~A): ~A ~A" i sr s1 s2))
		 (if (fneq s3 0.0) (snd-display ";sample ~D (1): ~A" i s3))))
	     (undo 1 ind 0))
	   (list 2.0 1.5 3.0 3.14)
	   (list 0.008 0.01 0.015 0.025))
	  (close-sound ind)
	  (set! ind (open-sound "oboe.snd"))
	  (let ((orig-max (maxamp ind 0)))
	    (for-each
	     (lambda (sr df)
	       (src-channel sr)
	       (if (> (abs (- (maxamp ind 0) orig-max)) df) (snd-display ";src-channel oboe ~A: ~A ~A" sr orig-max (maxamp ind 0)))
	       (if (integer? sr)
		   (let ((r0 (make-sample-reader 0))
			 (r1 (make-sample-reader 0 ind 0 1 (1- (edit-position))))
			 (sri (inexact->exact sr)))
		     (do ((i 0 (1+ i)))
			 ((= i 5000))
		       (let ((diff (abs (- (r0) (r1)))))
			 (if (> diff df) (snd-display ";src-channel oboe ~A diff ~D: ~A" sr i diff))
			 (do ((j 1 (1+ j)))
			     ((= j sri))
			   (r1))))))
	       (undo 1 ind 0))
	     (list 2.0 1.5 3.0 3.14)
	     (list 0.008 0.01 0.015 0.025))
	    
	    (for-each
	     (lambda (sr df)
	       (src-channel sr)
	       (if (> (abs (- (maxamp ind 0) orig-max)) df) (snd-display ";src-channel oboe ~A: ~A ~A" sr orig-max (maxamp ind 0)))
	       (do ((i 0 (1+ i)))
		   ((= i 50))
		 (let* ((samp (* i 100))
			(s1 (sample samp ind 0 (edit-position)))
			(s2 (sample (inexact->exact (* sr samp)) ind 0 (1- (edit-position)))))
		   (if (> (abs (- s1 s2)) df) (snd-display ";sample ~D oboe src(~A): ~A ~A" i sr s1 s2))))
	       (undo 1 ind 0)
	       (amp-envs-equal? ind 0 (edit-position) (1+ (edit-position)) .01))
	     (list 0.5 0.25 0.9 0.1)
	     (list 0.001 0.001 0.001 0.001)))
	  (revert-sound ind)
	  (scale-by 2.0)
	  (scale-by 0.5)
	  (amp-envs-equal? ind 0 (edit-position) (- (edit-position) 2) .001)
	  (revert-sound ind)
	  (ptree-channel (lambda (y) y) #f #f ind 0 0 #t)
	  (amp-envs-equal? ind 0 (edit-position) (- (edit-position) 1) .001)
	  (close-sound ind))
	(let ((ind (open-sound "storm.snd")))
	  (ptree-channel (lambda (y) (* y .5)) 1000 123000 ind 0 0 #t) ; get the amp-env code too
	  (pad-channel 0 10000)
	  (ptree-channel (lambda (y) .1))
	  (let ((reader (make-sample-reader 1000 ind 0 -1)))
	    (call-with-current-continuation
	     (lambda (break)
	       (do ((i 0 (1+ i)))
		   ((= i 10))
		 (let ((val (reader)))
		   (if (fneq val .1)
		     (begin
		       (snd-display ";ptree previous: ~A ~A" i val)
		       (break))))))))
	  (close-sound ind))

	;; recursion tests
        (let ((old-opt (optimization))
	      (ind (open-sound "oboe.snd")))
	  (for-each
	   (lambda (n)
	     (set! (optimization) n)
	     (let ((val (scan-channel (lambda (y) 
					(let ((bigger (scan-channel (lambda (n5) 
								      (> n5 .1)))))
					  bigger)))))
	       (if (not (equal? val (list (list #t 4423) 0))) 
		   (snd-display ";scan-channel in scan-channel (~A): ~A" n val)))
	     (let ((hi (make-vct 3))
		   (ho (make-vct 3)))
	       (vct-map! hi (lambda () 
			      (if (scan-channel (lambda (y)
						  (> y .1))) 
				  1.0 0.0)))
	       (if (not (vequal hi (vct 1.0 1.0 1.0))) (snd-display ";vct-map! with scan-channel (~A): ~A" n hi))
	       (vct-fill! ho .1)
	       (vct-map! hi (lambda () 
			      (vct-map! ho (lambda () 
					     (+ (vct-ref ho 0) .1))) 
			      (vct-ref ho 0)))
	       (if (not (vequal hi (vct .2 .3 .4))) (snd-display ";vct-map! with vct-map! (~A): ~A ~A" n hi ho)))
	     (let ((val (find (lambda (y) (if (find (lambda (n6) (> n6 .1))) #t #f)))))
	       (if (not (equal? val (list #t 0))) (snd-display ";find with find: ~A" val)))
	     (let ((val (find (lambda (y) (if (scan-channel (lambda (n7) (> n7 .1))) #t #f)))))
	       (if (not (equal? val (list #t 0))) (snd-display ";find with scan-channel: ~A" val)))
	     (let ((mx (maxamp ind 0))
		   (val (scan-channel (lambda (y) (map-channel (lambda (n) (* n 2))) #t))))
	       (if (not (equal? val (list #t 0))) (snd-display ";scan-channel with map-channel: ~A" val))
	       (if (fneq mx (/ (maxamp ind 0) 2)) (snd-display ";scan+map max: ~A ~A" mx (maxamp ind 0)))
	       (if (not (= (edit-position ind 0) 1)) (snd-display ";scan+map edit-pos: ~A" (edit-position ind 0)))
	       (revert-sound ind)
	       (map-channel (let ((ctr 0)) 
			      (lambda (y) 
				(if (= ctr 0) (map-channel (lambda (n) 
							     (* n 2)))) 
				(set! ctr 1) 
				y)))
	       (if (fneq mx (maxamp ind 0)) (snd-display ";map+map max 2: ~A ~A" mx (maxamp ind 0)))
	       (if (not (= (edit-position ind 0) 2)) (snd-display ";map+map edit-pos: ~A" (edit-position ind 0)))
	       (if (fneq mx (/ (maxamp ind 0 1) 2)) (snd-display ";map+map max 1: ~A ~A" mx (maxamp ind 0 1)))
	       (revert-sound ind))
	       
	     
	     )
	   (list 0 5))
	  (close-sound ind)
	  (set! (optimization) old-opt))

	(let ((ind (open-sound "oboe.snd")))
	  (for-each
	   (lambda (func beg dur len)
	     (let ((old-len (frames ind)))
	       (func beg dur)
	       (if (not (= (frames ind) len)) 
		   (snd-display ";(~A ~A ~A) with ~A -> ~A (~A)?" func beg dur old-len (frames ind) len))))
	   (list (lambda (beg dur) (env-channel '(0 0 1 1) beg dur))
		 (lambda (beg dur) (map-channel (lambda (y) (* y .5)) beg dur))
		 (lambda (beg dur) (reverse-channel beg dur))
		 (lambda (beg dur) (scale-channel 2.0 beg dur))
		 (lambda (beg dur) (vct->channel (make-vct dur) beg dur))
		 (lambda (beg dur) (smooth-channel beg dur))
		 (lambda (beg dur) (pad-channel beg dur))
		 (lambda (beg dur) (src-channel 0.5 beg dur))
		 (lambda (beg dur) (insert-silence beg dur)))
	   (list 0 0 0 0 0 0 0 0 0)
	   (list 1000 1000 1000 1000 1000 1000 1000 1000 1000)
	   (list 50828 50828 50828 50828 50828 50828 51828 52829 53829))
	  
	  (revert-sound ind)
	  
	  (for-each
	   (lambda (beg dur len)
	     (let ((old-len (frames ind)))
	       (pad-channel beg dur)
	       (if (not (= (frames ind) len))
		   (snd-display ";(pad-channel ~A ~A) with ~A -> ~A (~A)?" beg dur old-len (frames ind) len))))
	   (list 1000 60000 0 62000 62000 62004)
	   (list 1000 1000 1000 1 2 1)
	   (list 51828 61000 62000 62001 62003 62005))
	  
	  (revert-sound ind)
	  
	  (for-each
	   (lambda (func dur len)
	     (let ((old-len (frames ind)))
	       (func (+ old-len 100) dur)
	       (if (not (= (frames ind) len)) 
		   (snd-display ";(~A ~A) with ~A -> ~A (~A)?" func dur old-len (frames ind) len))))
	   (list (lambda (beg dur) (env-channel '(0 0 1 1) beg dur))
		 (lambda (beg dur) (reverse-channel beg dur))
		 (lambda (beg dur) (scale-channel 2.0 beg dur))
		 (lambda (beg dur) (scale-sound-by 2.0 beg dur))
		 (lambda (beg dur) (vct->channel (make-vct dur) beg dur))
		 (lambda (beg dur) (smooth-channel beg dur))
		 (lambda (beg dur) (pad-channel beg dur))
		 (lambda (beg dur) (src-channel 0.5 beg dur))
		 (lambda (beg dur) (insert-silence beg dur)) ; diff from pad-channel
		 (lambda (beg dur) (env-sound '(0 0 1 1) beg dur))
		 )
	   (list 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)
	   (list 50828 50828 50828 50828 51928 51928 53028 53028 54028 54028))

	  (revert-sound ind)

	  (do ((i 0 (1+ i)))
	      ((= i 100))
	    (case (inexact->exact (random 10))
	      ((0) (pad-channel (random (* 1.25 (frames))) (random 1000)))
	      ((1) (env-channel '(0 0 1 1 2 0) (random (* 1.25 (frames))) (random 1000)))
	      ((2) (env-sound '(0 0 1 1 2 0) (random (* 1.25 (frames))) (random 1000)))
	      ((3) (scale-channel (random 1.0) (random (* 1.25 (frames))) (random 1000)))
	      ((4) (scale-sound-by (random 1.0) (random (* 1.25 (frames))) (random 1000)))
	      ((5) (src-channel (+ .9 (random .2)) (random (* 1.25 (frames))) (random 1000)))
	      ((6) (ramp-channel (random 1.0) (random 1.0) (random (* 1.25 (frames))) (random 1000)))
	      ((7) (reverse-channel (random (* 1.25 (frames))) (random 1000)))
	      ((8) (let ((dur (inexact->exact (random 100)))) (vct->channel (make-vct dur) (random (* 1.25 (frames))) dur)))
	      ((9) (map-channel (lambda (y) (* y 2)) (random (* .5 (frames))) (random 1000)))))

	  (close-sound ind))

	(let ((ind (new-sound "test.snd")))
	  (pad-channel 0 100000) ; force tempfile in fallback
	  (ptree-channel (lambda (y) (if (current-input-port) 1.0 0.0)))
	  (if (fneq (maxamp ind) 1.0)
	      (snd-display ";ptree fallback: ~A" (maxamp ind)))
	  (undo)
	  (ptree-channel (lambda (y data dir)
			   (declare (y real) (data vct) (dir boolean))
			   (if (current-input-port) (* y 0.5) (* y (vct-ref data 0))))
			 0 #f ind 0 #f #f
			 (lambda (pos dur)
			   (vct 1.0)))
	  (close-sound ind))

	(let ((ind0 (open-sound "oboe.snd"))
	      (ind1 (open-sound "2.snd"))
	      (ind2 (open-sound "4.aiff")))
  	  (set! (squelch-update ind0 #t) #t)
	  (set! (squelch-update ind1 #t) #t)
	  (set! (squelch-update ind2 #t) #t)
	  (catch 'mus-error
		 (lambda ()
		   (do ((i 0 (1+ i)))
		       ((= i 500))
		     (set! (sync ind0) (random 3))
		     (set! (sync ind1) (random 3))
		     (set! (sync ind2) (random 3))
		     (opt-test (random 22))))
		 (lambda args
		   (snd-display ";caught mus-error")
		   #f))
  	  (set! (squelch-update ind0 #t) #f)
	  (set! (squelch-update ind1 #t) #f)
	  (set! (squelch-update ind2 #t) #f)
	  (close-sound ind0)
	  (close-sound ind1)
	  (close-sound ind2))

	(let ((ind (open-sound "oboe.snd")))
	  (env-channel '(0 0 1 1 2 0) 1000 10000)
	  (ptree-channel (lambda (y) (* y 2)) 20000 10000)
	  (ramp-channel .2 .6 40000 10000)
	  (scale-channel .5 0 500)
	  (if (> (optimization) 0)
	      (check-edit-tree '((0 0 0 499 0.5 0.0 0.0 0) 
				 (500 0 500 999 1.0 0.0 0.0 0) 
				 (1000 0 1000 6000 1.0 1.71387285873709e-12 1.0 1) 
				 (6001 0 6001 10999 1.0 0.999799966812134 6.29921462214078e-17 1) 
				 (11000 0 11000 19999 1.0 0.0 0.0 0) 
				 (20000 0 20000 29999 1.0 1.19209289550781e-7 0.0 2) 
				 (30000 0 30000 39999 1.0 0.0 0.0 0) 
				 (40000 0 40000 49999 1.0 0.200000002980232 0.600000023841858 1) 
				 (50000 0 50000 50827 1.0 0.0 0.0 0)
				 (50828 -2 0 0 0.0 0.0 0.0 0))
			       #f "no-overlaps"))
	  (revert-sound ind)
	  (pad-channel 0 1000)
	  (ptree-channel (lambda (y) (+ y .1)) 0 2000)
	  (let ((val (sample 100)))
	    (if (fneq val .1)
		(snd-display ";pad+ptree: ~A" val)))
	  (undo 2)
	  (pad-channel 0 2000)
	  (ptree-channel (lambda (y) (+ y .1)) 1000 200)
	  (let ((val (sample 1100)))
	    (if (fneq val .1)
		(snd-display ";pad+ptree(2): ~A" val)))
	  (undo 2)
	  (pad-channel 1000 1000)
	  (ptree-channel (lambda (y) (+ y .1)) 0 1500)
	  (let ((val (sample 1100)))
	    (if (fneq val .1)
		(snd-display ";pad+ptree(3): ~A" val)))
	  (undo 2)
	  (close-sound ind))

	(let* ((ind (open-sound (string-append home-dir "/test/sound/away.snd")))
	       (start (get-internal-real-time))
	       (mxs (maxamp ind #t)))
	  (swap-channels)
	  (update-time-graph)
	  (let ((tm (/ (- (get-internal-real-time) start) 100)))
	    (if (> tm .1) (snd-display ";swap-channels not optimized? ~A" tm)))
	  (let ((new-mxs (maxamp ind #t)))
	    (if (or (fneq (car mxs) (cadr new-mxs))
		    (fneq (cadr mxs) (car new-mxs)))
		(snd-display ";swap-channels amps: ~A -> ~A" mxs new-mxs)))
	  (revert-sound ind)
	  (close-sound ind))

	(let ((ind (init-sound 0.5 10 2)))
	  (save-sound ind)
	  (scale-channel 2.0 0 (frames) ind 1)
	  (swap-channels)
	  (check-both-chans ind "1" (lambda (y) (fneq y 1.0)) (lambda (y) (fneq y 0.5)))
	  (undo 1 ind 0)
	  (undo 2 ind 1)
	  (scale-channel 0.5 0 (frames) ind 0)
	  (scale-channel 2.0 0 (frames) ind 1)
	  (swap-channels)
	  (check-both-chans ind "2" (lambda (y) (fneq y 1.0)) (lambda (y) (fneq y 0.25)))
	  (undo 2 ind 0)
	  (undo 2 ind 1)
	  (delete-samples 2 3 ind 0)
	  (env-channel '(0 0 1 1 2 0) 0 (frames ind 1) ind 1)
	  (swap-channels)
	  (if (not (= (frames ind 1) 11)) (snd-display ";frames swapped: ~A" (frames ind 1)))
	  (if (not (vequal (channel->vct 0 (frames ind 0) ind 0) (vct 0.000 0.100 0.200 0.300 0.400 0.500 0.400 0.300 0.200 0.100 0.000)))
	      (snd-display ";swapped env: ~A" (channel->vct 0 (frames ind 0) ind 0)))
	  (undo 2 ind 0)
	  (undo 2 ind 1)
	  (delete-samples 2 7 ind 0)
	  (swap-channels ind 0 ind 1 5 4)
	  (if (not (vequal (channel->vct 0 10 ind 0) (vct 0.500 0.500 0.500 0.500 0.000 0.500 0.500 0.500 0.500 0.000)))
	      (snd-display ";partial swap 1: ~A" (channel->vct 0 10 ind 0)))
	  (if (not (vequal (channel->vct 0 10 ind 1) (vct 0.500 0.500 0.500 0.500 0.500 0.000 0.000 0.000 0.000 0.500)))
	      (snd-display ";partial swap 2: ~A" (channel->vct 0 10 ind 1)))
	  (revert-sound ind)
	  (let ((m0 (add-mark 3 ind 0))
		(m1 (add-mark 4 ind 1))
		(m2 (add-mark 5 ind 1)))
	    (scale-channel 0.5)
	    (swap-channels)
	    (if (not (= (mark-sample m0) 3)) (snd-display ";swapped m0: ~A" (mark-sample m0)))
	    (if (not (= (mark-sample m1) 4)) (snd-display ";swapped m1: ~A" (mark-sample m1)))
	    (if (not (= (mark-sample m2) 5)) (snd-display ";swapped m2: ~A" (mark-sample m2)))
	    (if (not (equal? (mark-home m0) (list ind 1))) (snd-display ";mark-home m0: ~A" (mark-home m0)))
	    (if (not (equal? (mark-home m1) (list ind 0))) (snd-display ";mark-home m1: ~A" (mark-home m1)))
	    (if (not (equal? (mark-home m2) (list ind 0))) (snd-display ";mark-home m2: ~A" (mark-home m2)))
	    (undo 1 ind 0)
	    (undo 1 ind 1)
	    (if (not (= (mark-sample m0) 3)) (snd-display ";swapped m0 2: ~A" (mark-sample m0)))
	    (if (not (= (mark-sample m1) 4)) (snd-display ";swapped m1 2: ~A" (mark-sample m1)))
	    (if (not (= (mark-sample m2) 5)) (snd-display ";swapped m2 2: ~A" (mark-sample m2)))
	    (if (not (equal? (mark-home m0) (list ind 0))) (snd-display ";mark-home m0 2: ~A" (mark-home m0)))
	    (if (not (equal? (mark-home m1) (list ind 1))) (snd-display ";mark-home m1 2: ~A" (mark-home m1)))
	    (if (not (equal? (mark-home m2) (list ind 1))) (snd-display ";mark-home m2 2: ~A" (mark-home m2))))
	  (close-sound ind)
	  (delete-file "test.snd"))

	(let ((ind (init-sound 0.5 10 4)))
	  (scale-channel 0.5 0 (frames) ind 1)
	  (scale-channel 0.25 0 (frames) ind 2)
	  (scale-channel 0.125 0 (frames) ind 3)
	  (swap-channels ind 1 ind 2)
	  (let ((maxs (maxamp ind #t)))
	    (if (or (fneq (list-ref maxs 0) 0.5) (fneq (list-ref maxs 1) 0.125) (fneq (list-ref maxs 2) 0.25) (fneq (list-ref maxs 3) 0.0625))
		(snd-display ";swap midchans: ~A" maxs))
	    (close-sound ind)))

	(let* ((ind0 (open-sound "oboe.snd"))
	       (ind1 (open-sound "pistol.snd"))
	       (mx0 (maxamp ind0 0))
	       (mx1 (maxamp ind1 0)))
	  (swap-channels ind0 0 ind1 0)
	  (if (fneq (maxamp ind0 0) mx1) (snd-display ";maxamp cross swap 0: ~A" (maxamp ind0 0)))
	  (if (fneq (maxamp ind1 0) mx0) (snd-display ";maxamp cross swap 1: ~A" (maxamp ind1 0)))
	  (close-sound ind1)
	  (if (and (> (optimization) 0)
		   (not (string=? (display-edits) (string-append "
EDITS: 1

 (begin) [0:2]:
   (at 0, cp->sounds[0][0:50827, 1.000000]) [file: " home-dir "/cl/oboe.snd[0]]
   (at 50828, end_mark)

 (set 0 41623) ; swap-channels [1:2]:
   (at 0, cp->sounds[1][0:41622, 1.000000]) [file: " home-dir "/cl/pistol.snd[0]]
   (at 41623, end_mark)
"))))
	      (snd-display ";cross swap state: ~A" (display-edits)))
	  (close-sound ind0))

	(let ((ind (init-sound 1.0 10 1)))
	  
	  ;; -------- ramp+ramp
	  (ramp-channel 0.0 1.0)
	  (check-back-and-forth ind "ramp 1" (vct 0.000 0.100 0.200 0.300 0.400 0.500 0.600 0.700 0.800 0.900 1.000))
	  (ramp-channel 0.0 1.0)
	  (check-back-and-forth ind "ramp 2" (vct 0.000 0.010 0.040 0.090 0.160 0.250 0.360 0.490 0.640 0.810 1.000))
	  (undo)
	  (ramp-channel 1.0 0.0)
	  (check-back-and-forth ind "ramp 3" (vct 0.000 0.090 0.160 0.210 0.240 0.250 0.240 0.210 0.160 0.090 0.000))
	  (undo)
	  (env-channel '(0 0 1 1 2 0))
	  (check-back-and-forth ind "ramp 4" (vct 0.000 0.020 0.080 0.180 0.320 0.500 0.480 0.420 0.320 0.180 0.000))
	  (undo 2)
	  (env-channel '(0 0 1 1 2 0))
	  (check-back-and-forth ind "ramp 5" (vct 0.000 0.200 0.400 0.600 0.800 1.000 0.800 0.600 0.400 0.200 0.000))
	  (ramp-channel 0.0 1.0)
	  (check-back-and-forth ind "ramp 6" (vct 0.000 0.020 0.080 0.180 0.320 0.500 0.480 0.420 0.320 0.180 0.000))
	  (scale-channel 0.5)
	  (check-back-and-forth ind "ramp 7" (vct 0.000 0.010 0.040 0.090 0.160 0.250 0.240 0.210 0.160 0.090 0.000))
	  (undo 3)
	  (scale-channel 0.5)
	  (env-channel '(0 0 1 1 2 0))
	  (check-back-and-forth ind "ramp 8" (vct 0.000 0.100 0.200 0.300 0.400 0.500 0.400 0.300 0.200 0.100 0.000))
	  (ramp-channel 0.0 1.0)
	  (check-back-and-forth ind "ramp 9" (vct 0.000 0.010 0.040 0.090 0.160 0.250 0.240 0.210 0.160 0.090 0.000))
	  (undo 3)
	  (ramp-channel 0.0 1.0)
	  (ramp-channel 0.0 1.0)
	  (ramp-channel 0.0 1.0)
	  (check-back-and-forth ind "ramp 10" (vct 0.000 0.001 0.008 0.027 0.064 0.125 0.216 0.343 0.512 0.729 1.000))
	  (undo 3)
	  
	  
	  ;; -------- ramp+ptree
	  (ramp-channel 0.0 1.0)
	  (ptree-channel (lambda (y) (* y 2.0)))
	  (check-back-and-forth ind "ramp+ptree 1" (vct 0.000 0.200 0.400 0.600 0.800 1.000 1.200 1.400 1.600 1.800 2.000))
	  (scale-channel .5)
	  (check-back-and-forth ind "ramp+ptree 2" (vct 0.000 0.100 0.200 0.300 0.400 0.500 0.600 0.700 0.800 0.900 1.000))
	  (ptree-channel (lambda (y) (+ y .5)))
	  (check-back-and-forth ind "ramp+ptree 3" (vct 0.500 0.600 0.700 0.800 0.900 1.000 1.100 1.200 1.300 1.400 1.500))
	  (undo 4)
	  (env-channel '(0 0 1 1 2 0))
	  (ptree-channel (lambda (y) (* y 2.0)))
	  (check-back-and-forth ind "ramp+ptree 4" (vct 0.000 0.400 0.800 1.200 1.600 2.000 1.600 1.200 0.800 0.400 0.000))
	  (undo 2)
	  (scale-channel .5)
	  (env-channel '(0 0 1 1 2 0))
	  (ptree-channel (lambda (y) (* y 2.0)))
	  (check-back-and-forth ind "ramp+ptree 5" (vct 0.000 0.200 0.400 0.600 0.800 1.000 0.800 0.600 0.400 0.200 0.000))
	  (scale-by .5)
	  (check-back-and-forth ind "ramp+ptree 6" (vct 0.000 0.100 0.200 0.300 0.400 0.500 0.400 0.300 0.200 0.100 0.000))
	  (undo 4)
	  (ramp-channel 0.0 1.0)
	  (scale-channel 0.5)
	  (ptree-channel (lambda (y) (* y 2.0)))
	  (check-back-and-forth ind "ramp+ptree 7" (vct 0.000 0.100 0.200 0.300 0.400 0.500 0.600 0.700 0.800 0.900 1.000))
	  (scale-channel 0.5)
	  (check-back-and-forth ind "ramp+ptree 8" (vct 0.000 0.050 0.100 0.150 0.200 0.250 0.300 0.350 0.400 0.450 0.500))
	  (undo 4)
	  (ramp-channel 0.0 1.0 0 5)
	  (ptree-channel (lambda (y) (* y 2.0)) 3 3)
	  (check-back-and-forth ind "ramp+ptree 9" (vct 0.000 0.250 0.500 1.500 2.000 2.000 1.000 1.000 1.000 1.000 1.000))
	  (undo 2)
	  (ramp-channel 0.0 1.0 0 5)
	  (ptree-channel (lambda (y) (* y 2.0)) 0 3)
	  (check-back-and-forth ind "ramp+ptree 10" (vct 0.000 0.500 1.000 0.750 1.000 1.000 1.000 1.000 1.000 1.000 1.000))
	  (undo 2)
	  (ramp-channel 1.0 0.0 5 5)
	  (ptree-channel (lambda (y) (* y 2.0)) 3 4)
	  (check-back-and-forth ind "ramp+ptree 11" (vct 1.000 1.000 1.000 2.000 2.000 2.000 1.500 0.500 0.250 0.000 1.000))
	  (undo 2)

	  ;; ramp+scl (checking split loc)
	  (ramp-channel 0.0 1.0 0 5)
	  (scale-channel 0.5 3 3)
	  (check-back-and-forth ind "ramp+scl 12" (vct 0.000 0.250 0.500 0.375 0.500 0.500 1.000 1.000 1.000 1.000 1.000))
	  (undo 2)
	  (ramp-channel 1.0 0.0 5 5)
	  (scale-channel 0.5 4 3)
	  (check-back-and-forth ind "ramp+scl 13" (vct 1.000 1.000 1.000 1.000 0.500 0.500 0.375 0.500 0.250 0.000 1.000))
	  (undo 2)

	  ;; ramp+scl (checking split loc)

	  (for-each
	   (lambda (func)
	     (ramp-channel 0.0 1.0 0 5)
	     (check-back-and-forth ind "ramp+scl setup" (vct 0.000 0.250 0.500 0.750 1.000 1.000 1.000 1.000 1.000 1.000 1.000))
	     (do ((start 0 (1+ start)))
		 ((= start 10))
	       (do ((len 1 (1+ len)))
		   ((= (+ start len) 11))
		 (let ((v (vct 0.000 0.250 0.500 0.750 1.000 1.000 1.000 1.000 1.000 1.000 1.000)))
		   (do ((i 0 (1+ i)))
		       ((= i len))
		     (vct-set! v (+ start i) (* (vct-ref v (+ start i)) 0.5)))
		   (func 0.5 start len)
		   (check-back-and-forth ind (format #f "ramp+scl 0-1 [~A ~A] with ~A" start len func) v)
		   (undo 1)
		   )))
	     (undo 1)
	     
	     (ramp-channel 1.0 0.0 5 5)
	     (check-back-and-forth ind "ramp+scl 2 setup" (vct 1.000 1.000 1.000 1.000 1.000 1.000 0.750 0.500 0.250 0.000 1.000))
	     (do ((start 0 (1+ start)))
		 ((= start 10))
	       (do ((len 1 (1+ len)))
		   ((= (+ start len) 11))
		 (let ((v (vct 1.000 1.000 1.000 1.000 1.000 1.000 0.750 0.500 0.250 0.000 1.000)))
		   (do ((i 0 (1+ i)))
		       ((= i len))
		     (vct-set! v (+ start i) (* (vct-ref v (+ start i)) 0.5)))
		   (func 0.5 start len)
		   (check-back-and-forth ind (format #f "ramp+scl 1-0 [~A ~A] with ~A" start len func) v)
		   (undo 1)
		   )))
	     (undo 1)
	     
	     (ramp-channel 0.0 1.0 0 5)
	     (ramp-channel 1.0 0.0 5 5)
	     (check-back-and-forth ind "ramp+scl 3 setup" (vct 0.000 0.250 0.500 0.750 1.000 1.000 0.750 0.500 0.250 0.000 1.000))
	     (do ((start 0 (1+ start)))
		 ((= start 10))
	       (do ((len 1 (1+ len)))
		   ((= (+ start len) 11))
		 (let ((v (vct 0.000 0.250 0.500 0.750 1.000 1.000 0.750 0.500 0.250 0.000 1.000)))
		   (do ((i 0 (1+ i)))
		       ((= i len))
		     (vct-set! v (+ start i) (* (vct-ref v (+ start i)) 0.5)))
		   (func 0.5 start len)
		   (check-back-and-forth ind (format #f "ramp+scl 0-1-1-0 [~A ~A] with ~A" start len func) v)
		   (undo 1)
		   )))
	     (undo 2)
	     
	     (ramp-channel 1.0 0.0 3 5)
	     (check-back-and-forth ind "ramp+scl 4 setup" (vct 1.000 1.000 1.000 1.000 0.750 0.500 0.250 0.000 1.000 1.000 1.000))
	     (do ((start 0 (1+ start)))
		 ((= start 10))
	       (do ((len 1 (1+ len)))
		   ((= (+ start len) 11))
		 (let ((v (vct 1.000 1.000 1.000 1.000 0.750 0.500 0.250 0.000 1.000 1.000 1.000)))
		   (do ((i 0 (1+ i)))
		       ((= i len))
		     (vct-set! v (+ start i) (* (vct-ref v (+ start i)) 0.5)))
		   (func 0.5 start len)
		   (check-back-and-forth ind (format #f "ramp+scl mid 1-0 [~A ~A] with ~A" start len func) v)
		   (undo 1)
		   )))
	     (undo 1)
	   
	     (env-channel '(0 1 1 0 2 0 3 1))
	     (check-back-and-forth ind "ramp+scl setup" (vct 1.000 0.667 0.333 0.000 0.000 0.000 0.000 0.000 0.333 0.667 1.000))
	     (do ((start 0 (1+ start)))
		 ((= start 10))
	       (do ((len 1 (1+ len)))
		   ((= (+ start len) 11))
		 (let ((v (vct 1.000 0.667 0.333 0.000 0.000 0.000 0.000 0.000 0.333 0.667 1.000)))
		   (do ((i 0 (1+ i)))
		       ((= i len))
		     (vct-set! v (+ start i) (* (vct-ref v (+ start i)) 0.5)))
		   (func 0.5 start len)
		   (check-back-and-forth ind (format #f "ramp+scl 0-1-0-1 [~A ~A] with ~A" start len func) v)
		   (undo 1)
		   )))
	     (undo 1))

	   (list
	    (lambda (scl beg dur)
	      (scale-channel scl beg dur))
	    (lambda (scl beg dur)
	      (ptree-channel (lambda (y) (* y scl)) beg dur))
	    (lambda (scl beg dur)
	      (map-channel (lambda (y) (* y scl)) beg dur))
	    (lambda (scl beg dur)
	      (ptree-channel (lambda (y data dir)
			       (declare (y real) (data vct) (dir boolean))
			       (* y (vct-ref data 0))) 
			     beg dur ind 0 #f #f (lambda (pos dur) (vct scl))))))
	  
	  ;; -------- ramp+ptree-closure
	  (ramp-channel 0.0 1.0)
	  (ptree-channel (lambda (y data dir) 
			   (declare (y real) (data vct) (dir boolean))
			   (* y (vct-ref data 0))) 
			 0 (frames) ind 0 #f #f (lambda (pos dur) (vct 2.0)))
	  (check-back-and-forth ind "ramp+ptreec 1" (vct 0.000 0.200 0.400 0.600 0.800 1.000 1.200 1.400 1.600 1.800 2.000))
	  (scale-channel .5)
	  (check-back-and-forth ind "ramp+ptreec 2" (vct 0.000 0.100 0.200 0.300 0.400 0.500 0.600 0.700 0.800 0.900 1.000))
	  (ptree-channel (lambda (y data dir) 
			   (declare (y real) (data vct) (dir boolean))
			   (+ y (vct-ref data 0))) 
			 0 (frames) ind 0 #f #f (lambda (pos dur) (vct 0.5)))
	  (check-back-and-forth ind "ramp+ptreec 3" (vct 0.500 0.600 0.700 0.800 0.900 1.000 1.100 1.200 1.300 1.400 1.500))
	  (undo 4)
	  (env-channel '(0 0 1 1 2 0))
	  (ptree-channel (lambda (y data dir) 
			   (declare (y real) (data vct) (dir boolean))
			   (* y (vct-ref data 0))) 
			 0 (frames) ind 0 #f #f (lambda (pos dur) (vct 2.0)))
	  (check-back-and-forth ind "ramp+ptreec 4" (vct 0.000 0.400 0.800 1.200 1.600 2.000 1.600 1.200 0.800 0.400 0.000))
	  (undo 2)
	  (scale-channel .5)
	  (env-channel '(0 0 1 1 2 0))
	  (ptree-channel (lambda (y data dir) 
			   (declare (y real) (data vct) (dir boolean))
			   (* y (vct-ref data 0))) 
			 0 (frames) ind 0 #f #f (lambda (pos dur) (vct 2.0)))
	  (check-back-and-forth ind "ramp+ptreec 5" (vct 0.000 0.200 0.400 0.600 0.800 1.000 0.800 0.600 0.400 0.200 0.000))
	  (scale-by .5)
	  (check-back-and-forth ind "ramp+ptreec 6" (vct 0.000 0.100 0.200 0.300 0.400 0.500 0.400 0.300 0.200 0.100 0.000))
	  (undo 4)
	  (ramp-channel 0.0 1.0)
	  (scale-channel 0.5)
	  (ptree-channel (lambda (y data dir) 
			   (declare (y real) (data vct) (dir boolean))
			   (* y (vct-ref data 0))) 
			 0 (frames) ind 0 #f #f (lambda (pos dur) (vct 2.0)))
	  (check-back-and-forth ind "ramp+ptreec 7" (vct 0.000 0.100 0.200 0.300 0.400 0.500 0.600 0.700 0.800 0.900 1.000))
	  (scale-channel 0.5)
	  (check-back-and-forth ind "ramp+ptreec 8" (vct 0.000 0.050 0.100 0.150 0.200 0.250 0.300 0.350 0.400 0.450 0.500))
	  (undo 4)
	  
	  
	  ;; -------- xramp+ptree+closure
	  (xramp-channel 0.0 1.0 .0325)
	  (check-back-and-forth ind "xramp(+ptree+closure) 0" (vct 0.000 0.300 0.513 0.664 0.771 0.847 0.901 0.940 0.967 0.986 1.000))
	  (ptree-channel (lambda (y data dir) 
			   (declare (y real) (data vct) (dir boolean))
			   (* y (vct-ref data 0))) 
			 0 (frames) ind 0 #f #f (lambda (pos dur) (vct 2.0)))
	  (check-back-and-forth ind "xramp+ptree-closure 1" (vct-scale! (vct 0.000 0.300 0.513 0.664 0.771 0.847 0.901 0.940 0.967 0.986 1.000) 2.0))
	  (scale-channel .5)
	  (check-back-and-forth ind "xramp+ptree-closure 2" (vct 0.000 0.300 0.513 0.664 0.771 0.847 0.901 0.940 0.967 0.986 1.000))
	  (ptree-channel (lambda (y data dir) 
			   (declare (y real) (data vct) (dir boolean))
			   (+ y (vct-ref data 0))) 
			 0 (frames) ind 0 #f #f (lambda (pos dur) (vct 0.5)))
	  (check-back-and-forth ind "xramp+ptree-closure 3" (vct-offset! (vct 0.000 0.300 0.513 0.664 0.771 0.847 0.901 0.940 0.967 0.986 1.000) 0.5))
	  (undo 4)
	  (env-sound '(0 0 1 1 2 0) 0 11 .0325)
	  (check-back-and-forth ind "xramp(+ptree-closure) 4" (vct 0.000 0.513 0.771 0.901 0.967 1.000 0.967 0.901 0.771 0.513 0.000))
	  (ptree-channel (lambda (y data dir) 
			   (declare (y real) (data vct) (dir boolean))
			   (* y (vct-ref data 0))) 
			 0 (frames) ind 0 #f #f (lambda (pos dur) (vct 2.0)))
	  (check-back-and-forth ind "xramp+ptree-closure 4" (vct-scale! (vct 0.000 0.513 0.771 0.901 0.967 1.000 0.967 0.901 0.771 0.513 0.000) 2.0))
	  (undo 2)
	  (scale-channel .5)
	  (env-sound '(0 0 1 1 2 0) 0 11 .0325)
	  (ptree-channel (lambda (y data dir) 
			   (declare (y real) (data vct) (dir boolean))
			   (* y (vct-ref data 0))) 
			 0 (frames) ind 0 #f #f (lambda (pos dur) (vct 2.0)))
	  (check-back-and-forth ind "xramp+ptree-closure 5" (vct 0.000 0.513 0.771 0.901 0.967 1.000 0.967 0.901 0.771 0.513 0.000))
	  (scale-by .5)
	  (check-back-and-forth ind "ramp+ptree-closure 6" (vct-scale! (vct 0.000 0.513 0.771 0.901 0.967 1.000 0.967 0.901 0.771 0.513 0.000) 0.5))
	  (undo 4)
	  (xramp-channel 0.0 1.0 .0325)
	  (scale-channel 0.5)
	  (ptree-channel (lambda (y data dir) 
			   (declare (y real) (data vct) (dir boolean))
			   (* y (vct-ref data 0))) 
			 0 (frames) ind 0 #f #f (lambda (pos dur) (vct 2.0)))
	  (check-back-and-forth ind "xramp+ptree-closure 7" (vct 0.000 0.300 0.513 0.664 0.771 0.847 0.901 0.940 0.967 0.986 1.000))
	  (scale-channel 0.5)
	  (check-back-and-forth ind "ramp+ptree-closure 8" (vct-scale! (vct 0.000 0.300 0.513 0.664 0.771 0.847 0.901 0.940 0.967 0.986 1.000) 0.5))
	  (undo 4)
	  (xramp-channel 0.0 1.0 .0325 0 5)
	  (check-back-and-forth ind "xramp(+ptree-closure) 9" (vct 0.000 0.595 0.847 0.954 1.000 1.000 1.000 1.000 1.000 1.000 1.000))
	  (ptree-channel (lambda (y data dir) 
			   (declare (y real) (data vct) (dir boolean))
			   (* y (vct-ref data 0))) 
			 3 3 ind 0 #f #f (lambda (pos dur) (vct 2.0)))
	  (check-back-and-forth ind "xramp+ptree-closure 9" (vct 0.000 0.595 0.847 1.909 2.000 2.000 1.000 1.000 1.000 1.000 1.000))
	  (undo 2)
	  (xramp-channel 0.0 1.0 .0325 0 5)
	  (check-back-and-forth ind "xramp(+ptree-closure) 10" (vct 0.000 0.595 0.847 0.954 1.000 1.000 1.000 1.000 1.000 1.000 1.000))
	  (ptree-channel (lambda (y data dir) 
			   (declare (y real) (data vct) (dir boolean))
			   (* y (vct-ref data 0))) 
			 0 3 ind 0 #f #f (lambda (pos dur) (vct 2.0)))
	  (check-back-and-forth ind "xramp+ptree-closure 10" (vct 0.000 1.189 1.695 0.954 1.000 1.000 1.000 1.000 1.000 1.000 1.000))
	  (undo 2)
	  (xramp-channel 1.0 0.0 .0325 5 5)
	  (check-back-and-forth ind "xramp(+ptree-closure) 11" (vct 1.000 1.000 1.000 1.000 1.000 1.000 0.954 0.847 0.595 0.000 1.000))
	  (ptree-channel (lambda (y data dir) 
			   (declare (y real) (data vct) (dir boolean))
			   (* y (vct-ref data 0))) 
			 3 4 ind 0 #f #f (lambda (pos dur) (vct 2.0)))
	  (check-back-and-forth ind "xramp+ptree-closure 11" (vct 1.000 1.000 1.000 2.000 2.000 2.000 1.909 0.847 0.595 0.000 1.000))
	  (undo 2)

	  ;; -------- ptree+ramp
	  (ptree-channel (lambda (y) (* y 2.0)))
	  (ramp-channel 0.0 1.0)
	  (check-back-and-forth ind "ptree+ramp 1" (vct 0.000 0.200 0.400 0.600 0.800 1.000 1.200 1.400 1.600 1.800 2.000))
	  (scale-channel .5)
	  (check-back-and-forth ind "ptree+ramp 2" (vct 0.000 0.100 0.200 0.300 0.400 0.500 0.600 0.700 0.800 0.900 1.000))
	  (undo 3)
	  (ptree-channel (lambda (y) (* y 2.0)))
	  (env-channel '(0 0 1 1 2 0))
	  (check-back-and-forth ind "ptree+ramp 3" (vct 0.000 0.400 0.800 1.200 1.600 2.000 1.600 1.200 0.800 0.400 0.000))
	  (undo 2)
	  (scale-channel .5)
	  (ptree-channel (lambda (y) (* y 2.0)))
	  (env-channel '(0 0 1 1 2 0))
	  (check-back-and-forth ind "ptree+ramp 4" (vct 0.000 0.200 0.400 0.600 0.800 1.000 0.800 0.600 0.400 0.200 0.000))
	  (scale-by .5)
	  (check-back-and-forth ind "ptree+ramp 5" (vct 0.000 0.100 0.200 0.300 0.400 0.500 0.400 0.300 0.200 0.100 0.000))
	  (undo 4)
	  (ptree-channel (lambda (y) (* y 2.0)))
	  (scale-channel 0.5)
	  (ramp-channel 0.0 1.0)
	  (check-back-and-forth ind "ptree+ramp 6" (vct 0.000 0.100 0.200 0.300 0.400 0.500 0.600 0.700 0.800 0.900 1.000))
	  (undo 3)
	  ;; try on-air cases
	  (undo 1)
	  (ptree-channel (lambda (y) 2.0))
	  (ramp-channel 0.0 1.0)
	  (check-back-and-forth ind "ptree+ramp air 1" (vct 0.000 0.200 0.400 0.600 0.800 1.000 1.200 1.400 1.600 1.800 2.000))
	  (scale-channel .5)
	  (check-back-and-forth ind "ptree+ramp air 2" (vct 0.000 0.100 0.200 0.300 0.400 0.500 0.600 0.700 0.800 0.900 1.000))
	  (undo 3)
	  (ptree-channel (lambda (y) 2.0))
	  (env-channel '(0 0 1 1 2 0))
	  (check-back-and-forth ind "ptree+ramp air 3" (vct 0.000 0.400 0.800 1.200 1.600 2.000 1.600 1.200 0.800 0.400 0.000))
	  (undo 2)
	  (ptree-channel (lambda (y) 2.0))
	  (scale-channel 0.5)
	  (ramp-channel 0.0 1.0)
	  (check-back-and-forth ind "ptree+ramp air 4" (vct 0.000 0.100 0.200 0.300 0.400 0.500 0.600 0.700 0.800 0.900 1.000))
	  (undo 3)
	  
	  ;; -------- xramp+ptree
	  (map-chan (lambda (y) 1.0))

	  (ptree-channel (lambda (y) y))
	  (xramp-channel 0.0 1.0 .0325)
	  (let ((orig-data (channel->vct)))
	    (undo 2)
	    (xramp-channel 0.0 1.0 .0325)
	    (if (not (vequal orig-data (channel->vct)))
		(snd-display ";xramp cases: ~A ~A" orig-data (channel->vct)))
	    (check-back-and-forth ind "xramp(+ptree) 0" (vct 0.000 0.300 0.513 0.664 0.771 0.847 0.901 0.940 0.967 0.986 1.000))
	    (ptree-channel (lambda (y) (* y 2.0)))
	    (check-back-and-forth ind "xramp+ptree 1" (vct-scale! (vct 0.000 0.300 0.513 0.664 0.771 0.847 0.901 0.940 0.967 0.986 1.000) 2.0))
	    (scale-channel .5)
	    (check-back-and-forth ind "xramp+ptree 2" (vct 0.000 0.300 0.513 0.664 0.771 0.847 0.901 0.940 0.967 0.986 1.000))
	    (ptree-channel (lambda (y) (+ y .5)))
	    (check-back-and-forth ind "xramp+ptree 3" (vct-offset! (vct 0.000 0.300 0.513 0.664 0.771 0.847 0.901 0.940 0.967 0.986 1.000) 0.5))
	    (undo 4)
	    (ptree-channel (lambda (y) y))
	    (env-sound '(0 0 1 1 2 0) 0 11 .0325)
	    (set! orig-data (channel->vct))
	    (undo 2)
	    (env-sound '(0 0 1 1 2 0) 0 11 .0325)
	    (if (not (vequal orig-data (channel->vct)))
		(snd-display ";xramp cases 1: ~A ~A" orig-data (channel->vct)))
	    (check-back-and-forth ind "xramp(+ptree) 4" (vct 0.000 0.513 0.771 0.901 0.967 1.000 0.967 0.901 0.771 0.513 0.000))
	    (ptree-channel (lambda (y) (* y 2.0)))
	    (check-back-and-forth ind "xramp+ptree 4" (vct-scale! (vct 0.000 0.513 0.771 0.901 0.967 1.000 0.967 0.901 0.771 0.513 0.000) 2.0))
	    (undo 2)
	    (scale-channel .5)
	    (env-sound '(0 0 1 1 2 0) 0 11 .0325)
	    (ptree-channel (lambda (y) (* y 2.0)))
	    (check-back-and-forth ind "xramp+ptree 5" (vct 0.000 0.513 0.771 0.901 0.967 1.000 0.967 0.901 0.771 0.513 0.000))
	    (scale-by .5)
	    (check-back-and-forth ind "ramp+ptree 6" (vct-scale! (vct 0.000 0.513 0.771 0.901 0.967 1.000 0.967 0.901 0.771 0.513 0.000) 0.5))
	    (undo 4)
	    (xramp-channel 0.0 1.0 .0325)
	    (scale-channel 0.5)
	    (ptree-channel (lambda (y) (* y 2.0)))
	    (check-back-and-forth ind "xramp+ptree 7" (vct 0.000 0.300 0.513 0.664 0.771 0.847 0.901 0.940 0.967 0.986 1.000))
	    (scale-channel 0.5)
	    (check-back-and-forth ind "ramp+ptree 8" (vct-scale! (vct 0.000 0.300 0.513 0.664 0.771 0.847 0.901 0.940 0.967 0.986 1.000) 0.5))
	    (undo 4)
	    (xramp-channel 0.0 1.0 .0325 0 5)
	    (check-back-and-forth ind "xramp(+ptree) 9" (vct 0.000 0.595 0.847 0.954 1.000 1.000 1.000 1.000 1.000 1.000 1.000))
	    (ptree-channel (lambda (y) (* y 2.0)) 3 3)
	    (check-back-and-forth ind "xramp+ptree 9" (vct 0.000 0.595 0.847 1.909 2.000 2.000 1.000 1.000 1.000 1.000 1.000))
	    (undo 2)
	    (xramp-channel 0.0 1.0 .0325 0 5)
	    (check-back-and-forth ind "xramp(+ptree) 10" (vct 0.000 0.595 0.847 0.954 1.000 1.000 1.000 1.000 1.000 1.000 1.000))
	    (ptree-channel (lambda (y) (* y 2.0)) 0 3)
	    (check-back-and-forth ind "xramp+ptree 10" (vct 0.000 1.189 1.695 0.954 1.000 1.000 1.000 1.000 1.000 1.000 1.000))
	    (undo 2)
	    (xramp-channel 1.0 0.0 .0325 5 5)
	    (check-back-and-forth ind "xramp(+ptree) 11" (vct 1.000 1.000 1.000 1.000 1.000 1.000 0.954 0.847 0.595 0.000 1.000))
	    (ptree-channel (lambda (y) (* y 2.0)) 3 4)
	    (check-back-and-forth ind "xramp+ptree 11" (vct 1.000 1.000 1.000 2.000 2.000 2.000 1.909 0.847 0.595 0.000 1.000))
	    (undo 2))

	  ;; -------- ptree chains
	  (map-chan (lambda (y) 1.0))
	  (ptree-channel (lambda (y) (* y 2.0)))
	  (ptree-channel (lambda (y) (* y 2.0)))
	  (check-back-and-forth ind "ptree+ptree 1" (vct 4.000 4.000 4.000 4.000 4.000 4.000 4.000 4.000 4.000 4.000 4.000))
	  (undo)
	  (ptree-channel (lambda (y) (let ((a (* y .5))) (+ y a))))
	  (check-back-and-forth ind "ptree+ptree 2" (vct 3.000 3.000 3.000 3.000 3.000 3.000 3.000 3.000 3.000 3.000 3.000))
	  (ptree-channel (lambda (y) (* y 2.0)))
	  (check-back-and-forth ind "ptree+ptree 3" (vct 6.000 6.000 6.000 6.000 6.000 6.000 6.000 6.000 6.000 6.000 6.000))
	  (undo 3)
	  (scale-channel 2.0)
	  (ptree-channel (lambda (y) (* y 2.0)))
	  (scale-channel 0.5)
	  (ptree-channel (lambda (y) (* y 2.0)))
	  (check-back-and-forth ind "ptree+ptree 4" (vct 4.000 4.000 4.000 4.000 4.000 4.000 4.000 4.000 4.000 4.000 4.000))
	  (scale-channel 0.5)
	  (check-back-and-forth ind "ptree+ptree 4" (vct 2.000 2.000 2.000 2.000 2.000 2.000 2.000 2.000 2.000 2.000 2.000))
	  (undo 5)
	  
	  (close-sound ind)
	  )
	
	)))



;;; ---------------- test 17: dialogs and graphics ----------------

(define (-> x0 y0 size snd chn)
  "draw an arrow pointing (from the left) at the point (x0 y0)"
  (let ((points (make-vector 8)))
    (define (point i x y)
      (vector-set! points (* i 2) x)
      (vector-set! points (+ (* i 2) 1) y))
    (define (arrow-head x y)
      (point 0 x y)
      (point 1 (- x (* 2 size)) (- y size))
      (point 2 (- x (* 2 size)) (+ y size))
      (point 3 x y)
      (fill-polygon points snd chn))
    (arrow-head x0 y0)
    (fill-rectangle (- x0 (* 4 size)) 
		    (inexact->exact (- y0 (* .4 size)))
		    (* 2 size)
		    (inexact->exact (* .8 size))
		    snd chn)))  

(if (and (or full-test (= snd-test 17) (and keep-going (<= snd-test 17)))
	 with-gui)
    (begin
      (if (procedure? test-hook) (test-hook 17))
      (if (not (file-exists? "cmn-glyphs.lisp"))
	  (copy-file (string-append home-dir "/cl/cmn-glyphs.lisp") (string-append (getcwd) "/cmn-glyphs.lisp")))
      (load "musglyphs.scm")
      (load "draw.scm")
      (add-hook! after-graph-hook display-previous-edits)
      (add-hook! lisp-graph-hook 
		 (lambda (snd chn)
		   (lambda ()
		     (draw-string "hi" 
				  (x->position .5 snd chn lisp-graph) 
				  (y->position .5 snd chn lisp-graph)
				  snd chn))))
      (let* ((ind (open-sound "oboe.snd"))
	     (wids (channel-widgets))
	     (wids1 (channel-widgets (selected-sound)))
	     (wids2 (channel-widgets (selected-sound) (selected-channel))))
	(do ((i 1 (1+ i)))
	    ((= i 4))
	  (scale-by 0.5)
	  (set! (x-bounds) (list 0 (* i .3))))
	(revert-sound ind)
	(draw-bass-clef 100 100 100 0 ind 0)
	(update-time-graph ind 0)
	(draw-fermata 200 100 60 0 ind 0)
	(draw-line 100 100 200 200 ind 0)
	(draw-dot 300 300 10 ind 0)
	(draw-string "hiho" 20 20 ind 0)
	(draw-dots '#(25 25 50 50 100 100) 10 ind 0)
	(-> 100 50 10 ind 0)
	(fill-rectangle 20 20 100 100 ind 0)
	(make-bezier 0 0 20 20 40 30 60 10 10)
	(update-time-graph ind 0)
	(reset-hook! after-graph-hook)
	(reset-hook! lisp-graph-hook)
	(let* ((ind1 (open-sound "2.snd"))
	       (wids3 (channel-widgets ind1 0))
	       (wids4 (channel-widgets ind1 1)))
	  (if (or (not (list-p wids))
		  (not (list-p wids3))
		  (and (provided? 'snd-motif)
		       (or (not (= (length wids1) 11))
			   (not (= (length wids2) 11)))))
	      (snd-display ";channel-widgets confused: ~A ~A ~A ~A ~A" wids wids1 wids2 wids3 wids4))
	  (hide-widget (car (channel-widgets)))
	  (show-widget (car (channel-widgets)))
	  (close-sound ind1))
	(close-sound ind))))


;;; ---------------- test 18: enved ----------------

(load "enved.scm")
(if (and (or full-test (= snd-test 18) (and keep-going (<= snd-test 18)))
	 with-gui)
    (begin
      (if (procedure? test-hook) (test-hook 18))
      (start-enveloping)
      (let ((nind (open-sound "oboe.snd")))
	(if (not (equal? (channel-envelope nind 0) (list 0.0 1.0 1.0 1.0)))
	    (snd-display ";channel-envelope: ~A?" (channel-envelope nind 0)))
	(set! (channel-envelope nind 0) (list 0 0 1 1 2 0))
	(if (not (equal? (channel-envelope nind 0) (list 0 0 1 1 2 0)))
	    (snd-display ";set channel-envelope: ~A?" (channel-envelope nind 0)))
	(close-sound nind)
	(stop-enveloping))))


;;; ---------------- test 19: save and restore ----------------

(define sfile 0)
(define after-save-state-hook-var 0)

(define (local-eq? a b)
  (if (number? a)
      (if (exact? a)
	  (= a b)
	  (< (abs (- a b)) .001))
      (eq? a b)))

(if (or full-test (= snd-test 19) (and keep-going (<= snd-test 19)))
    (let ((nind (open-sound "oboe.snd")))
      (if (procedure? test-hook) (test-hook 19))
      (add-mark 123)
      (delete-sample 12)
      (set! (x-bounds) (list .2 .4))
      (let ((old-bounds (x-bounds)))
	(set! (show-axes) show-all-axes)
	(set! (transform-graph-type) graph-as-sonogram)
	(set! (speed-control-style) speed-control-as-ratio)
	(set! (channel-style) channels-superimposed)
	(set! (enved-target) enved-srate)
	(set! (sound-property :hi nind) "hi")
	(set! (sound-property 'ho nind) 1234)
	(set! (channel-property :ha nind 0) 3.14)
	(reset-hook! after-save-state-hook)
	(add-hook! after-save-state-hook
		   (lambda (filename)
		     (let ((fd (open filename (logior O_RDWR O_APPEND))))
		       (format fd "~%~%(set! after-save-state-hook-var 1234)~%")
		       (close fd))))
	(save-state (save-state-file))
	(save-options "test.temp")
	(close-sound nind)
	(map forget-region (regions))
	(load (save-state-file))
	(let ((ind (find-sound "oboe.snd")))
	  (if (or (> (abs (- (car old-bounds) (car (x-bounds ind 0)))) .05)
		  (> (abs (- (cadr old-bounds) (cadr (x-bounds ind 0)))) .05))
	      (snd-display ";save bounds: ~A" (x-bounds ind 0)))
	  (if (not (= (length (marks ind 0)) 1))
	      (snd-display ";save marks: ~A?" (marks ind 0)))
	  (if (not (= (mark-sample (car (marks ind 0))) 122))
	      (snd-display ";save mark: ~A?" (mark-sample (car (marks ind 0)))))
	  (if (not (= (edit-position ind 0) 1))
	      (snd-display ";save edit-position: ~A" (edit-position ind 0)))
	  (if (not (equal? (edit-fragment 1 ind 0) (list "delete-sample" "delete" 12 1)))
	      (snd-display ";save edits: ~A" (edit-fragment 1 ind 0)))
	  (if (not (equal? (edit-tree ind 0) 
			   (list (list 0 0 0 11 1.0 0.0 0.0 0) (list 12 0 13 50827 1.0 0.0 0.0 0) (list 50827 -2 0 0 0.0 0.0 0.0 0))))
	      (snd-display ";save edit tree: ~A" (edit-tree ind 0)))
	  (if (not (= (sound-property 'ho ind) 1234))
	      (snd-display ";sound-property saved: 1234 -> ~A" (sound-property 'ho ind)))
	  (if (not (string=? (sound-property :hi ind) "hi"))
	      (snd-display ";sound-property saved: hi -> ~A" (sound-property :hi ind)))
	  (if (fneq (channel-property :ha ind 0) 3.14)
	      (snd-display ";channel-property saved: 3.14 -> ~A" (channel-property :ha ind 0)))
	  (close-sound ind)
	  (if (not (= after-save-state-hook-var 1234))
	      (snd-display ";after-save-state-hook: ~A" after-save-state-hook-var))
	  (reset-hook! after-save-state-hook)

	  (let ((err (catch 'cannot-save
		   (lambda () 
		     (save-state "/bad/bad.save"))
		   (lambda args 12345))))
	    (if (not (= err 12345)) (snd-display ";save-state err: ~A?" err)))

	  (let ((err (catch 'cannot-save
		   (lambda () 
		     (save-listener "/bad/bad.save"))
		   (lambda args 12345))))
	    (if (not (= err 12345)) (snd-display ";save-listener err: ~A?" err)))
	  ))
      (set! nind (open-sound "oboe.snd"))
      (set! (sample 1) .5)
      (delete-sample 100)
      (insert-sample 10 .5)
      (scale-channel 2.0)
      (insert-silence 100 20)
      (save-edit-history "hiho.scm")
      (revert-sound nind)
      (set! sfile nind)
      (load "hiho.scm")
      (if (not (equal? (edit-fragment 1) '("set! sample" "set" 1 1))) (snd-display ";save-edit-history 1: ~A?" (edit-fragment 1)))
      (if (not (equal? (edit-fragment 2) '("delete-sample" "delete" 100 1))) (snd-display ";save-edit-history 2: ~A?" (edit-fragment 2)))
      (if (not (equal? (edit-fragment 3) '("insert-sample" "insert" 10 1))) (snd-display ";save-edit-history 3: ~A?" (edit-fragment 3)))
      (if (not (equal? (edit-fragment 4) '("scale-channel 2.0000 0 50828" "scale" 0 50828))) (snd-display ";save-edit-history 4: ~A?" (edit-fragment 4)))
      (if (not (equal? (edit-fragment 5) '("pad-channel" "zero" 100 20))) (snd-display ";save-edit-history 5: ~A?" (edit-fragment 5)))
      (let ((str (display-edits)))
	(if (not (string=? str (string-append "
EDITS: 5

 (begin) [0:2]:
   (at 0, cp->sounds[0][0:50827, 1.000000]) [file: " home-dir "/cl/oboe.snd[0]]
   (at 50828, end_mark)

 (set 1 1) ; set! sample [1:4]:
   (at 0, cp->sounds[0][0:0, 1.000000]) [file: " home-dir "/cl/oboe.snd[0]]
   (at 1, cp->sounds[1][0:0, 1.000000]) [buf: 1] 
   (at 2, cp->sounds[0][2:50827, 1.000000]) [file: " home-dir "/cl/oboe.snd[0]]
   (at 50828, end_mark)

 (delete 100 1) ; delete-sample [2:5]:
   (at 0, cp->sounds[0][0:0, 1.000000]) [file: " home-dir "/cl/oboe.snd[0]]
   (at 1, cp->sounds[1][0:0, 1.000000]) [buf: 1] 
   (at 2, cp->sounds[0][2:99, 1.000000]) [file: " home-dir "/cl/oboe.snd[0]]
   (at 100, cp->sounds[0][101:50827, 1.000000]) [file: " home-dir "/cl/oboe.snd[0]]
   (at 50827, end_mark)

 (insert 10 1) ; insert-sample [3:7]:
   (at 0, cp->sounds[0][0:0, 1.000000]) [file: " home-dir "/cl/oboe.snd[0]]
   (at 1, cp->sounds[1][0:0, 1.000000]) [buf: 1] 
   (at 2, cp->sounds[0][2:9, 1.000000]) [file: " home-dir "/cl/oboe.snd[0]]
   (at 10, cp->sounds[2][0:0, 1.000000]) [buf: 1] 
   (at 11, cp->sounds[0][10:99, 1.000000]) [file: " home-dir "/cl/oboe.snd[0]]
   (at 101, cp->sounds[0][101:50827, 1.000000]) [file: " home-dir "/cl/oboe.snd[0]]
   (at 50828, end_mark)

 (scale 0 50828) ; scale-channel 2.0000 0 50828 [4:7]:
   (at 0, cp->sounds[0][0:0, 2.000000]) [file: " home-dir "/cl/oboe.snd[0]]
   (at 1, cp->sounds[1][0:0, 2.000000]) [buf: 1] 
   (at 2, cp->sounds[0][2:9, 2.000000]) [file: " home-dir "/cl/oboe.snd[0]]
   (at 10, cp->sounds[2][0:0, 2.000000]) [buf: 1] 
   (at 11, cp->sounds[0][10:99, 2.000000]) [file: " home-dir "/cl/oboe.snd[0]]
   (at 101, cp->sounds[0][101:50827, 2.000000]) [file: " home-dir "/cl/oboe.snd[0]]
   (at 50828, end_mark)

 (silence 100 20) ; pad-channel [5:9]:
   (at 0, cp->sounds[0][0:0, 2.000000]) [file: " home-dir "/cl/oboe.snd[0]]
   (at 1, cp->sounds[1][0:0, 2.000000]) [buf: 1] 
   (at 2, cp->sounds[0][2:9, 2.000000]) [file: " home-dir "/cl/oboe.snd[0]]
   (at 10, cp->sounds[2][0:0, 2.000000]) [buf: 1] 
   (at 11, cp->sounds[0][10:98, 2.000000]) [file: " home-dir "/cl/oboe.snd[0]]
   (at 100, cp->sounds[-1][0:19, 0.000000])
   (at 120, cp->sounds[0][99:99, 2.000000]) [file: " home-dir "/cl/oboe.snd[0]]
   (at 121, cp->sounds[0][101:50827, 2.000000]) [file: " home-dir "/cl/oboe.snd[0]]
   (at 50848, end_mark)
")))
	    (snd-display ";display-edits: ~A?" str)))
      (save-edit-history "hiho.scm" nind 0)
      (scale-sound-to 1.0 0 (frames nind 0) nind 0)
      (let ((eds (edit-position nind 0))
	    (val (insert-sound "zero.snd")))
	(if (or (not (= 0 val))
		(not (= eds (edit-position nind 0))))
	    (snd-display ";insert-sound zero.snd was an edit? ~A ~A ~A" val eds (edit-position nind 0))))
      (revert-sound nind)
      (scale-sound-to 0.5 0 (frames nind 0) nind 0)
      (if (fneq (maxamp nind 0) 0.5) (snd-display ";scale-sound-to 0.5: ~A" (maxamp nind)))
      (close-sound nind)

      (let ((nind (open-sound "oboe.snd")))
	(ramp-channel 0.0 1.0)
	(xramp-channel 0.0 1.0 32.0)
	(save-edit-history "hiho.scm")
	(revert-sound nind)
	(set! sfile nind)
	(load "hiho.scm")
	(if (not (equal? (edit-fragment 1) '("ramp-channel 0.0000 1.0000 0 50828" "env" 0 50828)))
	    (snd-display ";save-edit-history ramp 1: ~A?" (edit-fragment 1)))
	(if (not (equal? (edit-fragment 2) '("xramp-channel 0.0000 1.0000 32.0000 0 50828" "env" 0 50828)))
	    (snd-display ";save-edit-history xramp 2: ~A?" (edit-fragment 2)))
	(revert-sound nind)
	(let ((old-opt (optimization)))
	  (set! (optimization) 5)
	  (ptree-channel (lambda (y) (* y 2)))
	  (save-edit-history "hiho.scm")
	  (revert-sound nind)
	  (set! sfile nind)
	  (load "hiho.scm")
	  (set! (optimization) old-opt))
	(if (not (equal? (edit-fragment 1) '("ptree 0 0 50828" "ptree" 0 50828)))
	    (snd-display ";save-edit-history ptree 1: ~A?" (edit-fragment 1)))
	(revert-sound nind)
	(let ((old-opt (optimization)))
	  (set! (optimization) 5)
	  (xen-channel (lambda (y data dir) (* (list-ref data 0) y)) 0 (frames) nind 0 #f #f (lambda (beg dur) (list .5)))
	  (save-edit-history "hiho.scm")
	  (revert-sound nind)
	  (set! sfile nind)
	  (load "hiho.scm")
	  (set! (optimization) old-opt))
	(if (not (equal? (edit-fragment 1) '("xen 0 0 50828" "xen" 0 50828)))
	    (snd-display ";save-edit-history xen 1: ~A?" (edit-fragment 1)))
	(close-sound nind))

      (let ((ind (new-sound "fmv.snd")))
	(set! (sample 10) .1)
	(save-sound ind)
	(set! (sample 1) .1)
	(let ((eds (display-edits ind)))
	  (save-state "t1.scm")
	  (close-sound ind)
	  (map forget-region (regions))
	  (load "t1.scm")
	  (set! ind (find-sound "fmv.snd"))
	  (if (not (sound? ind))
	      (snd-display ";save-state restored but no sound?"))
	  (let ((new-eds (display-edits ind)))
	    (if (not (string=? eds new-eds))
		(snd-display ";save-state from ~A to ~A?" eds new-eds)))
	  (do ((i 3 (1+ i)))
	      ((= i 6))
	    (set! (sample i) (* i .1))
	    (set! eds (display-edits ind))
	    (save-state "t1.scm")
	    (close-sound ind)
	    (map forget-region (regions))
	    (load "t1.scm")
	    (set! ind (find-sound "fmv.snd"))
	    (if (not (sound? ind))
		(snd-display ";save-state ~A restored but no sound?" i))
	    (let ((new-eds (display-edits ind)))
	      (if (not (string=? eds new-eds))
		  (snd-display ";save-state ~A from ~A to ~A?" i eds new-eds)))))
	(close-sound ind)
	(delete-file "t1.scm"))
      
      (let ((ind (new-sound "fmv.snd" mus-next mus-bshort 22050 8 "this is an 8-channel save-state test"))
	    (ind1 (new-sound "fmv1.snd" mus-next mus-bshort 22050 2 "this is a 2-channel save-state test")))
	(set! (sample 10 ind 0) .1)
	(set! (sample 10 ind 1) .2)
	(set! (sample 10 ind 2) .3)
	(set! (sample 10 ind 3) .4)
	(set! (sample 10 ind1 0) -.1)
	(set! (sample 10 ind1 1) -.2)
	(save-sound ind)
	(save-sound ind1)
	(set! (sample 1 ind 0) .1)
	(set! (sample 1 ind 1) .2)
	(set! (sample 1 ind 2) .3)
	(set! (sample 1 ind 3) .4)
	(set! (sample 1 ind1 0) -.1)
	(set! (sample 1 ind1 1) -.2)
	(let ((eds (display-edits ind))
	      (eds1 (display-edits ind1)))
	  (save-state "t1.scm")
	  (close-sound ind)
	  (close-sound ind1)
	  (map forget-region (regions))
	  (load "t1.scm")
	  (set! ind (find-sound "fmv.snd"))
	  (set! ind1 (find-sound "fmv1.snd"))
	  (if (or (not (sound? ind))
		  (not (sound? ind1)))
	      (snd-display ";save-state(2) restored but no sound? ~A ~A" ind ind1))
	  (let ((new-eds (display-edits ind))
		(new-eds1 (display-edits ind1)))
	    (if (not (string=? eds new-eds))
		(snd-display ";save-state(1) from ~A to ~A?" eds new-eds))
	    (if (not (string=? eds1 new-eds1))
		(snd-display ";save-state(2) from ~A to ~A?" eds1 new-eds1))))
	(close-sound ind)
	(close-sound ind1)
	(delete-file "t1.scm"))

      (let ((ind (open-sound "oboe.snd"))
	    (old-save-dir (save-dir))
	    (old-eps-file (eps-file)))
	(set! (save-dir) #f)
	(let ((v (make-vct 32 1.0)))
	  (set! (samples 100 32) v))
	(map-channel (lambda (y) (+ y .1)) 1000 10000)
	(set! (show-axes ind 0) show-no-axes)
	(set! (zoom-focus-style) zoom-focus-middle)
	(set! (transform-normalization ind 0) dont-normalize)
	(set! (graph-style ind 0) graph-filled)
	(set! (transform-graph-type ind 0) graph-as-spectrogram)
	(set! (time-graph-type ind 0) graph-as-wavogram)
	(set! (x-axis-style ind 0) x-axis-as-percentage)
	(set! (speed-control-style ind) speed-control-as-semitone)
	(set! (cursor ind 0) 1234)
	(set! (eps-file) "hiho.eps")
	(save-state "s61.scm")
	(close-sound ind)
	(map forget-region (regions))
	(load "s61.scm")
	(set! (save-dir) old-save-dir)
	(set! ind (find-sound "oboe.snd"))
	(if (not (= (show-axes ind 0) show-no-axes)) (snd-display ";save show-no-axes: ~A" (show-axes ind 0)))
	(if (not (= (zoom-focus-style) zoom-focus-middle)) (snd-display ";save zoom-focus-middle: ~A" (zoom-focus-style)))
	(if (not (= (transform-normalization ind 0) dont-normalize)) (snd-display ";save dont-normalize: ~A" (transform-normalization ind 0)))
	(if (not (= (graph-style ind 0) graph-filled)) (snd-display ";save graph-filled: ~A" (graph-style ind 0)))
	(if (not (= (transform-graph-type ind 0) graph-as-spectrogram)) (snd-display ";save graph-as-spectrogram: ~A" (transform-graph-type ind 0)))
	(if (not (= (time-graph-type ind 0) graph-as-wavogram)) (snd-display ";save graph-as-wavogram: ~A" (time-graph-type ind 0)))
	(if (not (= (x-axis-style ind 0) x-axis-as-percentage)) (snd-display ";save x-axis-as-percentage: ~A" (x-axis-style ind 0)))
	(if (not (= (speed-control-style ind) speed-control-as-semitone)) (snd-display ";save speed-control-style: ~A" (speed-control-style ind)))
	(if (not (= (cursor ind 0) 1234)) (snd-display ";save cursor 1234: ~A" (cursor ind 0)))
	(if (not (string=? (eps-file) "hiho.eps")) (snd-display ";save eps-file: ~A" (eps-file)))
	(set! (eps-file) old-eps-file)
	(if (not (string=? (display-edits) (string-append "
EDITS: 2

 (begin) [0:2]:
   (at 0, cp->sounds[0][0:50827, 1.000000]) [file: " home-dir "/cl/oboe.snd[0]]
   (at 50828, end_mark)

 (set 100 32) ; set-samples [1:4]:
   (at 0, cp->sounds[0][0:99, 1.000000]) [file: " home-dir "/cl/oboe.snd[0]]
   (at 100, cp->sounds[1][0:31, 1.000000]) [buf: 32] 
   (at 132, cp->sounds[0][132:50827, 1.000000]) [file: " home-dir "/cl/oboe.snd[0]]
   (at 50828, end_mark)

 (set 1000 10000) ; map-channel [2:6]:
   (at 0, cp->sounds[0][0:99, 1.000000]) [file: " home-dir "/cl/oboe.snd[0]]
   (at 100, cp->sounds[1][0:31, 1.000000]) [buf: 32] 
   (at 132, cp->sounds[0][132:999, 1.000000]) [file: " home-dir "/cl/oboe.snd[0]]
   (at 1000, cp->sounds[2][0:9999, 1.000000]) [buf: 10000] 
   (at 11000, cp->sounds[0][11000:50827, 1.000000]) [file: " home-dir "/cl/oboe.snd[0]]
   (at 50828, end_mark)
")))
	    (snd-display ";no save dir edits: ~A" (display-edits)))
	(delete-file "s61.scm")
	(close-sound ind))

      (let* ((ind (open-sound "oboe.snd"))
	     (funcs (list transform-graph-type time-graph-type show-axes transform-normalization
			  graph-style x-axis-style spectro-x-scale transform-size fft-window
			  dot-size max-transform-peaks verbose-cursor zero-pad min-dB spectro-hop spectro-cutoff))
	     (func-names (list 'transform-graph-type 'time-graph-type 'show-axes 'transform-normalization
			       'graph-style 'x-axis-style 'spectro-x-scale 'transform-size 'fft-window
			       'dot-size 'max-transform-peaks 'verbose-cursor 'zero-pad 'min-dB 'spectro-hop 'spectro-cutoff))
	     (old-globals (map (lambda (func) (func)) funcs))
	     (new-globals (list graph-as-sonogram graph-as-wavogram show-all-axes normalize-by-sound
				graph-dots x-axis-in-samples 0.1 32 bartlett-window
				4 10 #t 1 -90 12 .1))
	     (new-locals (list graph-once graph-once show-x-axis normalize-by-channel
			       graph-lines x-axis-in-seconds 1.0 256 blackman2-window
			       1 100 #f 0 -60 4 1.0)))
	(for-each (lambda (func func-name global local)
		    (set! (func) global)
		    (set! (func ind 0) local))
		  funcs func-names new-globals new-locals)
	(set! (zoom-focus-style) zoom-focus-right)
	(set! (channel-style) channels-combined)
	(set! (channel-style ind) channels-separate)
	(save-state "s61.scm")
	(close-sound ind)
	(map forget-region (regions))
	(load "s61.scm")
	(set! ind (find-sound "oboe.snd"))
	(for-each (lambda (func func-name global local)
		    (if (or (not (local-eq? (func) global))
			    (not (local-eq? (func ind 0) local)))
			(snd-display "; save ~A reversed: ~A [~A] ~A [~A]" 
				     func-name (func) global (func ind 0) local)))
		  funcs func-names new-globals new-locals)
	(if (not (= (channel-style ind) channels-separate))
	    (snd-display ";save channel-style reversed: ~A ~A" (channel-style) (channel-style ind)))
	(for-each (lambda (func val) (set! (func) val)) funcs old-globals)
	(close-sound ind)
	(set! (zoom-focus-style) zoom-focus-active)
	(set! (channel-style) channels-separate)
	(delete-file "s61.scm"))

      (mus-sound-prune)
      ))


;;; ---------------- test 20: transforms ----------------

(define (bes-j0 x)				;returns J0(x) for any real x
  (if (< (abs x) 8.0)			;direct rational function fit
      (let* ((y (* x x))
	     (ans1 (+ 57568490574.0
		      (* y (+ -13362590354.0 
			      (* y  (+ 651619640.7
				       (* y (+ -11214424.18 
					       (* y (+ 77392.33017
						       (* y -184.9052456)))))))))))
	     (ans2 (+ 57568490411.0 
		      (* y (+ 1029532985.0 
			      (* y (+ 9494680.718
				      (* y (+ 59272.64853
					      (* y (+ 267.8532712 y)))))))))))
	(/ ans1 ans2))
    (let* ((ax (abs x))
	   (z (/ 8.0 ax))
	   (y (* z z))
	   (xx (- ax 0.785398164))
	   (ans1 (+ 1.0 
		    (* y (+ -0.1098628627e-2 
			    (* y (+ 0.2734510407e-4
				    (* y (+ -0.2073370639e-5
					    (* y 0.2093887211e-6)))))))))
	   (ans2 (+ -0.1562499995e-1
		    (* y (+ 0.1430488765e-3
			    (* y (+ -0.6911147651e-5
				    (* y (+ 0.7621095161e-6
					    (* y -0.934945152e-7))))))))))
      (* (sqrt (/ 0.636619772 ax))
	 (- (* (cos xx) ans1)
	    (* z (sin xx) ans2))))))

(define (bes-j1 x)				;returns J1(x) for any real x
  (define (signum x) (if (= x 0.0) 0 (if (< x 0.0) -1 1)))
  (if (< (abs x) 8.0)
      (let* ((y (* x x))
	     (ans1 (* x 
		      (+ 72362614232.0
			 (* y (+ -7895059235.0
				 (* y (+ 242396853.1
					 (* y (+ -2972611.439
						 (* y (+ 15704.48260
							 (* y -30.16036606))))))))))))
	     (ans2 (+ 144725228442.0 
		      (* y (+ 2300535178.0 
			      (* y (+ 18583304.74
				      (* y (+ 99447.43394
					      (* y (+ 376.9991397 y)))))))))))
	(/ ans1 ans2))
    (let* ((ax (abs x))
	   (z (/ 8.0 ax))
	   (y (* z z))
	   (xx (- ax 2.356194491))
	   (ans1 (+ 1.0
		    (* y (+ 0.183105e-2
			    (* y (+ -0.3516396496e-4
				    (* y (+ 0.2457520174e-5
					    (* y -0.240337019e-6)))))))))
	   (ans2 (+ 0.04687499995
		    (* y (+ -0.2002690873e-3
			    (* y (+ 0.8449199096e-5
				    (* y (+ -0.88228987e-6
					    (* y 0.105787412e-6))))))))))
      (* (signum x)
	 (sqrt (/ 0.636619772 ax))
	 (- (* (cos xx) ans1)
	    (* z (sin xx) ans2))))))

(define (peak-at data)
  (let ((len (vct-length data))
	(peak (vct-ref data 0))
	(loc 0))
    (do ((i 1 (1+ i)))
	((= i len) (list loc peak))
      (if (> (vct-ref data i) peak)
	  (begin
	    (set! peak (vct-ref data i))
	    (set! loc i))))))

(define (inverse-haar f)
  (let* ((n (vct-length f))
	 (g (make-vct n))
	 (s2 (sqrt 2.0))
	 (v (/ 1.0 (sqrt n))))
    (vct-set! f 0 (* (vct-ref f 0) v))
    (do ((m 2 (* m 2)))
	((> m n))
      (let ((mh (/ m 2)))
	(do ((j 0 (+ j 2))
	     (k 0 (+ k 1)))
	    ((= j m))
	  (let ((x (vct-ref f k))
		(y (* (vct-ref f (+ mh k)) v)))
	    (vct-set! g j (+ x y))
	    (vct-set! g (+ j 1) (- x y))))
	(do ((i (- m 1) (- i 1)))
	    ((< i 0))
	  (vct-set! f i (vct-ref g i)))
	(set! v (* v s2))))
    f))

(define (wavelet data n isign wf cc)
  (let* ((cc-size (vct-length cc))
	 (ccr (make-vct cc-size))
	 (sig -1.0))
    (do ((i 0 (1+ i))
	 (j (- cc-size 1) (1- j)))
	((= i cc-size))
      (vct-set! ccr j (* sig (vct-ref cc i)))
      (set! sig (- sig)))
    (if (>= n 4)
	(if (>= isign 0)
	    (do ((nn n (/ nn 2)))
		((< nn 4))
	      (wf data nn isign cc ccr))
	    (do ((nn 4 (* nn 2)))
		((> nn n))
	      (wf data nn isign cc ccr))))))

(define (pwt data n isign cc cr)
  (let* ((data1 (make-vct n))
	 (n1 (1- n))
	 (ncof (vct-length cc))
	 (nmod (* ncof n))
	 (nh (inexact->exact (floor (/ n 2))))
	 (joff (inexact->exact (- (floor (/ ncof 2)))))
	 (ioff joff))
    (if (>= isign 0)
	(do ((ii 0 (1+ ii))
	     (i 1 (+ i 2)))
	    ((> i n))
	  (let ((ni (+ i nmod ioff))
		(nj (+ i nmod joff)))
	    (do ((k 1 (1+ k)))
		((> k ncof))
	      (let ((jf (logand n1 (+ ni k))) ;gad wotta kludge...
		    (jr (logand n1 (+ nj k))))
		(vct-set! data1 ii (+ (vct-ref data1 ii)
				      (* (vct-ref cc (1- k)) 
					 (vct-ref data jf))))
		(vct-set! data1 (+ ii nh) (+ (vct-ref data1 (+ ii nh))
					     (* (vct-ref cr (1- k)) 
						(vct-ref data jr))))))))
	(do ((ii 0 (1+ ii))
	     (i 1 (+ i 2)))
	    ((> i n))
	  (let ((ai (vct-ref data ii))
		(ai1 (vct-ref data (+ ii nh)))
		(ni (+ i nmod ioff))
		(nj (+ i nmod joff)))
	    (do ((k 1 (1+ k)))
		((> k ncof))
	      (let ((jf (logand n1 (+ ni k)))
		    (jr (logand n1 (+ nj k))))
		(vct-set! data1 jf (+ (vct-ref data1 jf) 
					       (* ai (vct-ref cc (1- k)))))
		(vct-set! data1 jr (+ (vct-ref data1 jr)
				      (* ai1 (vct-ref cr (1- k))))))))))
    (do ((i 0 (1+ i)))
	((= i n))
      (vct-set! data i (vct-ref data1 i)))
    data))

(if (or full-test (= snd-test 20) (and keep-going (<= snd-test 20)))
    (let* ((daub4 (vct 0.4829629131445341 0.8365163037378079 0.2241438680420134 -0.1294095225512604))
	   (daub6 (vct 0.332670552950 0.806891509311 0.459877502118 -0.135011020010 -0.085441273882 0.035226291886))
	   (daub8 (vct 0.230377813309 0.714846570553 0.630880767930 -0.027983769417 -0.187034811719 0.030841381836
		       0.032883011667 -0.010597401785))
	   (daub10 (vct 0.160102397974 0.603829269797 0.724308528438 0.138428145901 -0.242294887066 -0.032244869585
			0.077571493840 -0.006241490213 -0.012580751999 0.003335725285))
	   (daub12 (vct 0.111540743350 0.494623890398 0.751133908021 0.315250351709 -0.226264693965 -0.129766867567
			0.097501605587 0.027522865530 -0.031582039317 0.000553842201 0.004777257511 -0.001077301085))
	   (daub14 (vct 0.077852054085 0.396539319482 0.729132090846 0.469782287405 -0.143906003929 -0.224036184994
			0.071309219267 0.080612609151 -0.038029936935 -0.016574541631 0.012550998556 0.000429577973
			-0.001801640704 0.000353713800))
	   (daub16 (vct 0.054415842243 0.312871590914 0.675630736297 0.585354683654 -0.015829105256 -0.284015542962
			0.000472484574 0.128747426620 -0.017369301002 -0.044088253931 0.013981027917 0.008746094047
			-0.004870352993 -0.000391740373 0.000675449406 -0.000117476784))
	   (daub18 (vct 0.038077947364 0.243834674613 0.604823123690 0.657288078051 0.133197385825 -0.293273783279
			-0.096840783223 0.148540749338 0.030725681479 -0.067632829061 0.000250947115 0.022361662124
			-0.004723204758 -0.004281503682 0.001847646883 0.000230385764 -0.000251963189 0.000039347320))
	   (daub20 (vct 0.026670057901 0.188176800077 0.527201188931 0.688459039453 0.281172343661 -0.249846424327
			-0.195946274377 0.127369340336 0.093057364604 -0.071394147166 -0.029457536822 0.033212674059
			0.003606553567 -0.010733175483 0.001395351747 0.001992405295 -0.000685856695 -0.000116466855
			0.000093588670 -0.000013264203))
	   (SQRT2 1.41421356237309504880168872420969808)
	   (Battle-Lemarie (vct (* SQRT2 -0.002) (* SQRT2 -0.003) (* SQRT2  0.006) (* SQRT2  0.006) (* SQRT2 -0.013)
				(* SQRT2 -0.012) (* SQRT2  0.030) (* SQRT2  0.023) (* SQRT2 -0.078) (* SQRT2 -0.035)
				(* SQRT2  0.307) (* SQRT2  0.542) (* SQRT2  0.307) (* SQRT2 -0.035) (* SQRT2 -0.078)
				(* SQRT2  0.023) (* SQRT2  0.030) (* SQRT2 -0.012) (* SQRT2 -0.013) (* SQRT2  0.006)
				(* SQRT2  0.006) (* SQRT2 -0.003) (* SQRT2 -0.002) 0.0))
	   (Burt-Adelson (vct (* SQRT2 (/ -1.0 20.0)) (* SQRT2 (/ 5.0 20.0)) (* SQRT2 (/ 12.0 20.0))
			      (* SQRT2 (/ 5.0 20.0)) (* SQRT2 (/ -1.0 20.0)) 0.0))
	   (Beylkin (vct 0.099305765374353 0.424215360812961 0.699825214056600 0.449718251149468
			 -.110927598348234 -.264497231446384 0.026900308803690 0.155538731877093
			 -.017520746266529 -.088543630622924 0.019679866044322 0.042916387274192
			 -.017460408696028 -.014365807968852 0.010040411844631 .0014842347824723
			 -.002736031626258 .0006404853285212))
	   (SQRT15 3.87298334620741688517927)
	   (coif2 (vct (/ (* SQRT2 (- SQRT15 3)) 32.0) (/ (* SQRT2 (- 1 SQRT15)) 32.0) (/ (* SQRT2 (- 6 (* 2 SQRT15))) 32.0)
		       (/ (* SQRT2 (+ (* 2 SQRT15) 6)) 32.0) (/ (* SQRT2 (+ SQRT15 13)) 32.0) (/ (* SQRT2 (- 9 SQRT15)) 32.0)))
	   (coif4 (vct 0.0011945726958388 	-0.01284557955324 0.024804330519353 0.050023519962135 -0.15535722285996
		       -0.071638282295294 0.57046500145033 0.75033630585287 0.28061165190244 -0.0074103835186718
		       -0.014611552521451 -0.0013587990591632))
	   (coif6 (vct -0.0016918510194918 -0.00348787621998426 0.019191160680044 0.021671094636352 -0.098507213321468
		       -0.056997424478478 0.45678712217269 0.78931940900416 0.38055713085151 -0.070438748794943 
		       -0.056514193868065 0.036409962612716 0.0087601307091635 -0.011194759273835 -0.0019213354141368
		       0.0020413809772660 0.00044583039753204 -0.00021625727664696))
	   (sym2 (vct (* SQRT2 -0.125) (* SQRT2  0.25) (* SQRT2  0.75) (* SQRT2  0.25) (* SQRT2 -0.125)))
	   (sym3 (vct (/ (* SQRT2 1.0) 8.0) (/ (* SQRT2 3.0) 8.0) (/ (* SQRT2 3.0) 8.0) (/ (* SQRT2 1.0) 8.0)))
	   (sym4 (vct (/ (* SQRT2   3.0) 128.0) (/ (* SQRT2  -6.0) 128.0) (/ (* SQRT2 -16.0) 128.0)
		      (/ (* SQRT2  38.0) 128.0) (/ (* SQRT2  90.0) 128.0) (/ (* SQRT2  38.0) 128.0)
		      (/ (* SQRT2 -16.0) 128.0) (/ (* SQRT2  -6.0) 128.0) (/ (* SQRT2   3.0) 128.0) 0.0))
	   (sym5 (vct (/ (* SQRT2  3.0) 64.0) (/ (* SQRT2 -9.0) 64.0) (/ (* SQRT2 -7.0) 64.0) (/ (* SQRT2 45.0) 64.0)
		      (/ (* SQRT2 45.0) 64.0) (/ (* SQRT2 -7.0) 64.0) (/ (* SQRT2 -9.0) 64.0) (/ (* SQRT2  3.0) 64.0)))
	   (sym6 (vct (/ (* SQRT2   -35.0) 16384.0) (/ (* SQRT2  -105.0) 16384.0) (/ (* SQRT2  -195.0) 16384.0)
		      (/ (* SQRT2   865.0) 16384.0) (/ (* SQRT2   363.0) 16384.0) (/ (* SQRT2 -3489.0) 16384.0)
		      (/ (* SQRT2  -307.0) 16384.0) (/ (* SQRT2 11025.0) 16384.0) (/ (* SQRT2 11025.0) 16384.0)
		      (/ (* SQRT2  -307.0) 16384.0) (/ (* SQRT2 -3489.0) 16384.0) (/ (* SQRT2   363.0) 16384.0)
		      (/ (* SQRT2   865.0) 16384.0) (/ (* SQRT2  -195.0) 16384.0) (/ (* SQRT2  -105.0) 16384.0)
		      (/ (* SQRT2   -35.0) 16384.0))))
      (define wts (list 
		   daub4 daub6 daub8 daub10 daub12 daub14 daub16 daub18 daub20
		   Battle-Lemarie Burt-Adelson Beylkin coif2 coif4 coif6
		   sym2 sym3 sym4 sym5 sym6))

      (if (procedure? test-hook) (test-hook 20))
    (do ((clmtest 0 (1+ clmtest))) ((= clmtest tests)) (if (> tests 1) (snd-display ";test ~D " clmtest))
    (let ((d0 #f) (d1 #f) (fn #f))

      (let ((index (open-sound "oboe.snd")))
	;; check small transform cases
	(set! (transform-graph?) #t)
	(for-each 
	 (lambda (transform)
	   (set! (transform-type) transform)
	   (for-each
	    (lambda (size)
	      (set! (transform-size) size)
	      (update-transform-graph))
	    (list 8 7 -7 4 3 2 1 0)))
	 (list fourier-transform  wavelet-transform   
	       autocorrelation    walsh-transform     hadamard-transform  cepstrum     haar-transform))
	(close-sound index))

      ;; -------- fft

      (set! d0 (make-vct 16))
      (vct-set! d0 0 1.0)
      (snd-transform fourier-transform d0 0)
      (do ((i 0 (1+ i)))
	  ((= i 16))
	(if (fneq (vct-ref d0 i) 1.0)
	    (snd-display ";fourier (1.0) [~D]: ~A?" i (vct-ref d0 i))))

      (set! d0 (make-vct 19))
      (vct-set! d0 0 1.0)
      (snd-transform fourier-transform d0 0)
      (call-with-current-continuation
       (lambda (break)
	 (do ((i 0 (1+ i)))
	     ((= i 16))
	   (if (fneq (vct-ref d0 i) 1.0)
	       (begin
		 (snd-display ";fourier (1.0) [~D]: ~A?" i (vct-ref d0 i))
		 (break))))))

      (snd-transform fourier-transform d0 0)
      (if (fneq (vct-ref d0 0) 256.0)
	  (snd-display (format ";fourier (256.0): ~A?" (vct-ref d0 0))))
      (call-with-current-continuation
       (lambda (break)
	 (do ((i 1 (1+ i)))
	     ((= i 16))
	   (if (fneq (vct-ref d0 i) 0.0)
	       (begin
		 (snd-display ";fourier (0.0) [~D]: ~A?" i (vct-ref d0 i))
		 (break))))))

      (set! d0 (make-vct 8))
      (set! d1 (make-vct 8))
      (vct-set! d0 2 1.0)
      (mus-fft d0 d1 8 1)
      (if (or (not (vequal d0 (vct 1.000 0.000 -1.000 -0.000 1.000 0.000 -1.000 -0.000)))
	      (not (vequal d1 (vct 0.000 1.000 0.000 -1.000 0.000 1.000 0.000 -1.000))))
	  (snd-display ";mus-fft 1: ~A ~A?" d0 d1))
      (mus-fft d0 d1 8 -1)
      (if (or (not (vequal d0 (vct 0.000 0.000 8.000 0.000 0.000 0.000 0.000 0.000)))
	      (not (vequal d1 (vct 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000))))
	  (snd-display ";mus-fft -1: ~A ~A?" d0 d1))
      
      (vct-fill! d0 1.0)
      (vct-fill! d1 0.0)
      (mus-fft d0 d1 8)
      (if (or (not (vequal d0 (vct 8.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000)))
	      (not (vequal d1 (vct 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000))))
	  (snd-display ";mus-fft 2: ~A ~A?" d0 d1))
      (mus-fft d0 d1 8 -1)
      (if (or (not (vequal d0 (vct 8.000 8.000 8.000 8.000 8.000 8.000 8.000 8.000)))
	      (not (vequal d1 (vct 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000))))
	  (snd-display ";mus-fft -2: ~A ~A?" d0 d1))

      (vct-fill! d1 0.0)
      (vct-map! d0 (lambda () (random 1.0)))
      (set! fn (vct-copy d0))
      (mus-fft d0 d1 8)
      (mus-fft d0 d1 8 -1)
      (vct-scale! d0 (/ 1.0 8.0))
      (if (not (vequal d0 fn))
	  (snd-display ";mus-fft 3: ~A ~A?" d0 fn))

      (for-each 
       (lambda (size)
	 (set! d0 (make-vct size))
	 (vct-set! d0 0 1.0)
	 (set! d1 (snd-spectrum d0 rectangular-window size))
	 (call-with-current-continuation
	  (lambda (break)
	    (do ((i 0 (1+ i)))
		((= i (/ size 2)))
	      (if (fneq (vct-ref d1 i) 1.0)
		  (begin
		    (snd-display ";snd-spectrum (1.0) [~D: ~D]: ~A?" i size (vct-ref d1 i))
		    (break))))))

	 (set! d1 (snd-spectrum d0 rectangular-window))
	 (if (fneq (vct-ref d1 0) 1.0)
	     (snd-display ";snd-spectrum back (1.0 ~D): ~A?" size (vct-ref d1 0)))
	 (call-with-current-continuation
	  (lambda (break)
	    (do ((i 1 (1+ i)))
		((= i (/ size 2)))
	      (if (fneq (vct-ref d1 i) 0.0)
		  (begin
		    (snd-display ";snd-spectrum (0.0) [~D: ~D]: ~A?" i size (vct-ref d1 i))
		    (break))))))
	      
	 (set! d1 (snd-spectrum d0 rectangular-window size #f)) ; dB (0.0 = max)
	 (call-with-current-continuation
	  (lambda (break)
	    (do ((i 0 (1+ i)))
		((= i (/ size 2)))
	      (if (fneq (vct-ref d1 i) 0.0)
		  (begin
		    (snd-display ";snd-spectrum dB (0.0) [~D: ~D]: ~A?" i size (vct-ref d1 i))
		    (break)))))))
       (list 8 16))

      (for-each
       (lambda (len)
	 (let ((rl (make-vct len))
	       (xrl (make-vct len))
	       (len2 (/ len 2)))
	   (vct-fill! rl 1.0)
	   (vct-fill! xrl 1.0)
	   (snd-transform fourier-transform rl)
	   (snd-transform fourier-transform xrl #t)
	   (call-with-current-continuation
	    (lambda (break)
	      (do ((i 0 (1+ i)))
		  ((= i len2))
		(if (fneq (vct-ref rl i) (vct-ref xrl i))
		    (begin
		      (snd-display ";flat fft: ~A at ~A: ~A ~A" len i (vct-ref rl i) (vct-ref xrl i))
		      (break))))))
	   (if (fneq (vct-ref rl 0) (* len len)) (snd-display ";~A at 0: ~A" len (vct-ref rl 0)))
	   (vct-set! rl 0 0.0)
	   (if (> (vct-peak rl) .001) (snd-display ";~A impulse: ~A" len (vct-peak rl)))))
       (list 16 128 512 1024))
      
      (for-each
       (lambda (len)
	 (let ((rl (make-vct len))
	       (xrl (make-vct len))
	       (len2 (/ len 2)))
	   (vct-set! rl len2 1.0)
	   (vct-set! xrl len2 1.0)
	   (snd-transform fourier-transform rl)
	   (snd-transform fourier-transform xrl #t)
	   (call-with-current-continuation
	    (lambda (break)
	      (do ((i 0 (1+ i)))
		  ((= i len2))
		(if (fneq (vct-ref rl i) (vct-ref xrl i))
		    (begin
		      (snd-display ";impulse fft: ~A at ~A: ~A ~A" len i (vct-ref rl i) (vct-ref xrl i))
		      (break))))))
	   (if (fneq (vct-ref rl 0) 1.0) (snd-display ";flat ~A at 0: ~A" len (vct-ref rl 0)))))
       (list 16 128 512 1024))
      
      (for-each
       (lambda (len)
	 (let ((rl (make-vct len))
	       (xrl (make-vct len))
	       (len2 (/ len 2)))
	   (do ((i 0 (1+ i)))
	       ((= i len))
	     (let ((val (random 1.0)))
	       (vct-set! rl i val)
	       (vct-set! xrl i val)))
	   (snd-transform fourier-transform rl)
	   (vct-scale! rl (/ 1.0 len))
	   (snd-transform fourier-transform xrl #t)
	   (vct-scale! xrl (/ 1.0 len))
	   (call-with-current-continuation
	    (lambda (break)
	      (do ((i 0 (1+ i)))
		  ((= i len2))
		(if (fneq (vct-ref rl i) (vct-ref xrl i))
		    (begin
		      (snd-display ";random fft: ~A at ~A: ~A ~A" len i (vct-ref rl i) (vct-ref xrl i))
		      (break))))))))
       (list 16 128 512 1024 4096))
      
      (for-each
       (lambda (len)
	 (let ((rl (make-vct len))
	       (xrl (make-vct len))
	       (len2 (/ len 2)))
	   (do ((i 0 (1+ i)))
	       ((= i len))
	     (let ((val (sin (/ (* 2.0 10 3.14159 i) len))))
	       (vct-set! rl i val)
	       (vct-set! xrl i val)))
	   (snd-transform fourier-transform rl)
	   (vct-scale! rl (/ 1.0 len))
	   (snd-transform fourier-transform xrl #t)
	   (vct-scale! xrl (/ 1.0 len))
	   (call-with-current-continuation
	    (lambda (break)
	      (do ((i 0 (1+ i)))
		  ((= i len2))
		(if (fneq (vct-ref rl i) (vct-ref xrl i))
		    (begin
		      (snd-display ";random fft: ~A at ~A: ~A ~A" len i (vct-ref rl i) (vct-ref xrl i))
		      (break))))))))
       (list 16 128 512 1024 4096))

      ;;; -------- autocorrelation

      (for-each
       (lambda (len)
	 (let ((rl (make-vct len))
	       (rla (make-vct len))
	       (xim (make-vct len))
	       (xrl (make-vct len))
	       (len2 (/ len 2)))
	   (vct-set! rl 0 1.0)
	   (vct-set! rl 4 1.0)
	   (snd-transform autocorrelation rl 0) ; this is exactly the same as (autocorrelate rl)
	   (if (fneq (vct-ref rl 0) 2.0) (snd-display ";autocorrelation ~A 0: ~A" len (vct-ref rl 0)))
	   (if (fneq (vct-ref rl 4) 1.0) (snd-display ";autocorrelation ~A 4: ~A" len (vct-ref rl 4)))

	   (vct-set! rla 0 1.0)
	   (vct-set! rla 4 1.0)
	   (autocorrelate rla)
	   (if (fneq (vct-ref rla 0) 2.0) (snd-display ";autocorrelate ~A 0: ~A" len (vct-ref rla 0)))
	   (if (fneq (vct-ref rla 4) 1.0) (snd-display ";autocorrelate ~A 4: ~A" len (vct-ref rla 4)))
	   
	   (vct-set! xrl 0 1.0)
	   (vct-set! xrl 4 1.0)
	   (mus-fft xrl xim len 1)
	   (vct-set! xrl 0 (* (vct-ref xrl 0) (vct-ref xrl 0)))
	   (vct-set! xrl len2 (* (vct-ref xrl len2) (vct-ref xrl len2)))
	   (do ((i 1 (1+ i))
		(j (1- len) (1- j)))
	       ((= i len2))
	     (vct-set! xrl i (+ (* (vct-ref xrl i) (vct-ref xrl i)) (* (vct-ref xim j) (vct-ref xim j))))
	     (vct-set! xrl j (vct-ref xrl i)))
	   (vct-scale! xim 0.0)
	   (mus-fft xrl xim len -1)
	   (vct-scale! xrl (/ 1.0 len))
	   
	   (call-with-current-continuation
	    (lambda (break)
	      (do ((i 0 (1+ i)))
		  ((= i len2))
		(if (fneq (vct-ref rl i) (vct-ref xrl i))
		    (begin
		      (snd-display ";~A at ~A: ~A ~A" len i (vct-ref rl i) (vct-ref xrl i))
		      (break))))))
	   (vct-set! rl 0 0.0)
	   (vct-set! rl 4 0.0)
	   (if (> (vct-peak rl) .001) (snd-display ";autocorrelate peak: ~A" (vct-peak rl)))))
       (list 16 64 256 512))
      
      (for-each
       (lambda (len)
	 (let* ((rl (make-vct len))
		(xim (make-vct len))
		(xrl (make-vct len))
		(len2 (/ len 2))
		(ones (max 2 (random len2))))
	   (do ((i 0 (1+ i)))
	       ((= i ones))
	     (let ((val (random 1.0))
		   (ind (random len)))
	       (vct-set! rl ind val)
	       (vct-set! xrl ind val)))
	   (snd-transform autocorrelation rl 0)
	   (mus-fft xrl xim len 1)
	   (vct-set! xrl 0 (* (vct-ref xrl 0) (vct-ref xrl 0)))
	   (vct-set! xrl len2 (* (vct-ref xrl len2) (vct-ref xrl len2)))
	   (do ((i 1 (1+ i))
		(j (1- len) (1- j)))
	       ((= i len2))
	     (vct-set! xrl i (+ (* (vct-ref xrl i) (vct-ref xrl i)) (* (vct-ref xim j) (vct-ref xim j))))
	     (vct-set! xrl j (vct-ref xrl i)))
	   (vct-scale! xim 0.0)
	   (mus-fft xrl xim len -1)
	   (vct-scale! xrl (/ 1.0 len))
	   (call-with-current-continuation
	    (lambda (break)
	      (do ((i 0 (1+ i)))
		  ((= i len2))
		(if (fneq (vct-ref rl i) (vct-ref xrl i))
		    (begin
		      (snd-display ";random ~A at ~A: ~A ~A" len i (vct-ref rl i) (vct-ref xrl i))
		      (break))))))))
       (list 16 64 256 512))

      ;; -------- cepstrum

      (for-each
       (lambda (len)
	 (let ((rl (make-vct len))
	       (xim (make-vct len))
	       (xrl (make-vct len))
	       (len2 (/ len 2)))
	   (vct-set! rl 0 1.0)
	   (vct-set! rl 4 1.0)
	   (snd-transform cepstrum rl 0)
	   (vct-set! xrl 0 1.0)
	   (vct-set! xrl 4 1.0)
	   (mus-fft xrl xim len 1)
	   (vct-set! xrl 0 (* (vct-ref xrl 0) (vct-ref xrl 0)))
	   (vct-set! xrl len2 (* (vct-ref xrl len2) (vct-ref xrl len2)))
	   (do ((i 1 (1+ i))
		(j (1- len) (1- j)))
	       ((= i len2))
	     (let ((val (+ (* (vct-ref xrl i) (vct-ref xrl i)) (* (vct-ref xim j) (vct-ref xim j)))))
	       (if (> val .0000001)
		   (set! val (log (sqrt val)))
		   (set! val -10.0))
	       (vct-set! xrl j val)
	       (vct-set! xrl i val)))
	   (vct-scale! xim 0.0)
	   (mus-fft xrl xim len -1)
	   (let ((fscl 0.0))
	     (do ((i 0 (1+ i)))
		 ((= i len))
	       (set! fscl (max fscl (abs (vct-ref xrl i)))))
	     (vct-scale! xrl (/ 1.0 fscl)))
	   (call-with-current-continuation
	    (lambda (break)
	      (do ((i 0 (1+ i)))
		  ((= i len2))
		(if (fneq (vct-ref rl i) (vct-ref xrl i))
		    (begin
		      (snd-display ";~A at ~A: ~A ~A" len i (vct-ref rl i) (vct-ref xrl i))
		      (break))))))))
       (list 16 64 256 512))


      ;; -------- walsh

      (set! d0 (make-vct 8))
      (vct-set! d0 0 1.0)
      (snd-transform walsh-transform d0)
      (if (not (vequal d0 (vct 1.000 1.000 1.000 1.000 1.000 1.000 1.000 1.000)))
	  (snd-display ";walsh 1: ~A" d0))
      (snd-transform walsh-transform d0)
      (if (not (vequal d0 (vct 8.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000)))
	  (snd-display ";walsh -1: ~A" d0))
      
      (set! d0 (make-vct 8))
      (vct-set! d0 1 1.0)
      (snd-transform walsh-transform d0)
      (if (not (vequal d0 (vct 1.000 -1.000 1.000 -1.000 1.000 -1.000 1.000 -1.000)))
	  (snd-display ";walsh 2: ~A" d0))
      (snd-transform walsh-transform d0)
      (if (not (vequal d0 (vct 0.000 8.000 0.000 0.000 0.000 0.000 0.000 0.000)))
	  (snd-display ";walsh -2: ~A" d0))

      (set! d0 (make-vct 8))
      (vct-set! d0 1 1.0)
      (vct-set! d0 0 0.5)
      (snd-transform walsh-transform d0)
      (if (not (vequal d0 (vct 1.500 -0.500 1.500 -0.500 1.500 -0.500 1.500 -0.500)))
	  (snd-display ";walsh 3: ~A" d0))
      (snd-transform walsh-transform d0)
      (if (not (vequal d0 (vct 4.000 8.000 0.000 0.000 0.000 0.000 0.000 0.000)))
	  (snd-display ";walsh -3: ~A" d0))

      (set! d0 (make-vct 8))
      (vct-map! d0 (lambda () (random 1.0)))
      (set! d1 (vct-copy d0))
      (snd-transform walsh-transform d0)
      (snd-transform walsh-transform d0)
      (vct-scale! d0 (/ 1.0 8.0))
      (if (not (vequal d0 d1))
	  (snd-display ";walsh 4: ~A ~A" d0 d1))


      ;; -------- haar
      
      (set! d0 (make-vct 8))
      (vct-set! d0 2 1.0)
      (snd-transform haar-transform d0)
      (if (not (vequal d0 (vct 0.354 0.354 -0.500 0.000 0.000 0.707 0.000 0.000)))
	  (snd-display ";haar 1: ~A" d0))
      (inverse-haar d0)
      (if (not (vequal d0 (vct 0.000 0.000 1.000 0.000 0.000 0.000 0.000 0.000)))
	  (snd-display ";inverse haar 1: ~A" d0))

      (set! d0 (make-vct 8))
      (vct-set! d0 0 1.0)
      (snd-transform haar-transform d0)
      (if (not (vequal d0 (vct 0.354 0.354 0.500 0.000 0.707 0.000 0.000 0.000)))
	  (snd-display ";haar 2: ~A" d0))
      (inverse-haar d0)
      (if (not (vequal d0 (vct 1.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000)))
	  (snd-display ";inverse haar 2: ~A" d0))

      (set! d0 (make-vct 8))
      (set! d1 (make-vct 8))
      (do ((i 0 (1+ i)))
	  ((= i 8))
	(vct-set! d0 i (random 1.0))
	(vct-set! d1 i (vct-ref d0 i)))
      (snd-transform haar-transform d0)
      (inverse-haar d0)
      (if (not (vequal d0 d1))
	  (snd-display ";inverse haar 3: ~A ~A" d0 d1))


      ;; --------- wavelet

      (for-each 
       (lambda (size)
	 (do ((i 0 (1+ i)))
	     ((= i 20))
	   (let ((d1 (make-vct size))
		 (d2 (make-vct size)))
	     (vct-set! d1 2 1.0)
	     (vct-set! d2 2 1.0)
	     (wavelet d1 size 0 pwt (list-ref wts i))
	     (snd-transform wavelet-transform d2 i)
	     (if (not (vequal d1 d2))
		 (snd-display ";wavelet ~D: ~A ~A" i d1 d2))
	     (wavelet d2 size -1 pwt (list-ref wts i))
	     (vct-fill! d1 0.0)
	     (vct-set! d1 2 1.0)
	     (if (not (vequal d1 d2))
		 (if (or (= i 9) (= i 10))
		     (begin
		       (vct-set! d2 2 0.0)
		       (if (> (vct-peak d2) .1)
			   (snd-display ";inverse wavelet ~D: ~A ~A" i d1 d2)))
		     (if (> i 14)
			 (let ((pk (vct-ref d2 2)))
			   (vct-set! d2 2 0.0)
			   (if (> (vct-peak d2) pk)
			       (snd-display ";inverse wavelet ~D: ~A ~A" i d1 d2)))
			 (snd-display ";inverse wavelet ~D: ~A ~A" i d1 d2))))))
	 (do ((i 0 (1+ i)))
	     ((= i 9))
	   (let ((d1 #f)
		 (d2 (make-vct size)))
	     (vct-map! d2 (lambda () (random 1.0)))
	     (set! d1 (vct-copy d2))
	     (snd-transform wavelet-transform d2 i)
	     (wavelet d2 size -1 pwt (list-ref wts i))
	     (if (not (vequal d1 d2))
		 (snd-display ";random wavelet ~D: ~A ~A" i d1 d2)))))
       (list 16 64))


      ;; -------- hadamard (assuming blindly here that it should be its own inverse)

      (set! d0 (make-vct 8))
      (vct-set! d0 2 1.0)
      (snd-transform hadamard-transform d0)
      (if (not (vequal d0 (vct 1.000 1.000 -1.000 -1.000 -1.000 -1.000 1.000 1.000)))
	  (snd-display ";hadamard 1: ~A?" d0))
      (snd-transform hadamard-transform d0)
      (vct-scale! d0 (/ 1.0 8.0))
      (if (not (vequal d0 (vct 0.000 0.000 1.000 0.000 0.000 0.000 0.000 0.000)))
	  (snd-display ";hadamard -1: ~A?" d0))

      (let ((d1 #f)
	    (d2 (make-vct 64)))
	(vct-map! d2 (lambda () (random 1.0)))
	(set! d1 (vct-copy d2))
	(snd-transform hadamard-transform d2)
	(snd-transform hadamard-transform d2)
	(vct-scale! d2 (/ 1.0 64.0))
	(if (not (vequal d1 d2))
	    (snd-display ";random hadamard: ~A ~A" d1 d2)))

      (if have-libguile-so
	  (begin
	    (system "cc gsl-ex.c -c")
	    (system "ld -shared gsl-ex.o -o gsl-ex.so -lguile")
	    (let ((handle (dlopen (string-append home-dir "/cl/gsl-ex.so"))))
	      (dlinit handle "init_gsl_j0")
	      (if (fneq (j0 1.0) 0.765) (snd-display ";gsl loader test: ~A" (j0 1.0))))))

      (set! (max-transform-peaks) 100)
      (let ((ind (open-sound "oboe.snd"))
	    (ftype (add-transform "low-pass" "filtered" 0.0 1.0
				  (lambda (len fd)
				    (let ((flt (make-fir-filter :order 8 
								:xcoeffs (let ((v1 (make-vct 8)))
									   (vct-fill! v1 .0125)
									   v1))))
				      (vct-map! 
				       (make-vct len) 
				       (lambda () 
					 (fir-filter flt (read-sample fd)))))))))
	(set! (transform-normalization) dont-normalize)
	(set! (transform-type ind 0) ftype)
	(set! (transform-size ind 0) 16)
	(set! (transform-graph-type ind 0) graph-once)
	(set! (transform-graph? ind 0) #t)
	(set! (cursor ind 0) 12000)
	(let* ((samps (transform-samples->vct ind 0)))
	  (if (fneq (vct-ref samps 2) .002)
	      (snd-display ";add-transform filtering (~A): ~A" ftype samps)))
	(save-state "s61.scm")
	(delete-file "s61.scm") ; added transform needs to be saved somehow?
	(close-sound ind))

      (let ((ind (open-sound "oboe.snd"))
	    (ftype (add-transform "abs-it" "absit" 0.0 1.0
				  (lambda (len fd)
				    (vct-map! 
				     (make-vct len) 
				     (lambda () 
				       (read-sample fd)))))))
	(set! (transform-normalization) dont-normalize)
	(set! (transform-type ind 0) ftype)
	(set! (transform-size ind 0) 256)
	(set! (transform-graph-type ind 0) graph-once)
	(set! (transform-graph? ind 0) #t)
	(set! (cursor ind 0) 12000)
	(let* ((samps (transform-samples->vct ind 0))
	       (orig (channel->vct (left-sample ind 0) 256)))
	  (call-with-current-continuation
	   (lambda (break)
	     (do ((i 0 (1+ i)))
		 ((= i 256))
	       (if (fneq (vct-ref samps i) (vct-ref orig i))
		   (begin
		     (snd-display ";add-transform same (~A): ~D ~A ~A" ftype i (vct-ref samps i) (vct-ref orig i))
		     (break)))))))
	(set! (dot-size ind 0) 60)
	(set! (graph-style ind 0) graph-lollipops)
	(set! (x-bounds) (list 2.579 2.580))
	(update-time-graph)
	(close-sound ind))

      (let ((ind1 (open-sound "oboe.snd")))
	(set! (time-graph-style ind1 0) graph-lollipops)
	(graph->ps "aaa.eps")
	(set! (transform-graph? ind1 0) #t)
	(set! (transform-graph-type ind1 0) graph-as-sonogram)
	(set! (transform-size) 256)
	(update-transform-graph)
	(let ((size (transform-samples-size ind1 0)))
	  (if (or (number? size)
		  (not (= (length size) 3)))
	      (snd-display ";transform-samples-size of sonogram: ~A" size)))
	(graph->ps "aaa.eps")
	(catch #t
	       (lambda ()
		 (let ((ax (axis-info ind1 0 transform-graph)))
		   (if (not ax) (snd-display ";axis-info transform-graph?"))
		   (if (and (provided? 'xm) (provided? 'snd-debug))
		       (let ((cwid (car (channel-widgets ind1 0))))
			 (focus-widget cwid)
			 (click-event cwid 0 0 
				      (inexact->exact (* .5 (+ (list-ref ax 10) (list-ref ax 12))))
				      (inexact->exact (* .5 (+ (list-ref ax 11) (list-ref ax 13)))))
			 (force-event)))))
	       (lambda args args))
	(let ((old-colormap (colormap)))
	  (set! (colormap) -1) ; black-and-white
	  (update-transform-graph)
	  (set! (transform-graph-type ind1 0) graph-as-spectrogram)
	  (update-transform-graph)
	  (graph->ps "aaa.eps")
	  (catch #t
		 (lambda ()
		   (let ((ax (axis-info ind1 0 transform-graph)))
		     (if (not ax) (snd-display ";axis-info transform-graph?"))
		     (if (and (provided? 'xm) (provided? 'snd-debug))
			 (let ((cwid (car (channel-widgets ind1 0))))
			   (focus-widget cwid)
			   (click-event cwid 0 0 
					(inexact->exact (* .5 (+ (list-ref ax 10) (list-ref ax 12))))
					(inexact->exact (* .5 (+ (list-ref ax 11) (list-ref ax 13)))))
			   (force-event)))))
		 	       (lambda args args))
	  (set! (colormap) old-colormap))
	(close-sound ind1))

	(let* ((ind (new-sound "test.snd" mus-next mus-bfloat)))
	  (pad-channel 0 1000)
	  (set! (transform-graph-type ind 0) graph-once)
	  (set! (show-transform-peaks ind 0) #t)
	  (set! (fft-log-magnitude ind 0) #t)
	  (set! (fft-log-frequency ind 0) #f)
	  (set! (transform-graph? ind 0) #t)
	  (set! (x-bounds) (list 0.0 .04))
	  (update-time-graph)
	  (update-transform-graph)
	  (close-sound ind))

	(let* ((ind (open-sound "oboe.snd"))
	       (size 8192)
	       (v (channel->vct 1000 size ind 0)))
	  (set! (show-listener) #f)
	  (set! (window-height) 800)
	  (set! (lisp-graph? ind 0) #t)
	  (graph v "biggy" 0.0 1.0 0.0 1.0 ind 0)
	  (set! (transform-graph-type ind 0) graph-once)
	  (set! (show-transform-peaks ind 0) #t)
	  (set! (fft-log-magnitude ind 0) #t)
	  (set! (fft-log-frequency ind 0) #f)
	  (set! (transform-graph? ind 0) #t)
	  (graph->ps "aaa.eps")
	  (set! (x-bounds) (list 0.0 1.0))
	  (set! (max-transform-peaks ind 0) 3)
	  (update-time-graph)
	  (update-transform-graph)
	  (update-lisp-graph)
	  (scale-by 0.0)
	  (update-time-graph)
	  (update-transform-graph)
	  (undo)
	  (set! (transform-graph-type ind 0) graph-as-sonogram)
	  (set! (fft-log-magnitude ind 0) #f)
	  (update-transform-graph)
	  (graph->ps "aaa.eps")
	  (set! (with-gl) #f)
	  (set! (spectro-cutoff ind 0) .2)
	  (set! (transform-graph-type ind 0) graph-as-spectrogram)
	  (update-transform-graph)
	  (update-lisp-graph)
	  (graph->ps "aaa.eps")
	  (set! (show-listener) #t)
	  (close-sound ind))

      ))
      ))



;;; ---------------- test 21: goops ----------------

(define (gcomb gen input)
  (gen input))	

(define (make-gcomb length feedback a0 a1)
  (let ((dly (make-delay length))
        (flt (make-one-zero a0 a1)))
    (lambda (input)
      (dly (+ input (* (flt (tap dly)) feedback))))))

(if (or full-test (= snd-test 21) (and keep-going (<= snd-test 21)))
    (begin
      (if (procedure? test-hook) (test-hook 21))
      (load "goopsnd.scm")
      (let ((f0 (make fcmb :length 4 :feedback 0.7))
	    (g0 (make-gcomb 4 0.7 0.5 0.5)))
	(fcomb f0 1.0)
	(gcomb g0 1.0)
	(do ((i 0 (1+ i)))
	    ((= i 20))
	  (let ((fval (fcomb f0 0.0))
		(gval (gcomb g0 0.0)))
	    (if (fneq fval gval)
		(snd-display ";fcomb at ~A: ~A ~A?" i fval gval)))))))



;;; ---------------- test 22: run ----------------

(defmacro time-it (a) 
  `(let ((start (get-internal-real-time))) 
   ,a 
   (- (get-internal-real-time) start)))

(define fm-violin-opt
  (lambda* (startime dur frequency amplitude #:key
	    (fm-index 1.0)
	    (amp-env '(0 0  25 1  75 1  100 0))
	    (periodic-vibrato-rate 5.0) 
	    (random-vibrato-rate 16.0)
	    (periodic-vibrato-amplitude 0.0025) 
	    (random-vibrato-amplitude 0.005)
	    (noise-amount 0.0) 
	    (noise-freq 1000.0)
	    (ind-noise-freq 10.0) 
	    (ind-noise-amount 0.0)
	    (amp-noise-freq 20.0) 
	    (amp-noise-amount 0.0)
	    (gliss-env '(0 0  100 0)) 
	    (glissando-amount 0.0) 
	    (fm1-env '(0 1  25 .4  75 .6  100 0))  
	    (fm2-env '(0 1  25 .4  75 .6  100 0)) 
	    (fm3-env '(0 1  25 .4  75 .6  100 0))
	    (fm1-rat 1.0) 
	    (fm2-rat 3.0)	 
	    (fm3-rat 4.0)                    
	    (fm1-index #f) 
	    (fm2-index #f) 
	    (fm3-index #f)
	    (degree 0)
	    (distance 1.0)
	    (reverb-amount 0.01)
	    (base 1.0)
	    #:allow-other-keys)
    (let* ((pi 3.141592653589793)
	   (beg (floor (* startime (mus-srate))))
	   (len (floor (* dur (mus-srate))))
	   (end (+ beg len))
	   (frq-scl (hz->radians frequency))
	   (maxdev (* frq-scl fm-index))
	   (logfreq (log frequency))
	   (sqrtfreq (sqrt frequency))
	   (index1 (or fm1-index (min pi (* maxdev (/ 5.0 logfreq)))))
	   (index2 (or fm2-index (min pi (* maxdev 3.0 (/ (- 8.5 logfreq) (+ 3.0 (* frequency .001)))))))
	   (index3 (or fm3-index (min pi (* maxdev (/ 4.0 sqrtfreq)))))
	   (easy-case (and (zero? noise-amount)
			   (equal? fm1-env fm2-env)
			   (equal? fm1-env fm3-env)
			   (= fm1-rat (floor fm1-rat))
			   (= fm2-rat (floor fm2-rat))
			   (= fm3-rat (floor fm3-rat))))
	   (coeffs (and easy-case
			(partials->polynomial
			 (list fm1-rat index1
			       (floor (/ fm2-rat fm1-rat)) index2
			       (floor (/ fm3-rat fm1-rat)) index3))))
	   (norm (if easy-case 1.0 index1))
	   (carrier (make-oscil frequency))
	   (fmosc1 (make-oscil (* fm1-rat frequency)))
	   (fmosc2 (if easy-case #f (make-oscil (* fm2-rat frequency))))
	   (fmosc3 (if easy-case #f (make-oscil (* fm3-rat frequency))))
	   (ampf  (make-env amp-env :scaler amplitude :base base :duration dur))
	   (indf1 (make-env fm1-env norm :duration dur))
	   (indf2 (if easy-case #f (make-env fm2-env index2 :duration dur)))
	   (indf3 (if easy-case #f (make-env fm3-env index3 :duration dur)))
	   (frqf (make-env gliss-env (* glissando-amount frq-scl) :duration dur))
	   (pervib (make-triangle-wave periodic-vibrato-rate (* periodic-vibrato-amplitude frq-scl)))
	   (ranvib (make-rand-interp random-vibrato-rate (* random-vibrato-amplitude frq-scl)))
	   (fm-noi (if (not (= 0.0 noise-amount))
		       (make-rand noise-freq (* pi noise-amount))
		       #f))
	   (ind-noi (if (and (not (= 0.0 ind-noise-amount)) (not (= 0.0 ind-noise-freq)))
			(make-rand-interp ind-noise-freq ind-noise-amount)
			#f))
	   (amp-noi (if (and (not (= 0.0 amp-noise-amount)) (not (= 0.0 amp-noise-freq)))
			(make-rand-interp amp-noise-freq amp-noise-amount)
			#f))
	   ;(locs (make-locsig degree distance reverb-amount *output* *reverb* (mus-channels *output*)))
	   (data (make-vct (1+ (- end beg)))))
      (if (or (not easy-case) ind-noi amp-noi (> noise-amount 0.0))
	  (vct-map! data
		    (lambda () 
		      (let* ((fuzz (if (> noise-amount 0.0) (rand fm-noi) 0.0))
			     (ind-fuzz (if ind-noi (+ 1.0 (rand-interp ind-noi)) 1.0))
			     (amp-fuzz (if amp-noi (+ 1.0 (rand-interp amp-noi)) 1.0))
			     (vib (+ (env frqf) (triangle-wave pervib) (rand-interp ranvib)))
			     (modulation (if easy-case
					     (* (env indf1) 
						(polynomial coeffs (oscil fmosc1 vib)))
					     (+ (* (env indf1) (oscil fmosc1 (+ (* fm1-rat vib) fuzz)))
						(* (env indf2) (oscil fmosc2 (+ (* fm2-rat vib) fuzz)))
						(* (env indf3) (oscil fmosc3 (+ (* fm3-rat vib) fuzz)))))))
			(* (env ampf) amp-fuzz
			   (oscil carrier (+ vib (* ind-fuzz modulation)))))))
	  (vct-map! data
		    (lambda () 
		      (let* ((vib (+ (env frqf) (triangle-wave pervib) (rand-interp ranvib)))
			     (modulation (* (env indf1) (polynomial coeffs (oscil fmosc1 vib)))))
			(* (env ampf) (oscil carrier (+ vib modulation))))))))))

(if (or full-test (= snd-test 22) (and keep-going (<= snd-test 22)))
    (begin

      (define (itst form result)
	(let ((val (run-eval form)))
	  (if (not (equal? val result)) (snd-display ";~A -> ~A (~A)" form val result))))
      
      (define (itsta form arg result)
	(let ((val (run-eval form arg)))
	  (if (not (equal? val result)) (snd-display ";~A -> ~A (~A)" form val result))))
      
      (define (btst form result)
	(let ((val (run-eval form)))
	  (if (not (eq? val result)) (snd-display ";~A -> ~A (~A)" form val result))))
      
      (define (btsta form arg result)
	(let ((val (run-eval form arg)))
	  (if (not (eq? val result)) (snd-display ";~A -> ~A (~A)" form val result))))
      
      (define (ftst form result)
	(let ((val (run-eval form)))
	  (if (fneq val result) (snd-display ";~A -> ~A (~A)" form val result))))
      
      (define (ftsta form arg result)
	(let ((val (run-eval form arg)))
	  (if (fneq val result) (snd-display ";~A -> ~A (~A)" form val result))))
      
      (define (etst form)
	(let ((tag (catch #t (lambda () (run-eval form)) (lambda args args))))
	  (if (or (not (list-p tag))
		  (not (eq? (car tag) 'cannot-parse)))
	      (snd-display ";~A -> ~A?" form tag))))
      
      (define (ctst form result)
	(let ((val (run-eval form)))
	  (if (not (char=? val result)) (snd-display ";~A -> ~A (~A)" form val result))))
      
      (define (ctsta form arg result)
	(let ((val (run-eval form arg)))
	  (if (not (char=? val result)) (snd-display ";~A -> ~A (~A)" form val result))))

      (define int-var 32)
      (define dbl-var 3.14)
      (define bool-var #t)
      (define lst-var '(0 1 2))
      
      (if (procedure? test-hook) (test-hook 22))
      (if (> (optimization) 0) (begin
      
      (ftsta '(lambda (y) (set! dbl-var 32.0) dbl-var) 0.0 32.0)
      (if (fneq dbl-var 32.0) (snd-display ";set! 1 dbl-var: ~A" dbl-var))
      (ftsta '(lambda (y) (set! dbl-var y) dbl-var) 0.5 0.5)
      (if (fneq dbl-var 0.5) (snd-display ";set! 2 dbl-var: ~A" dbl-var))
      
      (itsta '(lambda (y) (set! int-var 3) int-var) 0 3)
      (if (not (= int-var 3)) (snd-display ";set! 1 int-var: ~A" int-var))
      (itsta '(lambda (y) (set! int-var (inexact->exact y)) int-var) -2 -2)
      (if (not (= int-var -2)) (snd-display ";set! 2 int-var: ~A" int-var))
      
      (btsta '(lambda (y) (set! bool-var #f) bool-var) 0.0 #f)
      (if (not (eq? bool-var #f)) (snd-display ";set! 1 bool-var: ~A" bool-var))
      (btsta '(lambda (y) (set! bool-var (odd? y)) bool-var) 1 #t)
      (if (not (eq? bool-var #t)) (snd-display ";set! 2 bool-var: ~A" bool-var))
      
      (define (stst form result)
	(let ((val (run-eval form)))
	  (if (not (string=? val result)) (snd-display ";~A -> ~A (~A)" form val result))))

      (define (ststa form arg result)
	(let ((val (run-eval form arg)))
	  (if (not (string=? val result)) (snd-display ";~A -> ~A (~A)" form val result))))

      (set! int-var 32)
      (set! dbl-var 3.14)
      (set! bool-var #t)
      
      (itst '(* 2 3) 6)
      (itst '(* 2) 2)
      (itst '(* 2 0) 0)
      (itst '(* int-var 2) 64)
      (ftst '(* 2.0 2.5) 5.0)
      (ftst '(* -2.0 1.5 2.0) -6.0)
      (ftst '(* dbl-var 2.0) 6.28)
      (ftst '(* dbl-var int-var) (* 32 3.14))
      (ftsta '(lambda (y) y) 4.0 4.0)
      (ftsta '(lambda (y) (* 2 y)) 4.0 8.0)
      (ftsta '(lambda (y) (* 2.5 y)) 4.0 10.0)
      (ftsta '(lambda (y) (* y y)) 4.0 16.0)
      (ftsta '(lambda (y) (* y y 2)) 2.0 8.0)
      (ftsta '(lambda (y) (* y y 2 y)) 2.0 16.0)
      (ftsta '(lambda (y) (* y 2.0 y 0.5 y y)) 2.0 16.0)
      (ftsta '(lambda (y) (* y 1)) 4.0 4.0)
      (ftsta '(lambda (y) (* y 1.0)) 4.0 4.0)
      (itsta '(lambda (y) (* 2 (inexact->exact y))) 3.0 6)
      (itsta '(lambda (y) (* 2 (inexact->exact y) (inexact->exact (* 2 y)))) 3.0 36)
      (itsta '(lambda (y) (* 2 (inexact->exact y) (inexact->exact (* 2 y)) (inexact->exact y))) 2.0 32)
      (itst '(* 2 (* 3 (* 4))) 24)
      (ftsta '(lambda (y) (* y 3 2)) 1.5 9.0)
      (ftsta '(lambda (y) (* y y y y y y)) 2.0 64.0)
      (etst '(* #f))
      (etst '(* 2.0 "a string"))
      (etst '(* 2.0 1+2i))
      (itsta '(lambda (y) (* (inexact->exact y) 
			     (inexact->exact (+ y 1)) 
			     (inexact->exact y) 
			     (inexact->exact (+ y 2)) 
			     (inexact->exact (* y 2) )))
	     1 12)
      (itsta '(lambda (y) (+ (inexact->exact y) 
			     (inexact->exact (+ y 1)) 
			     (inexact->exact y) 
			     (inexact->exact (+ y 2)) 
			     (inexact->exact (* y 2) )))
	     1 9)
      
      (itst '(+ 2 3) 5)
      (itst '(+ 2) 2)
      (itst '(+ 2 0) 2)
      (ftst '(+ 3.4) 3.4)
      (ftst '(+ 2.0 2.5) 4.5)
      (ftst '(+ -2.0 1.5 2.0) 1.5)
      (ftsta '(lambda (y) (+ 2 y)) 4.0 6.0)
      (ftsta '(lambda (y) (+ 2.5 y)) 4.0 6.5)
      (ftsta '(lambda (y) (+ y y)) 4.0 8.0)
      (ftsta '(lambda (y) (+ y y 2)) 2.0 6.0)
      (ftsta '(lambda (y) (+ y y 2 y)) 2.0 8.0)
      (ftsta '(lambda (y) (+ y 2.0 y 0.5 y y)) 2.0 10.5)
      (ftsta '(lambda (y) (+ y 1)) 4.0 5.0)
      (ftsta '(lambda (y) (+ y 1.0)) 4.0 5.0)
      (itsta '(lambda (y) (+ 2 (inexact->exact y))) 3.0 5)
      (itsta '(lambda (y) (+ 2 (inexact->exact y) (inexact->exact (+ 2 y)))) 3.0 10)
      (itsta '(lambda (y) (+ 2 (inexact->exact y) (inexact->exact (+ 2 y)) (inexact->exact y))) 2.0 10)
      (itst '(+ 2 (+ 3 (+ 4))) 9)
      (ftsta '(lambda (y) (+ y 3 2)) 1.5 6.5)
      (ftsta '(lambda (y) (+ y y y y y y)) 2.0 12.0)
      (ftst '(+ dbl-var 2) (+ dbl-var 2))
      (itst '(+ int-var 2) (+ int-var 2))
      (etst '(+ #t))
      (etst '(+ 2 "oops"))
      
      (itst '(* (+ 1 2) (+ 3 4)) 21)
      (itst '(+ (* 2 3) (* 4 5)) 26)
      
      (itst '(- 2 3) -1)
      (itst '(- 2) -2)
      (itst '(- 2 0) 2)
      (ftst '(- 2 2.5) -.5)
      (ftst '(- 2 0.5 2) -.5)
      (ftst '(- 2.0 0.5 2) -.5)
      (ftst '(- 2.0 2.5) -.5)
      (ftst '(- 2.5 2) .5)
      (ftst '(- -2.0 1.5 2.0) -5.5)
      (ftst '(- 2.0) -2.0)
      (itst '(- 0 0) 0)
      (itst '(- 1 0) 1)
      (itst '(- 0 1) -1)
      (ftsta '(lambda (y) (- 2 y)) 4.0 -2.0)
      (ftsta '(lambda (y) (- 2.5 y)) 4.0 -1.5)
      (ftsta '(lambda (y) (- y y)) 4.0 0.0)
      (ftsta '(lambda (y) (- y y 2)) 2.0 -2.0)
      (ftsta '(lambda (y) (- y y 2 y)) 2.0 -4.0)
      (ftsta '(lambda (y) (- y 2.0 y 0.5 y y)) 2.0 -6.5)
      (ftsta '(lambda (y) (- y 1)) 4.0 3.0)
      (ftsta '(lambda (y) (- y 1.0)) 4.0 3.0)
      (itsta '(lambda (y) (- 2 (inexact->exact y))) 3.0 -1)
      (itsta '(lambda (y) (- (inexact->exact y))) 1.0 -1)
      (itsta '(lambda (y) (- 2 (inexact->exact y) (inexact->exact (- 2 y)))) 3.0 0)
      (itsta '(lambda (y) (- 2 (inexact->exact y) (inexact->exact (- 2 y)) (inexact->exact y))) 2.0 -2)
      (itst '(- 2 (- 3 (- 4))) -5)
      (ftsta '(lambda (y) (- y 3 2)) 1.5 -3.5)
      (ftsta '(lambda (y) (- y 0)) 1.0 1.0)
      (ftsta '(lambda (y) (- y 0 1)) 1.0 0.0)
      (ftsta '(lambda (y) (- 0 y)) 1.0 -1.0)
      (ftsta '(lambda (y) (- 0.0 y)) 1.0 -1.0)
      (ftsta '(lambda (y) (- 0.0 y 1)) 1.0 -2.0)
      (ftsta '(lambda (y) (- y y y y y y)) 2.0 -8.0)
      (etst '(- "hi"))
      (etst '(- *))
      
      (ftst '(/ 2.0) 0.5)
      (ftst '(/ 2) 0.5)
      (ftst '(/ 2.0 0.5) 4.0)
      (ftst '(/ 2.0 0.5 2.0) 2.0)
      (ftst '(/ 1.0) 1.0)
      (ftst '(/ 1) 1.0)
      (ftst '(/ 1.0 2) 0.5)
      (ftst '(/ 1 2) 0.5)
      (ftst '(/ 2 2) 1.0)
      (ftst '(/ 2 1 2 5) .2)
      (ftst '(/ 2 1.0 2.0 5) .2)
      (ftsta '(lambda (y) (/ 2 y)) 4.0 0.5)
      (ftsta '(lambda (y) (/ 2.0 y)) 4.0 0.5)
      (ftsta '(lambda (y) (/ y y)) 4.0 1.0)
      (ftsta '(lambda (y) (/ y)) 4.0 0.25)
      (itsta '(lambda (y) (inexact->exact (/ y))) 0.25 4)
      (itsta '(lambda (y) (inexact->exact (/ y 2.0))) 4.0 2)
      (ftsta '(lambda (y) (/ y (* 2 y))) 2.0 0.5)
      (ftsta '(lambda (y) (/ y (* 2 y) y)) 2.0 0.25)
      (ftsta '(lambda (y) (/ y (* 2 y) 2 y)) 2.0 0.125)
      (ftsta '(lambda (y) (/ y (* 2 y) (+ y y) y 2)) 2.0 0.03125)
      (itst '(inexact->exact (/ 0.5)) 2)
      (itst '(inexact->exact (/ 0.5 0.5)) 1)
      (itst '(inexact->exact (/ 3)) 0)
      (itst '(inexact->exact (/ 3 1.5 2)) 1)
      (etst '(/ #f))
      (etst '(/ 1.0 2 "oops" 2))
      (ftst '(/ 2.0 1.0) 2.0)
      (ftst '(let ((a 3.0)) (/ a 1.0)) 3.0)
      (ftst '(let ((a 3.0)) (/ a 0.5)) 6.0)
      (ftst '(let ((a 3.0)) (/ a (* 2 0.5))) 3.0)
      (ftst '(/ int-var 2) 16.0)
      (ftst '(/ 32 int-var) 1.0)
      (ftst '(/ int-var 2.0) 16.0)
      (ftst '(/ 32.0 int-var) 1.0)
      (ftst '(/ int-var int-var) 1.0)
      (ftst '(/ dbl-var int-var) (/ dbl-var int-var))
      (ftst '(/ int-var dbl-var) (/ int-var dbl-var))
      
      (btst '(exact? 1) #t)
      (btst '(exact? 2.01) #f)
      (btst '(exact? #i77) #f)
      (btst '(exact? #x77) #t)
      (btst '(exact? #b11) #t)
      (btst '(inexact? 1) #f)
      (btst '(inexact? 2.01) #t)
      (btst '(inexact? #i77) #t)
      (btst '(inexact? #x77) #f)
      (btst '(inexact? #b11) #f)
      (btst '(exact? (/ 3.0 2.0)) #f)
      (btst '(inexact? (/ 3.0 2.0)) #t)
      (btst '(exact? #f) #f)
      (btst '(inexact? #f) #f)
      (btst '(lambda (y) (inexact? y)) #t)
      (btst '(lambda (y) (inexact? (inexact->exact y))) #f)
      (btst '(lambda (y) (exact? y)) #f)
      (btst '(lambda (y) (exact? (inexact->exact y))) #t)
      
      (btst '(= 7 7) #t)
      (btst '(= 7 9) #f)
      (btst '(= 1.0 1.0) #t)
      (btst '(= 1.0 2.0) #f)
      (btst '(= 2.0 (+ 1.0 1.0) (* 1.0 2.0)) #t)
      (btst '(= 7 (+ 6 1) (- 9 2)) #t)
      (btst '(= 1.0 1.0 2.0 1.0) #f)
      (btst '(= 7 (+ 6 1) (- 9 2) (- 9 4)) #f)
      (etst '(= 1.0 #f))
      (btsta '(lambda (y) (= (inexact->exact y) int-var)) 32.0 #t)
      (btsta '(lambda (y) (= (inexact->exact y) 1)) 2.0 #f)
      (btsta '(lambda (y) (= y 1.0)) 1.0 #t)
      (btsta '(lambda (y) (= y y y 1.0)) 1.0 #t)
      (btsta '(lambda (y) (= (inexact->exact y) (inexact->exact (* y 1)) (inexact->exact (- y 0)) 1)) 1.0 #t)
      
      (btst '(< 1 2 3) #t)
      (btst '(< 1 2.0 3) #t)
      (btst '(< 1 2 3 2) #f)
      (btst '(< 1 2) #t)
      (btst '(< 1) #t)
      (btst '(< 1.0 2.0) #t)
      (btst '(< 1.0 2) #t)
      (btst '(< 1.0 2.0 1.0) #f)
      (btst '(< 1.0 1) #f)
      (btsta '(lambda (y) (< y 2.0)) 3.0 #f)
      (btsta '(lambda (y) (< y 2.0)) 1.0 #t)
      (btsta '(lambda (y) (< y 2.0)) 2.0 #f)
      (btsta '(lambda (y) (< y 2.0 3.0 1.0)) 0.0 #f)
      (btsta '(lambda (y) (< y 2.0 3.0 4.0)) 0.0 #t)
      (btsta '(lambda (y) (< y (- y 2.0))) 3.0 #f)
      (btsta '(lambda (y) (< y 2.0 3)) 1.0 #t)
      (btsta '(lambda (y) (< 0.0 y 3)) 1.0 #t)
      (btsta '(lambda (y) (< 0.0 2 y)) 3.0 #t)
      (btsta '(lambda (y) (< 0.0 2 y 1.0)) 3.0 #f)
      (btsta '(lambda (y) (< (- y 1.0) 2.0)) 2.0 #t)
      (btsta '(lambda (y) (< 0 2 (inexact->exact y))) 3.0 #t)
      (btsta '(lambda (y) (< 0 2 (inexact->exact y) 4)) 3.0 #t)
      (btsta '(lambda (y) (< 0 2 (inexact->exact y) 4 1)) 3.0 #f)
      (btsta '(lambda (y) (< 0 2 y 4)) 3.0 #t)
      (btsta '(lambda (y) (< 0 2 y 4 1.5)) 3.0 #f)
      (btsta '(lambda (y) (< (- y 2) y (+ y 1))) 0.0 #t)
      (btsta '(lambda (y) (< (+ y 1) y (- y 0))) 0.0 #f)
      (etst '(< 1 #f))
      (etst '(< > 0))
      
      (btst '(>= 1 2 3) #f)
      (btst '(>= 3 2 1) #t)
      (btst '(>= 1 2.0 3) #f)
      (btst '(>= 1 2 3 2) #f)
      (btst '(>= 3 2 2 1 1) #t)
      (btst '(>= 1 2) #f)
      (btst '(>= 1) #t)
      (btst '(>= 1.0) #t)
      (btst '(>= 1.0 2.0) #f)
      (btst '(>= 2.0 1.0) #t)
      (btst '(>= 1.0 2) #f)
      (btst '(>= 1.0 2.0 1.0) #f)
      (btst '(>= 2.0 2.0 1.0) #t)
      (btst '(>= 1.0 1) #t)
      (btsta '(lambda (y) (>= y 2.0)) 3.0 #t)
      (btsta '(lambda (y) (>= y 2.0)) 1.0 #f)
      (btsta '(lambda (y) (>= y 2.0)) 2.0 #t)
      (btsta '(lambda (y) (>= y 2.0 3.0 1.0)) 0.0 #f)
      (btsta '(lambda (y) (>= y 2.0 3.0 4.0)) 0.0 #f)
      (btsta '(lambda (y) (>= y (- y 2.0))) 3.0 #t)
      (btsta '(lambda (y) (>= y 2.0 3)) 1.0 #f)
      (btsta '(lambda (y) (>= 0.0 y 3)) 1.0 #f)
      (btsta '(lambda (y) (>= 0.0 2 y)) 3.0 #f)
      (btsta '(lambda (y) (>= 4.0 y 3 3 2)) 3.0 #t)
      (btsta '(lambda (y) (>= 0.0 2 y 1.0)) 3.0 #f)
      (btsta '(lambda (y) (>= (- y 1.0) 2.0)) 2.0 #f)
      (btsta '(lambda (y) (>= 0 2 (inexact->exact y))) 3.0 #f)
      (btsta '(lambda (y) (>= 0 2 (inexact->exact y) 4)) 3.0 #f)
      (btsta '(lambda (y) (>= 0 2 (inexact->exact y) 4 1)) 3.0 #f)
      (btsta '(lambda (y) (>= 0 2 y 4)) 3.0 #f)
      (btsta '(lambda (y) (>= 0 2 y 4 1.5)) 3.0 #f)
      (btsta '(lambda (y) (>= (- y 2) y (+ y 1))) 0.0 #f)
      (btsta '(lambda (y) (>= (+ y 1) y (- y 0))) 0.0 #t)
      (etst '(>= 1 #f))
      (etst '(>= > 0))
      
      (btst '(> 1 2 3) #f)
      (btst '(> 3 2 1) #t)
      (btst '(> 1 2.0 3) #f)
      (btst '(> 1 2 3 2) #f)
      (btst '(> 3 2 2 1 1) #f)
      (btst '(> 1 2) #f)
      (btst '(> 3 2) #t)
      (btst '(> 1) #t)
      (btst '(> 1.0) #t)
      (btst '(> 1.0 2.0) #f)
      (btst '(> 2.0 1.0) #t)
      (btst '(> 1.0 2) #f)
      (btst '(> 1.0 2.0 1.0) #f)
      (btst '(> 2.0 2.0 1.0) #f)
      (btst '(> 1.0 1) #f)
      (btsta '(lambda (y) (> y 2.0)) 3.0 #t)
      (btsta '(lambda (y) (> y 2.0)) 1.0 #f)
      (btsta '(lambda (y) (> y 2.0)) 2.0 #f)
      (btsta '(lambda (y) (> y 2.0 3.0 1.0)) 0.0 #f)
      (btsta '(lambda (y) (> y 2.0 3.0 4.0)) 0.0 #f)
      (btsta '(lambda (y) (> y (- y 2.0))) 3.0 #t)
      (btsta '(lambda (y) (> y 2.0 3)) 1.0 #f)
      (btsta '(lambda (y) (> 0.0 y 3)) 1.0 #f)
      (btsta '(lambda (y) (> 0.0 2 y)) 3.0 #f)
      (btsta '(lambda (y) (> 4.0 y 3 3 2)) 3.0 #f)
      (btsta '(lambda (y) (> 0.0 2 y 1.0)) 3.0 #f)
      (btsta '(lambda (y) (> (- y 1.0) 2.0)) 2.0 #f)
      (btsta '(lambda (y) (> 0 2 (inexact->exact y))) 3.0 #f)
      (btsta '(lambda (y) (> 0 2 (inexact->exact y) 4)) 3.0 #f)
      (btsta '(lambda (y) (> 0 2 (inexact->exact y) 4 1)) 3.0 #f)
      (btsta '(lambda (y) (> 0 2 y 4)) 3.0 #f)
      (btsta '(lambda (y) (> 0 2 y 4 1.5)) 3.0 #f)
      (btsta '(lambda (y) (> (- y 2) y (+ y 1))) 0.0 #f)
      (btsta '(lambda (y) (> (+ y 1) y (- y 0))) 0.0 #f)
      (etst '(> 1 #f))
      (etst '(> > 0))
      
      (btst '(<= 1 2 3) #t)
      (btst '(<= 1 2.0 3) #t)
      (btst '(<= 1 2 3 2) #f)
      (btst '(<= 1 2) #t)
      (btst '(<= 1) #t)
      (btst '(<= 1.0 2.0) #t)
      (btst '(<= 1.0 2) #t)
      (btst '(<= 1.0 2.0 1.0) #f)
      (btst '(<= 1.0 2.0 2.0) #t)
      (btst '(<= 1.0 1) #t)
      (btsta '(lambda (y) (<= y 2.0)) 3.0 #f)
      (btsta '(lambda (y) (<= y 2.0)) 1.0 #t)
      (btsta '(lambda (y) (<= y 2.0)) 2.0 #t)
      (btsta '(lambda (y) (<= y 2.0 3.0 1.0)) 0.0 #f)
      (btsta '(lambda (y) (<= y 2.0 3.0 4.0)) 0.0 #t)
      (btsta '(lambda (y) (<= y (- y 2.0))) 3.0 #f)
      (btsta '(lambda (y) (<= y 2.0 3)) 1.0 #t)
      (btsta '(lambda (y) (<= 0.0 y 3)) 1.0 #t)
      (btsta '(lambda (y) (<= 0.0 2 y)) 3.0 #t)
      (btsta '(lambda (y) (<= 0.0 2 y 1.0)) 3.0 #f)
      (btsta '(lambda (y) (<= (- y 1.0) 2.0)) 2.0 #t)
      (btsta '(lambda (y) (<= 0 2 (inexact->exact y))) 3.0 #t)
      (btsta '(lambda (y) (<= 0 2 (inexact->exact y) 4)) 3.0 #t)
      (btsta '(lambda (y) (<= 0 2 (inexact->exact y) 4 1)) 3.0 #f)
      (btsta '(lambda (y) (<= 0 2 y 4)) 3.0 #t)
      (btsta '(lambda (y) (<= 0 2 y 4 1.5)) 3.0 #f)
      (btsta '(lambda (y) (<= (- y 2) y (+ y 1))) 0.0 #t)
      (btsta '(lambda (y) (<= (+ y 1) y (- y 0))) 0.0 #f)
      (etst '(<= 1 #f))
      (etst '(<= > 0))
      
      (itst '(+) (+))
      (itst '(*) (*))
      (etst '(/))
      (etst '(-))
      (btst '(>) #t)
      (btst '(>=) #t)
      (btst '(<) #t)
      (btst '(<=) #t)
      
      (btst '(zero? 0) #t)
      (btst '(zero? 0.0) #t)
      (btst '(zero? 1) #f)
      (etst '(zero?))
      (etst '(zero? #f))
      (etst '(zero? 1 2 3))
      (btsta '(lambda (y) (zero? y)) 0.0 #t)
      (btsta '(lambda (y) (zero? (inexact->exact y))) 32 #f)
      
      (btst '(positive? 0) #f)
      (btst '(positive? -1) #f)
      (btst '(positive? 0.0) #f)
      (btst '(positive? 1) #t)
      (etst '(positive?))
      (etst '(positive? #f))
      (etst '(positive? 3 2))
      (etst '(positive? bool-var))
      (btsta '(lambda (y) (positive? y)) 0.0 #f)
      (btsta '(lambda (y) (positive? y)) 1.0 #t)
      (btsta '(lambda (y) (positive? (inexact->exact y))) 1.0 #t)
      
      (btst '(negative? 0) #f)
      (btst '(negative? -1) #t)
      (btst '(negative? 0.0) #f)
      (btst '(negative? 1) #f)
      (etst '(negative?))
      (etst '(negative? 'hi))
      (etst '(negative? 3.1 2))
      (btsta '(lambda (y) (negative? y)) 0.0 #f)
      (btsta '(lambda (y) (negative? y)) -1.0 #t)
      (btsta '(lambda (y) (negative? y)) 1.0 #f)
      (btsta '(lambda (y) (negative? (inexact->exact y))) -1.0 #t)
      
      (btst '(even? 2) #t)
      (btst '(even? 2.0) #t)
      (btst '(even? -2) #t)
      (btst '(even? 1) #f)
      (btst '(even? 3.0) #f)
      (btst '(even? 0) #t)
      (etst '(even?))
      (etst '(even? #t))
      (etst '(even? 3 2.1))
      (btsta '(lambda (y) (even? y)) 1 #f)
      (btsta '(lambda (y) (even? y)) -1 #f)
      (btsta '(lambda (y) (even? y)) 2 #t)
      (btsta '(lambda (y) (even? y)) 4.0 #t)
      
      (btst '(odd? 2) #f)
      (btst '(odd? 2.0) #f)
      (btst '(odd? -2) #f)
      (btst '(odd? 1) #t)
      (btst '(odd? 3.0) #t)
      (btst '(odd? 0) #f)
      (btst '(odd? -3) #t)
      (etst '(odd?))
      (etst '(odd? (list 1 2)))
      (etst '(odd? 2 1))
      (btsta '(lambda (y) (odd? y)) 1 #t)
      (btsta '(lambda (y) (odd? y)) -1 #t)
      (btsta '(lambda (y) (odd? y)) 2 #f)
      (btsta '(lambda (y) (odd? y)) 4.0 #f)
      
      (itst '(quotient 45 6) 7)
      (ftst '(quotient 6.0 2.0) 3.0)
      (itst '(quotient 6.0 2.0) 3)
      (itst '(quotient 3 -2) -1)
      (itsta '(lambda (y) (quotient y 6)) 45.0 7)
      (ftsta '(lambda (y) (quotient 6.0 y)) 2.0 3.0)
      (itsta '(lambda (y) (quotient y 2.0)) 6.0 3)
      (itsta '(lambda (y) (quotient y int-var)) 64 2)
      (etst '(quotient))
      (etst '(quotient 1))
      (etst '(quotient "hiho" 2))
      (etst '(quotient 1 2 3))
      
      (itst '(remainder 13 4) 1)
      (itst '(remainder -13 4) -1)
      (itst '(remainder 13 -4) 1)
      (itst '(remainder -13 -4) -1)
      (ftst '(remainder -13 -4.0) -1.0)
      (itst '(remainder 16 4) 0)
      (itst '(remainder 5 2) 1)
      (itst '(remainder -45.0 7) -3)
      (itst '(remainder -17 -9) -8)
      (itsta '(lambda (y) (remainder y 4)) 16.0 0)
      (itsta '(lambda (y) (remainder 5 y)) 2.0 1)
      (itsta '(lambda (y) (remainder y 7)) -45.0 -3)
      (itsta '(lambda (y) (remainder y -9)) -17.0 -8)
      (etst '(remainder))
      (etst '(remainder 1))
      (etst '(remainder #f 2))
      (etst '(remainder 1 2 3))
      
      (itst '(modulo 13 4) 1)
      (itst '(modulo -13 4) 3)
      (itst '(modulo 13 -4) -3)
      (itst '(modulo -13 -4) -1)
      (itst '(modulo 16 4) 0)
      (itst '(modulo 5 2) 1)
      (itst '(modulo -45.0 7) 4)
      (itst '(modulo 10 -3.0) -2)
      (itst '(modulo -17 -9) -8)
      (itsta '(lambda (y) (modulo 5 y)) 2.0 1)
      (itsta '(lambda (y) (modulo y 7)) -45.0 4)
      (itsta '(lambda (y) (modulo 10 y)) -3.0 -2)
      (itsta '(lambda (y) (modulo -17 y)) -9.0 -8)
      (etst '(modulo))
      (etst '(modulo 1))
      (etst '(modulo 11 #f))
      (etst '(modulo 1 2 3))
      
      (ftst '(truncate -4.3) -4.0)
      (ftst '(truncate 3.5) 3.0)
      (itst '(truncate 19) 19)
      (ftst '(truncate .6) 0)
      (ftst '(truncate -8.5) -8)
      (ftst '(truncate 17.3) 17.0)
      (ftsta '(lambda (y) (truncate y)) 4.3 4.0)
      (ftsta '(lambda (y) (truncate y)) 3.5 3.0)
      (ftsta '(lambda (y) (truncate y)) .6 0)
      (ftsta '(lambda (y) (truncate y)) -8.5 -8)
      (ftsta '(lambda (y) (truncate y)) 17.3 17.0)
      (etst '(truncate))
      (etst '(truncate #f))
      (etst '(truncate 3 2 1))
      (ftsta '(lambda (y) (truncate (inexact->exact y))) 1.0 1.0)
      (itsta '(lambda (y) (inexact->exact (truncate (inexact->exact y)))) 1.0 1)
      (itsta '(lambda (y) (inexact->exact (round (inexact->exact y)))) 1.0 1)
      (itsta '(lambda (y) (inexact->exact (ceiling (inexact->exact y)))) 1.0 1)
      (itst '(inexact->exact (truncate -4.3)) -4)
      (itsta '(lambda (y) (inexact->exact (truncate y))) -4.3 -4)
      (itst '(inexact->exact (round 4.3)) 4)
      (itsta '(lambda (y) (inexact->exact (round y))) 4.3 4)
      (itst '(inexact->exact (ceiling 1.5)) 2)
      (itsta '(lambda (y) (inexact->exact (ceiling y))) 1.5 2)
      
      (let* ((g0 (make-oscil 440)) (g1 g0) (v (make-vct 1)))
	(vct-map! v (lambda () (if (eq? g0 g1) 1.0 2.0)))
	(if (fneq (vct-ref v 0) 1.0) (snd-display ";run clm eq?: ~A" v)))
      (let* ((g0 (make-oscil 440)) (g1 (make-oscil 330.0)) (v (make-vct 1)))
	(vct-map! v (lambda () (if (eq? g0 g1) 1.0 2.0)))
	(if (fneq (vct-ref v 0) 2.0) (snd-display ";run clm neq?: ~A" v)))

      (let* ((g0 (make-oscil 440)) (g1 g0) (v (make-vct 1)))
	(vct-map! v (lambda () (if (eqv? g0 g1) 1.0 2.0)))
	(if (fneq (vct-ref v 0) 1.0) (snd-display ";run clm eqv?: ~A" v)))
      (let* ((g0 (make-oscil 440)) (g1 (make-oscil 330.0)) (v (make-vct 1)))
	(vct-map! v (lambda () (if (eqv? g0 g1) 1.0 2.0)))
	(if (fneq (vct-ref v 0) 2.0) (snd-display ";run clm neqv?: ~A" v)))

      (let* ((g0 (make-oscil 440)) (g1 g0) (v (make-vct 1)))
	(vct-map! v (lambda () (if (equal? g0 g1) 1.0 2.0)))
	(if (fneq (vct-ref v 0) 1.0) (snd-display ";run clm equal?: ~A" v)))
      (let* ((g0 (make-oscil 440)) (g1 (make-oscil 330.0)) (v (make-vct 1)))
	(vct-map! v (lambda () (if (equal? g0 g1) 1.0 2.0)))
	(if (fneq (vct-ref v 0) 2.0) (snd-display ";run clm nequal?: ~A" v)))

      (itst '(floor -4.3) -5.0)
      (itst '(floor 3.5) 3.0)
      (itst '(floor 3) 3)
      (ftst '(floor .6) 0)
      (ftst '(floor -.6) -1.0)
      (ftst '(floor 17.3) 17.0)
      (ftst '(floor -8.5) -9.0)
      (itsta '(lambda (y) (floor y)) -4.3 -5.0)
      (itsta '(lambda (y) (floor y)) 3.5 3.0)
      (ftsta '(lambda (y) (floor y)) .6 0)
      (ftsta '(lambda (y) (floor y)) -.6 -1.0)
      (ftsta '(lambda (y) (floor y)) 17.3 17.0)
      (ftsta '(lambda (y) (floor y)) -8.5 -9.0)
      (etst '(floor))
      (etst '(floor "HI"))
      (etst '(floor 1.7 2))
      (itst '(inexact->exact (floor 2.5)) 2)
      (ftsta '(lambda (y) (floor (inexact->exact y))) 1.0 1.0)
      (itsta '(lambda (y) (inexact->exact (floor y))) 1.0 1)
      
      (itst '(ceiling -4.3) -4.0)
      (itst '(ceiling 3.5) 4.0)
      (itst '(ceiling 3) 3)
      (ftst '(ceiling .6) 1.0)
      (ftst '(ceiling -.6) 0)
      (ftst '(ceiling 17.3) 18.0)
      (ftst '(ceiling -8.5) -8.0)
      (etst '(ceiling))
      (etst '(ceiling #t))
      (etst '(ceiling 3.2 1))
      (itst '(inexact->exact (ceiling 2.5)) 3)
      (ftsta '(lambda (y) (ceiling y)) .6 1.0)
      (ftsta '(lambda (y) (ceiling y)) -.6 0)
      (ftsta '(lambda (y) (ceiling y)) 17.3 18.0)
      (ftsta '(lambda (y) (ceiling y)) -8.5 -8.0)
      (ftsta '(lambda (y) (ceiling (inexact->exact y))) 1.0 1.0)
      
      (itst '(round -4.3) -4.0)
      (ftst '(round 3.5) 4.0)
      (itst '(round 7) 7)
      (ftst '(round .6) 1.0)
      (ftst '(round -.6) -1.0)
      (ftst '(round 17.3) 17.0)
      (ftst '(round -8.5) -8.0)
      (ftst '(round 2.5) 2.0)
      (ftst '(round 3.5) 4.0)
      (ftst '(round -2.5) -2.0)
      (etst '(round))
      (etst '(round 3.2 4))
      (etst '(round "test"))
      (ftsta '(lambda (y) (round y)) .6 1.0)
      (ftsta '(lambda (y) (round y)) -.6 -1.0)
      (ftsta '(lambda (y) (round y)) 17.3 17.0)
      (ftsta '(lambda (y) (round y)) -8.5 -8.0)
      (ftsta '(lambda (y) (round y)) 2.5 2.0)
      (ftsta '(lambda (y) (round y)) 3.5 4.0)
      (ftsta '(lambda (y) (round (inexact->exact y))) 1.0 1.0)
      (itst '(inexact->exact (round .6)) 1)
      
      (itst '(abs 3) 3)
      (itst '(abs -3) 3)
      (itst '(abs 0) 0)
      (ftst '(abs 3.0) 3.0)
      (ftst '(abs -3.1) 3.1)
      (etst '(abs))
      (etst '(abs 3.2 -1))
      (etst '(abs '(hiho)))
      (ftsta '(lambda (y) (abs y)) 3.0 3.0)
      (ftsta '(lambda (y) (abs y)) -3.1 3.1)
      (itsta '(lambda (y) (abs (inexact->exact y))) 3 3)
      (itsta '(lambda (y) (abs (inexact->exact y))) -3 3)
      
      (itst '(max 1) 1)
      (itst '(max 1 2) 2)
      (itst '(max 1 2 4 2 5) 5)
      (itst '(max 1 2 4 2 5 1) 5)
      (itst '(max 2 1) 2)
      (itst '(max 3 2 1) 3)
      (itst '(max 1 2 3) 3)
      (itst '(max 1 2 -4 2 -5) 2)
      (ftst '(max 1.0) 1.0)
      (ftst '(max 1 2.0) 2.0)
      (ftst '(max 1.0 2 4 2 5) 5.0)
      (ftst '(max 1 2 4.0 2.0 5 1) 5.0)
      (ftst '(max 1 -4.0 2.0 -5) 2.0)
      (ftst '(max 2.0 1.0) 2.0)
      (ftst '(max 2.0 1.0 0.0) 2.0)
      (ftst '(max 0.0 1.0 2.0) 2.0)
      (etst '(max))
      (etst '(max 1 #f 3))
      (ftsta '(lambda (y) (max y 2.0)) 1.0 2.0)
      (ftsta '(lambda (y) (max y)) 1.0 1.0)
      (ftsta '(lambda (y) (max 1.0 y 4 int-var 5)) 1.0 32.0)
      (ftsta '(lambda (y) (max 1 2 4.0 2.0 y 1)) 5.0 5.0)
      (ftsta '(lambda (y) (max 1 y 2.0 -5)) -4.0 2.0)
      (ftsta '(lambda (y) (max 2.0 y)) 1.0 2.0)
      (itsta '(lambda (y) (max 1 (inexact->exact y))) 2.0 2)
      (itsta '(lambda (y) (max (inexact->exact y) 1)) 2.0 2)
      (itsta '(lambda (y) (max 1 (inexact->exact y) 3)) 2.0 3)
      (itsta '(lambda (y) (max (inexact->exact y) 3 1 2)) 4.0 4)
      
      (itst '(min 1) 1)
      (itst '(min 1 2) 1)
      (itst '(min 1 2 4 2 5) 1)
      (itst '(min 1 2 4 2 5 1) 1)
      (itst '(min 2 1) 1)
      (itst '(min 3 2 1) 1)
      (itst '(min 1 2 3) 1)
      (itst '(min 1 2 -4 2 -5) -5)
      (itst '(min 1 2 -1 3) -1)
      (ftst '(min 1.0) 1.0)
      (ftst '(min 1 2.0) 1.0)
      (ftst '(min 1.0 2 4 2 5) 1.0)
      (ftst '(min 1 2 4.0 2.0 5 1) 1.0)
      (ftst '(min 1 -4.0 2.0 -5) -5.0)
      (ftst '(min 2.0 1.0) 1.0)
      (ftst '(min 2.0 1.0 0.0) 0.0)
      (ftst '(min 0.0 1.0 2.0) 0.0)
      (etst '(min))
      (etst '(min #f))
      (ftsta '(lambda (y) (min y 2.0)) 1.0 1.0)
      (ftsta '(lambda (y) (min y)) 1.0 1.0)
      (ftsta '(lambda (y) (min 1.0 2 y 2 5)) 4.0 1.0)
      (ftsta '(lambda (y) (min 1 2 y int-var 2.0 5 1)) 4.0 1.0)
      (ftsta '(lambda (y) (min 1 y 2.0 -5)) -4.0 -5.0)
      (ftsta '(lambda (y) (min 2.0 y)) 1.0 1.0)
      (itsta '(lambda (y) (min 1 (inexact->exact y))) 2.0 1)
      (itsta '(lambda (y) (min (inexact->exact y) 1)) 2.0 1)
      (itsta '(lambda (y) (min 1 (inexact->exact y) 3)) 2.0 1)
      (itsta '(lambda (y) (min (inexact->exact y) 3 1 2)) 4.0 1)
      
      (itst '(gcd 32 -36) 4)
      (itst '(gcd) 0)
      (itst '(gcd 34) 34)
      (itst '(gcd 33.0 15.0) 3)
      (itst '(gcd 70 -42 28) 14)
      (itst '(gcd 70 42.0 28 56) 14)
      (itsta '(lambda (y) (gcd y)) 34 34)
      (itsta '(lambda (y) (gcd y 15.0)) 33.0 3)
      (itsta '(lambda (y) (gcd 70 (inexact->exact y) 28)) -42.0 14)
      (itsta '(lambda (y) (gcd 70 y 28 56)) 42.0 14)
      (etst '(gcd #f))
      
      (itst '(lcm) 1)
      (itst '(lcm 32 -36) 288)
      (itst '(lcm 34) 34)
      (itst '(lcm 33.0 15.0) 165)
      (itst '(lcm 17 0) 0)
      (itst '(lcm 70 -42 28) 420)
      (etst '(lcm "hi"))
      (itsta '(lambda (y) (lcm y -36)) 32.0 288)
      (itsta '(lambda (y) (lcm y)) 34 34)
      (itsta '(lambda (y) (lcm 33.0 y)) 15.0 165)
      (itsta '(lambda (y) (lcm 70 (inexact->exact (* 3 y)) (inexact->exact (* -2 y)))) 14.0 420)
      
      (ftst '(expt 2 10) 1024.0)
      (ftst '(expt 2 -1) 0.5)
      (ftst '(expt -0.5 5) -.03125)
      (ftst '(expt 0 0) 1)
      (ftst '(expt 0.0 1) 0.0)
      (ftst '(expt 3.0 3.0) 27.0)
      (etst '(expt))
      (etst '(expt -1))
      (etst '(expt 2 #f))
      (ftsta '(lambda (y) (expt 2 y)) 10 1024.0)
      (ftsta '(lambda (y) (expt y -1)) 2.0 0.5)
      (ftsta '(lambda (y) (expt -0.5 y)) 5.0 -.03125)
      (ftsta '(lambda (y) (expt y 0)) 0.0 1)
      (ftsta '(lambda (y) (expt 0.0 y)) 1.0 0.0)
      (ftsta '(lambda (y) (expt y 3.0)) 3.0 27.0)
      
      (ftst '(exact->inexact 3) 3.0)
      (ftst '(exact->inexact 3.0) 3.0)
      (etst '(exact->inexact))
      (etst '(exact->inexact 1.0 2.0))
      (ftsta '(lambda (y) (exact->inexact (inexact->exact y))) 3.0 3.0)
      
      (itst '(inexact->exact 3.0) 3)
      (itst '(inexact->exact 3) 3)
      (etst '(inexact->exact))
      (etst '(inexact->exact #f))
      (etst '(inexact->exact 2.3 8.1))
      (itsta '(lambda (y) (inexact->exact y)) 3.0 3)
      
      (ftst '(sqrt 16.0) 4.0)
      (ftsta '(lambda (y) (sqrt y)) 4.84 2.2)
      (etst '(sqrt))
      (etst '(sqrt 1 2 3))
      (etst '(sqrt 'hi))
      (ftst '(sqrt 4) 2.0)
      
      (ftst '(exp 1) 2.71828)
      (ftst '(exp 0) 1.0)
      (ftst '(exp -.5) 0.60653)
      (etst '(exp))
      (etst '(exp 2.0 1.0))
      (ftsta '(lambda (y) (exp y)) 1.0 2.71828)
      (ftsta '(lambda (y) (exp y)) 0.0 1.0)
      (ftsta '(lambda (y) (exp y)) -0.5 0.60653)
      
      (ftst '(log 1.0) 0.0)
      (ftst '(log 2.71828) 1.0)
      (ftst '(/ (log 8.0) (log 2.0)) 3.0)
      (etst '(log))
      (etst '(log #t))
      (etst '(log 1 2 3))
      (ftsta '(lambda (y) (log y)) 1.0 0.0)
      (ftsta '(lambda (y) (log y)) 2.71828 1.0)
      (ftsta '(lambda (y) (/ (log y) (log 2.0))) 8.0 3.0)
      (ftst '(log 2) 0.6931)
      
      (btst '(number? 2) #t)
      (btst '(number? 2.1) #t)
      (btst '(number? #f) #f)
      (btst '(number? "hi") #f)
      (etst '(number?))
      (etst '(number? 1 2 3))
      (btsta '(lambda (y) (number? y)) 2.0 #t)
      
      (btst '(real? 2) #t)
      (btst '(real? 2.1) #t)
      (btst '(real? #f) #f)
      (btst '(real? "hi") #f)
      (etst '(real?))
      (etst '(real? 1 2 3))
      (btsta '(lambda (y) (real? y)) 2.0 #t)
      
      (btst '(integer? 2) #t)
      (btst '(integer? 2.1) #f)
      (btst '(integer? #f) #f)
      (btst '(integer? "hi") #f)
      (etst '(integer?))
      (etst '(integer? 1 2 3))
      (btsta '(lambda (y) (integer? y)) 2.1 #f)
      
      (btst '(exact? 2) #t)
      (btst '(exact? 2.1) #f)
      (btst '(exact? 2.0) #f)
      (btst '(exact? "hi") #f)
      (etst '(exact?))
      (etst '(exact? 1 2 3))
      (btsta '(lambda (y) (exact? y)) 2.1 #f)
      
      (btst '(inexact? 2) #f)
      (btst '(inexact? 2.1) #t)
      (btst '(inexact? 2.0) #t)
      (btst '(inexact? "hi") #f)
      (etst '(inexact?))
      (etst '(inexact? 1 2 3))
      (btsta '(lambda (y) (inexact? y)) 2.1 #t)
      
      (btst '(boolean? 2) #f)
      (btst '(boolean? 2.1) #f)
      (btst '(boolean? #f) #t)
      (btst '(boolean? "hi") #f)
      (etst '(boolean?))
      (etst '(boolean? 1 2 3))
      (btsta '(lambda (y) (boolean? (odd? y))) 2.0 #t)

      (btst '(symbol? 'a) #t)
      (btst '(symbol? 1) #f)
      (btst '(symbol? :a) #f)
      (btst '(symbol? "a") #f)

      (stst '(symbol->string 'asdf) "asdf")
      
      (btst '(keyword? :asdf) #t)
      (btst '(keyword? 32) #f)
      (etst '(null? :asdf))
      (etst '(* 1 2 :asdf))
      (btst '(keyword? (quote :asdf)) #t)
      (btst '(keyword? 'a) #f)

      (ftst '(sin 0.0) 0.0)
      (ftst '(sin 0) 0.0)
      (ftst '(sin (/ 3.14159 2)) 1.0)
      (etst '(sin))
      (etst '(sin #f))
      (etst '(sin 1 2 3))
      (ftsta '(lambda (y) (sin y)) 0.0 0.0)
      (ftsta '(lambda (y) (sin (/ 3.14159 y))) 2.0 1.0)
      
      (ftst '(cos 0.0) 1.0)
      (ftst '(cos 0) 1.0)
      (ftst '(cos (/ 3.14159 2)) 0.0)
      (etst '(cos))
      (etst '(cos #f))
      (etst '(cos 1 2 3))
      (ftsta '(lambda (y) (cos y)) 0.0 1.0)
      (ftsta '(lambda (y) (cos (/ 3.14159 y))) 2.0 0.0)
      
      (ftst '(asin 0.0) 0.0)
      (ftst '(asin 0) 0.0)
      (ftst '(asin 1.0) (/ 3.14159 2))
      (ftst '(asin 1) (/ 3.14159 2))
      (etst '(asin))
      (etst '(asin #f))
      (etst '(asin 1 2 3))
      (ftsta '(lambda (y) (asin y)) 0.0 0.0)
      (ftsta '(lambda (y) (asin y)) 1.0 (/ 3.14159 2.0))
      
      (ftst '(acos 1.0) 0.0)
      (ftst '(acos 1) 0.0)
      (ftst '(acos 0.0) (/ 3.14159 2))
      (ftst '(acos 0) (/ 3.14159 2))
      (etst '(acos))
      (etst '(acos #f))
      (etst '(acos 1 2 3))
      (ftsta '(lambda (y) (acos y)) 1.0 0.0)
      (ftsta '(lambda (y) (acos y)) 0.0 (/ 3.14159 2.0))
      
      (ftst '(tan 0.0) 0.0)
      (ftst '(tan 0) 0.0)
      (ftst '(tan (/ 3.14159 4)) 1.0)
      (etst '(tan))
      (etst '(tan 'hi))
      (etst '(tan 1.0 2.0))
      (ftsta '(lambda (y) (tan y)) 0.0 0.0)
      (ftsta '(lambda (y) (tan y)) (/ 3.14159 4) 1.0)
      
      (ftst '(atan 0.0) 0.0)      
      (ftst '(atan 0) 0.0)
      (ftst '(atan 1.0) (/ 3.14159 4))
      (ftst '(atan 1) (/ 3.14159 4))
      (ftsta '(lambda (y) (atan y)) 0.0 0.0)
      (ftsta '(lambda (y) (atan y)) 1.0 (/ 3.14159 4))
      (etst '(atan))
      (etst '(atan 'hi))
      (etst '(atan 1.0 2.0 3.0))
      (ftsta '(lambda (y) (atan y)) 0.0 0.0)
      (ftsta '(lambda (y) (atan y)) 1.0 (/ 3.14159 4))
      (ftst '(atan 0.0 1.0) 0.0)
      (ftst '(atan 0 1) 0.0)
      (ftst '(atan 0.5 0.5) (atan 1.0))
      (ftst '(atan 0.5 1.0) (atan 0.5))
      (ftst '(atan 0.5 1) (atan 0.5))
      (ftsta '(lambda (y) (atan 0.5 y)) 0.5 (atan 1.0))
      (ftsta '(lambda (y) (atan y 1.0)) 0.5 (atan 0.5))
      
      (btst '(not #t) #f)
      (btst '(not #f) #t)
      (btst '(not (odd? 2)) #t)
      (etst '(not))
      (btst '(not 1) #f)
      (btst '(not 3.14) #f)
      (btsta '(lambda (y) (not y)) 3.1 #f)
      (btsta '(lambda (y) (set! bool-var (not (odd? y))) (not bool-var)) 3 #t)
      
      (btsta '(lambda (y) (or)) 0 #f)
      (btsta '(lambda (y) (or #f)) 0 #f)
      (btsta '(lambda (y) (or #t #f)) 0 #t)
      (btsta '(lambda (y) (or #f #t)) 0 #t)
      (btsta '(lambda (y) (or (odd? 3))) 0.0 #t)
      (btsta '(lambda (y) (or (odd? 3) #f)) 0.0 #t)
      (btsta '(lambda (y) (or #f (odd? 4))) 0.0 #f)
      (btsta '(lambda (y) (or (odd? y) (begin (set! int-var 123) #f))) 3 #t)
      (if (= int-var 123) (snd-display ";or not short-circuited"))
      (etst '(or (hiho 3)))
      
      (btsta '(lambda (y) (and)) 0 #t)
      (btsta '(lambda (y) (and #f)) 0 #f)
      (btsta '(lambda (y) (and #t #f)) 0 #f)
      (btsta '(lambda (y) (and #f #t)) 0 #f)
      (btsta '(lambda (y) (and (odd? 3))) 0.0 #t)
      (btsta '(lambda (y) (and (odd? 3) #f)) 0.0 #f)
      (btsta '(lambda (y) (and #f (odd? 4))) 0.0 #f)
      (btsta '(lambda (y) (and (odd? y) (begin (set! int-var 123) #t))) 3 #t)
      (if (not (= int-var 123)) (snd-display ";and quit early?"))
      (btsta '(lambda (y) (and (odd? y) (begin (set! int-var 321) #t))) 2 #f)
      (if (= int-var 321) (snd-display ";and not short-circuited"))
      (etst '(and (hiho 3)))
      
      (btst '(eq? 1 1) #t)
      (btst '(eq? 1 2) #f)
      (btst '(eq? #f #f) #t)
      (btst '(eq? #f 1) #f)
      (btst '(eq? 1.0 1.0) #f)
      (btst '(eq? #t 1) #f)
      (btst '(eq? 1 1.0) #f)
      (etst '(eq?))
      (etst '(eq? 1))
      (btsta '(lambda (y) (eq? 1 1)) 1.0 #t)
      (btsta '(lambda (y) (eq? #f #f)) 0.0 #t)
      (btsta '(lambda (y) (eq? #f 1)) 0.0 #f)
      (btsta '(lambda (y) (eq? y 1.0)) 1.0 #f)
      (btsta '(lambda (y) (eq? #t y)) 1.0 #f)
      (btsta '(lambda (y) (eq? 1 y)) 1.0 #f)
      (btst '(let ((a 1) (b 1)) (eq? a b)) #t)
      (btsta '(lambda (y) (let ((a (inexact->exact y)) (b 1)) (eq? a b))) 1.0 #t)
      (btst '(eq? :a :a) #t)
      (btst '(eq? :a :b) #f)
      (btst '(eq? 'a 'a) #t)
      (btst '(eq? 'a 'b) #f)
      
      (btst '(eqv? 1 1) #t)
      (btst '(eqv? 1 2) #f)
      (btst '(eqv? #f #f) #t)
      (btst '(eqv? #f 1) #f)
      (btst '(eqv? 1.0 1.0) #t)
      (btst '(eqv? #t 1) #f)
      (btst '(eqv? 1 1.0) #f)
      (etst '(eqv?))
      (etst '(eqv? 1))
      (btsta '(lambda (y) (eqv? 1 1)) 1.0 #t)
      (btsta '(lambda (y) (eqv? #f #f)) 0.0 #t)
      (btsta '(lambda (y) (eqv? #f 1)) 0.0 #f)
      (btsta '(lambda (y) (eqv? y 1.0)) 1.0 #t)
      (btsta '(lambda (y) (eqv? #t y)) 1.0 #f)
      (btsta '(lambda (y) (eqv? 1 y)) 1.0 #f)
      (btsta '(lambda (y) (eqv? 1 (inexact->exact y))) 1 #t)
      (btst '(eqv? :a :a) #t)
      (btst '(eqv? :a :b) #f)
      (btst '(eqv? 'a 'a) #t)
      (btst '(eqv? 'a 'b) #f)
      
      (btst '(equal? 1 1) #t)
      (btst '(equal? 1 2) #f)
      (btst '(equal? #f #f) #t)
      (btst '(equal? #f 1) #f)
      (btst '(equal? 1.0 1.0) #t)
      (btst '(equal? 1.0 2.0) #f)
      (btst '(equal? #t 1) #f)
      (btst '(equal? 1 1.0) #f)
      (etst '(equal?))
      (etst '(equal? 1))
      (btsta '(lambda (y) (equal? 1 1)) 1.0 #t)
      (btsta '(lambda (y) (equal? #f #f)) 0.0 #t)
      (btsta '(lambda (y) (equal? #f 1)) 0.0 #f)
      (btsta '(lambda (y) (equal? y 1.0)) 1.0 #t)
      (btsta '(lambda (y) (equal? #t y)) 1.0 #f)
      (btsta '(lambda (y) (equal? 1 y)) 1.0 #f)
      (btst '(equal? :a :a) #t)
      (btst '(equal? :a :b) #f)
      (btst '(equal? 'a 'a) #t)
      (btst '(equal? 'a 'b) #f)

      (btst '(eq? #\a #\a) #t)
      (btst '(eqv? #\a #\a) #t)
      (btst '(equal? #\a #\a) #t)
      (btst '(eq? #\a #\A) #f)
      (btst '(eqv? #\a #\A) #f)
      (btst '(equal? #\a #\A) #f)
      (btst '(eq? #\a 97) #f)
      (btst '(eqv? #\a 97) #f)
      (btst '(equal? #\a 97) #f)
      
      (itst '(if #t 3 2) 3)
      (itst '(if #f 3 2) 2)
      (btst '(if (odd? 3) #f #t) #f)
      (btst '(if (even? 3) #f #t) #t)
      (ftst '(if (odd? 3) 1.5 2.5) 1.5)
      (ftst '(if (odd? 4) 1.5 2.5) 2.5)
      (itst '(if #t 3) 3)
      (btst '(if (odd? 3) #f) #f)
      (ftst '(if (odd? 3) 1.5) 1.5)
      (itsta '(lambda (y) (if (odd? (inexact->exact y)) 3 2)) 3.0 3)
      (itsta '(lambda (y) (if (odd? (inexact->exact y)) 3)) 3.0 3)
      (ftsta '(lambda (y) (if (odd? (inexact->exact y)) (+ y 1) (* y 2))) 3.0 4.0)
      (ftsta '(lambda (y) (if (odd? (inexact->exact y)) (+ y 1) (* y 2))) 4.0 8.0)
      (ftsta '(lambda (y) (if (odd? (inexact->exact (* y 2))) (+ y 1) (* y 2))) 3.0 6.0)
      (ftsta '(lambda (y) (if (even? (inexact->exact (* y 2))) (+ y 1) (* y 2))) 3.0 4.0)
      (itsta '(lambda (y) (if (number? y) 32)) 1.0 32)
      (itsta '(lambda (y) (if (not (number? y)) 32 31)) 1.0 31)
      (btsta '(lambda (y) (if (not (number? y)) (set! int-var 456) (set! int-var 654))) 1.0 654)
      (if (not (= int-var 654)) (snd-display ";if set int-var: ~A" int-var))
      
      (itst '(ash 2 3) 16)
      (itst '(ash 16 -3) 2)
      (etst '(ash))
      (etst '(ash 2))
      (itsta '(lambda (y) (ash 2 (inexact->exact y))) 3.0 16)
      (itsta '(lambda (y) (ash (inexact->exact y) -3)) 16.0 2)
      
      (itst '(logand 8 1) 0)
      (itst '(logand 7 1) 1)
      (itst '(logand 7 6) 6)
      (itst '(logand 2 6) 2)
      (itst '(logand 1 6) 0)
      (etst '(logand))
      (etst '(logand 1))
      (itsta '(lambda (y) (logand (inexact->exact y) 1)) 8.0 0)
      (itsta '(lambda (y) (logand 7 (inexact->exact y))) 1.0 1)
      (itsta '(lambda (y) (logand (inexact->exact y) 6)) 7.0 6)
      (itsta '(lambda (y) (logand 2 (inexact->exact y))) 6.0 2)
      
      (itst '(logior 8 1) 9)
      (itst '(logior 7 1) 7)
      (itst '(logior 7 6) 7)
      (itst '(logior 2 6) 6)
      (itst '(logior 1 6) 7)
      (etst '(logior))
      (etst '(logior 1))
      (itsta '(lambda (y) (logior (inexact->exact y) 1)) 8.0 9)
      (itsta '(lambda (y) (logior 7 (inexact->exact y))) 1.0 7)
      (itsta '(lambda (y) (logior (inexact->exact y) 6)) 7.0 7)
      (itsta '(lambda (y) (logior 2 (inexact->exact y))) 6.0 6)
      
      (itst '(logxor 8 1) (logxor 8 1))
      (itst '(logxor 7 1) (logxor 7 1))
      (itst '(logxor 7 6) (logxor 7 6))
      (itst '(logxor 2 6) (logxor 2 6))
      (itst '(logxor 1 6) (logxor 1 6))
      (etst '(logxor))
      (etst '(logxor 1))
      (itsta '(lambda (y) (logxor (inexact->exact y) 1)) 8.0 (logxor 8 1))
      (itsta '(lambda (y) (logxor 7 (inexact->exact y))) 1.0 (logxor 7 1))
      (itsta '(lambda (y) (logxor (inexact->exact y) 6)) 7.0 (logxor 7 6))
      (itsta '(lambda (y) (logxor 2 (inexact->exact y))) 6.0 (logxor 2 6))
      
      (itst '(lognot 1) (lognot 1))
      (itst '(lognot -1) (lognot -1))
      (etst '(lognot))
      (etst '(lognot 1 2 3))
      (itsta '(lambda (y) (lognot (inexact->exact y))) 1.0 (lognot 1))
      (itsta '(lambda (y) (lognot (inexact->exact y))) -1.0 (lognot -1))
      (etst '(logxor 1.5 0))
      (etst '(logxor 0 1.5))
      (etst '(logior 1.5 0))
      (etst '(logior 0 1.5))
      (etst '(logand 1.5 0))
      (etst '(logand 0 1.5))
      (etst '(lognot 1.5))
      (etst '(ash 1.5 1))
      (etst '(ash 1 1.5))
      
      (itst '(begin (set! int-var 1) (if (> int-var 1) (set! int-var 0)) int-var) 1)
      (itst '(begin (set! int-var 1) (if (> int-var 1) (set! int-var 0) 1)) 1)
      (itst '(begin (if (> int-var 1) (set! int-var 0)) int-var) 1)
      (ftst '(begin 1.0) 1.0)
      (ftst '(begin (* int-var 3) (cos 0)) 1.0)
      (itst '(begin (set! int-var 4) (if (odd? int-var) (begin (set! int-var 3) (+ int-var 2)) (begin 2))) 2)
      (btst '(begin #f) #f)

      (etst '(set! int-var 1.5))
      (etst '(set! int-var #f))
      (etst '(set! dbl-var #f))
      (etst '(set! dbl-var 1))
      (etst '(set! bool-var 1))
      (etst '(let ((a 1)) (set! a 3.14)))
      (etst '(set! (hiho) 3))
      (etst '(set! (sample 0 0 0) .1))
      (let ((hiho '(1 2))) (etst '(set! hiho 3)))
      (etst '(set! lst-var 3))

      (itst '(1+ 1) 2)
      (itst '(1+ 0) 1)
      (itst '(1+ -1) 0)
      (ftst '(1+ 2.5) 3.5)
      (ftsta '(lambda (y) (1+ y)) 2.1 3.1)
      (itsta '(lambda (y) (1+ (inexact->exact y))) 2.0 3)
      (etst '(1+ #f))
      (etst '(1+))
      (etst '(1+ 1 2 3))
      
      (itst '(1- 1) 0)
      (itst '(1- 0) -1)
      (itst '(1- -1) -2)
      (ftst '(1- 2.5) 1.5)
      (ftsta '(lambda (y) (1- y)) 2.1 1.1)
      (itsta '(lambda (y) (1- (inexact->exact y))) 2.0 1)
      (etst '(1- #f))
      (etst '(1-))
      (etst '(1- 1 2 3))

      (btst '(integer? (random 32)) #t)
      (btst '(real? (random 32.0)) #t)
      (btst '(exact? (random 32.0)) #f)

      (set! dbl-var 32.0)
      (set! int-var 32)
      (set! bool-var #t)

      (itst '(let ((a 1)) a) 1)
      (itst '(let ((a 1) (b 2)) (+ a b)) 3)
      (itst '(let ((int-var 2)) int-var) 2) (if (not (= int-var 32)) (snd-display ";let local trouble: ~A" int-var))
      (itst '(let ((a 1) (b (let ((a 32)) a))) (+ a b)) 33)
      (ftst '(let ((a 1.0)) a) 1.0)
      (ftst '(let ((a 1.5) (b 2.5)) (+ a b)) 4.0)
      (ftst '(let ((dbl-var 2.5)) (+ int-var dbl-var)) 34.5) (if (not (= dbl-var 32.0)) (snd-display ";let flt local trouble: ~A" dbl-var))
      (ftst '(let ((a 1.0) (b (let ((a 32.5)) (set! a 3.5) (+ a 1.0)))) (if (< a 2.0) (+ a b) 0.0)) 5.5)
      (ftst '(let ((dbl-var 2.5)) (set! dbl-var 1.5) dbl-var) 1.5) (if (not (= dbl-var 32.0)) (snd-display ";let flt local trouble: ~A" dbl-var))
      (btst '(let ((a #f)) (not a)) #t)
      (btst '(let ((a #f) (b #t)) (and a b)) #f)
      (btst '(let ((bool-var (not bool-var))) bool-var) #f) (if (not bool-var) (snd-display ";let b local trouble: ~A" bool-var))
      (btst '(let ((a bool-var) (bool-var (let ((a (not bool-var))) a))) bool-var) #f)
      (itst '(let ((a ( + int-var 1))) a) (+ int-var 1))
      (ftsta '(let ((a 1)) (lambda (y) (+ y a))) 2.5 3.5)
      (itsta '(let ((a 1)) (lambda (y) (+ (inexact->exact y) a))) 2.0 3)

      (itst '(let* ((a 1)) a) 1)
      (itst '(let* ((a 1) (b (* 2 a))) (+ a b)) 3)
      (itst '(let* ((int-var 2)) int-var) 2) (if (not (= int-var 32)) (snd-display ";let* local trouble: ~A" int-var))
      (itst '(let* ((a 1) (b (let* ((xx 32) (a xx)) a))) (+ a b)) 33)
      (ftst '(let* ((a 1.0)) a) 1.0)
      (ftst '(let* ((a 1.5) (b (* a 2))) (+ a b)) 4.5)
      (ftst '(let* ((dbl-var 2.5)) (+ int-var dbl-var)) 34.5) (if (not (= dbl-var 32.0)) (snd-display ";let* flt local trouble: ~A" dbl-var))
      (ftst '(let* ((a 1.0) (b (let* ((a 32.5)) (set! a 3.5) (+ a 1.0)))) (if (< a 2.0) (+ a b) 0.0)) 5.5)
      (btst '(let* ((a #f) (b (not a))) (or b a)) #t)
      (btst '(let* ((a #f) (b #t)) (and a b)) #f)
      (ftsta '(let* ((a 1) (b a)) (lambda (y) (+ y a b))) 2.5 4.5)
      (itsta '(let* ((a 1) (b a)) (lambda (y) (+ (inexact->exact y) b))) 2.0 3)
      (itsta '(let ((a 32)) (let* ((a 1) (b a)) (lambda (y) (+ (inexact->exact y) b)))) 2.0 3)
      (itsta '(let ((a 32)) (let ((a 1) (b a)) (lambda (y) (+ (inexact->exact y) b)))) 2.0 34)

      (itst '(let* ((a 1)) (define b 2) (+ a b)) 3)
      (itst '(let* ((a 1)) (define b 2) (define c 3) (+ a b c)) 6)
      (itst '(let* ((a 1) (b 3)) (begin (define b 2) (set! a b)) (+ a b)) 5)
      (itst '(begin (define b 2) (let ((a 1)) (+ a b))) 3)
      (itst '(begin (define b 2) (let ((a 1)) (define b 12) (+ a b))) 13)
      (ftsta '(lambda (y) (define a 3) (+ y a)) 1.0 4.0)
      (ftsta '(lambda (y) (define (a d) (define (b c) (+ c 1)) (+ d (b 3))) (+ y (a 1))) 1.0 6.0)
      (ftsta '(lambda (y) (define (a d) (define b 3) (+ d b)) (+ y (a 1))) 1.0 5.0)
      (ftsta '(lambda (y) (define a (lambda () 3)) (+ y (a))) 1.0 4.0)
      (ftsta '(lambda (y) (define a (lambda () 3)) (+ y (a))) 1.0 4.0)
      (ftsta '(lambda (y) (define a (lambda (b) (+ b 3))) (+ y (a 1))) 1.0 5.0)
      (ftsta '(lambda (y) (define a (lambda (b c) (+ b c))) (+ y (a 1 3))) 1.0 5.0)
      (ftsta '(lambda (y) (define a (lambda (b c) (declare (b real)) (+ b c))) (+ y (a 1.5 3))) 1.0 5.5)
      (ftsta '(lambda (y) (define a (lambda (b c) (declare (b real) (c int)) (+ b c))) (+ y (a 1.5 3))) 1.0 5.5)
      (ftsta '(lambda (y) (define a (lambda (b c) (declare (b int)) (+ b c))) (+ y (a 1 3))) 1.0 5.0)
      (ftsta '(lambda (y) (define a (lambda (b) (declare (b string)) (+ (string-length b) 3))) (+ y (a "hi"))) 1.0 6.0)
      (ftsta '(lambda (y) (define a (lambda (b) (declare (b string)) b)) (+ y (string-length (a "hi")))) 1.0 3.0)
      (ftsta '(lambda (y) (define a (lambda (b) (declare (b string)) b)) (+ y (string-length (a "hi")))) 1.0 3.0)
      (itsta '(lambda (y) (declare (y integer)) (+ y 1)) 1 2)
      (itsta '(lambda (y) (declare (y string)) (string-length y)) "hi" 2)
      (ftsta '(lambda (y) (define (a) 3) (+ y (a))) 1.0 4.0)
      (ftsta '(lambda (y) (define (a) 3) (+ y (a))) 1.0 4.0)
      (ftsta '(lambda (y) (define (a b) (+ b 3)) (+ y (a 1))) 1.0 5.0)
      (ftsta '(lambda (y) (define (a b c) (+ b c)) (+ y (a 1 3))) 1.0 5.0)
      (ftsta '(lambda (y) (define (a b c) (declare (b real)) (+ b c)) (+ y (a 1.5 3))) 1.0 5.5)
      (ftsta '(lambda (y) (define (a b c) (declare (b real) (c int)) (+ b c)) (+ y (a 1.5 3))) 1.0 5.5)
      (ftsta '(lambda (y) (define (a b c) (declare (b int)) (+ b c)) (+ y (a 1 3))) 1.0 5.0)
      (ftsta '(lambda (y) (define (a b) (declare (b string)) (+ (string-length b) 3)) (+ y (a "hi"))) 1.0 6.0)
      (ftsta '(lambda (y) (define (a b) (declare (b string)) b) (+ y (string-length (a "hi")))) 1.0 3.0)
      (ftsta '(lambda (y) (define (a b) (declare (b string)) b) (+ y (string-length (a "hi")))) 1.0 3.0)

      (itst '(let ((a 0)) (do ((i 0 (1+ i))) ((= i 3) a) (set! a (1+ a)))) 3)
      (itst '(let ((a 0)) (do ((i 0 (1+ i)) (j 1 (* j 2))) ((= i 3) a) (set! a j))) 4)
      (itst '(let ((a 0)) (do ((i 0 (1+ i)) (j 1 (* j 2))) ((= i 3) (+ a 1)))) 1)
      (itst '(let ((a 0)) (do ((i 0 (1+ i)) (j 1 (* j 2))) ((= i 3) (+ j 1)))) 9)
      (itst '(let ((a 0)) (do () ((= a 3) a) (set! a (1+ a)))) 3)
      (itst '(let ((a 0)) (do () ((= a 3) a) (set! a (1+ a))) (set! a -1) a) -1)
      (itst '(let ((a 0) (b 3)) (do ((i 0 (1+ i))) ((= i (1- b))) (set! a (1+ a))) (set! a -1) a) -1)

      (itst '(let ((k 123)) (do ((i 0 (1+ i)) (j 0 i)) ((= i 3) k) (set! k j))) 1)
      (itst '(let ((k 123)) (do ((i 0 (1+ i)) (j 0 (+ i 1))) ((= i 3) k) (set! k j))) 2)
      (itst '(let ((k 123)) (do ((i 0 (1+ i)) (j 0 (+ j 1)) (m 0 (+ j 1))) ((= i 3) k) (set! k j))) 2)
      (itst '(let ((k 123)) (do ((i 0 (1+ i)) (j 0)) ((= i 3) k) (set! k j))) 0)
      (itst '(let ((k 123)) (do* ((i 0 (1+ i)) (j 0 i)) ((= i 3) k) (set! k j))) 2)
      (itst '(let ((k 123)) (do* ((i 0 (1+ i)) (j 0 (+ i 1))) ((= i 3) k) (set! k j))) 3)
      (itst '(let ((k 123)) (do* ((i 0 (1+ i)) (j 0)) ((= i 3) k) (set! k j))) 0)

      (itst '(let ((a 0) (b 3)) (if (> b 2) (set! a 2) (set! b 2)) (set! a -1) a) -1)
      (itst '(let ((a 0) (b 3)) (if (< b 2) (set! a 2) (set! b 2)) (set! a -1) a) -1)
      (itst '(let ((a 0) (b 3)) (cond ((> b 2) (set! a 2)) (else (set! b 2))) (set! a -1) a) -1)
      (itst '(let ((a 0) (b 3))
	       (call-with-current-continuation
		(lambda (break)
		  (set! b 3)))
	       (set! a -1) a) -1)
      (itst '(let ((a 0) (b 3))
	       (call-with-current-continuation
		(lambda (break)
		  (if (> b 2) (break))
		  (set! b 3)))
	       (set! a -1) a) -1)
      (itst '(let ((a 0)) a) 0)
      (btst '(do ((i 0 (1+ i))) ((= i 3))) #f)
      (btst '(let ((a 0)) (do ((i 0 (1+ i)) (j 3)) ((= i 3)) (set! a (1+ a)))) #f)
      (btst '(let ((a 0)) (do ((i 0 (1+ i)) (j 3)) ((= i 3)) (set! a (1+ a)))) #f)
      (itst '(let ((a 0)) (do ((i 0 (1+ i)) (j 3)) ((= i 3) j) (set! a (1+ a)))) 3)
      (itst '(let ((a 0)) (do* ((i 0 (1+ i))) ((= i 3) a) (set! a (1+ a)))) 3)
      (itst '(let ((a 0)) (do* ((i 0 (1+ i)) (j (+ i 1) (+ j 1))) ((= i 3) j) (set! a (1+ a)))) 4)
      (itst '(let ((a 0)) (do* ((i 0 (1+ i)) (a (+ i 1) (+ a 1))) ((= i 3)) (set! a (1+ a))) (+ a 1)) 1)
      (itst '(let ((a 32)) (let ((a 3)) (set! a 4)) a) 32)

      (set! int-var 32)
      (itst '(call-with-current-continuation
	      (lambda (return)
		(let ((a 1))
		  (if (even? a) (return a))
		  12)))
	    12)
      (itst '(call-with-current-continuation
	      (lambda (return)
		(let ((a 1))
		  (if (odd? a) (return a))
		  (set! int-var 12)
		  12)))
	    1)
      (if (not (= int-var 32)) (snd-display ";call/cc didn't exit? ~A" int-var))
      (itst '(call-with-current-continuation
	      (lambda (return)
		(let ((a 1))
		  (return a)
		  (set! int-var 12)
		  12)))
	    1)
      (if (not (= int-var 32)) (snd-display ";call/cc 1 didn't exit? ~A" int-var))
      
      (set! dbl-var 32.0)
      (ftst '(call-with-current-continuation
	      (lambda (return)
		(let ((a 1.0))
		  (if (> a 2) (return a))
		  12.0)))
	    12.0)
      (ftst '(call-with-current-continuation
	      (lambda (return)
		(let ((a 1.0))
		  (if (not (= a 0.0)) (return a))
		  (set! dbl-var 12.0)
		  12.0)))
	    1.0)
      (if (not (= dbl-var 32.0)) (snd-display ";call/cc dbl didn't exit? ~A" dbl-var))
      (ftst '(call-with-current-continuation
	      (lambda (return)
		(let ((a 1.0))
		  (return a)
		  (set! dbl-var 12.0)
		  12.0)))
	    1.0)
      (if (not (= dbl-var 32.0)) (snd-display ";call/cc dbl 1 didn't exit? ~A" dbl-var))
      (ftsta '(lambda (y)
		(if (> y 0.0)
		    (call-with-current-continuation
		     (lambda (return)
		       (let ((a 1.0))
			 (if (> y 0.0)
			     (+ y a)
			     (begin
			       (return a)
			       (set! dbl-var 12.0)
			       12.0)))))))
	     1.0
	     2.0)
      (if (not (= dbl-var 32.0)) (snd-display ";call/cc dbl 1 didn't exit? ~A" dbl-var))
      (ftsta '(lambda (y)
		(call-with-current-continuation
		 (lambda (return)
		   (let ((a 1.0))
		     (if (> y 0.0)
			 (+ y a)
			 (begin
			   (return a)
			   (set! dbl-var 12.0)
			   12.0))))))
	     -1.0
	     1.0)
      (if (not (= dbl-var 32.0)) (snd-display ";call/cc dbl 1 didn't exit? ~A" dbl-var))

      (define str-var "hi")
      (set! str-var "")
      (btst '(let ((a 1)
		   (b 1))
	       (let ((cont1 #f)
		     (cont2 #f))
		 (call-with-current-continuation
		  (lambda (x) (set! cont1 x)))
		 (set! a (+ a 2))
		 (set! str-var (string-append str-var "a"))
		 (if cont2
		     (cont2)
		     (begin
		       (call-with-current-continuation
			(lambda (x) 
			  (set! cont2 x)
			  (set! b (+ b 1))
			  (set! str-var (string-append str-var "b"))))
		       (set! b (+ b 2))
		       (set! str-var (string-append str-var "!"))
		       (if (< b 6) (cont1) #f)))))
	    #f)
      (if (not (string=? str-var "ab!a!")) (snd-display ";two continuations: ~A" str-var))

      (define cont1 #f)
      (define cont2 #f)
      (define gv 1)

      (set! str-var "")
      (run-eval
       '(let ((a 1))
	  (call-with-current-continuation
	   (lambda (x) (set! cont1 x)))
	  (set! a (+ a 1))
	  (set! str-var (string-append str-var (number->string gv)))
	  (set! gv (+ gv 2))
	  (set! str-var (string-append str-var " "))
	  (if (and cont2 
		   (< a 10))
	      (cont2))
	  (let ((b 1))
	    (call-with-current-continuation
	     (lambda (x) (set! cont2 x)))
	    (set! b (+ b 1))
	    (set! str-var (string-append str-var (number->string b)))
	    (if (and cont1 
		     (< b 6))
		(cont1)))))
      (if (not (string=? str-var "1 23 35 47 59 6")) (snd-display ";cont2 trouble: ~A" str-var))
      (set! str-var "hi")
      (if (not (keyword? (run-eval '(if (even? 2) :hi :ho)))) 
	  (snd-display ";run -> key: ~A" (run-eval '(if (even? 2) :hi :ho))))
      (if (not (vct? (run-eval '(if (odd? 2) (make-vct 3) (make-vct 2))))) 
	  (snd-display ";run -> vct ~A" (run-eval '(if (odd? 2) (make-vct 3) (make-vct 2)))))

      (itst '(* 1 1 1) 1)
      (itst '(+ 0 0 0) 0)
      (itst '(+ 2 '3) 5)
      (ftst '(+ 2.0 '3.1) 5.1)
      (btst '(and #t '#t) #t)
      (itst '(+ 2 (quote 3)) 5)
      (etst '(+ 2 '(+ 1 2)))
      (etst '(* '#f))
      (etst '(* '"hihi"))
      (ftsta '(lambda (y) (+ y '3.1)) 1.2 4.3)
      (ctst '(quote #\a) #\a)
      (ctst '#\a #\a)
      (itst '3 3)
      (ftst '3.0 3.0)
      (btst '#f #f)

      (define global-v (make-vct 3))
      (btst '(vct? global-v) #t)
      (btst '(vct? 1) #f)
      
      (define c-var #\a)
      (btst '(char? #\a) #t)
      (btst '(char? 3) #f)
      (btst '(char? "hiho") #f)
      (btst '(char? (integer->char 97)) #t)
      (btst '(char? #t) #f)
      (btsta '(lambda (y) (char? (integer->char (inexact->exact y)))) 97 #t)

      (btst '(char>? #\a #\b) #f)
      (btst '(char>? c-var #\b) #f)
      (btst '(char>? #\b #\b) #f)
      (btst '(char>? #\b #\a) #t)
      (btst '(char>? #\b c-var) #t)
      (btst '(char>? #\c #\b #\a) #t)
      (btst '(char>? #\c #\b c-var) #t)
      (btsta '(lambda (y) (char>? (integer->char (inexact->exact y)) #\b)) 97 #f)
      (btsta '(lambda (y) (char>? (integer->char (inexact->exact y)) #\b)) (char->integer #\c) #t)
      
      (btst '(char>=? #\a #\b) #f)
      (btst '(char>=? c-var #\b) #f)
      (btst '(char>=? #\b #\b) #t)
      (btst '(char>=? #\b #\a) #t)
      (btst '(char>=? #\b c-var) #t)
      (btst '(char>=? #\c #\b #\a) #t)
      (btst '(char>=? #\c #\b #\b) #t)
      (btst '(char>=? #\c #\b c-var) #t)
      (btst '(char>=? #\c #\b c-var #\b) #f)
      (btsta '(lambda (y) (char>=? (integer->char (inexact->exact y)) #\b)) 97 #f)
      (btsta '(lambda (y) (char>=? (integer->char (inexact->exact y)) #\b)) (char->integer #\c) #t)
      
      (btst '(char=? #\a #\b) #f)
      (btst '(char=? c-var #\b) #f)
      (btst '(char=? #\b #\b) #t)
      (btst '(char=? #\b #\a) #f)
      (btst '(char=? #\b c-var) #f)
      (btst '(char=? #\c #\b #\a) #f)
      (btst '(char=? #\c #\b #\b) #f)
      (btst '(char=? #\c #\b c-var) #f)
      (btst '(char=? #\c #\b c-var #\b) #f)
      (btsta '(lambda (y) (char=? (integer->char (inexact->exact y)) #\a)) 97 #t)
      (btsta '(lambda (y) (char=? (integer->char (inexact->exact y)) #\b)) (char->integer #\c) #f)
      (btst '(char=? #\+ #\+) #t)
      (btst '(char=? #\space #\space) #t)
      (btst '(char=? #\newline #\+) #f)
      
      (btst '(char<=? #\a #\b) #t)
      (btst '(char<=? c-var #\b) #t)
      (btst '(char<=? #\b #\b) #t)
      (btst '(char<=? #\b #\a) #f)
      (btst '(char<=? #\b c-var) #f)
      (btst '(char<=? #\c #\b #\a) #f)
      (btst '(char<=? #\c #\b #\b) #f)
      (btst '(char<=? #\c #\b c-var) #f)
      (btst '(char<=? #\c #\b c-var #\b) #f)
      (btsta '(lambda (y) (char<=? (integer->char (inexact->exact y)) #\b)) 97 #t)
      (btsta '(lambda (y) (char<=? (integer->char (inexact->exact y)) #\b)) (char->integer #\c) #f)
      
      (btst '(char<? #\a #\b) #t)
      (btst '(char<? c-var #\b) #t)
      (btst '(char<? #\b #\b) #f)
      (btst '(char<? #\b #\a) #f)
      (btst '(char<? #\b c-var) #f)
      (btst '(char<? #\c #\b #\a) #f)
      (btst '(char<? #\c #\b #\b) #f)
      (btst '(char<? #\c #\b c-var) #f)
      (btst '(char<? #\c #\b c-var #\b) #f)
      (btsta '(lambda (y) (char<? (integer->char (inexact->exact y)) #\b)) 97 #t)
      (btsta '(lambda (y) (char<? (integer->char (inexact->exact y)) #\b)) (char->integer #\c) #f)
      (btst '(char<? #\a #\b #\c) #t)
      
      (etst '(char=? #f))
      (etst '(char=? 1.0))
      (etst '(char=? 1.0 2.0))
      (etst '(char=? '(asd) #\c))
      
      (btst '(char-ci<? #\a #\B) #t)
      (btst '(char-ci<? c-var #\b) #t)
      (btst '(char-ci<? #\B #\b) #f)
      (btst '(char-ci<? #\b #\A) #f)
      (btst '(char-ci<? #\B c-var) #f)
      (btst '(char-ci<? #\c #\B #\a) #f)
      (btst '(char-ci<? #\c #\b #\b) #f)
      (btst '(char-ci<? #\C #\b c-var) #f)
      (btst '(char-ci<? #\c #\b c-var #\b) #f)
      (btsta '(lambda (y) (char-ci<? (integer->char (inexact->exact y)) #\B)) 97 #t)
      (btsta '(lambda (y) (char-ci<? (integer->char (inexact->exact y)) #\B)) (char->integer #\c) #f)
      (btst '(char-ci<? #\a #\B #\c) #t)
      
      (btst '(char-ci<=? #\a #\B) #t)
      (btst '(char-ci<=? c-var #\b) #t)
      (btst '(char-ci<=? #\B #\b) #t)
      (btst '(char-ci<=? #\c #\B #\a) #f)
      (btst '(char-ci<=? #\C #\b c-var) #f)
      (btst '(char-ci<=? #\c #\b c-var #\b) #f)
      (btsta '(lambda (y) (char-ci<=? (integer->char (inexact->exact y)) #\B)) 97 #t)
      (btsta '(lambda (y) (char-ci<=? (integer->char (inexact->exact y)) #\B)) (char->integer #\c) #f)
      
      (btst '(char-ci>=? #\a #\B) #f)
      (btst '(char-ci>=? c-var #\b) #f)
      (btst '(char-ci>=? #\B #\b) #t)
      (btst '(char-ci>=? #\c #\B #\a) #t)
      (btst '(char-ci>=? #\C #\b c-var) #t)
      (btst '(char-ci>=? #\c #\b c-var #\b) #f)
      (btsta '(lambda (y) (char-ci>=? (integer->char (inexact->exact y)) #\B)) 97 #f)
      (btsta '(lambda (y) (char-ci>=? (integer->char (inexact->exact y)) #\B)) (char->integer #\c) #t)
      
      (btst '(char-ci>? #\a #\B) #f)
      (btst '(char-ci>? c-var #\b) #f)
      (btst '(char-ci>? #\B #\b) #f)
      (btst '(char-ci>? #\c #\B #\a) #t)
      (btst '(char-ci>? #\C #\b c-var) #t)
      (btst '(char-ci>? #\c #\b c-var #\b) #f)
      (btsta '(lambda (y) (char-ci>? (integer->char (inexact->exact y)) #\B)) 97 #f)
      (btsta '(lambda (y) (char-ci>? (integer->char (inexact->exact y)) #\B)) (char->integer #\c) #t)
      
      (btst '(char-ci=? #\a #\B) #f)
      (btst '(char-ci=? c-var #\b) #f)
      (btst '(char-ci=? #\B #\b) #t)
      (btst '(char-ci=? #\c #\B #\a) #f)
      (btst '(char-ci=? #\C #\b c-var) #f)
      (btst '(char-ci=? #\c #\b c-var #\b) #f)
      (btsta '(lambda (y) (char-ci=? (integer->char (inexact->exact y)) #\B)) 97 #f)
      (btsta '(lambda (y) (char-ci=? (integer->char (inexact->exact y)) #\B)) (char->integer #\c) #f)
      
      (btst '(char-alphabetic? #\a) #t)
      (btst '(char-alphabetic? #\T) #t)
      (btst '(char-alphabetic? #\+) #f)
      (btst '(char-alphabetic? #\8) #f)
      (btsta '(lambda (y) (char-alphabetic? (integer->char (inexact->exact y)))) (exact->inexact (char->integer #\8)) #f)
      
      (btst '(char-numeric? #\a) #f)
      (btst '(char-numeric? #\T) #f)
      (btst '(char-numeric? #\+) #f)
      (btst '(char-numeric? #\8) #t)
      (btsta '(lambda (y) (char-numeric? (integer->char (inexact->exact y)))) (exact->inexact (char->integer #\8)) #t)
      
      (btst '(char-lower-case? #\a) #t)
      (btst '(char-lower-case? #\T) #f)
      (btst '(char-lower-case? #\+) #f)
      (btst '(char-lower-case? #\8) #f)
      (btsta '(lambda (y) (char-lower-case? (integer->char (inexact->exact y)))) (exact->inexact (char->integer #\B)) #f)
      
      (btst '(char-upper-case? #\a) #f)
      (btst '(char-upper-case? #\T) #t)
      (btst '(char-upper-case? #\+) #f)
      (btst '(char-upper-case? #\8) #f)
      (btsta '(lambda (y) (char-upper-case? (integer->char (inexact->exact y)))) (exact->inexact (char->integer #\B)) #t)
      
      (btst '(char-whitespace? #\a) #f)
      (btst '(char-whitespace? #\T) #f)
      (btst '(char-whitespace? #\space) #t)
      (btst '(char-whitespace? #\8) #f)
      (btsta '(lambda (y) (char-whitespace? (integer->char (inexact->exact y)))) (exact->inexact (char->integer #\B)) #f)
      
      (ctst '(char-upcase #\a) #\A)
      (ctsta '(lambda (y) (char-upcase (integer->char (inexact->exact y)))) 97.0 #\A)
      (ctst '(char-downcase #\A) #\a)
      (ctsta '(lambda (y) (char-downcase (integer->char (inexact->exact y)))) 65.0 #\a)
      (ctst '(integer->char 65) #\A)
      (itst '(char->integer #\A) 65)
      (itst '(char->integer #\newline) 10)
      (ctst '(integer->char 48) #\0)
      
      (ctst '(let ((cv #\a)) (set! cv #\b) cv) #\b)
      (ctst '(let ((cv #\a)) (set! c-var #\b) cv) #\a)
      (if (not (char=? c-var #\b)) (snd-display ";set c-var: ~A" c-var))
      (ctsta '(lambda (y) (let ((cv (integer->char (inexact->exact y)))) (set! cv #\b) cv)) 97 #\b)
      (ctsta '(lambda (y) (let ((cv (integer->char (inexact->exact y)))) (set! c-var cv) cv)) 97 #\a)
      (if (not (char=? c-var #\a)) (snd-display ";set c-var: ~A" c-var))

      (btst '(string? "hi") #t)
      (btst '(string? 3) #f)
      (btst '(string? #\a) #f)
      (btst '(string? str-var) #t)
      (btsta '(lambda (y) (string? "hiho")) 1 #t)
      
      (stst '(string #\a #\b) "ab")
      (stst '(string #\a #\b (integer->char 65)) "abA")
      (stst '(string) "")
      (stst '(string #\a) "a")
      (ststa '(lambda (y) (string #\a #\!)) 1 "a!")
      (etst '(string 1))
      (etst '(string "hi"))
      (stst '(if #t "hi" "ho") "hi")
      (stst '(if #f "hi" "ho") "ho")
      (ststa '(lambda (y) (if (> y 1.0) "hi" "ho")) 0.0 "ho")
      (itst '(if #t 3 2) 3)
      (itst '(if #f 3 2) 2)
      (itsta '(lambda (y) (if (> y 1.0) 3 2)) 0.0 2)
      (ftst '(if #t 1.5 2.5) 1.5)
      (ftst '(if #f 1.5 2.5) 2.5)
      (ftsta '(lambda (y) (if (> y 1.0) 3.1 2.1)) 0.0 2.1)
      (btst '(if #f #f #t) #t)
      (btst '(let ((v (make-vct 3))) (vct? (if #t v))) #t)
      (btst '(let ((v (make-vector 3 1.0))) (vct? (if #t v))) #t)
      (etst '(let ((v (make-vector 3 1))) (vct? (if #t v))))
      (btst '(let ((v (make-vector 3))) (vct? (if #t v))) #t)
      (etst '(let ((v (make-vector 3 (make-vct 3)))) (vct? (if #t v))))
      (btsta '(lambda (y) (let ((v (make-vct 3))) (vct? (if (> y 1.0) v)))) 2.0 #t)

      (itst '(string-length "abc") 3)
      (itst '(string-length str-var) 2)
      (itsta '(lambda (y) (string-length (string #\a (integer->char (inexact->exact y))))) 65 2)

      (stst '(string-copy "hi") "hi")
      (stst '(string-copy (string #\a #\b)) "ab")
      (stst '(string-copy str-var) "hi")
      (ststa '(lambda (y) (string-copy (string (integer->char (inexact->exact y)) #\!))) 65 "A!")
      (etst '(string-copy #\a))
      (etst '(string-copy))
      (etst '(string-copy 123))

      (stst '(let ((str "asdfg")) (string-fill! str #\x) str) "xxxxx")
      (stst '(let ((str "asdf")) (string-set! str 1 #\x) str) "axdf")
      (ctst '(string-ref "asdf" 2) #\d)
      (etst '(string-ref 123))
      (etst '(string-ref "hi" "ho"))
      (etst '(string-set! "hi" 1 "c"))
      (etst '(string-set! "hi" 1 #\b))
      (etst '(string-fill! "hi" "ho"))
      (etst '(string-fill! "hi" #\b))
      (stst '(make-string 3) "   ")
      (stst '(make-string 3 #\a) "aaa")

      (set! str-var "a")
      (btst '(string>? "a" "b") #f)
      (btst '(string>? str-var "b") #f)
      (btst '(string>? "b" "b") #f)
      (btst '(string>? "b" "a") #t)
      (btst '(string>? "b" str-var) #t)
      (btst '(string>? "c" "b" "a") #t)
      (btst '(string>? "c" "b" str-var) #t)
      (btsta '(lambda (y) (string>? (string (integer->char (inexact->exact y))) "b")) 97 #f)
      (btsta '(lambda (y) (string>? (string (integer->char (inexact->exact y))) "b")) (char->integer #\c) #t)
      
      (btst '(string>=? "a" "b") #f)
      (btst '(string>=? str-var "b") #f)
      (btst '(string>=? "b" "b") #t)
      (btst '(string>=? "b" "a") #t)
      (btst '(string>=? "b" str-var) #t)
      (btst '(string>=? "c" "b" "a") #t)
      (btst '(string>=? "c" "b" "b") #t)
      (btst '(string>=? "c" "b" str-var) #t)
      (btst '(string>=? "c" "b" str-var "b") #f)
      (btsta '(lambda (y) (string>=? (string (integer->char (inexact->exact y))) "b")) 97 #f)
      (btsta '(lambda (y) (string>=? (string (integer->char (inexact->exact y))) "b")) (char->integer #\c) #t)
      
      (btst '(string=? "a" "b") #f)
      (btst '(string=? str-var "b") #f)
      (btst '(string=? "b" "b") #t)
      (btst '(string=? "b" "a") #f)
      (btst '(string=? "b" str-var) #f)
      (btst '(string=? "c" "b" "a") #f)
      (btst '(string=? "c" "b" "b") #f)
      (btst '(string=? "c" "b" str-var) #f)
      (btst '(string=? "c" "b" str-var "b") #f)
      (btsta '(lambda (y) (string=? (string (integer->char (inexact->exact y))) "a")) 97 #t)
      (btsta '(lambda (y) (string=? (string (integer->char (inexact->exact y))) "b")) (char->integer #\c) #f)
      (btst '(string=? "+" "+") #t)
      
      (btst '(string<=? "a" "b") #t)
      (btst '(string<=? str-var "b") #t)
      (btst '(string<=? "b" "b") #t)
      (btst '(string<=? "b" "a") #f)
      (btst '(string<=? "b" str-var) #f)
      (btst '(string<=? "c" "b" "a") #f)
      (btst '(string<=? "c" "b" "b") #f)
      (btst '(string<=? "c" "b" str-var) #f)
      (btst '(string<=? "c" "b" str-var "b") #f)
      (btsta '(lambda (y) (string<=? (string (integer->char (inexact->exact y))) "b")) 97 #t)
      (btsta '(lambda (y) (string<=? (string (integer->char (inexact->exact y))) "b")) (char->integer #\c) #f)
      
      (btst '(string<? "a" "b") #t)
      (btst '(string<? str-var "b") #t)
      (btst '(string<? "b" "b") #f)
      (btst '(string<? "b" "a") #f)
      (btst '(string<? "b" str-var) #f)
      (btst '(string<? "c" "b" "a") #f)
      (btst '(string<? "c" "b" "b") #f)
      (btst '(string<? "c" "b" str-var) #f)
      (btst '(string<? "c" "b" str-var "b") #f)
      (btsta '(lambda (y) (string<? (string (integer->char (inexact->exact y))) "b")) 97 #t)
      (btsta '(lambda (y) (string<? (string (integer->char (inexact->exact y))) "b")) (char->integer #\c) #f)
      (btst '(string<? "a" "b" "c") #t)
      
      (etst '(string=? #f))
      (etst '(string=? 1.0))
      (etst '(string=? 1.0 2.0))
      
      (btst '(string-ci<? "a" "b") #t)
      (btst '(string-ci<? str-var "b") #t)
      (btst '(string-ci<? "b" "b") #f)
      (btst '(string-ci<? "b" "a") #f)
      (btst '(string-ci<? "b" str-var) #f)
      (btst '(string-ci<? "c" "b" "a") #f)
      (btst '(string-ci<? "c" "b" "b") #f)
      (btst '(string-ci<? "c" "b" str-var) #f)
      (btst '(string-ci<? "c" "b" str-var "b") #f)
      (btsta '(lambda (y) (string-ci<? (string (integer->char (inexact->exact y))) "b")) 97 #t)
      (btsta '(lambda (y) (string-ci<? (string (integer->char (inexact->exact y))) "b")) (char->integer #\c) #f)
      (btst '(string-ci<? "a" "b" "c") #t)
      
      (btst '(string-ci<=? "a" "b") #t)
      (btst '(string-ci<=? str-var "b") #t)
      (btst '(string-ci<=? "b" "b") #t)
      (btst '(string-ci<=? "c" "b" "a") #f)
      (btst '(string-ci<=? "c" "b" str-var) #f)
      (btst '(string-ci<=? "c" "b" str-var "b") #f)
      (btsta '(lambda (y) (string-ci<=? (string (integer->char (inexact->exact y))) "b")) 97 #t)
      (btsta '(lambda (y) (string-ci<=? (string (integer->char (inexact->exact y))) "b")) (char->integer #\c) #f)
      
      (btst '(string-ci>=? "a" "b") #f)
      (btst '(string-ci>=? str-var "b") #f)
      (btst '(string-ci>=? "b" "b") #t)
      (btst '(string-ci>=? "c" "b" "a") #t)
      (btst '(string-ci>=? "c" "b" str-var) #t)
      (btst '(string-ci>=? "c" "b" str-var "b") #f)
      (btsta '(lambda (y) (string-ci>=? (string (integer->char (inexact->exact y))) "b")) 97 #f)
      (btsta '(lambda (y) (string-ci>=? (string (integer->char (inexact->exact y))) "b")) (char->integer #\c) #t)
      
      (btst '(string-ci>? "a" "b") #f)
      (btst '(string-ci>? str-var "b") #f)
      (btst '(string-ci>? "b" "b") #f)
      (btst '(string-ci>? "c" "b" "a") #t)
      (btst '(string-ci>? "c" "b" str-var) #t)
      (btst '(string-ci>? "c" "b" str-var "b") #f)
      (btsta '(lambda (y) (string-ci>? (string (integer->char (inexact->exact y))) "b")) 97 #f)
      (btsta '(lambda (y) (string-ci>? (string (integer->char (inexact->exact y))) "b")) (char->integer #\c) #t)
      
      (btst '(string-ci=? "a" "b") #f)
      (btst '(string-ci=? str-var "b") #f)
      (btst '(string-ci=? "b" "b") #t)
      (btst '(string-ci=? "c" "b" "a") #f)
      (btst '(string-ci=? "c" "b" str-var) #f)
      (btst '(string-ci=? "c" "b" str-var "b") #f)
      (btsta '(lambda (y) (string-ci=? (string (integer->char (inexact->exact y))) "b")) 97 #f)
      (btsta '(lambda (y) (string-ci=? (string (integer->char (inexact->exact y))) "b")) (char->integer #\c) #f)
      (set! str-var "hi")

      (stst '(let ((str "asdfg")) (string-fill! str #\x) str) "xxxxx")
      (stst '(begin (set! str-var "ho") str-var) "ho")
      (if (not (string=? str-var "ho")) (snd-display ";global str not reset upon exit? ~A" str-var))
      (ststa '(lambda (y) (begin (set! str-var (string #\c #\b #\a)) str-var)) 0 "cba")
      (if (not (string=? str-var "cba")) (snd-display ";global str not reset upon lambda exit? ~A" str-var))
      (stst '(let ((str (make-string 4 #\a))) str) "aaaa")
      (stst '(let ((str (make-string 4 #\a))) (string-set! str 0 #\b) str) "baaa")
      (itst '(let ((str (make-string 4 #\a))) (string-set! str 0 #\b) (string-length str)) 4)
      (itsta '(lambda (y) (let ((str (make-string 4 #\a))) (string-set! str 0 #\b) (string-length str))) 0 4)
      (stst '(let ((str (make-string 4 #\a))) (string-set! str 0 #\b) (set! str-var "a") (set! str (string (string-ref str-var 0))) str) "a")

      (stst '(substring "012345" 0 1) "0")
      (stst '(substring "012345" 0 0) "")
      (stst '(substring "012345" 1 4) "123")
      (set! str-var "012345")
      (stst '(substring str-var 1 4) "123")
      (etst '(substring "asdfg"))
      (etst '(substring "asdfg" "hi"))
      (etst '(substring "asdfg" 0 3 123))
      (etst '(substring "hi" 3 4))
      (etst '(substring "hi" 3 2))
      (ststa '(lambda (y) (substring "012345" 1 (inexact->exact y))) 4 "123")
      (ststa '(lambda (y) (substring "012345" (inexact->exact y) 1)) 1 "")
      (ststa '(lambda (y) (substring "hi" 2 (inexact->exact y))) 4 "") ; should send error
      (ststa '(lambda (y) (substring (make-string 6 (integer->char (inexact->exact y))) 2 4)) 65 "AA")
      (ststa '(lambda (y) (let ((str (make-string 6 (integer->char (inexact->exact y))))) (string-set! str 0 #\b) (substring str 0 2))) 65 "bA")
      (stst '(string-append "a" "bc") "abc")
      (stst '(string-append "hi") "hi")
      (stst '(string-append "01" "2" "345") "012345")
      (set! str-var "01")
      (stst '(string-append str-var "2" "345") "012345")
      (btst '(string? (string-append)) #t)
      (stst '(string-append str-var) str-var)
      (ststa '(lambda (y) (string-append str-var (string (integer->char (inexact->exact y)) #\1 #\2) "345")) 48 "01012345")
      (etst '(make-string "hi"))
      (etst '(make-string 3 3.14))

      (stst '(number->string 1) "1")
      (stst '(number->string 3 2) "11")
      (stst '(number->string 1.5) "1.5")
      (stst '(number->string 1.5 10) "1.5") ; actually radix is ignored here by scheme
      (ststa '(lambda (y) (number->string y)) 1.5 "1.5")
      (ststa '(lambda (y) (number->string (inexact->exact y))) 1.0 "1")
      (ststa '(lambda (y) (number->string y 10)) 1.0 "1.0")
      (ststa '(lambda (y) (number->string (inexact->exact y) 2)) 1.0 "1")
      (ststa '(lambda (y) (number->string 3 (inexact->exact y))) 2.0 "11")

      (etst '(snd-print #f))
      (etst '(snd-warning #f))
      (etst '(string-ref #f 1))
      (etst '(string-fill! #f #\c))
      (etst '(string-set! #f 1 #\c))

      (stst '(format #f "hiho: ~D" 43) "hiho: 43")
      (stst '(format #f "~,4F ~,3F" 3.14 (sqrt 3.0)) "3.1400 1.732")
      (stst '(format #f "~A: ~A" "hiho" '(3 4)) "hiho: (3 4)")
      (stst '(format #f "~A: ~C ~A" (> 2 3) #\c (make-vct 2 .1)) "#f: c #<vct[len=2]: 0.100 0.100>")
      (stst '(format #f "~A: ~X" '(a . b) 23) "(a . b): 17")
      (stst '(format #f "~,3E" 3.14159) "3.142E+0")
      (stst '(format #f "hi~16Tho") "hi              ho")
      (stst '(format #f "~{~D ~}" '(1 2 3)) "1 2 3 ")
      (stst '(clm-print "hiho: ~D" 43) "hiho: 43")

      (btst '(sample-reader? "hi") #f)
      (btst '(sample-reader? #t) #f)

      (ftst '(let ((v (make-vct 3))) (vct-set! v 1 32.1) (vct-ref v 1)) 32.1)
      (ftst '(let ((v (make-vector 3 0.0))) (vct-set! v 1 32.1) (vct-ref v 1)) 32.1)
      (ftst '(let ((v (make-vct 3))) (vct-set! v 1 3.0) (vct-scale! v 2.0) (vct-ref v 1)) 6.0)
      (ftst '(let ((v (make-vct 3))) (set! int-var 2) (vct-set! v 1 3.0) (vct-scale! v int-var) (vct-ref v 1)) 6.0)
      (ftst '(let ((v (make-vct 3))) (vct-set! v 1 3.0) (vct-add! v v) (vct-ref v 1)) 6.0)
      (ftst '(let ((v (make-vct 3))) (vct-set! v 1 3.0) (vct-multiply! v v) (vct-ref v 1)) 9.0)
      (ftst '(let ((v (make-vct 3))) (vct-set! v 1 3.0) (vct-subtract! v v) (vct-ref v 1)) 0.0)
      (ftst '(let ((v (make-vct 3))) (set! (vct-ref v 2) 3.0) (vct-offset! v 17) (vct-ref v 2)) 20.0)
      (ftst '(let ((v (make-vct 3))) (set! (vct-ref v 0) 3.0) (vct-fill! v 7) (vct-ref v 0)) 7.0)
      (ftst '(let ((v (make-vct 3))) (vct-fill! v 3.14) (let ((v1 (vct-copy v))) (vct-ref v1 2))) 3.14)
      (ftst '(let ((v (make-vct 3))) (vct-fill! v 1.0) (vct-ref (vct-scale! v 2.0) 1)) 2.0)
      (ftst '(let ((v (make-vct 3))) (vct-fill! v 1.0) (vct-ref (vct-scale! (vct-add! v v) 2.0) 1)) 4.0)
      (ftst '(let ((v (make-vct 3))) (set! (vct-ref v 1) 1.0) (vct-ref v 1)) 1.0)
      (ftst '(vct-ref (vct .1 .2) 0) .1)
      (ftst '(vct-ref (vct .1 .2 .3 .4) 2) .3)

      (itst '(case 1 ((1) 4) ((2 3) 5)) 4)
      (stst '(case 2 ((1) "hi") ((2 3) "ho")) "ho")
      (itsta '(lambda (y) (declare (y integer)) (case y ((1) (let ((a y)) (+ a 1))) ((2 3 4) (* y 2)))) 1 2)
      (itsta '(lambda (y) (declare (y integer)) (case y ((1) (let ((a y)) (+ a 1))) ((2 3 4) (* y 2)))) 3 6)
      (itst '(case 1 ((1) 4) ((2 3) 5) (else 123)) 4)
      (itst '(case 3 ((1) 4) ((2 3) 5) (else 123)) 5)
      (itst '(case 10 ((1) 4) ((2 3) 5) (else 123)) 123)
      (etst '(case 10 ((1) 4) ((2 3) .5) (else 123)))
      (etst '(case 10 ((1) 4) ((2 1.3) 5) (else 123)))

      (etst '(let ((a 1)) (if (> a 0) 2 (list 1 2))))
      (etst '(let ((a 1)) (if (> a 0) 2 "hi")))
      (btst '(let ((a 1)) (cond ((> a 0)))) #t)
      (etst '(let ((a 1)) (cond ((> a 0) (list 1 2)))))
      (etst '(let ((a 1)) (cond ((> a 1) 2) ((> a 0) "hi"))))
      (etst '(do ((i 0 (1+ i))) ("hi" 3)))
      (etst '(do ((i 0 (1+ i))) ((= i 3) (list 1 2)) (+ 1 2)))
      (etst '(do ((i 0 (1+ i)) (j 0 (1+ i))) ((= i 3)) (hiho 3)))
      (etst '(do ((i 0 (1+ i)) (j 0 (1+ i)) (k 0 (hiho k))) ((= i 3)) 0))
      (etst '(call/cc (lambda (break) (let ((a 1)) (if (> a 0) (break 3) (break "hi"))))))
      (etst '(call/cc (lambda (break) (let ((a 1)) (if (> a 0) (break 3)) (break "hi")))))
      (etst '(let ((a 1)) (or (> a 1) "hi"))) ; kinda stupid -- run should handle this!
      (etst '(let ((a 1)) (and (> a 1) "hi"))) ; kinda stupid -- run should handle this!
      (etst '(let ((v0 (make-vct 1)) (v1 (make-vct 1))) (set! v0 v1)))

      (itst '(cond ((> 1 0) 1)) 1)
      (itst '(cond ((> 1 0) 1) ((< 0 1) 2)) 1)
      (itst '(cond ((< 1 0) 1) ((< 0 1) 2)) 2)
      (itst '(cond ((< 1 0) 1) ((> 0 1) 2) (else 3)) 3)
      (itst '(cond ((< 1 0) 1) ((< 0 1) (* 3 2) 2) (else 3)) 2)
      (itsta '(lambda (y) (cond ((> y 0.0) y) ((< y 0.0) (abs y)) (else (- y 100.0)))) 1.0 1.0)
      (ftsta '(lambda (y) (cond ((> y 0.0) y) ((< y 0.0) (abs y)) (else (- y 100.0)))) -1.0 1.0)
      (ftsta '(lambda (y) (cond ((> y 0.0) y) ((< y 0.0) (abs y)) (else (- y 100.0)))) 0.0 -100.0)
      (ftsta '(lambda (y) (cond ((> y 0.0) y) ((< y 0.0) (abs y)) (else (- y 100.0)))) 1.0 1.0)
      (set! dbl-var 0.0)
      (ftsta '(lambda (y) (cond ((> y 0.0) (let ((a (+ y 2))) (* a 2)))
				((< y 0.0) (abs y)) 
				(else (set! dbl-var 1.0)
				      (if (> dbl-var 0.0)
					  (+ y (* dbl-var 2))
					  (- y 100.0))))) 
	     1.0 6.0)
      (if (fneq dbl-var 0.0) (snd-display ";cond mid dbl (0.0): ~A" dbl-var))
      (ftsta '(lambda (y) (cond ((> y 0.0) (let ((a (+ y 2))) (* a 2)))
				((< y 0.0) (abs y)) 
				(else (set! dbl-var 1.0)
				      (if (> dbl-var 0.0)
					  (+ y (* dbl-var 2))
					  (- y 100.0))))) 
	     -1.0 1.0)
      (if (fneq dbl-var 0.0) (snd-display ";cond dbl (0.0): ~A" dbl-var))
      (ftsta '(lambda (y) (cond ((> y 0.0) (let ((a (+ y 2))) (* a 2)))
				((< y 0.0) (abs y)) 
				(else (set! dbl-var 1.0)
				      (if (> dbl-var 0.0)
					  (+ y (* dbl-var 2))
					  (- y 100.0))))) 
	     0.0 2.0)
      (if (fneq dbl-var 1.0) (snd-display ";cond dbl (1.0): ~A" dbl-var))
      (ststa '(lambda (y) (cond ((> y 0.0) "hi") ((< y 0.0) "ho") (else "ha"))) 1.0 "hi")
      (ststa '(lambda (y) (cond ((> y 0.0) "hi") ((< y 0.0) "ho") (else "ha"))) 0.0 "ha")
      (ststa '(lambda (y) (cond ((> y 0.0) "hi") ((< y 0.0) "ho") (else "ha"))) -1.0 "ho")

      (define pair-var (cons 2 3))
      (btst (list 'pair? pair-var) #t)
      (btst (list 'list? pair-var) #f)
      (btst (list 'pair? int-var) #f)
      (itst (list 'car pair-var) 2)
      (itst (list 'cdr pair-var) 3)
      (itsta '(lambda (y) (car pair-var)) 0.0 2)
      (itsta '(lambda (y) (cdr pair-var)) 0.0 3)
      (let ((pv (cons 123 321))) (run (lambda () (set! int-var (car pv)))))
      (if (not (= int-var 123)) (snd-display ";car local pv: ~A" int-var))
      (let ((pv (cons 123 321))) (run (lambda () (set! int-var (cdr pv)))))
      (if (not (= int-var 321)) (snd-display ";cdr local pv: ~A" int-var))
      (let ((pv (cons 123 321))) (run (lambda () (set! int-var (if (pair? pv) 1 0)))))
      (if (not (= int-var 1)) (snd-display ";pair? local pv: ~A" int-var))

      (define list-var (list 2 3 4 5))
      (btst '(list? list-var) #t)
      (btst '(list? int-var) #f)
      (btsta '(lambda (y) (list? list-var)) 0.0 #t)
      (btsta '(lambda (y) (list? dbl-var)) 0.0 #f)
      (run (lambda () (set! int-var (car list-var))))
      (if (not (= int-var 2)) (snd-display ";car run lst: ~A" int-var))
      (itsta '(lambda (y) (car list-var)) 0.0 2)
      (itsta '(lambda (y) (cadr list-var)) 0.0 3)
      (itsta '(lambda (y) (caddr list-var)) 0.0 4)
      (itsta '(lambda (y) (cadddr list-var)) 0.0 5)
      (itst '(car list-var) 2)
      (itst '(cadr list-var) 3)
      (itst '(caddr list-var) 4)
      (itst '(cadddr list-var) 5)
      (itst '(list-ref list-var 1) 3)
      (set! list-var (list (list 2 3 6) (list 4 5)))
      (itst '(caar list-var) 2)
      (itst '(cadar list-var) 3)
      (itst '(caddar list-var) 6)
      (itst '(caadr list-var) 4)
      (itst '(cadadr list-var) 5)
      (itsta '(lambda (y) (caar list-var)) 0.0 2)
      (itsta '(lambda (y) (cadar list-var)) 0.0 3)
      (itsta '(lambda (y) (caddar list-var)) 0.0 6)
      (itsta '(lambda (y) (caadr list-var)) 0.0 4)
      (itsta '(lambda (y) (cadadr list-var)) 0.0 5)
      (set! list-var (list (list (list 2 3 6 7)) (list (list 4 5))))
      (itst '(caaar list-var) 2)
      (itst '(cadaar list-var) 3)
      (itst '(caaadr list-var) 4)
      (itsta '(lambda (y) (caaar list-var)) 0.0 2)
      (itsta '(lambda (y) (cadaar list-var)) 0.0 3)
      (itsta '(lambda (y) (caaadr list-var)) 0.0 4)
      (let ((lv (list 321 123))) (run (lambda () (set! int-var (car lv)))))
      (if (not (= int-var 321)) (snd-display ";car run local lst: ~A" int-var))
      (let ((lv (list 321 123))) (run (lambda () (set! int-var (cadr lv)))))
      (if (not (= int-var 123)) (snd-display ";cadr run local lst: ~A" int-var))
      (let ((lv (list 321 123))) (run (lambda () (set! int-var (list-ref lv 0)))))
      (if (not (= int-var 321)) (snd-display ";list-ref 0 run local lst: ~A" int-var))
      (btst '(null? list-var) #f)
      (let ((lv '())) (run (lambda () (set! int-var (if (null? lv) 1 0)))))
      (if (not (= int-var 1)) (snd-display ";null? run local lst: ~A" int-var))
      (itst '(length list-var) 2)
      (let ((lv (list 321 123))) (run (lambda () (set! int-var (length lv)))))
      (if (not (= int-var 2)) (snd-display ";length run local lst: ~A" int-var))
      (set! list-var (list 2.5 3 "hiho" #t))
      (run (lambda () (set! int-var (cadr list-var))))
      (if (not (= int-var 3)) (snd-display ";cadr run lst: ~A" int-var))
      (ftsta '(lambda (y) (car list-var)) 0.0 2.5)
      (itsta '(lambda (y) (cadr list-var)) 0.0 3)
      (ststa '(lambda (y) (caddr list-var)) 0.0 "hiho")
      (btsta '(lambda (y) (cadddr list-var)) 0.0 #t)

      (set! list-var (list (list (list (list 2 3 6 7)) (list 4 5)) 17 (list 12 (list (list 14 15)))))
      (itst '(caaaar list-var) 2)
      (itst '(caadar list-var) 4)
      (itst '(caaddr list-var) 12)
      (itsta '(lambda (y) (caaaar list-var)) 0.0 2)
      (itsta '(lambda (y) (caadar list-var)) 0.0 4)
      (itsta '(lambda (y) (caaddr list-var)) 0.0 12)

      (itst '(car '(1 . 2)) 1)
      (itst '(cdr '(1 . 2)) 2)
      (itst '(cadr '(3 4)) 4)
      (btst '(null? '()) #t)
      (btst '(null? '(1)) #f)
      (itst '(vector-ref '#(0 1 2) 2) 2)
      (ftst '(vector-ref '#(0.1 1.1 2.1) 1) 1.1)

      (let ((val (run-eval '(lambda (v) (declare (v char)) (char->integer v)) #\b)))
	(if (not (= val 98)) (snd-display ";char as arg to run: ~A" val)))
      (let ((val (run-eval '(lambda (v) (declare (v integer)) (1+ v)) 32)))
	(if (not (= val 33)) (snd-display ";integer as arg to run: ~A" val)))
      (let ((val (run-eval '(lambda (v) (declare (v real)) (* v 2)) 1.3)))
	(if (fneq val 2.6) (snd-display ";real as arg to run: ~A" val)))
      (let ((val (run-eval '(lambda (v) (declare (v string)) (string-length v)) "hiho")))
	(if (not (= val 4)) (snd-display ";string as arg to run: ~A" val)))
      (let ((val (run-eval '(lambda (v) (declare (v boolean)) (not v)) #t)))
	(if val (snd-display ";boolean as arg to run: ~A" val)))
      (let ((val (run-eval '(lambda (gen) (declare (gen clm)) (mus-frequency gen)) (make-oscil 440))))
	(if (fneq val 440.0) (snd-display ";clm gen as arg to run: ~A" val)))
      (let ((val (run-eval '(lambda (v) (declare (v vct)) (vct-ref v 0)) (make-vct 3 1.5))))
	(if (fneq val 1.5) (snd-display ";vct as arg to run: ~A" val)))
      (let ((val (run-eval '(lambda (y) (let ((ge (make-env '(0 1 1 1) :end 10))) (env ge))) 0.0)))
	(if (fneq val 1.0) (snd-display ";make-env in run: ~A" val)))
      (define l0111 (list 0 1 1 1))
      (let ((val (run-eval '(lambda (y) (let ((ge (make-env l0111 :end 10))) (env ge))) 0.0)))
	(if (fneq val 1.0) (snd-display ";make-env in run with var list: ~A" val)))

      (define v (make-vct 8))

      (btst '(let ((gen (make-all-pass))) (all-pass? gen)) #t)
      (btst '(let ((gen (make-asymmetric-fm))) (asymmetric-fm? gen)) #t)
      (btst '(let ((gen (make-buffer))) (buffer? gen)) #t)
      (btst '(let ((gen (make-comb))) (comb? gen)) #t)
      (btst '(let ((gen (make-convolve :filter v))) (convolve? gen)) #t)
      (btst '(let ((gen (make-delay))) (delay? gen)) #t)
      (btst '(let ((gen (make-env '(0 0 1 1)))) (env? gen)) #t)
      (btst '(let ((gen (make-file->frame "oboe.snd"))) (file->frame? gen)) #t)
      (btst '(let ((gen (make-file->sample "oboe.snd"))) (file->sample? gen)) #t)
      (btst '(let ((gen (make-filter 8 v v))) (filter? gen)) #t)
      (btst '(let ((gen (make-fir-filter 8 v))) (fir-filter? gen)) #t)
      (btst '(let ((gen (make-formant))) (formant? gen)) #t)
      (btst '(let ((gen (make-frame 2))) (frame? gen)) #t)
      ;;(btst '(let ((gen (make-frame->file))) (frame->file? gen)) #t)
      (btst '(let ((gen (make-granulate))) (granulate? gen)) #t)
      (btst '(let ((gen (make-iir-filter 8 v))) (iir-filter? gen)) #t)
      (btst '(let ((gen (make-locsig))) (locsig? gen)) #t)
      (btst '(let ((gen (make-mixer 2))) (mixer? gen)) #t)
      (btst '(let ((gen (make-notch))) (notch? gen)) #t)
      (btst '(let ((gen (make-one-pole))) (one-pole? gen)) #t)
      (btst '(let ((gen (make-one-zero))) (one-zero? gen)) #t)
      (btst '(let ((gen (make-oscil 440.0))) (oscil? gen)) #t)
      (btst '(let ((gen (make-phase-vocoder))) (phase-vocoder? gen)) #t)
      (btst '(let ((gen (make-ppolar))) (two-pole? gen)) #t)
      (btst '(let ((gen (make-pulse-train))) (pulse-train? gen)) #t)
      (btst '(let ((gen (make-rand))) (rand? gen)) #t)
      (btst '(let ((gen (make-rand-interp))) (rand-interp? gen)) #t)
      (btst '(let ((gen (make-readin "oboe.snd"))) (readin? gen)) #t)
      ;;(btst '(let ((gen (make-sample->file))) (sample->file? gen)) #t)
      (btst '(let ((gen (make-sawtooth-wave))) (sawtooth-wave? gen)) #t)
      (btst '(let ((gen (make-sine-summation))) (sine-summation? gen)) #t)
      (btst '(let ((gen (make-square-wave))) (square-wave? gen)) #t)
      (btst '(let ((gen (make-src))) (src? gen)) #t)
      (btst '(let ((gen (make-sum-of-cosines))) (sum-of-cosines? gen)) #t)
      (btst '(let ((gen (make-table-lookup))) (table-lookup? gen)) #t)
      (btst '(let ((gen (make-triangle-wave))) (triangle-wave? gen)) #t)
      (btst '(let ((gen (make-two-pole))) (two-pole? gen)) #t)
      (btst '(let ((gen (make-two-zero))) (two-zero? gen)) #t)
      (btst '(let ((gen (make-wave-train))) (wave-train? gen)) #t)
      (btst '(let ((gen (make-waveshape))) (waveshape? gen)) #t)
      (btst '(let ((gen (make-zpolar))) (two-zero? gen)) #t)
      
      (btst '(let ((win (make-fft-window hamming-window 8))) (vct? win)) #t)
      
      
      (ftst '(let ((gen (make-all-pass))) (all-pass gen)) 0.0)
      (ftst '(let ((gen (make-asymmetric-fm))) (asymmetric-fm gen)) 0.0)
      (ftst '(let ((gen (make-buffer))) (buffer->sample gen)) 0.0)
      (ftst '(let ((gen (make-comb))) (comb gen)) 0.0)
      (ftst '(let ((gen (make-convolve :filter v))) (convolve gen)) 0.0)
      (ftst '(let ((gen (make-delay))) (delay gen)) 0.0)
      (ftst '(let ((gen (make-env '(0 0 1 1)))) (env gen)) 0.0)
      (ftst '(let ((gen (make-file->frame "oboe.snd"))) (frame-ref (file->frame gen 0) 0)) 0.0)
      (ftst '(let ((gen (make-file->sample "oboe.snd"))) (file->sample gen 0)) 0.0)
      (ftst '(let ((gen (make-filter 8 v v))) (filter gen)) 0.0)
      (ftst '(let ((gen (make-fir-filter 8 v))) (fir-filter gen)) 0.0)
      (ftst '(let ((gen (make-formant))) (formant gen)) 0.0)
      (ftst '(let ((gen (make-frame 2))) (frame-ref gen 0)) 0.0)
      ;;(ftst '(let ((gen (make-frame->file))) (frame->file gen)) 0.0)
      (ftst '(let ((gen (make-granulate))) (granulate gen)) 0.0)
      (ftst '(let ((gen (make-iir-filter 8 v))) (iir-filter gen)) 0.0)
      (ftst '(let ((gen (make-locsig))) (frame-ref (locsig gen 0 0) 0)) 0.0)
      (ftst '(let ((gen (make-mixer 2))) (mixer-ref gen 0 0)) 0.0)
      (ftst '(let ((gen (make-notch))) (notch gen)) 0.0)
      (ftst '(let ((gen (make-one-pole))) (one-pole gen)) 0.0)
      (ftst '(let ((gen (make-one-zero))) (one-zero gen)) 0.0)
      (ftst '(let ((gen (make-oscil 440.0))) (oscil gen)) 0.0)
      (ftst '(let ((gen (make-phase-vocoder))) (phase-vocoder gen)) 0.0)
      (ftst '(let ((gen (make-ppolar))) (two-pole gen)) 0.0)
      (ftst '(let ((gen (make-pulse-train))) (pulse-train gen)) 1.0)
      (btst '(let ((gen (make-rand))) (< (rand gen) 1.0)) #t)
      (btst '(let ((gen (make-rand-interp))) (< (rand-interp gen) 1.0)) #t)
      (ftst '(let ((gen (make-readin "oboe.snd"))) (readin gen)) 0.0)
      ;;(ftst '(let ((gen (make-sample->file))) (sample->file gen)) 0.0)
      (ftst '(let ((gen (make-sawtooth-wave))) (sawtooth-wave gen)) 0.0)
      (ftst '(let ((gen (make-sine-summation))) (sine-summation gen)) 0.0)
      (ftst '(let ((gen (make-square-wave))) (square-wave gen)) 1.0)
      (ftst '(let ((gen (make-src))) (src gen)) 0.0)
      (ftst '(let ((gen (make-sum-of-cosines))) (sum-of-cosines gen)) 1.0)
      (ftst '(let ((gen (make-table-lookup))) (table-lookup gen)) 0.0)
      (ftst '(let ((gen (make-triangle-wave))) (triangle-wave gen)) 0.0)
      (ftst '(let ((gen (make-two-pole))) (two-pole gen)) 0.0)
      (ftst '(let ((gen (make-two-zero))) (two-zero gen)) 0.0)
      (ftst '(let ((gen (make-wave-train))) (wave-train gen)) 0.0)
      (ftst '(let ((gen (make-waveshape))) (waveshape gen)) 0.0)
      (ftst '(let ((gen (make-zpolar))) (two-zero gen)) 0.0)
      
      (ftst '(let ((win (make-fft-window hamming-window 8))) (vct-ref win 0)) 0.08)
      
      (ftst '(let ((gen (make-delay 3 :initial-contents '(0.5 1.0 1.0)))) (if (delay? gen) (delay gen) 0.0)) 0.5)
      (ftst '(let ((gen (make-delay 3 :initial-element .1))) (if (delay? gen) (delay gen) 0.0)) 0.1)
      (ftst '(let ((gen1 (make-delay 3 :initial-element .3))
		   (gen2 (make-delay 3 :initial-contents '(.1 .2 .3))))
	       (if (and (delay? gen1)
			(delay? gen2))
		   (+ (delay gen1) (delay gen2))
		   0.0))
	    0.4)

      (def-clm-struct st3 one two)
      (define svar (make-st3 :one 1 :two 2))
      (define svar1 #f)
      (define bst3 #f)
      (let ((tst 0))
	(run (lambda () (set! tst (st3-one svar))))
	(if (not (= tst 1)) (snd-display ";run st3-one: ~A ~A" tst (st3-one svar)))
	(itst '(st3-two svar) 2)
	(run (lambda () (set! bst3 (st3? svar))))
	(if (not bst3) (snd-display ";st3? ~A" (st3? svar))))

      (set! svar (make-st3 :one 1.5 :two "hi"))
      (let ((tst 0.0))
	(run (lambda () (set! tst (st3-one svar))))
	(if (fneq tst 1.5) (snd-display ";run st3-one (1.5): ~A ~A" tst (st3-one svar)))
	(stst '(st3-two svar) "hi"))

      (set! svar (make-st3 :one (make-vct 3 1.0) :two (make-vector 3 2.0)))
      (let ((tst 0.0))
	(run (lambda () (set! tst (vct-ref (st3-one svar) 1))))
	(if (fneq tst 1.0) (snd-display ";run st3-one (1.0 vct): ~A ~A" tst (st3-one svar)))
	(run (lambda () (set! tst (vector-ref (st3-two svar) 1)))) ; not optimized
	(if (fneq tst 2.0) (snd-display ";run st3-one (2.0 vector): ~A ~A" tst (st3-two svar))))

      (def-clm-struct st4 (one 1) (two 2.0))
      (set! svar (make-st4))
      (define bst4 #f)
      (let ((tst 0))
	(run (lambda () (set! tst (st4-one svar))))
	(if (not (= tst 1)) (snd-display ";run st4-one: ~A ~A" tst (st4-one svar)))
	(ftst '(st4-two svar) 2.0)
	(run (lambda () (set! bst4 (st4? svar))))
	(if (not bst4) (snd-display ";st4? ~A ~A" svar (st4? svar))))

      (set! svar (make-st4 :one 1.5))
      (let ((tst 0.0))
	(run (lambda () (set! tst (st4-one svar))))
	(if (fneq tst 1.5) (snd-display ";run st4-one (1.5): ~A ~A" tst (st4-one svar)))
	(ftst '(st4-two svar) 2.0))

      (set! svar (make-st3 :one 1 :two 2))
      (set! svar1 (make-st3 :one 2 :two 3))
      (let ((tst 0)
	    (tst1 0)
	    (tst2 0)
	    (tst3 0))
	(run (lambda () 
	       (if (not (c-g?)) (set! tst (st3-two svar))) ;2
	       (set! tst1 (st3-two svar1)) ;3
	       (set! (st3-two svar) (st3-two svar1))
	       (set! tst2 (st3-two svar)) ;3
	       (set! (st3-one svar1) 123)
	       (set! tst3 (st3-one svar1)))) ;123
	(if (not (= tst 2)) (snd-display ";run st3-two (2): ~A ~A" tst (st3-two svar)))
	(if (not (= tst1 3)) (snd-display ";run st3-two (3): ~A ~A" tst (st3-two svar1)))
	(if (not (= tst2 3)) (snd-display ";run st3-two (2->3): ~A ~A" tst (st3-two svar)))
	(if (not (= tst3 123)) (snd-display ";run st3-one (123): ~A ~A" tst (st3-one svar1))))

      ;; restore tests
      (if (not (= (st3-one svar) 1)) (snd-display ";restore st3-one (1): ~A" (st3-one svar)))
      (if (not (= (st3-one svar1) 123)) (snd-display ";restore st3-one (123): ~A" (st3-one svar1)))
      (if (not (= (st3-two svar) 3)) (snd-display ";restore st3-two (2->3): ~A" (st3-two svar)))
      (if (not (= (st3-two svar1) 3)) (snd-display ";restore st3-two (3): ~A" (st3-two svar1)))

      (set! svar (make-st3 :one 1.5 :two "hi"))
      (set! svar1 (make-st3 :one 2 :two 3))
      (let ((tst 0.0)
	    (tst1 0)
	    (tst2 "asdf")
	    (tst3 0))
	(run (lambda () 
	       (set! tst (st3-one svar)) ;1.5
	       (set! tst1 (st3-two svar1)) ;3
	       (set! (st3-two svar) (number->string (st3-two svar1))) ;"3"
	       (set! tst2 (st3-two svar)) ;"3"
	       (set! (st3-one svar1) 123)
	       (set! tst3 (st3-one svar1)))) ;123
	(if (fneq tst 1.5) (snd-display ";run st3-one (1.5): ~A ~A" tst (st3-two svar)))
	(if (not (= tst1 3)) (snd-display ";run st3-two (3, a): ~A ~A" tst (st3-two svar1)))
	(if (not (string=? tst2 "3")) (snd-display ";run st3-two (\"3\"): ~A ~A" tst (st3-two svar)))
	(if (not (= tst3 123)) (snd-display ";run st3-one (123): ~A ~A" tst (st3-one svar1))))

      ;; restore tests
      (if (fneq (st3-one svar) 1.5) (snd-display ";restore st3-one (1.5): ~A" (st3-one svar)))
      (if (not (= (st3-one svar1) 123)) (snd-display ";restore st3-one (123): ~A" (st3-one svar1)))
      (if (not (string=? (st3-two svar) "3")) (snd-display ";restore st3-two (\"3\"): ~A" (st3-two svar)))
      (if (not (= (st3-two svar1) 3)) (snd-display ";restore st3-two (3): ~A" (st3-two svar1)))

      (set! svar (make-st3 :one #\c :two #f))
      (let ((tst #f)
	    (tst1 #\z))
	(run (lambda () 
	       (set! tst1 (st3-one svar)) ;#\c
	       (set! tst (not (st3-two svar))) ;#t
	       (set! (st3-one svar) #\f)
	       (set! (st3-two svar) #t)))
	(if (not (char=? tst1 #\c)) (snd-display ";run st3-one (#\c): ~A ~A" tst1 (st3-one svar)))
	(if (not tst) (snd-display ";run st3-two (#t): ~A ~A" tst (st3-two svar))))

      ;; restore tests
      (if (not (char=? (st3-one svar) #\f)) (snd-display ";restore st3-one (#\f): ~A" (st3-one svar))) 
      (if (not (st3-two svar)) (snd-display ";restore st3-two (#t): ~A" (st3-two svar))) 

      (def-clm-struct hiho1 i x (s "hiho") (ii 3 :type int) (xx 1.0 :type float))
      (define hi1 (make-hiho1))
      (let ((val (run-eval '(lambda (y) (declare (y hiho1)) (hiho1-ii y)) hi1)))
	(if (not (= val 3)) (snd-display ";typed hiho1-ii: ~A" val)))
      (define hi2 (make-hiho1 :xx 3.14))
      (let ((val (run-eval '(lambda (y) (declare (y hiho1)) (hiho1-xx y)) hi2)))
	(if (fneq val 3.14) (snd-display ";typed hiho1-xx: ~A" val)))
      (let ((val (run-eval '(lambda (x y) (declare (x hiho1) (y hiho1)) (+ (hiho1-xx y) (hiho1-xx x))) hi1 hi2)))
	(if (fneq val 4.14) (snd-display ";typed hiho1-xx+xx: ~A" val)))
      (let ((val (run-eval '(lambda (y) (declare (y hiho1)) y) hi1)))
	(if (not (hiho1? val)) (snd-display ";clm-struct return: ~A" val)))
      (let ((tag (catch 'cannot-parse
			(lambda () (run-eval '(set! (hiho1-ii hi1) "ho")))
			(lambda args (car args)))))
	(if (not (eq? tag 'cannot-parse))
	    (snd-display ";set def-clm-struct type check? ~A" tag)))
      (let ((tag (catch 'cannot-parse
			(lambda () (run-eval '(let ((r (make-sample-reader))) (format #f "~A" r))))
			(lambda args (car args)))))
	(if (not (eq? tag 'cannot-parse))
	    (snd-display ";format arg type check? ~A" tag)))
      
      (let ((tag (catch #t (lambda () (run-eval (lambda () (eq? .3 .2)))) (lambda args (car args)))))
	(if (not (eq? tag 'cannot-parse)) (snd-display ";cannot parse case: ~A" tag)))
      
      (def-clm-struct hiho2 (i 0 :type int) (x 0.0 :type float) (v #f :type vct) (s "hiho") (ii 3 :type int) (xx 1.0 :type float))
      (define hi2 (make-hiho2 :v (make-vct 3 .1)))
      (let ((val (run-eval '(lambda (y) (declare (y hiho2)) (vct-ref (hiho2-v y) 1)) hi2)))
	(if (fneq val .1) (snd-display ";typed hiho2-v: ~A" val))
	(run-eval '(lambda (y) (declare (y hiho2)) (vct-set! (hiho2-v y) 2 3.14)) hi2)
	(if (fneq (vct-ref (hiho2-v hi2) 2) 3.14)
	    (snd-display ";vct-set hiho2-v: ~A" (vct-ref (hiho2-v hi2) 2))))
      (let ((val (run-eval '(lambda (y) (declare (y hiho2)) (hiho2-i y)) hi2)))
	(if (not (= val 0)) (snd-display ";typed hiho2-i: ~A" val))
	(set! val (run-eval '(lambda (y) (declare (y hiho2)) (set! (hiho2-i y) 2) (hiho2-i y)) hi2))
	(if (not (= val 2)) (snd-display ";inner set hiho2-i: ~A" val))
	(if (not (= (hiho2-i hi2) 2))
	    (snd-display ";set hiho2-i: ~A" (hiho2-i hi2))))
      (let ((val (run-eval '(lambda (y) (declare (y hiho2)) (hiho2-x y)) hi2)))
	(if (fneq val 0.0) (snd-display ";hiho2-x: ~A" val))
	(set! val (run-eval '(lambda (y) (declare (y hiho2)) (set! (hiho2-x y) 3.14) (hiho2-x y)) hi2))
	(if (fneq val 3.14) (snd-display ";inner set hiho2-x: ~A" val))
	(if (fneq (hiho2-x hi2) 3.14)
	    (snd-display ";set hiho2-x: ~A" (hiho2-x hi2))))

      (let ((lst (list 1 2 (vct-fill! (make-vct 4) 3.14) 3))
	    (k 123.0))
	(run (lambda () (set! k (vct-ref (list-ref lst 2) 1))))
	(if (fneq k 3.14) (snd-display ";list-ref ->vct: ~A" k)))

      (itst '(mus-sound-samples "oboe.snd") 50828)
      (itst '(mus-sound-length "oboe.snd") 101684)
      (itst '(mus-sound-frames "oboe.snd") 50828)
      (itst '(mus-sound-data-location "oboe.snd") 28)
      (itst '(mus-sound-chans "oboe.snd") 1)
      (itst '(mus-sound-srate "oboe.snd") 22050)
      (itst '(mus-sound-header-type "oboe.snd") 0)
      (itst '(mus-sound-data-format "oboe.snd") 1)
      (ftst '(mus-sound-duration "oboe.snd") 2.305)
      (stst '(mus-sound-comment "4.aiff") ";Written Tue 26-Nov-96 14:55 PST by bil at bill (Silicon Graphics Iris 4D) using Allegro CL, clm of 21-Nov-96")
      (itst '(mus-sound-datum-size "oboe.snd") 2)
      (itst '(mus-sound-length "oboe.snd") (+ 28 (* 2 50828)))
      (itst '(mus-sound-header-type "oboe.snd") mus-next)
      (itst '(mus-sound-data-format "oboe.snd") mus-bshort)
      (stst '(mus-data-format-name mus-bshort) "big endian short (16 bits)")
      (etst '(mus-data-format-name 3.14))
      (stst '(mus-header-type-name mus-aifc) "AIFC")
      (stst '(mus-header-type-name (mus-sound-header-type "oboe.snd")) "Sun")
      (etst '(mus-header-type-name "hiho"))
      (etst '(make-vct 3 "hi"))
      (stst '(let ((file "oboe.snd"))
	       (string-append file ": chans: "
			      (number->string (mus-sound-chans file))
			      ", srate: "
			      (number->string (mus-sound-srate file))
			      ", "
			      (mus-header-type-name (mus-sound-header-type file))
			      ", "
			      (mus-data-format-name (mus-sound-data-format file))
			      ", len: "
			      (number->string 
			       (/ (mus-sound-samples file)
				  (* (mus-sound-chans file) (mus-sound-srate file))))))
	    "oboe.snd: chans: 1, srate: 22050, Sun, big endian short (16 bits), len: 2.30512475967407")
      (ftst '(mus-sound-duration "oboe.snd") 2.30512)
      (stst '(mus-sound-comment "1.snd") ";Written Tue 2-Jul-102 at 12:09 MDT  by bil at goggle (Linux/X86) using Allegro CL, clm of 3-July-02")
      (ftst '(radians->hz 2.84951704088598e-4) 1.0)
      (ftst '(radians->degrees 1.0) 57.2957801818848)
      (ftst '(degrees->radians 57.2957801818848) 1.0)
      (ftst '(linear->db .25) -12.0411996841431)
      (ftst '(db->linear -12.0411996841431) .25)
      (ftst '(hz->radians 1.0) (in-hz 1.0))
      (ftsta '(lambda (y) (radians->hz y)) 2.84951704088598e-4 1.0)
      (ftsta '(lambda (y) (radians->degrees y)) 1.0 57.2957801818848)
      (ftsta '(lambda (y) (degrees->radians y)) 57.2957801818848 1.0)
      (ftsta '(lambda (y) (linear->db y)) .25 -12.0411996841431)
      (ftsta '(lambda (y) (db->linear y)) -12.0411996841431 .25)
      (ftsta '(lambda (y) (hz->radians y)) 1.0 (in-hz 1.0))
      (ftst '(ring-modulate .4 .5) .2)
      (ftst '(amplitude-modulate 1.0 .5 .4) .7)
      (ftst '(contrast-enhancement 0.1 0.75) (sin (+ (* 0.1 (/ pi 2)) (* .75 (sin (* 0.1 2.0 pi))))))

      (etst '(mus-sound-samples 1))
      (etst '(mus-sound-length 3.14))
      (etst '(mus-sound-frames #\c))
      (etst '(mus-sound-data-location 1))
      (etst '(mus-sound-chans 1))
      (etst '(mus-sound-srate 3.14))
      (etst '(mus-sound-header-type #\v))
      (etst '(mus-sound-data-format 1))
      (etst '(mus-sound-duration 1))
      (etst '(mus-sound-comment 3.14))
      (etst '(mus-sound-datum-size #\c))
      (etst '(mus-sound-length 1))
      (etst '(frames 0 1 2 3))
      (etst '(edit-position 0 1 2))
      (etst '(cursor 0 1 2))
      (etst '(maxamp 0 1 2))
      (etst '(report-in-minibuffer "hi" 0 1 2))
      (etst '(vct-ref (make-vct 2) 3.14))
      (etst '(make-vct 2 3 4))
      (etst '(make-vct 2 1))

      (define gen (make-oscil 440))
      (ftst '(mus-frequency gen) 440.0)
      (ftst '(mus-phase gen) 0.0)
      (ftst '(oscil gen) 0.0)
      (ftst '(mus-phase gen) 0.125)
      (run-eval '(set! (mus-frequency gen) 100.0))
      (ftst '(mus-frequency gen) 100.0)
      (ftst '(gen) .125)
      (ftst '(gen 1.0) 0.153)
      (ftst '(gen 0.0 0.0) 0.925)
      (ftst '(gen 0.0 1.0) 0.802)
      (etst '(oscil gen 1.0 2.0 3.0))

      (ftst '(mus-srate) 22050.0)
      (ftst '(set! (mus-srate) 44100.0) 44100.0)
      (ftst '(set! (mus-srate) 22050) 22050.0)
      (etst '(mus-srate 0.0))
      (etst '(set! (mus-srate) "hi"))
      (btst '(< (mus-random 1.0) 2.0) #t)
      (btst '(>= (mus-random 1.0) -1.0) #t)
      (btst '(sample-reader? (make-sample-reader)) #t)

      (ftst '(let ((v (make-vct 3))) (vct-fill! v 1.0) (vct-ref v 1)) 1.0)
      (ftst '(let ((v (make-vct 3))) (vct-fill! v 1.0) (vct-scale! v 2.0) (vct-ref v 1)) 2.0)
      (ftst '(let ((v (make-vct 3))) (vct-fill! v 1.0) (vct-offset! v 2.0) (vct-ref v 1)) 3.0)
      (ftst '(let ((v (make-vct 3))) (vct-fill! v 1.0) (vct-offset! v 2.0) (vct-peak v)) 3.0)
      (ftst '(let ((v (make-vct 3))) (vct-fill! v 1.0) (vct-ref (vct-copy v) 1)) 1.0)
      (itst '(let ((v (make-vct 3))) (vct-length v)) 3)
      (btst '(let ((v (make-vct 3))) (vct? v)) #t)
      (ftst '(let ((v0 (make-vct 3)) (v1 (make-vct 3))) (vct-fill! v0 1.0) (vct-fill! v1 2.0) (vct-ref (vct-multiply! v0 v1) 1)) 2.0)
      (ftst '(let ((v0 (make-vct 3)) (v1 (make-vct 3))) (vct-fill! v0 1.0) (vct-fill! v1 2.0) (vct-ref (vct-add! v0 v1) 1)) 3.0)
      (ftst '(let ((v0 (make-vct 3)) (v1 (make-vct 3))) (vct-fill! v0 1.0) (vct-fill! v1 2.0) (vct-ref (vct-subtract! v0 v1) 1)) -1.0)

      (let ((a 0) (v (make-vct 1))) 
	(vct-map! v (lambda () (do ((i 0 (1+ i))) ((= i 3) a) (set! a (1+ a))))) 
	(if (not (= a 3)) (snd-display ";i a: ~A" a)))
      (let ((a 0.0) (v (make-vct 1))) 
	(vct-map! v (lambda () (do ((i 0 (1+ i))) ((= i 3) a) (set! a (+ a 0.5))))) 
	(if (not (= a 1.5)) (snd-display ";f a: ~A" a)))
      (let ((a "hi") (v (make-vct 1))) 
	(vct-map! v (lambda () (do ((i 0 (1+ i))) ((= i 3) 0.0) (set! a "ho"))))
	(if (not (string=? a "ho")) (snd-display ";s a: ~A" a)))
      (itst '(do ((i 0 (1+ i))) ((= i 3) 0) (vct-scale! (make-vct 3) 1.0)) 0)

      (let ((vect (make-vector 2 1.5))
	    (v (make-vct 2)))
	(vct-map! v (lambda () (vector-ref vect 0)))
	(if (fneq (vct-ref v 0) 1.5) (snd-display ";f1.5 vector-ref: ~A" v)))

      (let ((vect (make-vector 2 1))
	    (v (make-vct 2))
	    (i 0))
	(vct-map! v (lambda () (set! i (vector-ref vect 0)) 0.0))
	(if (not (= i 1)) (snd-display ";i1 vector-ref: ~A" i)))

      (let ((vect (make-vector 2))
	    (v (make-vct 2))
	    (i 0))
	(vector-set! vect 0 (make-vct 2 3.0))
	(vector-set! vect 1 (make-vct 2 4.0))
	(vct-map! v (lambda () (vct-ref (vector-ref vect 0) 0)))
	(if (fneq (vct-ref v 0) 3.0) (snd-display ";v3.0 vector-ref: ~A" v)))

      (let ((vect (make-vector 2 1.5))
	    (v (make-vct 2)))
	(vct-map! v (lambda () (vector-fill! vect 2.0) (vector-ref vect 0)))
	(if (fneq (vct-ref v 0) 2.0) (snd-display ";f2.0 vector-fill: ~A" v)))
      
      (let ((vect (make-vector 2 1))
	    (v (make-vct 2))
	    (i 0))
	(vct-map! v (lambda () (vector-fill! vect 32) (set! i (vector-ref vect 0)) 0.0))
	(if (not (= i 32)) (snd-display ";i32 vector-fill: ~A" i)))
      
      (let ((vect (make-vector 2 1.5))
	    (v (make-vct 2)))
	(vct-map! v (lambda () (exact->inexact (vector-length vect))))
	(if (fneq (vct-ref v 0) 2.0) (snd-display ";f2.0 vector-length: ~A" v)))
      
      (let ((vect (make-vector 2 1))
	    (v (make-vct 2))
	    (i 0))
	(vct-map! v (lambda () (set! i (vector-length vect)) 0.0))
	(if (not (= i 2)) (snd-display ";i2 vector-length: ~A" i)))
      
      (let ((vect (make-vector 2))
	    (v (make-vct 2))
	    (i 0))
	(vector-set! vect 0 (make-vct 2 3.0))
	(vector-set! vect 1 (make-vct 2 4.0))
	(vct-map! v (lambda () (inexact->exact (vector-length vect))))
	(if (fneq (vct-ref v 0) 2.0) (snd-display ";v2.0 vector-length: ~A" v)))
      
      (let ((vect (make-vector 2 1.5))
	    (v (make-vct 2)))
	(vct-map! v (lambda () (vector-set! vect 0 32.0) (vector-ref vect 0)))
	(if (fneq (vct-ref v 0) 32.0) (snd-display ";f32.0 vector-set: ~A" v)))
      
      (let ((vect (make-vector 2 1))
	    (v (make-vct 2))
	    (i 0))
	(vct-map! v (lambda () (vector-set! vect 0 123) (set! i (vector-ref vect 0)) 0.0))
	(if (not (= i 123)) (snd-display ";i123 vector-set: ~A" i)))

      (let ((vect (make-vector 3 32))
	    (v (make-vct 3)))
	(vct-map! v (lambda () (vector-set! vect 0 123) 0.0))
	(if (not (= (vector-ref vect 0) 123)) (snd-display ";i vect set: ~A" vect)))

      (let ((vect (make-vector 3 32.0))
	    (v (make-vct 3)))
	(vct-map! v (lambda () (vector-set! vect 0 123.0) 0.0))
	(if (fneq (vector-ref vect 0) 123.0) (snd-display ";f vect set: ~A" vect)))

      (let ((vect (make-vector 3))
	    (v (make-vct 3))
	    (gen (make-oscil 440)))
	(vector-set! vect 0 (make-oscil 440))
	(vector-set! vect 1 (make-oscil 440))
	(vector-set! vect 2 (make-oscil 440))
	(vct-map! v (lambda ()
		      (let ((val (vector-ref vect 0)))
			(oscil val 0.0))))
	(if (not (vequal v (vct 0.0 0.125 0.248))) (snd-display ";vect gen vct-map 1.0: ~A" v)))

      (let ((vect (make-vector 3))
	    (v (make-vct 3))
	    (gen (make-oscil 440)))
	(vector-set! vect 0 (make-oscil 440))
	(vector-set! vect 1 (make-oscil 440))
	(vector-set! vect 2 (make-oscil 440))
	(vct-map! v (lambda ()
		      (let ((val (vector-ref vect 0)))
			(vector-set! vect 0 gen)
			(vector-fill! vect gen)
			(oscil val 0.0))))
	(if (not (vequal v (vct 0.0 0.0 0.125))) (snd-display ";vect gen set vct-map 1.0: ~A" v)))

      (let ((vect (make-vector 1))
	    (v (make-vct 3))
	    (gen (make-oscil 440)))
	(vector-set! vect 0 gen)
	(vct-map! v (lambda ()
		      (oscil (vector-ref vect 0) 0.0)))
	(if (not (vequal v (vct 0.0 0.125 0.248))) (snd-display ";vect[0] gen set vct-map 1.0: ~A" v)))

      (let ((vect (make-vector 1))
	    (v (make-vct 3))
	    (gen (make-oscil 440)))
	(vector-set! vect 0 gen)
	(vct-map! v (lambda ()
		      ((vector-ref vect 0) 0.0)))
	(if (not (vequal v (vct 0.0 0.125 0.248))) (snd-display ";[vect] gen set vct-map 1.0: ~A" v)))

      (let ((vect (make-vector 3))
	    (v (make-vct 3))
	    (v1 (make-vct 3)))
	(vector-set! vect 0 (make-vct 3 0.25))
	(vector-set! vect 1 (make-vct 3 0.5))
	(vector-set! vect 2 (make-vct 3 1.0))
	(vct-map! v (lambda ()
		      (let ((val (vector-ref vect 0)))
			(vct-ref val 0))))
	(if (not (vequal v (vct 0.25 0.25 0.25))) (snd-display ";vect vct vct-map 1.0: ~A" v)))

      (let ((vect (make-vector 3))
	    (v (make-vct 3))
	    (v1 (make-vct 3 2.0)))
	(vector-set! vect 0 (make-vct 3 0.25))
	(vector-set! vect 1 (make-vct 3 0.5))
	(vector-set! vect 2 (make-vct 3 1.0))
	(vct-map! v (lambda ()
		      (let ((val (vector-ref vect 0)))
			(vector-set! vect 0 v1)
			(vector-fill! vect v1)
			(vct-ref val 0))))
	(if (not (vequal v (vct 0.25 2.0 2.0))) (snd-display ";vect vct set vct-map 1.0: ~A" v)))

      (let ((v (make-vct 3))
	    (f (make-frame 1)))
	(vct-map (lambda () (frame-set! f 0 1.0) f) v)
	(if (not (vequal v (vct 1.0 1.0 1.0))) (snd-display ";vct-map 1.0: ~A (ref)" v)))

      (let ((v (make-vct 3))
	    (f (make-frame 1)))
	(vct-map (lambda () (set! (frame-ref f 0) 1.0) f) v)
	(if (not (vequal v (vct 1.0 1.0 1.0))) (snd-display ";vct-map 1.0 (set ref): ~A" v)))

      (let ((v (make-vct 3))
	    (f (make-frame 1)))
	(set! (optimization) 0)
	(vct-map (lambda () (frame-set! f 0 1.0) f) v)
	(set! (optimization) max-optimization)
	(if (not (vequal v (vct 1.0 1.0 1.0))) (snd-display ";unopt vct-map 1.0 (ref): ~A" v)))

      (let ((v (make-vct 3))
	    (f (make-frame 1)))
	(vct-map (lambda () (frame-set! f 0 (+ mus-next 1.0)) f) v) ; force fall-through to Guile
	(if (not (vequal v (vct 1.0 1.0 1.0))) (snd-display ";vct-map 1.0 (set): ~A" v)))

      (let ((v0 (make-vct 3))
	    (v1 (make-vct 3))
	    (f (make-frame 2)))
	(vct-map (lambda () 
		   (frame-set! f 0 1.0) 
		   (frame-set! f 1 0.5) 
		   f)
		 v0 v1)
	(if (or (not (vequal v0 (vct 1.0 1.0 1.0)))
		(not (vequal v1 (vct 0.5 0.5 0.5))))
	    (snd-display ";vct-map 1.0 0.5: ~A ~A" v0 v1)))

      (set! (locsig-type) mus-linear)
      (let ((v0 (make-vct 3))
	    (v1 (make-vct 3))
	    (l (make-locsig 30.0 :channels 2)))
	(vct-map (lambda () 
		   (locsig l 0 1.0))
		 v0 v1)
	(if (or (not (vequal v0 (vct 0.667 0.667 0.667)))
		(not (vequal v1 (vct 0.333 0.333 0.333))))
	    (snd-display ";vct-map locsig: ~A ~A" v0 v1))
	(catch #t (lambda () (vct-map! v0 (lambda () (locsig l)))) (lambda args args))
	(catch #t (lambda () (vct-map! v0 (lambda () (locsig l 1.0 2.0 3.0 4.0)))) (lambda args args)))

      (let ((v1 (make-vector 3 1.5))
	    (v2 (make-vector 3 32))
	    (v3 (make-vct 3))
	    (vp #f))
	(vct-map! v3
		  (lambda ()
		    (vector-set! v2 0 1)
		    (vector-set! v1 0 3.14)
		    (set! vp (vector? v2))
		    (+ (vector-ref v2 0) (vector-ref v1 0))))
	(if (or (not (vequal v3 (vct 4.14 4.14 4.14)))
		(not (= (vector-ref v2 0) 1))
		(not (= (vector-ref v2 1) 32))
		(fneq (vector-ref v1 0) 3.14)
		(fneq (vector-ref v1 1) 1.5)
		(not vp))
	    (snd-display ";run vector-set: ~A ~A ~A ~A" v1 v2 v3 vp)))

      (let ((rdat (make-vct 16))
	    (idat (make-vct 16))
	    (v (make-vct 1)))
	(do ((i 0 (1+ i)))
	    ((= i 16))
	  (vct-set! rdat i 0.0)
	  (vct-set! idat i 0.0))
	(vct-set! rdat 3 1.0)
	(vct-map! v (lambda ()
		      (mus-fft rdat idat)
		      (mus-fft rdat idat 16 -1)
		      0.0))
	(if (or (fneq (vct-ref rdat 3) 16.0)
		(fneq (vct-ref rdat 4) 0.0))
	    (snd-display ";run vct fft real[3 or 4]: ~A ~A?" (vct-ref rdat 3) (vct-ref rdat 4)))
	(vct-fill! rdat 0.0)
	(vct-fill! idat 0.0)
	(vct-set! rdat 3 1.0)
	(vct-map! v (lambda ()
		      (mus-fft rdat idat 16)
		      (mus-fft rdat idat 16 -1)
		      0.0))
	(if (or (fneq (vct-ref rdat 3) 16.0)
		(fneq (vct-ref rdat 4) 0.0))
	    (snd-display ";run vct fft (2) real[3 or 4]: ~A ~A?" (vct-ref rdat 3) (vct-ref rdat 4)))
	(catch #t (lambda () (vct-map! v (lambda () (mus-fft rdat idat 16 1.5)))) (lambda args args)))

      (etst '(let ((v0 (make-vct 3))) (polynomial v0 0.0 123)))
      (etst '(let ((v0 (make-vct 3))) (vct-ref v0 "hiho")))
      (etst '(let ((v0 (make-vct 3))) (vct-set! v0 "hiho" 3.1)))

      (let ((v0 (make-vct 10))
	    (v1 (make-vct 10))
	    (v (make-vct 1)))
	(vct-map! v (lambda ()
		      (vct-fill! v0 1.0)
		      (multiply-arrays v0 v1 1)
		      0.0))
	(if (not (vequal v0 (vct 0.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0)))
	    (snd-display ";run multiply-arrays[0]: ~A?" v0)))

      (let ((v (make-vct 3 1.5))
	    (v1 (make-vct 1)))
	(vct-map! v1 (lambda ()
		      (clear-array v)
		      1.0))
	(if (not (vequal v (vct 0.0 0.0 0.0)))
	    (snd-display ";run clear-array: ~A" v)))

      (let ((osc (make-oscil 440.0))
	    (v (make-vct 1))
	    (frq 0.0)
	    (phs 1234.0)
	    (cs 0))
	(vct-map! v 
		  (lambda ()
		    (set! frq (mus-frequency osc))
		    (set! phs (mus-phase osc))
		    (set! cs (mus-cosines osc))
		    (set! (mus-frequency osc) 123.0)
		    (set! (mus-phase osc) 1.0)
		    0.0))
	(if (fneq frq 440.0) (snd-display ";run frq: ~A" frq))
	(if (fneq phs 0.0) (snd-display ";run phs: ~A" phs))
	(if (not (= cs 1)) (snd-display ";run cs: ~A" cs))
	(if (fneq (mus-frequency osc) 123.0) (snd-display ";run mus-frequency: ~A" (mus-frequency osc)))
	(if (fneq (mus-phase osc) 1.0) (snd-display ";run mus-phase: ~A" (mus-phase osc))))
	
      (let ((osc (make-sum-of-cosines 3 440.0))
	    (v (make-vct 1))
	    (frq 0.0)
	    (phs 1234.0)
	    (cs 0))
	(vct-map! v 
		  (lambda ()
		    (set! frq (mus-frequency osc))
		    (set! phs (mus-phase osc))
		    (set! cs (mus-cosines osc))
		    (set! (mus-frequency osc) 123.0)
		    (set! (mus-phase osc) 1.0)
		    (set! (mus-cosines osc) 10)
		    0.0))
	(if (fneq frq 440.0) (snd-display ";cs run frq: ~A" frq))
	(if (fneq phs 0.0) (snd-display ";cs run phs: ~A" phs))
	(if (not (= cs 3)) (snd-display ";cs run cs: ~A" cs))
	(if (fneq (mus-frequency osc) 123.0) (snd-display ";cs run mus-frequency: ~A" (mus-frequency osc)))
	(if (fneq (mus-phase osc) 1.0) (snd-display ";cs run mus-phase: ~A" (mus-phase osc)))
	(if (not (= (mus-cosines osc) 10)) (snd-display ";cs run set cs: ~A" (mus-cosines osc))))
	
      (let ((zf (make-two-zero .4 .7 .3))
	    (pf (make-two-pole .4 .7 .3))
	    (z1 0.0) (z2 0.0) (z3 0.0)
	    (p1 0.0) (p2 0.0) (p3 0.0)
	    (x11 0.0) (x12 0.0) (x13 0.0)
	    (x21 0.0) (x22 0.0) (x23 0.0)
	    (y11 0.0) (y12 0.0) (y13 0.0)
	    (y21 0.0) (y22 0.0) (y23 0.0)
	    (v (make-vct 1)))
	(vct-map! v 
		  (lambda ()
		    (set! z1 (two-zero zf 1.0))
		    (set! x11 (mus-x1 zf))
		    (set! x21 (mus-x2 zf))
		    (set! z2 (two-zero zf 0.5))
		    (set! x12 (mus-x1 zf))
		    (set! x22 (mus-x2 zf))
		    (set! (mus-x1 zf) .1)
		    (set! (mus-x2 zf) .2)
		    (set! x13 (mus-x1 zf))
		    (set! x23 (mus-x2 zf))
		    (set! z3 (two-zero zf 1.0))

		    (set! p1 (two-pole pf 1.0))
		    (set! y11 (mus-y1 pf))
		    (set! y21 (mus-y2 pf))
		    (set! p2 (two-pole pf 0.5))
		    (set! y12 (mus-y1 pf))
		    (set! y22 (mus-y2 pf))
		    (set! (mus-y1 pf) .1)
		    (set! (mus-y2 pf) .2)
		    (set! y13 (mus-y1 pf))
		    (set! y23 (mus-y2 pf))
		    (set! p3 (two-pole pf 1.0))

		    0.0))
	  (if (fneq z1 .4) (snd-display ";run 2zero->0.4: ~A" z1))
	  (if (fneq x11 1.0) (snd-display ";run 2zero x1(1.0): ~A" x11))
	  (if (fneq x21 0.0) (snd-display ";run 2zero x2(0.0): ~A" x21))
	  (if (fneq z2 .9) (snd-display ";run 2zero->0.9: ~A" z2))
	  (if (fneq x12 0.5) (snd-display ";run 2zero x1(0.5): ~A" x12))
	  (if (fneq x22 1.0) (snd-display ";run 2zero x2(1.0): ~A" x22))
	  (if (fneq x13 0.1) (snd-display ";run 2zero set x1(0.1): ~A" x13))
	  (if (fneq x23 0.2) (snd-display ";run 2zero set x2(0.2): ~A" x23))
	  (if (fneq z3 .53) (snd-display ";run 2zero->0.53: ~A" z3))

	  (if (fneq p1 .4) (snd-display ";run a0->out 2pole: ~A" p1))
	  (if (fneq y11 .4) (snd-display ";run a0->out 2pole y1 (0.4): ~A" y11))
	  (if (fneq y21 0.0) (snd-display ";run a0->out 2pole y2 (0.0): ~A" y21))
	  (if (fneq p2 -.08) (snd-display ";run a0->out 2pole (-0.08): ~A" p2))
	  (if (fneq y12 -0.08) (snd-display ";run a0->out 2pole y1 (-0.08): ~A" y12))
	  (if (fneq y22 0.4) (snd-display ";run a0->out 2pole y2 (0.4): ~A" y22))
	  (if (fneq y13 .1) (snd-display ";run a0->out 2pole set y1 (.1): ~A" y13))
	  (if (fneq y23 .2) (snd-display ";run a0->out 2pole set y2 (.2): ~A" y23))
	  (if (fneq p3 0.27) (snd-display ";run a0->out 2pole (0.27): ~A" p3)))

      (let ((flt (make-formant .1 1000.0))
	    (fa0 123.0)
	    (fa1 123.0)
	    (fa2 123.0)
	    (fb1 123.0)
	    (fb2 123.0)
	    (forder 123)
	    (fradius 123.0)
	    (v (make-vct 1)))
	(vct-map! v
		  (lambda ()
		    (set! fa0 (mus-a0 flt))
		    (set! fa1 (mus-a1 flt))
		    (set! fa2 (mus-a2 flt))
		    (set! fb1 (mus-b1 flt))
		    (set! fb2 (mus-b2 flt))
		    (set! forder (mus-order flt))
		    (set! fradius (mus-formant-radius flt))
		    (set! (mus-formant-radius flt) .3)
		    (set! (mus-a0 flt) .123)
		    (set! (mus-a1 flt) .123)
		    (set! (mus-a2 flt) .123)
		    (set! (mus-b1 flt) .123)
		    (set! (mus-b2 flt) .123)
		    0.0))
	(if (fneq fa0 0.2783) (snd-display ";run fa0: ~A" fa0))
	(if (fneq fa1 1.0) (snd-display ";run fa1: ~A" fa0))
	(if (fneq fa2 -0.1) (snd-display ";run fa2: ~A" fa0))
	(if (fneq fb1 -.192) (snd-display ";run fb1: ~A" fa0))
	(if (fneq fb2 0.01) (snd-display ";run fb2: ~A" fa0))
	(if (not (= forder 2)) (snd-display ";run formant order: ~A" forder))
	(if (fneq fradius .1) (snd-display ";run formant radius: ~A" fradius))
	(if (fneq (mus-a0 flt) .123) (snd-display ";run set mus-a0: ~A" (mus-a0 flt)))
	(if (fneq (mus-a1 flt) .123) (snd-display ";run set mus-a1: ~A" (mus-a1 flt)))
	(if (fneq (mus-a2 flt) .123) (snd-display ";run set mus-a2: ~A" (mus-a2 flt)))
	(if (fneq (mus-b1 flt) .123) (snd-display ";run set mus-b1: ~A" (mus-b1 flt)))
	(if (fneq (mus-b2 flt) .123) (snd-display ";run set mus-b2: ~A" (mus-b2 flt)))
	(if (fneq (mus-formant-radius flt) .3) (snd-display ";run set mus-formant-radius: ~A" (mus-formant-radius flt))))

      (let ((frm (make-formant .1 440.0))
	    (v (make-vct 3)))
	(vct-map! v (lambda ()
		      (mus-set-formant-radius-and-frequency frm 2.0 100.0)))
	(if (fneq (mus-formant-radius frm) 2.0) (snd-display ";run set-formant-radius-etc: ~A" (mus-formant-radius frm)))
	(if (fneq (mus-frequency frm) 100.0) (snd-display ";run set-formant-radius-etc (frq): ~A" (mus-frequency frm)))
	(catch #t (lambda () (vct-map (lambda () (formant frm 1.0 2.0 3.0)) v)) (lambda args args)))

      (let ((v (make-vct 3)))
	(vct-map! v (let ((i 0))
		      (lambda ()
			(let ((v0 (make-vct 3 .1)))
			  (vct-set! v0 1 2)
			  (let ((res (vct-ref v0 i)))
			    (set! i (1+ i))
			    res)))))
	(if (not (vequal v (vct .1 2.0 .1))) (snd-display ";run make-vct: ~A" v)))

      (set! (locsig-type) mus-linear)
      (let* ((rev (make-frame->file "fmv4.reverb" 1 mus-bshort mus-next))
	     (loc (make-locsig 30.0 :channels 2 :reverb .1 :revout rev))
	     (d0 123.0)
	     (d1 123.0)
	     (dr 123.0)
	     (d01 123.0)
	     (d11 123.0)
	     (dr1 123.0)
	     (cs 0)
	     (isloc #f)
	     (v (make-vct 1)))
	(vct-map! v (lambda ()
		      (set! d0 (locsig-ref loc 0))
		      (set! d1 (locsig-ref loc 1))
		      (set! dr (locsig-reverb-ref loc 0))
		      (set! cs (mus-channels loc))
		      (set! isloc (locsig? loc))
		      (move-locsig loc 60.0 2.0)
		      (set! d01 (locsig-ref loc 0))
		      (set! d11 (locsig-ref loc 1))
		      (set! dr1 (locsig-reverb-ref loc 0))
		      (locsig-set! loc 0 .123)
		      (set! (locsig-ref loc 1) .23)
		      (locsig-reverb-set! loc 0 .23)
		      (set! (locsig-reverb-ref loc 0) .123)
		      0.0))
	(if (fneq d0 .667) (snd-display ";run locsig ref 0: ~A" d0))
	(if (fneq d1 .333) (snd-display ";run locsig ref 1: ~A" d1))
	(if (fneq dr .1) (snd-display ";run locsig reverb ref 0: ~A" dr))
	(if (not (= cs 2)) (snd-display ";run mus-channels: ~A" cs))
	(if (fneq d01 .167) (snd-display ";run locsig ref 01: ~A" d01))
	(if (fneq d11 .333) (snd-display ";run locsig ref 11: ~A" d11))
	(if (fneq dr1 .0707) (snd-display ";run locsig reverb ref 01: ~A" dr1))
	(if (fneq (locsig-ref loc 0) .123) (snd-display ";run set loc 0: ~A" (locsig-ref loc 0)))	
	(if (fneq (locsig-ref loc 1) .23) (snd-display ";run set loc 1: ~A" (locsig-ref loc 1)))	
	(if (fneq (locsig-reverb-ref loc 0) .123) (snd-display ";run set loc rev 0: ~A" (locsig-reverb-ref loc 0)))
	(mus-close rev))

      (let ((fr (make-frame 2 1.5 0.5))
	    (mx (make-mixer 2 0.1 0.2 0.3 0.4))
	    (vs (make-vct 6))
	    (v (make-vct 1))
	    (fq #f)
	    (mq #f))
	(vct-map! v (lambda ()
		      (vct-set! vs 0 (frame-ref fr 0))
		      (vct-set! vs 1 (frame-ref fr 1))
		      (vct-set! vs 2 (mixer-ref mx 0 0))
		      (vct-set! vs 3 (mixer-ref mx 0 1))
		      (vct-set! vs 4 (mixer-ref mx 1 0))
		      (vct-set! vs 5 (mixer-ref mx 1 1))
		      (frame-set! fr 0 .123)
		      (mixer-set! mx 0 1 .123)
		      (set! fq (frame? fr))
		      (set! mq (mixer? mx))
		      0.0))
	(if (not (vequal vs (vct 1.5 0.5 0.1 0.2 0.3 0.4))) (snd-display ";run frame-set: ~A" vs))
	(if (not fq) (snd-display ";run frame?"))
	(if (not mq) (snd-display ";run mixer?"))
	(if (fneq (frame-ref fr 0) .123) (snd-display ";run frame-ref: ~A" (frame-ref fr 0)))
	(if (fneq (mixer-ref mx 0 1) .123) (snd-display ";run mixer-ref: ~A" (mixer-ref mx 0 1)))
	(catch #t (lambda () (vct-map (lambda () (frame-ref fr 1 2 3)) v)) (lambda args args))
	(catch #t (lambda () (vct-map (lambda () (mixer-ref mx 1 2 3 4)) v)) (lambda args args)))

      (let ((cmb (make-comb .1 12))
	    (fb .123)
	    (len 123)
	    (v (make-vct 1)))
	(vct-map! v (lambda ()
		      (set! fb (mus-feedback cmb))
		      (set! len (mus-length cmb))
		      (set! (mus-feedback cmb) .123)
		      0.0))
	(if (fneq fb .1) (snd-display ";run feedback: ~A" fb))
	(if (not (= len 12)) (snd-display ";run mus-length: ~A" len))
	(if (fneq (mus-feedback cmb) .123) (snd-display ";run set feedback: ~A" (mus-feedback cmb)))
	(catch #t (lambda () (vct-map (lambda () (comb cmb 1.0 2.0 3.0)) v)) (lambda args args)))

	    
      (let ((cmb (make-notch .1 12))
	    (ff .123)
	    (v (make-vct 1)))
	(vct-map! v (lambda ()
		      (set! ff (mus-feedforward cmb))
		      (set! (mus-feedforward cmb) .321)
		      0.0))
	(if (fneq ff .1) (snd-display ";run feedforward: ~A" ff))
	(if (fneq (mus-feedforward cmb) .321) (snd-display ";run set feedforward: ~A" (mus-feedforward cmb)))
	(catch #t (lambda () (vct-map (lambda () (notch cmb 1.0 2.0 3.0)) v)) (lambda args args)))

      (let ((gen (make-oscil 440))
	    (res 0)
	    (v (make-vct 1)))
	(vct-map! v (lambda ()
		      (if (not (string=? (mus-name gen) "oscil")) (set! res 1))
		      (if (not (string=? (mus-describe gen) "oscil freq: 440.000Hz, phase: 0.000")) (set! res (+ res 10)))
		      (if (not (string=? (mus-inspect gen) "osc freq: 0.125379, phase: 0.000000")) (set! res (+ res 100)))
		      0.0))
	(if (not (= res 0)) (snd-display ";run mus-name etc: ~A" res))
	(catch #t (lambda () (vct-map (lambda () (oscil gen 0.0 1.0 1.0)) v)) (lambda args args)))

      (let ((r1 (make-rand 100))
	    (r2 (make-rand-interp 100 .1))
	    (v (make-vct 1))
	    (r1q #f)
	    (r2q #f))
	(vct-map! v (lambda ()
		      (set! r1q (rand? r1))
		      (set! r2q (rand-interp? r2))
		      (if (or (not (= (rand r1) (rand r1)))
			      (= (rand-interp r2) (rand-interp r2)))
			  1.0
			  0.0)))
	(if (fneq (vct-ref v 0) 0.0) (snd-display ";run rand/interp?"))
	(if (not r1q) (snd-display ";run rand?"))
	(if (not r2q) (snd-display ";run rand-interp?"))
	(catch #t (lambda () (vct-map! v (lambda () (rand r1 0.0 1.0 2.0)))) (lambda args args))
	(catch #t (lambda () (vct-map! v (lambda () (rand-interp r2 1.0 2.0 3.0)))) (lambda args args)))

      (let ((v0 (make-vct 10))
	    (v (make-vct 1)))
	(do ((i 0 (1+ i))) ((= i 10))
	  (vct-set! v0 i i))
	(vct-map! v (lambda () (array-interp v0 3.5)))
	(if (fneq (vct-ref v 0) 3.5) (snd-display ";run array-interp: ~F?" (vct-ref v 0)))
	(vct-map! v (lambda () (array-interp v0 3.5 10)))
	(if (fneq (vct-ref v 0) 3.5) (snd-display ";run array-interp sized: ~F?" (vct-ref v 0)))
	(catch #t (lambda () (vct-map! v (lambda () (array-interp v0)))) (lambda args args))
	(catch #t (lambda () (vct-map! v (lambda () (array-interp v0 3.5 10 123)))) (lambda args args)))

      (let ((e (make-env '(0 0 1 1) :end 10))
	    (v (make-vct 1))
	    (b 123.0)
	    (enq #f)
	    (cs 123)
	    (ep -123)
	    (val8 123.0)
	    (val0 123.0))
	(env e) (env e)
	(vct-map! v (lambda ()
		      (set! b (mus-increment e))
		      (set! cs (mus-location e))
		      (set! (mus-location e) 8)
		      (set! enq (env? e))
		      (set! val8 (env e))
		      (set! ep (mus-position e))
		      (restart-env e)
		      (set! val0 (env e))
		      (env-interp .5 e)))
	(if (not enq) (snd-display ";run env?"))
	(if (not (= cs 2)) (snd-display ";run mus-location: ~A" cs))
	(if (not (= ep 0)) (snd-display ";run mus-position: ~A" ep))
	(if (fneq b 1.0) (snd-display ";run mus-increment: ~A" b))
	(if (fneq val8 0.8) (snd-display ";run set location: ~A" val8))
	(if (fneq val0 0.0) (snd-display ";run restart-env: ~A" val0))
	(if (fneq (vct-ref v 0) .5) (snd-display ";run env-interp: ~A" (vct-ref v 0)))
	(catch #t (lambda () (vct-map! v (lambda () (env e 1.0)))) (lambda args args))
	(catch #t (lambda () (vct-map! v (lambda () (env-interp e)))) (lambda args args)))

      (let ((flt (make-filter 3 (vct .1 .2 .3) (vct .4 .5 .6)))
	    (v (make-vct 1))
	    (d1 -1.0)
	    (x1 -1.0)
	    (y1 -1.0))
	(vct-map! v (lambda ()
		      (filter flt 1.0)
		      (set! d1 (vct-ref (mus-data flt) 1))
		      (set! x1 (vct-ref (mus-xcoeffs flt) 1))
		      (set! y1 (vct-ref (mus-ycoeffs flt) 1))
		      0.0))
	(if (fneq d1 1.0) (snd-display ";run mus-data: ~A" d1 (mus-data flt)))
	(if (fneq x1 .2) (snd-display ";run mus-xcoeffs: ~A" x1 (mus-xcoeffs flt)))
	(if (fneq y1 .5) (snd-display ";run mus-ycoeffs: ~A" y1 (mus-ycoeffs flt))))

      (let ((grn (make-granulate :expansion 2.0))
	    (v (make-vct 1))
	    (gr 123)
	    (gs .123)
	    (ge .123)
	    (gh 123))
	(vct-map! v (lambda ()
		      (set! gr (mus-ramp grn))
		      (set! gs (mus-scaler grn))
		      (set! ge (mus-increment grn))
		      (set! gh (mus-hop grn))
		      (set! (mus-ramp grn) 321)
		      (set! (mus-scaler grn) .321)
		      (set! (mus-hop grn) 1234)
		      0.0))
	(if (not (= gr 1323)) (snd-display ";run ramp: ~A" gr))
	(if (not (= gh 1102)) (snd-display ";run hop: ~A" gh))
	(if (fneq gs 0.6) (snd-display ";run scaler: ~A" gs))
	(if (fneq ge 2.0) (snd-display ";run gran exp: ~A" ge))
	(if (fneq (mus-scaler grn) .321) (snd-display ";run set scl: ~A" (mus-scaler grn)))
	(if (not (= (mus-hop grn) 1234)) (snd-display ";run set hop: ~A" (mus-hop grn)))
	(if (not (= (mus-ramp grn) 321)) (snd-display ";run set ramp: ~A" (mus-ramp grn))))

      (let ((v0 (make-vct 1))
	    (v1 (make-vct 1))
	    (v (make-vct 1))
	    (val .123))
	(vct-set! v0 0 1.0)
	(vct-set! v1 0 1.0)
	(vct-map! v (lambda ()
		      (rectangular->polar v0 v1)
		      (set! val (vct-ref v0 0))
		      (polar->rectangular v0 v1)
		      (vct-ref v1 0)))
	(if (fneq (vct-ref v 0) 1.0) (snd-display ";run r->p not inverted: ~A" v))
	(if (fneq val (sqrt 2.0)) (snd-display ";r->p: ~A" val)))

      (let ((v (make-vct 1))
	    (v0 (vct 1.0 2.0))
	    (v1 (vct 0.5 1.0)))
	(vct-map! v (lambda ()
		      (dot-product v0 v1)))
	(if (fneq (vct-ref v 0) 2.5) (snd-display ";run dot-product: ~A" (vct-ref v 0))))

      (let ((fr1 (make-frame 2 .1 .2))
	    (fr2 (make-frame 2 .3 .4))
	    (fr3 (make-frame 2 0.0 0.0))
	    (fr4 (make-frame 2 0.0 0.0))
	    (v (make-vct 1)))
	(vct-map! v (lambda ()
		      (frame* fr1 fr2 fr3)
		      (frame+ fr1 fr2 fr4)
		      (frame->sample fr1 fr2)))
	(if (fneq (frame-ref fr3 0) .03) (snd-display ";run frame* 0: ~A" (frame-ref fr3 0)))
	(if (fneq (frame-ref fr3 1) .08) (snd-display ";run frame* 1: ~A" (frame-ref fr3 1)))
	(if (fneq (frame-ref fr4 0) .4) (snd-display ";run frame+ 0: ~A" (frame-ref fr4 0)))
	(if (fneq (frame-ref fr4 1) .6) (snd-display ";run frame+ 1: ~A" (frame-ref fr4 1)))
	(if (fneq (vct-ref v 0) .11) (snd-display ";run frame->sample: ~A" (vct-ref v 0))))

      (let ((gen (make-buffer 3))
	    (fr (make-frame 1 .1))
	    (v (make-vct 1))
	    (gfull #f)
	    (gempty #f)
	    (gq #f)
	    (v3 (make-vct 3)))
	(vct-map! v (lambda ()
		      (set! gq (buffer? gen))
		      (set! gfull (buffer-full? gen))
		      (set! gempty (buffer-empty? gen))
		      (frame->buffer gen fr)
		      (sample->buffer gen .123)
		      (do ((i 0 (1+ i))) ((= i 3)) (vct-set! v3 i (buffer->sample gen)))
		      (buffer->sample gen)))
	(if (not gq) (snd-display ";run buffer?"))
	(if (not gempty) (snd-display ";run buffer-empty?"))
	(if gfull (snd-display ";run buffer-full?"))
	(if (not (vequal v3 (vct .1 .123 0.0)))	(snd-display ";run buffer->sample: ~A" v3)))
	
      (let ((v0 (make-vct 4))
	    (v1 (make-vct 4))
	    (v (make-vct 1)))
	(vct-set! v0 0 1.0)
	(vct-set! v1 2 1.0)
	(vct-map! v (lambda () (convolution v0 v1) 0.0))
	(if (or (not (vequal v0 (vct 0.0 0.0 1.0 0.0)))
		(not (vequal v1 (vct 0.0 0.0 0.0 0.0))))
	    (snd-display ";run convolution: ~A ~A" v0 v1)))

      (let ((v0 (make-vct 4))
	    (v1 (make-vct 4))
	    (v (make-vct 1)))
	(vct-set! v0 0 1.0)
	(vct-set! v1 2 1.0)
	(vct-map! v (lambda () (vct-convolve! v0 v1) 0.0))
	(if (or (not (vequal v0 (vct 0.0 0.0 1.0 0.0)))
		(not (vequal v1 (vct 0.0 0.0 0.0 0.0))))
	    (snd-display ";run vct-convolve!: ~A ~A" v0 v1)))

      (let ((v (make-vct 1))
	    (amps (list->vct '(0.5 0.25 1.0)))
	    (phases (list->vct '(1.0 0.5 2.0))))
	(vct-map! v (lambda () (sum-of-sines amps phases)))
	(if (fneq (vct-ref v 0) 1.44989) (snd-display ";run sum-of-sines: ~A?" (vct-ref v 0))))

      (let ((fr0 (make-frame 2 1.0 1.0))
	    (fr1 (make-frame 2 0.0 0.0))
	    (gen (make-mixer 2 .5 .25 .125 1.0))
	    (v (make-vct 1)))
	(vct-map! v (lambda () (frame->frame gen fr0 fr1) (frame-ref fr1 1)))
	(if (fneq (frame-ref fr1 1) 1.25) (snd-display ";run frame->frame: ~A" fr1)))

      (let ((rdat (make-vct 16))
	    (idat (make-vct 16))
	    (win (make-fft-window rectangular-window 16))
	    (v (make-vct 1)))
	(vct-set! rdat 0 1.0)
	(vct-map! v (lambda ()
		      (spectrum rdat idat win 16 1)
		      0.0))
	(do ((i 0 (1+ i)))
	    ((= i 8)) 
	  (if (fneq (vct-ref rdat i) 1.0)
	      (snd-display ";run impulse->flat? ~A" rdat)))
	(catch #t (lambda () (vct-map! v (lambda () (spectrum rdat idat win 17.3)))) (lambda args args)))

      (let ((rdat (make-vct 16))
	    (idat (make-vct 16))
	    (win (make-fft-window rectangular-window 16))
	    (v (make-vct 1)))
	(vct-set! rdat 0 1.0)
	(vct-map! v (lambda ()
		      (spectrum rdat idat win 16)
		      0.0))
	(do ((i 0 (1+ i)))
	    ((= i 8)) 
	  (if (fneq (vct-ref rdat i) 1.0)
	      (snd-display ";run impulse->flat (1)? ~A" rdat))))

      (let ((rdat (make-vct 16))
	    (idat (make-vct 16))
	    (win (make-fft-window rectangular-window 16))
	    (v (make-vct 1)))
	(vct-set! rdat 0 1.0)
	(vct-map! v (lambda ()
		      (spectrum rdat idat win)
		      0.0))
	(do ((i 0 (1+ i)))
	    ((= i 8)) 
	  (if (fneq (vct-ref rdat i) 1.0)
	      (snd-display ";run impulse->flat (2)? ~A" rdat))))

      (let ((mx1 (make-mixer 2))
	    (mx2 (make-mixer 2))
	    (v (make-vct 1)))
	(vct-map! v (lambda ()
		      (mixer-set! mx1 0 0 .1)
		      (mixer* mx1 mx1 mx2)
		      0.0))
	(if (fneq (mixer-ref mx2 0 0) .01) (snd-display ";run mixer* res: ~A" mx2)))

      (let ((mx1 (make-mixer 2))
	    (mx2 (make-mixer 2))
	    (v (make-vct 1)))
	(vct-map! v (lambda ()
		      (set! (mixer-ref mx1 0 0) .1)
		      (mixer* mx1 mx1 mx2)
		      0.0))
	(if (fneq (mixer-ref mx2 0 0) .01) (snd-display ";run mixer* res (set): ~A" mx2)))

      (let ((gen (make-buffer 4))
	    (fr0 (make-frame 2 .1 .2))
	    (fr1 (make-frame 2))
	    (v (make-vct 1)))
	(vct-map! v (lambda ()
		      (sample->frame fr0 .5 fr1)
		      (frame->buffer gen fr1)
		      (frame->buffer gen fr0)
		      (let ((val (buffer->sample gen)))
			(buffer->frame gen fr0)
			val)))
	(if (fneq (vct-ref v 0) .05) (snd-display ";run sample->frame: ~A" v)))

      (let ((gen (make-sample->file "fmv.snd" 2 mus-lshort mus-riff))
	    (v (make-vct 1))
	    (oq #f)
	    (sq #f))
	(vct-map! v (lambda ()
		      (set! oq (mus-output? gen))
		      (set! sq (sample->file? gen))
		      (do ((i 0 (1+ i)))
			  ((= i 100))
			(sample->file gen i 0 (* i .001))
			(sample->file gen i 1 (* i .01)))
		      (outa 50 .015 gen)
		      (outb 50 .15 gen)
		      (out-any 60 .015 0 gen)
		      (out-any 60 .15 1 gen)
		      0.0))
	(mus-close gen)
	(if (not oq) (snd-display ";run mus-output?"))
	(if (not sq) (snd-display ";run mus-output?"))
	(catch #t (lambda () (vct-map! v (lambda () (sample->file gen)))) (lambda args args))
	(catch #t (lambda () (vct-map! v (lambda () (sample->file gen 0 0 .1 .2)))) (lambda args args)))

      (let* ((gen (make-file->sample "fmv.snd"))
	     (vals (make-vct 10))
	     (iq #f)
	     (fq #f)
	     (v (make-vct 1)))
	(vct-map! v (lambda ()
		      (vct-set! vals 0 (in-any 20 0 gen))
		      (vct-set! vals 1 (in-any 20 1 gen))
		      (vct-set! vals 2 (ina 30 gen))
		      (vct-set! vals 3 (inb 30 gen))
		      (vct-set! vals 4 (file->sample gen 40 0))
		      (vct-set! vals 5 (file->sample gen 40 1))
		      (vct-set! vals 6 (in-any 50 0 gen))
		      (vct-set! vals 7 (in-any 50 1 gen))
		      (vct-set! vals 8 (in-any 60 0 gen))
		      (vct-set! vals 9 (in-any 60 1 gen))
		      (set! iq (mus-input? gen))
		      (set! fq (file->sample? gen))
		      0.0))
	(if (not iq) (snd-display ";run mus-input?"))
	(if (not fq) (snd-display ";run file->sample?"))
	(if (not (vequal vals (vct .02 .2 .03 .3 .04 .4 .065 .65 .075 .75))) (snd-display ";run i/o: ~A" vals)))
      (delete-file "fmv.snd")

      (let ((gen (make-frame->file "fmv.snd" 2 mus-bshort mus-next))
	    (v (make-vct 1))
	    (fq #f)
	    (fr0 (make-frame 2 0.0 0.0)))
	(vct-map! v (lambda ()
		      (set! fq (frame->file? gen))
		      (do ((i 0 (1+ i)))
			  ((= i 10))
			(frame-set! fr0 0 (* i .001))
			(frame-set! fr0 1 (* i .01))
			(frame->file gen i fr0))
		      0.0))
	(mus-close gen)
	(if (not fq) (snd-display ";run frame->file?")))

      (let* ((gen (make-file->frame "fmv.snd"))
	     (frout (make-frame 2))
	     (v (make-vct 1))
	     (fq #f))
	(vct-map! v (lambda ()
		      (file->frame gen 4 frout)
		      (set! fq (file->frame? gen))
		      (frame-ref frout 0)))
	(if (not fq) (snd-display ";run file->frame?"))
	(if (fneq (vct-ref v 0) .004) (snd-display ";run frame i/o: ~A" frout)))
      (delete-file "fmv.snd")

      (let ((hi (make-power-env '(0 0 32.0 1 1 .0312 2 0 1) :duration 1.0)))
	(itsta '(lambda (y) (declare (y penv)) (+ 1 2)) hi 3)
	;(itsta '(lambda () (penv-total-envs hi)) 0 2)
	)

      (let ((ind (open-sound "oboe.snd")))
	(let ((r (make-sample-reader 2000))
	      (v (make-vct 2)))
	  (itst '(srate) 22050)
	  (itst '(channels) 1)
	  (itst '(frames) 50828)
	  (if (not (= (run (lambda () (srate ind))) 22050))
	      (snd-display ";run srate ind: ~A" (run (lambda () (srate ind)))))
	  (if (not (= (run (lambda () (channels ind))) 1))
	      (snd-display ";run channels ind: ~A" (run (lambda () (channels ind)))))
	  (if (not (= (run (lambda () (frames ind 0))) 50828))
	      (snd-display ";run frames ind: ~A" (run (lambda () (frames ind 0)))))
	  (vct-map! v (lambda () (next-sample r)))
	  (if (or (fneq (vct-ref v 0) .0662) (fneq (vct-ref v 1) .0551)) (snd-display ";next-sample ftst: ~A" v))
	  (vct-map! v (lambda () (previous-sample r)))
	  (if (or (fneq (vct-ref v 0) .0551) (fneq (vct-ref v 1) .0662)) (snd-display ";previous-sample ftst: ~A" v))
	  (previous-sample r)
	  (next-sample r)
	  (vct-map! v (lambda () (read-sample r)))
	  (if (or (fneq (vct-ref v 0) .0662) (fneq (vct-ref v 1) .0551)) (snd-display ";read-sample ftst: ~A" v))
	  (vct-map! v (lambda () (r)))
	  (if (or (fneq (vct-ref v 0) .039) (fneq (vct-ref v 1) .024)) (snd-display ";read-sample apply ftst: ~A" v))
	  (etst '(set! (sample 100) 0.0))
	  )
	(close-sound ind))

      (let ((ind (open-sound "oboe.snd")))
	(let ((v (make-vct 2)))
	  (ftst '(let ((r (make-sample-reader 1200.0))) (next-sample r)) 0.04898)
	  (vct-map! v (let ((r (make-sample-reader 2000)))
			(lambda () (next-sample r))))
	  (if (or (fneq (vct-ref v 0) .0662) (fneq (vct-ref v 1) .0551)) (snd-display ";next-sample let ftst: ~A" v))
	  (vct-map! v (let ((r (make-sample-reader 2000 #f)))
			(lambda () (next-sample r))))
	  (if (or (fneq (vct-ref v 0) .0662) (fneq (vct-ref v 1) .0551)) (snd-display ";next-sample let ftst #f: ~A" v))
	  (vct-map! v (let ((r (make-sample-reader 2000 #f #f)))
			(lambda () (next-sample r))))
	  (if (or (fneq (vct-ref v 0) .0662) (fneq (vct-ref v 1) .0551)) (snd-display ";next-sample let ftst #f #f: ~A" v))
	  (vct-map! v (let ((r (make-sample-reader 2000 #f #f 1 current-edit-position)))
			(lambda () (next-sample r))))
	  (if (or (fneq (vct-ref v 0) .0662) (fneq (vct-ref v 1) .0551)) (snd-display ";next-sample let ftst #f #f 1 -1: ~A" v))
	  (vct-map! v (let ((r (make-sample-reader 2000 ind)))
			(lambda () (next-sample r))))
	  (if (or (fneq (vct-ref v 0) .0662) (fneq (vct-ref v 1) .0551)) (snd-display ";next-sample let snd ftst: ~A" v))
	  (vct-map! v (let ((r (make-sample-reader 2000 ind 0)))
			(lambda () (next-sample r))))
	  (if (or (fneq (vct-ref v 0) .0662) (fneq (vct-ref v 1) .0551)) (snd-display ";next-sample let chn ftst: ~A" v))
	  (vct-map! v (let ((r (make-sample-reader 2000 ind 0 1 (edit-position ind 0))))
			(lambda () 
			  (if (or (not (= (edit-position ind 0) 0))
				  (not (= (edit-position ind) 0))
				  (not (= (edit-position) 0)))
			      (begin
				(report-in-minibuffer "oops")
				(report-in-minibuffer "oops again" ind)
				-123.0)
			      (next-sample r)))))
	  (if (or (fneq (vct-ref v 0) .0662) (fneq (vct-ref v 1) .0551)) (snd-display ";next-sample let edit ftst: ~A" v))
	  (itst '(frames) 50828)
	  (itst (list 'frames ind) 50828)
	  (itst (list 'frames ind 0) 50828)
	  (itst (list 'frames ind 0 0) 50828)
	  (itst (list 'frames #f 0) 50828)
	  (itst (list 'frames #f #f) 50828)
	  (itst (list 'frames #f #f current-edit-position) 50828)
	  (itst (list 'cursor ind) 0)
	  (itst (list 'cursor) 0)
	  (itst (list 'cursor ind 0) 0)
	  (ftst (list 'maxamp ind 0) .1472)
	  (ftst (list 'maxamp) .1472)
	  (set! (cursor ind 0) 100)
	  (itst (list 'cursor ind) 100)
	  (itst (list 'cursor) 100)
	  (itst (list 'cursor ind 0) 100)
	  (etst '(edit-position ind 0 0))
	  (let ((m (run-eval '(add-mark 100))))
	    (if (or (not (mark? m))
		    (not (= (mark-sample m) 100)))
		(snd-display ";run add-mark: ~A" (and (mark? m) (mark-sample m)))))
	  (close-sound ind)))

      (let ((ind0 (new-sound "fmv0.snd" mus-next mus-bfloat 22050 1 "map tests"))
	    (ind1 (new-sound "fmv1.snd" mus-next mus-bfloat 22050 1 "map tests"))
	    (ones (make-vct 1000000))
	    (t0 0)
	    (t1 0)
	    (ts '()))
	(vct-map! ones (lambda () (- 1.0 (* 2 (random 1.0)))))
	(vct->channel ones 0 1000000 ind0)
	(vct->channel ones 0 1000000 ind1)
	(set! (optimization) 0) 
	(set! t0 (time-it (map-channel (lambda (y) (* y 2)) 0 1000000 ind0)))
	(set! (optimization) max-optimization) 
	(set! t1 (time-it (map-channel (lambda (y) (* y 2)) 0 1000000 ind1)))
	(if (not (vequal (channel->vct 0 1000000 ind0) (channel->vct 0 1000000 ind1))) 
	    (snd-display ";y * 2 run: ~A ~A" (channel->vct 0 1000000 ind0) (channel->vct 0 1000000 ind1)))
	(set! ts (cons (list "*2     " t0 t1 (inexact->exact (round (/ t0 t1)))) ts))
	(set! (optimization) 0) 
	(set! t0 (time-it (map-channel (lambda (y) (- y 1.0)) 0 1000000 ind0)))
	(set! (optimization) max-optimization)
	(set! t1 (time-it (map-channel (lambda (y) (- y 1.0)) 0 1000000 ind1)))
	(if (not (vequal (channel->vct 0 1000000 ind0) (channel->vct 0 1000000 ind1))) 
	    (snd-display ";y - 1 run: ~A ~A" (channel->vct 0 1000000 ind0) (channel->vct 0 1000000 ind1)))
	(set! ts (cons (list "-1     " t0 t1 (inexact->exact (round (/ t0 t1)))) ts))
	(set! (optimization) 0) 
	(set! t0 (time-it (map-channel (lambda (y) (abs (sin y))) 0 1000000 ind0)))
	(set! (optimization) max-optimization) 
	(set! t1 (time-it (map-channel (lambda (y) (abs (sin y))) 0 1000000 ind1)))
	(if (not (vequal (channel->vct 0 1000000 ind0) (channel->vct 0 1000000 ind1))) 
	    (snd-display ";abs sin run: ~A ~A" (channel->vct 0 1000000 ind0) (channel->vct 0 1000000 ind1)))
	(set! ts (cons (list "abs sin" t0 t1 (inexact->exact (round (/ t0 t1)))) ts))
	(set! (optimization) 0) 
	(set! t0 (time-it (map-channel (lambda (y) (let ((a (* y 2))) (if (> y 1.0) 1.0 y))) 0 1000000 ind0)))
	(set! (optimization) max-optimization) 
	(set! t1 (time-it (map-channel (lambda (y) (let ((a (* y 2))) (if (> y 1.0) 1.0 y))) 0 1000000 ind1)))
	(if (not (vequal (channel->vct 0 1000000 ind0) (channel->vct 0 1000000 ind1))) 
	    (snd-display ";let y run: ~A ~A" (channel->vct 0 1000000 ind0) (channel->vct 0 1000000 ind1)))
	(set! ts (cons (list "let if " t0 t1 (inexact->exact (round (/ t0 t1)))) ts))
	(set! (optimization) 0) 
	(set! t0 (time-it (map-channel (let ((v (make-vct 3))) (lambda (y) (vct-set! v 1 .5) (* y (vct-ref v 1)))) 0 1000000 ind0)))
	(set! (optimization) max-optimization) 
	(set! t1 (time-it (map-channel (let ((v (make-vct 3))) (lambda (y) (vct-set! v 1 .5) (* y (vct-ref v 1)))) 0 1000000 ind1)))
	(if (not (vequal (channel->vct 0 1000000 ind0) (channel->vct 0 1000000 ind1))) 
	    (snd-display ";let y run: ~A ~A" (channel->vct 0 1000000 ind0) (channel->vct 0 1000000 ind1)))
	(set! ts (cons (list "vct-ref" t0 t1 (inexact->exact (round (/ t0 t1)))) ts))
	
	(set! (optimization) 0) 
	(set! t0 (time-it (let ((osc (make-oscil :frequency 440))
				(e1 (make-env '(0 0 1 1 2 0) :end 1000000)))
			    (map-channel (lambda (y) (* (env e1) (oscil osc y))) 0 1000000 ind0))))
	(set! (optimization) max-optimization) 
	(set! t1 (time-it (let ((osc (make-oscil :frequency 440))
				(e1 (make-env '(0 0 1 1 2 0) :end 1000000)))
			    (map-channel (lambda (y) (* (env e1) (oscil osc y))) 0 1000000 ind1))))
	(if (not (vequal (channel->vct 0 1000000 ind0) (channel->vct 0 1000000 ind1))) 
	    (snd-display ";let y run: ~A ~A" (channel->vct 0 1000000 ind0) (channel->vct 0 1000000 ind1)))
	(set! ts (cons (list "osc+env" t0 t1 (inexact->exact (round (/ t0 t1)))) ts))
	
	(close-sound ind0)
	(close-sound ind1)
	(snd-display ";timings:~{~%       ~A~}" ts))

      (let ((v0 (make-vct 10))
	    (v1 (make-vct 10)))
	(set! (optimization) 0) (vct-map! v0 (lambda () .1))
	(set! (optimization) max-optimization) (vct-map! v1 (lambda () .1))
	(if (or (not (vequal v0 v1)) (fneq (vct-ref v1 0) .1)) (snd-display ";vct-map .1: ~A ~A" v0 v1))
	(set! dbl-var .1)
	(set! (optimization) 0) (vct-map! v0 (lambda () dbl-var))
	(set! (optimization) max-optimization) (vct-map! v1 (lambda () dbl-var))
	(if (or (not (vequal v0 v1)) (fneq (vct-ref v1 0) .1)) (snd-display ";vct-map dbl-var .1: ~A ~A" v0 v1))
	(let ((dbl-var .3))
	  (set! (optimization) 0) (vct-map! v0 (lambda () dbl-var))
	  (set! (optimization) max-optimization) (vct-map! v1 (lambda () dbl-var))
	  (if (or (not (vequal v0 v1)) (fneq (vct-ref v1 0) .3)) (snd-display ";vct-map dbl-var .3: ~A ~A" v0 v1)))
	(let ((dbl-var .3))
	  (let ((dbl-var .5))
	    (set! (optimization) 0) (vct-map! v0 (lambda () dbl-var))
	    (set! (optimization) max-optimization) (vct-map! v1 (lambda () dbl-var))
	    (if (or (not (vequal v0 v1)) (fneq (vct-ref v1 0) .5)) (snd-display ";vct-map dbl-var .5: ~A ~A" v0 v1))))
	(let ((dbl-var .3))
	  (let ((dbl-var .5))
	    (set! (optimization) 0) (vct-map! v0 (let ((dbl-var .9)) (lambda () dbl-var)))
	    (set! (optimization) max-optimization) (vct-map! v1 (let ((dbl-var .9)) (lambda () dbl-var)))
	    (if (or (not (vequal v0 v1)) (fneq (vct-ref v1 0) .9)) (snd-display ";vct-map dbl-var .9: ~A ~A" v0 v1))))
	(let ((dbl-var .3))
	  (let ((dbl-var .5))
	    (set! (optimization) 0) (vct-map! v0 (let ((dbl-var .9)) (lambda () (let ((dbl-var .01)) dbl-var))))
	    (set! (optimization) max-optimization) (vct-map! v1 (let ((dbl-var .9)) (lambda () (let ((dbl-var .01)) dbl-var))))
	    (if (or (not (vequal v0 v1)) (fneq (vct-ref v1 0) .01)) (snd-display ";vct-map dbl-var .01: ~A ~A" v0 v1))))
	)

      (let ((t0 0)
	    (t1 0)
	    (ts '()))
	(set! (optimization) 0) 
	(set! t0 (time-it (fm-violin-opt 0 5 440 .1)))
	(set! (optimization) max-optimization) 
	(set! t1 (time-it (fm-violin-opt 0 5 440 .1)))
	(set! ts (cons (list "fm vln " t0 t1 (inexact->exact (round (/ t0 t1)))) ts))
	
	(let ((ind (open-sound "1.snd"))
	      (v0 #f)
	      (v1 #f))
	  (set! (optimization) 0) 
	  (set! t0 (time-it (expsnd '(0 1 2 .4))))
	  (set! v0 (channel->vct 1000 100))
	  (undo 1 ind)
	  (set! (optimization) max-optimization) 
	  (set! t1 (time-it (expsnd '(0 1 2 .4))))
	  (set! v1 (channel->vct 1000 100))
	  (if (not (vequal v0 v1)) (snd-display ";expsnd: opt: ~A ~A" v0 v1))
	  (set! ts (cons (list "expsnd " t0 t1 (inexact->exact (round (/ t0 t1)))) ts))
	  (undo 1 ind)
	  (set! (optimization) 0) 
	  (set! t0 (time-it (jc-reverb 1.0 #f 1.0 #f)))
	  (set! v0 (channel->vct 1000 100))
	  (undo 1 ind)
	  (set! (optimization) max-optimization) 
	  (set! t1 (time-it (jc-reverb 1.0 #f 1.0 #f)))
	  (set! v1 (channel->vct 1000 100))
	  (if (not (vequal v0 v1)) (snd-display ";jcrev: opt: ~A ~A" v0 v1))
	  (set! ts (cons (list "jcrev  " t0 t1 (inexact->exact (round (/ t0 t1)))) ts))
	  (close-sound ind))
	(snd-display ";         ~{~%       ~A~}~%" ts))

      (let* ((osc (make-oscil 440))
	     (vi (make-vector 2 1))
	     (vf (make-vector 2 .1))
	     (v (make-vct 2 3.14))
	     (vv (make-vector 2 v))
	     (vc (make-vector 2 osc))
	     (ind (open-sound "oboe.snd"))
	     (sm (make-sample-reader 0 ind)))
	(run (lambda ()
	       (define (hi a) (+ a 1))
	       (display "---------------------------------------------------------------") (display #\newline)
	       (display 3) (display .14) (display "15") (display #\1) (display #f) 
	       (display osc) (display vi) (display vf) (display v) (display vv) (display vc) (display sm)
	       (snd-print "snd-print test...")
	       (snd-warning "snd-warning test...")
	       (report-in-minibuffer "report-in-minibuffer test..." ind)
	       (display hi) (display '(1 2)) (display '(1 . 2)) (display :hiho)(display 'asdf)
	       (call/cc (lambda (hiho) (if #f (hiho) (display hiho))))
	       (display #\newline) (display "---------------------------------------------------------------") (display #\newline)
	       ))
	(if (not (string? (describe-walk-info '*)))
	    (snd-display ";walk-info *: ~A" (describe-walk-info '*)))
	(close-sound ind))
      
      (let ((val (run-eval '(lambda () (fneq .1 .1)))))
	(if val (snd-display ";embedded func 0: ~A" val)))
      (let ((val (run-eval '(lambda () (fneq .1 .2)))))
	(if (not val) (snd-display ";embedded func 1: ~A" val)))
      (let ((val (run-eval '(lambda () (fneq .1 .1001)))))
	(if val (snd-display ";embedded func 2: ~A" val)))
      
      (let ((val (run-eval '(fneq .1 .1))))
	(if val (snd-display ";embedded func 3: ~A" val)))
      (let ((val (run-eval '(fneq .1 .2))))
	(if (not val) (snd-display ";embedded func 4: ~A" val)))
      (let ((val (run-eval '(fneq .1 .1001))))
	(if val (snd-display ";embedded func 5: ~A" val)))
      
      (define (efunc-1 arg) (+ arg 1))
      (let ((val (run-eval '(efunc-1 1.5))))
	(if (fneq val 2.5) (snd-display ";embedded func 6: ~A" val)))
      (let ((val (run-eval '(+ 1.0 (efunc-1 1.5)))))
	(if (fneq val 3.5) (snd-display ";embedded func 7: ~A" val)))
      (let ((val (run-eval '(efunc-1 1))))
	(if (not (= val 2)) (snd-display ";embedded func 8: ~A" val)))
      (let ((val (run-eval '(* 2 (efunc-1 1)))))
	(if (not (= val 4)) (snd-display ";embedded func 9: ~A" val)))
      
      (let ((val (run-eval '(if (fneq .1 .2) (* 2 (efunc-1 1)) -1))))
	(if (not (= val 4)) (snd-display ";embedded func 10: ~A" val)))
      
      (define (efunc-2 arg) (not arg))
      (let ((val (run-eval '(efunc-2 #f))))
	(if (not val) (snd-display ";embedded func 11: ~A" val)))
      (let ((val (run-eval '(if (efunc-2 (fneq .1 .1)) 0 1))))
	(if (not (= val 0)) (snd-display ";embedded func 12: ~A" val)))
      (let ((val (run-eval '(if (efunc-2 (fneq .1 (efunc-1 .2))) 0 1))))
	(if (not (= val 1)) (snd-display ";embedded func 13: ~A" val)))
      
      (define (efunc-3 arg1 arg2 arg3) (if arg1 (+ arg2 arg3) 0))
      (let ((val (run-eval '(efunc-3 (fneq .1 .2) 32 12))))
	(if (not (= val 44)) (snd-display ";embedded func 14: ~A" val)))
      
      (define (efunc-4 arg) (string-append arg "!"))
      (let ((val (run-eval '(efunc-4 "hi"))))
	(if (not (string=? val "hi!")) (snd-display ";embedded func 15: ~A" val)))
      (define (efunc-5 arg) (+ 1 (string-length arg)))
      (let ((val (run-eval '(efunc-5 "hi"))))
	(if (not (= val 3)) (snd-display ";embedded func 16: ~A" val)))
      
      (define (efunc-6 arg) (oscil arg))
      (define efunc-gen (make-oscil 440.0))
      (oscil efunc-gen)
      (let ((val (run-eval '(efunc-6 efunc-gen))))
	(if (fneq val .125) (snd-display ";embedded func 17: ~A" val)))
      (define (efunc-7 arg) arg)
      (let ((val (run-eval '(oscil (efunc-7 efunc-gen)))))
	(if (fneq val .248) (snd-display ";embedded func 18: ~A" val)))
      
      (let ((ind (open-sound "oboe.snd")))
	(let ((val (run (lambda () (samples->vct 1000 10 ind 0 (make-vct 10))))))
	  (if (not (vequal val (vct 0.033 0.035 0.034 0.031 0.026 0.020 0.013 0.009 0.005 0.004)))
	      (snd-display ";run samples->vct: ~A" val)))
	(close-sound ind))

      (let ((rla (make-vct 16)))
	(let ((val (run (lambda () 
			  (vct-set! rla 0 1.0)
			  (vct-set! rla 4 1.0)
			  (autocorrelate rla)
			  rla))))
	  (if (fneq (vct-ref val 0) 2.0) (snd-display ";run autocorrelate 0: ~A" (vct-ref rla 0)))
	  (if (fneq (vct-ref val 4) 1.0) (snd-display ";run autocorrelate 4: ~A" (vct-ref rla 4)))))


      ))))


;;; ---------------- test 23: with-sound ----------------

(load "prc95.scm")
(load "v.scm")
(load "jcrev.scm") ; redefines jc-reverb (different from examp.scm version used above)
(load "maraca.scm")
(load "singer.scm")
(load "strad.scm")
(load "noise.scm")
(load "clm-ins.scm")
(load "bird.scm")
(load "piano.scm")

(define old-opt-23 (optimization))
(set! (optimization) max-optimization)

(define (ws-sine freq)
  (let ((o (make-oscil freq)))
    (run
     (lambda ()
       (do ((i 0 (1+ i)))
	   ((= i 100))
	 (outa i (oscil o) *output*))))))

(if (or full-test (= snd-test 23) (and keep-going (<= snd-test 23)))
    (begin
      (if (procedure? test-hook) (test-hook 23))
      (set! (mus-srate) 22050)
      (set! (default-output-srate) 22050)

      (with-sound (:srate 22050) (fm-violin 0 .1 440 .1))
      (let ((ind (find-sound "test.snd")))
	(if (not ind) (snd-display ";with-sound: ~A" (sounds)))
	(let ((mx (maxamp)))
	  (if (fneq mx .1) (snd-display ";with-sound max: ~A" (maxamp)))
	  (if (not (= (srate ind) 22050)) (snd-display ";with-sound srate: ~A (~A, ~A)" 
						       (srate ind) (mus-srate) (mus-sound-srate "test.snd")))
	  (if (not (= (frames ind) 2205)) (snd-display ";with-sound frames: ~A" (frames ind)))))

      (with-sound (:continue-old-file #t) (fm-violin .2 .1 440 .25))
      (let ((ind (find-sound "test.snd")))
	(if (not ind) (snd-display ";with-sound continued: ~A" (sounds)))
	(if (not (= (length (sounds)) 1)) (snd-display ";with-sound continued: ~{~A ~}" (map short-file-name (sounds))))
	(let ((mx (maxamp)))
	  (if (fneq mx .25) (snd-display ";with-sound continued max: ~A" (maxamp)))
	  (if (not (= (srate ind) 22050)) (snd-display ";with-sound continued srate: ~A (~A, ~A)" 
						       (srate ind) (mus-srate) (mus-sound-srate "test.snd")))
	  (if (not (= (frames ind) (* 3 2205))) (snd-display ";with-sound continued frames: ~A (~A)" (frames ind) (srate ind))))
	(close-sound ind))

      (with-sound (:srate 22050 :channels 2 :output "test1.snd") (fm-violin 0 .1 440 .1 :degree 45.0))
      (let ((ind (find-sound "test1.snd")))
	(if (not ind) (snd-display ";with-sound (1): ~A" (sounds)))
	(let ((mx (maxamp)))
	  (if (fneq mx .05) (snd-display ";with-sound max (1): ~A" (maxamp)))
	  (if (not (= (srate ind) 22050)) (snd-display ";with-sound srate (1): ~A (~A, ~A)" 
						       (srate ind) (mus-srate) (mus-sound-srate "test.snd")))
	  (if (not (= (frames ind) 2205)) (snd-display ";with-sound frames (1): ~A" (frames ind)))
	  (if (not (= (chans ind) 2)) (snd-display ";with-sound chans (1): ~A" (chans ind))))
	(close-sound ind)
	(delete-file "test1.snd"))

      (with-sound (:srate 22050 :channels 2 :output "test1.snd" :reverb jc-reverb) (fm-violin 0 .1 440 .1 :degree 45.0))
      (let ((ind (find-sound "test1.snd")))
	(if (not ind) (snd-display ";with-sound (2): ~A" (sounds)))
	(if (not (= (frames ind) (+ 22050 2205))) (snd-display ";with-sound reverbed frames (2): ~A" (frames ind)))
	(close-sound ind))

      (with-sound (:srate 22050 :output "test1.snd" :reverb jc-reverb) (fm-violin 0 .1 440 .1))
      (let ((ind (find-sound "test1.snd")))
	(if (not ind) (snd-display ";with-sound (3): ~A" (sounds)))
	(if (not (= (frames ind) (+ 22050 2205))) (snd-display ";with-sound reverbed frames (3): ~A" (frames ind)))
	(close-sound ind)
	(delete-file "test1.snd"))

      (with-sound (:srate 22050 :comment "Snd+Run!" :scaled-to .5) (fm-violin 0 .1 440 .1))
      (let ((ind (find-sound "test.snd")))
	(if (not ind) (snd-display ";with-sound: ~A" (sounds)))
	(let ((mx (maxamp)))
	  (if (fneq mx .5) (snd-display ";with-sound scaled-to: ~A" (maxamp)))
	  (if (not (string=? (comment ind) "Snd+Run!")) (snd-display ";with-sound comment: ~A (~A)" (comment ind) (mus-sound-comment "test.snd"))))
	(close-sound ind))

      (with-sound (:srate 22050 :scaled-by .5 :header-type mus-aifc :data-format mus-bfloat) (fm-violin 0 .1 440 .1))
      (let ((ind (find-sound "test.snd")))
	(if (not ind) (snd-display ";with-sound: ~A" (sounds)))
	(let ((mx (maxamp)))
	  (if (fneq mx .05) (snd-display ";with-sound scaled-by: ~A" (maxamp)))
	  (if (not (= (header-type ind) mus-aifc)) (snd-display ";with-sound type: ~A (~A)" (header-type ind) (mus-header-type-name (header-type ind))))
	  (if (not (= (data-format ind) mus-bfloat)) (snd-display ";with-sound format: ~A (~A)" (data-format ind) (mus-data-format-name (data-format ind)))))
	(close-sound ind))

      (with-sound (:srate 44100 :statistics #t) (ws-sine 1000))
      (let ((ind (find-sound "test.snd")))
	(let ((i -1))
	  (scan-channel (lambda (y)
			  (set! i (1+ i))
			  (if (fneq y (sin (* 2 3.14159 i (/ 1000.0 44100.0))))
			      (begin
				(snd-display ";with-sound sine: ~D ~A ~A" i y (sin (* 2 3.14159 i (/ 1000.0 44100.0))))
				#t)
			      #f))))
	(close-sound ind))

      (if (file-exists? "ii.scm")
	  (begin
	    (time (load "ii.scm"))
	    (map close-sound (sounds))
	    (delete-file "test.snd")
	    (delete-file "test.rev")))

      (def-clm-struct st1 one two)
      (let ((var (make-st1 :one 1 :two 2)))
	(if (not (= (st1-one var) 1)) (snd-display ";st1-one: ~A" (st1-one var)))
	(if (not (= (st1-two var) 2)) (snd-display ";st1-two: ~A" (st1-two var)))
	(if (not (st1? var)) (snd-display ";st1? ~A (~A)" (st1? var) var))
	(set! (st1-one var) 321)
	(set! (st1-two var) "hiho")
	(if (not (= (st1-one var) 321)) (snd-display ";st1-one (321): ~A" (st1-one var)))
	(if (not (string=? (st1-two var) "hiho")) (snd-display ";st1-two (hiho): ~A" (st1-two var)))
	(set! var (make-st1))
	(if (not (eq? (st1-one var) #f)) (snd-display ";st1-one #f: ~A" (st1-one var)))
	(if (st1-two var) (snd-display ";st1-two #f: ~A" (st1-two var)))
	(set! var (make-st1 :two 3))
	(if (not (eq? (st1-one var) #f)) (snd-display ";st1-one #f (def): ~A" (st1-one var)))  
	(if (not (= (st1-two var) 3)) (snd-display ";st1-two (3): ~A" (st1-two var))))
      (def-clm-struct st2 (one 11) (two 22))
      (let ((var (make-st2 :one 1 :two 2)))
	(if (not (= (st2-one var) 1)) (snd-display ";st2-one: ~A" (st2-one var)))
	(if (not (= (st2-two var) 2)) (snd-display ";st2-two: ~A" (st2-two var)))
	(if (not (st2? var)) (snd-display ";st2? ~A (~A)" (st1? var) var))
	(if (st1? var) (snd-display ";st1? (not ~A): ~A" (st1? var) var))
	(set! (st2-one var) 321)
	(set! (st2-two var) "hiho")
	(if (not (= (st2-one var) 321)) (snd-display ";st2-one (321): ~A" (st2-one var)))
	(if (not (string=? (st2-two var) "hiho")) (snd-display ";st2-two (hiho): ~A" (st2-two var)))
	(set! var (make-st2))
	(if (not (= (st2-one var) 11)) (snd-display ";st2-one 11: ~A" (st2-one var)))
	(if (not (= (st2-two var) 22)) (snd-display ";st2-two 22: ~A" (st2-two var)))
	(set! var (make-st2 :two 3))
	(if (not (= (st2-one var) 11)) (snd-display ";st2-one 11 (def): ~A" (st2-one var)))  
	(if (not (= (st2-two var) 3)) (snd-display ";st2-two (3): ~A" (st2-two var))))

      (if (file-exists? "test.snd") (delete-file "test.snd"))
      (let ((outer (with-sound () 
			       (sound-let ((a () (fm-violin 0 .1 440 .1))) 
					  (mus-mix "test.snd" a)))))
	(if (not (string=? outer "test.snd"))
	    (snd-display ";with-sound returns: ~A" outer))
	(let ((ind (find-sound outer)))
	  (if (or (not (sound? ind))
		  (not (= (frames ind) (inexact->exact (* (mus-srate) .1)))))
	      (snd-display ";sound-let: ~A ~A" (frames ind) (inexact->exact (* (mus-srate) .1))))
	  (close-sound ind)))

      (if (file-exists? "test.snd") (delete-file "test.snd"))
      (let ((outer (with-sound () 
			       (sound-let ((a () (fm-violin 0 .1 440 .1))
					   (b 100))
				  (mus-mix "test.snd" a b)
					  (sound-let ((c (:channels 1 :output "temp.snd") (fm-violin 0 .1 110.0 .1)))
					     (mus-mix "test.snd" c))))))
	(if (not (string=? outer "test.snd"))
	    (snd-display ";with-sound (2) returns: ~A" outer))
	(let ((ind (find-sound outer)))
	  (if (or (not (sound? ind))
		  (not (= (frames ind) (+ 100 (inexact->exact (* (mus-srate) .1))))))
	      (snd-display ";sound-let (2): ~A ~A" (frames ind) (+ 100 (inexact->exact (* (mus-srate) .1)))))
	  (if (file-exists? "temp.snd")
	      (snd-display ";sound-let explicit output exists?"))
	  (close-sound ind)))

      (let ((w (init-with-sound)))
	(fm-violin 0 1 440 .1)
	(let ((outer (finish-with-sound w)))
	  (if (not (string=? outer "test.snd"))
	      (snd-display ";finish-with-sound returns: ~A" outer))
	  (let ((ind (find-sound outer)))
	    (if (not (sound? ind))
		(snd-display ";init-with-sound: ~A" (map short-file-name (sounds)))
		(begin
		  (if (fneq (maxamp ind 0) .1)
		      (snd-display ";init-with-sound max: ~A" (maxamp ind 0)))
		  (close-sound ind))))))

      (let ((w (init-with-sound :output "test.aiff" :header-type mus-aifc :scaled-to .5)))
	(fm-violin 0 1 440 .1)
	(let ((outer (finish-with-sound w)))
	  (if (not (string=? outer "test.aiff"))
	      (snd-display ";finish-with-sound (2) returns: ~A ~A" outer w))
	  (let ((ind (find-sound outer)))
	    (if (not (sound? ind))
		(snd-display ";init-with-sound (2): ~A" (map short-file-name (sounds)))
		(begin
		  (if (fneq (maxamp ind 0) .5)
		      (snd-display ";init-with-sound scaled-to: ~A ~A" (maxamp ind 0) w))
		  (if (not (= (header-type ind) mus-aifc))
		      (snd-display ";init-with-sound type: ~A ~A" (header-type ind) w))
		  (close-sound ind))))))

      (set! (mus-srate) 22050)
      (set! (default-output-srate) 22050)

      (let ((fmt1 '(0 1200 100 1000))
	    (fmt2 '(0 2250 100 1800))
	    (fmt3 '(0 4500 100 4500))
	    (fmt4 '(0 6750 100 8100))
	    (amp1 '(0 .67 100 .7))
	    (amp2 '(0 .95 100 .95))
	    (amp3 '(0 .28 100 .33))
	    (amp4 '(0 .14 100 .15))
	    (ind1 '(0 .75 100 .65))
	    (ind2 '(0 .75 100 .75))
	    (ind3 '(0 1 100 1))
	    (ind4 '(0 1 100 1))
	    (skwf '(0 0 100 0))
	    (ampf '(0 0 25 1 75 1 100 0))
	    (ranf '(0 .5 100 .5))
	    (index '(0 1 100 1))
	    (zero_fun '(0 0 100 0))
	    (atskew '(0 -1 15 .3 22 -.1 25 0 75 0 100 -.2))
	    (vibfun '(0 0 .3 .3 15 .6 25 1 100 1))
	    (slopefun '(0 1 75 1 100 0))
	    (trap '(0 0 25 1 75 1 100 0))
	    (ramp '(0 0 25 0 75 1 100 1))
	    (solid '(0 0 5 1 95 1 100 0))
	    (sfz '(0 0 25 1 30 .6 50 .5 75 .2 100 0))
	    (mound '(0 0 10 .4 25 .8 40 1 60 1 75 .8 90 .4 100 0))
	    (vio '(0 0 7 .2 25 .5 40 .6 60 .6 75 .5 90 .2 100 0))
	    (bassdr2 '(.5 .06 1 .62 1.5 .07 2.0 .6 2.5 .08 3.0 .56 4.0 .24 
			  5 .98 6 .53 7 .16 8 .33 9 .62 10 .12 12 .14 14 .86
			  16 .12 23 .14 24 .17))
	    (bassdrstr '(.5 .06 1.0 .63 1.5 .07 2.01 .6 2.5 .08 3.02 .56
			    4.04 .24 5.05 .98 6.06 .53 7.07 .16 8.08 .33 9.09 .62
			    10.1 .12 12.12 .14 13.13 .37 14.14 .86 16.16 .12 23.23 .14 24.24 .17))
	    (tenordr '(.3 .04 1 .81 2 .27 3 .2 4 .21 5 .18 6 .35 7 .03 8 .07 9 .02 10 .025 11 .035))
	    (tenordrstr '(.3 .04 1.03 .81 2.03 .27 3.03 .20 4.03 .21 5.03 .18
			     6.03 .35 7.03 .03 8.03 .07 9.03 .02 10.03 .03 11.03 .04)))
	(with-sound (:reverb nrev)
          (drone  .000  4.000  115.000  (* .25 .500) solid bassdr2  .100  .500
		  .030  45.000 1  .010 10)
	  (drone  .000  4.000  229.000  (* .25 .500) solid tenordr  .100  .500
		  .030  45.000 1  .010 11)
	  (drone  .000  4.000  229.500  (* .25 .500) solid tenordr  .100  .500
		  .030  45.000 1  .010 9)
	  (canter  .000  2.100 918  (* .25 .700)  45.000 1  .050 ampf ranf skwf
		   .050  .010 10 index  .005  .005 amp1 ind1 fmt1 amp2
		   ind2 fmt2 amp3 ind3 fmt3 amp4 ind4 fmt4  )
	  (canter  2.100  .300 688.5  (* .25 .700)  45.000 1  .050 ampf ranf skwf
		   .050  .010 10 index  .005  .005 amp1 ind1 fmt1 amp2
		   ind2 fmt2 amp3 ind3 fmt3 amp4 ind4 fmt4  )
	  (canter  2.400  .040 826.2  (* .25 .700)  45.000 1  .050 ampf ranf skwf
		   .050  .010 10 index  .005  .005 amp1 ind1 fmt1 amp2
		   ind2 fmt2 amp3 ind3 fmt3 amp4 ind4 fmt4  )
	  (canter  2.440  .560 459  (* .25 .700)  45.000 1  .050 ampf ranf skwf
		   .050  .010 10 index  .005  .005 amp1 ind1 fmt1 amp2
		   ind2 fmt2 amp3 ind3 fmt3 amp4 ind4 fmt4  )
	  (canter  3.000  .040 408  (* .25 .700)  45.000 1  .050 ampf ranf skwf
		   .050  .010 10 index  .005  .005 amp1 ind1 fmt1 amp2
		   ind2 fmt2 amp3 ind3 fmt3 amp4 ind4 fmt4  )
	  (canter  3.040  .040 619.65  (* .25 .700)  45.000 1  .050 ampf ranf skwf
		   .050  .010 10 index  .005  .005 amp1 ind1 fmt1 amp2
		   ind2 fmt2 amp3 ind3 fmt3 amp4 ind4 fmt4  )
	  (canter  3.080  .040 408  (* .25 .700)  45.000 1  .050 ampf ranf skwf
		   .050  .010 10 index  .005  .005 amp1 ind1 fmt1 amp2
		   ind2 fmt2 amp3 ind3 fmt3 amp4 ind4 fmt4  )
	  (canter  3.120  .040 688.5  (* .25 .700)  45.000 1  .050 ampf ranf skwf
		   .050  .010 10 index  .005  .005 amp1 ind1 fmt1 amp2
		   ind2 fmt2 amp3 ind3 fmt3 amp4 ind4 fmt4  )
	  (canter  3.160  .290 459  (* .25 .700)  45.000 1  .050 ampf ranf skwf
		   .050  .010 10 index  .005  .005 amp1 ind1 fmt1 amp2
		   ind2 fmt2 amp3 ind3 fmt3 amp4 ind4 fmt4  )
	  (canter  3.450  .150 516.375  (* .25 .700)  45.000 1  .050 ampf ranf skwf
		   .050  .010 10 index  .005  .005 amp1 ind1 fmt1 amp2
		   ind2 fmt2 amp3 ind3 fmt3 amp4 ind4 fmt4  )
	  (canter  3.600  .040 826.2  (* .25 .700)  45.000 1  .050 ampf ranf skwf
		   .050  .010 10 index  .005  .005 amp1 ind1 fmt1 amp2
		   ind2 fmt2 amp3 ind3 fmt3 amp4 ind4 fmt4  )
	  (canter  3.640  .040 573.75  (* .25 .700)  45.000 1  .050 ampf ranf skwf
		   .050  .010 10 index  .005  .005 amp1 ind1 fmt1 amp2
		   ind2 fmt2 amp3 ind3 fmt3 amp4 ind4 fmt4  )
	  (canter  3.680  .040 619.65  (* .25 .700)  45.000 1  .050 ampf ranf skwf
		   .050  .010 10 index  .005  .005 amp1 ind1 fmt1 amp2
		   ind2 fmt2 amp3 ind3 fmt3 amp4 ind4 fmt4  )
	  (canter  3.720  .180 573.75  (* .25 .700)  45.000 1  .050 ampf ranf skwf
		   .050  .010 10 index  .005  .005 amp1 ind1 fmt1 amp2
		   ind2 fmt2 amp3 ind3 fmt3 amp4 ind4 fmt4  )
	  (canter  3.900  .040 688.5  (* .25 .700)  45.000 1  .050 ampf ranf skwf
		   .050  .010 10 index  .005  .005 amp1 ind1 fmt1 amp2
		   ind2 fmt2 amp3 ind3 fmt3 amp4 ind4 fmt4  )
	  (canter  3.940  .260 459  (* .25 .700)  45.000 1  .050 ampf ranf skwf
		   .050  .010 10 index  .005  .005 amp1 ind1 fmt1 amp2
		   ind2 fmt2 amp3 ind3 fmt3 amp4 ind4 fmt4  )))

      (if (defined? 'enable-play) (enable-play))
      (let ((ind (find-sound "test.snd")))
	(play-and-wait ind)
	(close-sound ind))

      (with-sound (:srate 22050) 
	(fm-violin 0 .01 440 .1 :noise-amount 0.0)
	(pluck 0.05 .01 330 .1 .95 .95)
	(maraca .1 .1)
	(big-maraca .2 .5 .25 0.95 0.9985 .03125 '(2300 5600 8100) '(0.96 0.995 0.995) .01)
	(fm-bell 0.3 1.0 220.0 .5 
		 '(0 0 .1000 1 10 .6000 25 .3000 50 .1500 90 .1000 100 0 )
		 '(0 1 2 1.1000 25 .7500 75 .5000 100 .2000 )
		 1.0)
	(singer .4 .1 (list (list .4 ehh.shp test.glt 523.0 .8 0.0 .01) (list .6 oo.shp test.glt 523.0 .7 .1 .01)))
	(stereo-flute .6 .2 440 .55 :flow-envelope '(0 0 1 1 2 1 3 0))
	(fofins 1 .3 270 .4 .001 730 .6 1090 .3 2440 .1)
	(bow 1.2 .3 400 0.5 :vb 0.15 :fb 0.1 :inharm 0.25)
	(pqw-vox 1.5 1 300 300 .1 '(0 0 50 1 100 0) '(0 0 100 0) 0 '(0 L 100 L) '(.33 .33 .33) '((1 1 2 .5) (1 .5 2 .5 3 1) (1 1 4 .5)))
	(fm-noise 2 0.5 500 0.25 '(0 0 25 1 75 1 100 0) 0.1 0.1  1000 '(0 0 100 1) 0.1 0.1 10 1000 '(0 0 100 1) 0 0  100 500 '(0 0 100 1) 0 0)
	(bes-fm 2.5 .5 440 5.0 1.0 8.0)
	(chain-dsps 3 0.5 '(0 0 1 .1 2 0) (make-oscil 440))
	(chain-dsps 3.5 1.0 '(0 0 1 1 2 0) (make-one-zero .5) (make-readin "oboe.snd"))
	(vox 4 2 170 .4 '(0 0 25 1 75 1 100 0) '(0 0 5 .5 10 0 100 1) .1 '(0 E 25 AE 35 ER 65 ER 75 I 100 UH) .05 .1)
	(p 5.0 :duration .5 :keyNum 36 :strike-velocity .5 :amp .4 :DryPedalResonanceFactor .25)
	(bobwhite 5.5)
	(plucky 3.25 .3 440 .2 1.0)
	(bowstr 3.75 .3 220 .2 1.0)
	(brass 4.2 .3 440 .2 1.0)
	(clarinet 5.75 .3 440 .2 1.0)
	(flute 6 .3 440 .2 1.0)
	(fm-trumpet 6.5 .25)

	(let ((locust '(0 0 40 1 95 1 100 .5))
	      (bug_hi '(0 1 25 .7 75 .78 100 1))
	      (amp    '(0 0 25 1 75 .7 100 0)))
	  (fm-insect 7      1.699  4142.627  .015 amp 60 -16.707 locust 500.866 bug_hi  .346  .500)
	  (fm-insect 7.195   .233  4126.284  .030 amp 60 -12.142 locust 649.490 bug_hi  .407  .500)
	  (fm-insect 7.217  2.057  3930.258  .045 amp 60 -3.011  locust 562.087 bug_hi  .591  .500)
	  (fm-insect 9.100  1.500   900.627  .06  amp 40 -16.707 locust 300.866 bug_hi  .346  .500)
	  (fm-insect 10.000  1.500   900.627  .06  amp 40 -16.707 locust 300.866 bug_hi  .046  .500)
	  (fm-insect 10.450  1.500   900.627  .09  amp 40 -16.707 locust 300.866 bug_hi  .006  .500)
	  (fm-insect 10.950  1.500   900.627  .12  amp 40 -10.707 locust 300.866 bug_hi  .346  .500)
	  (fm-insect 11.300  1.500   900.627  .09  amp 40 -20.707 locust 300.866 bug_hi  .246  .500))

	(fm-drum 7.5 1.5 55 .3 5 #f)
	(fm-drum 8 1.5 66 .3 4 #t)
	(gong 9 3 261.61 .6)
	(attract 10 .25 .5 2.0)
	(pqw 11 .5 200 1000 .2 '(0 0 25 1 100 0) '(0 1 100 0) '(2 .1 3 .3 6 .5))

	(tubebell 12 2 440 .2)
	(wurley 12.5 .25 440 .2)
	(rhodey 12.75 .25 440 .2)
	(hammondoid 13 .25 440 .2)
	(metal 13.5 .25 440 .2)
	(reson 14.0 1.0 440 .1 2 '(0 0 100 1) '(0 0 100 1) .1 .1 .1 5 .01 5 .01 0 1.0 0.01
	       '(((0 0 100 1) 1200 .5 .1 .1 0 1.0 .1 .1)
		 ((0 1 100 0) 2400 .5 .1 .1 0 1.0 .1 .1)))
	(touch-tone 14 '(7 2 3 4 9 7 1))
	(cellon 14.5 1 220 .1 
		'(0 0 25 1 75 1 100 0) 
		'(0 0 25 1 75 1 100 0) .75 1.0 0 0 0 0 1 0 0 220 
		'(0 0 25 1 75 1 100 0) 0 0 0 0 
		'(0 0 100 0) 0 0 0 0 '(0 0 100 0))
	(two-tab 15 1 440 .1)
	(gran-synth 15.5 1 300 .0189 .03 .4)
	(spectra 16 1 440.0 .1 '(1.0 .4 2.0 .2 3.0 .2 4.0 .1 6.0 .1) '(0.0 0.0 1.0 1.0 5.0 0.9 12.0 0.5 25.0 0.25 100.0 0.0))
	(lbj-piano 17 1 440.0 .2)
	(resflt 18 1.0 0 0 0 nil .1 200 230 10 '(0 0 50 1 100 0) '(0 0 100 1) 500 .995 .1 1000 .995 .1 2000 .995 .1)
	(resflt 19 1.0 1 10000 .01 '(0 0 50 1 100 0) 0 0 0 0 nil nil 500 .995 .1 1000 .995 .1 2000 .995 .1)

	)
      (let ((ind (find-sound "test.snd")))
	(if (or (not (vequal (channel->vct 45 10) (vct -0.068 -0.059 -0.045 -0.028 -0.011 0.005 0.018 0.028 0.035 0.039)))
		(not (vequal (channel->vct 210 10) (vct 0.015 0.014 0.013 0.011 0.009 0.007 0.005 0.003 0.001 0.000))))
	    (snd-display "fm-violin with-sound: ~A ~A" (channel->vct 45 10) (channel->vct 210 10)))
	(play-and-wait ind)
	(close-sound ind))
      (if (defined? 'disable-play) (disable-play))

      ))
(set! (optimization) old-opt-23)


;;; ---------------- test 24: user-interface ----------------

(load "peak-env.scm")
(if (hook-empty? initial-graph-hook) (snd-display ";restore peaks failed?"))

(define (enved-x ux) 
  (let* ((axis (enved-axis-info))
	 (axis-x0 (list-ref axis 0))
	 (axis-x1 (list-ref axis 2))
	 (x (if (> ux 1.0) (/ ux 100.0) ux))
	 (val (inexact->exact (+ axis-x0 (* x (- axis-x1 axis-x0))))))
    val))
(define (enved-y y) 
  (let* ((axis (enved-axis-info))
	 (axis-y0 (list-ref axis 1))
	 (axis-y1 (list-ref axis 3)))
    (inexact->exact (- axis-y0 (* y (- axis-y0 axis-y1))))))

(set! (previous-files-sort-procedure) #f)

(define* (widget-string widget text #:optional (cleared #t))
  (define (shifted? ch)
    (if (or (and (char>=? ch #\A) (char<=? ch #\Z))
	    (char=? ch #\!) (char=? ch #\@) (char=? ch #\#) (char=? ch #\$) (char=? ch #\%) 
	    (char=? ch #\^) (char=? ch #\&) (char=? ch #\*) (char=? ch #\() (char=? ch #\)) 
	    (char=? ch #\_) (char=? ch #\+) (char=? ch #\:) (char=? ch #\") (char=? ch #\?)
	    ;(char=? ch #\<) 
	    (char=? ch #\>) (char=? ch #\{) (char=? ch #\}) (char=? ch #\|)  
	    (char=? ch #\~))
	1
	0))
  (focus-widget widget)
  (take-keyboard-focus widget)
  (if cleared (set! (widget-text widget) ""))
  (do ((i 0 (1+ i)))
      ((= i (string-length text)))
    (let ((ch (string-ref text i)))
      (key-event widget (char->integer ch) (shifted? ch)))
    (force-event)))

(set! (max-regions) 16)
(define mxa 32)

(if (not (defined? 'move-scale))
    (define (move-scale a b) #f))

(if (or full-test (= snd-test 24) (and keep-going (<= snd-test 24)))
    (begin
      (if (procedure? test-hook) (test-hook 24))

      (if (and (provided? 'snd-motif)
	       (provided? 'xm))
	  (let ((snd-return-key #xFF0D)
		(snd-left-key #xFF51)
		(snd-up-key #xFF52)
		(snd-right-key #xFF53)
		(snd-down-key #xFF54)
		(snd-kp-delete-key #xFF9F)
		(snd-kp-insert-key #xFF9E)
		(snd-kp-multiply-key #xFFAA)
		(snd-kp-add-key #xFFAB)
		(snd-kp-subtract-key #xFFAD)
		(snd-kp-decimal-key #xFFAE)
		(snd-kp-divide-key #xFFAF)
		(snd-kp-enter-key #xFF8D)
		(snd-space-key #x20)
		(snd-kp-left-key #xFF96)
		(snd-kp-right-key #xFF98)
		(snd-kp-up-key #xFF97)
		(snd-tab-key #xFF09)
		;(snd-kp-pagedown-key #xFF56) ; these are the non-keypad page up/down
		;(snd-kp-pageup-key #xFF55)
		(snd-kp-pagedown-key #xFF9B)
		(snd-kp-pageup-key #xFF9A)
		(snd-kp-down-key #xFF99)
		(snd-home-key #xFF50)
		(snd-kp-0 #xFFB0)
		(snd-kp-1 #xFFB1))

	    (define (all-help wid)
	      (if (Widget? wid)
		  (for-each-child
		   wid
		   (lambda (n)
		     (let ((callable (XtHasCallbacks n XmNhelpCallback)))
		       (if (= callable XtCallbackHasSome)
			   (XtCallCallbacks n XmNhelpCallback
				(let ((hlp (XmAnyCallbackStruct)))
				  (set! (.reason hlp) XmCR_HELP)
				  (set! (.event hlp) (XEvent))
				  hlp))))))))

	    ;; force-event
	    ;; key-event widget key state
	    ;; click-event widget button state x y
	    ;; drag-event widget button state x0 y0 x1 y1
	    ;; expose-event widget x y width height
	    ;; resize-event widget width height
	    ;; click-button widget
	    ;; select-item list pos
	    ;;   these functions send either Xevents or directly invoke the Motif button callbacks
	    ;; resize-pane pane size 

	    (reset-almost-all-hooks)
	    (add-hook! bad-header-hook (lambda (n) #t))
	    (for-each all-help (cdr (main-widgets)))
	    (set! (time-graph-type) graph-once)
	    (set! (transform-graph-type) graph-once)
	    (XSynchronize (XtDisplay (cadr (main-widgets))) #t)
	    ;; don't touch the mouse during this test!

	    ;; -------- drive channel graph
	    (let ((ind (open-sound "oboe.snd")))

	      (if (< (window-width) 600) 
		  (set! (window-width) 600))
	      (if (< (window-height) 600)
		  (set! (window-height) 600))
	      (force-event)
	      (set! (x-bounds) (list 0.0 0.1))
	      (if (< (cadr (widget-size (car (channel-widgets)))) 250)
		  (set! (widget-size (car (sound-widgets))) (list (car (widget-size (car (channel-widgets)))) 400)))

	      (if (defined? 'popup-display-info)
		  (begin
		    (select-sound ind)
		    (popup-display-info)))

	      (let* ((swids (sound-widgets))
		     (name-button (list-ref swids 1))
		     (minibuffer (list-ref swids 3))
		     (play-button (list-ref swids 4))
		     (cwid (car (channel-widgets)))
		     (size (widget-size (car (channel-widgets)))))

		(reset-hook! name-click-hook)
		(add-hook! name-click-hook (lambda (n) #t))
		(click-event name-button 1 0 1 1) (force-event)
		(reset-hook! name-click-hook)

		(for-each all-help swids)
		(for-each all-help (channel-widgets))
		
		(XtCallCallbacks minibuffer XmNfocusCallback (XmAnyCallbackStruct))
		(XtCallCallbacks minibuffer XmNlosingFocusCallback (XmAnyCallbackStruct))
		(enter-event minibuffer) (force-event)
		(leave-event minibuffer) (force-event)
		(take-keyboard-focus cwid)
		(click-event cwid 1 0 100 (inexact->exact (/ (cadr size) 2))) (force-event)
		(let ((pos (cursor-position)))
		  (if (> (abs (- (car pos) 100)) 1)
		      (snd-display ";pos ~A: ~A?" 100 (car pos))))
		(click-event cwid 1 0 300 (inexact->exact (/ (cadr size) 2))) (force-event)
		(let ((pos (cursor-position)))
		  (if (> (abs (- (car pos) 300)) 1)
		      (snd-display ";pos ~A: ~A?" 300 (car pos))))
		
		(expose-event cwid 20 20 200 200)
		(resize-event cwid 500 500)
		(take-keyboard-focus cwid)
		(let ((pos (cursor)))
		  (key-event cwid (char->integer #\f) 4) (force-event)
		  (if (>= pos (cursor))
		      (snd-display ";C-f: ~A ~A?" pos (cursor))))
		(key-event cwid (char->integer #\<) 4) (force-event)
		(if (not (= (cursor) 0))
		    (snd-display ";C-<: ~A ~A?" (cursor) (map channels (sounds))))
		(key-event cwid (char->integer #\>) 9) (force-event)
		(if (not (= (cursor) (- (frames) 1)))
		    (snd-display ";M->: ~A (~A)?" (cursor) (frames)))
		
		(key-event cwid (char->integer #\x) 4) (force-event)
		(key-event cwid (char->integer #\<) 0) (force-event)
		(if (not (= (cursor) 0))
		    (snd-display ";Cx-<: ~A?" (cursor)))
		(key-event cwid (char->integer #\x) 4) (force-event)
		(key-event cwid (char->integer #\>) 1) (force-event)
		(if (not (= (cursor) (- (frames) 1)))
		    (snd-display ";Cx->: ~A (~A)?" (cursor) (frames)))
		(set! (cursor) 0)
		(key (char->integer #\u) 4 ind)
		(key (char->integer #\1) 0 ind)
		(key (char->integer #\.) 0 ind)
		(key (char->integer #\0) 0 ind)
		(key (char->integer #\f) 4 ind)
		(if (not (= (cursor) 22050))
		    (snd-display ";C-u 1.0 C-f -> ~A" (cursor)))

		(let* ((i1 (open-sound "2.snd"))
		       (len (frames i1 0)))
		  (select-sound i1)
		  (key (char->integer #\u) 4 i1)
		  (key (char->integer #\1) 0 i1)
		  (key (char->integer #\0) 0 i1)
		  (key (char->integer #\0) 0 i1)
		  (key (char->integer #\d) 4 i1)
		  (if (not (= (frames i1 0) (- len 100)))
		      (snd-display ";C-u 100 C-d: ~A ~A" len (frames i1 0)))

		  (key (char->integer #\u) 4 i1)
		  (key snd-kp-1 0 i1)
		  (key snd-kp-0 0 i1)
		  (key snd-kp-0 0 i1)
		  (key (char->integer #\d) 4 i1)
		  (if (not (= (frames i1 0) (- len 200)))
		      (snd-display ";C-u (kp)100 C-d: ~A ~A" len (frames i1 0)))
		  
		  (key (char->integer #\u) 4 i1)
		  (key snd-kp-1 4 i1)
		  (key snd-kp-0 4 i1)
		  (key snd-kp-0 4 i1)
		  (key (char->integer #\d) 4 i1)
		  (if (not (= (frames i1 0) (- len 300)))
		      (snd-display ";C-u (C-kp)100 C-d: ~A ~A" len (frames i1 0)))

		  (revert-sound i1)
		  (set! (cursor) 10)
		  (key (char->integer #\u) 4 i1)
		  (key (char->integer #\-) 0 i1)
		  (key (char->integer #\1) 0 i1)
		  (key (char->integer #\0) 0 i1)
		  (key (char->integer #\0) 0 i1)
		  (key (char->integer #\d) 4 i1)
		  (if (or (not (= (frames i1 0) (- len 10)))
			  (not (= (cursor) 0)))
		      (snd-display ";C-u -100 C-d: ~A ~A ~A" len (frames i1 0) (cursor)))
		  
		  (key (char->integer #\x) 4 i1)
		  (key (char->integer #\() 0 i1)
		  (let ((str (widget-text (list-ref (sound-widgets i1) 3))))
		    (if (not (string=? str "defining macro..."))
			(snd-display ";C-x C-( report-in-minibuffer: ~A?" str)))
		  (key (char->integer #\x) 4 i1)
		  (key (char->integer #\() 0 i1)
		  (let ((str (widget-text (list-ref (sound-widgets i1) 3))))
		    (if (not (string=? str "macro definition already in progress"))
			(snd-display ";C-x C-( again report-in-minibuffer: ~A?" str)))
		  (key (char->integer #\g) 4 i1)
		  (key (char->integer #\x) 4 i1)
		  (key (char->integer #\9) 0 i1)
		  (let ((str (widget-text (list-ref (sound-widgets i1) 3))))
		    (if (not (string=? str "C-x 9 undefined"))
			(snd-display ";C-x C-9 report-in-minibuffer: ~A?" str)))
		  (key (char->integer #\g) 4 i1)

		  (close-sound i1)
		  (select-sound ind))

		(key-event cwid (char->integer #\x) 4) (force-event)
		(key-event cwid (char->integer #\=) 4) (force-event)

		(drag-event cwid 1 0 100 50 400 50) (force-event)
		(if (not (selection?))
		    (snd-display ";drag but no selection?")
		    (let* ((pos (selection-position))
			   (end (+ pos (selection-frames)))
			   (x0 (x->position (/ pos (srate))))
			   (x1 (x->position (/ end (srate)))))
		      (if (or (> (abs (- x0 100)) 1)
			      (> (abs (- x1 400)) 1))
			  (snd-display ";selectpos: ~A ~A ~A ~A " pos end x0 x1))
		  
		      (key-event cwid (char->integer #\x) 4) (force-event)
		      (key-event cwid (char->integer #\v) 0) (force-event)
		      (if (or (> (abs (- pos (left-sample))) 2)
			      (> (abs (- end (right-sample))) 2))
			  (snd-display ";C-x v selectpos: ~A ~A ~A ~A " pos end (left-sample) (right-sample)))
		      ))
		(set! (cursor) 6000)
		(let ((ls (left-sample))
		      (rs (right-sample))
		      (len (- (right-sample) (left-sample))))
		  (key-event cwid snd-right-key 0) (force-event)
		  (if (> (abs (- (left-sample) rs)) 1)
		      (snd-display ";-> not by window? ~A ~A" rs (left-sample)))
		  (if (> (abs (- len (- (right-sample) (left-sample)))) 1)
		      (snd-display ";-> size diff? ~A ~A" len (- (right-sample) (left-sample))))
		  (key-event cwid snd-left-key 0) (force-event)
		  (if (> (abs (- (left-sample) ls)) 1)
		      (snd-display ";<- not by window? ~A ~A" ls (left-sample)))
		  (if (> (abs (- len (- (right-sample) (left-sample)))) 1)
		      (snd-display ";<- size diff? ~A ~A" len (- (right-sample) (left-sample))))

		  (for-each 
		   (lambda (n val)
		     (key-event cwid (char->integer #\x) 4) (force-event) (key-event cwid snd-right-key n) (force-event)
		     (if (> (abs (- (left-sample) (* val len) ls)) 1)
			 (snd-display ";~A cx-> not by window? ~A ~A" n rs (left-sample)))
		     (if (> (abs (- len (- (right-sample) (left-sample)))) 1)
			 (snd-display ";~A cx-> size diff? ~A ~A" n len (- (right-sample) (left-sample))))
		     (key-event cwid (char->integer #\x) 4) (force-event) (key-event cwid snd-left-key n) (force-event)
		     (if (> (abs (- (left-sample) ls)) 1)
			 (snd-display ";~A cx<- not by window? ~A ~A" n ls (left-sample)))
		     (if (> (abs (- len (- (right-sample) (left-sample)))) 1)
			 (snd-display ";~A cx<- size diff? ~A ~A" n len (- (right-sample) (left-sample)))))
		   (list 0 4)
		   (list 1.0 0.5))

		  (for-each (lambda (msk val)
			      (key-event cwid snd-right-key msk) (force-event)
			      (if (> (abs (- (left-sample) (* val len) ls)) 1)
				  (snd-display ";~A-> not by window? ~A ~A" msk rs (left-sample)))
			      (if (> (abs (- len (- (right-sample) (left-sample)))) 1)
				  (snd-display ";~A-> size diff? ~A ~A" msk len (- (right-sample) (left-sample))))
			      (key-event cwid snd-left-key msk) (force-event)
			      (if (> (abs (- (left-sample) ls)) 1)
				  (snd-display ";~A<- not by window? ~A ~A" msk ls (left-sample)))
			      (if (> (abs (- len (- (right-sample) (left-sample)))) 1)
				  (snd-display ";~A<- size diff? ~A ~A" msk len (- (right-sample) (left-sample)))))
			    (list 1 4 8 5 9 13)
			    (list 0.5 0.5 0.5 0.25 0.25 0.125))

		  (key-event cwid snd-up-key 0) (force-event)
		  (if (> (abs (- (* 2 len) (- (right-sample) (left-sample)))) 3)
		      (snd-display ";up size diff? ~A ~A" ( * 2 len) (- (right-sample) (left-sample))))
		  (key-event cwid snd-down-key 0) (force-event)
		  (if (> (abs (- len (- (right-sample) (left-sample)))) 3)
		      (snd-display ";down size diff? ~A ~A" len (- (right-sample) (left-sample))))
		  (key-event cwid snd-up-key 4) (force-event)
		  (if (> (abs (- (* 1.5 len) (- (right-sample) (left-sample)))) 2)
		      (snd-display ";C-up size diff? ~A ~A" ( * 1.5 len) (- (right-sample) (left-sample))))
		  (key-event cwid snd-down-key 4) (force-event)
		  (if (> (abs (- len (- (right-sample) (left-sample)))) 2)
		      (snd-display ";C-down size diff? ~A ~A" len (- (right-sample) (left-sample))))

		  (for-each
		   (lambda (n val)
		     (key-event cwid (char->integer #\x) 4) (force-event)
		     (key-event cwid snd-up-key n) (force-event)
		     (if (> (abs (- (* val len) (- (right-sample) (left-sample)))) 2)
			 (snd-display ";~A Cx-up size diff? ~A ~A" n ( * val len) (- (right-sample) (left-sample))))
		     (key-event cwid (char->integer #\x) 4) (force-event)
		     (key-event cwid snd-down-key n) (force-event)
		     (if (> (abs (- len (- (right-sample) (left-sample)))) 2)
			 (snd-display ";~A Cx-down size diff? ~A ~A" n len (- (right-sample) (left-sample)))))
		   (list 0 4)
		   (list 2.0 1.5))

		  (for-each (lambda (msk val)
			      (key-event cwid snd-up-key msk) (force-event)
			      (if (> (abs (- (* val len) (- (right-sample) (left-sample)))) 3)
				  (snd-display ";~A up size diff? ~A ~A" msk ( * val len) (- (right-sample) (left-sample))))
			      (key-event cwid snd-down-key msk) (force-event)
			      (if (> (abs (- len (- (right-sample) (left-sample)))) 3)
				  (snd-display ";~A down size diff? ~A ~A" msk len (- (right-sample) (left-sample)))))
			    (list 1 4 8 5 9 13)
			    (list 1.5 1.5 1.5 1.25 1.25 1.125))
		  
		  (let ((y (spectro-y-angle))
			(x (spectro-x-angle)))
		    (key-event cwid snd-kp-right-key 4) (force-event)
		    (if (fneq (spectro-y-angle) (+ y 1.0))
			(snd-display ";C-keypad-right: ~A ~A" y (spectro-y-angle)))
		    (key-event cwid snd-kp-left-key 4) (force-event)
		    (if (fneq (spectro-y-angle) y)
			(snd-display ";C-keypad-left: ~A ~A" y (spectro-y-angle)))
		    (key-event cwid snd-kp-down-key 4) (force-event)
		    (if (fneq (spectro-x-angle) (- x 1.0))
			(snd-display ";C-keypad-down: ~A ~A" x (spectro-x-angle)))
		    (key-event cwid snd-kp-up-key 4) (force-event)
		    (if (fneq (spectro-x-angle) x)
			(snd-display ";C-keypad-up: ~A ~A" x (spectro-x-angle))))

		  (let ((hop (spectro-hop)))
		    (key-event cwid snd-kp-add-key 0) (force-event)
		    (if (not (= (spectro-hop) (1+ hop)))
			(snd-display ";keypad-add ~A -> ~A" hop (spectro-hop)))
		    (key-event cwid snd-kp-subtract-key 0) (force-event)
		    (if (not (= (spectro-hop) hop))
			(snd-display ";keypad-subtract ~A -> ~A" hop (spectro-hop))))

		  (set! (spectro-cutoff) 0.5)
		  (key-event cwid snd-kp-pageup-key 0) (force-event)
		  (if (> (abs (- (spectro-cutoff) (/ 0.5 0.95))) .05)
		      (snd-display ";keypad-pageup ~A -> ~A" 0.5 (spectro-cutoff)))
		  (key-event cwid snd-kp-pagedown-key 0) (force-event)
		  (if (fneq (spectro-cutoff) 0.5)
		      (snd-display ";keypad-pagedown ~A -> ~A" 0.5 (spectro-cutoff)))

		  (let ((za (spectro-z-angle))
			(zs (spectro-z-scale)))
		    (key-event cwid snd-kp-right-key 0) (force-event)
		    (if (fneq (spectro-z-angle) (+ za 1.0))
			(snd-display ";z keypad-right: ~A ~A" za (spectro-z-angle)))
		    (key-event cwid snd-kp-left-key 0) (force-event)
		    (if (fneq (spectro-z-angle) za)
			(snd-display ";z keypad-left: ~A ~A" za (spectro-z-angle)))
		    (key-event cwid snd-kp-down-key 0) (force-event)
		    (if (fneq (spectro-z-scale) (- zs .01))
			(snd-display ";keypad-down: ~A ~A" zs (spectro-z-scale)))
		    (key-event cwid snd-kp-up-key 0) (force-event)
		    (if (fneq (spectro-z-scale) zs)
			(snd-display ";keypad-up: ~A ~A" zs (spectro-z-scale))))

		  (bind-key (char->integer #\p) 0 (lambda () cursor-on-left))
		  (bind-key (char->integer #\q) 0 (lambda () cursor-in-middle))
		  (bind-key (char->integer #\r) 0 (lambda () cursor-on-right))
		  (key-event cwid (char->integer #\p) 0) (force-event)
		  (if (> (abs (- (cursor) (left-sample))) 1)
		      (snd-display ";cursor-on-left: ~A ~A" (cursor) (left-sample)))
		  (key-event cwid (char->integer #\r) 0) (force-event)
		  (if (> (abs (- (cursor) (right-sample))) 1)
		      (snd-display ";cursor-on-right: ~A ~A" (cursor) (right-sample)))
		  (key-event cwid (char->integer #\q) 0) (force-event)
		  (if (> (abs (- (cursor) (inexact->exact (* .5 (+ (left-sample) (right-sample)))))) 1)
		      (snd-display ";cursor-in middle: ~A ~A" (cursor) (inexact->exact (* .5 (+ (left-sample) (right-sample))))))
		  (key-event cwid (char->integer #\p) 0) (force-event)
		  (if (> (abs (- (cursor) (left-sample))) 1)
		      (snd-display ";cursor-on-left (1): ~A ~A" (cursor) (left-sample)))
		  (key-event cwid (char->integer #\x) 4) (force-event) 
		  (key-event cwid (char->integer #\t) 4) (force-event)

		  (set! (graph-style) graph-dots)
		  (let ((ds (dot-size)))
		    (key-event cwid snd-kp-delete-key 0) (force-event)
		    (if (not (= (dot-size) (1+ ds)))
			(snd-display ";keypad dot-size: ~A -> ~A?" ds (dot-size)))
		    (key-event cwid snd-kp-insert-key 0) (force-event)
		    (if (not (= (dot-size) ds))
			(snd-display ";keypad insert dot-size: ~A -> ~A?" ds (dot-size))))
		  (set! (graph-style) graph-lines)
		  (key-event cwid snd-kp-enter-key 0) (force-event)

		  (set! (transform-graph?) #t)
		  (set! (transform-size) 256)
		  (let ((ds (transform-size)))
		    (key-event cwid snd-kp-multiply-key 0) (force-event)
		    (if (not (= (transform-size) (* 2 ds)))
			(snd-display ";multiply transform-size: ~A -> ~A?" ds (transform-size)))
		    (key-event cwid snd-kp-divide-key 0) (force-event)
		    (if (not (= (transform-size) ds))
			(snd-display ";divide transform-size: ~A -> ~A?" ds (transform-size))))
		  (set! (transform-graph?) #f)

		  (set! (time-graph-type) graph-as-wavogram)
		  (let ((hop (wavo-trace)))
		    (key-event cwid snd-kp-add-key 0) (force-event)
		    (if (not (= (1+ hop) (wavo-trace))) (snd-display ";add wavo-trace ~A -> ~A" hop (wavo-trace)))
		    (key-event cwid snd-kp-subtract-key 0) (force-event)
		    (if (not (= hop (wavo-trace))) (snd-display ";subtract wavo-trace ~A -> ~A" hop (wavo-trace))))
		  (update-time-graph)
		  (set! (colormap) -1)
		  (key-event cwid snd-kp-add-key 0) (force-event)
		  (update-time-graph)
		  (set! (colormap) 2)
		  (set! (time-graph-type) graph-once)
		  (revert-sound ind)

		  (take-keyboard-focus cwid)
		  (key-event cwid (char->integer #\a) 4) (force-event)
		  (if (not (= (cursor) (left-sample)))
		      (snd-display ";C-a: ~A ~A?" (cursor) (left-sample)))
		  (key-event cwid (char->integer #\e) 4) (force-event)
		  (if (not (= (cursor) (right-sample)))
		      (snd-display ";C-e: ~A ~A?" (cursor) (right-sample)))
		  (key-event cwid (char->integer #\b) 4) (force-event)
		  (if (not (= (cursor) (1- (right-sample))))
		      (snd-display ";C-b: ~A ~A?" (cursor) (1- (right-sample))))
		  (key-event cwid (char->integer #\f) 4) (force-event)
		  (if (not (= (cursor) (right-sample)))
		      (snd-display ";C-f: ~A ~A?" (cursor) (right-sample)))
		  (if (not (selection?))
		      (snd-display ";what happened to our selection?"))
		  (key-event cwid snd-space-key 0) (force-event)
		  (if (selection?)
		      (snd-display ";C-space did not cancel selection?"))
		  (set! (cursor) 100)
		  (key-event cwid (char->integer #\d) 4) (force-event)
		  (if (not (equal? (edits) '(1 0)))
		      (snd-display ";C-d (edits) -> ~A?" (edits)))
		  (if (not (equal? (edit-fragment 1) (list "C-d" "delete" 100 1)))
		      (snd-display ";C-d (edit) -> ~A?" (edit-fragment 1)))
		  (key-event cwid (char->integer #\u) 4) (force-event)
		  (key-event cwid (char->integer #\0) 4) (force-event)
		  (key-event cwid (char->integer #\d) 4) (force-event)
		  (if (not (equal? (edits) '(1 0)))
		      (snd-display ";0 C-d (edits) -> ~A?" (edits)))
		  (key-event cwid (char->integer #\h) 4) (force-event)
		  (if (not (equal? (edits) '(2 0)))
		      (snd-display ";C-h (edits) -> ~A?" (edits)))
		  (if (not (equal? (edit-fragment 2) (list "C-h" "delete" 99 1)))
		      (snd-display ";C-h (edit) -> ~A?" (edit-fragment 2)))

		  (let* ((ind (open-sound "2.snd"))
			 (cwid (car (channel-widgets ind 1)))
			 (fr (frames ind)))
		    (set! (sync ind) 1)
		    (select-sound ind)
		    (select-channel 1)
		    (equalize-panes)
		    (set! (cursor) 100)
		    (take-keyboard-focus cwid)
		    (if (not (= (cursor ind 0) 100)) (snd-display ";syncd cursor 0 100: ~A ~A" (cursor ind 0) (cursor ind 1)))
		    (if (not (= (cursor ind 1) 100)) (snd-display ";syncd cursor 1 100: ~A ~A" (cursor ind 0) (cursor ind 1)))
		    (key-event cwid (char->integer #\d) 4) (force-event)
		    (if (not (equal? (edits ind 1) '(1 0))) (snd-display ";C-d (edits ~A 1) -> ~A?" ind (edits ind 1)))
		    (if (not (equal? (edits ind 0) '(1 0))) (snd-display ";C-d (edits ~A 0) -> ~A?" ind (edits ind 0)))
		    (key-event cwid (char->integer #\u) 4) (force-event)
		    (key-event cwid (char->integer #\8) 4) (force-event)
		    (key-event cwid (char->integer #\d) 4) (force-event)
		    (if (not (equal? (edits ind 1) '(2 0))) (snd-display ";C-d (2 edits ~A 1) -> ~A?" ind (edits ind 1)))
		    (if (not (equal? (edits ind 0) '(2 0))) (snd-display ";C-d (2 edits ~A 0) -> ~A?" ind (edits ind 0)))
		    (if (not (= (frames ind 1) (- fr 9))) (snd-display ";1 C-d frames: ~A ~A" (- fr 9) (frames)))
		    (if (not (= (frames ind 0) (- fr 9))) (snd-display ";0 C-d frames: ~A ~A" (- fr 9) (frames)))
		    (key-event cwid (char->integer #\h) 4) (force-event)
		    (if (not (equal? (edits ind 1) '(3 0))) (snd-display ";C-h (3 edits ~A 1) -> ~A?" ind (edits ind 1)))
		    (if (not (equal? (edits ind 0) '(3 0))) (snd-display ";C-h (3 edits ~A 0) -> ~A?" ind (edits ind 0)))
		    (if (not (= (frames ind 1) (- fr 10))) (snd-display ";1 C-h frames: ~A ~A" (- fr 10) (frames)))
		    (if (not (= (frames ind 0) (- fr 10))) (snd-display ";0 C-h frames: ~A ~A" (- fr 10) (frames)))
		    (key-event cwid (char->integer #\u) 4) (force-event)
		    (key-event cwid (char->integer #\8) 0) (force-event)
		    (key-event cwid (char->integer #\h) 4) (force-event)
		    (if (not (equal? (edits ind 1) '(4 0))) (snd-display ";C-h (4 edits ~A 1) -> ~A?" ind (edits ind 1)))
		    (if (not (equal? (edits ind 0) '(4 0))) (snd-display ";C-h (4 edits ~A 0) -> ~A?" ind (edits ind 0)))
		    (if (not (= (frames ind 1) (- fr 18))) (snd-display ";1 2 C-h frames: ~A ~A" (- fr 18) (frames)))
		    (if (not (= (frames ind 0) (- fr 18))) (snd-display ";0 2 C-h frames: ~A ~A" (- fr 18) (frames)))
		    (if (not (= (cursor ind 1) 91)) (snd-display ";C-h 1 cursor: ~A" (cursor ind 1)))
		    (if (not (= (cursor ind 0) 91)) (snd-display ";C-h 0 cursor: ~A" (cursor ind 0)))
		    (key-event cwid (char->integer #\u) 4) (force-event)
		    (key-event cwid (char->integer #\-) 0) (force-event)
		    (key-event cwid (char->integer #\8) 0) (force-event)
		    (key-event cwid (char->integer #\d) 4) (force-event)

		    (bind-key (char->integer #\n) 0 (lambda (arg) (set! (cursor) (+ (cursor) (* 128 arg)))))
		    (set! (cursor) 0)
		    (key-event cwid (char->integer #\u) 4) (force-event)
		    (key-event cwid (char->integer #\2) 0) (force-event)
		    (key-event cwid (char->integer #\n) 0) (force-event)
		    (if (not (= (cursor) (* 128 2))) (snd-display ";C-n bound: ~A" (cursor)))
		    (key-event cwid (char->integer #\n) 0) (force-event)
		    (if (not (= (cursor) (* 128 3))) (snd-display ";C-n bound no arg: ~A" (cursor)))
		    (unbind-key (char->integer #\n) 0)
		    
		    (close-sound ind))
		  (select-sound ind)
		  (select-channel 0)
		  
		  (set! (cursor) 5000)
		  (let ((fr (frames)))
		    (key-event cwid (char->integer #\o) 4) (force-event)
		    (if (not (equal? (edits) '(3 0)))
			(snd-display ";C-o (edits) -> ~A?" (edits)))
		    (if (not (equal? (edit-fragment 3) (list "C-o" "zero" 5000 1)))
			(snd-display ";C-o (edit) -> ~A?" (edit-fragment 3)))
		    (if (fneq (sample (cursor)) 0.0)
			(snd-display ";C-o sample: ~A?" (sample (cursor))))
		    (if (not (= (frames) (1+ fr)))
			(snd-display ";frames after C-o: ~A ~A?" (frames) fr))
		    (key-event cwid (char->integer #\v) 4) (force-event)
		    (if (> (abs (- (cursor) (inexact->exact (* .5 (+ (left-sample) (right-sample)))))) 1)
			(snd-display ";C-v loc: ~A ~A?" (cursor) (inexact->exact (* .5 (+ (left-sample) (right-sample))))))
		    (if (= (sample (cursor)) 0.0)
			(set! (cursor) (1+ (cursor))))
		    (key-event cwid (char->integer #\z) 4) (force-event)
		    (if (not (equal? (edits) '(4 0)))
			(snd-display ";C-z (edits) -> ~A?" (edits)))
		    (if (not (string=? (car (edit-fragment 4)) "scale-channel 0.0000 5001 1"))
			(snd-display ";C-z (edit) -> ~A?" (edit-fragment 4)))
		    (if (fneq (sample (cursor)) 0.0)
			(snd-display ";C-z sample: ~A?" (sample (cursor))))
		    (if (not (= (frames) (1+ fr)))
			(snd-display ";frames after C-z: ~A ~A?" (frames) fr)))
		  (if (> (length (marks ind 0)) 0)
		      (snd-display ";there are marks here already!"))
		  (key-event cwid (char->integer #\-) 4) (force-event)
		  (key-event cwid (char->integer #\m) 4) (force-event)
		  (let ((str (widget-text (list-ref (sound-widgets ind) 3))))
		    (if (not (string=? str (format #f "no mark at sample ~D" (cursor))))
			(snd-display ";-m report-in-minibuffer: ~A?" str)))
		  (key-event cwid (char->integer #\m) 4) (force-event)
		  (if (null? (marks ind 0))
		      (snd-display ";C-m but no mark!")
		      (let ((m (car (marks ind 0))))
			(if (not (= (mark-sample m) (cursor)))
			    (snd-display ";C-m mark sample: ~A ~A?" (mark-sample m) (cursor)))))
		  (key-event cwid (char->integer #\-) 4) (force-event)	
		  (key-event cwid (char->integer #\m) 4) (force-event)
		  (if (mark? (find-mark (cursor)))
		      (snd-display ";C-- C-m mark: ~A?" (find-mark (cursor))))
		  (key-event cwid (char->integer #\x) 4) (force-event)		  
		  (key-event cwid (char->integer #\o) 4) (force-event)
		  (if (not (show-controls))
		      (snd-display ";C-x C-o: ~A?" (show-controls)))
		  (key-event cwid (char->integer #\x) 4) (force-event)		  
		  (key-event cwid (char->integer #\c) 4) (force-event)
		  (if (show-controls)
		      (snd-display ";C-x C-c: ~A?" (show-controls)))
		  (key-event cwid (char->integer #\x) 4) (force-event)
		  (key-event cwid (char->integer #\u) 4) (force-event)
		  (if (not (equal? (edits) '(3 1)))
		      (snd-display ";C-x C-u (edits) -> ~A?" (edits)))
		  (key-event cwid (char->integer #\x) 4) (force-event)
		  (key-event cwid (char->integer #\r) 4) (force-event)
		  (if (not (equal? (edits) '(4 0)))
		      (snd-display ";C-x C-r (edits) -> ~A?" (edits)))
		  (key-event cwid (char->integer #\u) 4) (force-event)
		  (key-event cwid (char->integer #\1) 0) (force-event)
		  (key-event cwid (char->integer #\2) 0) (force-event)
		  (key-event cwid (char->integer #\3) 0) (force-event)
		  (key-event cwid (char->integer #\x) 4) (force-event)
		  (key-event cwid (char->integer #\b) 4) (force-event)
		  (if (not (= (left-sample) 123))
		      (snd-display ";C-u 123 C-x: ~A?" (left-sample)))
		  (key-event cwid (char->integer #\u) 4) (force-event)
		  (key-event cwid (char->integer #\5) 0) (force-event)
		  (key-event cwid (char->integer #\0) 0) (force-event)
		  (key-event cwid (char->integer #\0) 0) (force-event)
		  (key-event cwid (char->integer #\0) 0) (force-event)
		  (key-event cwid (char->integer #\x) 4) (force-event)
		  (key-event cwid (char->integer #\b) 4) (force-event)
		  (if (not (= (left-sample) 5000))
		      (snd-display ";C-u 5000 C-x: ~A?" (left-sample)))
		  (set! (cursor) 123)
		  (key-event cwid (char->integer #\x) 4) (force-event)
		  (key-event cwid (char->integer #\b) 0) (force-event)
		  (if (not (= (left-sample) 123))
		      (snd-display ";C-x b(123): ~A?" (left-sample)))
		  (key-event cwid (char->integer #\u) 4) (force-event)
		  (key-event cwid (char->integer #\1) 0) (force-event)
		  (key-event cwid (char->integer #\0) 0) (force-event)
		  (key-event cwid (char->integer #\f) 4) (force-event)	
		  (if (not (= (cursor) 133))
		      (snd-display ";C-u 10 C-f -> ~A?" (cursor)))
		  (key-event cwid (char->integer #\x) 4) (force-event)
		  (key-event cwid (char->integer #\/) 0) (force-event)
		  (widget-string minibuffer "away!")
		  (key-event minibuffer snd-return-key 0) (force-event)
		  (set! (cursor) 0)
		  (key-event cwid (char->integer #\x) 4) (force-event)
		  (key-event cwid (char->integer #\j) 0) (force-event)
		  (widget-string minibuffer "away!")
		  (key-event minibuffer snd-return-key 0) (force-event)
		  (if (not (= (cursor) 133))
		      (snd-display ";named mark? ~A ~A" (cursor) (find-mark "away!")))
		  (let ((m (find-mark "away!")))
		    (if (or (not (mark? m))
			    (not (= (mark-sample m) 133)))
			(snd-display ";are we away? ~A" (if (mark? m) (mark-sample m) "lost"))))
		  (set! (cursor) 130)
		  (key-event cwid (char->integer #\j) 4) (force-event)
		  (if (not (= (cursor) 133))
		      (snd-display ";goto mark? ~A" (cursor)))
		  (if (key-binding (char->integer #\n) 4)
		      (unbind-key (char->integer #\n) 4))
		  (key-event cwid (char->integer #\n) 4) (force-event)
		  (if (not (= (cursor) (+ 128 133)))
		      (snd-display ";ahead line? ~A" (cursor)))
		  (if (key-binding (char->integer #\p) 4)
		      (unbind-key (char->integer #\p) 4))
		  (key-event cwid (char->integer #\p) 4) (force-event)
		  (if (not (= (cursor) 133))
		      (snd-display ";back line? ~A" (cursor)))
		  (let ((fr (frames)))
		    (if (key-binding (char->integer #\k) 4)
			(unbind-key (char->integer #\k) 4))
		    (key-event cwid (char->integer #\k) 4) (force-event)
		    (if (not (equal? (edits) '(5 0)))
			(snd-display ";C-k (edits) -> ~A?" (edits)))
		    (if (not (equal? (edit-fragment 5) (list "C-k" "delete" 133 128)))
			(snd-display ";C-k (edit) -> ~A?" (edit-fragment 5)))
		    (if (not (= (frames) (- fr 128)))
			(snd-display ";frames after C-k: ~A ~A?" (frames) fr)))
		  (key-event cwid (char->integer #\s) 4) (force-event)
		  (widget-string minibuffer "(lambda (n) (< n -.1))")
		  (key-event minibuffer snd-return-key 0) (force-event)
		  (let ((cs (cursor)))
		    (if (not (< (sample cs) -.1))
			(snd-display ";C-s -.1 -> ~A at ~A (~A)?" 
				     (sample cs) cs
				     (widget-text (list-ref (sound-widgets ind) 3))))
		    (key-event cwid (char->integer #\s) 4) (force-event)
		    (key-event cwid (char->integer #\s) 4) (force-event)
		    (if (not (< (sample (cursor)) -.1))
			(snd-display ";C-s -.1 (1) -> ~A at ~A (~A)?" 
				     (sample (cursor)) (cursor)
				     (widget-text (list-ref (sound-widgets ind) 3))))
		    (if (= cs (cursor))
			(snd-display ";C-s 2 -> ~A at ~A?" cs (cursor)))
		    (key-event cwid (char->integer #\b) 4) (force-event)
		    (key-event cwid (char->integer #\r) 4) (force-event)
		    (widget-string minibuffer "(lambda (n) (>= n .05))")
		    (key-event minibuffer snd-return-key 0) (force-event)
		    (set! cs (cursor))
		    (if (not (>= (sample cs) .05))
			(snd-display ";C-r >= .05 -> ~A at ~A?" (sample cs) cs))
		    (key-event cwid (char->integer #\r) 4) (force-event)
		    (key-event cwid (char->integer #\r) 4) (force-event)
		    (if (not (>= (sample (cursor)) .05))
			(snd-display ";C-r >= .05 (1) -> ~A at ~A?" (sample (cursor)) (cursor)))
		    (if (= cs (cursor))
			(snd-display ";C-r 2 -> ~A at ~A?" cs (cursor)))
		    (key-event cwid (char->integer #\>) 9) (force-event)
		    (key-event cwid (char->integer #\r) 4) (force-event)
		    (key-event cwid (char->integer #\r) 4) (force-event)
		    (set! cs (cursor))
		    (if (not (>= (sample cs) .05))
			(snd-display ";C-r back >= .05 -> ~A at ~A?" (sample cs) cs))
		    (key-event cwid (char->integer #\>) 9) (force-event)
		    (key-event cwid (char->integer #\b) 4) (force-event)
		    (key-event cwid (char->integer #\r) 4) (force-event)
		    (key-event cwid (char->integer #\r) 4) (force-event)
		    (set! cs (cursor))
		    (if (not (>= (sample cs) .05))
			(snd-display ";C-r back 2 >= .05 -> ~A at ~A?" (sample cs) cs)))
		  (key-event cwid (char->integer #\q) 4) (force-event)
		  (key-event cwid (char->integer #\i) 4) (force-event) ; just for completeness
		  (key-event cwid (char->integer #\u) 4) (force-event)
		  (key-event cwid (char->integer #\5) 0) (force-event)
		  (key-event cwid (char->integer #\x) 4) (force-event)
		  (key-event cwid (char->integer #\u) 4) (force-event)
		  (if (not (equal? (edits) '(0 5)))
		      (snd-display ";C-x C-u -> ~A?" (edits)))
		  (key-event cwid (char->integer #\<) 4) (force-event)
		  (if (not (= (cursor) 0))
		      (snd-display ";C-< (1): ~A?" (cursor)))

		  (let ((s1000 (sample 1000))
			(fr (frames)))
		    (make-region 0 999)
		    (make-selection 0 999)
		    (key-event cwid (char->integer #\w) 4) (force-event)
		    (if (fneq (sample 0) s1000)
			(snd-display ";C-w: ~A ~A (~A ~A)" s1000 (sample 0) fr (frames)))
		    (if (not (= fr (+ (frames) 1000)))
			(snd-display ";C-w len: ~A ~A" fr (frames)))
		    (if (not (equal? (edits) '(1 0)))
			(snd-display ";C-w -> ~A?" (edits)))
		    (if (not (equal? (edit-fragment 1) (list "C-w" "delete" 0 1000)))
			(snd-display ";C-w (edit) -> ~A [~A]?" 
					     (edit-fragment 1)
					     (car (edit-fragment 1))))
		    (key-event cwid (char->integer #\<) 4) (force-event)
		    (key-event cwid (char->integer #\y) 4) (force-event)
		    (if (fneq (sample 1000) s1000)
			(snd-display ";C-y: ~A ~A (~A ~A)" s1000 (sample 1000) fr (frames)))
		    (if (not (= fr (frames)))
			(snd-display ";C-y len: ~A ~A" fr (frames)))
		    (if (not (equal? (edits) '(2 0)))
			(snd-display ";C-y -> ~A?" (edits)))
		    (catch #t
			   (lambda ()
			     (if (not (equal? (edit-fragment 2) (list "C-y" "insert" 0 1000)))
				 (snd-display ";C-y (edit) -> ~A?" (edit-fragment 2))))
			   (lambda args args)))

		  (key-event cwid (char->integer #\<) 4) (force-event)
		  (key-event cwid (char->integer #\x) 8) (force-event)
		  (widget-string minibuffer "(do ((i 0 (1+ i))) ((= i 10)) (set! (sample i) 1.0))")
		  (key-event minibuffer snd-return-key 0) (force-event)
		  (if (not (equal? (edits) '(3 0)))
		      (snd-display ";M-x edits 10 -> 1.0: ~A?" (edits)))
		  (if (not (equal? (edit-fragment 3) (list "set! sample" "set" 9 1)))
		      (snd-display ";:M-x fragment (wierd!): ~A" (edit-fragment 3)))
		  (key-event cwid snd-space-key 4) (force-event)
		  (do ((i 0 (1+ i)))
		      ((= i 9))
		    (key-event cwid (char->integer #\f) 4) (force-event))
		  (if (not (selection?))
		      (snd-display ";C-space for selection failed?"))
		  (if (not (= (selection-frames) 10))
		      (snd-display ";C-space for selection len: ~A?" (selection-frames)))
		  (key-event cwid (char->integer #\x) 4) (force-event)
		  (key-event cwid (char->integer #\l) 0) (force-event)
		  (if (not (= (cursor) (+ (selection-position) (inexact->exact (* 0.5 (selection-frames))))))
		      (snd-display ";C-x L: ~A ~A" (cursor) (+ (selection-position) (inexact->exact (* 0.5 (selection-frames))))))

		  (key-event cwid (char->integer #\x) 8) (force-event)
		  (widget-string minibuffer "(set! mxa 3)")
		  (key-event minibuffer snd-return-key 0) (force-event)
		  (if (not (= mxa 3))
		      (snd-display ";M-x (set! mxa 3) -> ~A" mxa))

		  (key-event cwid (char->integer #\x) 8) (force-event)
		  (widget-string minibuffer "(mus-sound-frames \"pistol")
		  (key-event minibuffer snd-tab-key 0) (force-event)
		  (let ((str (widget-text minibuffer)))
		    (if (not (string=? str "(mus-sound-frames \"pistol.snd"))
			(snd-display ";M-x with filename completion: ~A" str)))

		  (reset-listener-cursor)
		  (let ((lst (list-ref (main-widgets) 4))
			(snd-return-key #xFF0D))
		    (take-keyboard-focus lst)
		    (key-event lst snd-return-key 0) (force-event) ; possible pre-existing error msg etc
		    (key-event lst snd-return-key 0) (force-event)
		    (widget-string lst "(set! mxa (+ 1 4))" #f)
		    (key-event lst snd-return-key 0) (force-event)
		    (if (not (= mxa 5))
			(snd-display ";set! mxa in listener: ~A" mxa))
		    (widget-string lst "(set! mxa 32)" #f)
		    (key-event lst snd-return-key 0) (force-event)
		    (if (not (= mxa 32))
			(snd-display ";preset M-p mxa in listener: ~A" mxa))
		    (key-event lst snd-return-key 0) (force-event)
		    (key-event lst (char->integer #\p) 8) (force-event)
		    (key-event lst (char->integer #\p) 8) (force-event)
		    (key-event lst snd-return-key 0) (force-event)
		    (if (not (= mxa 5))
			(snd-display ";M-p mxa in listener: ~A" mxa))
		    (key-event lst (char->integer #\p) 8) (force-event)
		    (key-event lst (char->integer #\p) 8) (force-event)
		    (key-event lst (char->integer #\p) 8) (force-event)
		    (key-event lst (char->integer #\n) 8) (force-event)
		    (key-event lst snd-return-key 0) (force-event)
		    (if (not (= mxa 32))
			(snd-display ";M-n mxa in listener: ~A" mxa))
		    (widget-string lst "(set! mxa" #f)
		    (key-event lst snd-return-key 0) (force-event)
		    (key-event lst snd-tab-key 0) (force-event)
		    (widget-string lst "123)" #f)
		    (key-event lst snd-return-key 0) (force-event)
		    (if (not (= mxa 123))
			(snd-display ";set! mxa with embedded cr in listener: ~A" mxa))
		    (widget-string lst "abc" #f)
		    (key-event lst (char->integer #\a) 4)
		    (key-event lst (char->integer #\U) 9) (force-event)
		    (key-event lst (char->integer #\a) 4)
		    (key-event lst (char->integer #\t) 4)
		    (key-event lst (char->integer #\C) 9) (force-event)
		    (key-event lst (char->integer #\a) 4)
		    (key-event lst (char->integer #\k) 4)
		    (widget-string lst "(mus-sound-s" #f)
		    (key-event lst snd-tab-key 0) (force-event)
		    (let ((helpd (list-ref (dialog-widgets) 15)))
		      (if helpd
			  (if (not (XtIsManaged helpd))
			      (snd-display ";help completion dialog isn't active?")
			      (XtUnmanageChild helpd))
			  (snd-display ";no help dialog at all!")))
		    (key-event lst (char->integer #\a) 4)
		    (key-event lst (char->integer #\k) 4)
		    (widget-string lst "(open-sound ")
		    (key-event lst (char->integer #\?) 4)

		    (key-event lst snd-return-key 0) (force-event)
		    (key-event lst snd-return-key 0) (force-event)
		    (widget-string lst "(define aval " #f)
		    (key-event lst snd-return-key 0) (force-event)
		    (key-event lst snd-tab-key 0) (force-event)
		    (widget-string lst "(+ 1 ;a comment" #f)
		    (key-event lst snd-return-key 0) (force-event)
		    (key-event lst snd-tab-key 0) (force-event)
		    (widget-string lst "(char->integer #\\a)" #f)
		    (key-event lst snd-return-key 0) (force-event)
		    (key-event lst snd-tab-key 0) (force-event)
		    (widget-string lst "(char->integer (string-ref \"01\\\"\" 2))" #f)
		    (key-event lst snd-return-key 0) (force-event)
		    (key-event lst snd-tab-key 0) (force-event)
		    (widget-string lst "(char->integer (string-ref \"01\\\";#\" 2))" #f)
		    (key-event lst snd-return-key 0) (force-event)
		    (key-event lst snd-tab-key 0) (force-event)
		    (widget-string lst "(vector-ref #(1 2) 0)" #f)
		    (key-event lst snd-return-key 0) (force-event)
		    (key-event lst snd-tab-key 0) (force-event)
		    (widget-string lst "(char->integer #\\))" #f)
		    (key-event lst snd-return-key 0) (force-event)
		    (key-event lst snd-tab-key 0) (force-event)
		    (widget-string lst "))" #f)
		    (key-event lst snd-return-key 0) (force-event)
		    (key-event lst snd-tab-key 0) (force-event)
		    (if (not (= aval 208)) (snd-display ";listener paren check: ~A" aval))

		    ;(key-event lst (char->integer #\g) 12) (force-event)
		    (widget-string lst "(define frs (mus-sound-frames \"pistol." #f)
		    (key-event lst snd-tab-key 0) (force-event)
		    (widget-string lst "\"))" #f)
		    (key-event lst snd-return-key 0) (force-event)
		    (if (not (= frs 41623)) (snd-display ";filename completer in listener: ~A" frs))

		    (widget-string lst "(set! frs (+ 1 ;" #f)
		    (key-event lst snd-tab-key 0) (force-event)
		    (widget-string lst "comment" #f)
		    (key-event lst snd-return-key 0) (force-event)
		    (widget-string lst "2))" #f)
		    (key-event lst snd-return-key 0) (force-event)
		    (if (not (= frs 3)) (snd-display ";comment completer in listener: ~A" frs))
		    )

		  (take-keyboard-focus cwid)
		  (key-event cwid (char->integer #\x) 4) (force-event)
		  (key-event cwid (char->integer #\a) 0) (force-event)
		  (widget-string minibuffer "'(0 0 1 1)")
		  (key-event minibuffer snd-return-key 0) (force-event)
		  (do ((i 0 (1+ i)))
		      ((= i 10))
		    (if (fneq (sample i) (* i .1111))
			(snd-display ";C-x a [~A]: ~A" i (sample i))))
		  (undo)
		  (key-event cwid (char->integer #\x) 4) (force-event)
		  (key-event cwid (char->integer #\a) 0) (force-event)
		  (widget-string minibuffer "ramp-u")
		  (key-event minibuffer snd-tab-key 0) (force-event)
		  (key-event minibuffer snd-return-key 0) (force-event)
		  (undo)
		  (key-event cwid (char->integer #\u) 4) (force-event)
		  (key-event cwid (char->integer #\5) 0) (force-event)
		  (key-event cwid (char->integer #\0) 0) (force-event)
		  (key-event cwid (char->integer #\0) 0) (force-event)
		  (key-event cwid (char->integer #\x) 4) (force-event)
		  (key-event cwid (char->integer #\a) 4) (force-event)
		  (widget-string minibuffer "env2")
		  (key-event minibuffer snd-tab-key 0) (force-event)
		  (key-event minibuffer snd-return-key 0) (force-event)

		  (key-event cwid (char->integer #\x) 4) (force-event)
		  (key-event cwid (char->integer #\() 1) (force-event)
		  (key-event cwid (char->integer #\f) 4) (force-event)
		  (key-event cwid (char->integer #\f) 4) (force-event)
		  (key-event cwid (char->integer #\f) 4) (force-event)
		  (key-event cwid (char->integer #\x) 4) (force-event)
		  (key-event cwid (char->integer #\)) 1) (force-event)
		  (if (file-exists? "test-macros.scm") (delete-file "test-macros.scm"))
		  (key-event cwid (char->integer #\x) 4) (force-event)
		  (key-event cwid (char->integer #\e) 4) (force-event)		  
		  (widget-string minibuffer "test-save-macros")
		  (key-event minibuffer snd-return-key 0) (force-event)
		  (save-macros "test-macros.scm")
		  (if (not (file-exists? "test-macros.scm")) (snd-display ";save-macros didn't write file?"))
		  (if (and (defined? 'test-save-macros)
			   (procedure? test-save-macros))
		      (set! test-save-macros #f))
		  (load "test-macros.scm")
		  (if (not (procedure? test-save-macros)) (snd-display ";save-macros output incorrect?"))

		  (set! (cursor) 1000)
		  (key-event cwid (char->integer #\x) 4) (force-event)
		  (key-event cwid (char->integer #\e) 0) (force-event)
		  (if (not (= (cursor) 1003))
		      (snd-display ";kbd macro: ~A?" (cursor)))
		  (key-event cwid (char->integer #\x) 4) (force-event)
		  (key-event cwid (char->integer #\e) 4) (force-event)
		  (widget-string minibuffer "macro")
		  (key-event minibuffer snd-return-key 0) (force-event)
		  
		  (key-event cwid (char->integer #\u) 4) (force-event)
		  (key-event cwid (char->integer #\8) 0) (force-event)
		  (key-event cwid (char->integer #\x) 4) (force-event)
		  (key-event cwid (char->integer #\e) 0) (force-event)
		  (if (not (= (cursor) (+ 1003 (* 8 3))))
		      (snd-display ";kbd macro (8): ~A?" (cursor)))
		  (key-event cwid (char->integer #\t) 4) (force-event)

		  (set! (cursor) 4000)
		  (key-event cwid (char->integer #\x) 4) (force-event)
		  (key-event cwid (char->integer #\f) 0) (force-event)
		  (if (> (abs (- (cursor) (right-sample))) 1)
		      (snd-display ";C-x f -> ~A ~A" (cursor) (right-sample)))

		  (if (file-exists? "hiho.eps") (delete-file "hiho.eps"))
		  (key-event cwid (char->integer #\x) 4) (force-event)
		  (key-event cwid (char->integer #\g) 4) (force-event)
		  (key-event cwid (char->integer #\x) 4) (force-event)
		  (key-event cwid (char->integer #\d) 4) (force-event)
		  (widget-string minibuffer "hiho.eps")
		  (key-event minibuffer snd-return-key 0) (force-event)
		  (if (not (file-exists? "hiho.eps"))
		      (snd-display ";C-x C-d no output?")
		      (delete-file "hiho.eps"))
		  (with-output-to-file "hiho.scm" (lambda () (display "(define a-test 32)")))
		  (key-event cwid (char->integer #\x) 4) (force-event)
		  (key-event cwid (char->integer #\l) 4) (force-event)
		  (widget-string minibuffer "hiho.scm")
		  (key-event minibuffer snd-return-key 0) (force-event)
		  (if (or (not (defined? 'a-test))
			  (not (= a-test 32)))
		      (snd-display ";C-x C-l failed?")
		      (delete-file "hiho.scm"))
		  (key-event cwid (char->integer #\u) 4) (force-event)
		  (key-event cwid (char->integer #\1) 0) (force-event)
		  (key-event cwid (char->integer #\.) 0) (force-event)
		  (key-event cwid (char->integer #\0) 0) (force-event)
		  (key-event cwid (char->integer #\x) 4) (force-event)
		  (key-event cwid (char->integer #\p) 4) (force-event)
		  (if (fneq (/ (- (right-sample) (left-sample)) (srate)) 1.0)
		      (snd-display ";C-x C-p 1.0: ~A?" (/ (- (right-sample) (left-sample) (srate)))))
		  (key-event cwid (char->integer #\<) 4) (force-event)
		  (key-event cwid (char->integer #\u) 4) (force-event)
		  (key-event cwid (char->integer #\1) 0) (force-event)
		  (key-event cwid (char->integer #\.) 0) (force-event)
		  (key-event cwid (char->integer #\0) 0) (force-event)
		  (key-event cwid (char->integer #\f) 4) (force-event)
		  (if (fneq (/ (cursor) (srate)) 1.0)
		      (snd-display ";C-u 1.0 C-f: ~A?" (/ (cursor) (srate))))

;		  (let ((edhist (list-ref (channel-widgets) 7)))
;		    (select-item edhist 1) (force-event)
;		    (if (not (= (edit-position) 1))
;			(snd-display ";click edit history: ~A ~A" (edit-position) (edits))))
		  (set! (edit-position) 1)
		    
		  (drag-event cwid 1 0 100 50 400 50) (force-event)
		  (if (not (selection?))
		      (snd-display ";drag(1) but no selection?")
		      (let* ((pos (selection-position))
			     (samp (sample (1+ pos))))
			(key-event cwid (char->integer #\x) 4) (force-event)
			(key-event cwid (char->integer #\x) 0) (force-event)
			(widget-string minibuffer "(lambda (n) (* n 5))")
			(key-event minibuffer snd-return-key 0) (force-event)
			(if (fneq (sample (1+ pos)) (* 5 samp))
			    (snd-display ";eval-over-selection: ~A ~A (~A)" samp (sample (1+ pos)) (edit-fragment)))))
		  (key-event cwid (char->integer #\x) 4) (force-event)
		  (key-event cwid (char->integer #\z) 0) (force-event)
		  (let* ((md (mix "oboe.snd" 100))
			 (eds (edit-position))
			 (xy (mix-tag-position md))
			 (x (+ (car xy) 1))
			 (y (- (cadr xy) 2)))
		    (drag-event cwid 1 0 x y (+ x 150) y) (force-event)
		    (if (> (abs (- (car (mix-tag-position md)) (+ x 150))) 50)
			(snd-display ";move mix: ~A ~A" (car xy) (car (mix-tag-position md))))
		    (if (not (= (edit-position) (1+ eds)))
			(snd-display ";move mix edits: ~A ~A" eds (edit-position)))
		    (set! xy (mix-tag-position md))
		    (click-event cwid 1 0 (+ (car xy) 1) (- (cadr xy) 2)) (force-event)
		    (set! (x-bounds) (list 0.0 (/ (frames) (srate))))
		    (set! (graph-style) graph-dots)
		    (update-time-graph)
		    (set! xy (mix-tag-position md))
		    (set! x (+ (car xy) 1))
		    (set! y (- (cadr xy) 2))
		    (drag-event cwid 1 0 x y (- x 150) y) (force-event)
		    (update-time-graph)
		    (set! (graph-style) graph-lines)
		    )
		  (let* ((mrk (add-mark 100))
			 (x (x->position (/ (mark-sample mrk) (srate))))
			 (y 10))
		    (click-event cwid 1 0 x y) (force-event)
		    (drag-event cwid 1 0 x y (+ x 150) y) (force-event)
		    (if (not (> (mark-sample mrk) 100))
			(snd-display ";move mark: 100 -> ~A, ~A -> ~A" (mark-sample mrk) x (x->position (/ (mark-sample mrk) (srate)))))
		    (let ((eds (edit-position))
			  (len (frames)))
		      (set! x (x->position (/ (mark-sample mrk) (srate))))
		      (drag-event cwid 1 4 x y (- x 200) y) (force-event)
		      (if (not (= (edit-position) (1+ eds)))
			  (snd-display ";C-drag mark edits: ~A ~A" eds (edit-position)))
		      (if (<= len (frames))
			  (snd-display ";C-drag mark len: ~A -> ~A" len (frames)))))
		  (revert-sound ind)
		  (key-event cwid (char->integer #\<) 4) (force-event)
		  (key-event cwid (char->integer #\u) 4) (force-event)
		  (key-event cwid (char->integer #\1) 0) (force-event)
		  (key-event cwid (char->integer #\.) 0) (force-event)
		  (key-event cwid (char->integer #\0) 0) (force-event)
		  (key-event cwid (char->integer #\f) 4) (force-event)
		  (if (fneq (/ (cursor) (srate)) 1.0)
		      (snd-display ";C-u 1.0 C-f: ~A?" (/ (cursor) (srate))))
		  (let ((fr (frames)))
		    (key-event cwid (char->integer #\x) 4) (force-event)
		    (key-event cwid (char->integer #\i) 4) (force-event)
		    (widget-string minibuffer "oboe.snd")
		    (key-event minibuffer snd-return-key 0) (force-event)
		    (if (not (= (frames) (* 2 fr)))
			(snd-display ";C-x C-i oboe: ~A ~A" (* 2 fr) (frames)))
		    (if (fneq (sample 4000) (sample (+ (srate) 4000)))
			(snd-display ";inserted file: ~A ~A" (sample 4000) (sample (+ (srate) 4000))))
		    (if (not (equal? (edit-fragment 1) (list "C-x C-i" "insert" (inexact->exact (srate)) fr)))
			(snd-display ";C-x C-i edit: ~A" (edit-fragment 1)))
		    (let ((edit-pos (edit-position)))
		      (key-event cwid (char->integer #\x) 4) (force-event)
		      (key-event cwid (char->integer #\i) 4) (force-event)
		      (widget-string minibuffer "z.sn")
		      (key-event minibuffer snd-tab-key 0) (force-event)
		      (key-event minibuffer snd-return-key 0) (force-event)
		      (if (not (= (edit-position) edit-pos))
			  (snd-display ";C-x C-i empty file not a no-op?"))
		      (let ((str (widget-text minibuffer)))
			(if (not (string=? str "file z.snd has no data"))
			    (snd-display ";C-x C-i z.snd minibuffer text: ~A" str))))
		    (key-event cwid (char->integer #\x) 4) (force-event)
		    (key-event cwid (char->integer #\q) 4) (force-event)
		    (widget-string minibuffer "oboe.snd")
		    (key-event minibuffer snd-return-key 0) (force-event)
		    (if (not (= (frames) (* 2 fr)))
			(snd-display ";C-x C-q oboe: ~A ~A" (* 2 fr) (frames)))
		    (if (fneq (* 2 (sample 4000)) (sample (+ (srate) 4000)))
			(snd-display ";mixed file: ~A ~A" (* 2 (sample 4000)) (sample (+ (srate) 4000))))
		    (if (not (equal? (edit-fragment 2) (list "C-x C-q" "set" (inexact->exact (srate)) fr)))
			(snd-display ";C-x C-q edit: ~A" (edit-fragment 2))))
		  (set! (cursor) 0)
		  (key-event cwid (char->integer #\x) 4) (force-event)
		  (key-event cwid (char->integer #\j) 4) (force-event)
		  (if (not (= (cursor) (srate)))
		      (snd-display ";C-x C-j: ~A?" (cursor)))
		  (key-event cwid (char->integer #\x) 4) (force-event)
		  (key-event cwid (char->integer #\u) 4) (force-event)
		  (if (not (equal? (edits) (list 1 1)))
		      (snd-display ";C-x C-u: ~A?" (edits)))
		  (set! (x-bounds) (list .3 .4))
		  (update-time-graph)
		  (key-event cwid (char->integer #\l) 4) (force-event)	
		  (update-time-graph)
		  (if (fneq (/ (cursor) (srate)) (/ (* .5 (+ (left-sample) (right-sample))) (srate)))
		      (snd-display ";C-l: ~A ~A (~A: ~A ~A of ~A in ~A)?" 
				   (/ (cursor) (srate))
				   (/ (* .5 (+ (left-sample) (right-sample))) (srate))
				   (cursor)
				   (left-sample)
				   (right-sample)
				   (selected-sound)
				   (sounds)))
		  )

		;; named macro
		(let ((fr (frames)))
		  (key-event cwid (char->integer #\x) 4) (force-event)
		  (key-event cwid (char->integer #\() 1) (force-event)
		  (key-event cwid (char->integer #\d) 4) (force-event)
		  (key-event cwid (char->integer #\d) 4) (force-event)
		  (key-event cwid (char->integer #\d) 4) (force-event)
		  (key-event cwid (char->integer #\x) 4) (force-event)
		  (key-event cwid (char->integer #\)) 1) (force-event)

		  (key-event cwid (char->integer #\x) 4) (force-event)
		  (key-event cwid (char->integer #\e) 4) (force-event)
		  (widget-string minibuffer "a-name")
		  (key-event minibuffer snd-return-key 0) (force-event)
		  (if (not (= (frames) (- fr 3))) (snd-display ";macro definition wasn't effective?: ~A ~A" fr (frames)))

		  (key-event cwid (char->integer #\x) 8) (force-event)
		  (widget-string minibuffer "a-name")
		  (key-event minibuffer snd-return-key 0) (force-event)
		  (if (not (= (frames) (- fr 6))) (snd-display ";macro call wasn't effective?: ~A ~A" fr (frames)))

		  (key-event cwid (char->integer #\u) 4) (force-event)
		  (key-event cwid (char->integer #\4) 0) (force-event)
		  (key-event cwid (char->integer #\x) 8) (force-event)
		  (widget-string minibuffer "a-name")
		  (key-event minibuffer snd-return-key 0) (force-event)
		  (if (not (= (frames) (- fr 6 12))) (snd-display ";4 x macro call wasn't effective?: ~A ~A" fr (frames))))

		(set! (widget-text minibuffer) "")
		(key-event cwid (char->integer #\x) 8) (force-event)
		(widget-string minibuffer "(short-")
		(key-event minibuffer snd-tab-key 0) (force-event)
		(append-to-minibuffer ")")
		(key-event minibuffer snd-return-key 0) (force-event)
		(let ((str (widget-text minibuffer)))
		  (if (not (string=? str "\"oboe.snd\""))
		      (snd-display ";completed mini: ~A" str)))
		(set! (widget-text minibuffer) "")
		(focus-widget minibuffer)
		(key-event minibuffer (char->integer #\j) 4) (force-event)
		(let ((str (widget-text minibuffer)))
		  (if (not (string=? str " C-j"))
		      (snd-display ";C-j mini: [~A]" str)))
		(revert-sound ind)

		(click-button name-button) (force-event)
		(key-event name-button (char->integer #\x) 4) (force-event)
		(key-event name-button (char->integer #\f) 4) (force-event)
		(focus-widget minibuffer)
		(widget-string minibuffer "pistol.snd")
		(key-event minibuffer snd-return-key 0) (force-event)
		(if (not (= (length (sounds)) 2))
		    (snd-display ";C-x C-f -> ~A: ~A?" (sounds) (map short-file-name (sounds))))
		(backward-graph)
		(take-keyboard-focus name-button)
		(key-event name-button (char->integer #\x) 4) (force-event)
		(key-event name-button (char->integer #\k) 0) (force-event)
		(if (not (= (length (sounds)) 1))
		    (snd-display ";C-x k -> ~A: ~A?" (sounds) (map short-file-name (sounds))))
		(if (not (string=? (short-file-name (car (sounds))) "pistol.snd"))
		    (snd-display ";backgraph + kill: ~A?" (short-file-name (car (sounds)))))
		(set! swids (sound-widgets))
		(set! name-button (list-ref swids 1))
		(set! minibuffer (list-ref swids 3))
		(set! play-button (list-ref swids 4))
		(set! cwid (car (channel-widgets)))
		(let ((curmax (maxamp)))
		  (take-keyboard-focus name-button)
		  (key-event name-button (char->integer #\x) 4) (force-event)
		  (key-event name-button (char->integer #\a) 4) (force-event)
		  (widget-string minibuffer "'(0 .5 1 .5)")
		  (key-event minibuffer snd-return-key 0) (force-event)
		  (if (not (equal? (edits) '(1 0)))
		      (snd-display ";C-x C-a (edits) -> ~A?" (edits)))
		  (if (fneq (maxamp) (* .5 curmax))
		      (snd-display ";C-x C-a (amp) -> ~A ~A?" (maxamp) (* .5 curmax)))
		  (let ((grf (car (channel-widgets))))
		    (take-keyboard-focus grf)
		    (key-event grf (char->integer #\_) 5) (force-event)
		    (if (not (equal? (edits) '(0 1)))
			(snd-display ";C-x _ (edits) -> ~A?" (edits)))
		    (if (fneq (maxamp) curmax)
			(snd-display ";C-x _ (amp) -> ~A ~A?" (maxamp) curmax))))
		
		(let ((tmp (temp-dir)))
		  (key-event name-button (char->integer #\x) 4) (force-event)
		  (key-event name-button (char->integer #\d) 0) (force-event)
		  (widget-string minibuffer (string-append home-dir "/test/snd-6"))
		  (key-event minibuffer snd-return-key 0) (force-event)
		  (if (or (not (string? (temp-dir)))
			  (not (string=? (temp-dir) (string-append home-dir "/test/snd-6"))))
		      (snd-display ";temp-dir via prompt: ~A?" (temp-dir)))
		  (key-event name-button (char->integer #\x) 4) (force-event)
		  (key-event name-button (char->integer #\d) 0) (force-event)
		  (widget-string minibuffer (string-append home-dir "/root"))
		  (key-event minibuffer snd-return-key 0) (force-event)
		  (if (or (not (string? (temp-dir)))
			  (not (string=? (temp-dir) (string-append home-dir "/test/snd-6"))))
		      (snd-display ";temp-dir via prompt after /root: ~A?" (temp-dir)))
		  (set! (temp-dir) tmp)
		  (if (not (equal? (temp-dir) tmp))
		      (snd-display ";temp-dir reset: ~A ~A?" (temp-dir) tmp)))
		
		(set! (cursor) 4000)
		(key-event name-button (char->integer #\x) 4) (force-event)
		(key-event name-button (char->integer #\m) 4) (force-event)
		(widget-string minibuffer "hiho!")
		(key-event minibuffer snd-return-key 0) (force-event)
		(let ((m (find-mark 4000)))
		  (if (or (not (mark? m))
			  (not (string=? (mark-name m) "hiho!")))
		      (snd-display ";named mark prompt: ~A ~A" m (if (mark? m) (mark-name m) "no name"))))

		(key-event cwid (char->integer #\g) 4) (force-event)	
		(close-sound (car (sounds)))
	      ))

	    (let* ((ind (open-sound "4.aiff"))
		   (wbutton (list-ref (channel-widgets ind 0) 1))
		   (fbutton (list-ref (channel-widgets ind 0) 2))
		   (grf (car (channel-widgets ind 0))))
	      (XSynchronize (XtDisplay (cadr (main-widgets))) #t)
	      (set! (channel-style ind) channels-combined)
	      (click-button fbutton #t 0)
	      (click-button wbutton #f 0)
	      (if (time-graph? ind 1) (snd-display ";time graphs: ~A ~A" (time-graph? ind 0) (time-graph? ind 1)))
	      (if (not (transform-graph? ind 1)) (snd-display ";transform graphs: ~A ~A" (transform-graph? ind 0) (transform-graph? ind 1)))
	      (let ((xy (widget-size grf)))
		(click-event grf 1 0 (inexact->exact (* .65 (car xy))) (inexact->exact (* .35 (cadr xy))))
		(click-event grf 1 0 (inexact->exact (* .15 (car xy))) (inexact->exact (* .65 (cadr xy)))))
	      (set! (channel-style ind) channels-separate)
	      (click-button fbutton #f 4)
	      (click-button wbutton #t 4)
	      (XSynchronize (XtDisplay (cadr (main-widgets))) #f)
	      (close-sound ind))
	      
	    (let* ((ind0 (open-sound "oboe.snd"))
		   (ind1 (open-sound "pistol.snd"))
		   (cwid (car (channel-widgets ind0 0))))
	      (set! (sync ind1) 1)
	      (set! (sync ind0) 1)
	      (set! (cursor) 100)
	      (select-sound ind0)
	      (select-channel 0)
	      (take-keyboard-focus cwid)
	      (key-event cwid (char->integer #\M) 5) (force-event)
	      (let* ((m0 (marks ind0 0))
		     (m1 (marks ind1 0))
		     (mm0 (if (list-p m0) (car m0) -1))
		     (mm1 (if (list-p m1) (car m1) -1)))
		(if (or (not (= (length m0) (length m1)))
			(not (= (length m0) 1)))
		    (snd-display ";sync'd C-M: ~A ~A" m0 m1)
		    (if (not (= (mark-sample mm0) (mark-sample mm1)))
			(snd-display ";sync'd C-m: ~A ~A" (mark-sample mm0) (mark-sample mm1))
			(let* ((x (x->position (/ (mark-sample mm0) (srate))))
			       (y 10))
			  (click-event cwid 1 0 x y) (force-event)
			  (drag-event cwid 1 0 x y (+ x 150) y) (force-event)
			  (if (not (> (mark-sample mm0) 100))
			      (snd-display ";move syncd mark0: 100 -> ~A, ~A -> ~A" (mark-sample mm0) x (x->position (/ (mark-sample mm0) (srate)))))
			  (if (not (> (mark-sample mm1) 100))
			      (snd-display ";move syncd mark1: 100 -> ~A, ~A -> ~A" (mark-sample mm1) x (x->position (/ (mark-sample mm1) (srate)))))
			  (let ((eds0 (edit-position ind0 0))
				(eds1 (edit-position ind1 0))
				(len0 (frames ind0 0))
				(len1 (frames ind1 0)))
			    (set! x (x->position (/ (mark-sample mm0) (srate))))
			    (drag-event cwid 1 4 x y (- x 200) y) (force-event)
			    (if (not (= (edit-position ind0 0) (1+ eds0)))
				(snd-display ";C-drag syncd mark edits0: ~A ~A" eds0 (edit-position ind0 0)))
			    (if (<= len0 (frames ind0 0))
				(snd-display ";C-drag mark len0: ~A -> ~A" len0 (frames ind0 0)))
			    (if (not (= (edit-position ind1 0) (1+ eds1)))
				(snd-display ";C-drag syncd mark edits1: ~A ~A" eds1 (edit-position ind1 0)))
			    (if (<= len1 (frames ind1 0))
				(snd-display ";C-drag mark len1: ~A -> ~A" len1 (frames ind1 0))))))))

		(close-sound ind1)
		(catch #t (lambda () 
			    (key-event cwid (char->integer #\x) 4) (force-event)
			    (key-event cwid (char->integer #\a) 0) (force-event))
		       (lambda args (car args)))
		(key-event cwid snd-home-key 0) (force-event)
		(close-sound ind0))
	    
	    (let* ((ind (open-sound "2.snd"))
		   (c0 (frames ind 0))
		   (c1 (frames ind 1))
		   (mx0 (maxamp ind 0))		   
		   (mx1 (maxamp ind 1))
		   (swids (sound-widgets))
		   (cwids (channel-widgets ind 1))
		   (cwid (car cwids))
		   (cw (cadr cwids))
		   (cf (caddr cwids))
		   (minibuffer (list-ref swids 3)))
	      (select-sound ind)
	      (select-channel 1)
	      (click-button cf #t) (force-event)
	      (if (not (transform-graph? ind 1)) (snd-display ";cf click but not fft"))
	      (click-button cw #f) (force-event)
	      (if (time-graph? ind 1) (snd-display ";cw click but still time"))
	      (click-button cf #f 4) (force-event)
	      (click-button cw #t) (force-event)
	      (click-button (list-ref swids 6) #t)
	      (set! (channel-style ind) channels-combined)
	      (set! cwids (channel-widgets ind 0)) ; pick up gsy etc
	      ;; drag changed inc/dec for zy sy zx xy, drag changed for gz gsy
	      ;; 3:sx 4:sy 5:zx 6:zy 7:edhist)
	      (set! (zoom-focus-style) zoom-focus-active)
	      (let ((sx (list-ref cwids 3))
		    (sy (list-ref cwids 4))
		    (zx (list-ref cwids 5))
		    (zy (list-ref cwids 6))
		    (gsy (list-ref cwids 8))
		    (gzy (list-ref cwids 9)))
		(if (or (not (Widget? gsy)) (not (XtIsManaged gsy))) (snd-display ";unite but no gsy?"))
		(if (or (not (Widget? gzy)) (not (XtIsManaged gzy))) (snd-display ";unite but no gzy?"))
		(for-each
		 (lambda (scrl)
		   (XtCallCallbacks scrl XmNvalueChangedCallback
		      (let ((cb (XmScrollBarCallbackStruct)))
			(set! (.value cb) 75)
			(set! (.event cb) (XEvent))
			cb))
		   (XtCallCallbacks scrl XmNincrementCallback
		      (let ((cb (XmScrollBarCallbackStruct)))
			(set! (.event cb) (XEvent))
			cb))
		   (XtCallCallbacks scrl XmNdecrementCallback
		     (let ((cb (XmScrollBarCallbackStruct)))
		       (set! (.event cb) (XEvent))
		       cb))
		   (XtCallCallbacks scrl XmNdragCallback
		      (let ((cb (XmScrollBarCallbackStruct)))
			(set! (.value cb) 65)
			(set! (.event cb) (XEvent))
			cb)))
		 (list sx zx zy))
		(if (and (Widget? gsy) (Widget? gzy))
		    (for-each
		     (lambda (scrl)
		       (XtCallCallbacks scrl XmNvalueChangedCallback
		          (let ((cb (XmScrollBarCallbackStruct)))
			    (set! (.value cb) 75)
			    (set! (.event cb) (XEvent))
			    cb))
		       (XtCallCallbacks scrl XmNdragCallback
		          (let ((cb (XmScrollBarCallbackStruct)))
			    (set! (.value cb) 65)
			    (set! (.event cb) (XEvent))
			    cb)))
		     (list gsy gzy))))
	      (click-button (list-ref swids 6) #f)
	      (click-button (list-ref swids 9) #t)
	      (if (= (sync) 0) (snd-display ";click sync?"))
	      (click-button (list-ref swids 9) #f)
	      (enter-event cwid) (force-event)
	      (leave-event cwid) (force-event)
	      (set! (show-controls ind) #t)
	      (let* ((ctrls (list-ref swids 2)))
		(for-each
		 (lambda (label)
		   (click-button label #t ControlMask)
		   (click-button label #t 0))
		 (map 
		  (lambda (name)
		    (find-child ctrls name))
		  (list "amp-label" "srate-label" "contrast-label" "expand-label" "revlen-label" "revscl-label" )))
		(for-each
		 (lambda (scrl)
		   (XtCallCallbacks scrl XmNdragCallback
		     (let ((cb (XmScrollBarCallbackStruct)))
		       (set! (.value cb) 50)
		       (set! (.event cb) (XEvent))
		       cb)))
		 (map 
		  (lambda (name)
		    (find-child ctrls name))
		  (list "speed-scroll" "expand-scroll" "contrast-scroll" "revscl-scroll" "revlen-scroll")))
		(click-button (find-child ctrls "fltdB") #t)
		(let ((flttxt (find-child ctrls "filter-window")))
		  (widget-string flttxt "'(0 0 1 1 2 0)")
		  (key-event flttxt snd-return-key 0) (force-event))
		(let ((fltord (find-child ctrls "filter-order")))
		  (widget-string fltord "40")
		  (key-event fltord snd-return-key 0) (force-event))
		(click-button (find-child ctrls "Reset") #t)
		(click-button (list-ref swids 4) #t ControlMask)
		(click-button (list-ref swids 4) #f 0)
		(equalize-panes)
		(click-button (find-child ctrls "Apply") #t)
		(undo))
	      (set! (show-controls ind) #f)
	      (select-sound ind)
	      (select-channel 1)
	      (key-event cwid (char->integer #\x) 4) (force-event)
	      (key-event cwid (char->integer #\i) 4) (force-event)
	      (widget-string minibuffer "oboe.snd")
	      (key-event minibuffer snd-return-key 0) (force-event)
	      (if (not (= (frames ind 0) c0))
		  (snd-display ";C-x C-i wrote to wrong channel: ~A ~A" (frames ind 0) (frames ind 1)))
	      (if (not (= (- (frames ind 1) c1) 50828))
		  (snd-display ";C-x C-i wrote wrong number of samples: ~A ~A" (frames ind 1) (- (frames ind 1) c1)))
	      (map-chan (lambda (n) .5) 0 (frames ind 1) "fives" ind 1)
	      (if (or (> (maxamp ind 0) mx0)
		      (fneq (maxamp ind 1) .5))
		  (snd-display ";map fives: ~A ~A" (maxamp ind 0) (maxamp ind 1)))
	      (key-event cwid (char->integer #\x) 4) (force-event)
	      (key-event cwid (char->integer #\a) 4) (force-event)
	      (widget-string minibuffer "'(0 0 1 .5 2 0)")
	      (key-event minibuffer snd-return-key 0) (force-event)
	      (if (or (> (maxamp ind 0) mx0)
		      (fneq (maxamp ind 1) .25))
		  (snd-display ";map fives env: ~A ~A" (maxamp ind 0) (maxamp ind 1)))
	      (XtCallCallbacks (menu-option "Revert") XmNactivateCallback (snd-global-state))
	      (if (> (edit-position ind 1) 0)
		  (begin
		    (snd-display ";activate Revert menu: ~A" (edit-position ind 1))
		    (revert-sound ind)))
	      (XtCallCallbacks (menu-option "Redo    C-x C-r") XmNactivateCallback (snd-global-state))
	      (if (not (= (edit-position ind 1) 1))
		  (snd-display ";activate Redo menu: ~A (~A)" (edit-position ind 1) (menu-option "Redo    C-x C-r")))
	      (XtCallCallbacks (menu-option "Undo    C-x C-u") XmNactivateCallback (snd-global-state))
	      (if (not (= (edit-position ind 1) 0))
		  (snd-display ";activate Undo menu: ~A" (edit-position ind 1)))
	      (select-channel 1) ; redundant
	      (key-event cwid (char->integer #\x) 4) (force-event)
	      (key-event cwid (char->integer #\q) 4) (force-event)
	      (widget-string minibuffer "oboe.snd")
	      (key-event minibuffer snd-return-key 0) (force-event)
	      (if (not (= (frames ind 0) c0))
		  (snd-display ";C-x C-q wrote to wrong channel: ~A ~A" (frames ind 0) (frames ind 1)))
	      (if (not (= (frames ind 1) 50828))
		  (snd-display ";C-x C-q wrote wrong number of samples: ~A" (frames ind 1)))
	      (key-event cwid (char->integer #\x) 4) (force-event)
	      (key-event cwid (char->integer #\w) 4) (force-event)
	      (widget-string minibuffer "fmv.snd")
	      (key-event minibuffer snd-return-key 0) (force-event)
	      (if (not (= (mus-sound-frames "fmv.snd") 50828))
		  (snd-display ";C-x C-w wrote wrong number of samples: ~A" (mus-sound-frames "fmv.snd")))
	      (delete-file "fmv.snd")
	      (select-all)
	      (key-event cwid (char->integer #\x) 4) (force-event)
	      (key-event cwid (char->integer #\w) 0) (force-event)
	      (widget-string minibuffer "fmv1.snd")
	      (key-event minibuffer snd-return-key 0) (force-event)
	      (if (not (= (mus-sound-frames "fmv1.snd") 50828))
		  (snd-display ";C-x w wrote wrong number of samples: ~A" (mus-sound-frames "fmv1.snd")))
	      (let* ((ind2 (open-sound "fmv1.snd"))
		     (cwid2 (car (channel-widgets ind2 0))))
		(select-sound ind2)
		(delete-samples 0 1000)
		(key-event cwid2 (char->integer #\x) 4) (force-event)
		(key-event cwid2 (char->integer #\s) 4) (force-event)
		(if (not (equal? (edits ind2) (list 0 0))) (snd-display ";C-s edits: ~A" (edits ind2)))
		(if (not (= (mus-sound-frames "fmv1.snd") (- 50828 1000)))
		    (snd-display ";C-x C-s wrote wrong number of samples: ~A" (mus-sound-frames "fmv1.snd")))
		(key-event cwid2 (char->integer #\x) 4) (force-event)
		(key-event cwid2 (char->integer #\z) 0) (force-event)
		(let ((str (widget-text (list-ref (sound-widgets ind2) 3))))
		  (if (not (string=? str "no active selection"))
		      (snd-display ";C-x z report-in-minibuffer: ~A?" str)))
		(XtCallCallbacks (menu-option "Save options") XmNactivateCallback (snd-global-state))
		(if (file-exists? (string-append home-dir "/dot-snd"))
		    (system (string-append "cp " home-dir "/dot-snd " home-dir "/.snd")))
		(XtCallCallbacks (menu-option "Select all") XmNactivateCallback (snd-global-state))
		(if (not (selection?))
		    (snd-display ";Select all menu option failed?"))
		(XtCallCallbacks (menu-option "Delete Selection") XmNactivateCallback (snd-global-state))
		(if (not (= (frames) 0))
		    (snd-display ";Delete Selection menu option failed? ~A" (frames)))
		(XtCallCallbacks (menu-option "Revert") XmNactivateCallback (snd-global-state))
		(if (= (frames) 0)
		    (snd-display ";Revert menu option failed? ~A" (frames)))
		(for-each 
		 (lambda (name style)
		   (XtCallCallbacks (menu-option name) XmNactivateCallback (snd-global-state))
		   (if (not (= (graph-style) style)) (snd-display ";graph-style ~A: ~A" name (graph-style))))
		 (list "dots" "filled" "dots and lines" "lollipops" "lines")
		 (list graph-dots graph-filled graph-dots-and-lines graph-lollipops graph-lines))
		(for-each 
		 (lambda (name style)
		   (XtCallCallbacks (menu-option name) XmNactivateCallback (snd-global-state))
		   (if (not (= (x-axis-style) style)) (snd-display ";x-axis style ~A: ~A" name (x-axis-style))))
		 (list "samples" "percentage" "beats" "seconds")
		 (list x-axis-in-samples x-axis-as-percentage x-axis-in-beats x-axis-in-seconds))
		(for-each
		 (lambda (name style)
		   (XtCallCallbacks (menu-option name) XmNactivateCallback (snd-global-state))
		   (if (not (= (speed-control-style) style)) (snd-display ";speed-control style ~A: ~A" name (speed-control-style))))
		 (list "semitones" "ratio" "float")
		 (list speed-control-as-semitone speed-control-as-ratio speed-control-as-float))
		(set! (cursor) 50)
		(for-each
		 (lambda (name style)
		   (XtCallCallbacks (menu-option name) XmNactivateCallback (snd-global-state))
		   (if (not (= (zoom-focus-style) style)) (snd-display ";zoom-focus style ~A: ~A" name (zoom-focus-style))))
		 (list "window left edge" "window right edge" "window midpoint" "cursor or selection")
		 (list zoom-focus-left zoom-focus-right zoom-focus-middle zoom-focus-active))
		(XtCallCallbacks (menu-option "Close  C-x k") XmNactivateCallback (snd-global-state))
		(if (find-sound "fmv1.snd") 
		    (begin
		      (snd-display ";activate menu ~A -> ~A" (menu-option "Close  C-x k") (find-sound "fmv1.snd"))
		      (close-sound ind2))))
	      (let ((ind2 (open-sound "4.aiff")))
		(XtCallCallbacks (menu-option "Equalize Panes") XmNactivateCallback (snd-global-state))
		(equalize-panes ind2)
		(for-each 
		 (lambda (name style)
		   (XtCallCallbacks (menu-option name) XmNactivateCallback (snd-global-state))
		   (if (not (= (channel-style) style)) (snd-display ";channel style ~A: ~A" name (channel-style))))
		 (list "combined" "superimposed" "separate")
		 (list channels-combined channels-superimposed channels-separate))
		(close-sound ind2))
	      (delete-file "fmv1.snd")
	      (mus-sound-forget "fmv1.snd")
	      (select-sound ind)
	      (select-channel 1)
	      (set! (selection-member? #t) #f)
	      (let* ((rid (cadr (regions)))
		     (ridstr (number->string rid)))
		(key-event cwid (char->integer #\u) 4) (force-event)
		(do ((i 0 (1+ i)))
		    ((= i (string-length ridstr)))
		  (key-event cwid (char->integer (string-ref ridstr i)) 0) (force-event))
		(key-event cwid (char->integer #\x) 4) (force-event)
		(key-event cwid (char->integer #\w) 0) (force-event)
		(widget-string minibuffer "fmv2.snd")
		(key-event minibuffer snd-return-key 0) (force-event)
		(if (not (= (mus-sound-frames "fmv2.snd") 50828))
		    (snd-display ";C-u region C-x w wrote wrong number of samples: ~A" (mus-sound-frames "fmv2.snd")))
		(delete-file "fmv2.snd"))
	      (mus-sound-forget "fmv2.snd")
	      (widget-string minibuffer "")
	      (set! (lisp-graph? ind 1) #t)
	      (set! (time-graph? ind 1) #f)
	      (set! (transform-graph? ind 1) #f)
	      (graph '(0 0 1 1 2 0) "hi" 0.0 1.0 0.0 1.0 ind 1)
	      (let ((key #f)
		    (state #f)
		    (snd #f)
		    (chn #f))
		(add-hook! key-press-hook (lambda (snd1 chn1 key1 state1)
					    (set! snd snd1)
					    (set! chn chn1)
					    (set! key key1)
					    (set! state state1)
					    #f))
		(let ((ax (axis-info ind 1 lisp-graph)))
		  (focus-widget cwid)
		  (key-event-with-mouse cwid (char->integer #\f) 4
					(inexact->exact (* .5 (+ (list-ref ax 10) (list-ref ax 12))))
					;(- (list-ref ax 12) 10)
					(inexact->exact (* .5 (+ (list-ref ax 11) (list-ref ax 13))))))
		(force-event)
		(reset-hook! key-press-hook)
		(if (or (not (number? snd)) (not (= snd ind))
			(not (number? chn)) (not (= chn 1))
			(not (number? key)) (not (= key (char->integer #\f)))
			(not (number? state)) (not (= state 4)))
		    (snd-display ";key-press-hook: ~A ~A ~A ~A, ~A ~A ~A ~A (~A)"
				 snd chn key state
				 ind 1 (char->integer #\f) 4
				 (axis-info ind 1 lisp-graph))))
	      (if (provided? 'snd-debug)
		  (for-each
		   (lambda (sash)
		     (if (Widget? sash)
			 (drag-event sash 1 0 1 1 1 100)))
		   (top-sash)))
	      (close-sound ind))

	    ;; -------- filter envelope editor
	    (let* ((ind (open-sound "oboe.snd"))
		   (swids (sound-widgets))
		   (filter-grf (list-ref swids 5)))
	      (set! (show-controls ind) #t)
	      (set! (filter-control-order ind) 20)
	      (let ((fe (filter-control-env ind)))
		(if (not (equal? fe '(0.0 1.0 1.0 1.0)))
		    (snd-display ";filter-env (initial): ~A?" fe))
		(if (not (vequal (filter-control-coeffs ind)
				 (vct -0.004 0.012 -0.021 0.031 -0.043 0.059 -0.082 0.121 -0.208 0.635 
				      0.635 -0.208 0.121 -0.082 0.059 -0.043 0.031 -0.021 0.012 -0.004)))
		    (snd-display ";filter-control-coeffs: ~A?" (filter-control-coeffs ind)))
		(let ((psize (widget-size filter-grf)))
		  (if (< (cadr psize) 100)
		      (begin
			(set! (window-height) 800)
			(resize-pane (list-ref swids 0) 600)
			(resize-pane (list-ref swids 2) 400)))
		  (set! (widget-size filter-grf) (list (car psize) (+ (cadr psize) 10))))
		(force-event)
		(click-event filter-grf 1 0 100 100) (force-event)
		(if (not (= (length (filter-control-env ind)) 6))
		    (snd-display ";click filter-env: ~A?" (filter-control-env ind)))
		(click-event filter-grf 1 0 100 100) (force-event)
		(set! fe (filter-control-env ind))
		(if (not (equal? fe '(0.0 1.0 1.0 1.0)))
		    (snd-display ";filter-env (point deleted): ~A?" fe))
		(set! (filter-control-in-dB) #t)
		(click-event filter-grf 1 0 100 100) (force-event)
		(close-sound ind)
		))

	    ;; -------- recorder dialog
	    (if (provided? 'snd-debug)
		(begin
		  (recorder-dialog)
		  (let* ((recd (list-ref (dialog-widgets) 18)))
		    (if recd ; /dev/mixer trouble sometimes here
			(let* ((record-button (find-child recd "record-button"))
			       (reset-button (XmMessageBoxGetChild recd XmDIALOG_CANCEL_BUTTON))
			       (dismiss-button (XmMessageBoxGetChild recd XmDIALOG_OK_BUTTON))
			       (panes (find-child recd "rec-panes"))
			       (file-pane (find-child panes "file-pane"))
			       (fdata (find-child file-pane "file-data"))
			       (ff (find-child fdata "ff-form"))
			       (file-text (find-child ff "text"))
			       (buttons '())
			       (sliders '())
			       (numbers '()))
			  (for-each-child recd (lambda (w) 
						 (if (and (XmIsPushButton w) 
							  (or (string=? (XtName w) "A")
							      (string=? (XtName w) " ")
							      (string=? (XtName w) "/")))
						     (set! buttons (cons w buttons)))
						 (if (and (XmIsPushButton w) 
							  (string=? (XtName w) "amp-number")) 
						     (set! numbers (cons w numbers)))
						 (if (and (XmIsScrollBar w) 
							  (or (string=? (XtName w) "amp")
							      (string=? (XtName w) "trigger-scale")))
						     (set! sliders (cons w sliders)))))
			  (XmTextSetString file-text "fmv.snd")
			  (for-each (lambda (w) (click-button w #t)) buttons)
			  (for-each (lambda (w) (click-button w #t)) numbers)
			  (for-each
			   (lambda (w)
			     (XtCallCallbacks w XmNdragCallback
					       (let ((cb (XmScrollBarCallbackStruct)))
						 (set! (.value cb) 65)
						 (set! (.event cb) (XEvent))
						 cb)))
			   sliders)
			  (click-button record-button #t)
			  (click-button record-button #f)
			  (click-button reset-button)
			  (for-each-child recd (lambda (w)
						 (if (or (XmIsText w)
							 (XmIsTextField w))
						     (begin
						       (widget-string w "1")
						       (key-event w snd-return-key 0)
						       (force-event))
						     (if (and (XmIsLabel w)
							      (or (string=? (XtName w) "i")
								  (string=? (XtName w) "n")
								  (string=? (XtName w) "out")))
							 (begin
							   (drag-event w 1 0 0 0 50 10)
							   (force-event))))))
			  (click-button dismiss-button))))))
	      
	    ;; -------- edit find dialog

	    (if (defined? 'edit-find-dialog)
		(begin
		  (edit-find-dialog)
		  (let* ((find-widgets (find-dialog-widgets))
			 (ind (open-sound "oboe.snd"))
			 (text-widget (cadr find-widgets))
			 (next-button (list-ref find-widgets 2))
			 (previous-button (list-ref find-widgets 3))
			 (cancel-button (list-ref find-widgets 4)))
		    
		    (widget-string text-widget "(lambda (n8) (> n8 .1))")
		    (key-event text-widget snd-return-key 0) (force-event)
		    (if (or (not (= (cursor) 4423))
			    (not (> (sample (cursor)) .1)))
			(snd-display ";edit find <cr>: ~A ~A" (cursor) (sample (cursor))))
		    (click-button next-button) (force-event)
		    (if (or (not (= (cursor) 4463))
			    (not (> (sample (cursor)) .1)))
			(snd-display ";edit find (1): ~A ~A" (cursor) (sample (cursor))))
		    (click-button previous-button) (force-event)
		    (if (or (not (= (cursor) 4423))
			    (not (> (sample (cursor)) .1)))
			(snd-display ";edit find (2): ~A ~A" (cursor) (sample (cursor))))
		    (do ((i 0 (1+ i)))
			((= i 10))
		      (click-button next-button) (force-event)
		      (if (not (> (sample (cursor)) .1))
			  (snd-display ";edit find (~A): ~A ~A" (+ i 3) (cursor) (sample (cursor)))))
		    (if (not (= (cursor) 4741))
			(snd-display ";edit find end: ~A?" (cursor)))
		    (set! (cursor) 0)
		    (widget-string text-widget "(lambda (n) (> n 1.1))")
		    (key-event text-widget snd-return-key 0) (force-event)
		    (if (not (= (cursor) 0))
			(snd-display ";edit no find: ~A?" (cursor)))
		    (widget-string text-widget "(lambda (n9) (if (> n9 .1) 1 #f))")
		    (key-event text-widget snd-return-key 0) (force-event)
		    (if (not (= (cursor) 4424))
			(snd-display ";find 1 past .1: ~A ~A ~A" (cursor) (sample (1- (cursor))) (sample (cursor))))
		    (click-button cancel-button) (force-event)
		    (close-sound ind))))

	    ;; -------- envelope editor
	    (if (defined? 'enved-dialog-widgets)
		(begin
		  (enved-dialog)
		  (force-event)
		  (let* ((enved-widgets (enved-dialog-widgets))
			 (drawer (cadr enved-widgets))
			 (apply-button (list-ref enved-widgets 4))
			 (undo-apply-button (list-ref enved-widgets 5))
			 (text-widget (list-ref enved-widgets 3))
			 (show-button (list-ref enved-widgets 7))
			 (save-button (list-ref enved-widgets 8))
			 (dismiss-button (list-ref enved-widgets 6))
			 (reset-button (list-ref enved-widgets 24))
			 (revert-button (list-ref enved-widgets 9))
			 (undo-button (list-ref enved-widgets 10))
			 (redo-button (list-ref enved-widgets 11))
			 (print-button (list-ref enved-widgets 12))
			 (graph-button (list-ref enved-widgets 13))
			 (flt-button (list-ref enved-widgets 14))
			 (amp-button (list-ref enved-widgets 15))
			 (src-button (list-ref enved-widgets 16))
			 (clip-button (list-ref enved-widgets 17))
			 (dB-button (list-ref enved-widgets 18))
			 (delete-button (list-ref enved-widgets 19))
			 (exp-button (list-ref enved-widgets 20))
			 (lin-button (list-ref enved-widgets 21))
			 (env-list (list-ref enved-widgets 25))
			 (fir-button (list-ref enved-widgets 26))
			 (ewid drawer)
			 (senv #f))
		    
		    (click-button reset-button) (force-event)
		      
		    (select-item env-list 1) (force-event)
		    (let ((e1 (enved-selected-env)))
		      (if (or (not e1)
			      (null? e1))
			  (snd-display ";select env failed? ~A" e1)
			  (begin
			    (select-item env-list 0)  (force-event)
			    (if (equal? e1 (enved-selected-env))
				(snd-display ";select env 0 is same as 1? ~A" e1)))))

		    (set! senv (enved-selected-env))
		    (click-event ewid 1 0 (enved-x 0.5) (enved-y 1.0)) (force-event)
		    (let ((active-env (enved-active-env)))
		      (if (not (ffeql active-env (list 0.0 0.0 0.5 1.0 1.0 0.0)))
			  (snd-display ";enved mid-click: ~A?" active-env)))
		    (widget-string text-widget "new-env")
		    (click-button save-button) (force-event)
		    (if (not (defined? 'new-env))
			(snd-display ";save new-env failed?"))
		    (if (not (ffeql new-env (list 0.0 0.0 0.5 1.0 1.0 0.0)))
			(snd-display ";saved new-env: ~A?" new-env))
		    (click-event ewid 1 0 (enved-x 0.5) (enved-y 1.0)) (force-event)
		    (let ((active-env (enved-active-env)))
		      (if (not (ffeql active-env (list 0.0 0.0 1.0 0.0)))
			  (snd-display ";enved mid-click to delete: ~A?" active-env)))
		    (set! (enved-base) 1.0)

		    (do ((i 0 (1+ i)))
			((= i 50))
		      (click-event ewid 1 0 (enved-x (random 0.999)) (enved-y (random 1.0))) (force-event)
		      (click-event ewid 1 0 (enved-x (random 0.999)) (enved-y (random 1.0))) (force-event)
		      (let* ((e (enved-active-env))
			     (len (length e)))
			(if (> len 4)
			    (let* ((pos (+ 2 (random (- len 4))))
				   (rx (list-ref e (if (odd? pos) (- pos 1) pos)))
				   (ry (list-ref e (if (odd? pos) pos (+ pos 1)))))
			      (click-event ewid 1 0 (enved-x rx) (enved-y ry)) (force-event)
;			      (if (>= (length (enved-active-env)) (length e))
;				  (snd-display "; enved loop missed a hit ~A ~A ~A" (enved-x rx) (enved-y ry) (enved-axis-info)))
			      ))))
		    (let ((len (length (enved-active-env))))
		      (do ((i 0 (1+ i)))
			  ((= i 10))
			(click-button undo-button) (force-event)
			(click-button undo-button) (force-event)
			(click-button redo-button) (force-event)))
		    (click-button revert-button) (force-event)
		    (click-button clip-button) (force-event)
		    (click-button clip-button) (force-event)
		    (let ((active-env (enved-active-env)))
		      (if (not (ffeql active-env senv))
			  (snd-display ";enved revert: ~A ~A?" active-env senv)))
		    (do ((i 0 (1+ i)))
			((= i 50))
		      (click-event ewid 1 0 (enved-x (random 0.999)) (enved-y (random 1.0))) (force-event)
		      (if (> (random 1.0) .5) 
			  (begin
			    (click-button undo-button) (force-event)
			    (if (> (random 1.0) 0.5)
				(begin
				  (click-button redo-button) (force-event)))))
		      (click-event ewid 1 0 (enved-x (random 0.999)) (enved-y (random 1.0))) (force-event)
		      (if (> (random 1.0) .9) (begin (click-button save-button) (force-event)))
		      (if (> (random 1.0) .9) (begin (click-button print-button) (force-event)))
		      (if (> (random 1.0) .9) (begin (click-button dB-button) (force-event)))
		      (if (> (random 1.0) .9) (begin (set! (enved-base) 0.0) (click-button exp-button) (force-event)))
		      (if (> (random 1.0) .9) (begin (set! (enved-base) (random 2.0)) (click-button exp-button) (force-event)))
		      (if (> (random 1.0) .9) (begin (click-button lin-button) (force-event)))
		      (let* ((e (enved-active-env)))
			(if (> (length e) 4)
			    (let* ((pos (+ 2 (random (- (length e) 4))))
				   (rx (list-ref e (if (odd? pos) (- pos 1) pos)))
				   (ry (list-ref e (if (odd? pos) pos (+ pos 1)))))
			      (click-event ewid 1 0 (enved-x rx) (enved-y ry))
			      (force-event)))))
		    (click-button revert-button) (force-event)
		    (let ((active-env (enved-active-env)))
		      (if (not (ffeql active-env senv))
			  (snd-display ";enved revert: ~A ~A?" active-env senv)))
		    (click-event ewid 1 0 (enved-x (random 0.999)) (enved-y (random 1.0))) (force-event)
		    (drag-event drawer 1 0 10 10 100 100)
		    (click-button reset-button) (force-event)
		      
		    (let* ((ind (open-sound "oboe.snd"))
			   (fr (frames ind)))
		      (click-button graph-button #t) (force-event)
		      (if (not (enved-wave?)) 
			  (begin
			    (set! (enved-wave?) #t)
			    (snd-display "; had to set enved-wave? by hand")))

		      (widget-string text-widget "'(0 0 .5 1 1 0)") (force-event)
		      (key-event text-widget snd-return-key 0) (force-event)
			
		      (set! (transform-size ind 0) 65536)
		      (set! (transform-graph? ind 0) #t)
		      (click-button flt-button) (force-event)
		      (if (not (= (enved-target) enved-spectrum))
			  (snd-display ";click flt button but target: ~A" (enved-target)))
		      (click-button src-button) (force-event)
		      (if (not (= (enved-target) enved-srate))
			  (snd-display ";click src button but target: ~A" (enved-target)))
		      (click-button amp-button) (force-event)
		      (if (not (= (enved-target) enved-amplitude))
			  (snd-display ";click flt button but target: ~A" (enved-target)))
		      (click-button apply-button) (force-event)
		      (if (not (equal? (edits ind) '(1 0)))
			  (snd-display ";apply amp: ~A?" (edits ind)))
		      (if (not (equal? (edit-fragment 1) 
				       (list "env-channel (make-env '(0.000 0.000 0.500 1.000 1.000 0.000 ) :base 1.0000 :end 50827) 0 50828" 
					     "env" 25415 25413)))
			  (snd-display ";apply amp fragment: ~A?" (edit-fragment 1)))
		      (click-event ewid 1 0 (enved-x 0.25) (enved-y 1.0)) (force-event)
		      (click-button undo-apply-button) (force-event)
		      (if (not (equal? (edits ind) '(1 0)))
			  (snd-display ";undo-apply amp: ~A?" (edits ind)))
		      (click-button flt-button) (force-event)
		      (click-button apply-button) (force-event)
		      (if (not (equal? (edits ind) '(2 0)))
			  (snd-display ";apply flt: ~A?" (edits ind)))
		      (if (and (not (equal? (edit-fragment 2) (list "Enved: flt" "set" 0 50868)))
			       (not (equal? (edit-fragment 2) (list "Enved: flt" "set" 0 50828))))
			  (snd-display ";apply flt fragment: ~A?" (edit-fragment 2)))
		      (click-button reset-button) (force-event)
		      (widget-string text-widget "'(0 .5 1 .4)") (force-event)
		      (key-event text-widget snd-return-key 0) (force-event)
		      (click-button src-button) (force-event)
		      (click-button apply-button) (force-event)
		      (if (not (equal? (edits ind) '(3 0)))
			  (snd-display ";apply src: ~A?" (edits ind)))
		      (if (and (not (equal? (edit-fragment 3) (list "Enved: src" "set" 0 113510)))
			       (not (equal? (edit-fragment 3) (list "Enved: src" "set" 0 113420))))
			  (snd-display ";apply flt fragment: ~A?" (edit-fragment 3)))
		      (if (not (> (frames ind) (* 2 fr)))
			  (snd-display ";apply src length: ~A ~A?" fr (frames ind)))
		      (click-button (find-child (car enved-widgets) "exp:"))
		      (XtCallCallbacks (find-child (car enved-widgets) "expscl") XmNdragCallback
				       (let ((cb (XmScrollBarCallbackStruct)))
					 (set! (.value cb) 65)
					 (set! (.event cb) (XEvent))
					 cb))
		      (XtCallCallbacks (find-child (car enved-widgets) "expscl") XmNvalueChangedCallback
				       (let ((cb (XmScrollBarCallbackStruct)))
					 (set! (.value cb) 65)
					 (set! (.event cb) (XEvent))
					 cb))
		      (click-button show-button) (force-event)
		      (close-sound ind))
		    (let ((firB (enved-filter)))
		      (click-button fir-button) (force-event)
		      (if (eq? (enved-filter) firB) (snd-display ";fir button had no effect?")))
		    
		    (set! (enved-selected-env) "env1")
		    (click-button delete-button) (force-event)
		    (click-button dismiss-button) (force-event)
		    )
		  ))

	    (for-each (lambda (dialog)
			(all-help dialog))
		      (dialog-widgets))

	    (XSynchronize (XtDisplay (cadr (main-widgets))) #f)

	    (if (and (provided? 'snd-motif) (provided? 'xm))
	      (let ((move-scroll
		     (lambda (w val)
		       (if (and w
				(XmScrollBar? w))
			   (let ((oldvals (XmScrollBarGetValues w)))
			     (apply XmScrollBarSetValues (list w
								(+ (car oldvals) val)
								(cadr oldvals)
								(caddr oldvals)
								(cadddr oldvals)
								#t))
			     (let ((newvals (XmScrollBarGetValues w)))
			       (if (> (abs (- (car newvals) (car oldvals) val)) 1)
				   (snd-display ";move ~A ~A: ~A" (XtName w) val (car newvals)))))
			   (snd-display ";move-scroll ~A?" w)))))
		(reset-almost-all-hooks)
		(add-hook! bad-header-hook (lambda (n) #t))
		(let* ((ind (open-sound "pistol.snd"))
		       (swids (sound-widgets ind))
		       (spane (car swids))
		       (sctrls (list-ref swids 2))
		       (cmain (find-child spane "chn-main-window")))
		  (move-scroll (find-child cmain "chn-sx") 10)
		  (move-scroll (find-child cmain "chn-zy") -30)
		  (move-scroll (find-child cmain "chn-sy") 10)
		  (move-scroll (find-child cmain "chn-zx") 10)
		  (set! (show-controls ind) #t)
		  (move-scroll (find-child sctrls "amp") 10)
		  (if (not (> (amp-control ind) 1.0)) (snd-display ";amp-control moved: ~A" (amp-control ind)))
		  (move-scroll (find-child sctrls "speed-scroll") 10)
		  (if (not (> (speed-control ind) 1.0)) (snd-display ";speed-control moved: ~A" (speed-control ind)))
		  (move-scroll (find-child sctrls "expand-scroll") 10)
		  (if (not (> (expand-control ind) 1.0)) (snd-display ";expand-control moved: ~A" (expand-control ind)))
		  (move-scroll (find-child sctrls "contrast-scroll") 10)
		  (if (not (> (contrast-control ind) 0.0)) (snd-display ";contrast-control moved: ~A" (contrast-control ind)))
		  (move-scroll (find-child sctrls "revscl-scroll") 10)
		  (if (not (> (reverb-control-scale ind) 0.0)) (snd-display ";reverb-control-scale moved: ~A" (reverb-control-scale ind)))
		  (move-scroll (find-child sctrls "revlen-scroll") 10)
		  (if (not (> (reverb-control-length ind) 1.0)) (snd-display ";reverb-control-length moved: ~A" (reverb-control-length ind)))
		  (XmToggleButtonSetState (find-child sctrls "dir") #t #t)
		  (if (>= (speed-control ind) 0.0) (snd-display ";speed arrow: ~A" (speed-control ind)))
		  (XmToggleButtonSetState (find-child sctrls "expoff") #t #t)
		  (if (not (expand-control? ind)) (snd-display ";toggle but expand off?"))
		  (XmToggleButtonSetState (find-child sctrls "conoff") #t #t)
		  (if (not (contrast-control? ind)) (snd-display ";toggle but contrast off?"))
		  (XmToggleButtonSetState (find-child sctrls "revoff") #t #t)
		  (if (not (reverb-control? ind)) (snd-display ";toggle but reverb off?"))
		  (XmToggleButtonSetState (find-child sctrls "fltoff") #t #t)
		  (if (not (filter-control? ind)) (snd-display ";toggle but filter off?"))
		  (if (not (filter-control-in-dB ind))
		      (begin
			(XmToggleButtonSetState (find-child sctrls "fltdB") #t #t)
			(if (not (filter-control-in-dB ind)) (snd-display ";toggle but filter-in-db off?"))))
		  ;(click-button (cadr (find-child sctrls "expand-label")))
		  ;(if (fneq (expand-control ind) 1.0) (snd-display ";click expand: ~A" (expand-control)))
		  ;need click event here, not just pushbutton callback
		  (close-sound ind))

		(if (not (car (dialog-widgets))) 
		    (begin 
		      (set! (with-background-processes) #t)
		      (let ((ind (open-sound "obtest.snd")))
			(without-errors (test-menus)) 
			(close-sound ind))
		      (dismiss-all-dialogs)
		      (set! (with-background-processes) #f)))

		;; ---------------- color dialog ----------------
		(let* ((colord (list-ref (dialog-widgets) 0))
		       (inv (find-child colord "invert"))
		       (cut (find-child colord "cutoff"))
		       (scl (find-child colord "ccdscl"))
		       (ind (open-sound "pistol.snd")))
		  (XtManageChild colord)
		  (set! (transform-graph? ind 0) #t)
		  (set! (transform-graph-type ind 0) graph-as-sonogram)
		  (if (and inv (Widget? inv))
		      (begin
			(move-scale cut 32)
			(if (fneq (color-cutoff) .032)
			    (snd-display ";moved color-cutoff: ~A ~A" (color-cutoff) (XmScaleGetValue cut)))
			(move-scale scl 32)
			(if (fneq (color-scale) .647)
			    (snd-display ";moved color-scale: ~A ~A" (color-scale) (XmScaleGetValue scl)))
			(XmToggleButtonSetState inv #f #t)
			(if (color-inverted)
			    (snd-display ";toggle invert off"))
			(XmToggleButtonSetState inv #t #t)
			(if (not (color-inverted))
			    (snd-display ";toggle invert on")))
		      (snd-display ";can't find color invert button?"))
		  (let ((lst (find-child colord "colormap-list")))
		    (do ((i 2 (1+ i)))
			((= i 16))
		      (XmListSelectPos lst i #t)
		      (if (not (= (colormap) (- i 1)))
			  (snd-display ";color dialog list ~A: ~A" (- i 1) (colormap)))
		      (update-transform-graph)))
		  (close-sound ind)
		  (click-button (XmMessageBoxGetChild colord XmDIALOG_CANCEL_BUTTON)) (force-event))

                ;; ---------------- orientation dialog ----------------
		(orientation-dialog)
                (let* ((orientd (list-ref (dialog-widgets) 1))
		       (cut (or (find-child orientd "cut") (snd-display ";can't find cut")))
		       (ax (or (find-child orientd "ax") (snd-display ";can't find x angle")))
		       (ay (or (find-child orientd "ay") (snd-display ";can't find y angle")))
		       (az (or (find-child orientd "az") (snd-display ";can't find z angle")))
		       (sx (or (find-child orientd "xs") (snd-display ";can't find x scale")))
		       (sy (or (find-child orientd "ys") (snd-display ";can't find y scale")))
		       (sz (or (find-child orientd "zs") (snd-display ";can't find z scale")))
		       (hop (or (find-child orientd "hop") (snd-display ";can't find hop"))))
		  (set! (spectro-x-scale) 2.0)
		  (click-button (XmMessageBoxGetChild orientd XmDIALOG_OK_BUTTON)) (force-event)
		  (if (and (fneq (spectro-x-scale) 1.0)
			   (fneq (spectro-x-scale) 1.5))
		      (snd-display ";orientation reset: ~A" (spectro-x-scale)))
		  (move-scale cut 32)
		  (if (fneq (spectro-cutoff) .32)
		      (snd-display ";moved spectro-cutoff: ~A ~A" (spectro-cutoff) (XmScaleGetValue cut)))
		  (move-scale ax 32)
		  (if (fneq (spectro-x-angle) 32)
		      (snd-display ";moved spectro-x-angle: ~A ~A" (spectro-x-angle) (XmScaleGetValue ax)))
		  (move-scale ay 32)
		  (if (fneq (spectro-y-angle) 32)
		      (snd-display ";moved spectro-y-angle: ~A ~A" (spectro-y-angle) (XmScaleGetValue ay)))
		  (move-scale az 32)
		  (if (fneq (spectro-z-angle) 32)
		      (snd-display ";moved spectro-z-angle: ~A ~A" (spectro-z-angle) (XmScaleGetValue az)))
		  (move-scale sx 32)
		  (if (fneq (spectro-x-scale) .32)
		      (snd-display ";moved spectro-x-scale: ~A ~A" (spectro-x-scale) (XmScaleGetValue sx)))
		  (move-scale sy 32)
		  (if (fneq (spectro-y-scale) .32)
		      (snd-display ";moved spectro-y-scale: ~A ~A" (spectro-y-scale) (XmScaleGetValue sy)))
		  (move-scale sz 32)
		  (if (fneq (spectro-z-scale) .32)
		      (snd-display ";moved spectro-z-scale: ~A ~A" (spectro-z-scale) (XmScaleGetValue sz)))
		  (move-scale hop 12)
		  (if (fneq (spectro-hop) 12)
		      (snd-display ";moved spectro-hop: ~A ~A" (spectro-hop) (XmScaleGetValue hop)))
		  (click-button (XmMessageBoxGetChild orientd XmDIALOG_OK_BUTTON)) (force-event)
		  (if (and (fneq (spectro-x-scale) 1.0)
			   (fneq (spectro-x-scale) 1.5))
		      (snd-display ";orientation reset: ~A" (spectro-x-scale)))
		  (set! (widget-position orientd) (list 200 300))
		  (click-button (XmMessageBoxGetChild orientd XmDIALOG_CANCEL_BUTTON)) (force-event)
		  (if (XtIsManaged orientd)
		      (snd-display ";orientation still active?")))

		;; ---------------- enved dialog ----------------
		(if (defined? 'enved-axis-info)
		    (begin
		      (let* ((envd (list-ref (dialog-widgets) 2)))
			(XtManageChild envd)
			(let* ((ind2 (open-sound "storm.snd"))
			       (cwid (car (channel-widgets ind2 0)))
			       (waveb (find-child envd "wave"))
			       (selectb (find-child envd "selection"))
			       (mixb (find-child envd "mix")))
			  (make-selection 243873 702138 ind2 0)
			  (click-button selectb)
			  (set! (cursor ind2 0) 1000)
			  (take-keyboard-focus (car (channel-widgets)))
			  (key-event cwid (char->integer #\x) 4) (force-event)
			  (key-event cwid (char->integer #\q) 0) (force-event)
			  (set! (cursor ind2 0) 1195243)
			  (key-event cwid (char->integer #\x) 4) (force-event)
			  (key-event cwid (char->integer #\q) 0) (force-event)
			  (click-button mixb) (force-event)
			  (let* ((enved-widgets (enved-dialog-widgets))
				 (drawer (cadr enved-widgets))
				 (ewid drawer))

			    (click-event ewid 1 0 (enved-x 0.5) (enved-y 1.0)) (force-event)

			    (add-hook! enved-hook
				       (lambda (env pt x y reason)
					 (if (= reason enved-move-point)
					     (if (and (> x 0.0) (< x (envelope-last-x env)))
						 (let* ((old-x (list-ref env (* pt 2)))
							(new-env (stretch-envelope env old-x x)))
						   (list-set! new-env (+ (* pt 2) 1) y)
						   new-env)
						 env)
					     #f)))
			    (drag-event ewid 1 0 (enved-x 0.25) (enved-y 0.0) (enved-x 0.4) (enved-y 0.1)) (force-event)
			    (drag-event ewid 1 0 (enved-x 0.75) (enved-y 1.0) (enved-x 0.6) (enved-y 0.6)) (force-event)

			    (click-button (XmMessageBoxGetChild envd XmDIALOG_OK_BUTTON)) (force-event)
			    (click-button (find-child envd "Reset")) (force-event)
			    (click-button (XmMessageBoxGetChild envd XmDIALOG_CANCEL_BUTTON)) (force-event)
			    (close-sound ind2))))))

		;; ---------------- error dialog ----------------
		(let ((errord (list-ref (dialog-widgets) 3)))
		  (XtManageChild errord)
		  (click-button (XmMessageBoxGetChild errord XmDIALOG_OK_BUTTON)) (force-event)
		  (if (XtIsManaged errord)
		      (snd-display ";why is error dialog alive?")))

		;; ---------------- yes-or-no dialog ----------------
		(let ((old-val (with-background-processes)))
		  (set! (with-background-processes) 1234)
		  (let* ((val (yes-or-no? "hiho"))
			 (yesd (list-ref (dialog-widgets) 4)))
		    (if (not yesd)
			(snd-display ";no yes dialog"))
		    (XtManageChild yesd)
		    (click-button (XmMessageBoxGetChild yesd XmDIALOG_OK_BUTTON)) (force-event))
		  (let* ((val (yes-or-no? "hiho"))
			 (yesd (list-ref (dialog-widgets) 4)))
		    (if (not yesd)
			(snd-display ";no no dialog"))
		    (XtManageChild yesd)
		    (click-button (XmMessageBoxGetChild yesd XmDIALOG_CANCEL_BUTTON)) (force-event))
		  (set! (with-background-processes) old-val))

		;; ---------------- transform dialog ----------------
		(let* ((transd (list-ref (dialog-widgets) 5))
		       (beta (find-child transd "beta-scale")))
		  ;; push all the buttons
		  (for-each (lambda (name check off2)
			      (let ((button (find-child transd name)))
				(if (and button (Widget? button))
				    (begin
				      (if off2
					  (begin
					    (XmToggleButtonSetState button #f #t)
					    (if (check)
						(snd-display ";toggle ~A off" name))))
				      (XmToggleButtonSetState button #t #t)
				      (if (not (check))
					  (snd-display ";toggle ~A on" name)))
				    (snd-display ";no ~A togglebutton widget in transform dialog?" name))))
			    (list "normo-button" "sono-button" "spectro-button" "normo-button" "peaks-button" "db-button" 
				  "logfreq-button" "normalize-button" "selection-button")
			    (list (lambda () (= (transform-graph-type) graph-once))
				  (lambda () (= (transform-graph-type) graph-as-sonogram))
				  (lambda () (= (transform-graph-type) graph-as-spectrogram))
				  (lambda () (= (transform-graph-type) graph-once))
				  show-transform-peaks
				  fft-log-magnitude
				  fft-log-frequency
				  (lambda () (= (transform-normalization) 1))
				  show-selection-transform)
			    (list #f #f #f #f #t #t
				  #t #t #t))
		  (move-scale beta 32)
		  (if (fneq (fft-window-beta) .32)
		      (snd-display ";moved fft-beta: ~A ~A" (fft-window-beta) (XmScaleGetValue beta)))
		  ;; click all the lists
		  (for-each (lambda (name check)
			      (let ((lst (find-child transd name)))
				(if (and lst (Widget? lst))
				    (check lst)
				    (snd-display ";no ~A list widget in transform dialog?" name))))
			    (list "type-list" "size-list" "wavelet-list" "window-list")
			    (list (lambda (w)
				    (XmListSelectPos w (+ autocorrelation 1) #t)
				    (if (not (= (transform-type) autocorrelation))
					(snd-display ";transform-type autocorrelation: ~A ~A?" (transform-type) autocorrelation))
				    (XmListSelectPos w (+ wavelet-transform 1) #t)
				    (if (not (= (transform-type) wavelet-transform))
					(snd-display ";transform-type wavelet-transform: ~A ~A?" (transform-type) wavelet-transform)))
				  (lambda (w)
				    (XmListSelectPos w 7 #t)
				    (if (not (= (transform-size) 1024))
					(snd-display ";transform-size ~A ~A" (transform-size) 1024))
				    (XmListSelectPos w 2 #t)
				    (if (not (= (transform-size) 32))
					(snd-display ";transform-size ~A ~A" (transform-size) 32)))
				  (lambda (w)
				    (XmListSelectPos w 4 #t)
				    (if (not (= (wavelet-type) 3))
					(snd-display ";wavelet-type: ~A" (wavelet-type))))
				  (lambda (w)
				    (XmListSelectPos w (+ bartlett-window 1) #t)
				    (if (not (= (fft-window) bartlett-window))
					(snd-display ";fft-window bartlett: ~A ~A" (fft-window) bartlett-window))
				    (XmListSelectPos w (+ kaiser-window 1) #t)
				    (if (not (= (fft-window) kaiser-window))
					(snd-display ";fft-window kaiser: ~A ~A" (fft-window) kaiser-window)))))
		  (click-button (XmMessageBoxGetChild transd XmDIALOG_OK_BUTTON)) (force-event)
		  (if (XtIsManaged transd)
		      (snd-display ";why is transform dialog active?")))

		;; ---------------- file:open dialog ----------------
                (open-file-dialog)
                (let* ((filed (list-ref (dialog-widgets) 6))
		       (filename (XmFileSelectionBoxGetChild filed XmDIALOG_TEXT))
		       (snd-tab-key #xFF09))
		  (XmTextSetString filename "oboe.sn")
		  (key-event filename snd-tab-key 0) (force-event)
		  (XmUpdateDisplay filename)
		  (if (not (string=? (XmTextGetString filename) "oboe.snd")) (snd-display ";<tab>->~A?" (XmTextGetString filename)))
		  (click-button (XmFileSelectionBoxGetChild filed XmDIALOG_OK_BUTTON)) (force-event)
		  (let ((ind (find-sound "oboe.snd")))
		    (if (not (sound? ind))
			(snd-display ";file:open failed?"))
		    (close-sound ind)))
                (open-file-dialog)
                (let* ((filed (list-ref (dialog-widgets) 6)))
		  (click-button (XmFileSelectionBoxGetChild filed XmDIALOG_APPLY_BUTTON)) (force-event)
		  (click-button (XmFileSelectionBoxGetChild filed XmDIALOG_CANCEL_BUTTON)) (force-event)
		  (if (XtIsManaged filed)
		      (snd-display ";file:open cancel failed?")))
		(open-file-dialog)
                (let* ((filed (list-ref (dialog-widgets) 6))
		       (sounds (find-child filed "sound files only"))
		       (plays (find-child filed "play selected sound"))
		       (files (XmFileSelectionBoxGetChild filed XmDIALOG_LIST)))
		  (XmToggleButtonSetState sounds #f #t)
		  (XmToggleButtonSetState sounds #t #t)
		  (XmListSelectPos files 1 #t)
		  (XmToggleButtonSetState plays #t #t)
		  (click-button (XmFileSelectionBoxGetChild filed XmDIALOG_OK_BUTTON)) (force-event)
		  (let* ((filename (XmTextGetString (XmFileSelectionBoxGetChild filed XmDIALOG_TEXT)))
			 (ind (find-sound filename)))
		    (if (not (sound? ind))
			(snd-display ";chose: ~A but not active?" filename))
		    (XmToggleButtonSetState plays #f #t)
		    (close-sound ind)
		    (XmFileSelectionDoSearch filed #f)
		    (XmFileSelectionDoSearch filed (XmStringCreateLocalized (string-append home-dir "/cl")))
		    (click-button (XmFileSelectionBoxGetChild filed XmDIALOG_CANCEL_BUTTON)) 
		    (force-event)))
		(open-file-dialog)
                (let* ((filed (list-ref (dialog-widgets) 6))
		       (pattern (XmFileSelectionBoxGetChild filed XmDIALOG_FILTER_TEXT))
		       (sounds (find-child filed "sound files only")))
		  (XmToggleButtonSetState sounds #t #t)
		  (XmToggleButtonSetState sounds #f #t)
		  (XmTextSetString pattern (string-append home-dir "/cl/*.snd"))
		  (XmToggleButtonSetState sounds #t #t)
		  (XmToggleButtonSetState sounds #f #t)
		  (XmTextSetString pattern (string-append home-dir "/cl/*.wav"))
		  (XmToggleButtonSetState sounds #t #t)
		  (click-button (XmFileSelectionBoxGetChild filed XmDIALOG_CANCEL_BUTTON)) (force-event))
                (open-file-dialog)
                (let* ((filed (list-ref (dialog-widgets) 6))
		       (filename (XmFileSelectionBoxGetChild filed XmDIALOG_TEXT))
		       (snd-tab-key #xFF09))
		  (XmTextSetString filename "oboe.sn")
		  (key-event filename snd-tab-key 0) (force-event)
		  (XmUpdateDisplay filename)
		  ;; now the completion help should be active
		  (let ((helper (list-ref (dialog-widgets) 15)))
		    (if (not helper)
			(snd-display ";help completion inactive?")
			(let ((choices (find-child (list-ref (dialog-widgets) 15) "completion-help-text")))
			  (XmListSelectPos choices 2 #f)
			  (click-button (XmMessageBoxGetChild helper XmDIALOG_OK_BUTTON)) (force-event)
			  )))
		  (click-button (XmFileSelectionBoxGetChild filed XmDIALOG_CANCEL_BUTTON)) (force-event))

                ;; ---------------- file save-as dialog ----------------
		(set! (default-output-chans) 1)
		(set! (default-output-format) mus-bshort)
		(set! (default-output-srate) 22050)
		(set! (default-output-type) mus-next)

                (let ((ind (open-sound "oboe.snd")))
		  (if (file-exists? "test.snd") (delete-file "test.snd"))
		  (scale-by 2.0)
		  (file-save-as-dialog)
		  (let* ((saved (list-ref (dialog-widgets) 7))
			 (ok (XmFileSelectionBoxGetChild saved XmDIALOG_OK_BUTTON))
			 (filetext (XmFileSelectionBoxGetChild saved XmDIALOG_TEXT)))
		    (XmTextSetString filetext "test.snd")
		    (click-button ok) (force-event)
		    (if (not (file-exists? "test.snd"))
			(snd-display ";file test.snd not saved?"))
		    (if (XtIsManaged saved)
			(snd-display ";after save, file dialog still active?"))
		    (let ((ind1 (open-sound "test.snd")))
		      (if (not (= (header-type ind1) (header-type ind))) 
			  (snd-display ";save-as changed header type? ~A" (mus-header-type-name (header-type ind1))))
		      (if (not (= (data-format ind1) (data-format ind))) 
			  (snd-display ";save-as changed data format? ~A" (mus-data-format-name (data-format ind1))))
		      (if (not (= (chans ind1) (chans ind))) 
			  (snd-display ";save-as changed channels? ~A" (chans ind1)))
		      (if (not (= (srate ind1) (srate ind))) 
			  (snd-display ";save-as changed srate? ~A" (srate ind1)))
		      (if (not (= (frames ind) (frames ind1)))
			  (snd-display ";save-as changed length? ~A" (frames ind1)))
		      (let* ((r1 (make-sample-reader 0 ind1 0))
			     (ok (scan-channel (lambda (x)
						 (let ((val (next-sample r1)))
						   (if (fneq val x)
						       (list x val)
						       #f)))
					       0 (1- (frames ind)) ind 0)))
			(if ok
			    (snd-display ";save-as diff: ~A" ok))
			(free-sample-reader r1))
		      (close-sound ind1)))
		  (if (file-exists? "test.snd") (delete-file "test.snd"))
		  (file-save-as-dialog)
		  (let* ((saved (list-ref (dialog-widgets) 7))
			 (types (find-child saved "header type")) ; list
			 (formats (find-child saved "data format")) ; list
			 (srtxt (find-child saved "srate-text")) 
			 (comtxt (find-child saved "comment-text"))
			 (cancel (XmFileSelectionBoxGetChild saved XmDIALOG_CANCEL_BUTTON))
			 (ok (XmFileSelectionBoxGetChild saved XmDIALOG_OK_BUTTON))
			 (filter (XmFileSelectionBoxGetChild saved XmDIALOG_APPLY_BUTTON))
			 (filetext (XmFileSelectionBoxGetChild saved XmDIALOG_TEXT)))
		    (do ((i 1 (1+ i)))
			((= i 7))
		      (XmListSelectPos types i #t))
		    (XmListSelectPos types 2 #t)
		    (XmListSelectPos formats 2 #t)
		    (XmTextSetString filetext "test.snd")
		    (XmTextSetString srtxt "(* 2 22050)")
		    (XmTextSetString comtxt "This is a test of the file save-as dialog")
		    (click-button ok) (force-event)
		    (if (not (file-exists? "test.snd"))
			(snd-display ";file 2 test.snd not saved?"))
		    (if (XtIsManaged saved)
			(snd-display ";after save, file dialog still active?"))
		    (let ((ind1 (open-sound "test.snd")))
		      (if (not (= (header-type ind1) mus-aifc))
			  (snd-display ";save-as aifc header type? ~A" (mus-header-type-name (header-type ind1))))
		      (if (not (= (data-format ind1) mus-mulaw))
			  (snd-display ";save-as mulaw data format? ~A" (mus-data-format-name (data-format ind1))))
		      (if (not (= (srate ind1) 44100))
			  (snd-display ";save-as 44100 srate? ~A" (srate ind1)))
		      (if (or (not (string? (comment ind1)))
			      (not (string=? (comment ind1) "This is a test of the file save-as dialog")))
			  (snd-display ";save-as comment: ~A" (comment ind1)))
		      (let* ((r1 (make-sample-reader 0 ind1 0))
			     (ok (scan-channel (lambda (x)
						 (let ((val (next-sample r1)))
						   (if (> (abs (- val x)) .01) ; mulaw not very close sometimes
						       (list x val)
						       #f)))
					       0 (1- (frames ind)) ind 0)))
			(if ok
			    (snd-display ";save-as 2 diff: ~A" ok))
			(free-sample-reader r1))
		      (close-sound ind1)))
		  (if (file-exists? "test.snd") (delete-file "test.snd"))
		  (file-save-as-dialog)
		  (let* ((saved (list-ref (dialog-widgets) 7))
			 (filetext (XmFileSelectionBoxGetChild saved XmDIALOG_TEXT))
			 (cancel (XmFileSelectionBoxGetChild saved XmDIALOG_CANCEL_BUTTON))
			 (filter (XmFileSelectionBoxGetChild saved XmDIALOG_APPLY_BUTTON)))
		    (click-button filter) (force-event)
		    (if (string=? (XmTextGetString filetext) "test.snd")
			(snd-display ";save-as filter: ~A?" (XmTextGetString filetext)))
		    (click-button cancel) (force-event)
		    (if (XtIsManaged saved)
			(snd-display ";after cancel, file dialog still active?"))
		    (if (file-exists? "test.snd")
			(snd-display ";cancelled save-as wrote a file?")))
		  (close-sound ind))

                ;; ---------------- edit save-as dialog ----------------
                (let ((ind (open-sound "oboe.snd")))
		  (if (file-exists? "test.snd") (delete-file "test.snd"))
		  (make-selection 2000 3000 ind 0)
		  (scale-selection-by 2.0)
		  (edit-save-as-dialog)
		  (let* ((saved (list-ref (dialog-widgets) 7))
			 (ok (XmFileSelectionBoxGetChild saved XmDIALOG_OK_BUTTON))
			 (filetext (XmFileSelectionBoxGetChild saved XmDIALOG_TEXT))
			 (types (find-child saved "header type")) ; list
			 (formats (find-child saved "data format"))) ; list
		    (XmListSelectPos types 1 #t)
		    (XmListSelectPos formats 1 #t)
		    (XmTextSetString filetext "test.snd")
		    (click-button ok) (force-event)
		    (if (not (file-exists? "test.snd"))
			(snd-display ";edit test.snd not saved?"))
		    (if (XtIsManaged saved)
			(snd-display ";after save, edit dialog still active?"))
		    (let ((ind1 (open-sound "test.snd")))
		      (let* ((r1 (make-sample-reader 2000 ind 0))
			     (ok (scan-channel (lambda (x)
						 (let ((val (next-sample r1)))
						   (if (fneq val x)
						       (list x val)
						       #f)))
					       0 (1- (frames ind1)) ind1 0)))
			(if ok
			    (snd-display ";edit save-as diff: ~A" ok))
			(free-sample-reader r1))
		      (close-sound ind1)))
		  (if (file-exists? "test.snd") (delete-file "test.snd"))
		  (edit-save-as-dialog)
		  (let* ((saved (list-ref (dialog-widgets) 7))
			 (filetext (XmFileSelectionBoxGetChild saved XmDIALOG_TEXT))
			 (cancel (XmFileSelectionBoxGetChild saved XmDIALOG_CANCEL_BUTTON))
			 (filter (XmFileSelectionBoxGetChild saved XmDIALOG_APPLY_BUTTON)))
		    (click-button cancel) (force-event)
		    (if (XtIsManaged saved)
			(snd-display ";after cancel, edit save-as dialog still active?"))
		    (if (file-exists? "test.snd")
			(snd-display ";cancelled edit save-as wrote a file?")))
		  (close-sound ind))

		(let* ((gotin #f)
		       (gotout #f)
		       (listener (list-ref (main-widgets) 4))
		       (mlist (XtParent listener)))
		  (add-hook! mouse-enter-listener-hook (lambda (w) (set! gotin #t)))
		  (add-hook! mouse-leave-listener-hook (lambda (w) (set! gotout #t)))
		  (enter-event mlist) (force-event)
		  (leave-event mlist) (force-event)
		  (if (not gotin) (snd-display ";no listener enter?"))
		  (if (not gotout) (snd-display ";no listener leave?"))
		  (reset-hook! mouse-enter-listener-hook)
		  (reset-hook! mouse-leave-listener-hook))
			     

		;; ---------------- view files dialog ----------------
		(if (not (defined? 'files-popup-info))
		    (load "nb.scm"))
		(if (hook-empty? mouse-enter-label-hook)
		    (begin
		      (add-hook! mouse-enter-label-hook files-popup-info)
		      (add-hook! mouse-leave-label-hook files-popup-quit)))
		(let ((ind1 (open-sound "oboe.snd"))
		      (ind2 (open-sound "pistol.snd")))
		  (file-dialog)
		  (let ((ind (open-sound "2.snd")))
		    (close-sound ind))
		  (let* ((filed (list-ref (dialog-widgets) 8))
			 (curform (find-child filed "curform"))
			 (prevform (find-child filed "prevform"))
			 (sort-menu (find-child prevform "sort"))
			 (option-holder (cadr (XtGetValues sort-menu (list XmNsubMenuId 0))))
			 (rw1 (find-child prevform "rw"))
			 (sv1 (find-child rw1 "sv"))
			 (pl1 (find-child rw1 "pl"))
			 (nm1 (find-child rw1 "nm"))
			 (name (cadr (XmStringGetLtoR (cadr (XtVaGetValues nm1 (list XmNlabelString 0))) "bold_button_font")))
			 (rw2 (find-child curform "rw"))
			 (sv2 (find-child rw2 "sv"))
			 (pl2 (find-child rw2 "pl"))
			 (nm2 (find-child rw2 "nm")))
		    ;(add-hook! mouse-enter-label-hook (lambda (a b c) (snd-display ";~A ~A ~A" a b c)))
		    (enter-event nm1) (force-event)
		    (leave-event nm1) (force-event)
		    (enter-event nm2) (force-event)
		    (leave-event nm2) (force-event)
		    (click-button pl1) (force-event)
		    (click-button pl2) (force-event)
		    (click-button sv1) (force-event)
		    (if (not (hook-empty? initial-graph-hook))
			(begin
			  (catch #t
				 (lambda ()
				   (XmToggleButtonSetState pl1 #t #t)
				   (XmToggleButtonSetState pl1 #f #t)
				   (click-button nm1)
				   (if (or (= (length (sounds)) 0)
					   (not (string=? (short-file-name (car (sounds))) name)))
				       (snd-display ";click previous: ~A ~A" name (map short-file-name (sounds))))
				   (XmToggleButtonSetState sv2 #t #t)		  
				   (XmToggleButtonSetState pl2 #t #t)
				   (XmToggleButtonSetState sv2 #f #t)
				   (XmToggleButtonSetState pl2 #f #t))
				 (lambda args args))
			  (enter-event nm1) (force-event)
			  (set! name (cadr (XmStringGetLtoR (cadr (XtVaGetValues nm2 (list XmNlabelString 0))) "bold_button_font")))
			  (close-sound (car (sounds)))
			  (XmToggleButtonSetState sv1 #t #t)
			  (for-each-child option-holder
					  (lambda (w)
					    (if (XmIsPushButton w)
						(begin
						  (click-button w #t)
						  (force-event)))))
			  (let ((update (find-child filed "Update")))
			    (click-button update) (force-event))))
		    (let ((name (find-child option-holder "name"))
			  (date (find-child option-holder "date"))
			  (size (find-child option-holder "size"))
			  (entry (find-child option-holder "entry"))
			  (proc (find-child option-holder "proc")))
		      (XtCallCallbacks date XmNactivateCallback (snd-global-state))
		      (XtCallCallbacks size XmNactivateCallback (snd-global-state))
		      (XtCallCallbacks entry XmNactivateCallback (snd-global-state))
		      (if (XtIsSensitive proc) (XtCallCallbacks entry XmNactivateCallback (snd-global-state)))
		      (XtCallCallbacks name XmNactivateCallback (snd-global-state)))
		    (click-button (XmMessageBoxGetChild filed XmDIALOG_CANCEL_BUTTON)) (force-event)     ;clear
		    (set! name (cadr (XmStringGetLtoR (cadr (XtVaGetValues nm2 (list XmNlabelString 0))) "bold_button_font")))
		    (click-button (XmMessageBoxGetChild filed XmDIALOG_OK_BUTTON)) (force-event)
		    (reset-hook! mouse-enter-label-hook)
		    (reset-hook! mouse-leave-label-hook)
		    (if (XtIsManaged filed)
			(snd-display ";why is view files active?")))
		  (close-sound ind1)
		  (close-sound ind2))

		;; ---------------- raw data dialog ----------------
                (let ((old-val (with-background-processes)))
		  (set! (with-background-processes) 1234)
		  (let ((rf (open-sound (string-append sf-dir "addf8.nh"))))
		    (if (not (sound? rf))
			(snd-display ";raw-data file: ~A" rf)
			(close-sound rf))
		    (if (not (list-ref (dialog-widgets) 9))
			(snd-display ";raw-data open: ~A" (list-ref (dialog-widgets) 9))
			(let ((rd (list-ref (dialog-widgets) 9)))
			  (click-button (XmMessageBoxGetChild rd XmDIALOG_CANCEL_BUTTON)) (force-event))))
		  (reset-hook! bad-header-hook)
		  (if (file-exists? (string-append home-dir "/sf1/bogus.snd"))
		      (let ((ind (open-sound (string-append home-dir "/sf1/bogus.snd"))))
			(let ((rd (list-ref (dialog-widgets) 9)))
			  (if (XtIsManaged rd)
			      (begin
				(click-button (XmMessageBoxGetChild rd XmDIALOG_HELP_BUTTON)) (force-event)
				(click-button (XmMessageBoxGetChild rd XmDIALOG_CANCEL_BUTTON)) (force-event))))))
		  (set! (with-background-processes) old-val))
		(add-hook! bad-header-hook (lambda (n) #t))

		;; ---------------- file:new dialog ----------------
		(if (defined? 'new-file-dialog)
		    (begin
		      (reset-hook! output-name-hook)
		      (add-hook! output-name-hook (lambda () "hiho.snd"))
		      (let ((old-val (with-background-processes)))
			(set! (with-background-processes) 1234)
			(let ((newind (new-file-dialog)))
			  (if (not (sound? newind)) 
			      (snd-display ";new file dialog: ~A" newind)
			      (begin
				(if (not (string=? (short-file-name newind) "hiho.snd"))
				    (snd-display ";output-name-hook: ~A" (short-file-name newind)))
				(close-sound newind))))
			(reset-hook! output-name-hook)
			(set! (with-background-processes) old-val))))

		;; ---------------- file:mix dialog ----------------
                (if (list-ref (dialog-widgets) 11)
		    (let* ((mixd (list-ref (dialog-widgets) 11))
			   (filename (XmFileSelectionBoxGetChild mixd XmDIALOG_TEXT))
			   (ind (new-sound "test.snd" mus-next mus-bshort 22050 1 "mixing"))
			   (ind1 (open-sound "oboe.snd")))
		      (XtManageChild mixd)
		      (set! (cursor ind) 0)
		      (XmTextSetString filename "oboe.snd")
		      (click-button (XmFileSelectionBoxGetChild mixd XmDIALOG_OK_BUTTON)) (force-event)
		      (let* ((r1 (make-sample-reader 0 ind1 0))
			     (ok (scan-channel (lambda (x)
						 (let ((val (next-sample r1)))
						   (if (fneq val x)
						       (list x val)
						       #f)))
					       0 (1- (frames ind)) ind 0)))
			(if ok
			    (snd-display ";mix diff: ~A" ok))
			(free-sample-reader r1))
		      (close-sound ind1)
		      (XtManageChild mixd)
		      (click-button (XmFileSelectionBoxGetChild mixd XmDIALOG_CANCEL_BUTTON)) (force-event)
		      (if (XtIsManaged mixd)
			  (snd-display ";mix file dialog still active?"))
		      (close-sound ind))
		    (snd-display ";no mix file dialog?"))


		;; ---------------- edit header dialog ----------------
                (let ((ind (open-sound "oboe.snd")))
		  (define (type->pos type)
		    (if (= type mus-next) 1
			(if (= type mus-aifc) 2
			    (if (= type mus-riff) 3
				(if (= type mus-raw) 4
				    (if (= type mus-aiff) 5
					(if (= type mus-ircam) 6
					    7)))))))

		  (define (format->pos type format)
		    (let ((next-formats (list mus-bshort mus-mulaw mus-byte mus-bfloat mus-bint mus-alaw mus-b24int mus-bdouble))
			  (ircam-formats (list mus-bshort mus-mulaw mus-bfloat mus-bint mus-alaw))
			  (wave-formats (list mus-mulaw mus-alaw mus-ubyte mus-lshort mus-lint mus-lfloat mus-ldouble mus-l24int))
			  (aifc-formats (list mus-bshort mus-mulaw mus-byte mus-bint mus-alaw mus-b24int 
					      mus-bfloat mus-bdouble mus-ubyte mus-lshort mus-lint mus-l24int mus-ubshort))
			  (aiff-formats (list mus-bshort mus-bint mus-byte mus-b24int))
			  (nist-formats (list mus-bshort mus-lshort mus-bint mus-lint mus-byte mus-b24int mus-l24int))
			  (raw-formats (list mus-bshort mus-mulaw mus-byte mus-bfloat mus-bint mus-alaw mus-ubyte mus-b24int 
					     mus-bdouble mus-lshort mus-lint mus-lfloat mus-ldouble mus-ubshort mus-ulshort
					     mus-l24int mus-bintn mus-lintn)))
		      (define (position val lst pos)
			(call-with-current-continuation
			 (lambda (return)
			   (if (null? lst)
			       #f
			       (if (= val (car lst))
				   (return pos)
				   (position val (cdr lst) (1+ pos)))))))
		      (if (= type mus-next) (position format next-formats 1)
			  (if (= type mus-aifc) (position format aifc-formats 1)
			      (if (= type mus-riff) (position format wave-formats 1)
				  (if (= type mus-raw) (position format raw-formats 1)
				      (if (= type mus-aiff) (position format aiff-formats 1)
					  (if (= type mus-ircam) (position format ircam-formats 1)
					      (position format nist-formats 1)))))))))

		  (if (file-exists? "fmv.snd") (delete-file "fmv.snd"))
		  (save-sound-as "fmv.snd" ind)
		  (close-sound ind)
		  (set! ind (open-sound "fmv.snd"))
		  (edit-header-dialog)
		  (let* ((editd (list-ref (dialog-widgets) 12))
			 ;; cancel ok=save 
			 (types (find-child editd "header type")) ; list
			 (formats (find-child editd "data format")) ; list
			 (srtxt (find-child editd "srate-text")) 
			 (chtxt (find-child editd "chans-text"))
			 (loctxt (find-child editd "location-text"))
			 (comtxt (find-child editd "comment-text")))

		    (XmTextSetString loctxt "44")
		    (click-button (XmMessageBoxGetChild editd XmDIALOG_OK_BUTTON)) (force-event)
		    (set! ind (find-sound "fmv.snd"))
		    (if (not (= (data-location ind) 44))
			(snd-display ";edit header data location: ~A" (data-location ind)))
		    (edit-header-dialog)
		    
		    (do ((i 0 (1+ i)))
			((= i 7))
		      (XmListSelectPos types i #t))

		    (XmListSelectPos types (type->pos mus-riff) #t)
		    (XmListSelectPos formats (format->pos mus-riff mus-lfloat) #t)
		    (XmTextSetString srtxt "8")
		    (key-event srtxt snd-tab-key 0) (force-event)
		    (XmUpdateDisplay srtxt)
		    (XmTextSetString loctxt "44")
		    (XmTextSetString comtxt "saved from edit-header dialog")
		    (click-button (XmMessageBoxGetChild editd XmDIALOG_OK_BUTTON)) (force-event)
		    (set! ind (find-sound "fmv.snd"))
		    (if (not (= (header-type ind) mus-riff))
			(snd-display ";edit-header -> riff? ~A" (mus-header-type-name (header-type ind))))
		    (if (not (= (data-format ind) mus-lfloat))
			  (snd-display ";edit-header -> lfloat? ~A" (mus-data-format-name (data-format ind))))
		    (if (not (= (srate ind) 8000))
			(snd-display ";edit-header -> 8000? ~A" (srate ind)))
		    (if (or (not (string? (comment ind)))
			    (not (string=? (comment ind) "saved from edit-header dialog")))
			(snd-display ";edit header comment: ~A" (comment ind)))
		    (if (XtIsManaged editd)
			(snd-display ";why is edit header dialog active?"))
		    (close-sound ind)
		    (set! ind (open-sound "4.aiff"))
		    (let ((old-data (channel->vct 250000 500 ind 1))
			  (old-silence (channel->vct 103000 500 ind 1))
			  (old-length (mus-sound-duration "4.aiff")))
		      (close-sound ind)
		      (system "cp -f 4.aiff test.aiff")
		      (set! ind (open-sound "test.aiff"))
		      (if (not (sound? ind)) (snd-display ";cp -> test.aiff: ~A" ind))
		      (for-each
		       (lambda (typ frm chns sr com backout nominal-length)
			 (edit-header-dialog)
			 (if (not (XtIsManaged editd))
			     (snd-display ";why isn't the edit header dialog active?"))
			 (XmListSelectPos types (type->pos typ) #t)
			 (XmListSelectPos formats (format->pos typ frm) #t)
			 (click-button (XmMessageBoxGetChild editd XmDIALOG_OK_BUTTON)) (force-event)
			 (set! ind (find-sound "test.aiff"))
			 (if (not (= (header-type ind) typ))
			     (snd-display ";ledit-header type -> ~A ~A" typ (mus-header-type-name (header-type ind))))
			 (edit-header-dialog)
			 (XmTextSetString srtxt (number->string sr))
			 (click-button (XmMessageBoxGetChild editd XmDIALOG_OK_BUTTON)) (force-event)
			 (set! ind (find-sound "test.aiff"))
			 (if (not (= (data-format ind) frm))
			     (snd-display ";ledit-header format -> ~A ~A (~A ~A) [~A]" 
					  frm (data-format ind) 
					  (mus-data-format-name (data-format ind))
					  (mus-data-format-name frm)
					  (mus-header-type-name typ)))
			 (if (not (= (srate ind) sr))
			     (snd-display ";ledit-header srate -> ~A ~A" sr (srate ind)))
			 (edit-header-dialog)
			 (if com (XmTextSetString comtxt com))
			 (XmTextSetString chtxt (number->string chns))
			 (click-button (XmMessageBoxGetChild editd XmDIALOG_OK_BUTTON)) (force-event)
			 (set! ind (find-sound "test.aiff"))
			 (if com
			     (if (or (not (string? (comment ind)))
				     (not (string=? (comment ind) com)))
				 (snd-display ";edit header comment ~A: ~A" com (comment ind))))
			 (if (not (= (chans ind) chns))
			     (snd-display ";ledit-header chans -> ~A ~A" chns (chans ind)))
			 (if (and nominal-length
				  (fneq (mus-sound-duration "test.aiff") nominal-length))
			     (snd-display ";ledit-header duration: nominal: ~A, current: ~A [~A ~A ~A ~A]" 
					  nominal-length (mus-sound-duration "test.aiff") 
					  (mus-header-type-name typ) 
					  (mus-data-format-name frm)
					  sr chns))
			 (if backout
			     (let ((new-data (channel->vct 250000 500 ind 1))
				   (new-silence (channel->vct 103000 500 ind 1)))
			       (if (not (vequal new-data old-data))
				   (snd-display ";backout data diffs: ~A ~A ~A"
						(let ((sum 0.0)
						      (sub-data (vct-copy new-data)))
						  (vct-subtract! sub-data old-data)
						  (do ((i 0 (1+ i)))
						      ((= i 500))
						    (set! sum (+ sum (abs (vct-ref sub-data i)))))
						  sum)
						old-data new-data))
			       (if (not (vequal new-silence old-silence))
				   (snd-display ";backout silence diffs: ~A ~A ~A"
						(let ((sum 0.0)
						      (sub-silence (vct-copy new-silence)))
						  (vct-subtract! sub-silence old-silence)
						  (do ((i 0 (1+ i)))
						      ((= i 500))
						    (set! sum (+ sum (abs (vct-ref sub-silence i)))))
						  sum)
						old-silence new-silence)))))
		       (list mus-aiff mus-aifc mus-next mus-aifc mus-riff 
			     mus-next mus-next mus-aiff mus-aifc
			     mus-nist mus-ircam mus-aifc mus-aifc)
		       (list mus-bshort mus-bshort mus-bshort mus-bshort mus-lfloat 
			     mus-bshort mus-bfloat mus-bshort mus-bshort
			     mus-lint mus-alaw mus-bshort mus-bint)
		       (list 2 4 2 4 4 
			     2 2 2 4
			     2 4 4 4)
		       (list 22050 22050 44100 22050 22050 
			     22050 22050 22050 22050
			     44100 8000 44100 22050)
		       (list #f #f "this is a comment" "this is another comment" "riff time" 
			     "next time" #f "aiff time" "aifc time"
			     #f "ircam time" "aifc time" #f)
		       (list #f #t #f #t #f 
			     #f #f #f #t
			     #f #f #t #f)
		       (list (* 2 old-length) old-length old-length old-length (* 0.5 old-length) 
			     (* 2 old-length) old-length (* 2 old-length) old-length
			     #f #f (* 0.5 old-length) (* 0.5 old-length))))
		    (close-sound ind)
		    (click-button (XmMessageBoxGetChild editd XmDIALOG_CANCEL_BUTTON)) (force-event)))
		(if (file-exists? "test.aiff") (delete-file "test.aiff"))

		;; ---------------- edit:find dialog ----------------
		(if (defined? 'edit-find-dialog)
		    (begin
		      (edit-find-dialog)
		      (let* ((findd (list-ref (dialog-widgets) 13))
			     (ind (open-sound "oboe.snd"))
			     ;; ok = dismiss cancel = previous next = next
			     (dismiss (XmMessageBoxGetChild findd XmDIALOG_OK_BUTTON))
			     (previous (XmMessageBoxGetChild findd XmDIALOG_CANCEL_BUTTON))
			     (next (find-child findd "Next"))
			     (txt (find-child findd "text")))
			(XmTextSetString txt "(lambda (n-find-dialog) (> n-find-dialog .1))")
			(click-button next) (force-event)
			(if (not (> (sample (cursor)) .1))
			    (snd-display ";sample at cursor upon edit find > .1: ~A (~A)" (sample (cursor)) (cursor)))
			(click-button next) (force-event)
			(click-button previous) (force-event)
			(click-button dismiss) (force-event)
			(close-sound ind)
			(if (XtIsManaged findd)
			    (snd-display ";edit find is still active?")))))

                ;; ---------------- help dialog ----------------
	        (help-dialog "Test" "snd-test here")
                (let* ((helpd (list-ref (dialog-widgets) 14)))
		  (click-button (XmMessageBoxGetChild helpd XmDIALOG_OK_BUTTON)) (force-event)
		  (if (XtIsManaged helpd)
		      (snd-display ";help still active?")))

		;; ---------------- mix-panel dialog ----------------
		(let* ((ind (open-sound "oboe.snd"))
		       (v (make-vct 3))
		       (s1001 (sample 1001))
		       (s2001 (sample 2001)))
		  (vct-fill! v .1)
		  (let* ((id1 (mix-vct v 1000 ind 0 #t))
			 (id2 (mix-vct v 2000 ind 0 #t)))
		    (mix-panel)
		    (let* ((mixd (list-ref (dialog-widgets) 16))
			   (idtxt (find-child mixd "mix-id"))
			   (nametxt (find-child mixd "mix-name"))
			   (begtxt (find-child mixd "mix-times"))
			   (trktxt (find-child mixd "mix-track"))
			   (playb (find-child mixd "play"))
			   (spdscr (find-child mixd "speed"))
			   (ampscr (find-child mixd "amp"))
			   (ampenv (find-child mixd "amp-env-window")))
		      (if (fneq (sample 1001) (+ s1001 .1)) 
			  (snd-display ";mix-panel at 1001: ~A (~A)?" (sample 1001) s1001))
		      (if (fneq (sample 2001) (+ s2001 .1)) 
			  (snd-display ";mix-panel at 2001: ~A (~A)?" (sample 2001) s2001))
		      (select-mix id1)
		      (if (not (string=? (XmTextGetString trktxt) "0"))
			  (snd-display ";mix initial track: ~A" (XmTextGetString trktxt)))
		      (if (not (string=? (XmTextGetString idtxt) (number->string id1)))
			  (snd-display ";mix initial id: ~A" (XmTextGetString idtxt)))
		      (move-scroll ampscr 20)
		      (if (not (> (sample 1001) (+ s1001 .1)))
			  (snd-display ";amp mix-panel at 1001: ~A (~A)?" (sample 1001) s1001))
		      (if (fneq (sample 2001) (+ s2001 .1)) 
			  (snd-display ";amp mix-panel at 2001: ~A (~A)?" (sample 2001) s2001))
		      (click-button playb)
		      (move-scroll spdscr 20)
		      (for-each
		       (lambda (scrl)
			 (XtCallCallbacks scrl XmNdragCallback
					   (let ((cb (XmScrollBarCallbackStruct)))
					     (set! (.value cb) 50)
					     (set! (.event cb) (XEvent))
					     cb)))
		       (list spdscr ampscr))
		      (for-each
		       (lambda (n)
			 (click-button n #t 0)
			 (click-button n #t ControlMask))
		       (map
			(lambda (w) (find-child mixd w))
			(list "speed-label" "amp-label")))
		      (if (XmDrawingArea? ampenv)
			  (let* ((xy (widget-size ampenv))
				 (x0 (inexact->exact (/ (car xy) 2)))
				 (y0 (inexact->exact (/ (cadr xy) 2))))
			    (click-event ampenv 1 0 x0 y0)
			    (drag-event ampenv 1 0 x0 y0 (+ x0 20) (+ y0 20)))
			  (snd-display ";mix-dialog ampenv: ~A" ampenv))
		      (force-event)
		      (let ((edp (edit-position ind)))
			(click-button (XmMessageBoxGetChild mixd XmDIALOG_CANCEL_BUTTON)) (force-event)
			(if (= edp (edit-position ind)) 
			    (snd-display ";apply mix env: ~A" edp)
			    (undo 1 ind 0)))
		      (focus-widget begtxt)
		      (widget-string begtxt "0.5") (force-event)
		      (key-event begtxt snd-return-key 0) (force-event)
		      (if (fneq (/ (mix-position id1) 22050.0) 0.5)
			  (snd-display ";mix panel set id1 (~A) to 0.5: ~A ~A (~X ~A)" 
				       id1 (mix-position id1) (/ (mix-position id1) 22050.0) 
				       (cadr begtxt) (XtName begtxt)))
		      (widget-string trktxt "2") (force-event)
		      (key-event trktxt snd-return-key 0) (force-event)
		      (if (not (= (mix-track id1) 2))
			  (snd-display ";mix panel set track: ~A ~A" id1 (mix-track id1)))
		      (widget-string nametxt "3") (force-event)
		      (key-event nametxt snd-return-key 0) (force-event)
		      (widget-string idtxt "2") (force-event)
		      (key-event idtxt snd-return-key 0) (force-event)
		      (click-button (XmMessageBoxGetChild mixd XmDIALOG_OK_BUTTON)) (force-event)     ;dismiss
		      (if (XtIsManaged mixd)
			  (snd-display ";why is mix-panel dialog alive?"))))
		  (XtCallCallbacks (menu-option "Mix Panel") XmNactivateCallback (snd-global-state))
		  (let ((mixd (list-ref (dialog-widgets) 16)))
		    (if (not (XtIsManaged mixd))
			(snd-display ";why isn't mix-panel dialog alive?"))
		    (XtUnmanageChild mixd))
		  (close-sound ind))

		;; ---------------- print dialog ----------------
		(let* ((ind (open-sound "oboe.snd"))
		       (print-menu (menu-option "Print")))
		  (XtSetSensitive print-menu #t)
		  (click-button print-menu #t)
		  (let ((printd (list-ref (dialog-widgets) 17)))
		    (if (Widget? printd)
			(begin
			  (if (not (XtIsManaged printd)) (XtManageChild printd))
			  (let ((txt (find-child printd "text")))
			  (XmTextSetString txt "test.eps")
			  (click-button (XmMessageBoxGetChild printd XmDIALOG_OK_BUTTON))
			  (if (not (file-exists? "test.eps"))
			      (snd-display ";print -> test.eps?")
			      (delete-file "test.eps"))
			  (click-button (XmMessageBoxGetChild printd XmDIALOG_CANCEL_BUTTON))
			  (if (XtIsManaged printd)
			      (snd-display ";why is print dialog alive?"))))
		      (snd-display ";no print dialog?"))
		  (close-sound ind)))

		;; ---------------- recorder dialog ----------------
                (let ((old-val (with-background-processes)))
		  (set! (with-background-processes) 1234) ; turns off recorder background process altogether
		  (if (not (list-ref (dialog-widgets) 18))
		      (recorder-dialog))
		  (let* ((recd (list-ref (dialog-widgets) 18))
			 (file-pane (find-child recd "file-pane"))
			 (record (find-child recd "record-button"))
			 ;; cancel -> reset, ok -> dismiss
			 )
		    (if (not (XtIsManaged recd)) (XtManageChild recd))
		    (click-button record) (force-event)
		    (click-button record) (force-event)
		    (click-button (XmMessageBoxGetChild recd XmDIALOG_CANCEL_BUTTON)) (force-event)
		    (click-button (XmMessageBoxGetChild recd XmDIALOG_OK_BUTTON)) (force-event)
		    )
		  (set! (with-background-processes) old-val))

		;; ---------------- region dialog ----------------
		(let ((ind (open-sound "4.aiff")))
		  (do ((i 0 (1+ i)))
		      ((= i 4))
		    (set! (selection-member? ind i) #t)
		    (set! (selection-position ind i) 0)
		    (set! (selection-frames ind i) 100))
		  (let ((id (make-region)))
		    (if (not (= (region-chans id) 4)) (snd-display ";region(dialog) ~A chans ~A" id (region-chans id))))
		  (let ((id (make-region)))
		    (if (not (= (region-chans id) 4)) (snd-display ";region(dialog) ~A chans ~A" id (region-chans id))))
		  (close-sound ind))
                (region-dialog)
                (let* ((regd (list-ref (dialog-widgets) 19))
		       (prtb (find-child regd "print"))
		       (grf (find-child regd "grf"))
		       (downb (find-child grf "down"))
		       (upb (find-child grf "up"))
		       (frm (find-child regd "formw"))
		       (rw1 (find-child frm "rw"))
		       (sv1 (find-child rw1 "sv"))
		       (pl1 (find-child rw1 "pl"))
		       (nm1 (find-child rw1 "nm"))
		       (editb (find-child regd "edit"))
		       (name (cadr (XmStringGetLtoR (cadr (XtVaGetValues nm1 (list XmNlabelString 0))) "bold_button_font"))))
		  (XmToggleButtonSetState pl1 #t #t)
		  (XmToggleButtonSetState pl1 #f #t)
		  (XmToggleButtonSetState sv1 #t #t)
		  (XmToggleButtonSetState sv1 #f #t)
		  (click-button nm1)
		  (click-button (XmMessageBoxGetChild regd XmDIALOG_CANCEL_BUTTON)) (force-event)		  
		  (let ((name1 (cadr (XmStringGetLtoR (cadr (XtVaGetValues nm1 (list XmNlabelString 0))) "bold_button_font"))))
		    (if (string=? name1 name)
			(snd-display ";delete in region dialog: ~A?" name)))
		  (click-button prtb) (force-event)
		  (let* ((reglist (find-child regd "reglist"))
			 (ww (find-child reglist "ww")))
		    (if (not (Widget? ww)) (snd-display ";can't find region dialog region list"))
		    (for-each-child ww 
				    (lambda (w) 
				      (if (XmIsPushButton w)
					  (let ((label (widget-text w)))
					    (if (and (string? label)
						     (> (string-length label) 3))
						(begin
						  (XtCallCallbacks w XmNactivateCallback #f)
						  (if (XtIsSensitive downb)
						      (begin
							(click-button downb #t) (force-event)
							(click-button upb #t) (force-event))))))))))
		  (let ((snds (sounds)))
		   (click-button editb #t) (force-event)
		   (let ((new-snds (sounds)))
		     (if (not (= (length snds) (1- (length new-snds)))) (snd-display ";region edit: ~A -> ~A" snds new-snds))
		     (for-each 
		      (lambda (snd)
			(if (not (member snd snds)) 
			    (begin
			      (save-sound-as "reg.snd" snd)
			      (delete-file "reg.snd")
			      (close-sound snd))))
		      new-snds)))
		  (let ((regs (length (regions))))
		    (do ((i 0 (1+ i)))
			((> i regs))
		      (click-button (XmMessageBoxGetChild regd XmDIALOG_CANCEL_BUTTON)) (force-event))
		    (if (not (null? (regions)))
			(snd-display ";click through regions: ~A" (regions))))
		  (click-button (XmMessageBoxGetChild regd XmDIALOG_OK_BUTTON)) (force-event)		  
		  (if (XtIsManaged regd)
		      (snd-display ";region dialog is still active?")))
		(c-g!)

		(let* ((ind (open-sound "oboe.snd"))
		       (grf (car (channel-widgets ind 0)))
		       (xs (x-bounds))
		       (ax (axis-info ind 0 time-graph))
		       (x0 (list-ref ax 10))
		       (y0 (list-ref ax 11))
		       (x1 (list-ref ax 12))
		       (y1 (list-ref ax 13))
		       (midx (inexact->exact (* 0.5 (+ x0 x1))))
		       (midy (inexact->exact (* 0.5 (+ y0 y1)))))
		  (set! (cursor) 500)
		  (click-event grf 0 4 midx midy) (force-event)
		  (update-time-graph)
		  (let ((new-xs (x-bounds)))
		    (if (> (abs (- (* 2 (- (cadr new-xs) (car new-xs))) (- (cadr xs) (car xs)))) (/ (- (cadr xs) (car xs)) 3))
			(snd-display ";4 xs: ~A -> ~A" xs (x-bounds))))
		  (set! xs (x-bounds))
		  (click-event grf 0 8 midx midy) (force-event)
		  (update-time-graph)
		  (let ((new-xs (x-bounds)))
		    (if (> (abs (- (* 2 (- (cadr new-xs) (car new-xs))) (- (cadr xs) (car xs)))) (/ (- (cadr xs) (car xs)) 3))
			(snd-display ";8 xs: ~A -> ~A" xs (x-bounds))))
		  (set! xs (x-bounds))
		  (click-event grf 0 1 midx midy) (force-event)
		  (update-time-graph)
		  (let ((new-xs (x-bounds)))
		    (if (> (abs (- (* 2 (- (cadr new-xs) (car new-xs))) (- (cadr xs) (car xs)))) (/ (- (cadr xs) (car xs)) 3))
			(snd-display ";1 xs: ~A -> ~A" xs (x-bounds))))
		  (set! xs (x-bounds))
		  (click-event grf 0 5 midx midy) (force-event)
		  (update-time-graph)
		  (let ((new-xs (x-bounds)))
		    (if (> (abs (- (* 4 (- (cadr new-xs) (car new-xs))) (- (cadr xs) (car xs)))) (/ (- (cadr xs) (car xs)) 3))
			(snd-display ";5 xs: ~A -> ~A" xs (x-bounds))))
		  (set! xs (x-bounds))
		  (click-event grf 0 (+ 1 4 8) midx midy) (force-event)
		  (update-time-graph)
		  (let ((new-xs (x-bounds)))
		    (if (> (abs (- (* 8 (- (cadr new-xs) (car new-xs))) (- (cadr xs) (car xs)))) (/ (- (cadr xs) (car xs)) 3))
			(snd-display ";13 xs: ~A -> ~A" xs (x-bounds))))
		  (close-sound ind))

		))))))
    

(set! (optimization) 0)


;;; -------------------- test 25: X/Xt/Xm --------------------

(define (x->snd-color color-name)
  "(x->snd-color color-name) returns a Snd color object corresponding to the X11 color name 'color-name'"
  (let* ((col (XColor))
	 (dpy (XtDisplay (cadr (main-widgets))))
	 (scr (DefaultScreen dpy))
	 (cmap (DefaultColormap dpy scr)))
    (if (= (XAllocNamedColor dpy cmap color-name col col) 0)
        (snd-error (format #f "can't allocate ~A" color-name))
	(make-color (/ (.red col) 65535.0)
		    (/ (.green col) 65535.0)
		    (/ (.blue col) 65535.0)))))

(if (or full-test (= snd-test 25) (and keep-going (<= snd-test 25)))
    (begin
      (if (procedure? test-hook) (test-hook 25))
      (if (and (provided? 'snd-motif) (provided? 'xm) (not (provided? 'gl)))
	  (begin
	    ;; ---------------- X tests ----------------
	    (let ((scr (current-screen))
		  (dpy (XtDisplay (cadr (main-widgets)))))
	      (if (not (= (.height scr) 1200))
		  (snd-display ";screen height: ~A" (.height scr)))
	      (if (not (= (.width scr) 1600))
		  (snd-display ";screen width: ~A" (.width scr)))
	      (let ((ratio (/ (.mwidth scr) (.width scr))))
		(if (> (abs (- (* ratio (.height scr)) (.mheight scr))) 2)
		    (snd-display ";mheight/width: ~A ~A" (.mheight scr) (.mwidth scr))))
	      (if (not (= (.ndepths scr) 7))
		  (snd-display ";screen ndepths: ~A" (.ndepths scr)))
	      (if (not (= (cadr (.white_pixel scr)) 65535))
		  (snd-display ";screen white_pixel: ~A" (.white_pixel scr)))
	      (if (not (= (cadr (.black_pixel scr)) 0))
		  (snd-display ";screen black_pixel: ~A" (.black_pixel scr)))
	      (if (not (eq? (.backing_store scr) #f))
		  (snd-display ";screen backing_store: ~A" (.backing_store scr)))
	      (if (not (= (.min_maps scr) 1))
		  (snd-display ";screen min_maps: ~A" (.min_maps scr)))
	      (if (not (= (.max_maps scr) 1))
		  (snd-display ";screen max_maps: ~A" (.max_maps scr)))
	      (if (not (eq? (.save_unders scr) #f))
		  (snd-display ";screen save_unders: ~A" (.save_unders scr)))
	      (if (not (GC? (.default_gc scr)))
		  (snd-display ";screen default_gc: ~A" (.default_gc scr)))
	      (if (not (Window? (.root scr)))
		  (snd-display ";screen root: ~A" (.root scr)))
	      (if (not (Colormap? (.cmap scr)))
		  (snd-display ";screen colormap: ~A" (.cmap scr)))
	      
	      (if (not (equal? (DisplayOfScreen scr) (.display scr))) 
		  (snd-display ";DisplayOfScreen: ~A ~A" (DisplayOfScreen scr) (.display scr)))
	      (if (not (equal? (RootWindowOfScreen scr) (.root scr))) 
		  (snd-display ";RootWindowOfScreen: ~A ~A" (RootWindowOfScreen scr) (.root scr)))
	      (if (not (equal? (BlackPixelOfScreen scr) (.black_pixel scr))) 
		  (snd-display ";BlackPixelOfScreen: ~A ~A" (BlackPixelOfScreen scr) (.black_pixel scr)))
	      (if (not (equal? (WhitePixelOfScreen scr) (.white_pixel scr))) 
		  (snd-display ";WhitePixelOfScreen: ~A ~A" (WhitePixelOfScreen scr) (.white_pixel scr)))
	      (if (not (equal? (DefaultColormapOfScreen scr) (.cmap scr))) 
		  (snd-display ";DefaultColormapOfScreen: ~A ~A" (DefaultColormapOfScreen scr) (.cmap scr)))
	      (if (not (equal? (DefaultDepthOfScreen scr) (.root_depth scr))) 
		  (snd-display ";DefaultDepthOfScreen: ~A ~A" (DefaultDepthOfScreen scr) (.root_depth scr)))
	      (if (not (equal? (DefaultGCOfScreen scr) (.default_gc scr))) 
		  (snd-display ";DefaultGCOfScreen: ~A ~A" (DefaultGCOfScreen scr) (.default_gc scr)))
	      (if (not (equal? (DefaultVisualOfScreen scr) (.root_visual scr))) 
		  (snd-display ";DefaultVisualOfScreen: ~A ~A" (DefaultVisualOfScreen scr) (.root_visual scr)))
	      (if (not (equal? (WidthOfScreen scr) (.width scr))) 
		  (snd-display ";WidthOfScreen: ~A ~A" (WidthOfScreen scr) (.width scr)))
	      (if (not (equal? (HeightOfScreen scr) (.height scr))) 
		  (snd-display ";HeightOfScreen: ~A ~A" (HeightOfScreen scr) (.height scr)))
	      (if (not (equal? (WidthMMOfScreen scr) (.mwidth scr))) 
		  (snd-display ";WidthMMOfScreen: ~A ~A" (WidthMMOfScreen scr) (.mwidth scr)))
	      (if (not (equal? (HeightMMOfScreen scr) (.mheight scr))) 
		  (snd-display ";HeightMMOfScreen: ~A ~A" (HeightMMOfScreen scr) (.mheight scr)))
	      (if (not (equal? (PlanesOfScreen scr) (.root_depth scr))) 
		  (snd-display ";PlanesOfScreen: ~A ~A" (PlanesOfScreen scr) (.root_depth scr)))
	      (if (not (equal? (MinCmapsOfScreen scr) (.min_maps scr))) 
		  (snd-display ";MinCmapsOfScreen: ~A ~A" (MinCmapsOfScreen scr) (.min_maps scr)))
	      (if (not (equal? (MaxCmapsOfScreen scr) (.max_maps scr))) 
		  (snd-display ";MaxCmapsOfScreen: ~A ~A" (MaxCmapsOfScreen scr) (.max_maps scr)))
	      (if (not (equal? (DoesSaveUnders scr) (.save_unders scr))) 
		  (snd-display ";DoesSaveUnders: ~A ~A" (DoesSaveUnders scr) (.save_unders scr)))
	      (if (not (equal? (DoesBackingStore scr) (.backing_store scr))) 
		  (snd-display ";DoesBackingStore: ~A ~A" (DoesBackingStore scr) (.backing_store scr)))
	      (if (not (equal? (EventMaskOfScreen scr) (.root_input_mask scr))) 
		  (snd-display ";EventMaskOfScreen: ~A ~A" (EventMaskOfScreen scr) (.root_input_mask scr)))

	      (if (not (equal? (XDisplayOfScreen scr) (.display scr))) 
		  (snd-display ";XDisplayOfScreen: ~A ~A" (XDisplayOfScreen scr) (.display scr)))
	      (if (not (equal? (XDisplayOfScreen (XScreenOfDisplay dpy 0)) dpy))
		  (snd-display ";XScreenOfDisplay ~A ~A" (XDisplayOfScreen (XScreenOfDisplay dpy 0)) dpy))
	      (if (not (equal? (XDefaultScreenOfDisplay dpy) scr))
		  (snd-display ";XDefaultScreenOfDisplay ~A ~A" (XDefaultScreenOfDisplay dpy) scr))
	      (if (not (equal? (XRootWindowOfScreen scr) (.root scr))) 
		  (snd-display ";XRootWindowOfScreen: ~A ~A" (XRootWindowOfScreen scr) (.root scr)))
	      (if (not (equal? (XBlackPixelOfScreen scr) (.black_pixel scr))) 
		  (snd-display ";XBlackPixelOfScreen: ~A ~A" (XBlackPixelOfScreen scr) (.black_pixel scr)))
	      (if (not (equal? (XWhitePixelOfScreen scr) (.white_pixel scr))) 
		  (snd-display ";XWhitePixelOfScreen: ~A ~A" (XWhitePixelOfScreen scr) (.white_pixel scr)))
	      (if (not (equal? (XDefaultColormapOfScreen scr) (.cmap scr))) 
		  (snd-display ";XDefaultColormapOfScreen: ~A ~A" (XDefaultColormapOfScreen scr) (.cmap scr)))
	      (if (not (equal? (XDefaultDepthOfScreen scr) (.root_depth scr))) 
		  (snd-display ";XDefaultDepthOfScreen: ~A ~A" (XDefaultDepthOfScreen scr) (.root_depth scr)))
	      (if (not (equal? (XDefaultGCOfScreen scr) (.default_gc scr)))
		  (snd-display ";XDefaultGCOfScreen: ~A ~A" (XDefaultGCOfScreen scr) (.default_gc scr)))
	      (if (not (equal? (XDefaultVisualOfScreen scr) (.root_visual scr)))
		  (snd-display ";XDefaultVisualOfScreen: ~A ~A" (XDefaultVisualOfScreen scr) (.root_visual scr)))
	      (if (not (equal? (XWidthOfScreen scr) (.width scr)))
		  (snd-display ";XWidthOfScreen: ~A ~A" (XWidthOfScreen scr) (.width scr)))
	      (if (not (equal? (XHeightOfScreen scr) (.height scr)))
		  (snd-display ";XHeightOfScreen: ~A ~A" (XHeightOfScreen scr) (.height scr)))
	      (if (not (equal? (XWidthMMOfScreen scr) (.mwidth scr))) 
		  (snd-display ";XWidthMMOfScreen: ~A ~A" (XWidthMMOfScreen scr) (.mwidth scr)))
	      (if (not (equal? (XHeightMMOfScreen scr) (.mheight scr))) 
		  (snd-display ";XHeightMMOfScreen: ~A ~A" (XHeightMMOfScreen scr) (.mheight scr)))
	      (if (not (equal? (XPlanesOfScreen scr) (.root_depth scr))) 
		  (snd-display ";XPlanesOfScreen: ~A ~A" (XPlanesOfScreen scr) (.root_depth scr)))
	      (if (not (equal? (XMinCmapsOfScreen scr) (.min_maps scr)))
		  (snd-display ";XMinCmapsOfScreen: ~A ~A" (XMinCmapsOfScreen scr) (.min_maps scr)))
	      (if (not (equal? (XMaxCmapsOfScreen scr) (.max_maps scr)))
		  (snd-display ";XMaxCmapsOfScreen: ~A ~A" (XMaxCmapsOfScreen scr) (.max_maps scr)))
	      (if (not (equal? (XDoesSaveUnders scr) (.save_unders scr)))
		  (snd-display ";XDoesSaveUnders: ~A ~A" (XDoesSaveUnders scr) (.save_unders scr)))
	      (if (not (equal? (XDoesBackingStore scr) (.backing_store scr))) 
		  (snd-display ";XDoesBackingStore: ~A ~A" (XDoesBackingStore scr) (.backing_store scr)))
	      (if (not (equal? (XEventMaskOfScreen scr) (.root_input_mask scr)))
		  (snd-display ";XEventMaskOfScreen: ~A ~A" (XEventMaskOfScreen scr) (.root_input_mask scr)))
	      )
	    
	    (let* ((scr (current-screen))
		   (scrn (XScreenNumberOfScreen scr))
		   (dpy (XtDisplay (cadr (main-widgets))))
		   (vis (DefaultVisual dpy scrn))
		   (win (XtWindow (cadr (main-widgets)))))

	      (if (not (equal? (RootWindow dpy scrn) (.root scr)))
		  (snd-display ";RootWindow: ~A ~A" (RootWindow dpy scrn) (.root scr)))
	      (if (not (equal? (DefaultRootWindow dpy) (.root (ScreenOfDisplay dpy (DefaultScreen dpy)))))
		  (snd-display ";DefaultRootWindow: ~A ~A" (DefaultRootWindow dpy) (.root (ScreenOfDisplay dpy (DefaultScreen dpy)))))
	      (if (not (equal? (DefaultVisual dpy scrn) (.root_visual scr)))
		  (snd-display ";DefaultVisual: ~A ~A" (DefaultVisual dpy scrn) (.root_visual scr)))
	      (if (not (equal? (DefaultGC dpy scrn) (.default_gc scr)))
		  (snd-display ";DefaultGC: ~A ~A" (DefaultGC dpy scrn) (.default_gc scr)))
	      (if (not (equal? (BlackPixel dpy scrn) (.black_pixel scr)))
		  (snd-display ";BlackPixel: ~A ~A" (BlackPixel dpy scrn) (.black_pixel scr)))
	      (if (not (equal? (WhitePixel dpy scrn) (.white_pixel scr)))
		  (snd-display ";WhitePixel ~A ~A" (WhitePixel dpy scrn) (.white_pixel scr)))
	      (if (not (equal? (DisplayWidth dpy scrn) (.width scr)))
		  (snd-display ";DisplayWidth: ~A ~A" (DisplayWidth dpy scrn) (.width scr)))
	      (if (not (equal? (DisplayHeight dpy scrn) (.height scr)))
		  (snd-display ";DisplayHeight: ~A ~A" (DisplayHeight dpy scrn) (.height scr)))
	      (if (not (equal? (DisplayWidthMM dpy scrn) (.mwidth scr)))
		  (snd-display ";DisplayWidthMM: ~A ~A" (DisplayWidthMM dpy scrn) (.mwidth scr)))
	      (if (not (equal? (DisplayHeightMM dpy scrn) (.mheight scr)))
		  (snd-display ";DisplayHeightMM: ~A ~A" (DisplayHeightMM dpy scrn) (.mheight scr)))
	      (if (not (equal? (DisplayPlanes dpy scrn) (.root_depth scr)))
		  (snd-display ";DisplayPlanes: ~A ~A" (DisplayPlanes dpy scrn) (.root_depth scr)))
	      (if (not (equal? (DefaultDepth dpy scrn) (.root_depth scr)))
		  (snd-display ";DefaultDepth: ~A ~A" (DefaultDepth dpy scrn) (.root_depth scr)))
	      (if (not (equal? (DefaultColormap dpy scrn) (.cmap scr)))
		  (snd-display ";DefaultColormap: ~A ~A" (DefaultColormap dpy scrn) (.cmap scr)))
	      
	      (if (not (equal? (XRootWindow dpy scrn) (.root scr)))
		  (snd-display ";XRootWindow: ~A ~A" (XRootWindow dpy scrn) (.root scr)))
	      (if (not (equal? (XDefaultRootWindow dpy) (.root (ScreenOfDisplay dpy (DefaultScreen dpy)))))
		  (snd-display ";XDefaultRootWindow: ~A ~A" (XDefaultRootWindow dpy) (.root (ScreenOfDisplay dpy (DefaultScreen dpy)))))
	      (if (not (equal? (XDefaultVisual dpy scrn) (.root_visual scr)))
		  (snd-display ";XDefaultVisual: ~A ~A" (XDefaultVisual dpy scrn) (.root_visual scr)))
	      (if (not (equal? (XDefaultGC dpy scrn) (.default_gc scr)))
		  (snd-display ";XDefaultGC: ~A ~A" (XDefaultGC dpy scrn) (.default_gc scr)))
	      (if (not (equal? (XBlackPixel dpy scrn) (.black_pixel scr)))
		  (snd-display ";XBlackPixel: ~A ~A" (XBlackPixel dpy scrn) (.black_pixel scr)))
	      (if (not (equal? (XWhitePixel dpy scrn) (.white_pixel scr)))
		  (snd-display ";XWhitePixel ~A ~A" (XWhitePixel dpy scrn) (.white_pixel scr)))
	      (if (not (equal? (XDisplayWidth dpy scrn) (.width scr)))
		  (snd-display ";XDisplayWidth: ~A ~A" (XDisplayWidth dpy scrn) (.width scr)))
	      (if (not (equal? (XDisplayHeight dpy scrn) (.height scr)))
		  (snd-display ";XDisplayHeight: ~A ~A" (XDisplayHeight dpy scrn) (.height scr)))
	      (if (not (equal? (XDisplayWidthMM dpy scrn) (.mwidth scr)))
		  (snd-display ";XDisplayWidthMM: ~A ~A" (XDisplayWidthMM dpy scrn) (.mwidth scr)))
	      (if (not (equal? (XDisplayHeightMM dpy scrn) (.mheight scr)))
		  (snd-display ";XDisplayHeightMM: ~A ~A" (XDisplayHeightMM dpy scrn) (.mheight scr)))
	      (if (not (equal? (XDisplayPlanes dpy scrn) (.root_depth scr)))
		  (snd-display ";XDisplayPlanes: ~A ~A" (XDisplayPlanes dpy scrn) (.root_depth scr)))
	      (if (not (equal? (XDefaultDepth dpy scrn) (.root_depth scr)))
		  (snd-display ";XDefaultDepth: ~A ~A" (XDefaultDepth dpy scrn) (.root_depth scr)))
	      (if (not (equal? (XDefaultColormap dpy scrn) (.cmap scr)))
		  (snd-display ";XDefaultColormap: ~A ~A" (XDefaultColormap dpy scrn) (.cmap scr)))
	      
	      (if (not (equal? (XDefaultVisual dpy scrn) vis))
		  (snd-display ";XDefaultVisual: ~A ~A" (XDefaultVisual dpy scrn) vis))
	      (if (not (equal? (DisplayCells dpy scrn) (.map_entries vis)))
		  (snd-display ";DisplayCells: ~A ~A" (DisplayCells dpy scrn) (.map_entries vis)))
	      (if (not (equal? (CellsOfScreen scr) (.map_entries (DefaultVisualOfScreen scr))))
		  (snd-display ";CellsOfScreen: ~A ~A" (CellsOfScreen scr) (.map_entries (DefaultVisualOfScreen scr))))
	      (if (not (equal? (XDisplayCells dpy scrn) (.map_entries vis)))
		  (snd-display ";XDisplayCells: ~A ~A" (XDisplayCells dpy scrn) (.map_entries vis)))
	      (if (not (equal? (XCellsOfScreen scr) (.map_entries (DefaultVisualOfScreen scr))))
		  (snd-display ";XCellsOfScreen: ~A ~A" (XCellsOfScreen scr) (.map_entries (DefaultVisualOfScreen scr))))
	      (if (< (XNextRequest dpy) (XLastKnownRequestProcessed dpy))
		  (snd-display ";XRequests: ~A ~A" (XNextRequest dpy) (XLastKnownRequestProcessed dpy)))
	      (if (< (NextRequest dpy) (LastKnownRequestProcessed dpy))
		  (snd-display ";Requests: ~A ~A" (NextRequest dpy) (LastKnownRequestProcessed dpy)))
	      (if (not (= (XDisplayMotionBufferSize dpy) 256))
		  (snd-display ";XDisplayMotionBufferSize: ~A" (XDisplayMotionBufferSize dpy)))
	      (XGetMotionEvents dpy win (list 'Time 100) (list 'Time CurrentTime))
	      (let ((map (XNewModifiermap 2)))
		(if (not (XModifierKeymap? map))
		    (snd-display ";xNewModifiermap: ~A" map)
		    (begin
		      (set! map (XInsertModifiermapEntry map (list 'KeyCode 50) ShiftMapIndex))
		      (set! map(XDeleteModifiermapEntry map (list 'KeyCode 50) ShiftMapIndex))
		      (XFreeModifiermap map) ;prone to segfault in X
		      )))
	      (if (not (= (XExtendedMaxRequestSize dpy) 1048575))
		  (snd-display ";XExtendedMaxRequestSize ~A" (XExtendedMaxRequestSize dpy)))
	      (if (not (= (XMaxRequestSize dpy) 65535))
		  (snd-display ";XMaxRequestSize ~A" (XMaxRequestSize dpy)))
	      (if (not (member (list 'Atom 40) (XListProperties dpy win)))
		  (snd-display ";XListProperties: ~A" (XListProperties dpy win)))
	      (if (not (member "SHAPE" (XListExtensions dpy)))
		  (snd-display ";XListExtensions: ~A" (XListExtensions dpy)))
	      (if (not (= (length (XListFontsWithInfo dpy "-adobe-times-medium-r-*-*-*-*-*-*-*-*-iso8859-1" 4)) 4))
		  (snd-display ";XListFontsWithInfo: ~A" (XListFontsWithInfo dpy "-adobe-times-medium-r-*-*-*-*-*-*-*-*-iso8859-1" 4)))
	      (if (not (= (length (XListFonts dpy "-adobe-times-medium-r-*-*-*-*-*-*-*-*-iso8859-1" 4)) 4))
		  (snd-display ";XListFonts: ~A" (XListFonts dpy "-adobe-times-medium-r-*-*-*-*-*-*-*-*-iso8859-1" 4)))
	      (let ((val (XListInstalledColormaps dpy win)))
		(if (or (not val)
			(null? val)
			(not (Colormap? (car val))))
		    (snd-display ";XListInstalledColormaps: ~A" (XListInstalledColormaps dpy win))))
	      (if (not (string=? (XKeysymToString (list 'KeySym 80)) "P"))
		  (snd-display ";XKeysymToString: ~A" (XKeysymToString (list 'KeySym 80))))
	      (if (not (string=? (XGetAtomName dpy (list 'Atom 40)) "WM_NORMAL_HINTS"))
		  (snd-display ";XGetAtomName: ~A" (XGetAtomName dpy (list 'Atom 40))))

	      (if (not (= (.bits_per_rgb vis) 8)) (snd-display ";bits_per_rgb: ~A" (.bits_per_rgb vis)))
	      (if (not (= (.blue_mask vis) 31)) (snd-display ";blue_mask: ~A" (.blue_mask vis)))
	      (if (not (= (.green_mask vis) 2016)) (snd-display ";green_mask: ~A" (.green_mask vis)))
	      (if (not (= (.red_mask vis) 63488)) (snd-display ";red_mask: ~A" (.red_mask vis)))
	      (if (not (= AllPlanes 4294967295)) (snd-display ";AllPlanes: ~A" AllPlanes))
	      
	      (if (< (QLength dpy) 0) (snd-display ";QLength: ~A" (QLength dpy)))
	      (if (not (= (ScreenCount dpy) 1)) (snd-display ";ScreenCount: ~A" (ScreenCount dpy)))
	      (if (not (string=? (ServerVendor dpy) "The XFree86 Project, Inc")) (snd-display ";ServerVendor: ~A" (ServerVendor dpy)))
	      (if (not (= (ProtocolRevision dpy) 0)) (snd-display ";ProtocolRevision: ~A" (ProtocolRevision dpy)))
	      (if (not (= (ProtocolVersion dpy) 11)) (snd-display ";ProtocolVersion: ~A" (ProtocolVersion dpy)))
	      (if (not (number? (VendorRelease dpy))) (snd-display ";VendorRelease: ~A" (VendorRelease dpy)))
	      (if (not (string=? (DisplayString dpy) ":0.0")) (snd-display ";DisplayString: ~A" (DisplayString dpy)))
	      (if (not (= (BitmapUnit dpy) 32)) (snd-display ";BitmapUnit: ~A" (BitmapUnit dpy)))
	      (if (not (= (BitmapPad dpy) 32)) (snd-display ";BitmapPad: ~A" (BitmapPad dpy)))
	      (if (not (= (BitmapBitOrder dpy) 0)) (snd-display ";BitmapBitOrder: ~A" (BitmapBitOrder dpy)))
	      (if (not (= (ImageByteOrder dpy) 0)) (snd-display ";ImageByteOrder: ~A" (ImageByteOrder dpy)))
	      (if (not (= (DefaultScreen dpy) 0)) (snd-display ";DefaultScreen: ~A" (DefaultScreen dpy)))

	      (let* ((col (XColor))
		     (col1 (XColor))
		     (dpy (XtDisplay (cadr (main-widgets))))
		     (scr (DefaultScreen dpy))
		     (cmap (DefaultColormap dpy scr)))
		(if (= (XAllocNamedColor dpy cmap "blue" col col) 0) (snd-display ";XAllocNamedColor blue ~A?" col))
		(if (not (= (.red col) 0)) (snd-display ";XAllocNamedColor: ~A" (.red col)))
		(if (= (XAllocColor dpy cmap col) 0) (snd-display ";XAllocColor?"))
		(if (not (= (.red col) 0)) (snd-display ";XAllocColor: ~A" (.red col)))
		(if (= (XParseColor dpy cmap "blue" col) 0) (snd-display ";XParseColor?"))
		(if (not (= (.red col) 0)) (snd-display ";XParseColor: ~A" (.red col)))
		(if (= (XAllocNamedColor dpy cmap "green" col1 col1) 0) (snd-display ";XAllocNamedColor green ~A?" col1))
		(XQueryColor dpy cmap col)
		(XQueryColors dpy cmap (list col col1)))

	      (XSetAfterFunction dpy (lambda (n) 0))
	      (XSetAfterFunction dpy #f)
	      (if (not (equal? (XDisplayKeycodes dpy) (list 1 8 255)))
		  (snd-display ";XDisplayKeycodes: ~A" (XDisplayKeycodes dpy)))
	      (let ((str (XFetchName dpy win)))
		(if (not (string=? str "snd"))
		    (snd-display ";XFetchName: ~A" str)))
	      (XStoreName dpy win "hiho")
	      (let ((str (XFetchName dpy win)))
		(if (not (string=? str "hiho"))
		    (snd-display ";XStoreName: ~A" str)))
	      (XStoreName dpy win "snd")
	      (let ((str (XGetIconName dpy win)))
		(if (not (string=? str "snd"))
		    (snd-display ";XGetIconName: ~A" str)))
	      (XSetIconName dpy win "hiho")
	      (let ((str (XGetIconName dpy win)))
		(if (not (string=? str "hiho"))
		    (snd-display ";XSetIconName: ~A" str)))
	      (let ((geo (XGetGeometry dpy win)))
		(if (or (not (= (window-width) (list-ref geo 4)))
			(not (= (window-height) (list-ref geo 5))))
		    (snd-display ";XGetGeometry: ~A (~A ~A)" geo (window-width) (window-height))))
	      (let ((focus (XGetInputFocus dpy)))
		(if (or (not (= (car focus) 1))
			(not (Window? (cadr focus))))
		    (snd-display ";XGetInputFocus: ~A" focus)))
	      (let ((vals (XGetPointerControl dpy)))
		(if (not (equal? vals (list 1 2 1 4))) (snd-display ";pointer state: ~A" vals))
		(XChangePointerControl dpy #f #t 2 1 8)
		(set! vals (XGetPointerControl dpy))
		(if (not (equal? vals (list 1 2 1 8))) (snd-display ";set pointer state: ~A" vals))
		(XChangePointerControl dpy #f #t 2 1 4))
	      (let ((vals (beep-state)))
		(if (not (= (cadr vals) 400)) (snd-display ";beep state: ~A" vals))
		(set! (beep-state) (list 100 200 100))
		(set! vals (beep-state))
		(if (not (= (cadr vals) 200)) (snd-display ";set beep state: ~A" vals)))
	      (XAutoRepeatOff dpy)
	      (if (not (= (list-ref (XGetKeyboardControl dpy) 5) 0)) (snd-display ";AutoRepeatOff?"))
	      (XAutoRepeatOn dpy)
	      (if (not (= (list-ref (XGetKeyboardControl dpy) 5) 1)) (snd-display ";AutoRepeatOn?"))
	      (let ((vals (XGetPointerMapping dpy 0 3)))
		(if (not (equal? vals (list 1 2 3))) (snd-display ";XGetPointerMapping: ~A" vals)))
	      (XGetScreenSaver dpy)
	      (XMoveWindow dpy win 100 10)
	      (XSync dpy #f)
	      (XResizeWindow dpy win 400 400)
	      (XSync dpy #f)
	      (XMoveResizeWindow dpy win 120 20 500 500)
	      (XSync dpy #f)
	      (let ((attr (XGetWindowAttributes dpy win)))
		(if (> (abs (- (.x attr) 120)) 200) (snd-display ";XMoveWindow x etc: ~A" (.x attr)))
		(if (> (abs (- (.y attr) 20)) 200) (snd-display ";XMoveWindow y etc: ~A" (.y attr)))
		(if (> (abs (- (.width attr) 500)) 20) (snd-display ";XMoveWindow width etc: ~A" (.width attr)))
		(if (> (abs (- (.height attr) 500)) 20) (snd-display ";XMoveWindow height etc: ~A" (.height attr)))
		(if (not (= (.border_width attr) 0)) (snd-display ";XGetWindowAttributes border_width: ~A" (.border_width attr)))
		(if (not (= (.depth attr) 16)) (snd-display ";XGetWindowAttributes depth: ~A" (.depth attr)))
		(if (not (= (.bit_gravity attr) 0)) (snd-display ";XGetWindowAttributes bit_gravity: ~A" (.bit_gravity attr)))
		(if (not (= (.win_gravity attr) 1)) (snd-display ";XGetWindowAttributes win_gravity: ~A" (.win_gravity attr)))
		(if (.backing_store attr) (snd-display ";XGetWindowAttributes backing_store: ~A" (.backing_store attr)))
		(if (.override_redirect attr) (snd-display ";XGetWindowAttributes override_redirect: ~A" (.override_redirect attr)))
		(if (.save_under attr) (snd-display ";XGetWindowAttributes save_under: ~A" (.save_under attr)))
		(if (not (.map_installed attr)) (snd-display ";XGetWindowAttributes map_installed: ~A" (.map_installed attr)))
		(if (not (= (.backing_pixel attr) 0)) (snd-display ";XGetWindowAttributes backing_pixel: ~A" (.backing_pixel attr)))
		(if (not (= (.map_state attr) 2)) (snd-display ";XGetWindowAttributes map_state: ~A" (.map_state attr)))
		(if (not (= (.your_event_mask attr) #x628033)) (snd-display ";your_event_mask: ~X" (.your_event_mask attr)))
		(if (not (= (.all_event_masks attr) #xe28033)) (snd-display ";all_event_masks: ~X" (.all_event_masks attr)))
		(if (not (Screen? (.screen attr))) (snd-display ";XGetWindowAttributes screen: ~A" (.screen attr)))
		(if (not (= (.do_not_propagate_mask attr) 0)) (snd-display ";XGetWindowAttributes do_not_propagate_mask: ~A" (.do_not_propagate_mask attr)))
		(if (.save_under attr) (snd-display ";XGetWindowAttributes save_under ~A" (.save_under attr)))
		(if (not (= (.backing_pixel attr) 0)) (snd-display ";XGetWindowAttributes backing_pixel: ~A" (.backing_pixel attr)))
		(if (not (= (.backing_planes attr) AllPlanes)) (snd-display ";XGetWindowAttributes backing_planes: ~A" (.backing_planes attr)))
		(if (not (= (.win_gravity attr) 1)) (snd-display ";XGetWindowAttributes win_gravity: ~A" (.win_gravity attr)))
		(if (not (= (.bit_gravity attr) 0)) (snd-display ";XGetWindowAttributes bit_gravity: ~A" (.bit_gravity attr))))
	      (XResetScreenSaver dpy)
	      (if (< (XPending dpy) 0) (snd-display ";XPending: ~A" (XPending dpy)))
	      (XNoOp dpy)
	      (XQueryBestStipple dpy win 100 100)
	      (XQueryBestTile dpy win 100 100)
	      (XQueryBestSize dpy 0 win 100 100)
	      (let ((ext (XQueryExtension dpy "SHAPE")))
		(if (not (eq? (car ext) #t))
		    (snd-display ";XQueryExtension: ~A" ext)))
	      (XQueryKeymap dpy)
	      (let ((tree (XQueryTree dpy win)))
		(if (or (not (= (car tree) 1))
			(not (equal? (XRootWindow dpy 0) (cadr tree))))
		    (snd-display ";XQueryTree: ~A (~A)" tree (XRootWindow dpy 0))))

	      (if (< (XQLength dpy) 0) (snd-display ";XQLength: ~A" (XQLength dpy)))
	      (if (not (= (XScreenCount dpy) 1)) (snd-display ";XScreenCount: ~A" (XScreenCount dpy)))
	      (if (not (string=? (XServerVendor dpy) "The XFree86 Project, Inc")) (snd-display ";XServerVendor: ~A" (XServerVendor dpy)))
	      (if (not (= (XProtocolRevision dpy) 0)) (snd-display ";XProtocolRevision: ~A" (XProtocolRevision dpy)))
	      (if (not (= (XProtocolVersion dpy) 11)) (snd-display ";XProtocolVersion: ~A" (XProtocolVersion dpy)))
	      (if (not (number? (XVendorRelease dpy))) (snd-display ";XVendorRelease: ~A" (XVendorRelease dpy)))
	      (if (not (string=? (XDisplayString dpy) ":0.0")) (snd-display ";XDisplayString: ~A" (XDisplayString dpy)))
	      (if (not (= (XBitmapUnit dpy) 32)) (snd-display ";XBitmapUnit: ~A" (XBitmapUnit dpy)))
	      (if (not (= (XBitmapPad dpy) 32)) (snd-display ";XBitmapPad: ~A" (XBitmapPad dpy)))
	      (if (not (= (XBitmapBitOrder dpy) 0)) (snd-display ";XBitmapBitOrder: ~A" (XBitmapBitOrder dpy)))
	      (if (not (= (XImageByteOrder dpy) 0)) (snd-display ";XImageByteOrder: ~A" (XImageByteOrder dpy)))
	      (if (not (= (XDefaultScreen dpy) 0)) (snd-display ";XDefaultScreen: ~A" (XDefaultScreen dpy)))
	      (if (XGetIconSizes dpy win) (snd-display ";XGetIconSizes: ~A" (XGetIconSizes dpy win)))
	      (if (XGetStandardColormap dpy win XA_RGB_DEFAULT_MAP)
		  (snd-display ";XGetStandardColormap: ~A!" (XGetStandardColormap dpy win XA_RGB_DEFAULT_MAP)))
	      (if (XGetRGBColormaps dpy win XA_RGB_DEFAULT_MAP)
		  (snd-display ";XGetRGBColormaps: ~A!" (XGetRGBColormaps dpy win XA_RGB_DEFAULT_MAP)))
	      (let ((cmap (XAllocStandardColormap)))
		(for-each 
		 (lambda (func name)
		   (if (not (= (func cmap) 0)) (snd-display ";standardcolormap ~A: ~A" name (func cmap))))
		 (list .base_pixel .visualid .red_max .red_mult .green_max .green_mult .blue_max .blue_mult)
		 (list 'base_pixel 'visualid 'red_max 'red_mult 'green_max 'green_mult 'blue_max 'blue_mult))
		(if (.colormap cmap) (snd-display ";colormap: ~A" (.colormap cmap))))
	      (let ((icon (XAllocIconSize)))
		(for-each
		 (lambda (func name)
		   (if (not (= (func icon) 0)) (snd-display ";iconsize ~A: ~A" name (func icon))))
		 (list .min_width .min_height .max_width .max_height .width_inc .height_inc)
		 (list 'min_width 'min_height 'max_width 'max_height 'width_inc 'height_inc))
		(XFree icon))
			  
	      (let ((fs (XCreateFontSet dpy "*-*-*-*-Normal-*-180-100-100-*-*")))
		(if (or (not (XFontSet? fs))
			(= (cadr fs) 0))
		    (snd-display ";XCreateFontSet: ~A" fs)
		    (let* ((fnts (XFontsOfFontSet fs))
			   (fnt (caar fnts)))
		      (if (not (XFontStruct? fnt))
			  (snd-display ";XFontsOfFontSet: ~A" fnts))
		      (if (XContextualDrawing fs)
			  (snd-display ";XContextualDrawing: ~A" (XContextualDrawing fs)))
		      (if (XContextDependentDrawing fs)
			  (snd-display ";XContextDependentDrawing: ~A" (XContextDependentDrawing fs)))
		      (if (XDirectionalDependentDrawing fs)
			  (snd-display ";XDirectionalDependentDrawing: ~A" (XDirectionalDependentDrawing fs)))
		      (if (not (string=? (XLocaleOfFontSet fs) "en_US.iso885915"))
			  (snd-display ";XLocaleOfFontSet: ~A" (XLocaleOfFontSet fs)))
		      (if (not (string=? (XBaseFontNameListOfFontSet fs) "*-*-*-*-Normal-*-180-100-100-*-*"))
			  (snd-display ";XBaseFontNameListOfFontSet: ~A" (XBaseFontNameListOfFontSet fs)))
		      (if fnt
			  (let ((wgt (XGetFontProperty fnt XA_WEIGHT))
				(siz (XGetFontProperty fnt XA_POINT_SIZE)))
			    (if (or (not (= (cadr wgt) 10))
				    (not (= (cadr siz) 180)))
				(snd-display ";XGetFontProperty: ~A ~A" wgt siz))
			    (if (not (= (.descent fnt) 5)) (snd-display ";descent: ~A" (.descent fnt)))
			    (if (not (= (.ascent fnt) 18)) (snd-display ";ascent: ~A" (.ascent fnt)))
			    (if (not (XCharStruct? (.per_char fnt))) (snd-display ";per_char: ~A" (.per_char fnt)))
			    (if (not (XCharStruct? (.max_bounds fnt))) (snd-display ";max_bounds: ~A" (.max_bounds fnt)))
			    (if (not (XCharStruct? (.min_bounds fnt))) (snd-display ";min_bounds: ~A" (.min_bounds fnt)))
			    (if (not (XFontProp? (car (.properties fnt)))) (snd-display ";properties ~A" (.properties fnt)))))
		      (XFreeFontSet dpy fs))))

	      (let ((dpy (XtDisplay (cadr (main-widgets))))
		    (win (XtWindow (cadr (main-widgets))))
		    (eKeyPress (XEvent KeyPress))
		    (eButtonPress (XEvent ButtonPress))
		    (eMotionNotify (XEvent MotionNotify))
		    (eEnterNotify (XEvent EnterNotify))
		    (eFocusIn (XEvent FocusIn))
		    (eKeymapNotify (XEvent KeymapNotify))
		    (eExpose (XEvent Expose))
		    (eGraphicsExpose (XEvent GraphicsExpose))
		    (eNoExpose (XEvent NoExpose))
		    (eVisibilityNotify (XEvent VisibilityNotify))
		    (eCreateNotify (XEvent CreateNotify))
		    (eDestroyNotify (XEvent DestroyNotify))
		    (eUnmapNotify (XEvent UnmapNotify))
		    (eMapNotify (XEvent MapNotify))
		    (eMapRequest (XEvent MapRequest))
		    (eReparentNotify (XEvent ReparentNotify))
		    (eConfigureNotify (XEvent ConfigureNotify))
		    (eConfigureRequest (XEvent ConfigureRequest))
		    (eGravityNotify (XEvent GravityNotify))
		    (eResizeRequest (XEvent ResizeRequest))
		    (eCirculateNotify (XEvent CirculateNotify))
		    (eCirculateRequest (XEvent CirculateRequest))
		    (ePropertyNotify (XEvent PropertyNotify))
		    (eSelectionClear (XEvent SelectionClear))
		    (eSelectionRequest (XEvent SelectionRequest))
		    (eSelectionNotify (XEvent SelectionNotify))
		    (eColormapNotify (XEvent ColormapNotify))
		    (eClientMessage (XEvent ClientMessage))
		    (eMappingNotify (XEvent MappingNotify)))
		
		(for-each
		 (lambda (func val name)
		   (set! (func eKeyPress) val)
		   (if (not (equal? (func eKeyPress) val)) (snd-display ";eKeyPress ~A ~A" name (func eKeyPress))))
		 (list .type .serial .send_event .display .window .root .subwindow .time .x .y .x_root .y_root .state .keycode .same_screen)
		 (list KeyPress 0 #f dpy win win win (list 'Time 0) 0 0 0 0 0 (list 'KeyCode 0) #f)
		 (list 'type 'serial 'send_event 'display 'window 'root 'subwindow 'time 'x 'y 'x_root 'y_root 'state 'keycode 'same_screen))
		
		(for-each
		 (lambda (func val name)
		   (set! (func eButtonPress) val)
		   (if (not (equal? (func eButtonPress) val)) (snd-display ";eButtonPress ~A ~A" name (func eButtonPress))))
		 (list .type .serial .send_event .display .window .root .subwindow .time .x .y .x_root .y_root .state .button .same_screen)
		 (list ButtonPress 0 #f dpy win win win (list 'Time 0) 0 0 0 0 0 0 #f)
		 (list 'type 'serial 'send_event 'display 'window 'root 'subwindow 'time 'x 'y 'x_root 'y_root 'state 'button 'same_screen))
		
		(for-each
		 (lambda (func val name)
		   (set! (func eMotionNotify) val)
		   (if (not (equal? (func eMotionNotify) val)) (snd-display ";eMotionNotify ~A ~A" name (func eMotionNotify))))
		 (list .type .serial .send_event .display .window .root .subwindow .time .x .y .x_root .y_root .state .is_hint .same_screen)
		 (list MotionNotify 0 #f dpy win win win (list 'Time 0) 0 0 0 0 0 0 #f)
		 (list 'type 'serial 'send_event 'display 'window 'root 'subwindow 'time 'x 'y 'x_root 'y_root 'state 'is_hint 'same_screen))
		
		(for-each
		 (lambda (func val name)
		   (set! (func eEnterNotify) val)
		   (if (not (equal? (func eEnterNotify) val)) (snd-display ";eEnterNotify ~A ~A" name (func eEnterNotify))))
		 (list .type .serial .send_event .display .window .root .subwindow .time .x .y .x_root .y_root .mode .detail .same_screen .focus .state)
		 (list EnterNotify 0 #f dpy win win win (list 'Time 0) 0 0 0 0 0 0 #f #f 0)
		 (list 'type 'serial 'send_event 'display 'window 'root 'subwindow 'time 'x 'y 'x_root 'y_root 'mode 'detail 'same_screen 'focus 'state))
		
		(for-each
		 (lambda (func val name)
		   (set! (func eFocusIn) val)
		   (if (not (equal? (func eFocusIn) val)) (snd-display ";eFocusIn ~A ~A" name (func eFocusIn))))
		 (list .type .serial .send_event .display .window .mode .detail)
		 (list FocusIn 0 #f dpy win 0 0)
		 (list 'type 'serial 'send_event 'display 'window 'mode 'detail))
		
		(for-each
		 (lambda (func val name)
		   (set! (func eKeymapNotify) val)
		   (if (not (equal? (func eKeymapNotify) val)) (snd-display ";eKeymapNotify ~A ~A" name (func eKeymapNotify))))
		 (list .type .serial .send_event .display .window .key_vector)
		 (list KeymapNotify 0 #f dpy win "hiho")
		 (list 'type 'serial 'send_event 'display 'window 'key-vector))
		
		(for-each
		 (lambda (func val name)
		   (set! (func eExpose) val)
		   (if (not (equal? (func eExpose) val)) (snd-display ";eExpose ~A ~A" name (func eExpose))))
		 (list .type .serial .send_event .display .window .x .y .width .height .count)
		 (list Expose 0 #f dpy win 0 0 0 0 0)
		 (list 'type 'serial 'send_event 'display 'window 'x 'y 'width 'height 'count))
		
		(for-each
		 (lambda (func val name)
		   (set! (func eGraphicsExpose) val)
		   (if (not (equal? (func eGraphicsExpose) val)) (snd-display ";eGraphicsExpose ~A ~A" name (func eGraphicsExpose))))
		 (list .type .serial .send_event .display .drawable .x .y .width .height .count .major_code .minor_code)
		 (list GraphicsExpose 0 #f dpy win 0 0 0 0 0 0 0)
		 (list 'type 'serial 'send_event 'display 'drawable 'x 'y 'width 'height 'count 'major_code 'minor_code))
		
		(for-each
		 (lambda (func val name)
		   (set! (func eNoExpose) val)
		   (if (not (equal? (func eNoExpose) val)) (snd-display ";eNoExpose ~A ~A" name (func eNoExpose))))
		 (list .type .serial .send_event .display .drawable .major_code .minor_code)
		 (list NoExpose 0 #f dpy win 0 0)
		 (list 'type 'serial 'send_event 'display 'drawable 'major_code 'minor_code))
		
		(for-each
		 (lambda (func val name)
		   (set! (func eVisibilityNotify) val)
		   (if (not (equal? (func eVisibilityNotify) val)) (snd-display ";eVisibilityNotify ~A ~A" name (func eVisibilityNotify))))
		 (list .type .serial .send_event .display .window .state)
		 (list VisibilityNotify 0 #f dpy win 0)
		 (list 'type 'serial 'send_event 'display 'window 'state))
		
		(for-each
		 (lambda (func val name)
		   (set! (func eCreateNotify) val)
		   (if (not (equal? (func eCreateNotify) val)) (snd-display ";eCreateNotify ~A ~A" name (func eCreateNotify))))
		 (list .type .serial .send_event .display .parent .window .x .y .width .height .border_width .override_redirect)
		 (list CreateNotify 0 #f dpy win win 0 0 0 0 0 #f)
		 (list 'type 'serial 'send_event 'display 'parent 'window 'x 'y 'width 'height 'border_width 'override_redirect))
		
		(for-each
		 (lambda (func val name)
		   (set! (func eDestroyNotify) val)
		   (if (not (equal? (func eDestroyNotify) val)) (snd-display ";eDestroyNotify ~A ~A" name (func eDestroyNotify))))
		 (list .type .serial .send_event .display .window)
		 (list DestroyNotify 0 #f dpy win)
		 (list 'type 'serial 'send_event 'display 'window))
		
		(for-each
		 (lambda (func val name)
		   (set! (func eUnmapNotify) val)
		   (if (not (equal? (func eUnmapNotify) val)) (snd-display ";eUnmapNotify ~A ~A" name (func eUnmapNotify))))
		 (list .type .serial .send_event .event .display .window .from_configure)
		 (list UnmapNotify 0 #f win dpy win #f)
		 (list 'type 'serial 'send_event 'event 'display 'window 'from_configure))
		
		(for-each
		 (lambda (func val name)
		   (set! (func eMapNotify) val)
		   (if (not (equal? (func eMapNotify) val)) (snd-display ";eMapNotify ~A ~A" name (func eMapNotify))))
		 (list .type .serial .send_event .event .display .window .override_redirect)
		 (list MapNotify 0 #f win dpy win #f)
		 (list 'type 'serial 'send_event 'event 'display 'window 'override_redirect))
		
		(for-each
		 (lambda (func val name)
		   (set! (func eMapRequest) val)
		   (if (not (equal? (func eMapRequest) val)) (snd-display ";eMapRequest ~A ~A" name (func eMapRequest))))
		 (list .type .serial .send_event .display .window)
		 (list MapRequest 0 #f dpy win)
		 (list 'type 'serial 'send_event 'display 'window))
		
		(for-each
		 (lambda (func val name)
		   (set! (func eReparentNotify) val)
		   (if (not (equal? (func eReparentNotify) val)) (snd-display ";eReparentNotify ~A ~A" name (func eReparentNotify))))
		 (list .type .serial .send_event .event .display .window .parent .x .y .override_redirect)
		 (list ReparentNotify 0 #f win dpy win win 0 0 #f)
		 (list 'type 'serial 'send_event 'event 'display 'window 'parent 'x 'y 'override_redirect))
		
		(for-each
		 (lambda (func val name)
		   (set! (func eConfigureNotify) val)
		   (if (not (equal? (func eConfigureNotify) val)) (snd-display ";eConfigureNotify ~A ~A" name (func eConfigureNotify))))
		 (list .type .serial .send_event .display .window .x .y .width .height .border_width .above .override_redirect)
		 (list ConfigureNotify 0 #f dpy win 0 0 0 0 0 win #f)
		 (list 'type 'serial 'send_event 'display 'window 'x 'y 'width 'height 'border_width 'above 'override_redirect))
		
		(for-each
		 (lambda (func val name)
		   (set! (func eGravityNotify) val)
		   (if (not (equal? (func eGravityNotify) val)) (snd-display ";eGravityNotify ~A ~A" name (func eGravityNotify))))
		 (list .type .serial .send_event .event .display .window .x .y)
		 (list GravityNotify 0 #f win dpy win 0 0)
		 (list 'type 'serial 'send_event 'event 'display 'window 'x 'y))
		
		(for-each
		 (lambda (func val name)
		   (set! (func eResizeRequest) val)
		   (if (not (equal? (func eResizeRequest) val)) (snd-display ";eResizeRequest ~A ~A" name (func eResizeRequest))))
		 (list .type .serial .send_event .display .window .width .height)
		 (list ResizeRequest 0 #f dpy win 0 0)
		 (list 'type 'serial 'send_event 'display 'window 'width 'height))
		
		(for-each
		 (lambda (func val name)
		   (set! (func eConfigureRequest) val)
		   (if (not (equal? (func eConfigureRequest) val)) (snd-display ";eConfigureRequest ~A ~A" name (func eConfigureRequest))))
		 (list .type .serial .send_event .display .parent .window .x .y .width .height .border_width .above .detail .value_mask)
		 (list ConfigureRequest 0 #f dpy win win 0 0 0 0 0 win 0 0)
		 (list 'type 'serial 'send_event 'display 'parent 'window 'x 'y 'width 'height 'border_width 'above 'detail 'value_mask))
		
		(for-each
		 (lambda (func val name)
		   (set! (func eCirculateNotify) val)
		   (if (not (equal? (func eCirculateNotify) val)) (snd-display ";eCirculateNotify ~A ~A" name (func eCirculateNotify))))
		 (list .type .serial .send_event .display .window .event .place)
		 (list CirculateNotify 0 #f dpy win win 0)
		 (list 'type 'serial 'send_event 'display 'window 'event 'place))
		
		(for-each
		 (lambda (func val name)
		   (set! (func eCirculateRequest) val)
		   (if (not (equal? (func eCirculateRequest) val)) (snd-display ";eCirculateRequest ~A ~A" name (func eCirculateRequest))))
		 (list .type .serial .send_event .display .window .parent .place)
		 (list CirculateRequest 0 #f dpy win win 0)
		 (list 'type 'serial 'send_event 'display 'window 'parent 'place))
		
		(for-each
		 (lambda (func val name)
		   (set! (func ePropertyNotify) val)
		   (if (not (equal? (func ePropertyNotify) val)) (snd-display ";ePropertyNotify ~A ~A" name (func ePropertyNotify))))
		 (list .type .serial .send_event .display .window .atom .time .state)
		 (list PropertyNotify 0 #f dpy win XA_STRING (list 'Time 0) 0)
		 (list 'type 'serial 'send_event 'display 'window 'atom 'time 'state))
		
		(for-each
		 (lambda (func val name)
		   (set! (func eSelectionClear) val)
		   (if (not (equal? (func eSelectionClear) val)) (snd-display ";eSelectionClear ~A ~A" name (func eSelectionClear))))
		 (list .type .serial .send_event .display .window .selection .time)
		 (list SelectionClear 0 #f dpy win XA_STRING (list 'Time 0))
		 (list 'type 'serial 'send_event 'display 'window 'atom 'time))
		
		(for-each
		 (lambda (func val name)
		   (set! (func eSelectionRequest) val)
		   (if (not (equal? (func eSelectionRequest) val)) (snd-display ";eSelectionRequest ~A ~A" name (func eSelectionRequest))))
		 (list .type .serial .send_event .display .owner .requestor .selection .target .property .time)
		 (list SelectionRequest 0 #f dpy win win XA_STRING XA_STRING XA_STRING (list 'Time 0))
		 (list 'type 'serial 'send_event 'display 'owner 'requestor 'selection 'target 'property 'time))
		
		(for-each
		 (lambda (func val name)
		   (set! (func eSelectionNotify) val)
		   (if (not (equal? (func eSelectionNotify) val)) (snd-display ";eSelectionNotify ~A ~A" name (func eSelectionNotify))))
		 (list .type .serial .send_event .display .requestor .selection .target .property .time)
		 (list SelectionNotify 0 #f dpy win XA_STRING XA_STRING XA_STRING (list 'Time 0))
		 (list 'type 'serial 'send_event 'display 'requestor 'selection 'target 'property 'time))
		
		(for-each
		 (lambda (func val name)
		   (set! (func eColormapNotify) val)
		   (if (not (equal? (func eColormapNotify) val)) (snd-display ";eColormapNotify ~A ~A" name (func eColormapNotify))))
		 (list .type .serial .send_event .display .window .colormap .state)
		 (list ColormapNotify 0 #f dpy win (XDefaultColormap dpy (XScreenNumberOfScreen (DefaultScreenOfDisplay dpy))) 0)
		 (list 'type 'serial 'send_event 'display 'window 'colormap 'state))
		
		(for-each
		 (lambda (func val name)
		   (set! (func eMappingNotify) val)
		   (if (not (equal? (func eMappingNotify) val)) (snd-display ";eMappingNotify ~A ~A" name (func eMappingNotify))))
		 (list .type .serial .send_event .display .window .request .first_keycode .count)
		 (list MappingNotify 0 #f dpy win 0 0 0)
		 (list 'type 'serial 'send_event 'display 'window 'request 'first_keycode 'count))
		
		(for-each
		 (lambda (func val name)
		   (set! (func eClientMessage) val)
		   (if (not (equal? (func eClientMessage) val)) (snd-display ";eClientMessage ~A ~A" name (func eClientMessage))))
		 (list .type .serial .send_event .display .window .message_type .format .data)
		 (list ClientMessage 0 #f dpy win XA_STRING 8 "gogo")
		 (list 'type 'serial 'send_event 'display 'window 'message_type 'format 'data))
		)
	      
	      (XBell dpy 10)
	      (let ((cmd (XGetCommand dpy win)))
		(if (or (not (> (length cmd) 0))
			(not (string=? (car cmd) "./snd")))
		    (snd-display ";XGetCommand: ~A" cmd)))
	      (XSetCommand dpy win (list "hiho" "away") 2)
	      (if (not (equal? (XGetCommand dpy win) (list "hiho" "away"))) 
		  (snd-display ";XSetCommand: ~A" (XGetCommand dpy win)))
	      (let ((wmp (map (lambda (w) (XGetAtomName dpy w)) (XGetWMProtocols dpy win))))
		(if (not (equal? wmp (list "_MOTIF_WM_MESSAGES" "WM_DELETE_WINDOW")))
		    (snd-display ";XGetWMProtocols: ~A" wmp)))
	      (if (not (equal? (XListDepths dpy 0) (list 16 1 4 8 15 24 32)))
		  (snd-display ";XListDepths: ~A" (XListDepths dpy 0)))
	      (if (not (equal? (XListPixmapFormats dpy) '((1 1 32) (4 8 32) (8 8 32) (15 16 32) (16 16 32) (24 32 32) (32 32 32))))
		  (snd-display ";XListPixmapFormats: ~A" (XListPixmapFormats dpy)))
	      
	      (XWarpPointer dpy (list 'Window None) (list 'Window None) 0 0 10 10 100 100)
	      (let ((cs (XQueryBestCursor dpy win 10 10)))
		(if (not (equal? cs (list 1 10 10))) (snd-display ";XQueryBestCursor: ~A" cs)))
	      (let ((pt (XQueryPointer dpy win)))
		(if (not (Window? (cadr pt))) (snd-display ";XQueryPointer: ~A" pt)))
	      (XRaiseWindow dpy win)
	      (XRotateBuffers dpy 1)
	      (XSetWindowBorderWidth dpy win 10)
	      (XSetWindowBorder dpy win (cadr (black-pixel)))
	      (XSetWindowBackground dpy win (cadr (basic-color)))
	      (let ((depth (.depth (car (XGetVisualInfo dpy 0 (list 'XVisualInfo 0))))))
		(XSetWindowBorderPixmap dpy win (XCreatePixmap dpy win 10 10 depth))
		(XSetWindowBackgroundPixmap dpy win (XCreatePixmap dpy win 10 10 depth))
		(XSetWindowBorderPixmap dpy win CopyFromParent)
		(XSetWindowBackgroundPixmap dpy win ParentRelative))
	      (let ((hints (XGetWMHints dpy win)))
		(if (or (not hints) (not (XWMHints? hints))) (snd-display ";XGetWMHints?"))
		(if (not (= (.flags hints) 7)) (snd-display ";flags wmhints: ~A" (.flags hints)))
		(if (not (= (.initial_state hints) 1)) (snd-display ";initial_state wmhints: ~A" (.initial_state hints)))
		(if (not (.input hints)) (snd-display ";input wmhints: ~A" (.input hints)))
		(if (not (Pixmap? (.icon_pixmap hints))) (snd-display ";icon_pixmap wmhints: ~A" (.icon_pixmap hints)))
		(if (.icon_window hints) (snd-display ";icon_window: ~A" (.icon_window hints)))
		(if (not (= (.icon_x hints) -1)) (snd-display ";icon_x wmhints: ~A" (.icon_x hints)))
		(if (not (= (.icon_y hints) -1)) (snd-display ";icon_y wmhints: ~A" (.icon_y hints)))
		(if (not (equal? (.icon_mask hints) (list 'Pixmap 0))) (snd-display ";icon_mask: ~A" (.icon_mask hints)))
		(if (not (number? (.window_group hints))) (snd-display ";window_group: ~A" (.window_group hints)))
		(let ((st (XAllocWMHints)))
		  (if (not (XWMHints? st)) (snd-display ";XAllocWMHints: ~A" st))
		  (XFree st))))

	    (if (not (IsKeypadKey (list 'KeySym XK_KP_Space))) (snd-display ";IsKeypadKey kp-space"))
	    (if (IsKeypadKey (list 'KeySym XK_A)) (snd-display ";IsKeypadKey A"))
	    (if (IsPrivateKeypadKey (list 'KeySym XK_A)) (snd-display ";IsPrivateKeypadKey A"))
	    (if (not (IsCursorKey (list 'KeySym XK_Home))) (snd-display ";IsCursorKey Home"))
	    (if (IsCursorKey (list 'KeySym XK_S)) (snd-display ";IsCursorKey S"))
	    (if (not (IsPFKey (list 'KeySym XK_KP_F1))) (snd-display ";IsPFKey F1"))
	    (if (IsPFKey (list 'KeySym XK_S)) (snd-display ";IsPFKey S"))
	    (if (not (IsFunctionKey (list 'KeySym XK_F1))) (snd-display ";IsFunctionKey F1"))
	    (if (IsFunctionKey (list 'KeySym XK_S)) (snd-display ";IsFunctionKey S"))
	    (if (not (IsMiscFunctionKey (list 'KeySym XK_Select))) (snd-display ";IsMiscFunctionKey Select"))
	    (if (IsMiscFunctionKey (list 'KeySym XK_S)) (snd-display ";IsMiscFunctionKey S"))
	    (if (not (IsModifierKey (list 'KeySym XK_Shift_L))) (snd-display ";IsModifierKey Shift"))
	    (if (IsModifierKey (list 'KeySym XK_S)) (snd-display ";IsModifierKey S"))

	    (let* ((scr (current-screen))
		   (scrn (XScreenNumberOfScreen scr))
		   (dpy (XtDisplay (cadr (main-widgets))))
		   (val (XGCValues))
		   (wn (XtWindow (cadr (main-widgets)))))
	      (set! (.function val) GXclear)
	      (if (not (equal? (.function val) GXclear))
		  (snd-display ";function: ~A ~A" (.function val) GXclear))
	      (set! (.line_width val) 10)
	      (if (not (equal? (.line_width val) 10)) 
		  (snd-display ";line_width: ~A ~A" (.line_width val) 10))
	      (set! (.line_style val) LineSolid)
	      (if (not (equal? (.line_style val) LineSolid)) 
		  (snd-display ";line_style: ~A ~A" (.line_style val) LineSolid))
	      (set! (.background val) (WhitePixelOfScreen (current-screen)))
	      (if (not (equal? (.background val) (WhitePixelOfScreen (current-screen)))) 
		  (snd-display ";background: ~A ~A" (.background val) (WhitePixelOfScreen (current-screen))))
	      (set! (.foreground val) (BlackPixelOfScreen (current-screen)))
	      (if (not (equal? (.foreground val) (BlackPixelOfScreen (current-screen)))) 
		  (snd-display ";foreground: ~A ~A" (.foreground val) (BlackPixelOfScreen (current-screen))))
	      ;; plane_mask?
	      (set! (.cap_style val) CapRound)
	      (if (not (equal? (.cap_style val) CapRound)) 
		  (snd-display ";cap_style: ~A ~A" (.cap_style val) CapRound))
	      (set! (.join_style val) JoinMiter)
	      (if (not (equal? (.join_style val) JoinMiter)) 
		  (snd-display ";join_style: ~A ~A" (.join_style val) JoinMiter))
	      (set! (.fill_style val) FillSolid)
	      (if (not (equal? (.fill_style val) FillSolid)) 
		  (snd-display ";fill_style: ~A ~A" (.fill_style val) FillSolid))
	      (set! (.fill_rule val) EvenOddRule)
	      (if (not (equal? (.fill_rule val) EvenOddRule)) 
		  (snd-display ";fill_rule: ~A ~A" (.fill_rule val) EvenOddRule))
	      (set! (.arc_mode val) ArcChord)
	      (if (not (equal? (.arc_mode val) ArcChord))
		  (snd-display ";arc_mode: ~A ~A" (.arc_mode val) ArcChord))
	      ;; tile stipple clip_mask are Pixmaps
	      (set! (.ts_x_origin val) 1)
	      (if (not (equal? (.ts_x_origin val) 1)) 
		  (snd-display ";ts_x_origin: ~A ~A" (.ts_x_origin val) 1))
	      (set! (.ts_y_origin val) 1)
	      (if (not (equal? (.ts_y_origin val) 1)) 
		  (snd-display ";ts_y_origin: ~A ~A" (.ts_y_origin val) 1))
	      ;; font is Font
	      (set! (.subwindow_mode val) ClipByChildren)
	      (if (not (equal? (.subwindow_mode val) ClipByChildren)) 
		  (snd-display ";subwindow_mode: ~A ~A" (.subwindow_mode val) ClipByChildren))
	      (set! (.graphics_exposures val) #f)
	      (if (not (equal? (.graphics_exposures val) #f)) 
		  (snd-display ";graphics_exposures: ~A ~A" (.graphics_exposures val) #f))
	      (set! (.clip_x_origin val) 0)
	      (if (not (equal? (.clip_x_origin val) 0)) 
		  (snd-display ";clip_x_origin: ~A ~A" (.clip_x_origin val) 0))
	      (set! (.clip_y_origin val) 0)
	      (if (not (equal? (.clip_y_origin val) 0)) 
		  (snd-display ";clip_y_origin: ~A ~A" (.clip_y_origin val) 0))
	      (set! (.dash_offset val) 1)
	      (if (not (equal? (.dash_offset val) 1))
		  (snd-display ";dash_offset: ~A ~A" (.dash_offset val) 1))
	      (if (not (number? (XConnectionNumber dpy)))
		  (snd-display ";XConnectionNumber: ~A" (XConnectionNumber dpy)))
	      
	      (let ((gc (XCreateGC dpy wn (+ GCFunction GCForeground GCBackground GCLineWidth GCLineStyle 
					      GCCapStyle GCJoinStyle GCFillStyle GCFillRule GCTileStipXOrigin
					      GCTileStipYOrigin GCSubwindowMode GCGraphicsExposures GCClipXOrigin
					      GCClipYOrigin GCDashOffset GCArcMode)
				    val)))
		
		(if (not (GC? gc)) (snd-display ";XCreateGC returned ~A" gc))
		(XSetArcMode dpy gc ArcPieSlice)
		(XSetFunction dpy gc GXcopy)
		(XSetLineAttributes dpy gc 3 LineDoubleDash CapButt JoinMiter)
		(XSetClipOrigin dpy gc 1 1)
		(XSetTSOrigin dpy gc 0 0)
		(XSetFillRule dpy gc WindingRule)
		(XSetFillStyle dpy gc FillStippled)
		(XSetForeground dpy gc (WhitePixelOfScreen (current-screen)))
		(XSetBackground dpy gc (BlackPixelOfScreen (current-screen)))
		(XSetGraphicsExposures dpy gc #t)
		(XSetSubwindowMode dpy gc IncludeInferiors)
		(if (not (string=? "unix/:7100" (car (XGetFontPath dpy))))
		    (snd-display ";XGetFontPath: ~A" (XGetFontPath dpy)))
		(let ((owner (XGetSelectionOwner dpy XA_PRIMARY)))
		  (if (and owner (not (Window? owner)))
		      (snd-display ";XGetSelectionOwner: ~A" owner)))
		(let ((mods (XGetModifierMapping dpy)))
		  (if (not (XModifierKeymap? mods))
		      (snd-display ";XGetModifierMapping: ~A" mods)))
		(let ((vis (XGetVisualInfo dpy 0 (list 'XVisualInfo 0))))
		  (if (or (not vis)
			  (not (XVisualInfo? (car vis))))
		      (snd-display ";XGetVisualInfo: ~A" vis))
		  (if (not (= (.depth (car vis)) 16)) (snd-display ";depth vis: ~A" (.depth (car vis))))
		  (if (not (= (.screen (car vis)) 0)) (snd-display ";screen vis: ~A" (.screen (car vis))))
		  (if (not (= (.class (car vis)) TrueColor)) (snd-display ";class vis: ~A (~A)" (.class (car vis)) TrueColor))
		  (if (not (= (.colormap_size (car vis)) 64)) (snd-display ";colormap_size vis: ~A" (.colormap_size (car vis))))
		  (if (and (not (XVisualInfo? (XMatchVisualInfo dpy 0 24 TrueColor)))
			   (not (XVisualInfo? (XMatchVisualInfo dpy 0 16 TrueColor))))
		      (snd-display ";XMatchVisualInfo: ~A" (XMatchVisualInfo dpy 0 24 TrueColor))))
		(let ((e (XEvent KeyPress))
		      (cast-current-time (list 'Time CurrentTime)))
		  (set! (.type e) KeyPress)
		  (set! (.window e) wn)
		  (set! (.display e) dpy)
		  (set! (.root e) (RootWindow dpy (DefaultScreen dpy)))
		  (set! (.x e) 0)
		  (set! (.y e) 0)
		  (set! (.x_root e) 0)
		  (set! (.y_root e) 0)
		  (set! (.keycode e) (XKeysymToKeycode dpy (list 'KeySym 60)))
		  (set! (.state e) 0)
		  (set! (.time e) cast-current-time)
		  (set! (.same_screen e) #t)
		  (set! (.subwindow e) (list 'Window None))
		  (let ((val (XLookupString e)))
		    (if (not (equal? val (list 1 "<" (list 'KeySym 60))))
			(snd-display ";XLookupString: ~A" val)))
		  (let ((val (XFilterEvent e wn)))
		    (if val (snd-display ";XFilterEvent: ~A" val)))
		  (let ((val (XLookupKeysym e 0)))
		    (if (not (equal? val (list 'KeySym 60)))
			(snd-display ";XLookupKeysym: ~A" val))))
		(XCheckMaskEvent dpy KeyPressMask)

		(let ((cursor (XCreateFontCursor dpy XC_circle)))
		  (if (not (Cursor? cursor)) 
		      (snd-display ";XCreateFontCursor: ~A" cursor)
		      (begin
			(XDefineCursor dpy wn cursor)
			(XUndefineCursor dpy wn)
			(let ((old (XmGetMenuCursor dpy)))
			  (if (not (Cursor? old)) (snd-display ";XmGetMenuCursor: ~A" old))
			  (XmSetMenuCursor dpy cursor)
			  (if (not (equal? cursor (XmGetMenuCursor dpy))) (snd-display ";XmSetMenuCursor: ~A ~A" cursor (XmGetMenuCursor dpy)))
			  (XmSetMenuCursor dpy old)))))

		(let* ((vals (XGetGCValues dpy gc (+ GCFunction GCForeground GCBackground GCLineWidth GCLineStyle 
						      GCCapStyle GCJoinStyle GCFillStyle GCFillRule GCTileStipXOrigin
						      GCTileStipYOrigin GCSubwindowMode GCGraphicsExposures GCClipXOrigin
						      GCClipYOrigin GCDashOffset GCArcMode)))
		       (val1 (cadr vals)))
		  (if (= (car vals) 0)
		      (snd-display ";XGetGCValues failed"))
		  
		  (if (not (equal? (.function val1) GXcopy))
		      (snd-display ";function: ~A ~A" (.function val1) GXcopy))
		  (if (not (equal? (.line_width val1) 3)) 
		      (snd-display ";line_width: ~A ~A" (.line_width val1) 3))
		  (if (not (equal? (.line_style val1) LineDoubleDash)) 
		      (snd-display ";line_style: ~A ~A" (.line_style val1) LineDoubleDash))
		  (if (not (equal? (.background val1) (BlackPixelOfScreen (current-screen)))) 
		      (snd-display ";background: ~A ~A" (.background val1) (BlackPixelOfScreen (current-screen))))
		  (if (not (equal? (.foreground val1) (WhitePixelOfScreen (current-screen)))) 
		      (snd-display ";foreground: ~A ~A" (.foreground val1) (WhitePixelOfScreen (current-screen))))
		  (if (not (equal? (.cap_style val1) CapButt)) 
		      (snd-display ";cap_style: ~A ~A" (.cap_style val1) CapButt))
		  (if (not (equal? (.join_style val1) JoinMiter)) 
		      (snd-display ";join_style: ~A ~A" (.join_style val1) JoinMiter))
		  (if (not (equal? (.fill_style val1) FillStippled)) 
		      (snd-display ";fill_style: ~A ~A" (.fill_style val1) FillStippled))
		  (if (not (equal? (.fill_rule val1) WindingRule)) 
		      (snd-display ";fill_rule: ~A ~A" (.fill_rule val1) WindingRule))
		  (if (not (equal? (.arc_mode val1) ArcPieSlice))
		      (snd-display ";arc_mode: ~A ~A" (.arc_mode val1) ArcPieSlice))
		  (if (not (equal? (.ts_x_origin val1) 0)) 
		      (snd-display ";ts_x_origin: ~A ~A" (.ts_x_origin val1) 0))
		  (if (not (equal? (.ts_y_origin val1) 0)) 
		      (snd-display ";ts_y_origin: ~A ~A" (.ts_y_origin val1) 0))
		  (if (not (equal? (.subwindow_mode val1) IncludeInferiors)) 
		      (snd-display ";subwindow_mode: ~A ~A" (.subwindow_mode val1) IncludeInferiors))
		  (if (not (equal? (.graphics_exposures val1) #t)) 
		      (snd-display ";graphics_exposures: ~A ~A" (.graphics_exposures val1) #t))
		  (if (not (equal? (.clip_x_origin val1) 1)) 
		      (snd-display ";clip_x_origin: ~A ~A" (.clip_x_origin val1) 1))
		  (if (not (equal? (.clip_y_origin val1) 1)) 
		      (snd-display ";clip_y_origin: ~A ~A" (.clip_y_origin val1) 1))
		  (if (not (equal? (.dash_offset val1) 1))
		      (snd-display ";dash_offset: ~A ~A" (.dash_offset val1) 1))

		  (set! (.plane_mask val) 0)
		  (if (not (equal? (.plane_mask val) 0)) 
		      (snd-display ";plane_mask: ~A ~A" (.plane_mask val) 0))
		  (set! (.tile val) (list 'Pixmap 0))
		  (if (not (equal? (.tile val) (list 'Pixmap 0)))
		      (snd-display ";tile: ~A" (.tile val)))
		  (set! (.stipple val) (list 'Pixmap 0))
		  (if (not (equal? (.stipple val) (list 'Pixmap 0)))
		      (snd-display ";stipple: ~A" (.stipple val)))

		  (let* ((dpy (XtDisplay (cadr (main-widgets))))
			 (win (XtWindow (cadr (main-widgets))))
			 (attr (XSetWindowAttributes #f (basic-color) #f (highlight-color)))
			 (newwin (XCreateWindow dpy win 10 10 100 100 3 
						 CopyFromParent InputOutput (list 'Visual CopyFromParent)
						 (logior CWBackPixel CWBorderPixel)
						 attr)))
		    (if (not (= (.do_not_propagate_mask attr) 0)) (snd-display ";do_not_propagate_mask: ~A" (.do_not_propagate_mask attr)))
		    (if (not (= (.event_mask attr) 0)) (snd-display ";event_mask: ~A" (.event_mask attr)))
		    (if (not (= (.backing_pixel attr) 0)) (snd-display ";backing_pixel: ~A" (.backing_pixel attr)))
		    (if (not (= (.border_pixel attr) 0)) (snd-display ";border_pixel: ~A" (.border_pixel attr)))
		    (if (not (= (cadr (.border_pixmap attr)) 0)) (snd-display ";border_pixmap: ~A" (.border_pixmap attr)))
		    (if (not (= (.background_pixel attr) 0)) (snd-display ";background_pixel: ~A" (.background_pixel attr)))
		    (if (not (= (cadr (.background_pixmap attr)) 0)) (snd-display ";background_pixmap: ~A" (.background_pixmap attr)))
		    (if (not (= (.backing_planes attr) 0)) (snd-display ";backing_planes: ~A" (.backing_planes attr)))
		    (if (.save_under attr) (snd-display ";save_under: ~A" (.save_under attr)))
		    (if (not (= (cadr (.cursor attr)) 0)) (snd-display ";cursor: ~A" (.cursor attr)))
		    (if (not (Window? newwin)) (snd-display ";XCreateWindow: ~A" newwin))
		    (XChangeWindowAttributes dpy newwin (logior CWBackPixel) (XSetWindowAttributes #f (basic-color)))
		    (XDestroyWindow dpy newwin)
		    (set! newwin (XCreateSimpleWindow dpy win 10 10 100 100 3 (basic-color) (highlight-color)))
		    (XDestroyWindow dpy newwin))

		  (XSetRegion dpy gc (XPolygonRegion (list (XPoint 0 0) (XPoint 10 0) (XPoint 10 10) (XPoint 0 10)) 4 WindingRule))
		  (let ((pix (make-pixmap (cadr (main-widgets)) arrow-strs)))
		    (if (not (Pixmap? pix)) 
			(snd-display ";make-pixmap?")
			(begin
			  (XSetTile dpy gc pix)
			  (XSetStipple dpy gc (XCreateBitmapFromData dpy wn right-arrow 16 12))
			  (XSetClipMask dpy gc None)
			  (XSetState dpy gc (basic-color) (mark-color) GXcopy 0)
			  (XSetPlaneMask dpy gc 0)
			  (XSetDashes dpy gc 0 '(3 4 3 1))
			  (XSetClipRectangles dpy gc 0 0 (list (XRectangle 0 0 10 10) (XRectangle 10 10 100 100)) 2 Unsorted)
			  (let ((err (XWriteBitmapFile dpy "test.data" pix 16 12 -1 -1)))
			    (if (not (= BitmapSuccess err)) (snd-display ";XWriteBitmapFile: ~A" err)))
			  ;(let ((vals (XReadBitmapFile dpy (XtWindow (cadr (main-widgets))) "test.data")))
			  ;  (if (not (= (car vals BitmapSuccess))) (snd-display ";XReadBitmapFile: ~A" vals)))
			  ;(let ((vals (XReadBitmapFileData "test.data")))
			  ;  (if (not (= (car vals BitmapSuccess))) (snd-display ";XReadBitmapFileData: ~A" vals)))

			  (let* ((fid (XLoadFont dpy "cursor"))
				 (col (XColor))
				 (col1 (XColor))
				 (scr (DefaultScreen dpy))
				 (cmap (DefaultColormap dpy scr)))
			    (XAllocNamedColor dpy cmap "blue" col col)
			    (XAllocNamedColor dpy cmap "green" col1 col1)
			    (let ((vals (XCreateGlyphCursor dpy fid None XC_dot 0 col col1)))
			      (if (not (Cursor? vals)) (snd-display ";XCreateGlyphCursor: ~A" vals)))
			    (let ((vals (XCreatePixmapCursor dpy pix None col col1 5 5)))
			      (if (not (Cursor? vals)) (snd-display ";XCreatePixmapCursor: ~A" vals))
			      (XRecolorCursor dpy vals col1 col))
			    (XAllocColorPlanes dpy cmap #f 2 1 1 1)
			    (XAllocColorCells dpy cmap #f 1 1))

			    
			  )))
		  (let* ((fid (XLoadFont dpy "-adobe-times-medium-r-*-*-14-*-*-*-*-*-*-*"))
			 (fnt (XLoadQueryFont dpy "-adobe-times-medium-r-*-*-14-*-*-*-*-*-*-*"))
			 (chs (XQueryTextExtents dpy fid "hiho"))
			 (struct (list-ref chs 4))
			 (fnt1 (XQueryFont dpy fid)))
		    (if (not (Font? fid)) (snd-display ";XLoadFont: ~A" fid))
		    (if (not (XFontStruct? fnt)) (snd-display ";XLoadQueryFont: ~A" fnt))
		    (if (not (XFontStruct? fnt1)) (snd-display ";XQueryFont: ~A" fnt1))
		    (if (not (XCharStruct? struct)) (snd-display ";XQueryTextExtents: ~A" chs))
		    (if (not (= (list-ref chs 2) 12)) (snd-display ";XQueryTextExtents max ascent: ~A" (list-ref chs 2)))
		    (if (not (= (list-ref chs 3) 3)) (snd-display ";XQueryTextExtents max descent: ~A" (list-ref chs 3)))
		    (if (not (= (.lbearing struct) 0)) (snd-display ";lbearing: ~A" (.lbearing struct)))
		    (if (not (= (.rbearing struct) 23)) (snd-display ";rbearing: ~A" (.rbearing struct)))
		    (if (not (= (.width struct) 24)) (snd-display ";width: ~A" (.width struct)))
		    (if (not (= (.ascent struct) 10)) (snd-display ";ascent: ~A" (.ascent struct)))
		    (if (not (= (.descent struct) 0)) (snd-display ";descent: ~A" (.descent struct)))
		    (if (not (= (.attributes struct) 0)) (snd-display ";attributes: ~A" (.attributes struct)))
		    (let ((fid (load-font "-*-helvetica-bold-r-*-*-14-*-*-*-*-*-*-*")))
		      (if (not (Font? fid)) (snd-display ";load-font -> ~A" fid)))
		    )
		  (XFreeGC (XtDisplay (cadr (main-widgets))) gc)
		  )))
	    
	    (let ((atoms (list XA_PRIMARY XA_SECONDARY XA_ARC XA_ATOM XA_BITMAP XA_CARDINAL XA_COLORMAP XA_CURSOR XA_CUT_BUFFER0
			       XA_CUT_BUFFER1 XA_CUT_BUFFER2 XA_CUT_BUFFER3 XA_CUT_BUFFER4 XA_CUT_BUFFER5 XA_CUT_BUFFER6
			       XA_CUT_BUFFER7 XA_DRAWABLE XA_FONT XA_INTEGER XA_PIXMAP XA_POINT XA_RECTANGLE XA_RESOURCE_MANAGER
			       XA_RGB_COLOR_MAP XA_RGB_BEST_MAP XA_RGB_BLUE_MAP XA_RGB_DEFAULT_MAP XA_RGB_GRAY_MAP XA_RGB_GREEN_MAP
			       XA_RGB_RED_MAP XA_STRING XA_VISUALID XA_WINDOW XA_WM_COMMAND XA_WM_HINTS XA_WM_CLIENT_MACHINE
			       XA_WM_ICON_NAME XA_WM_ICON_SIZE XA_WM_NAME XA_WM_NORMAL_HINTS XA_WM_SIZE_HINTS XA_WM_ZOOM_HINTS
			       XA_MIN_SPACE XA_NORM_SPACE XA_MAX_SPACE XA_END_SPACE XA_SUPERSCRIPT_X XA_SUPERSCRIPT_Y
			       XA_SUBSCRIPT_X XA_SUBSCRIPT_Y XA_UNDERLINE_POSITION XA_UNDERLINE_THICKNESS XA_STRIKEOUT_ASCENT
			       XA_STRIKEOUT_DESCENT XA_ITALIC_ANGLE XA_X_HEIGHT XA_QUAD_WIDTH XA_WEIGHT XA_POINT_SIZE
			       XA_RESOLUTION XA_COPYRIGHT XA_NOTICE XA_FONT_NAME XA_FAMILY_NAME XA_FULL_NAME XA_CAP_HEIGHT
			       XA_WM_CLASS XA_WM_TRANSIENT_FOR))
		  (atom-names (list 'XA_PRIMARY 'XA_SECONDARY 'XA_ARC 'XA_ATOM 'XA_BITMAP 'XA_CARDINAL 'XA_COLORMAP 'XA_CURSOR 'XA_CUT_BUFFER0
				    'XA_CUT_BUFFER1 'XA_CUT_BUFFER2 'XA_CUT_BUFFER3 'XA_CUT_BUFFER4 'XA_CUT_BUFFER5 'XA_CUT_BUFFER6
				    'XA_CUT_BUFFER7 'XA_DRAWABLE 'XA_FONT 'XA_INTEGER 'XA_PIXMAP 'XA_POINT 'XA_RECTANGLE 'XA_RESOURCE_MANAGER
				    'XA_RGB_COLOR_MAP 'XA_RGB_BEST_MAP 'XA_RGB_BLUE_MAP 'XA_RGB_DEFAULT_MAP 'XA_RGB_GRAY_MAP 'XA_RGB_GREEN_MAP
				    'XA_RGB_RED_MAP 'XA_STRING 'XA_VISUALID 'XA_WINDOW 'XA_WM_COMMAND 'XA_WM_HINTS 'XA_WM_CLIENT_MACHINE
				    'XA_WM_ICON_NAME 'XA_WM_ICON_SIZE 'XA_WM_NAME 'XA_WM_NORMAL_HINTS 'XA_WM_SIZE_HINTS 'XA_WM_ZOOM_HINTS
				    'XA_MIN_SPACE 'XA_NORM_SPACE 'XA_MAX_SPACE 'XA_END_SPACE 'XA_SUPERSCRIPT_X 'XA_SUPERSCRIPT_Y
				    'XA_SUBSCRIPT_X 'XA_SUBSCRIPT_Y 'XA_UNDERLINE_POSITION 'XA_UNDERLINE_THICKNESS 'XA_STRIKEOUT_ASCENT
				    'XA_STRIKEOUT_DESCENT 'XA_ITALIC_ANGLE 'XA_X_HEIGHT 'XA_QUAD_WIDTH 'XA_WEIGHT 'XA_POINT_SIZE
				    'XA_RESOLUTION 'XA_COPYRIGHT 'XA_NOTICE 'XA_FONT_NAME 'XA_FAMILY_NAME 'XA_FULL_NAME 'XA_CAP_HEIGHT
				    'XA_WM_CLASS 'XA_WM_TRANSIENT_FOR)))
	      (for-each
	       (lambda (n name)
		 (if (not (Atom? n))
		     (snd-display ";Atom: ~A -> ~A" name (Atom? n))))
	       atoms
	       atom-names))

	    (let ((r (XRectangle 10 20 100 110)))
	      (if (not (= (.width r) 100))
		  (snd-display ";XRectangle width: ~A" (.width r)))
	      (if (not (= (.height r) 110))
		  (snd-display ";XRectangle height: ~A" (.height r)))
	      (if (not (= (.x r) 10))
		  (snd-display ";XRectangle x: ~A" (.x r)))
	      (if (not (= (.y r) 20))
		  (snd-display ";XRectangle y: ~A" (.y r)))
	      (set! (.width r) 10)
	      (if (not (= (.width r) 10))
		  (snd-display ";set XRectangle width: ~A" (.width r)))
	      (set! (.height r) 11)
	      (if (not (= (.height r) 11))
		  (snd-display ";set XRectangle height: ~A" (.height r)))
	      (set! (.x r) 1)
	      (if (not (= (.x r) 1))
		  (snd-display ";set XRectangle x: ~A" (.x r)))
	      (set! (.y r) 2)
	      (if (not (= (.y r) 2))
		  (snd-display ";XRectangle y: ~A" (.y r))))
	    
	    (let ((r (XArc 10 20 100 110 0 235)))
	      (if (not (= (.width r) 100))
		  (snd-display ";XArc width: ~A" (.width r)))
	      (if (not (= (.height r) 110))
		  (snd-display ";XArc height: ~A" (.height r)))
	      (if (not (= (.x r) 10))
		  (snd-display ";XArc x: ~A" (.x r)))
	      (if (not (= (.y r) 20))
		  (snd-display ";XArc y: ~A" (.y r)))
	      (if (not (= (.angle1 r) 0))
		  (snd-display ";XArc angle1: ~A" (.angle1 r)))
	      (if (not (= (.angle2 r) 235))
		  (snd-display ";XArc angle2: ~A" (.angle2 r)))
	      (set! (.width r) 10)
	      (if (not (= (.width r) 10))
		  (snd-display ";set XArc width: ~A" (.width r)))
	      (set! (.height r) 11)
	      (if (not (= (.height r) 11))
		  (snd-display ";set XArc height: ~A" (.height r)))
	      (set! (.x r) 1)
	      (if (not (= (.x r) 1))
		  (snd-display ";set XArc x: ~A" (.x r)))
	      (set! (.y r) 2)
	      (if (not (= (.y r) 2))
		  (snd-display ";set XArc y: ~A" (.y r)))
	      (set! (.angle1 r) 123)
	      (if (not (= (.angle1 r) 123))
		  (snd-display ";set XArc angle1: ~A" (.angle1 r)))
	      (set! (.angle2 r) 321)
	      (if (not (= (.angle2 r) 321))
		  (snd-display ";set XArc angle2: ~A" (.angle2 r))))
	    
	    (let ((r (XPoint 10 20)))
	      (if (not (= (.x r) 10))
		  (snd-display ";XPoint x: ~A" (.x r)))
	      (if (not (= (.y r) 20))
		  (snd-display ";XPoint y: ~A" (.y r)))
	      (set! (.x r) 1)
	      (if (not (= (.x r) 1))
		  (snd-display ";set XPoint x: ~A" (.x r)))
	      (set! (.y r) 2)
	      (if (not (= (.y r) 2))
		  (snd-display ";set XPoint y: ~A" (.y r))))
	    
	    (let ((r (XSegment 10 20 100 110)))
	      (if (not (= (.x1 r) 10))
		  (snd-display ";XSegment x1: ~A" (.x1 r)))
	      (if (not (= (.y1 r) 20))
		  (snd-display ";XSegment y1: ~A" (.y1 r)))
	      (if (not (= (.x2 r) 100))
		  (snd-display ";XSegment x2: ~A" (.x2 r)))
	      (if (not (= (.y2 r) 110))
		  (snd-display ";XSegment y2: ~A" (.y2 r)))
	      (set! (.x1 r) 1)
	      (if (not (= (.x1 r) 1))
		  (snd-display ";set XSegment x1: ~A" (.x1 r)))
	      (set! (.y1 r) 2)
	      (if (not (= (.y1 r) 2))
		  (snd-display ";set XSegment y1: ~A" (.y1 r)))
	      (set! (.x2 r) 10)
	      (if (not (= (.x2 r) 10))
		  (snd-display ";set XSegment x2: ~A" (.x2 r)))
	      (set! (.y2 r) 11)
	      (if (not (= (.y2 r) 11))
		  (snd-display ";set XSegment y2: ~A" (.y2 r))))

	    (let ((c (XColor)))
	      (set! (.red c) 1)
	      (if (not (= (.red c) 1)) (snd-display ";Xcolor red: ~A" (.red c)))
	      (set! (.green c) 1)
	      (if (not (= (.green c) 1)) (snd-display ";Xcolor green: ~A" (.green c)))
	      (set! (.blue c) 1)
	      (if (not (= (.blue c) 1)) (snd-display ";Xcolor blue: ~A" (.blue c)))
	      (set! (.flags c) DoRed)
	      (if (not (= (.flags c) DoRed)) (snd-display ";Xcolor flags: ~A" (.flags c)))
	      (if (not (= (.pad c) 0)) (snd-display ";pad: ~A" (.pad c)))
	      (set! (.pixel c) (basic-color))
	      (if (not (equal? (.pixel c) (basic-color))) (snd-display ";Xcolor pixel: ~A" (.pixel c))))

	    (let ((obj (XTextItem "hiho" 4 3 (list 'Font 1))))
	      (if (not (XTextItem? obj)) (snd-display ";XTextItem -> ~A" obj))
	      (if (not (equal? (.font obj) (list 'Font 1))) (snd-display ";font ~A" (.font obj)))
	      (set! (.font obj) (list 'Font 2))
	      (if (not (equal? (.font obj) (list 'Font 2))) (snd-display ";set font ~A" (.font obj)))
	      (if (not (string=? (.chars obj) "hiho")) (snd-display ";chars: ~A" (.chars obj)))
	      (if (not (= (.nchars obj) 4)) (snd-display ";chars: ~A" (.nchars obj)))
	      (set! (.chars obj) "away!")
	      (set! (.nchars obj) 5)
	      (if (not (string=? (.chars obj) "away!")) (snd-display ";set chars: ~A" (.chars obj)))
	      (if (not (= (.nchars obj) 5)) (snd-display ";set chars: ~A" (.nchars obj)))
	      (if (not (= (.delta obj) 3)) (snd-display ";delta ~A" (.delta obj)))
	      (set! (.delta obj) 4)
	      (if (not (= (.delta obj) 4)) (snd-display ";set delta ~A" (.delta obj)))
	      )

	    (let ((reg (XPolygonRegion (list (XPoint 0 0) (XPoint 10 0) (XPoint 10 10) (XPoint 0 10)) 4 WindingRule)))
	      (if (not (XPointInRegion reg 4 4)) (snd-display ";XPointInRegion"))
	      (XShrinkRegion reg 1 2)
	      (if (not (XPointInRegion reg 4 7)) (snd-display ";t XShrinkRegion"))
	      (if (XPointInRegion reg 4 9) (snd-display ";f XShrinkRegion"))
	      (XOffsetRegion reg 1 2)
	      (if (not (XPointInRegion reg 4 9)) (snd-display ";t XOffsetRegion"))
	      (if (XPointInRegion reg 1 9) (snd-display ";f XOffsetRegion"))
	      (let ((reg2 (XCreateRegion))
		    (reg1 (XPolygonRegion (list (XPoint 2 2) (XPoint 10 2) (XPoint 10 10) (XPoint 2 10)) 4 WindingRule)))
		(if (XEqualRegion reg reg1) (snd-display ";f XEqualRegion"))
		(if (XEmptyRegion reg) (snd-display ";f XEmptyRegion"))
		(XXorRegion reg reg1 reg2)
		(let ((box (XClipBox reg2)))
		  (if (or (not (= (.x (cadr box)) 2))
			  (not (= (.y (cadr box)) 2))
			  (not (= (.width (cadr box)) 8))
			  (not (= (.height (cadr box)) 2)))
		      (snd-display ";XXorRegion: ~A ~A ~A ~A" (.x (cadr box)) (.y (cadr box)) (.width (cadr box)) (.height (cadr box)))))
		(XUnionRegion reg reg1 reg2)
		(let ((box (XClipBox reg2)))
		  (if (or (not (= (.x (cadr box)) 2))
			  (not (= (.y (cadr box)) 2))
			  (not (= (.width (cadr box)) 8))
			  (not (= (.height (cadr box)) 8)))
		      (snd-display ";XUnionRegion: ~A ~A ~A ~A" (.x (cadr box)) (.y (cadr box)) (.width (cadr box)) (.height (cadr box)))))
		(XSubtractRegion reg reg1 reg2)
		(let ((box (XClipBox reg2)))
		  (if (or (not (= (.x (cadr box)) 0))
			  (not (= (.y (cadr box)) 0))
			  (not (= (.width (cadr box)) 0))
			  (not (= (.height (cadr box)) 0)))
		      (snd-display ";XSubtractRegion: ~A ~A ~A ~A" (.x (cadr box)) (.y (cadr box)) (.width (cadr box)) (.height (cadr box)))))
		(XIntersectRegion reg reg1 reg2)
		(let ((box (XClipBox reg2)))
		  (if (or (not (= (.x (cadr box)) 2))
			  (not (= (.y (cadr box)) 4))
			  (not (= (.width (cadr box)) 8))
			  (not (= (.height (cadr box)) 6)))
		  (snd-display ";XIntersectRegion: ~A ~A ~A ~A" (.x (cadr box)) (.y (cadr box)) (.width (cadr box)) (.height (cadr box)))))
		(XUnionRectWithRegion (XRectangle 1 3 100 100) reg1 reg2)
		(let ((box (XClipBox reg2)))
		  (if (or (not (= (.x (cadr box)) 1))
			  (not (= (.y (cadr box)) 2))
			  (not (= (.width (cadr box)) 100))
			  (not (= (.height (cadr box)) 101)))
		      (snd-display ";XUnionRectWithRegion: ~A ~A ~A ~A" (.x (cadr box)) (.y (cadr box)) (.width (cadr box)) (.height (cadr box)))))
		(XRectInRegion reg 0 0 100 100)
		(let ((box (XClipBox reg1)))
		  (if (or (not (= (.x (cadr box)) 2))
			  (not (= (.y (cadr box)) 2))
			  (not (= (.width (cadr box)) 8))
			  (not (= (.height (cadr box)) 8)))
		      (snd-display ";XClipBox: ~A ~A ~A ~A" (.x (cadr box)) (.y (cadr box)) (.width (cadr box)) (.height (cadr box)))))
		(XDestroyRegion reg1)
		))

	    (let ((xid (XUniqueContext))
		  (dpy (XtDisplay (cadr (main-widgets)))))
	      (if (not (eq? (car xid) 'XContext))
		  (snd-display ";XUniqueContext: ~A" xid))
	      (XSaveContext dpy  123 xid "hiho")
	      (let ((val (XFindContext dpy 123 xid)))
		(if (or (not (= 0 (car val)))
			(not (string=? (cadr val) "hiho")))
		    (snd-display ";XFindContext: ~A" val)))
	      (XDeleteContext dpy 123 xid)
	      (XStoreBytes dpy "hiho" 4)
	      (if (not (string=? (XFetchBytes dpy) "hiho")) (snd-display ";XStoreBytes: ~A" (XFetchBytes dpy)))
	      (XStoreBuffer dpy "hiho" 4 1)
	      (if (not (string=? (XFetchBuffer dpy 1) "hiho")) (snd-display ";XStoreBuffer: ~A" (XFetchBuffer dpy)))
	      )


	    ;; ---------------- Xt tests ----------------
	    (let ((name (XtGetApplicationNameAndClass (XtDisplay (cadr (main-widgets))))))
	      (if (not (equal? name (list "snd" "Snd")))
		  (snd-display ";XtGetApplicationNameAndClass: ~A?" name)))
	    (let ((dpys (XtGetDisplays (car (main-widgets)))))
	      (if (not (Display? (car dpys)))
		  (snd-display ";XtGetDisplays: ~A?" dpys)))
	    (let ((time (XtGetSelectionTimeout))
		  (time1 (XtAppGetSelectionTimeout (car (main-widgets)))))
	      (if (or (not (number? time))
		      (not (= time time1))
		      (< time 1))
		  (snd-display ";XtGetSelectionTimeout: ~A ~A?" time time1))
	      (XtAppSetSelectionTimeout (car (main-widgets)) 4000)
	      (if (not (= (XtAppGetSelectionTimeout (car (main-widgets))) 4000))
		  (snd-display ";XtAppSetSelectionTimeout: ~A" (XtAppGetSelectionTimeout (car (main-widgets)))))
	      (XtAppSetSelectionTimeout (car (main-widgets)) time1))
	    (let ((app (XtDisplayToApplicationContext (XtDisplay (cadr (main-widgets)))))
		  (orig (car (main-widgets)))
		  (wid (XtWidgetToApplicationContext (cadr (main-widgets)))))
	      (if (not (equal? app orig))
		  (snd-display ";XtDisplayToApplicationContext: ~A ~A?" app orig))
	      (if (not (equal? app wid))
		  (snd-display ";XtWidgetToApplicationContext: ~A ~A?" app wid)))
	    (if (not (string=? (XtName (caddr (main-widgets))) "mainpane"))
		(snd-display ";XtName main pane: ~A" (XtName (caddr (main-widgets)))))
	    (if (not (= (XtGetMultiClickTime (XtDisplay (cadr (main-widgets)))) 200))
		(snd-display ";XtGetMultiClickTime: ~A" (XtGetMultiClickTime (XtDisplay (cadr (main-widgets))))))
	    (XtSetMultiClickTime (XtDisplay (cadr (main-widgets))) 250)
	    (if (not (= (XtGetMultiClickTime (XtDisplay (cadr (main-widgets)))) 250))
		(snd-display ";XtSetMultiClickTime: ~A" (XtGetMultiClickTime (XtDisplay (cadr (main-widgets))))))
	    (XtGetResourceList xmListWidgetClass)
	    
	    (let* ((shell (cadr (main-widgets)))
		   (wid (XtCreateWidget "wid" xmFormWidgetClass shell '()))
		   (wid1 (XtCreateWidget "wid1" xmPushButtonWidgetClass wid '()))
		   (wid2 (XtVaCreateWidget "wid" xmFormWidgetClass shell '())))
	      (if (XtIsApplicationShell wid) (snd-display ";XtIsApplicationShell"))
	      (if (not (XtIsApplicationShell shell)) (snd-display ";XtIsApplicationShell of appshell"))
	      (if (not (XtIsComposite wid)) (snd-display ";XtIsComposite"))
	      (if (not (XtIsConstraint wid)) (snd-display ";XtIsConstraint"))
	      (if (XtIsManaged wid) (snd-display ";XtIsManaged"))
	      (if (not (XtIsObject wid)) (snd-display ";XtIsObject"))
	      (if (XtIsOverrideShell wid) (snd-display ";XtIsOverrideShell"))
	      (if (XtIsRealized wid) (snd-display ";XtIsRealized"))
	      (if (not (XtIsRealized shell)) (snd-display ";XtIsRealized main shell"))
	      (if (not (XtIsRectObj wid)) (snd-display ";XtIsRectObj"))
	      (if (not (XtIsSensitive wid)) (snd-display ";XtIsSensitive"))
	      (if (not (XtIsSensitive shell)) (snd-display ";XtIsSensitive of main shell"))
	      (XtSetSensitive wid1 #t)
	      (if (not (XtIsSensitive wid1)) (snd-display ";XtIsSensitive of button"))
	      (if (XtIsSessionShell wid) (snd-display ";XtIsSessionShell"))
	      (if (XtIsShell wid) (snd-display ";XtIsShell"))
	      (if (not (XtIsShell shell)) (snd-display ";XtIsShell of main shell"))
	      (if (XtIsTopLevelShell wid) (snd-display ";XtIsTopLevelShell"))
	      (if (not (XtIsTopLevelShell shell)) (snd-display ";XtIsTopLevelShell of main shell"))
	      (if (XtIsTransientShell wid) (snd-display ";XtIsTransientShell"))
	      (if (XtIsVendorShell wid) (snd-display ";XtIsVendorShell"))
	      (if (not (XtIsVendorShell shell)) (snd-display ";XtIsVendorShell of main shell"))
	      (if (XtIsWMShell wid) (snd-display ";XtIsWMShell"))
	      (if (not (XtIsWidget wid)) (snd-display ";XtIsWidget"))
	      (XtRealizeWidget wid)
	      (if (not (XtIsRealized wid)) (snd-display ";XtRealizeWidget?"))
	      (XtAddGrab shell #f #f)
	      (XtRemoveGrab shell)
	      (XtMakeResizeRequest wid 200 200)
	      (XtMapWidget wid)
	      (XtUnmapWidget wid)
	      (XtUnrealizeWidget wid)
	      (XtDestroyWidget wid1))
	    (XtAppWarningMsg (car (main-widgets)) "conversionError" "string" "hi" "oops" '("hi") 1)
	    (XtWarningMsg "conversionError" "string" "hi" "oops: %s" (list "hi") 1)
	    (XtFree 0) (XtCalloc 0 0) (XtMalloc 0) (XtRealloc 0 0)
	    (XtSetLanguageProc 
	      (car (main-widgets)) 
	      (lambda (dpy str data)
		(snd-display ";YOW: language proc: got ~A ~A" str data))
	      "who called us?")
	    (XtSetLanguageProc (car (main-widgets)) #f "oops")
	    (XtSetLanguageProc #f #f "oops")
	    (XtMergeArgLists (list 1 2) 2 (list 1) 1)

	    (let* ((shell (cadr (main-widgets)))
		   (dpy (XtDisplay shell)))
	      (if (not (equal? (XtClass shell) applicationShellWidgetClass))
		  (snd-display ";XtClass shell: ~A" (XtClass shell)))
	      (if (not (equal? (XtSuperclass shell) topLevelShellWidgetClass))
		  (snd-display ";XtSuperclass shell: ~A" (XtClass shell)))
	      (if (not (string=? (XtName shell) "snd"))
		  (snd-display ";XtName: ~A" (XtName shell)))
	      (if (not (equal? (XtWindow shell) (XtWindowOfObject shell)))
		  (snd-display ";XtWindow: ~A ~A" (XtWindow shell) (XtWindowOfObject shell)))
	      (if (not (equal? (XtScreen shell) (XtScreenOfObject shell)))
		  (snd-display ";XtScreen: ~A ~A" (XtScreen shell) (XtScreenOfObject shell)))
	      (if (not (equal? (XtDisplay shell) (XtDisplayOfObject shell)))
		  (snd-display ";XtDisplay: ~A ~A" (XtDisplay shell) (XtDisplayOfObject shell)))
	      (if (not (Time? (XtLastTimestampProcessed dpy)))
		  (snd-display ";XtLastTimestampProcessed: ~A" (XtLastTimestampProcessed dpy)))
	      (if (not (XEvent? (XtLastEventProcessed dpy)))
		  (snd-display ";XtLastEventProcessed: ~A" (XtLastEventProcessed dpy)))
	      (XtBuildEventMask shell)
	      (let ((k (XtConvertCase dpy (XKeycodeToKeysym dpy (list 'KeyCode XK_b) 0)))
		    (x (XConvertCase (XKeycodeToKeysym dpy (list 'KeyCode XK_b) 0))))
		(if (not (KeySym? (car k)))
		    (snd-display ";XtConvertCase: ~A" k))
		(if (not (equal? k x))
		    (snd-display ";X(t)ConvertCase: ~A ~A" k x)))
	      (let ((val 0))
		(XtRegisterCaseConverter 
		 dpy
		 (lambda (dp key)
		   (set! val 123)
		   (list (list 'KeySym 65)
			 (list 'KeySym 97)))
		 (list 'KeySym 65)
		 (list 'KeySym 65))
		(XtConvertCase dpy (list 'KeySym 65))
		(if (not (= val 123)) (snd-display ";XtRegisterCaseConverter: ~A" val)))
	      (XtRegisterGrabAction (lambda (a b c) #f) #f ColormapChangeMask GrabModeSync GrabModeAsync)
	      (let ((vals (XtTranslateKeycode dpy (list 'KeyCode XK_B) 0)))
		(if (or (not (= (car vals) 0))
			(not (KeySym? (cadr vals))))
		    (snd-display ";XtTranslateKeycode: ~A" vals))
		(if (not (equal? vals (XtTranslateKey dpy (list 'KeyCode XK_B) 0)))
		    (snd-display ";XtTranslateKey: ~A ~A" vals (XtTranslateKey dpy (list 'KeyCode XK_B) 0)))
		(XtSetKeyTranslator dpy #f)
		(if (not (equal? vals (XtTranslateKeycode dpy (list 'KeyCode XK_B) 0)))
		    (snd-display ";XtSetKeyTranslator #f: ~A ~A" vals (XtTranslateKeycode dpy (list 'KeyCode XK_B) 0)))
		(XtSetKeyTranslator dpy (lambda (d k m)
					   (if (not (equal? d dpy)) (snd-display ";d in keyproc: ~A ~A" d dpy))
					   (XtTranslateKey d k m)))
		(let ((newvals (XtTranslateKeycode dpy (list 'KeyCode XK_B) 0)))
		  (if (not (equal? vals newvals)) (snd-display ";XtSetKeyTranslator: ~A ~A" vals newvals)))
		(XtSetKeyTranslator dpy #f))
	      (if (not (KeySym? (cadr (XmTranslateKey dpy (list 'KeyCode XK_B) 0))))
		  (snd-display ";XmTranslateKey: ~A" (XmTranslateKey dpy XK_B 0)))
	      (let ((kv (XtKeysymToKeycodeList dpy (list 'KeySym 65509))))
		(if (not (equal? (car kv) (list 'KeyCode 66))) 
		    (snd-display ";XtKeysymToKeycodeList: ~A ~A" kv (XtKeysymToKeycodeList dpy (list 'KeySym 65509)))))
	      (XtInstallAllAccelerators (cadr (main-widgets)) (caddr (main-widgets)))
	      (XtInstallAccelerators (cadr (main-widgets)) (caddr (main-widgets)))
	      (if (not (equal? (list 0 1 2) (XtSetArg 0 1 2))) (snd-display ";XtSetArg: ~A" (XtSetArg 0 1 2)))
	      (if (not (Widget? (XtGetKeyboardFocusWidget (cadr (main-widgets)))))
		  (snd-display ";XtGetKeyboardFocusWidget: ~A" (XtGetKeyboardFocusWidget (cadr (main-widgets)))))
	      (let ((id (XtAddTimeOut 10000 (lambda (a b) 0) #f)))
		(XtRemoveTimeOut id)
		(set! id (XtAppAddTimeOut (car (main-widgets)) 10000 (lambda (a b) 0) #f))
		(XtRemoveTimeOut id))
	      (let ((id (XtAppAddInput (car (main-widgets)) 1 XtInputReadMask (lambda (a b c) #f) #f)))
		(XtRemoveInput id)
		(set! id (XtAddInput 1 XtInputReadMask (lambda (a b c) #f) #f))
		(XtRemoveInput id))
	      (let ((id (XtAppAddWorkProc (car (main-widgets)) (lambda (me) #f) #f)))
		(XtRemoveWorkProc id))
	      (if (not (equal? (caddr (main-widgets)) (XtNameToWidget (cadr (main-widgets)) "mainpane")))
		  (snd-display ";XtNameToWidget: ~A ~A" (caddr (main-widgets)) (XtNameToWidget (cadr (main-widgets)) "mainpane")))
	      (XtVaCreatePopupShell "hiho" vendorShellWidgetClass (cadr (main-widgets)) '())
	      (XtResolvePathname (XtDisplay (Widget (cadr (main-widgets)))) "app-defaults" #f #f #f #f 0 #f)
	      (XtFindFile ".snd" #f 0 #f)
	      (let ((val (XtFindFile "/lib/%N:/usr/lib/%N:/usr/local/lib/%N" (list (list #\N "libxm.so")) 1 file-exists?)))
		(if (or (not (string? val))
			(not (string=? val "/usr/local/lib/libxm.so")))
		    (snd-display ";can't find libxm? ~A" val)))

	      (XtAppLock (car (main-widgets)))
	      (XtAppUnlock (car (main-widgets)))
	      (let ((acts (XtGetActionList xmLabelWidgetClass)))
		(if (or (not (= (length acts) 4))
			(not (string=? (caar acts) "Enter")))
		    (snd-display ";XtGetActionList: ~A" acts)))
	      )

	    (let ((pop (XtCreatePopupShell "hiho" xmGrabShellWidgetClass (cadr (main-widgets))
					   (list XmNiconNameEncoding XA_STRING))))
	      (XtPopup pop XtGrabNone)
	      (XtPopdown pop))
	    (XtSetWarningHandler (lambda (n) 
				    (if (not (string=? n "hiho"))
					(snd-display ";XtWarning: ~A" n))))
	    (XtWarning "hiho")
	    (XtAppSetWarningHandler (car (main-widgets))
				     (lambda (n) 
				       (if (not (string=? n "hiho"))
					   (snd-display ";XtWarning: ~A" n))))
	    (XtAppWarning (car (main-widgets)) "hiho")
	    (XtAppSetWarningMsgHandler (car (main-widgets)) 
					(lambda (name type klass def pars num)
					  (snd-print (format #f ";ignore: ~A ~A ~A~%" name def pars))))

	    (let ((listener (list-ref (main-widgets) 4)))
	      (XtCallActionProc listener "text-transpose" (XEvent) #f 0)
	      (XtCallActionProc listener "begin-of-line" (XEvent) #f 0)
	      (XtCallActionProc listener "kill-line" (XEvent) #f 0)
	      (XtCallActionProc listener "yank" (XEvent) #f 0)
	      (XtCallActionProc listener "name-completion" (XEvent) #f 0)
	      (XtCallActionProc listener "listener-completion" (XEvent) #f 0)
	      (XtCallActionProc listener "no-op" (XEvent) #f 0)
	      (XtCallActionProc listener "delete-region" (XEvent) #f 0)
	      (let ((BEvent (XEvent ButtonPress)))
		(set! (.x BEvent) 10)
		(set! (.y BEvent) 10)
		(XtCallActionProc listener "b1-press" BEvent #f 0)
		(XtCallActionProc listener "b1-release" BEvent #f 0))
	      (XtCallActionProc listener "word-upper" (XEvent) (list "u") 1))

	    (let ((app (car (main-widgets)))
		  (str #f))
	      (XtSetErrorHandler (lambda (msg) (set! str msg)))
	      (XtError "hiho")
	      (if (or (not (string? str)) (not (string=? str "hiho"))) (snd-display ";XtError: ~A" str))
	      (XtAppSetErrorHandler app (lambda (msg) (set! str msg)))
	      (XtAppError app "hiho")
	      (if (or (not (string? str)) (not (string=? str "hiho"))) (snd-display ";XtAppError: ~A" str))
	      (XtSetErrorMsgHandler (lambda (name type class def pars numpars) (set! str name)))
	      (XtErrorMsg "name" "type" "class" "defp" (list "a") 1)
	      (if (or (not (string? str)) (not (string=? str "name"))) (snd-display ";XtErrorMsg: ~A" str))
	      (XtAppSetErrorMsgHandler app (lambda (name type class def pars numpars) (set! str name)))
	      (XtAppErrorMsg app "name" "type" "class" "defp" (list "a") 1)
	      (if (or (not (string? str)) (not (string=? str "name"))) (snd-display ";XtAppErrorMsg: ~A" str))
	      )

	    ;; ---------------- XM tests ----------------
	    (let ((dpy (XtDisplay (cadr (main-widgets))))
		  (win (XtWindow (cadr (main-widgets)))))
	      (let ((version (list-ref (XGetWindowProperty dpy win
							    (XInternAtom (XtDisplay (cadr (main-widgets)))
									  "SND_VERSION"
									  #f)
							    0 32 #f XA_STRING)
				       5)))
		(XDeleteProperty dpy win (XInternAtom dpy "AN_ATOM" #f))
		(if (not (string=? version (snd-version)))
		    (snd-display ";SND_VERSION: ~A, ~A?" version (snd-version))))
	      (change-prop "SND_VERSION" "WM_NAME" "hiho")
	      (if (not (string=? (XFetchName dpy win) "hiho")) (snd-display ";change-prop: ~A" (XFetchName dpy win))))
		       
	    (let* ((tabs (let ((ctr 0))
			   (map
			    (lambda (n)
			      (set! ctr (+ ctr 1))
			      (XmTabCreate n XmINCHES (if (= ctr 1) XmABSOLUTE XmRELATIVE) XmALIGNMENT_BEGINNING "."))
			    (list 1.5 1.5 1.5 1.5))))
		   (tablist (XmTabListInsertTabs #f tabs (length tabs) 0)))
	      (if (not (= (XmTabListTabCount tablist) (length tabs))) 
		  (snd-display ";tablist len: ~A ~A~%" (XmTabListTabCount tablist) (length tabs)))
	      (if (not (equal? (XmTabGetValues (XmTabListGetTab tablist 0)) (list 1.5 5 0 0 ".")))
		  (snd-display ";XmTabs 0: ~A" (XmTabGetValues (XmTabListGetTab tablist 0))))
	      (if (not (equal? (XmTabGetValues (XmTabListGetTab tablist 2)) (list 1.5 5 1 0 ".")))
		  (snd-display ";XmTabs 2: ~A" (XmTabGetValues (XmTabListGetTab tablist 2))))
	      (let ((copytab (XmTabListCopy tablist 0 0)))
		(if (not (equal? (XmTabGetValues (XmTabListGetTab copytab 0)) (list 1.5 5 0 0 ".")))
		    (snd-display ";XmTabListCopy 0: ~A" (XmTabGetValues (XmTabListGetTab copytab 0))))
		(let ((another (XmTabListRemoveTabs copytab (list 0 1)))
		      (atab (XmTabCreate 3.0 XmINCHES XmABSOLUTE XmALIGNMENT_BEGINNING ".")))
		  (if (not (equal? (XmTabGetValues (XmTabListGetTab another 0)) (list 1.5 5 1 0 ".")))
		      (snd-display ";XmTabListRemoveTabs: ~A" (XmTabGetValues (XmTabListGetTab another 0))))
		  (XmTabListReplacePositions (XmTabListCopy tablist 0 0) (list 1) (list atab))
		  ;; this (replacepositions) is very prone to segfaults -- *very* poorly implemented! 
		  (XmTabSetValue atab 6.0)
		  (XmTabFree atab)
		  (XmTabListFree another))
		(let ((tabl (XmStringTableProposeTablist
			      (list (XmStringCreateLocalized "a-string") (XmStringCreateLocalized "another")) 2
			      (cadr (main-widgets))
			      1.0
			      XmABSOLUTE)))
		  (if (not (XmTabList? tabl)) (snd-display ";XmStringTableProposeTabList: ~A" tabl))
		  (XmTabListFree tabl)))

	      (let ((hname (host-name))) ; from snd-motif.scm
		(if (and (not (string=? hname "fatty"))
			 (not (string=? hname "goggle")))
		    (snd-display ";host name appears to be ~A" hname)))
	      (let ((blu (x->snd-color "blue")))
		(if (not (Pixel? blu)) (snd-display ";x->snd-color can't find blue! ~A" blu))
		(if (not (equal? (color->list blu) (list 0.0 0.0 1.0)))
		    (snd-display ";x->snd-color blue: ~A" (list->color blu))))

	      (let* ((tmp (XmStringCreateLocalized "h"))
		     (pm (XmParseMappingCreate (list XmNincludeStatus XmINSERT
						      XmNsubstitute    tmp
						      XmNpattern       "i"
						      XmNpatternType   XmCHARSET_TEXT))))
		(XmStringFree tmp)
		(let ((newstr (XmStringParseText "hi" #f #f XmCHARSET_TEXT (list pm) 1 #f)))
		  (if (not (string=? (cadr (XmStringGetLtoR newstr XmFONTLIST_DEFAULT_TAG)) "hh"))
		      (snd-display ";XmStringParseText -> ~A" (XmStringGetLtoR newstr XmFONTLIST_DEFAULT_TAG))))
		(let ((vals (XmParseMappingGetValues pm (list XmNincludeStatus 0 XmNsubstitute 0))))
		  (if (or (not (= (cadr vals) XmINSERT))
			  (not (string=? (cadr (XmStringGetLtoR (list-ref vals 3) XmFONTLIST_DEFAULT_TAG)) "h")))
		      (snd-display ";XmParseMappingGetValues: ~A" vals))
		  (XmParseMappingSetValues pm (list XmNpattern "b")))
		(XmParseMappingFree pm)
		(set! pm (XmParseMappingCreate (list XmNinvokeParseProc
						     (lambda (txt end type tag entry pattern str call)
						       #f))))
		(XmParseMappingFree pm)
		(let ((tag (catch #t (lambda ()
				       (set! pm (XmParseMappingCreate (list XmNinvokeParseProc
									    (lambda (txt end type tag entry pattern)
									      #f)))))
				  (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XmNinvokeParseProc wrong arity: ~A" tag))))

	      (let* ((fonts (list "fixed"
				  "-adobe-times-bold-r-*-*-14-*-*-*-*-*-*-*"
				  "-adobe-*-medium-i-*-*-18-*-*-*-*-*-*-*"
				  "-*-helvetica-*-*-*-*-18-*-*-*-*-*-*-*"))
		     (tags (list "one" "two" "three" "four"))
		     (colors (list "red" "green" "blue" "orange"))
		     (pixels
		      (let* ((dpy (XtDisplay (cadr (main-widgets))))
			     (scr (DefaultScreen dpy))
			     (cmap (DefaultColormap dpy scr)))
			(let ((col (XColor)))
			  (XParseColor dpy cmap "blue" col)
			  (if (or (not (= (.red col) 0))
				  (not (= (.green col) 0))
				  (not (= (.blue col) 65535)))
			      (snd-display ";XParseColor: ~A ~A ~A ~A" col (.red col) (.blue col) (.green col)))
			  (XLookupColor dpy cmap "red" col (XColor))
			  (if (or (not (= (.red col) 65535))
				  (not (= (.green col) 0))
				  (not (= (.blue col) 0)))
			      (snd-display ";XLookupColor: ~A ~A ~A ~A" col (.red col) (.blue col) (.green col))))
			(map
			 (lambda (color)
			   (let ((col (XColor)))
			     (if (= (XAllocNamedColor dpy cmap color col col) 0)
				 (snd-error (format #f "can't allocate ~A" color))
				 (.pixel col))))
			 colors)))
		     (rendertable (XmRenderTableAddRenditions #f 
							       (let ((ctr 0))
								 (map (lambda (r)
									(set! ctr (+ ctr 1))
									(XmRenditionCreate (cadr (main-widgets))
											    r
											    (append
											     (if (= ctr 1)
												 (list XmNtabList tablist)
												 '())
											     (list XmNrenditionForeground (list-ref pixels (1- ctr))
												    XmNfontName (list-ref fonts (1- ctr))
												     XmNfontType XmFONT_IS_FONT))))
								      tags))
							       (length tags)
							       XmMERGE_NEW)))

		(let* ((dpy (XtDisplay (cadr (main-widgets))))
		       (scr (DefaultScreenOfDisplay dpy))
		       (p1 (XmGetPixmap scr "hiho" (car pixels) (cadr pixels))))
		  (if (not (Pixmap? p1)) (snd-display ";XmGetPixmap: ~A" p1))
		  (set! p1 (XmGetPixmapByDepth scr "hoho" (car pixels) (cadr pixels) (XDefaultDepth dpy (XScreenNumberOfScreen scr))))
		  (if (not (Pixmap? p1)) (snd-display ";XmGetPixmapByDepth: ~A" p1))
		  (XmDestroyPixmap scr p1))

		(let ((prop (cadr (XmRenderTableCvtToProp (cadr (main-widgets)) rendertable))))
		  (if (not (string=? (substring prop 0 8) "tag,font"))
		      (snd-display ";XmRenderTableCvtToProp: ~A" (substring prop 0 8)))
		  (let ((copy (XmRenderTableCopy rendertable)))
		    (if (not (XmRenderTable? copy)) (snd-display ";XmRenderTableCopy full: ~A" copy))
		    (if (XmRenderTableCopy) (snd-display ";XmRenderTableCopy null: ~A" (XmRenderTableCopy)))
		    (let ((rtags (XmRenderTableGetTags copy))
			  (rends (XmRenderTableGetRenditions copy (list "one"))))
		      (if (XmRenderTableGetRenditions) (snd-display ";XmRenderTableGetRenditions null: ~A" (XmRenderTableGetRenditions)))
		      (set! copy (XmRenderTableRemoveRenditions copy (list (car rtags))))
		      (if (not (equal? (XmRenderTableGetTags copy) (list "two" "three" "four")))
			  (snd-display ";XmRenderTableRemoveRenditions: ~A" (XmRenderTableGetTags copy)))
		      (let ((another (XmRenderTableCvtFromProp (cadr (main-widgets)) prop (string-length prop))))
			(if (not (XmRenderTable? another)) (snd-display ";XmRenderTableCvtFromProp: ~A" another))
			(XmRenderTableFree another))
		      )))

		(let ((tabl (XmStringTableParseStringArray (list "hi" "ho") 2 "hiho" XmCHARSET_TEXT #f 0 #f)))
		  (if (not (XmString? (car tabl))) (snd-display ";XmStringTableParseStringArray: ~A" tabl))
		  (let ((strs (XmStringTableUnparse tabl 2 "hiho" XmCHARSET_TEXT XmCHARSET_TEXT #f 0 XmOUTPUT_ALL)))
		    (if (not (equal? strs (list "hi" "ho"))) (snd-display ";XmStringTableUnparse: ~A" strs)))
		  (let ((str (XmStringTableToXmString tabl 2 #f)))
		    (if (not (XmString? str)) (snd-display ";XmStringTableToXmString: ~A" str))
		    (XmStringToXmStringTable str #f)
		    (let ((val (XmStringUnparse str "hiho" XmCHARSET_TEXT XmCHARSET_TEXT #f 0 XmOUTPUT_ALL)))
		      (if (not (string=? val "hiho")) (snd-display ";XmStringUnparse: ~A" val)))
		    (let* ((ind (open-sound "oboe.snd"))
			   (grf (car (channel-widgets)))
			   (dpy (XtDisplay grf))
			   (win (XtWindow grf))
			   (scr (DefaultScreenOfDisplay dpy))
			   (scrn (XScreenNumberOfScreen scr))
			   (gv (XGCValues)))
		      (if (not (Font? (current-font ind))) (snd-display ";current-font: ~A" (current-font ind)))
		      (let ((old-font (current-font))
			    (a-font (load-font "6x12")))
			(set! (current-font) a-font)
			(if (not (equal? a-font (current-font)))
			    (snd-display ";set current-font: ~A ~A" a-font (current-font)))
			(set! (current-font ind) old-font)
			(if (not (equal? old-font (current-font ind)))
			    (snd-display ";set current-font with ind: ~A ~A" old-font (current-font ind)))
			(set! (current-font) a-font)
			(set! (current-font ind 0) old-font)
			(if (not (equal? old-font (current-font ind 0)))
			    (snd-display ";set current-font with ind/0: ~A ~A" old-font (current-font ind 0)))
			(set! (current-font) old-font))

		      (let* ((font (cadr (XtVaGetValues (list-ref (sound-widgets ind) 3) 
							(list XmNfontList 0))))
			     (context (XmFontListInitFontContext font))
			     (next-font (XmFontListGetNextFont context)))
			(if (car next-font)
			    (if (XFontStruct? (caddr next-font))
				(let ((snd-name (cadr next-font))
				      (x-name (XGetAtomName 
					       (XtDisplay (cadr (main-widgets)))
					       (list 'Atom (cadr (XGetFontProperty (caddr next-font) 
										   XA_FULL_NAME))))))
				  (if (or (not (string=? snd-name "bold_button_font"))
					  (not (string=? x-name "Times Bold")))
				      (snd-display ";mini font: ~A ~A" snd-name x-name)))
				(snd-display ";mini-font not fontstruct: ~A" next-font))
			    (snd-display ";mini-font no good: ~A" next-font))
			(XmFontListFreeFontContext context)
			(set! context (XmFontListInitFontContext font))
			(let ((entry (XmFontListNextEntry context)))
			  (if (not (string=? (XmFontListEntryGetTag entry) "bold_button_font"))
			      (snd-display ";fontlistentry ~A" (XmFontListEntryGetTag entry)))
			  (if (not (XFontStruct? (XmFontListEntryGetFont entry)))
			      (snd-display ";fontlistentry font: ~A" (XmFontListEntryGetFont entry)))
			  (XmFontListEntryFree (XmFontListEntryCreate "hiho" XmFONT_IS_FONT (XmFontListEntryGetFont entry)))
			  (XmFontListFree (XmFontListCopy font))
			  (let ((newlist (XmFontListCreate (XmFontListEntryGetFont entry) "hiho")))
			    (XmFontListAdd newlist (XmFontListEntryGetFont entry) "hiho")
			    ;(XmFontListRemoveEntry newlist entry)
			    ;(XmFontListFree newlist)
			    )
			(XmFontListFreeFontContext context)))
		      (let ((fnt (XmFontListEntryLoad (XtDisplay (cadr (main-widgets)))
						      "-adobe-times-medium-r-normal-*-18-*-*-*-*-*-*-*"
						      XmFONT_IS_FONTSET
						      "a_new_font")))
			(XmFontListEntryFree fnt))

		      (set! (.foreground gv) (data-color))
		      (set! (.background gv) (basic-color))
		      (set! (.function gv) GXcopy)
		      (let* ((gc (XtAllocateGC grf 
						(XDefaultDepth dpy scrn) 
						(logior GCForeground GCBackground GCFunction)
						gv
						(logior GCFont GCDashList)
						0))
			     (str2 (XmStringCreateLocalized "hiho")))
			(XmStringDraw dpy win rendertable str2 gc 10 10 100 
				       XmALIGNMENT_END XmSTRING_DIRECTION_L_TO_R (XRectangle 0 0 100 100))
			(XmStringDrawImage dpy win rendertable str2 gc 10 10 100 
					    XmALIGNMENT_END XmSTRING_DIRECTION_L_TO_R (XRectangle 0 0 100 100))
			(XmStringDrawUnderline dpy win rendertable str2 gc 10 10 100 
						XmALIGNMENT_END XmSTRING_DIRECTION_L_TO_R (XRectangle 0 0 100 100) str2)
			(XtGetGC (cadr (main-widgets)) GCForeground gv)
			(XCopyGC dpy gc GCFunction gc)
			(XCopyArea dpy win win gc 0 0 100 100 0 0)
			(XCopyPlane dpy win win gc 0 0 100 100 0 0 1)
			(XtReleaseGC grf gc))
		      (close-sound ind))
		    (let ((lc (XmStringLineCount (XmStringCreateLocalized "hiho"))))
		      (if (not (= lc 1)) (snd-display ";XmStringLineCount: ~A" lc)))
		    (if (not (XmStringHasSubstring str (XmStringCreateLocalized "hi"))) (snd-display ";XmStringHasSubstring?"))
		    (XmStringNCopy str 2)
		    (XmStringNConcat str (XmStringCreateLocalized "hiho") 2)
		    (if (not (XmStringByteCompare (XmStringCreateLocalized "hiho") (XmStringCreateLocalized "hiho")))
			(snd-display ";XmStringByteCompare?"))))

		(if (not (equal? (XmRenderTableGetTags rendertable) (list "one" "two" "three" "four")))
		    (snd-display ";tags: ~A~%" (XmRenderTableGetTags rendertable)))
		(let* ((rend (XmRenderTableGetRendition rendertable "one"))
		       (r (XmRenditionRetrieve rend
						(list XmNrenditionForeground 0
						      XmNfontName 0
						      XmNfontType 0
						      XmNtag 0))))
		  (if (or (not (string=? (list-ref r 7) "one"))
			  (not (string=? (list-ref r 3) "fixed")))
		      (snd-display ";rendertable: ~A" r))
		  (let* ((str (XmStringPutRendition (XmStringCreateLocalized "hiho") "one"))
			 (ctx (cadr (XmStringInitContext str)))
			 (comp (XmStringPeekNextComponent ctx))
			 (comp1 (XmStringPeekNextTriple ctx))
			 (comp2 (XmStringGetNextComponent ctx)))
		    (if (not (= comp XmSTRING_COMPONENT_RENDITION_BEGIN)) (snd-display ";XmStringPeekNextComponent: ~A" comp))
		    (if (not (= comp1 comp)) (snd-display ";XmStringPeekNextTriple: ~A" comp1))
		    (if (not (= (list-ref comp2 4) comp)) (snd-display ";XmStringGetNextComponent: ~A" comp2)))
		  (XmRenditionUpdate rend (list XmNstrikethruType XmSINGLE_LINE))
		  (if (not (= (cadr (XmRenditionRetrieve rend (list XmNstrikethruType 0))) XmSINGLE_LINE))
		      (snd-display ";XmRenditionUpdate: ~A ~A" (cadr (XtGetValues rend (list XmNstrikethruType 0))) XmSINGLE_LINE)))
		(let ((r1 (XmRenditionCreate (cadr (main-widgets)) "r1" (list XmNfontName "fixed"))))
		  (XmRenditionFree r1))
		
		(if (not (equal? (XmDropSiteQueryStackingOrder (list-ref (main-widgets) 4)) (list #f)))
		    (snd-display ";XmDropSiteQueryStackingOrder: ~A" (XmDropSiteQueryStackingOrder (list-ref (main-widgets) 4)) (list #f)))
		(let ((tab (XmStringComponentCreate XmSTRING_COMPONENT_TAB 0 #f))
		      (row #f)
		      (table '())
		      (our-tags tags))
		  (for-each 
		   (lambda (word)
		     (let ((entry (XmStringGenerate word
						     #f
						     XmCHARSET_TEXT
						      (car our-tags))))
		       (if (XmStringIsVoid entry) (snd-display ";~A is void?" entry))
		       (if (XmStringEmpty entry) (snd-display ";~A is empty?" entry))
		       (if (<= (XmStringLength entry) 0) (snd-display ";XmStringLength: ~A ~A" entry (XmStringLength entry)))
		       (let ((str1 (XmStringCopy entry))
			     (strn #f))
			 (let ((val (XmStringCompare entry str1)))
			   (if (not val) (snd-display ";t XmStringCompare ~A ~A" entry str1)))
			 (set! strn (XmStringConcat str1 entry))
			 (if (not (> (XmStringLength strn) (XmStringLength entry)))
			     (snd-display ";concat xmstring: ~A ~A" (XmStringLength strn) (XmStringLength entry)))
			 (let ((hgt (XmStringHeight rendertable entry)))
			   (if (or (< hgt 5) (> hgt 120)) (snd-display ";~A height: ~A" entry hgt))
			   (let ((wid (XmStringWidth rendertable entry)))
			     (if (or (< wid 3) (> wid 120)) (snd-display ";~A width: ~A" entry wid))
			     (let ((extent (XmStringExtent rendertable entry)))
			       (if (or (not (= (car extent) wid))
				       (not (= (cadr extent) hgt)))
				   (snd-display ";XmStringExtent: ~A, wid: ~A, hgt: ~A", extent wid hgt)))))
			 (let ((hgt (XmStringBaseline rendertable entry)))
			   (if (or (< hgt 6) (> hgt 120)) (snd-display ";~A baseline: ~A" entry hgt)))
			 (XmStringFree strn)
			 (XmStringFree str1))

		       (if row
			   (let ((tmp (XmStringConcat row tab)))
			     (XmStringFree row)
			     (set! row (XmStringConcatAndFree tmp entry)))
			   (set! row entry))
		       (set! our-tags (cdr our-tags))
		       (if (null? our-tags) 
			   (begin
			     (set! our-tags tags)
			     (set! table (cons row table))
			     (set! row #f)))))
		   (list "this" "is" "a" "test" "of" "the" "renditions" "and" "rendertables" 
			 "perhaps" "all" "will" "go" "well" "and" "then" "again" "perhaps" "not"))
		  (let* ((n (car table))
			 (c (XmStringInitContext n))
			 (ctr 0))
		    (call-with-current-continuation
		     (lambda (done)
		       (do ((i 0 (1+ i)))
			   (#f)
			 (let ((type (XmStringGetNextTriple (cadr c))))
			   (if (= (car type) XmSTRING_COMPONENT_TEXT)
			       (if (or (not (= (cadr type) (list-ref (list 0 0 2 0 0 0 4 0 0 0 3 0 0 0 4) i)))
				       (not (string=? (caddr type) 
						      (list-ref (list "o" "o" "go" "o" "o" "o" "well" "o" "o" "o" "and" "o" "o" "o" "then") i))))
				   (snd-display ";component ~A -> ~A" i (cdr type)))
			       (if (not (= (car type) XmSTRING_COMPONENT_TAB))
				   (if (= (car type) XmSTRING_COMPONENT_END)
				       (done #f))))))))
		    (XmStringFreeContext (cadr c))))))
	    
	    (XtAppAddActions (car (main-widgets))
			      (list (list "try1" (lambda (w e strs)	
						   (snd-display ";try1: ~A~%" strs)))
				    (list "try2" (lambda (w e strs)
						   (snd-display ";try2: ~A~%" strs)))))
	    (let* ((tab (XtParseTranslationTable 
			  (format #f "Ctrl <Key>osfLeft:  try1()~%Ctrl <Key>osfRight: try2()~%Ctrl <Key>osfUp:  try1(hiho)~%Ctrl <Key>osfDown: try2(down, up)~%")))
		   (pane (add-main-pane "hiho" xmTextWidgetClass '())))
	      (XtOverrideTranslations pane tab))

	    (let ((XmNhiho (add-resource "hiho" 0)))
	      (if (not (string=? XmNhiho "hiho")) (snd-display ";add-resource XmNhiho: ~A" XmNhiho)))

	    (open-sound "cardinal.snd")
	    (let*  ((mouse_width 32)
		    (mouse_height 32)
		    (mouse_bits (list
				 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00
				 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00
				 #x80 #xff #xff #x01 #x80 #x00 #x01 #x01 #x80 #x00 #x01 #x01
				 #x80 #x00 #x01 #x01 #x80 #x00 #x01 #x01 #x80 #x00 #x01 #x01
				 #x80 #x00 #x01 #x01 #x80 #xff #xff #x01 #x80 #x00 #x00 #x01
				 #x80 #x00 #x00 #x01 #x80 #x00 #x00 #x01 #x80 #x00 #x00 #x01
				 #x80 #x00 #x00 #x01 #x80 #x00 #x00 #x01 #x80 #x00 #x00 #x01
				 #x80 #x00 #x00 #x01 #x00 #x01 #x80 #x00 #x00 #x01 #x80 #x00
				 #x00 #x06 #x60 #x00 #x00 #xf8 #x1f #x00 #x00 #x00 #x00 #x00
				 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00
				 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00))
		    (rb (list
			 #x00 #x04 #x10 #x08 #x00 #x10 #x04 #x20 #x00 #x40 #xa5 #xbf
			 #x00 #x40 #x04 #x20 #x00 #x10 #x10 #x08 #x00 #x04 #x00 #x00))
		    (iconw (list-ref (sound-widgets) 8))
		    (dpy (XtDisplay iconw))
		    (win (XtWindow iconw)))
	      (XCreateBitmapFromData dpy win rb 16 12)
	      (XCreateBitmapFromData dpy win mouse_bits mouse_width mouse_height)
	      (XCreatePixmapFromBitmapData dpy win mouse_bits 32 32 (cadr (white-pixel)) (cadr (black-pixel)) 8))

	    (let* ((grf (car (channel-widgets)))
		   (dpy (XtDisplay grf))
		   (win (XtWindow grf))
		   (gc (car (snd-gcs)))
		   (shell (cadr (main-widgets)))
		   (scr (DefaultScreen dpy))
		   (vis (DefaultVisual dpy scr))
		   (depth (cadr (XtGetValues grf (list XmNdepth 0))))
		   (pix (XCreatePixmap dpy win 10 10 depth))
		   (rotpix (XCreatePixmap dpy win 10 10 depth)))

	      (XDrawText dpy win gc 50 50 (list (XTextItem "hi" 2 2 '(Font 0))
						(XTextItem "ho" 2 3 '(Font 0))))

	      (let ((cmap (XCreateColormap dpy win vis AllocNone)))
		(set! cmap (XCopyColormapAndFree dpy cmap))
		(XFreeColormap dpy cmap)
		(if (XCheckTypedWindowEvent dpy win ExposureMask) 
		    (snd-display ";XCheckTypedWindowEvent: ~A" (XCheckTypedWindowEvent dpy win ExposureMask)))
		(if (XCheckTypedEvent dpy ExposureMask) 
		    (snd-display ";XCheckTypedEvent: ~A" (XCheckTypedEvent dpy ExposureMask)))
		(if (XCheckWindowEvent dpy win ExposureMask)
		    (snd-display ";XCheckWindowEvent: ~A" (XCheckWindowEvent dpy win ExposureMask)))
;		(if (XCheckIfEvent dpy (lambda (d e data) #f) #f)
;		    (snd-display ";XCheckIfEvent: ~A" (XCheckIfEvent dpy (lambda (d e data) #f) #f)))
		(XCirculateSubwindows dpy win RaiseLowest)
		(XCirculateSubwindowsUp dpy win)
		(XCirculateSubwindowsDown dpy win)
		(let ((wc (XWindowChanges 10 10 100 100 10 win 0)))
		  (if (not (= (.stack_mode wc) 0)) (snd-display ";stack_mode wc: ~A" (.stack_mode wc)))
		  (if (not (equal? (.sibling wc) win)) (snd-display ";sibling wc: ~A" (.sibling wc)))
		  (if (not (= (.x wc) 10)) (snd-display ";x wc: ~A" (.x wc)))
		  (if (not (= (.y wc) 10)) (snd-display ";y wc: ~A" (.y wc)))
		  (if (not (= (.width wc) 100)) (snd-display ";width wc: ~A" (.width wc)))
		  (if (not (= (.height wc) 100)) (snd-display ";height wc: ~A" (.height wc)))
		  (if (not (= (.border_width wc) 10)) (snd-display ";border_width wc: ~A" (.border_width wc))))
		(let ((xp (XpmImage 10 10 0 1 0)))
		  (if (not (= (.cpp xp) 0)) (snd-display ";cpp xp: ~A" (.cpp xp)))
		  (if (not (= (.ncolors xp) 1)) (snd-display ";ncolors xp: ~A" (.ncolors xp))))
		)
	      (XmObjectAtPoint shell 100 100)
	      (if (not (string=? (XmGetAtomName dpy XA_STRING) "STRING")) (snd-display ";XmGetAtomName: ~A" (XmGetAtomName dpy XA_STRING)))
	      (if (not (XmTargetsAreCompatible dpy (list XA_STRING) 1 (list XA_STRING) 1)) (snd-display ";XmTargetsAreCompatible"))
	      (XmUpdateDisplay grf)
	      (let ((lines (XmWidgetGetBaselines (list-ref (main-widgets) 4))))
		(if (not lines) (snd-display ";XmWidgetGetBaselines?"))
		(if (< (length lines) 4) (snd-display ";no listener text?? ~A" lines)))
	      (let ((r (XmWidgetGetDisplayRect (list-ref (sound-widgets) 8))))
		(if (not (XRectangle? r)) (snd-display ";XmWidgetGetDisplayRect: ~A" r)))
	      (XDrawImageString dpy (list 'Window (cadr pix)) gc 0 10 "hiho" 4)
	      (let* ((data (XtCalloc (* 11 11 depth) 1))
		     (before (XCreateImage dpy vis depth XYPixmap 0 data 10 10 8 0))
		     (newimage (XGetSubImage dpy (list 'Window (cadr pix)) 0 0 10 10 AllPlanes XYPixmap before 0 0)))
		(XSubImage newimage 0 0 3 3)
		(if (not (= (.bytes_per_line newimage) 2)) (snd-display ";bytes_per_line: ~A" (.bytes_per_line newimage)))
		(if (not (= (.byte_order newimage) 0)) (snd-display ";byte_order: ~A" (.byte_order newimage)))
		(if (not (= (.bitmap_pad newimage) 8)) (snd-display ";bitmap_pad: ~A" (.bitmap_pad newimage)))
		(if (not (= (.bitmap_bit_order newimage) 0)) (snd-display ";bitmap_bit_order: ~A" (.bitmap_bit_order newimage)))
		(if (not (= (.bitmap_unit newimage) 32)) (snd-display ";bitmap_unit: ~A" (.bitmap_unit newimage)))
		(if (not (= (.obdata newimage) 0)) (snd-display ";obdata: ~A" (.obdata newimage)))
		(if (not (= (.xoffset newimage) 0)) (snd-display ";xoffset: ~A" (.xoffset newimage)))
		(XPutPixel before 1 1 (basic-color))
		(XGetPixel before 1 1)
		(XPutImage dpy (list 'Window (cadr rotpix)) gc before 0 0 0 0 10 10)
		(XAddPixel before 1)
		(if (> (.bits_per_pixel before) 123) (snd-display ";bits_per_pixel: ~A" (.bits_per_pixel before)))
		(XmInstallImage before "before_image")
		(XmUninstallImage before)
		(let ((i1 (XGetImage dpy (list 'Window (cadr pix)) 0 0 10 10 AllPlanes XYPixmap))
		      (attr (XpmAttributes))
		      (vals (XtGetValues (cadr (main-widgets)) (list XmNcolormap 0 XmNdepth 0)))
		      (sym (XpmColorSymbol "basiccolor" #f (basic-color))))
		  (set! (.visual attr) vis)
		  (if (not (equal? vis (.visual attr))) (snd-display ";visual xpm attr: ~A" (.visual attr)))
		  (set! (.colorsymbols attr) sym)
		  (set! (.numsymbols attr) 1)
		  (if (not (equal? 1 (.numsymbols attr))) (snd-display ";numsymbols xpm attr: ~A" (.numsymbols attr)))
		  (set! (.depth attr) (list-ref vals 3))
		  (if (not (equal? (list-ref vals 3) (.depth attr))) (snd-display ";depth xpm attr: ~A" (.depth attr)))
		  (set! (.colormap attr) (list-ref vals 1))
		  (if (not (equal? (list-ref vals 1) (.colormap attr))) (snd-display ";colormap xpm attr: ~A" (.colormap attr)))
		  (set! (.valuemask attr) (logior XpmColorSymbols XpmDepth XpmColormap XpmVisual))
		  (if (not (= (.valuemask attr) (logior XpmColorSymbols XpmDepth XpmColormap XpmVisual)))
		      (snd-display ";valuemask: ~A" (.valuemask attr)))
		  (if (not (= (.x_hotspot attr) 0)) (snd-display ";x_hotspot: ~A" (.x_hotspot attr)))
		  (if (not (= (.y_hotspot attr) 0)) (snd-display ";y_hotspot: ~A" (.y_hotspot attr)))
		  (if (not (= (.npixels attr) 0)) (snd-display ";npixels: ~A" (.npixels attr)))
		  (let ((err (XpmCreatePixmapFromData dpy win 
						       (list "16 14 6 1"
							     " 	c None s None"
							     ".	c gray50"
							     "X	c black"
							     "o	c white"
							     "O	c yellow"
							     "-      c ivory2 s basiccolor"
							     "------.XXX.-----"
							     "-----X.ooo.X----"
							     "----..oXXXo..---"
							     "----XoX...XoX---"
							     "----XoX.--XoX.--"
							     "----XoX.--XoX.--"
							     "---XXXXXXXXXXX--"
							     "---XOOOOOOOOOX.-"
							     "---XO.......OX.-"
							     "---XOOOOOOOOOX.-"
							     "---XO.......OX.-"
							     "---XOOOOOOOOOX.-"
							     "---XXXXXXXXXXX.-"
							     "----...........-")
						       attr)))
		    (if (or (not (= (car err) XpmSuccess))
			    (not (Pixmap? (cadr err))))
			(snd-display ";XpmCreatePixmapFromData: ~A" err)))

		  (let* ((shell (cadr (main-widgets)))
			 (dpy (XtDisplay shell))
			 (button (XmCreatePushButton shell "button" '()))
			 (status-and-whatnot (XpmReadFileToPixmap dpy (XRootWindowOfScreen (XtScreen shell)) "bullet.xpm" #f))
			 (status (car status-and-whatnot))
			 (pixmap (cadr status-and-whatnot))
			 (pixmap1 (caddr status-and-whatnot)))
		    (if (not (string=? (XpmGetErrorString XpmSuccess) "XpmSuccess")) 
			(snd-display ";XpmGetErrorString: ~A" (XpmGetErrorString XpmSuccess)))
		    (if (not (= status XpmSuccess))
			(snd-display "; XpmError ReadFileToPixmap: ~A" (XpmGetErrorString status)))
		    (XtVaSetValues button (list XmNlabelType XmPIXMAP
						  XmNlabelPixmap pixmap))
		    (XpmWriteFileFromPixmap dpy "test.xpm" pixmap pixmap1 #f)
		    (XpmCreateDataFromPixmap dpy pixmap pixmap1 #f)
		    (let* ((status (XpmReadFileToXpmImage "bullet.xpm"))
			   (symb (XpmColorSymbol "Foreground" "green" (basic-color)))
			   (attr (XpmAttributes)))
		      (if (not (XpmImage? status))
			  (snd-display "; XpmError ReadFileToXpmImage: ~A" (XpmGetErrorString status)))
		      (set! (.colorsymbols attr) symb)
		      (set! (.numsymbols attr) 1)
		      (set! (.valuemask attr) XpmColorSymbols)
		      (XpmCreatePixmapFromXpmImage dpy (XRootWindowOfScreen (XtScreen shell)) status attr)
		      (XpmCreateXpmImageFromPixmap dpy pixmap pixmap1 attr)
		      (for-each
		       (lambda (func val name)
			 (set! (func attr) val)
			 (if (not (equal? (func attr) val)) (snd-display ";attr ~A ~A" name (func attr))))
		       (list .valuemask .depth .width .x_hotspot .y_hotspot .cpp .npixels .ncolors)
		       (list 0 0 0 0 0 0 0 0)
		       (list 'valuemask 'depth 'width 'x_hotspot 'y_hotspot 'cpp 'npixels 'ncolors)))
		    )

		  (XDestroyImage i1))
		(XDestroyImage before)
		(XFreePixmap dpy pix)
		(XVisualIDFromVisual vis)
		(XLockDisplay dpy)
		(XUnlockDisplay dpy)
		(let ((keys (XGetKeyboardMapping dpy (list 'KeyCode 40) 1)))
		  (if (not (equal? keys (list (list 'KeySym 100) (list 'KeySym 68))))
		      (snd-display ";XGetKeyboardMapping: ~A" keys)))
		(XGrabServer dpy)
		(XUngrabServer dpy)
		(XGrabPointer dpy win #t ButtonPressMask GrabModeSync GrabModeSync (list 'Window None) (list 'Cursor None) (list 'Time CurrentTime))
		(XUngrabPointer dpy (list 'Time CurrentTime))
		(XGrabKeyboard dpy win #t GrabModeSync GrabModeSync (list 'Time CurrentTime))
		(XUngrabKeyboard dpy (list 'Time CurrentTime))
		(XGrabKey dpy AnyKey AnyModifier win #t GrabModeSync GrabModeSync)
		(XUngrabKey dpy AnyKey AnyModifier win)
		(XGrabButton dpy AnyButton AnyModifier win #t ButtonPressMask GrabModeSync GrabModeSync (list 'Window None) (list 'Cursor None))
		(XUngrabButton dpy AnyButton AnyModifier win)
		(XtGrabPointer shell #t ButtonPressMask GrabModeSync GrabModeSync (list 'Window None) (list 'Cursor None) (list 'Time CurrentTime))
		(XtUngrabPointer shell (list 'Time CurrentTime))
		(XtGrabKeyboard shell #t GrabModeSync GrabModeSync (list 'Time CurrentTime))
		(XtUngrabKeyboard shell (list 'Time CurrentTime))
		(XtGrabKey shell (list 'KeyCode AnyKey) AnyModifier #t GrabModeSync GrabModeSync)
		(XtUngrabKey shell (list 'KeyCode AnyKey) AnyModifier)
		(XtGrabButton shell AnyButton AnyModifier #t ButtonPressMask GrabModeSync GrabModeSync (list 'Window None) (list 'Cursor None))
		(XtUngrabButton shell AnyButton AnyModifier)
		))

	    (let* ((gc (car (snd-gcs)))
		   (grf (car (channel-widgets)))
		   (dpy (XtDisplay grf))
		   (win (XtWindow grf))
		   (shl (cadr (main-widgets))))
	      (let ((wid (XtWindowToWidget dpy win)))
		(if (not (equal? wid grf))
		    (snd-display ";XtWindowToWidget: ~A ~A" grf win)))
	      (if (not (equal? (XGetTransientForHint dpy win) (list 0 #f)))
		  (snd-display ";XGetTransientForHint: ~A" (XGetTransientForHint dpy win)))
	      (if (not (equal? (XGetErrorText dpy BadColor #f 9) (list 0 "BadColor")))
		  (snd-display ";XGetErrorText: ~A" (XGetErrorText dpy BadColor #f 9)))
	      (if (not (equal? (XGeometry dpy 0 "500x400" "500x400+10+10" 4 7 14 2 2) (list 12 10 10 500 400)))
		  (snd-display ";XGeometry: ~A" (XGeometry dpy 0 "500x400" "500x400+10+10" 4 7 14 2 2)))
	      (if (< (XEventsQueued dpy QueuedAlready) 0)
		  (snd-display ";XEventsQueued: ~A" (XEventsQueued dpy QueuedAlready)))
	      (let ((coords (XTranslateCoordinates dpy (XtWindow shl) win 10 10)))
		(if (not (car coords))
		    (snd-display ";XTranslateCoordinates: ~A" coords)))
	      (let ((coords (XtTranslateCoords shl 10 10)))
		(if (not (number? (car coords)))
		    (snd-display ";XtTranslateCoords: ~A" coords)))
	      (if (not (XmIsVendorShell shl)) (snd-display ";XmIsVendorShell?"))
	      (if (XmIsPrimitive shl) (snd-display ";XmIsPrimitive?"))
	      (if (XmIsManager shl) (snd-display ";XmIsManager?"))
	      (if (XmIsIconGadget shl) (snd-display ";XmIsIconGadget?"))
	      (if (XmIsGadget shl) (snd-display ";XmIsGadget?"))
	      (if (XmIsIconHeader shl) (snd-display ";XmIsHeader?"))
	      (if (XmIsDropTransfer shl) (snd-display ";XmIsDropTransfer?"))
	      (if (XmIsDropSiteManager shl) (snd-display ";XmIsDropSiteManager?"))
	      (if (XmIsDragContext shl) (snd-display ";XmIsDragContext?"))
	      (if (XmIsDragIconObjectClass shl) (snd-display ";XmIsDragIconObjectClass?"))
	      (if (XmIsMessageBox shl) (snd-display ";XmIsMessageBox?"))
	      (if (XmIsScreen shl) (snd-display ";XmIsScreen?"))
	      (if (XmIsDisplay shl) (snd-display ";XmIsDisplay?"))

	      (let ((val 0))
		(XSetErrorHandler (lambda (dpy e)
				    (set! val (.error_code e))))
		(XGetAtomName dpy '(Atom 0))
		(if (not (= val 5)) (snd-display ";XSetErrorHandler: ~A" val)))

	      (XDrawImageString dpy win gc 10 10 "hiho" 4)
	      (XDrawRectangle dpy win gc 0 0 10 10)
	      (XDrawString dpy win gc 10 10 "hi" 2)
	      (XDrawSegments dpy win gc (list (XSegment 1 1 2 20) (XSegment 3 3 40 4)) 2)
	      (XDrawRectangles dpy win gc (list (XRectangle 0 0 10 10) (XRectangle 20 20 30 30)) 2)
	      (XFillRectangles dpy win gc (list (XRectangle 0 0 10 10) (XRectangle 20 20 30 30)) 2)
	      (XDrawRectangle dpy win gc 10 10 10 10)
	      (XFillRectangle dpy win gc 10 10 10 10)
	      (XDrawPoints dpy win gc (list (XPoint 23 23) (XPoint 109 10)) 2 CoordModeOrigin)
	      (XDrawPoint dpy win gc 10 10)
	      (XDrawLines dpy win gc (list (XPoint 23 23) (XPoint 109 10)) 2 CoordModeOrigin)
	      (XDrawLine dpy win gc 10 10 20 20)
	      (XDrawArcs dpy win gc (list (XArc 10 10 4 4 0 360) (XArc 20 20 1 23 0 123)) 2)
	      (XFillArcs dpy win gc (list (XArc 10 10 4 4 0 360) (XArc 20 20 1 23 0 123)) 2)
	      (XDrawArc dpy win gc 0 0 10 10 45 90)
	      (XFillArc dpy win gc 0 0 10 10 45 90)
	      (XFillPolygon dpy win gc (list (XPoint 0 0) (XPoint 0 10) (XPoint 10 10) (XPoint 10 0) (XPoint 0 0)) 5 Convex CoordModeOrigin)
	      (XClearArea dpy win 10 10 20 20 #f)
	      (XClearWindow dpy win))

	    (close-sound)
	    
	    (let ((button (XtCreateManagedWidget "button" xmPushButtonWidgetClass (cadr (main-widgets)) '() 0))
		  (val1 0))
	      (define (call1 w c i)
		(set! val1 (1+ val1)))
	      (let ((descr (XtAddCallback button XmNactivateCallback call1 #f)))
		(XtCallCallbacks button XmNactivateCallback #f)
		(if (not (= val1 1))
		    (snd-display ";XtCallCallbacks val1: ~A" val1))
		(XtRemoveCallback button XmNactivateCallback descr)
		(let ((calls (XtHasCallbacks button XmNactivateCallback)))
		  (if (not (= calls XtCallbackHasNone))
		      (snd-display ";XtRemoveCallbacks: ~A" calls))))
	      (XtUnmanageChild button)
	      (XtDestroyWidget button))
	    
	    (let ((button (XtCreateManagedWidget "button" xmPushButtonWidgetClass (cadr (main-widgets)) '() 0))
		  (val1 0)
		  (val2 0))
	      (define (call1 w c i)
		(set! val1 (1+ val1)))
	      (define (call2 w c i)
		(set! val2 (1+ val2)))
	      (let ((descr1 (XtAddCallback button XmNactivateCallback call1 #f))
		    (descr2 (XtAddCallback button XmNactivateCallback call2 #f)))
		(XtCallCallbacks button XmNactivateCallback #f)
		(if (and (not (= val1 1)) (not (= val2 1)))
		    (snd-display ";XtCallCallbacks val12: ~A ~A" val1 val2))
		(XtRemoveCallbacks button XmNactivateCallback (list descr1 descr2))
		(let ((calls (XtHasCallbacks button XmNactivateCallback)))
		  (if (not (= calls XtCallbackHasNone))
		      (snd-display ";XtRemoveCallbacks: ~A" calls))))
	      (XtUnmanageChild button)
	      (XtDestroyWidget button))
	    
	    (let ((button (XtCreateManagedWidget "button" xmPushButtonWidgetClass (cadr (main-widgets)) '() 0))
		  (val1 0)
		  (val2 0))
	      (define (call1 w c i)
		(set! val1 (1+ val1)))
	      (define (call2 w c i)
		(set! val2 (1+ val2)))
	      (let ((descrs (XtAddCallbacks button XmNactivateCallback (list (list call1 #f) (list call2 #f)))))
		(XtCallCallbacks button XmNactivateCallback #f)
		(if (and (not (= val1 1)) (not (= val2 1)))
		    (snd-display ";XtCallCallbacks add val12: ~A ~A" val1 val2))
		(XtRemoveCallbacks button XmNactivateCallback descrs)
		(let ((calls (XtHasCallbacks button XmNactivateCallback)))
		  (if (not (= calls XtCallbackHasNone))
		      (snd-display ";XtRemoveCallbacks (add): ~A" calls))))
	      (XtUnmanageChild button)
	      (XtDestroyWidget button))

	    (let* ((frm (add-main-pane "hi" xmFormWidgetClass (list XmNpaneMinimum 120)))
		   (browsed 0)
		   (lst (XtCreateManagedWidget "lst" xmListWidgetClass frm
						(list XmNleftAttachment      XmATTACH_FORM
						      XmNrightAttachment     XmATTACH_FORM
						      XmNtopAttachment       XmATTACH_FORM
						      XmNbottomAttachment    XmATTACH_FORM
						      XmNautomaticSelection   XmNO_AUTO_SELECT
						      XmNdoubleClickInterval  100
						      XmNitemCount            3
						      XmNitems                (list (XmStringCreate "one" XmFONTLIST_DEFAULT_TAG)
										    (XmStringCreate "two" XmFONTLIST_DEFAULT_TAG)
										    (XmStringCreate "three" XmFONTLIST_DEFAULT_TAG))
						      XmNlistMarginHeight     4
						      XmNlistMarginWidth      1
						      XmNlistSizePolicy       XmVARIABLE
						      XmNlistSpacing          2
						      XmNmatchBehavior        XmQUICK_NAVIGATE
						      XmNprimaryOwnership     XmOWN_NEVER
						      XmNscrollBarDisplayPolicy XmAS_NEEDED
						      XmNselectColor          (basic-color)
						      XmNselectedPositions    (list 0 1)
						      XmNselectionMode        XmNORMAL_MODE
						      XmNselectionPolicy      XmBROWSE_SELECT))))
	      (XtAddCallback lst XmNbrowseSelectionCallback (lambda (w c i) (set! browsed 123)))
	      (let ((vals (XtVaGetValues lst
					  (list XmNautomaticSelection 0 XmNdoubleClickInterval 0 XmNitemCount 0 XmNitems 0 XmNlistMarginHeight 0
						XmNlistMarginWidth 0 XmNlistSizePolicy 0 XmNlistSpacing 0 XmNmatchBehavior 0
						XmNprimaryOwnership 0  XmNscrollBarDisplayPolicy 0 XmNselectColor 0 XmNselectionMode 0
						XmNselectionPolicy 0 XmNhorizontalScrollBar 0 XmNselectedItemCount 0 XmNtopItemPosition 0))))
		(if (not (= (list-ref vals 1) XmNO_AUTO_SELECT)) (snd-display ";XmNautomaticSelection: ~A" (list-ref vals 1)))
		(if (not (= (list-ref vals 3) 100)) (snd-display ";XmNdoubleClickInterval: ~A" (list-ref vals 3)))
		(if (not (= (list-ref vals 5) 3)) (snd-display ";XmNitemCount: ~A" (list-ref vals 5)))
		(if (not (XmString? (car (list-ref vals 7)))) (snd-display ";XmNitems: ~A" (list-ref vals 7)))
		(if (not (= (list-ref vals 9) 4)) (snd-display ";XmNlistMarginHeight: ~A" (list-ref vals 9)))
		(if (not (= (list-ref vals 11) 1)) (snd-display ";XmNlistMarginWidth: ~A" (list-ref vals 11)))
		(if (not (= (list-ref vals 13) XmVARIABLE)) (snd-display ";XmNlistSizePolicy: ~A" (list-ref vals 13)))
		(if (not (= (list-ref vals 15) 2)) (snd-display ";XmNlistSpacing: ~A" (list-ref vals 15)))
		(if (not (= (list-ref vals 17) XmQUICK_NAVIGATE)) (snd-display ";XmNmatchBehavior: ~A" (list-ref vals 17)))
		(if (not (= (list-ref vals 19) XmOWN_NEVER)) (snd-display ";XmNprimaryOwnership : ~A" (list-ref vals 19)))
		(if (not (= (list-ref vals 21) XmAS_NEEDED)) (snd-display ";XmNscrollBarDisplayPolicy: ~A" (list-ref vals 21)))
		(if (not (Pixel? (list-ref vals 23))) (snd-display ";XmNselectColor: ~A" (list-ref vals 23)))
		(if (not (= (list-ref vals 25) XmNORMAL_MODE)) (snd-display ";XmNselectionMode: ~A" (list-ref vals 25)))
		(if (not (= (list-ref vals 27) XmBROWSE_SELECT)) (snd-display ";XmNselectionPolicy: ~A" (list-ref vals 27)))
		(if (list-ref vals 29) (snd-display ";XmNhorizontalScrollBar: ~A" (list-ref vals 29)))
		(if (not (= (list-ref vals 31) 0)) (snd-display ";XmNselectedItemCount : ~A" (list-ref vals 31)))
		(if (not (= (list-ref vals 33) 1)) (snd-display ";XmNtopItemPosition: ~A" (list-ref vals 33)))
		
		(let ((tag (catch #t
				  (lambda ()
				    (XmListAddItem frm (XmStringCreate "four" XmFONTLIST_DEFAULT_TAG) 0))
				  (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg))
		      (snd-display ";list type check: ~A" tag)))

		(XmListAddItem lst (XmStringCreate "four" XmFONTLIST_DEFAULT_TAG) 0) ; 0 -> last position
		(set! vals (XtGetValues lst (list XmNitemCount 0 XmNitems 0)))
		(if (not (= (list-ref vals 1) 4)) (snd-display ";XmAddItem len: ~A" (list-ref vals 1)))
		(if (not (string=? (cadr (XmStringGetLtoR (list-ref (list-ref vals 3) 3) XmFONTLIST_DEFAULT_TAG)) "four"))
		    (snd-display ";added item: ~A" (cadr (XmStringGetLtoR (list-ref (list-ref vals 3) 3) XmFONTLIST_DEFAULT_TAG))))
		(XmListAddItems lst (list (XmStringCreateLocalized "five") (XmStringCreateLocalized "six")) 2 0)
		(set! vals (XtGetValues lst (list XmNitemCount 0 XmNitems 0)))
		(if (not (= (list-ref vals 1) 6)) (snd-display ";XmAddItems len: ~A" (list-ref vals 1)))
		(if (not (string=? (cadr (XmStringGetLtoR (list-ref (list-ref vals 3) 5) XmFONTLIST_DEFAULT_TAG)) "six"))
		    (snd-display ";added items: ~A" (cadr (XmStringGetLtoR (list-ref (list-ref vals 3) 5) XmFONTLIST_DEFAULT_TAG))))
		
		(XmListDeletePos lst 1)
		(set! vals (XtGetValues lst (list XmNitemCount 0 XmNitems 0)))
		(if (not (= (list-ref vals 1) 5)) (snd-display ";XmListDeletePos len: ~A" (list-ref vals 1)))
		(if (not (string=? (cadr (XmStringGetLtoR (list-ref (list-ref vals 3) 0) XmFONTLIST_DEFAULT_TAG)) "two"))
		    (snd-display ";deleted item 1: ~A" (cadr (XmStringGetLtoR (list-ref (list-ref vals 3) 0) XmFONTLIST_DEFAULT_TAG))))
		(XmListDeletePositions lst (list 2 4))
		(set! vals (XtGetValues lst (list XmNitemCount 0 XmNitems 0)))
		(if (not (= (list-ref vals 1) 3)) (snd-display ";XmListDeletePositions len: ~A" (list-ref vals 1)))
		(if (not (string=? (cadr (XmStringGetLtoR (list-ref (list-ref vals 3) 1) XmFONTLIST_DEFAULT_TAG)) "four"))
		    (snd-display ";deleted item 2: ~A" (cadr (XmStringGetLtoR (list-ref (list-ref vals 3) 1) XmFONTLIST_DEFAULT_TAG))))
		
		(XmListAddItemUnselected lst (XmStringCreate "seven" XmFONTLIST_DEFAULT_TAG) 0) ; 0 -> last position
		(set! vals (XtGetValues lst (list XmNitemCount 0 XmNitems 0)))
		(if (not (= (list-ref vals 1) 4)) (snd-display ";XmListAddItemUnselected len: ~A" (list-ref vals 1)))
		(if (not (string=? (cadr (XmStringGetLtoR (list-ref (list-ref vals 3) 3) XmFONTLIST_DEFAULT_TAG)) "seven"))
		    (snd-display ";added item unselected: ~A" (cadr (XmStringGetLtoR (list-ref (list-ref vals 3) 3) XmFONTLIST_DEFAULT_TAG))))
		(XmListAddItemsUnselected lst (list (XmStringCreateLocalized "eight") (XmStringCreateLocalized "nine")) 2 0)
		(set! vals (XtGetValues lst (list XmNitemCount 0 XmNitems 0)))
		(if (not (= (list-ref vals 1) 6)) (snd-display ";XmListAddItemsUnselected len: ~A" (list-ref vals 1)))
		(if (not (string=? (cadr (XmStringGetLtoR (list-ref (list-ref vals 3) 5) XmFONTLIST_DEFAULT_TAG)) "nine"))
		    (snd-display ";added items unselected: ~A" (cadr (XmStringGetLtoR (list-ref (list-ref vals 3) 5) XmFONTLIST_DEFAULT_TAG))))
		
		(XmListDeleteAllItems lst)
		(set! vals (XtGetValues lst (list XmNitemCount 0 XmNitems 0)))
		(if (not (= (list-ref vals 1) 0)) (snd-display ";XmListDeleteAllItems len: ~A" (list-ref vals 1)))
		(if (not (null? (list-ref vals 3)))
		    (snd-display ";deleted all items: ~A" (list-ref vals 3)))
		
		(let ((item1 (XmStringCreate "one" XmFONTLIST_DEFAULT_TAG))
		      (item2 (XmStringCreate "two" XmFONTLIST_DEFAULT_TAG))
		      (item3 (XmStringCreate "three" XmFONTLIST_DEFAULT_TAG))
		      (item4 (XmStringCreate "four" XmFONTLIST_DEFAULT_TAG))
		      (item5 (XmStringCreate "five" XmFONTLIST_DEFAULT_TAG)))
		  (XtVaSetValues lst 
				  (list XmNitemCount 5
					 XmNitems (list item1 item2 item3 item4 item5))) 
		  (set! vals (XtGetValues lst (list XmNitemCount 0 XmNitems 0)))
		  (if (not (= (list-ref vals 1) 5)) (snd-display ";Xt set items len: ~A" (list-ref vals 1)))
		  (if (not (string=? (cadr (XmStringGetLtoR (list-ref (list-ref vals 3) 0) XmFONTLIST_DEFAULT_TAG)) "one"))
		      (snd-display ";set items: ~A" (cadr (XmStringGetLtoR (list-ref (list-ref vals 3) 0) XmFONTLIST_DEFAULT_TAG))))
		  
		  (XmListSelectItem lst item3 #t)
		  (if (not (= browsed 123)) (snd-display ";XmListSelectItem callback: ~A" browsed))
		  (if (XmListPosSelected lst 1) (snd-display ";XmList selected pos 1?"))
		  (if (not (XmListPosSelected lst 3)) (snd-display ";XmList didn't select pos 3?"))
		  (set! vals (XtVaGetValues lst (list XmNselectedItemCount 0 XmNselectedItems 0)))
		  (if (not (= (list-ref vals 1) 1)) (snd-display ";selected count: ~A" (list-ref vals 1)))
		  (set! vals (XmListGetSelectedPos lst))
		  (if (not (= (length vals) 1)) (snd-display ";XmListGetSelectedPos: ~A" vals))
		  (if (not (= (car vals) 3)) (snd-display ";XmListGetSelectedPos: ~A" vals))
		  (set! browsed 0)
		  (XmListSelectPos lst 1 #f)
		  (if (not (= browsed 0)) (snd-display ";XmListSelectPos callback: ~A" browsed))
		  (if (not (XmListPosSelected lst 1)) (snd-display ";XmList select pos?"))
		  (if (not (= (XmListItemPos lst item3) 3)) (snd-display ";XmListItemPos: ~A" (XmListItemPos lst item3)))
		  (if (not (= (car (XmListGetMatchPos lst item3)) 3)) (snd-display ";XmListGetMatchPos: ~A" (XmListGetMatchPos lst item3)))
		  (if (not (= (XmListItemExists lst item3))) (snd-display ";XmListItemExists?"))
		  
		  (if (not (= (XmListYToPos lst 40) 2)) (snd-display ";XmListYToPos: ~A" (XmListYToPos lst 40)))
		  (let ((box (XmListPosToBounds lst 2)))
		    (if (not (= (cadr box) 3))
			(snd-display ";XmListPosToBounds: ~A" box)))
		  (XmListDeselectPos lst 1)
		  (if (XmListPosSelected lst 1) (snd-display ";XmList deselected pos?"))
		  (XmListSelectItem lst item3 #t)
		  (XmListDeselectAllItems lst)
		  (if (XmListPosSelected lst 3) (snd-display ";XmList deselect all pos?"))
		  (XmListSelectItem lst item3 #f)
		  (XmListDeselectItem lst item3)
		  (if (XmListPosSelected lst 3) (snd-display ";XmList deselect item?"))
		  
		  (XmListDeleteItem lst item2)
		  (set! vals (XtGetValues lst (list XmNitemCount 0 XmNitems 0)))
		  (if (not (= (list-ref vals 1) 4)) (snd-display ";XmDeleteItem len: ~A" (list-ref vals 1)))
		  (if (not (string=? (cadr (XmStringGetLtoR (list-ref (list-ref vals 3) 1) XmFONTLIST_DEFAULT_TAG)) "three"))
		      (snd-display ";delete item: ~A" (cadr (XmStringGetLtoR (list-ref (list-ref vals 3) 1) XmFONTLIST_DEFAULT_TAG))))
		  (XmListDeleteItems lst (list item1 item4))
		  (set! vals (XtGetValues lst (list XmNitemCount 0 XmNitems 0)))
		  (if (not (= (list-ref vals 1) 2)) (snd-display ";XmDeleteItems len: ~A" (list-ref vals 1)))
		  (if (not (string=? (cadr (XmStringGetLtoR (list-ref (list-ref vals 3) 0) XmFONTLIST_DEFAULT_TAG)) "three"))
		      (snd-display ";delete items: ~A" (cadr (XmStringGetLtoR (list-ref (list-ref vals 3) 1) XmFONTLIST_DEFAULT_TAG))))
		  (XmListDeleteAllItems lst)
		  (XtVaSetValues lst 
				  (list XmNitemCount 5
					 XmNitems (list item1 item2 item3 item4 item5))) 
		  
		  (let ((item6 (XmStringCreate "six" XmFONTLIST_DEFAULT_TAG)))
		    (XmListReplacePositions lst (list 2) (list item6) 1)
		    (set! vals (XtGetValues lst (list XmNitemCount 0 XmNitems 0)))
		    (if (not (string=? (cadr (XmStringGetLtoR (list-ref (list-ref vals 3) 1) XmFONTLIST_DEFAULT_TAG)) "six"))
			(snd-display ";replace pos: ~A ~A" 
				     (cadr (XmStringGetLtoR (list-ref (list-ref vals 3) 1) XmFONTLIST_DEFAULT_TAG))
				     (map (lambda (n) 
					    (XmStringGetLtoR n XmFONTLIST_DEFAULT_TAG))
					  (list-ref vals 3))))
		    (XmListReplaceItemsUnselected lst (list item6 item3) 2 (list item2 item6))
		    (set! vals (XtGetValues lst (list XmNitemCount 0 XmNitems 0)))
		    (if (not (string=? (cadr (XmStringGetLtoR (list-ref (list-ref vals 3) 2) XmFONTLIST_DEFAULT_TAG)) "six"))
			(snd-display ";replace items unselected: ~A ~A" 
				     (cadr (XmStringGetLtoR (list-ref (list-ref vals 3) 1) XmFONTLIST_DEFAULT_TAG))
				     (map (lambda (n) 
					    (XmStringGetLtoR n XmFONTLIST_DEFAULT_TAG))
					  (list-ref vals 3))))
		    (XmListReplaceItemsPosUnselected lst (list item6 item3) 2 1)
		    (set! vals (XtGetValues lst (list XmNitemCount 0 XmNitems 0)))
		    (if (not (string=? (cadr (XmStringGetLtoR (list-ref (list-ref vals 3) 0) XmFONTLIST_DEFAULT_TAG)) "six"))
			(snd-display ";replace items pos: ~A ~A" 
				     (cadr (XmStringGetLtoR (list-ref (list-ref vals 3) 0) XmFONTLIST_DEFAULT_TAG))
				     (map (lambda (n) 
					    (XmStringGetLtoR n XmFONTLIST_DEFAULT_TAG))
					  (list-ref vals 3))))
		    (XmListReplaceItemsPos lst (list item4) 1 1)
		    (set! vals (XtGetValues lst (list XmNitemCount 0 XmNitems 0)))
		    (if (not (string=? (cadr (XmStringGetLtoR (list-ref (list-ref vals 3) 0) XmFONTLIST_DEFAULT_TAG)) "four"))
			(snd-display ";replace items pos: ~A ~A" 
				     (cadr (XmStringGetLtoR (list-ref (list-ref vals 3) 0) XmFONTLIST_DEFAULT_TAG))
				     (map (lambda (n) 
					    (XmStringGetLtoR n XmFONTLIST_DEFAULT_TAG))
					  (list-ref vals 3))))
		    (XmListReplaceItems lst (list item4 item3) 2 (list item2 item6))
		    (set! vals (XtGetValues lst (list XmNitemCount 0 XmNitems 0)))
		    (if (not (string=? (cadr (XmStringGetLtoR (list-ref (list-ref vals 3) 0) XmFONTLIST_DEFAULT_TAG)) "two"))
			(snd-display ";replace items: ~A ~A" 
				     (cadr (XmStringGetLtoR (list-ref (list-ref vals 3) 0) XmFONTLIST_DEFAULT_TAG))
				     (map (lambda (n) 
					    (XmStringGetLtoR n XmFONTLIST_DEFAULT_TAG))
					  (list-ref vals 3))))
		    (XmListSetPos lst 1)
		    (if (not (XmListSetKbdItemPos lst 1)) (snd-display ";XmListSetKbdItemPos?"))
		    (XmListGetKbdItemPos lst)
		    (XmListUpdateSelectedList lst)
		    (XmListSetPos lst 1)
		    (XmListSetHorizPos lst 0)
		    (XmListSetBottomPos lst 0)
		    (XmListSetBottomItem lst item5)
		    (XmListSetAddMode lst #f)
		    (XmListSetItem lst item6)
		    (XmListDeleteItemsPos lst 1 3)))
		(XtUnmanageChild frm)))

	    (let* ((frm (add-main-pane "hi" xmFormWidgetClass (list XmNpaneMinimum 120)))
		   (current-time (list 'Time CurrentTime))
		   (calls (make-vector 10 "none"))
		   (txt (XtCreateManagedWidget "text" xmTextWidgetClass frm
						(list XmNeditable #t
						      XmNleftAttachment      XmATTACH_FORM
						      XmNrightAttachment     XmATTACH_FORM
						      XmNtopAttachment       XmATTACH_FORM
						      XmNbottomAttachment    XmATTACH_NONE
						      XmNdestinationCallback 
						       (list (lambda (w c i) 
							       (vector-set! calls c "dest")
							       (if (< (.destination_data i) 0) (snd-display ";destination_data: A~" (.destination_data i)))
							       (if (< (.location_data i) 0) (snd-display ";location_data: A~" (.location_data i))))
							     1)
						      XmNactivateCallback (list (lambda (w c i) (vector-set! calls c "act")) 2)
						      XmNfocusCallback (list (lambda (w c i) (vector-set! calls c "focus")) 3)
						      XmNlosingFocusCallback (list (lambda (w c i) (vector-set! calls c "losingfocus")) 4)
						      XmNgainPrimaryCallback (list (lambda (w c i) (vector-set! calls c "gain")) 5)
						      XmNlosePrimaryCallback (list (lambda (w c i) (vector-set! calls c "lose")) 6)
						      XmNmodifyVerifyCallback 
						       (list (lambda (w c i) 
							       (vector-set! calls c "modify")
							       (if (< (.currInsert i) 0) (snd-display ";currInsert: A~" (.currInsert i)))
							       (if (< (.newInsert i) 0) (snd-display ";newInsert: A~" (.newInsert i)))
							       (if (string? (.doit i)) (snd-display ";doit: A~" (.doit i)))
							       (if (< (.startPos i) 0) (snd-display ";startPos: A~" (.startPos i)))
							       (if (< (.endPos i) 0) (snd-display ";endPos: A~" (.endPos i))))
							     7)
						      XmNmotionVerifyCallback (list (lambda (w c i) (vector-set! calls c "motion")) 8)
						      XmNvalueChangedCallback (list (lambda (w c i) (vector-set! calls c "value")) 9)))))
	      (letrec ((transfer-proc
			(lambda (w c info)
			  (let* ((dpy (XtDisplay w))
				 (TARGETS (XmInternAtom dpy "TARGETS" #f))
				 (CB_TARGETS (XmInternAtom dpy "_MOTIF_CLIPBOARD_TARGETS" #f)))
			    (if (equal? (.target info) XA_STRING)
				(begin
				  (XmTextInsert w (XmTextGetInsertionPosition w) (->string (.value info)))
				  (XmTransferDone (.transfer_id info) XmTRANSFER_DONE_SUCCEED))
				(if (and (or (equal? (.target info) TARGETS)
					     (equal? (.target info) CB_TARGETS))
					 (equal? (.type info) XA_ATOM))
				    (let ((targets (->Atoms (.value info) (.length info)))
					  (happy #f))
				      (for-each
				       (lambda (targ)
					 (if (equal? targ XA_STRING)
					     (set! happy #t)))
				       targets)
				      (if happy
					  (XmTransferValue (.transfer_id info) 
							    XA_STRING
							     transfer-proc
							     #f
							     (XtLastTimestampProcessed dpy)))))))))
		       (txtf (XtVaCreateManagedWidget "textfield" xmTextFieldWidgetClass frm
						       (list XmNeditable #t
							     XmNleftAttachment      XmATTACH_FORM
							     XmNrightAttachment     XmATTACH_FORM
							     XmNtopAttachment       XmATTACH_WIDGET
							     XmNtopWidget           txt
							     XmNbottomAttachment    XmATTACH_FORM))))
							      
	      (let ((vals (XtVaGetValues txt (list XmNrenderTable 0 XmNselectionArray 0))))
		(if (not (XmRenderTable? (list-ref vals 1))) (snd-display ";XmNrenderTable: ~A" (list-ref vals 1)))
		(if (not (list-p (list-ref vals 3))) (snd-display ";XmNselectionArray: ~A" (list-ref vals 3))))
	      (if (not (XmTextGetEditable txt)) (snd-display ";XmTextGetEditable?"))
	      (if (not (XmTextFieldGetEditable txtf)) (snd-display ";XmTextFieldGetEditable?"))
	      (XmTextSetEditable txt #f)
	      (XmTextFieldSetEditable txtf #f)
	      (if (XmTextGetEditable txt) (snd-display ";XmTextSetEditable?"))
	      (if (XmTextFieldGetEditable txtf) (snd-display ";XmTextFieldSetEditable?"))
	      (XmTextSetEditable txt #t)
	      (XmTextFieldSetEditable txtf #t)
	      (XmTextSetString txt "0123456789")
	      (XmTextFieldSetString txtf "0123456789")
	      (XmTextFieldCopyLink txtf (list 'Time CurrentTime))
	      (let ((val (XmTextGetString txt))
		    (valf (XmTextFieldGetString txtf))
		    (val1 (cadr (XtVaGetValues txt (list XmNvalue 0))))
		    (val1f (cadr (XtVaGetValues txtf (list XmNvalue 0)))))
		(if (not (string=? val "0123456789")) (snd-display ";XmTextSetString: ~A" val))
		(if (not (string=? valf "0123456789")) (snd-display ";XmTextFieldSetString: ~A" valf))
		(if (not (string=? val1 "0123456789")) (snd-display ";text value: ~A" val1))
		(if (not (string=? val1f "0123456789")) (snd-display ";text field value: ~A" val)))
	      (let ((untext (XtCreateWidget "untext" xmTextWidgetClass frm '()))
		    (source (XmTextGetSource txt)))
		(XmTextSetSource untext source 0 3)
		(if (not (XmTextSource? source))
		    (snd-display ";XmTextSource? ~A" source))
		(if (not (equal? (XmTextGetSource untext) source))
		    (snd-display ";XmTextSetSource: ~A ~A" source (XmTextGetSource untext)))
		(if (XtIsSubclass untext xmFormWidgetClass)
		    (snd-display ";XtIsSubclass thinks untext is a form?"))
		(if (not (XtIsSubclass untext coreWidgetClass))
		    (snd-display ";XtIsSubclass thinks untext is not a core widget"))
		(XmTextCopyLink untext (list 'Time CurrentTime))
		(XmTextPasteLink untext))
	      (let ((val (XmTextGetSubstring txt 2 3))
		    (valf (XmTextFieldGetSubstring txtf 2 3)))
		(if (not (string=? val "234")) (snd-display ";XmTextGetSubstring: ~A" val))
		(if (not (string=? valf "234")) (snd-display ";XmTextFieldGetSubstring: ~A" valf)))
	      (XmTextSetSelection txt 2 5 current-time)
	      (let ((val (XmTextGetSelection txt)))
		(if (not (string=? val "234")) (snd-display ";XmTextGetSelection: ~A" val)))
	      (XmTextClearSelection txt current-time)
	      (let ((val (XmTextGetSelection txt)))
		(if val (snd-display ";XmTextClearSelection: ~A" val)))
	      (XmTextFieldSetSelection txtf 2 5 current-time)
	      (let ((tag (catch #t
				(lambda ()
				  (XmTextFieldSetSelection txt 2 3 current-time))
				(lambda args (car args)))))
		(if (not (eq? tag 'wrong-type-arg))
		    (snd-display ";text field type check: ~A" tag)))
	      (let ((tag (catch #t
				(lambda ()
				  (XmTextSetSelection frm 2 3 current-time))
				(lambda args (car args)))))
		(if (not (eq? tag 'wrong-type-arg))
		    (snd-display ";text type check: ~A" tag)))
	      (let ((dpy (XtDisplay (cadr (main-widgets))))
		    (win (XtWindow (cadr (main-widgets))))
		    (app (car (main-widgets))))
		(let ((tag (catch #t (lambda () (XmTransferSetParameters 123 123 123 123 "hiho")) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XmTransferSetParameters type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XmTrackingLocate txtf (list 'Cursor 1) "hiho")) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XmTrackingLocate type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XmTrackingEvent txtf (list 'Cursor 1) "hiho")) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XmTrackingEvent type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XmDropSiteConfigureStackingOrder txtf txtf "hiho")) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XmDropSiteConfigureStackingOrder type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XmScrollVisible txtf txtf 5 "hiho")) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XmScrollVisible type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XmScrolledWindowSetAreas txtf txtf txtf "hiho")) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XmScrolledWindowSetAreas type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XmDragStart txtf (XEvent KeyPress) (list 0 1) "hiho")) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XmDragStart type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XmClipboardStartRetrieve dpy win 1)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XmClipboardStartRetrieve type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XmClipboardCopyByName dpy win 1 "hi" "hi" 1)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XmClipboardCopyByName type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XmClipboardBeginCopy dpy win "hi" txtf #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XmClipboardBeginCopy type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XmRemoveProtocolCallback txtf XA_STRING XA_STRING #f 1)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XmRemoveProtocolCallback type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XmPrintToFile dpy "hi" #f #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XmPrintToFile type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XmPrintSetup txtf (list 'Screen 0) "hi" (list 1 2) #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XmPrintSetup type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XSetStandardColormap dpy win 1 1)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XSetStandardColormap type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XSetRGBColormaps dpy win (list 'XStandardColormap 0) 1 #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XSetRGBColormap type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XSetWMHints dpy win 1)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XSetWMHints type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XWindowEvent dpy win #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XWindowEvent type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XStoreNamedColor dpy (list 'Colormap 0) "hi" 0 #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XStoreNamedColor type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XStoreColors dpy (list 'Colormap 0) (list 1 2) #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XStoreColors type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XStoreColor dpy (list 'Colormap 0) (list 1 2))) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XStoreColor type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XtCreateApplicationShell "hiho" xmFormWidgetClass (list 1 2) #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XtCreateApplicationShell type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XtDisplayInitialize app dpy "hi" "ho" 1 1)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XtDisplayInitialize type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XtOwnSelectionIncremental txtf '(Atom 0) '(Time 0) #f #f #f #f #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XtOwnSelectionIncremental type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XtOwnSelection txtf '(Atom 0) '(Time 0) #f #f #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XtOwnSelection type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XtGetSelectionValue txtf '(Atom 0) '(Atom 0) #f #f #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XtGetSelectionValue type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XtGetSelectionValues txtf '(Atom 0) (list (list 'Atom 0)) #f #f #f #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XtGetSelectionValues type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XtDisownSelection txtf '(Atom 0) #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XtDisownSelection type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XtGetSelectionRequest txtf '(Atom 0) #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XtGetSelectionRequest type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XtGetSelectionValueIncremental txtf '(Atom 0) (list (list 'Atom 0)) 1 #f #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XtGetSelectionValueIncremental type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XtGetSelectionValuesIncremental txtf '(Atom 0) '(Atom 0) 1 #f #f #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XtGetSelectionValuesIncremental type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XtSendSelectionRequest txtf '(Atom 0) #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XtSendSelectionRequest type check: ~A" tag)))

		(let ((tag (catch #t (lambda () (XpPutDocumentData dpy win "hi" 1 "hi" #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XpPutDocumentData type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XpGetDocumentData dpy (list 'XPContext 0) #f #f #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XpGetDocumentData type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XpSelectInput dpy (list 'XPContext 0) #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XpSelectInput type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XpInputSelected dpy (list 'XPContext 0) #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XpInputSelected type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XpGetPdmStartParams dpy win (list 'XPContext 0) dpy #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XpGetPdmStartParams type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XpSetImageResolution dpy (list 'XPContext 0) 1 #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XpSetImageResolution type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XpSendOneTicket dpy win (list 'XPContext 0) 1)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XpSendOneTicket type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XpGetAttributes dpy (list 'XPContext 0) #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XpGetAttribuyes type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XpNotifyPdm dpy win (list 'XPContext 0) dpy win 1)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XpNotifyPdm type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XpGetOneAttribute dpy (list 'XPContext 0) 1 #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XpGetOneAttribute type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XpSetAttributes dpy (list 'XPContext 0) 1 "hi" #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XpSetAttributes type check: ~A" tag)))

		(let ((tag (catch #t (lambda () (XReconfigureWMWindow dpy win 1 1 #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XReconfigureWMWindow type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XSetWMProtocols dpy win 1 1)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XSetWMProtocols type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XIconifyWindow dpy win #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XIconifyWindow type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XWithdrawWindow dpy win #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XWithdrawWindow type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XSetWMColormapWindows dpy win #f 1)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XSetWMColormapWindows type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XSetTransientForHint dpy win #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XSetTransientForHint type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XAllowEvents dpy 1 #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XAllowEvents type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XChangeActivePointerGrab dpy 1 '(Cursor 0) #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XChangeActivePointerGrab type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XChangeGC dpy '(GC 0) 1 #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XChangeGC type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XChangeKeyboardMapping dpy 1 1 (list 1 1) #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XChangeKeyboardMapping type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XConfigureWindow dpy win 1 #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XConfigureWindow type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XConvertSelection dpy '(Atom 0) '(Atom 0) '(Atom 0) win #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XConvertSelection type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XReparentWindow dpy win win 1 #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XReparentWindow type check: ~A" tag)))

		(let ((tag (catch #t (lambda () (XFreeColors dpy '(Colormap 0) (list 0) 1 #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XFreeColors type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XReadBitmapFile dpy win #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XReadBitmapFile type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XRebindKeysym dpy '(KeySym 0) (list 0) 1 "hi" #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XRebindKeysym type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XRestackWindows dpy (list 0) #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XRestackWindows type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XRotateWindowProperties dpy win (list 0) 1 #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XRotateWindowProperties type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XSelectInput dpy win #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XSelectInput type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XSetFontPath dpy (list 0) #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XSetFontPath type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XSetInputFocus dpy win 1 #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XSetInputFocus type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XSetSelectionOwner dpy '(Atom 0) win #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XSetSelectionOwner type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XSetWindowColormap dpy win #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XSetWindowColormap type check: ~A" tag)))
		(let ((tag (catch #t (lambda () (XmClipboardCancelCopy dpy win #f)) (lambda args (car args)))))
		  (if (not (eq? tag 'wrong-type-arg)) (snd-display ";XmClipboardCancelCopy type check: ~A" tag)))

	      )

	      (let ((valf (XmTextFieldGetSelection txtf)))
		(if (not (string=? valf "234")) (snd-display ";XmTextFieldGetSelection: ~A" valf)))
	      (XmTextFieldClearSelection txtf current-time)
	      (let ((valf (XmTextFieldGetSelection txtf)))
		(if valf (snd-display ";XmTextFieldClearSelection: ~A" valf)))
	      (let ((val (XmTextGetInsertionPosition txt))
		    (valf (XmTextFieldGetInsertionPosition txtf)))
		(if (not (= val 5)) (snd-display ";XmTextGetInsertionPosition: ~A" val))
		(if (not (= valf 5)) (snd-display ";XmTextFieldGetInsertionPosition: ~A" val)))
	      
	      (XmTextSetSelection txt 2 5 current-time)
	      (XmTextCut txt current-time)
	      (let ((val (XmTextGetString txt)))
		(if (not (string=? val "0156789")) (snd-display ";XmTextCut: ~A" val)))
	      (XmTextPaste txt) 
	      (let ((val (XmTextGetString txt)))
		(if (not (string=? val "0123456789")) (snd-display ";XmTextPaste: ~A" val)))
	      (XmTextFieldSetSelection txtf 2 5 current-time)
	      (XmTextFieldCut txtf current-time)
	      (let ((val (XmTextFieldGetString txtf)))
		(if (not (string=? val "0156789")) (snd-display ";XmTextFieldCut: ~A" val)))
	      (XmTextFieldPaste txtf) 
	      (let ((val (XmTextFieldGetString txtf)))
		(if (not (string=? val "0123456789")) (snd-display ";XmTextFieldPaste: ~A" val)))
	      
	      (XmTextSetSelection txt 1 2 current-time)
	      (if (not (equal? (XmTextGetSelectionPosition txt) (list #t 1 2)))
		  (snd-display ";XmTextGetSelectionPosition: ~A" (XmTextGetSelectionPosition txt)))
	      (XmTextCopy txt current-time)
	      (XmTextSetInsertionPosition txt 8)
	      (XmTextPaste txt)
	      (let ((dest (XmGetDestination (XtDisplay (cadr (main-widgets))))))
		(if (not (equal? txt dest)) (snd-display ";XmGetDestination: ~A (~A)" dest txt)))
	      (XmRedisplayWidget txt)
	      (let ((val (XmTextGetString txt)))
		(if (not (string=? val "01234567189")) (snd-display ";XmTextCopy and Paste: ~A" val)))
	      (XmTextFieldSetSelection txtf 1 2 current-time)
	      (if (not (equal? (XmTextFieldGetSelectionPosition txtf) (list #t 1 2)))
		  (snd-display ";XmTextFieldGetSelectionPosition: ~A" (XmTextFieldGetSelectionPosition txtf)))
	      (XmTextFieldCopy txtf current-time)
	      (XmTextFieldSetInsertionPosition txtf 8)
	      (XmTextFieldPaste txtf)
	      (let ((val (XmTextGetString txtf)))
		(if (not (string=? val "01234567189")) (snd-display ";XmTextFieldCopy and Paste: ~A" val)))
	      
	      (XmTextSetMaxLength txt 1234)
	      (if (not (= (XmTextGetMaxLength txt) 1234)) (snd-display ";XmTextGetMaxLength: ~A" (XmTextGetMaxLength txt)))
	      (XmTextFieldSetMaxLength txtf 1234)
	      (if (not (= (XmTextFieldGetMaxLength txtf) 1234)) (snd-display ";XmTextFieldGetMaxLength: ~A" (XmTextFieldGetMaxLength txtf)))
	      
	      (XmTextSetCursorPosition txt 1)
	      (if (not (= (XmTextGetCursorPosition txt) 1)) (snd-display ";XmTextGetCursorPosition: ~A" (XmTextGetCursorPosition txt)))
	      (XmTextFieldSetCursorPosition txtf 1)
	      (if (not (= (XmTextFieldGetCursorPosition txtf) 1)) (snd-display ";XmTextFieldGetCursorPosition: ~A" (XmTextFieldGetCursorPosition txtf)))
	      
	      (XmTextReplace txt 0 2 "ab")
	      (let ((val (XmTextGetString txt)))
		(if (not (string=? val "ab234567189")) (snd-display ";XmTextReplace: ~A" val)))
	      (XmTextFieldReplace txtf 0 2 "ab")
	      (let ((val (XmTextFieldGetString txtf)))
		(if (not (string=? val "ab234567189")) (snd-display ";XmTextFieldReplace: ~A" val)))
	      
	      (XmTextDisableRedisplay txt)
	      (let ((pos (XmTextFindString txt 0 "67" XmTEXT_FORWARD)))
		(if (or (not pos)
			(not (= pos 6)))
		    (snd-display ";XmTextFindString ~A" pos)))
	      (XmTextEnableRedisplay txt)
	      (let ((base (XmTextGetBaseline txt))
		    (center (XmTextGetCenterline txt)))
		(if (or (< base 0) (not (= center 0))) (snd-display ";XmTextGetCenterBaseline: ~A ~A" base center)))
	      
	      (let ((pos (XmTextGetLastPosition txt)))
		(if (not (= pos 11)) (snd-display ";XmTextGetLastPosition: ~A" pos)))
	      (let ((pos (XmTextFieldGetLastPosition txtf)))
		(if (not (= pos 11)) (snd-display ";XmTextFieldGetLastPosition: ~A" pos)))
	      (let ((pos (XmTextGetTopCharacter txt)))
		(if (not (= pos 0)) (snd-display ";XmTextGetTopCharacter: ~A" pos)))
	      (let ((pos (XmTextPosToXY txt 0)))
		(if (not (number? (cadr pos))) (snd-display ";XmTextPosToXY: ~A" pos)))
	      (let ((pos (XmTextFieldPosToXY txtf 0)))
		(if (not (number? (cadr pos))) (snd-display ";XmTextFieldPosToXY: ~A" pos)))
	      
	      (XmTextSetSelection txt 0 2 current-time)
	      (XmTextRemove txt)
	      (let ((val (XmTextGetString txt)))
		(if (not (string=? val "234567189")) (snd-display ";XmTextRemove: ~A" val)))
	      (XmTextFieldSetSelection txtf 0 2 current-time)
	      (XmTextFieldRemove txtf)
	      (let ((val (XmTextFieldGetString txtf)))
		(if (not (string=? val "234567189")) (snd-display ";XmTextFieldRemove: ~A" val)))

	      (XmTextInsert txt 0 "hi")
	      (let ((val (XmTextGetString txt)))
		(if (not (string=? val "hi234567189")) (snd-display ";XmTextInsert: ~A" val)))
	      (XmTextFieldInsert txtf 0 "hi")
	      (let ((val (XmTextFieldGetString txtf)))
		(if (not (string=? val "hi234567189")) (snd-display ";XmTextFieldInsert: ~A" val)))
	      
	      (XmTextScroll txt 1)
	      (XmTextScroll txt -1)
	      (let ((pos (XmTextGetTopCharacter txt)))
		(if (not (= pos 0)) (snd-display ";XmTextGetTopCharacter after scroll: ~A" pos)))
	      (XmTextShowPosition txt 0)
	      (XmTextFieldShowPosition txtf 0)
	      (XmTextSetTopCharacter txt 0)
	      (XmTextXYToPos txt 10 10)
	      (XmTextFieldXYToPos txtf 10 10)
	      
	      (XmTextSetHighlight txt 3 6 XmHIGHLIGHT_SELECTED)
	      (XmTextFieldSetHighlight txtf 3 6 XmHIGHLIGHT_SELECTED)
	      (XmTextFieldGetBaseline txtf)
	      (XmTextSetAddMode txt #t)
	      (if (not (XmTextGetAddMode txt)) (snd-display ";XmTextSetAddMode?"))
	      (XmTextFieldSetAddMode txtf #t)
	      (if (not (XmTextFieldGetAddMode txtf)) (snd-display ";XmTextFieldSetAddMode?"))
	      
	      (if (not (string=? (vector-ref calls 1) "dest")) (snd-display ";destination callback: ~A" (vector-ref calls 1)))
	      ;(if (not (string=? (vector-ref calls 3) "focus")) (snd-display ";focus callback: ~A" (vector-ref calls 3)))
	      ;(if (not (string=? (vector-ref calls 4) "losingfocus")) (snd-display ";losingfocus callback: ~A" (vector-ref calls 4)))
	      (if (not (string=? (vector-ref calls 5) "gain")) (snd-display ";gain callback: ~A" (vector-ref calls 5)))
	      (if (not (string=? (vector-ref calls 6) "lose")) (snd-display ";lose callback: ~A" (vector-ref calls 6)))
	      (if (not (string=? (vector-ref calls 7) "modify")) (snd-display ";modify callback: ~A" (vector-ref calls 7)))
	      (if (not (string=? (vector-ref calls 8) "motion")) (snd-display ";motion callback: ~A" (vector-ref calls 8)))
	      (if (not (string=? (vector-ref calls 9) "value")) (snd-display ";value callback: ~A" (vector-ref calls 9)))

	      (let ((txtf1 (XtVaCreateManagedWidget "textfield" xmTextFieldWidgetClass frm
						       (list XmNeditable #t
							     XmNleftAttachment      XmATTACH_FORM
							     XmNrightAttachment     XmATTACH_FORM
							     XmNtopAttachment       XmATTACH_WIDGET
							     XmNtopWidget           txt
							     XmNbottomAttachment    XmATTACH_FORM
							     XmNdestinationCallback
							      (list (lambda (w c info)
								      (let* ((dpy (XtDisplay w))
									     (TARGETS (XmInternAtom dpy "TARGETS" #f)))
									(XmTransferValue (.transfer_id info) 
											  TARGETS 
											  transfer-proc
											  #f
											  (XtLastTimestampProcessed dpy))))
								    #f)))))
		(focus-widget txtf1)
		(XmTextFieldPaste txtf1)
		(XmTextFieldPasteLink txtf1)
		(if (not (Widget? (XmGetTabGroup txtf1))) (snd-display ";XmGetTabGroup: ~A " (XmGetTabGroup txtf1)))
		(let ((fw (XmGetFocusWidget (cadr (main-widgets)))))
		  (if (not (equal? fw txtf1))
		      (snd-display ";XmGetFocusWidget: ~A" fw)))
		(let ((callback (lambda (w context ev flag)
				  (XtSetValues w (list XmNbackground (white-pixel))))))
		  (XtAddEventHandler txtf1 EnterWindowMask #f callback #f)
		  (XtRemoveEventHandler txtf1 EnterWindowMask #f callback #f)
		  (XtAddRawEventHandler txtf1 EnterWindowMask #f callback #f)
		  (XtRemoveRawEventHandler txtf1 EnterWindowMask #f callback #f)
		  (XtInsertEventHandler txtf1 EnterWindowMask #f callback #f XtListHead)
		  (XtRemoveEventHandler txtf1 EnterWindowMask #f callback #f)
		  (XtInsertRawEventHandler txtf1 EnterWindowMask #f callback #f XtListTail)
		  (XtRemoveRawEventHandler txtf1 EnterWindowMask #f callback #f))
		(XtRemoveAllCallbacks txtf1 XmNdestinationCallback))
	      (XtAppAddActions (car (main-widgets)) (list (list "hiho" (lambda args (snd-print "hiho")))))
	      (XtAugmentTranslations txt (XtParseTranslationTable "Ctrl <Key>i: hiho()\n"))
	      (XtCallActionProc txt "hiho" (XEvent) #f 0)
	      (XtUninstallTranslations txt)
	      (XtUnmanageChild frm)))

	    (let* ((shell (cadr (main-widgets)))
		   (dpy (XtDisplay shell))
		   (win (XtWindow shell))
		   (err (XmClipboardRegisterFormat dpy "SND_DATA" 8)))
	      (if (not (= err ClipboardSuccess)) 
		  (snd-display ";XmClipboardRegisterFormat: ~A" err)
		  (let ((vals (XmClipboardStartCopy dpy win
						     (XmStringCreateLocalized "SND_DATA") 
						     (list 'Time CurrentTime) 
						     shell
						     (lambda (w id pid reason)
						       (let ((status (XmClipboardCopyByName dpy win id "copy this" 10 123))))))))
		    (if (not (= (car vals) ClipboardSuccess))
			(snd-display ";XmClipboardStartCopy: ~A" vals)
			(let ((data-id (cadr vals)))
			  (set! err (XmClipboardCopy dpy win data-id "SND_DATA" "copy this" 10 0))
			  (if (not (= (car err) ClipboardSuccess)) (snd-display ";XmClipboardCopy: ~A" err))
			  (let ((item-id (cadr err)))
			    (set! err (XmClipboardEndCopy dpy win data-id))
			    (if (not (= err ClipboardSuccess)) (snd-display (format "copy ~A" err)))
			    (if (not (= (cadr (XmClipboardInquireLength dpy win "SND_DATA")) 10))
				(snd-display ";clip len: ~A" (XmClipboardInquireLength dpy win "SND_DATA")))
			    (let ((pend (XmClipboardInquirePendingItems dpy win "SND_DATA")))
			      (if (not (= (car pend) ClipboardSuccess)) (snd-display ";XmClipboardInquirePendingItems: ~A" pend)))
			    (let ((formats (XmClipboardInquireCount dpy win)))
			      (if (= (cadr formats) 0) (snd-display ";XmClipboardInquireCount: ~A" formats))
			      (let ((data (XmClipboardInquireFormat dpy win 1 10)))
				(let ((clip (XmClipboardRetrieve dpy win "SND_DATA" 10)))
				  (if (not (string=? (cadr clip) "copy this")) (snd-display ";XmClipboardRetrieve: ~A" clip))
				  (XmClipboardWithdrawFormat dpy win item-id)))))))))
	      (let ((val (XmClipboardLock dpy win)))
		(if (not (= val ClipboardLocked))
		    (XmClipboardUnlock dpy win #t)))
	      (let ((selbox (XmCreateSelectionBox shell "selbox" '() 0)))
		(XmSelectionBoxGetChild selbox XmDIALOG_APPLY_BUTTON)))


	    (let* ((frm (add-main-pane "hi" xmFormWidgetClass (list XmNpaneMinimum 120)))
		   (current-time (list 'Time CurrentTime))
		   (box (XtCreateManagedWidget "box" xmContainerWidgetClass frm '()))
		   (tgl (XtCreateManagedWidget "tgl" xmToggleButtonWidgetClass frm
						(list XmNleftAttachment      XmATTACH_FORM
						      XmNrightAttachment     XmATTACH_FORM
						      XmNtopAttachment       XmATTACH_FORM
						      XmNbottomAttachment    XmATTACH_NONE)))
		   (tgg (XtCreateManagedWidget "tgg" xmToggleButtonGadgetClass frm
						(list XmNleftAttachment      XmATTACH_FORM
						      XmNrightAttachment     XmATTACH_FORM
						      XmNtopAttachment       XmATTACH_WIDGET
						      XmNtopWidget           tgl
						      XmNbottomAttachment    XmATTACH_NONE)))
		   (mnw (XtCreateManagedWidget "mnw" xmMainWindowWidgetClass frm
						(list XmNcommandWindow       box
						      XmNleftAttachment      XmATTACH_FORM
						      XmNrightAttachment     XmATTACH_FORM
						      XmNtopAttachment       XmATTACH_WIDGET
						      XmNtopWidget           tgg
						      XmNbottomAttachment    XmATTACH_NONE)))
		   (spn (XtCreateManagedWidget "spn" xmSimpleSpinBoxWidgetClass frm
						(list XmNleftAttachment      XmATTACH_FORM
						      XmNrightAttachment     XmATTACH_FORM
						      XmNtopAttachment       XmATTACH_WIDGET
						      XmNtopWidget           mnw
						      XmNbottomAttachment    XmATTACH_NONE)))
		   (cmd (XtCreateManagedWidget "cmd" xmCommandWidgetClass frm
						(list XmNleftAttachment      XmATTACH_FORM
						      XmNrightAttachment     XmATTACH_FORM
						      XmNtopAttachment       XmATTACH_WIDGET
						      XmNtopWidget           spn
						      XmNbottomAttachment    XmATTACH_NONE)))
		   (scl (XtCreateManagedWidget "scl" xmScaleWidgetClass frm
						(list XmNleftAttachment      XmATTACH_FORM
						      XmNrightAttachment     XmATTACH_FORM
						      XmNtopAttachment       XmATTACH_WIDGET
						      XmNtopWidget           cmd
						      XmNbottomAttachment    XmATTACH_NONE)))
		   (notes (XtCreateManagedWidget "notes" xmNotebookWidgetClass frm
						(list XmNleftAttachment      XmATTACH_FORM
						      XmNrightAttachment     XmATTACH_FORM
						      XmNtopAttachment       XmATTACH_WIDGET
						      XmNtopWidget           scl
						      XmNbottomAttachment    XmATTACH_NONE)))

		   (cmb (XtCreateManagedWidget "cmb" xmComboBoxWidgetClass frm
						(list XmNleftAttachment      XmATTACH_FORM
						      XmNrightAttachment     XmATTACH_FORM
						      XmNtopAttachment       XmATTACH_WIDGET
						      XmNtopWidget           notes
						      XmNbottomAttachment    XmATTACH_FORM)))
		   (toggled 0))
	      (XtCreateManagedWidget "one" xmPushButtonWidgetClass notes '())
	      (XtCreateManagedWidget "two" xmPushButtonWidgetClass notes '())
	      (let ((info (cadr (XmNotebookGetPageInfo notes 1))))
		(if (not (= (.page_number info) 1)) (snd-display ";page_number: ~A" (.page_number info)))
		(if (.page_widget info) (snd-display ";page_widget: ~A" (.page_widget info)))
		(if (.status_area_widget info) (snd-display ";status_area_widget: ~A" (.status_area_widget info)))
		(if (not (Widget? (.major_tab_widget info))) (snd-display ";major_tab_widget: ~A" (.major_tab_widget info)))
		(if (.minor_tab_widget info) (snd-display ";minor_tab_widget: ~A" (.minor_tab_widget info))))

	      (XmMainWindowSetAreas mnw #f box #f #f spn)
	      (if (not (Widget? (XmMainWindowSep1 mnw))) (snd-display ";XmMainWindowSep1: ~A" (XmMainWindowSep1 mnw)))
	      (if (not (Widget? (XmMainWindowSep2 mnw))) (snd-display ";XmMainWindowSep2: ~A" (XmMainWindowSep2 mnw)))
	      (if (not (Widget? (XmMainWindowSep3 mnw))) (snd-display ";XmMainWindowSep3: ~A" (XmMainWindowSep3 mnw)))
	      
	      (XmSimpleSpinBoxAddItem spn (XmStringCreateLocalized "hiho") 0)
	      (XmSimpleSpinBoxAddItem spn (XmStringCreateLocalized "away") 0)
	      (XmSimpleSpinBoxDeletePos spn 0)
	      (let ((vals (XtVaGetValues spn (list XmNvalues 0))))
		(XmSimpleSpinBoxSetItem spn (car (cadr vals))))
	      (XmSimpleSpinBoxAddItem spn (XmStringCreateLocalized "another") 0)
	      (let ((vals (XtGetValues spn (list XmNeditable 0 XmNtextField 0))))
		(if (not (list-ref vals 1)) (snd-display ";XmNeditable spin box"))
		(if (not (Widget? (list-ref vals 3))) (snd-display ";XmNtextField: ~A" (list-ref vals 3))))
	      
	      (XtAddCallback tgl XmNvalueChangedCallback (lambda (w c i) (set! toggled 123)) #f)
	      (XmToggleButtonSetState tgl #f #f)
	      (XmToggleButtonGadgetSetState tgg #f #f)
	      (if (not (= toggled 0)) (snd-display ";toggle calledback: ~A?" toggled))
	      (if (XmToggleButtonGetState tgl) (snd-display ";XmToggleButtonSetState #f"))
	      (if (XmToggleButtonGadgetGetState tgg) (snd-display ";XmToggleButtonGadgetSetState #f"))
	      (XtVaSetValues tgl (list XmNtoggleMode XmTOGGLE_INDETERMINATE))
	      (XmToggleButtonSetValue tgl XmINDETERMINATE #t)
	      (XmToggleButtonGadgetSetValue tgg XmINDETERMINATE #t)
	      (if (not (= toggled 123)) (snd-display ";toggle not calledback: ~A?" toggled))
	      
	      (XmCommandAppendValue cmd (XmStringCreateLocalized "hiho"))
	      (XmCommandError cmd (XmStringCreateLocalized "hiho"))
	      (if (not (Widget? (XmCommandGetChild cmd XmDIALOG_COMMAND_TEXT)))
		  (snd-display ";XmCommandGetChild: ~A" (XmCommandGetChild cmd XmDIALOG_COMMAND_TEXT)))
	      (XmCommandSetValue cmd (XmStringCreateLocalized "hiho"))
	      
	      (let ((one (XmStringCreateLocalized "one"))
		    (two (XmStringCreateLocalized "two"))
		    (three (XmStringCreateLocalized "three")))
		(XmComboBoxAddItem cmb one 0 #f)
		(XmComboBoxAddItem cmb two 0 #f)
		(XmComboBoxAddItem cmb three 0 #f)
		(XmComboBoxDeletePos cmb 1)
		(XmComboBoxSelectItem cmb three)
		(XmComboBoxSetItem cmb three) ; hunh??
		(XmComboBoxUpdate cmb)
		(let ((vals (cadr (XtGetValues cmb (list XmNitems 0)))))
		  (if (not (equal? vals (list two three))) (snd-display ";XmComboBox: ~A" vals))))

	      (XmContainerCut box current-time)
	      (XmContainerCopy box current-time)
	      (XmContainerPaste box)
	      (XmContainerCopyLink box (list 'Time CurrentTime))
	      (XmContainerPasteLink box)
	      
	      (XmScaleSetValue scl 25)
	      (if (not (= (XmScaleGetValue scl) 25)) (snd-display ";XmScaleSetValue: ~A" (XmScaleGetValue scl)))
	      (if (XmGetTearOffControl (car (menu-widgets))) (snd-display ";XmGetTearOffControl: ~A" (XmGetTearOffControl (car (menu-widgets)))))
	      (let ((children (cadr (XtGetValues scl (list XmNchildren 0)))))
		(for-each 
		 (lambda (w)
		   (let ((name (XtName w)))
		     (if (and (XmIsSeparatorGadget w)
			      (or (string=? name "BigTic")
				  (string=? name "MedTic")
				  (string=? name "SmallTic")))
			 (XtDestroyWidget w))))
		 children))
	      (XmScaleSetTicks scl 5 2 0 10 5 0)
	      )
	    
	    (let* ((shell (cadr (main-widgets)))
		   (dpy (XtDisplay shell))
		   (screen (XDefaultScreenOfDisplay dpy))
		   (vals (XtGetValues shell 
				       (list XmNscreen 0 XmNtitleEncoding 0 XmNbuttonFontList 0 XmNaudibleWarning 0
					     XmNpreeditType 0 XmNtextRenderTable 0 XmNtitle 0 XmNwindowGroup 0 
					     XmNargv 0 XmNcolormap 0))))
	      (if (not (equal? screen (list-ref vals 1))) (snd-display ";XmNscreen: ~A ~A" (list-ref vals 1) screen))
	      (if (not (Atom? (list-ref vals 3))) (snd-display ";XmNtitleEncoding: ~A" (list-ref vals 3)))
	      (if (not (XmFontList? (list-ref vals 5))) (snd-display ";XmNbuttonFontList: ~A" (list-ref vals 5)))
	      (if (not (list-ref vals 7)) (snd-display ";XmNaudibleWarning: ~A" (list-ref vals 7)))
	      (if (or (not (string? (list-ref vals 9)))
		      (not (string=? (list-ref vals 9) "OverTheSpot,OffTheSpot,Root,OnTheSpot")))
		  (snd-display ";XmNpreeditType: ~A" (list-ref vals 9)))
	      (if (not (XmRenderTable? (list-ref vals 11))) (snd-display ";XmNtextRenderTable: ~A" (list-ref vals 11)))
	      (if (not (string=? (list-ref vals 13) "snd")) (snd-display ";XmNtitle: ~A" (list-ref vals 13)))
	      (if (not (Window? (list-ref vals 15))) (snd-display ";XmNwindowgroup: ~A" (list-ref vals 15)))
	      (if (or (not (list-p (list-ref vals 17)))
		      (not (string=? (car (list-ref vals 17)) "./snd")))
		  (snd-display ";XmNargv: ~A" (list-ref vals 17)))
	      (if (not (Colormap? (list-ref vals 19))) (snd-display ";XmNcolormap: ~A" (list-ref vals 19)))
	      )

	    (XmSetColorCalculation #f)
	    (let* ((dpy (XtDisplay (cadr (main-widgets))))
		   (scr1 (DefaultScreen dpy))
		   (cmap (DefaultColormap dpy scr1))
		   (screen (XDefaultScreenOfDisplay dpy))
		   (scr (XmGetXmScreen (XDefaultScreenOfDisplay dpy)))
		   (old-h (cadr (XtVaGetValues scr (list XmNhorizontalFontUnit 0))))
		   (old-v (cadr (XtVaGetValues scr (list XmNverticalFontUnit 0)))))
	      (if (not (XmIsScreen scr)) (snd-display ";XmIsScreen: ~A" scr))
	      (let ((colors (XmGetColors screen cmap (basic-color))))
		(if (not (Pixel? (car colors)))
		    (snd-display ";colors: ~A " colors))
		(let ((color-proc (lambda (bg)
				    (list (white-pixel) (black-pixel) (white-pixel) (black-pixel)))))
		  (XmSetColorCalculation color-proc)
		  (if (not (equal? (XmGetColorCalculation) color-proc))
		      (snd-display ";XmSetColorcalulcation ~A" (XmGetColorCalculation)))))
	      (let ((str (XmStringSegmentCreate "hi" XmFONTLIST_DEFAULT_TAG XmSTRING_DIRECTION_L_TO_R #f)))
		(if (not (XmString? str))
		    (snd-display ";XmStringSegmentCreate: ~A" str)))
	      (XmSetFontUnits dpy 8 10)
	      (if (or (not (= (cadr (XtVaGetValues scr (list XmNhorizontalFontUnit 0))) 8))
		      (not (= (cadr (XtVaGetValues scr (list XmNverticalFontUnit 0))) 10)))
		  (snd-display ";XmSetFontUnits: ~A" (XtVaGetValues scr (list XmNhorizontalFontUnit 0 XmNverticalFontUnit 0))))
	      (XmSetFontUnit dpy 8)
	      (if (or (not (= (cadr (XtVaGetValues scr (list XmNhorizontalFontUnit 0))) 8))
		      (not (= (cadr (XtVaGetValues scr (list XmNverticalFontUnit 0))) 8)))
		  (snd-display ";XmSetFontUnit: ~A" (XtVaGetValues scr (list XmNhorizontalFontUnit 0 XmNverticalFontUnit 0))))
	      (let ((vals (XtVaGetValues scr 
					  (list XmNbitmapConversionModel 0 XmNdarkThreshold 0 XmNfont 0 XmNunpostBehavior 0))))
		(if (not (= (list-ref vals 1) XmMATCH_DEPTH)) (snd-display ";XmNbitmapConversionModel: ~A" (list-ref vals 1)))
		(if (not (= (list-ref vals 3) 0)) (snd-display ";XmNdarkThreshold: ~A" (list-ref vals 3)))
		(if (not (XFontStruct? (list-ref vals 5))) (snd-display ";XmNfont: ~A" (list-ref vals 5)))
		(if (not (= (list-ref vals 7) XmUNPOST_AND_REPLAY)) (snd-display ";XmNunpostBehavior: ~A" (list-ref vals 7)))
		(XSetScreenSaver dpy -1 5 DefaultBlanking DefaultExposures)
		))
	    (let ((dpy (XtDisplay (cadr (main-widgets)))))
	      (let* ((dp (XmGetXmDisplay dpy))
		     (vals (XtVaGetValues dp
					   (list XmNdragInitiatorProtocolStyle 0 XmNenableThinThickness 0))))
		(if (not (XmIsDisplay dp)) (snd-display ";XmIsDisplay: ~A" dp))
		(if (not (= (list-ref vals 1) XmDRAG_PREFER_RECEIVER)) (snd-display ";XmNdragInitiatorProtocolStyle: ~A" (list-ref vals 1)))
		(if (not (list-ref vals 3)) (snd-display ";XmNenableThinThickness?"))
		(XtAddCallback dp XmNdragStartCallback (lambda (w c i) #f)))
	      
	      (if (not (string=? (XmCvtXmStringToCT (XmStringCreateLocalized "hiho")) "hiho"))
		  (snd-display ";XmCvtXmStringToCT: ~A" (XmCvtXmStringToCT (XmStringCreateLocalized "hiho"))))
	      (let ((val (XmConvertStringToUnits (XDefaultScreenOfDisplay dpy) "3.14 in" XmHORIZONTAL XmINCHES)))
		(if (not (= val 3)) (snd-display ";XmConvertStringToUnits in->in ~A" val)))
	      (let ((val (XmConvertStringToUnits (XDefaultScreenOfDisplay dpy) "3.14 in" XmHORIZONTAL XmPOINTS)))
		(if (not (= val 225)) (snd-display ";XmConvertStringToUnits in->pts ~A" val)))
	      (let ((val (XmConvertStringToUnits (XDefaultScreenOfDisplay dpy) "3.14 in" XmHORIZONTAL XmCENTIMETERS)))
		(if (not (= val 7)) (snd-display ";XmConvertStringToUnits in->cm ~A" val)))
	      (let ((val (XmConvertUnits (cadr (main-widgets)) XmHORIZONTAL XmCENTIMETERS 7 XmMILLIMETERS)))
		(if (not (= val 70)) (snd-display ";XmConvertUnits cm->mm ~A" val)))
	      (let ((val (XmConvertUnits (cadr (main-widgets)) XmHORIZONTAL XmCENTIMETERS 7 XmPIXELS)))
		(if (not (= val 278)) (snd-display ";XmConvertUnits cm->pix ~A" val)))
	      (XmVaCreateSimpleRadioBox (caddr (main-widgets)) "hiho" 0 (lambda (w c i) #f) '())
	      (XmVaCreateSimpleCheckBox (caddr (main-widgets)) "hiho" (lambda (w c i) #f) '())
	      (XmVaCreateSimplePulldownMenu (caddr (main-widgets)) "hiho" 0 (lambda (w c i) #f) '())
	      (XmVaCreateSimplePopupMenu (caddr (main-widgets)) "hiho" (lambda (w c i) #f) '())
	      (XmVaCreateSimpleMenuBar (caddr (main-widgets)) "hiho" '())
	      (XmVaCreateSimpleOptionMenu (caddr (main-widgets)) "hiho" 
					   (XmStringCreateLocalized "away") 
					   (XKeycodeToKeysym dpy (list 'KeyCode XK_b) 0)
					   0  (lambda (w c i) #f) '())
	      
	      (if (not (XmIsMotifWMRunning (cadr (main-widgets)))) (snd-display ";XmIsMotifWMRunning?"))
	      (install-searcher (lambda (file) (= (mus-sound-srate file) 44100)))
	      (zync)
	      (make-hidden-controls-dialog)
	      (make-pixmap (cadr (main-widgets)) arrow-strs)
	      (display-scanned-synthesis)
	      (add-mark-pane)
	      (let ((ind (open-sound "oboe.snd")))
		(make-channel-drop-site ind 0)
		(let ((drop-site (find-child (XtParent (XtParent (list-ref (channel-widgets ind 0) 7))) "drop here")))
		  (if drop-site
		      (begin
			(XtVaGetValues drop-site (list XmNdropRectangles 0))
			(let ((val (XmDropSiteRetrieve drop-site (list XmNnumImportTargets 0))))
			  (if (not (= (cadr val) 1)) (snd-display ";XmDropSiteRetrieve num: ~A" val)))
			(XmDropSiteRetrieve drop-site (list XmNimportTargets 0))
			(if (not (XmDropSiteRegistered drop-site))
			    (snd-display ";XmDropSiteRegistered?"))
			(XmDropSiteUnregister drop-site))
		      (snd-display ";no drop site?"))))

	      (add-mark 123)
	      (add-selection-popup)
	      (let ((container
		     (make-sound-box "sounds"
				     (list-ref (main-widgets) 3)
				     (lambda (file) 
				       (mix file))
				     (lambda (file chn)
				       (define (without-directories filename)
					 (call-with-current-continuation
					  (lambda (return)
					    (do ((i (- (string-length filename) 1) (1- i)))
						((= 0 i) filename)
					      (if (char=? (string-ref filename i) #\/)
						  (return (substring filename (+ i 1))))))))
				       (format #f "~~/peaks/~A-peaks-~D" 
					       (without-directories (mus-expand-filename file)) 
					       chn))
				     (list "oboe.snd" "pistol.snd" "cardinal.snd" "storm.snd")
				     '())))
		(XmContainerRelayout container)
		(let ((vals (XtVaGetValues container 
			      (list XmNlargeCellHeight 0 XmNcollapsedStatePixmap 0 XmNdetailOrder 0 XmNdetailTabList 0
				    XmNselectedObjects 0 XmNconvertCallback 0 XmNdestinationCallback 0 XmNselectionCallback 0))))
		  (if (not (= (list-ref vals 1) 0)) (snd-display ";XmNlargeCellHeight: ~A" (list-ref vals 1)))
		  (if (not (Pixmap? (list-ref vals 3))) (snd-display ";XmNcollapsedStatePixmap: ~A" (list-ref vals 3)))
		  (let ((children '()))
		    (for-each-child container
				    (lambda (w)
				      (if (XmIsIconGadget w)
					  (set! children (cons w children)))))
		    (XmContainerReorder container children (length children)))
		  (let ((func (lambda (w) 0)))
		    (XtSetValues container (list XmNinsertPosition func))
		    (let ((func1 (cadr (XtGetValues container (list XmNinsertPosition 0)))))
		      (if (not (equal? func func1)) (snd-display ";XmNinsertPosition: ~A ~A" func func1))))))
	      
	      (show-smpte-label)
	      (with-level-meters 4)
	      (play)
	      (close-sound))

;;; qualify proc is causing a segfault somehow
;	    (let ((box (XmCreateFileSelectionBox (cadr (main-widgets)) "box" 
;						 (list XmNfileSearchProc (lambda (w c) #f)
;						       XmNqualifySearchDataProc (lambda (w c i)
;										  (display "qualifier was called!")
;										  )))))
;	      (XtUnmanageChild box))
	    (let ((hi (XtCreateManagedWidget "hi" xmTextWidgetClass (cadr (main-widgets)) 
					     (list XmNqualifySearchDataProc (lambda (w c i) "hi")
						   XmNtransferProc (lambda (a b c d e f g) "ho")
						   XmNcolorAllocationProc (lambda (a b c) #f)
						   XmNcolorCalculationProc (lambda (a b) #f)
						   XmNcreatePopupChildProc (lambda (a) #f)
						   XmNlargeIconX 0.5
						   ))))
	      (XtUnmanageChild hi))

	    (let* ((shell (cadr (main-widgets)))
		   (dpy (XtDisplay shell))
		   (prop (XmInternAtom dpy "TESTING" #f))
		   (proto1 (XmInternAtom dpy "TEST1" #f))
		   (proto2 (XmInternAtom dpy "TEST2" #f))
		   (val 0))
	      (if (not (Atom? prop)) (snd-display ";XmInternAtom: ~A" prop))
	      (if (not (string=? (XmGetAtomName dpy prop) "TESTING")) (snd-display ";XmGetAtomName: ~A" (XmGetAtomName dpy prop)))
	      (XmAddProtocols shell prop (list proto1 proto2))
	      (XmSetProtocolHooks shell
				  (XmInternAtom dpy "WM_PROTOCOLS" #f)
				  prop
				  (lambda (w c i)
				    (snd-display ";prehook: ~A ~A ~A" w c i))
				  12345
				  (lambda (w c i)
				    (snd-display ";posthook: ~A ~A ~A" w c i))
				  54321)
	      (XmDeactivateProtocol shell prop proto2)
	      (XmRemoveProtocols shell prop (list proto2))
	      (XmAddProtocolCallback shell prop proto1 (lambda (w c i) (set! val c)) 123)
	      (XmActivateProtocol shell prop proto1)
	      (let ((e (XEvent ClientMessage))
		    (window (XtWindow shell)))
		(set! (.window e) window)
		(set! (.display e) dpy)
		(set! (.format e) 8)
		(set! (.message_type e) XA_STRING)
		(set! (.data e) "hiho")
		(XSendEvent dpy window #f 0 e))
	      (XmRemoveProtocols shell prop (list proto1)))
	    (XmCascadeButtonHighlight (XmCreateCascadeButton (cadr (main-widgets)) "cascade" '()) #f)
	    ;(XmCascadeButtonGadgetHighlight (XmCreateCascadeButtonGadget (cadr (main-widgets)) "gadget" '()) #f)

	    (let ((callbacks
		   (list
		    (list XmAnyCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event))
		    (list XmArrowButtonCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) (list .click_count 'int '.click_count))
		    (list XmCommandCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) 
			  (list .value 'XmString '.value) (list .length 'int '.length #f))
		    (list XmDragDropFinishCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) 
			  (list .timeStamp 'Time '.timeStamp))
		    (list XmDragMotionCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) 
			  (list .timeStamp 'Time '.timeStamp) (list .operation 'uchar '.operation) 
			  (list .operations 'uchar '.operations #f) (list .dropSiteStatus 'uchar '.dropSiteStatus) 
			  (list .x 'Position '.x #f) (list .y 'Position '.y #f))
		    (list XmDragProcCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) 
			  (list .timeStamp 'Time '.timeStamp) (list .dragContext 'Widget '.dragContext #f) 
			  (list .x 'Position '.x #f) (list .y 'Position '.y #f) (list .dropSiteStatus 'uchar '.dropSiteStatus) 
			  (list .operation 'uchar '.operation) (list .operations 'uchar '.operations #f) (list .animate 'Boolean '.animate #f))
		    (list XmDrawingAreaCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) (list .window 'Window '.window))
		    (list XmDrawnButtonCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) 
			  (list .window 'Window '.window) (list .click_count 'int '.click_count))
		    (list XmDropFinishCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) 
			  (list .timeStamp 'Time '.timeStamp) (list .operation 'uchar '.operation) 
			  (list .operations 'uchar '.operations #f) (list .dropSiteStatus 'uchar '.dropSiteStatus) 
			  (list .dropAction 'uchar '.dropAction #f) (list .completionStatus 'uchar '.completionStatus #f))
		    (list XmDropProcCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) 
			  (list .timeStamp 'Time '.timeStamp) (list .dragContext 'Widget '.dragContext #f) 
			  (list .x 'Position '.x #f) (list .y 'Position '.y #f) (list .dropSiteStatus 'uchar '.dropSiteStatus)
			  (list .operation 'uchar '.operation) (list .operations 'uchar '.operations #f) (list .dropAction 'uchar '.dropAction #f))
		    (list XmDropSiteEnterCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) 
			  (list .timeStamp 'Time '.timeStamp) (list .operation 'uchar '.operation) 
			  (list .operations 'uchar '.operations #f) (list .dropSiteStatus 'uchar '.dropSiteStatus) 
			  (list .x 'Position '.x #f) (list .y 'Position '.y #f))
		    (list XmDropSiteLeaveCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) 
			  (list .timeStamp 'Time '.timeStamp))
		    (list XmDropStartCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) 
			  (list .timeStamp 'Time '.timeStamp) (list .operation 'uchar '.operation) 
			  (list .operations 'uchar '.operations #f) (list .dropSiteStatus 'uchar '.dropSiteStatus) 
			  (list .dropAction 'uchar '.dropAction #f))
		    (list XmFileSelectionBoxCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) 
			  (list .value 'XmString '.value) (list .length 'int '.length #f) (list .mask 'XmString '.mask #f) 
			  (list .mask_length 'int '.mask_length #f) (list .dir 'XmString '.dir #f) (list .dir_length 'int '.dir_length #f) 
			  (list .pattern 'XmString '.pattern #f) (list .pattern_length 'int '.pattern_length #f))
		    (list XmListCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) 
			  (list .item 'XmString '.item #f) (list .item_length 'int '.item_length #f) (list .item_position 'int '.item_position #f) 
			  (list .selected_items 'XmString* '.selected_items) (list .selected_item_count 'int '.selected_item_count #f) 
			  (list .selected_item_positions 'int* '.selected_item_positions) (list .selection_type 'char '.selection_type #f) 
			  (list .auto_selection_type 'char '.auto_selection_type #f))
		    (list XmOperationChangedCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) 
			  (list .timeStamp 'Time '.timeStamp) (list .operation 'uchar '.operation) (list .operations 'uchar '.operations #f) 
			  (list .dropSiteStatus 'uchar '.dropSiteStatus))
		    (list XmPushButtonCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) (list .click_count 'int '.click_count))
		    (list XmRowColumnCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event)
			  (list .widget 'Widget '.widget #f) (list .data 'char* '.data #f) (list .callbackstruct 'char* '.callbackstruct #f))
		    (list XmScaleCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) (list .value 'int '.value))
		    (list XmScrollBarCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) 
			  (list .value 'int '.value) (list .pixel 'int '.pixel #f))
		    (list XmSelectionBoxCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) 
			  (list .value 'XmString '.value) (list .length 'int '.length #f))
		    (list XmTextVerifyCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) 
			  (list .doit 'Boolean '.doit) (list .currInsert 'int '.currInsert #f) (list .newInsert 'int '.newInsert #f) 
			  (list .startPos 'int '.startPos #f) (list .endPos 'int '.endPos #f))
		    (list XmToggleButtonCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) (list .set 'int '.set))
		    (list XmDestinationCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) 
			  (list .selection 'Atom '.selection #f) (list .operation 'uchar '.operation) (list .flags 'int '.flags #f) 
			  (list .transfer_id 'XtPointer '.transfer_id #f) (list .destination_data 'XtPointer '.destination_data #f) 
			  (list .location_data 'XtPointer '.location_data #f) (list .time 'Time '.time))
		    (list XmConvertCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) (list .selection 'Atom '.selection #f) 
			  (list .target 'Atom '.target #f) (list .source_data 'XtPointer '.source_data #f)
			  (list .location_data 'XtPointer '.location_data #f) (list .flags 'int '.flags #f) (list .parm 'XtPointer '.parm #f) 
			  (list .parm_format 'int '.parm_format #f) (list .parm_length 'int '.parm_length #f) 
			  (list .parm_type 'Atom '.parm_type #f) (list .status 'int '.status #f) (list .value 'XtPointer '.value #f)
			  (list .type 'Atom '.type #f) (list .format 'int '.format #f) (list .length 'int '.length #f))
		    (list XmComboBoxCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) 
			  (list .item_or_text 'XmString '.item_or_text #f) (list .item_position 'int '.item_position #f))
		    (list XmContainerOutlineCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) 
			  (list .item 'Widget '.item #f) (list .new_outline_state 'uchar '.new_outline_state #f))
		    (list XmContainerSelectCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) 
			  (list .selected_items 'Widget* '.selected_items) (list .selected_item_count 'int '.selected_item_count #f) 
			  (list .auto_selection_type 'uchar '.auto_selection_type #f))
		    (list XmNotebookCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) 
			  (list .page_number 'int '.page_number #f) (list .page_widget 'Widget '.page_widget #f) 
			  (list .prev_page_number 'int '.prev_page_number #f) (list .prev_page_widget 'Widget '.prev_page_widget #f))
		    (list XmSpinBoxCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) 
			  (list .widget 'Widget '.widget #f) (list .doit 'Boolean '.doit) (list .position 'int '.position #f)
			  (list .value 'XmString '.value #f) (list .crossed_boundary 'Boolean '.crossed-boundary #f))
		    (list XmTraverseObscuredCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) 
			  (list .traversal_destination 'Widget '.traversal_destination #f))
		    (list XmTopLevelLeaveCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) 
			  (list .timeStamp 'Time '.timeStamp) (list .screen 'Screen '.screen) (list .window 'Window '.window))
		    (list XmTopLevelEnterCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) 
			  (list .timeStamp 'Time '.timeStamp) (list .screen 'Screen '.screen) (list .window 'Window '.window) 
			  (list .x 'Position '.x #f) (list .y 'Position '.y #f) (list .dragProtocolStyle 'uchar '.dragProtocolStyle #f))
		    (list XmPopupHandlerCallbackStruct (list .reason 'int '.reason)
			  (list .event 'XEvent '.event) (list .menuToPost 'Widget '.menuToPost) (list .postIt 'Boolean '.postIt)
			  (list .target 'Widget '.target #f))
		    (list XmSelectionCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event) 
			  (list .selection 'Atom '.selection #f) (list .target 'Atom '.target #f) (list .type 'Atom '.type #f)
			  (list .transfer_id 'XtPointer '.transfer_id #f) (list .flags 'int '.flags #f) (list .remaining 'int '.remaining #f) 
			  (list .value 'XtPointer '.value #f) (list .length 'int '.length #f) (list .format 'int '.format #f))
		    (list XmTransferDoneCallbackStruct (list .reason 'int '.reason) (list .event 'XEvent '.event)  
			  (list .selection 'Atom '.selection #f) (list .transfer_id 'XtPointer '.transfer_id #f) (list .status 'int '.status #f) 
			  (list .client_data 'XtPointer '.client_data #f))
		    )))
		  
	      (for-each
	       (lambda (call)
		 (let ((struct ((car call)))
		       (val #f))
		   (set! (.event struct) (XEvent))
		   (for-each
		    (lambda (field)
		      (if (not (list-p field)) (snd-display (format #f "~A: ~A" struct field)))
		      (set! val ((car field) struct))
		      (if (< (length field) 4)
			  (case (cadr field)
			    ((int) (set! ((car field) struct) 0))
			    ((Atom) (set! ((car field) struct) XA_STRING))
			    ((uchar) (set! ((car field) struct) 0))
			    ((Position) (set! ((car field) struct) 0))
			    ((Widget) (set! ((car field) struct) (list 'Widget 0)))
			    ((XmString) (set! ((car field) struct) (list 'XmString 0)))
			    ((XtPointer) (set! ((car field) struct) 0))
			    ((char*) (set! ((car field) struct) "hi"))
			    ((Boolean) (set! ((car field) struct) #f))
			    ((XEvent) #f) ; already being set
			    ((XmString* int* Time Window Widget* Screen) #f) 
			    ((char) (set! ((car field) struct) 0))
			    )))
		    (cdr call))))
	       callbacks))

	    (let ((shell (cadr (main-widgets)))
		  (resource-list
	       (list XmNaccelerator XmNacceleratorText XmNaccelerators XmNactivateCallback XmNadjustLast XmNadjustMargin XmNalignment 
		     XmNallowOverlap XmNallowResize XmNallowShellResize XmNancestorSensitive XmNanimationMask XmNanimationPixmap 
		     XmNanimationPixmapDepth XmNanimationStyle XmNapplyCallback XmNapplyLabelString XmNargc XmNargv XmNarmCallback 
		     XmNarmColor XmNarmPixmap XmNarrowDirection XmNattachment XmNaudibleWarning XmNautoShowCursorPosition XmNautoUnmanage 
		     XmNautomaticSelection XmNbackground XmNbackgroundPixmap XmNbaseHeight XmNbaseWidth XmNbitmap XmNblendModel XmNblinkRate 
		     XmNborderColor XmNborderColor XmNborderPixmap XmNborderWidth XmNbottomAttachment XmNbottomOffset XmNbottomPosition 
		     XmNbottomShadowColor XmNbottomShadowPixmap XmNbottomWidget XmNbrowseSelectionCallback XmNbuttonAcceleratorText 
		     XmNbuttonAccelerators XmNbuttonCount XmNbuttonMnemonicCharSets XmNbuttonMnemonics XmNbuttonSet XmNbuttonType 
		     XmNbuttons XmNcancelButton XmNcancelCallback XmNcancelLabelString XmNcascadePixmap XmNcascadingCallback 
		     XmNchildHorizontalAlignment XmNchildHorizontalSpacing XmNchildPlacement XmNchildVerticalAlignment XmNchildren 
		     XmNclientData XmNclipWindow XmNcolormap XmNcolumns XmNcommand XmNcommandChangedCallback XmNcommandEnteredCallback 
		     XmNcommandWindow XmNcommandWindowLocation XmNconvertProc XmNcreatePopupChildProc XmNcursorBackground 
		     XmNcursorForeground XmNcursorPosition XmNcursorPositionVisible XmNdarkThreshold XmNdecimalPoints 
		     XmNdecrementCallback XmNdefaultActionCallback XmNdefaultButton XmNdefaultButtonShadowThickness 
		     XmNdefaultButtonType XmNdefaultCopyCursorIcon XmNdefaultInvalidCursorIcon XmNdefaultLinkCursorIcon 
		     XmNdefaultMoveCursorIcon XmNdefaultNoneCursorIcon XmNdefaultPosition XmNdefaultSourceCursorIcon 
		     XmNdefaultValidCursorIcon XmNdeleteResponse XmNdepth XmNdestroyCallback XmNdialogStyle XmNdialogTitle 
		     XmNdialogType XmNdirListItemCount XmNdirListItems XmNdirListLabelString XmNdirMask XmNdirSearchProc 
		     XmNdirSpec XmNdirectory XmNdirectoryValid XmNdisarmCallback XmNdoubleClickInterval XmNdragCallback 
		     XmNdragDropFinishCallback XmNdragInitiatorProtocolStyle XmNdragMotionCallback XmNdragOperations XmNdragProc 
		     XmNdragReceiverProtocolStyle XmNdropFinishCallback XmNdropProc XmNdropRectangles XmNdropSiteActivity 
		     XmNdropSiteEnterCallback XmNdropSiteLeaveCallback XmNdropSiteOperations XmNdropSiteType XmNdropStartCallback 
		     XmNdropTransfers XmNeditMode XmNeditable XmNentryAlignment XmNentryBorder XmNentryCallback XmNentryClass 
		     XmNentryVerticalAlignment XmNexportTargets XmNexposeCallback XmNextendedSelectionCallback XmNfile 
		     XmNfileListItemCount XmNfileListItems XmNfileListLabelString XmNfileSearchProc XmNfileTypeMask XmNfillOnArm 
		     XmNfillOnSelect XmNfilterLabelString XmNfocusCallback XmNfont XmNforeground XmNforegroundThreshold 
		     XmNfractionBase XmNgainPrimaryCallback XmNgeometry XmNheight XmNheightInc XmNhelpCallback XmNhelpLabelString 
		     XmNhighlight XmNhighlightColor XmNhighlightOnEnter XmNhighlightPixmap XmNhighlightThickness XmNhistoryItemCount 
		     XmNhistoryItems XmNhistoryMaxItems XmNhistoryVisibleItemCount XmNhorizontalFontUnit XmNhorizontalScrollBar 
		     XmNhorizontalSpacing XmNhotX XmNhotY XmNiconMask XmNiconName XmNiconNameEncoding XmNiconPixmap XmNiconWindow 
		     XmNiconX XmNiconY XmNiconic XmNimportTargets XmNincrement XmNincrementCallback XmNincremental XmNindicatorOn 
		     XmNindicatorSize XmNindicatorType XmNinitialDelay XmNinitialFocus XmNinitialResourcesPersistent XmNinitialState 
		     XmNinput XmNinputCallback XmNinputMethod XmNinsertPosition XmNinvalidCursorForeground XmNisAligned 
		     XmNisHomogeneous XmNitemCount XmNitems XmNkeyboardFocusPolicy XmNlabelInsensitivePixmap XmNlabelPixmap 
		     XmNlabelString XmNlabelType XmNleftAttachment XmNleftOffset XmNleftPosition XmNleftWidget 
		     XmNlightThreshold XmNlineSpace XmNlistItemCount XmNlistItems XmNlistLabelString XmNlistMarginHeight 
		     XmNlistMarginWidth XmNlistSizePolicy XmNlistSpacing XmNlistUpdated XmNlistVisibleItemCount XmNlosePrimaryCallback
		     XmNlosingFocusCallback XmNmainWindowMarginHeight XmNmainWindowMarginWidth XmNmapCallback XmNmappedWhenManaged 
		     XmNmappingDelay XmNmargin XmNmarginBottom XmNmarginHeight XmNmarginLeft XmNmarginRight XmNmarginTop 
		     XmNmarginWidth XmNmask XmNmaxAspectX XmNmaxAspectY XmNmaxHeight XmNmaxLength XmNmaxWidth XmNmaximum 
		     XmNmenuAccelerator XmNmenuBar XmNmenuCursor XmNmenuHelpWidget XmNmenuHistory XmNmenuPost XmNmessageAlignment 
		     XmNmessageString XmNmessageWindow XmNminAspectX XmNminAspectY XmNminHeight XmNminWidth XmNminimizeButtons 
		     XmNminimum XmNmnemonic XmNmnemonicCharSet XmNmodifyVerifyCallback XmNmotionVerifyCallback XmNmoveOpaque 
		     XmNmultiClick XmNmultipleSelectionCallback XmNmustMatch XmNmwmDecorations XmNmwmFunctions XmNmwmInputMode 
		     XmNmwmMenu XmNnavigationType XmNnoMatchCallback XmNnoMatchString XmNnoResize XmNnoneCursorForeground 
		     XmNnumChildren XmNnumColumns XmNnumDropRectangles XmNnumDropTransfers XmNnumExportTargets XmNnumImportTargets 
		     XmNoffsetX XmNoffsetY XmNokCallback XmNokLabelString XmNoperationChangedCallback XmNoperationCursorIcon 
		     XmNoptionLabel XmNoptionMnemonic XmNorientation XmNoverrideRedirect XmNpacking XmNpageDecrementCallback 
		     XmNpageIncrement XmNpageIncrementCallback XmNpaneMaximum XmNpaneMinimum XmNpattern XmNpendingDelete 
		     XmNpixmap XmNpopdownCallback XmNpopupCallback XmNpopupEnabled XmNpositionIndex XmNpostFromButton 
		     XmNpreeditType XmNprocessingDirection XmNpromptString XmNpushButtonEnabled XmNqualifySearchDataProc 
		     XmNradioAlwaysOne XmNradioBehavior XmNrecomputeSize XmNrefigureMode XmNrepeatDelay XmNresizable XmNresize 
		     XmNresizeCallback XmNresizeHeight XmNresizePolicy XmNresizeWidth XmNrightAttachment XmNrightOffset 
		     XmNrightPosition XmNrightWidget XmNrowColumnType XmNrows XmNrubberPositioning XmNsashHeight XmNsashIndent 
		     XmNsashShadowThickness XmNsashWidth XmNsaveUnder XmNscaleHeight XmNscaleMultiple XmNscaleWidth XmNscreen 
		     XmNscrollBarDisplayPolicy XmNscrollBarPlacement XmNscrollHorizontal XmNscrollLeftSide XmNscrollTopSide 
		     XmNscrollVertical XmNscrolledWindowMarginHeight XmNscrolledWindowMarginWidth XmNscrollingPolicy 
		     XmNselectColor XmNselectInsensitivePixmap XmNselectPixmap XmNselectThreshold XmNselectedItemCount 
		     XmNselectedItems XmNselection XmNselectionArray XmNselectionArrayCount XmNselectionLabelString XmNselectionPolicy 
		     XmNsensitive XmNseparatorOn XmNseparatorType XmNset XmNshadow XmNshadowThickness XmNshadowType XmNshowArrows 
		     XmNshowAsDefault XmNshowSeparator XmNshowValue XmNsimpleCallback XmNsingleSelectionCallback XmNskipAdjust 
		     XmNsliderSize XmNsliderVisual XmNslidingMode XmNsource XmNsourceCursorIcon XmNsourcePixmapIcon XmNspacing 
		     XmNspotLocation XmNstateCursorIcon XmNstring XmNsubMenuId XmNsymbolPixmap XmNtearOffMenuActivateCallback
		     XmNtearOffMenuDeactivateCallback XmNtearOffModel XmNtextAccelerators XmNtextColumns XmNtextString
		     XmNtextTranslations XmNtitle XmNtitleEncoding XmNtitleString XmNtoBottomCallback XmNtoTopCallback 
		     XmNtop XmNtopAttachment XmNtopCharacter XmNtopItemPosition XmNtopLevelEnterCallback XmNtopLevelLeaveCallback 
		     XmNtopOffset XmNtopPosition XmNtopShadowColor XmNtopShadowPixmap XmNtopWidget XmNtransferProc XmNtransferStatus 
		     XmNtransient XmNtransientFor XmNtranslations XmNtraversalOn XmNtraverseObscuredCallback XmNtroughColor 
		     XmNunitType XmNunmapCallback XmNunpostBehavior XmNuseAsyncGeometry XmNuserData XmNvalidCursorForeground 
		     XmNvalue XmNvalueChangedCallback XmNverifyBell XmNverticalFontUnit XmNverticalScrollBar XmNverticalSpacing 
		     XmNvisibleItemCount XmNvisibleWhenOff XmNvisual XmNvisualPolicy XmNwidth XmNwidthInc XmNwinGravity 
		     XmNwindow XmNwindowGroup XmNwmTimeout XmNwordWrap XmNworkWindow XmNx XmNy XmNarrowLayout XmNarrowOrientation 
		     XmNarrowSensitivity XmNarrowSize XmNarrowSpacing XmNautoDragModel XmNbackPageBackground XmNbackPageForeground 
		     XmNbackPageNumber XmNbackPagePlacement XmNbackPageSize XmNbindingPixmap XmNbindingType XmNbindingWidth 
		     XmNbitmapConversionModel XmNbuttonRenderTable XmNcollapsedStatePixmap XmNcolorAllocationProc 
		     XmNcolorCalculationProc XmNcomboBoxType XmNconvertCallback XmNdecimal XmNdefaultArrowSensitivity 
		     XmNdefaultButtonEmphasis XmNdefaultVirtualBindings XmNdestinationCallback XmNdetail XmNdetailColumnHeading 
		     XmNdetailColumnHeadingCount XmNdetailCount XmNdetailOrder XmNdetailOrderCount XmNdetailShadowThickness 
		     XmNdetailTabList XmNdirTextLabelString XmNdragStartCallback XmNenableBtn1Transfer XmNenableButtonTab 
		     XmNenableDragIcon XmNenableEtchedInMenu XmNenableMultiKeyBindings XmNenableThinThickness XmNenableToggleColor 
		     XmNenableToggleVisual XmNenableUnselectableDrag XmNenableWarp XmNendJobCallback XmNentryParent 
		     XmNentryViewType XmNexpandedStatePixmap XmNfileFilterStyle XmNfirstPageNumber XmNfontName XmNfontType 
		     XmNframeChildType XmNframeShadowThickness XmNgrabStyle XmNincludeStatus XmNincrementValue 
		     XmNindeterminateInsensitivePixmap XmNindeterminatePixmap XmNinnerMarginHeight XmNinnerMarginWidth 
		     XmNinputPolicy XmNinsensitiveStippleBitmap XmNinvokeParseProc XmNlabelRenderTable XmNlargeCellHeight 
		     XmNlargeCellWidth XmNlargeIcon XmNlargeIconMask XmNlargeIconPixmap XmNlastPageNumber XmNlayoutDirection 
		     XmNlayoutType XmNlist XmNloadModel XmNmajorTabSpacing XmNmatchBehavior XmNmaxX XmNmaxY XmNmaximumValue 
		     XmNminX XmNminY XmNminimumValue XmNminorTabSpacing XmNmotifVersion XmNnoFontCallback XmNnoRenditionCallback 
		     XmNnotebookChildType XmNnumValues XmNoutlineButtonPolicy XmNoutlineChangedCallback XmNoutlineColumnWidth 
		     XmNoutlineIndentation XmNoutlineLineStyle XmNoutlineState XmNpageChangedCallback XmNpageNumber 
		     XmNpageSetupCallback XmNpathMode XmNpatternType XmNpdmNotificationCallback XmNpopupHandlerCallback 
		     XmNposition XmNpositionMode XmNpositionType XmNpreeditCaretCallback XmNpreeditDoneCallback 
		     XmNpreeditDrawCallback XmNpreeditStartCallback XmNprimaryOwnership XmNrenderTable XmNrenditionBackground 
		     XmNrenditionForeground XmNscrolledWindowChildType XmNselectedItem XmNselectedObjectCount XmNselectedObjects 
		     XmNselectedPosition XmNselectedPositionCount XmNselectedPositions XmNselectionCallback XmNselectionMode 
		     XmNselectionTechnique XmNsliderMark XmNsmallCellHeight XmNsmallCellWidth XmNsmallIcon XmNsmallIconMask 
		     XmNsmallIconPixmap XmNsnapBackMultiple XmNspatialIncludeModel XmNspatialResizeModel XmNspatialSnapModel 
		     XmNspatialStyle XmNspinBoxChildType XmNstartJobCallback XmNstrikethruType XmNsubstitute XmNtabList 
		     XmNtag XmNtearOffTitle XmNtextField XmNtextRenderTable XmNtoggleMode XmNtotalLines XmNunderlineType 
		     XmNunselectColor XmNuseColorObj XmNvalues XmNverifyPreedit XmNviewType XmNvisualEmphasis XmNwrap 
		     XmNlabelFontList XmNbuttonFontList XmNtextFontList XmNwhichButton XmNchildType XmNstringDirection 
		     XmNfontList XmNdefaultFontList XmNshellUnitType)))

	      (for-each
	       (lambda (n)
		 (if (not (string? n)) (snd-display ";resource ~A is not a string?" n))
		 (XtVaGetValues shell (list n 0)))
	       resource-list)

	      (let* ((create-procs (list
			            XmCreateMenuShell XmCreateSimpleCheckBox XmCreateSimpleRadioBox
			            XmCreateSimpleOptionMenu XmCreateSimplePulldownMenu XmCreateSimplePopupMenu
			            XmCreateSimpleMenuBar XmCreateMainWindow XmCreateScrolledList XmCreateList
			            XmCreateLabel XmCreateLabelGadget XmCreateToggleButton XmCreateToggleButtonGadget
			            XmCreateGrabShell XmCreateFrame XmCreateFormDialog XmCreateForm XmCreateText
			            XmCreateScrolledText XmCreateFileSelectionDialog XmCreateFileSelectionBox
			            XmCreateTextField XmCreateSimpleSpinBox XmCreateDrawnButton XmCreateSpinBox
			            XmCreateDrawingArea XmCreateSeparator XmCreateDragIcon XmCreateSeparatorGadget
			            XmCreatePromptDialog XmCreateSelectionDialog XmCreateSelectionBox
			            XmCreateScrolledWindow XmCreateDialogShell XmCreateScrollBar XmCreateScale
			            XmCreateContainer XmCreatePulldownMenu XmCreatePopupMenu XmCreateMenuBar
			            XmCreateOptionMenu XmCreateRadioBox XmCreateWorkArea XmCreateRowColumn
			            XmCreateCommandDialog XmCreateCommand XmCreateDropDownList XmCreateDropDownComboBox
			            XmCreateComboBox XmCreatePushButton XmCreatePushButtonGadget XmCreateCascadeButton
			            XmCreateCascadeButtonGadget XmCreateBulletinBoardDialog XmCreateBulletinBoard
			            XmCreatePanedWindow XmCreateNotebook XmCreateArrowButton XmCreateArrowButtonGadget
			            XmCreateTemplateDialog XmCreateWorkingDialog XmCreateWarningDialog
			            XmCreateQuestionDialog XmCreateInformationDialog XmCreateErrorDialog
			            XmCreateMessageDialog XmCreateMessageBox XmCreateIconGadget))
		     (parent (list-ref (main-widgets) 3))
		     (str (XmStringCreateLocalized "yow"))
		     (args (list XmNheight 100 XmNwidth 100 XmNlabelString str))
		     (ques (list
			         XmMenuShell? #f #f #f #f
			         #f #f XmMainWindow? #f XmList?
			         XmLabel? XmLabelGadget? XmToggleButton?
			         XmToggleButtonGadget? XmGrabShell? XmFrame? #f XmForm?
			         XmText? #f #f XmFileSelectionBox?
			         XmTextField? #f XmDrawnButton? #f XmDrawingArea?
			         XmSeparator? #f XmSeparatorGadget? #f #f
			         XmSelectionBox? XmScrolledWindow? XmDialogShell? XmScrollBar?
			         XmScale? XmContainer? #f #f #f
			         #f #f #f XmRowColumn? #f
			         XmCommand? #f #f XmComboBox? XmPushButton?
			         XmPushButtonGadget? XmCascadeButton? XmCascadeButtonGadget? #f
			         XmBulletinBoard? XmPanedWindow? XmNotebook? XmArrowButton? XmArrowButtonGadget?
			         #f #f #f #f #f #f #f #f XmIconGadget?))
		     (is (list   
                               XmIsMenuShell #f #f #f #f
		               #f #f XmIsMainWindow #f XmIsList
		               XmIsLabel XmIsLabelGadget XmIsToggleButton
		               XmIsToggleButtonGadget XmIsGrabShell XmIsFrame #f XmIsForm
		               XmIsText #f #f XmIsFileSelectionBox
		               XmIsTextField #f XmIsDrawnButton #f XmIsDrawingArea
		               XmIsSeparator #f XmIsSeparatorGadget #f #f
		               XmIsSelectionBox XmIsScrolledWindow XmIsDialogShell XmIsScrollBar
		               XmIsScale XmIsContainer #f #f #f
		               #f #f #f XmIsRowColumn #f
		               XmIsCommand #f #f XmIsComboBox XmIsPushButton
		               XmIsPushButtonGadget XmIsCascadeButton XmIsCascadeButtonGadget #f
		               XmIsBulletinBoard XmIsPanedWindow XmIsNotebook XmIsArrowButton XmIsArrowButtonGadget
		               #f #f #f #f #f #f #f #f XmIsIconGadget)))

		(for-each 
		 (lambda (n q qq)
		   (let ((wid (n parent "hiho" args)))
		     (if (not (string=? (XtName wid) "hiho"))
			 (snd-display ";~A name: ~A" wid (XtName wid)))
		     (if (not (Widget? wid))
			 (snd-display ";~A not a widget?" wid))
		     (if (and q (not (q wid)))
			 (snd-display ";~A is not ~A?" wid q))
		     (if (and qq (not (qq wid)))
			 (snd-display ";~A is not ~A" wid qq))
		     (for-each
		      (lambda (n)
			(XtVaGetValues wid (list n 0)))
		      resource-list)
		     ))
		 create-procs ques is)))
      
	    (if (not (XEvent? (XEvent)))
		(snd-display ";xevent type trouble! ~A -> ~A" (XEvent) (XEvent? (XEvent))))
	    (if (not (XGCValues? (XGCValues)))
		(snd-display ";xgcvalues type trouble! ~A -> ~A" (XGCValues) (XGCValues? (XGCValues))))
	    (if (not (= (.direction (XmTraverseObscuredCallbackStruct)) 0))
		(snd-display ";.direction: ~A" (.direction (XmTraverseObscuredCallbackStruct))))
	    (if (.ptr (XmTextBlock))
		(snd-display ";.ptr block: ~A" (.ptr (XmTextBlock))))
	    (let ((hi (XmTextBlock)))
	      (set! (.ptr hi) "hi")
	      (if (not (string=? (.ptr hi) "hi"))
		  (snd-display ";.ptr set block: ~A" (.ptr hi)))
	      (if (not (= (.length hi) 0)) (snd-display ";.length block: ~A" (.length hi)))
	      (set! (.length hi) 3)
	      (if (not (= (.length hi) 3)) (snd-display ";set .length block: ~A" (.length hi))))
	    (if (not (= (.dashes (XGCValues)) 0)) (snd-display ";dashes: ~A" (.dashes (XGCValues))))
	    (set! (.dashes (XGCValues)) 1)
	    (set! (.clip_mask (XGCValues)) (list 'Pixmap 0))
	    (set! (.resourceid (XEvent -1)) 0)
	    (set! (.error_code (XEvent -1)) 0)
	    (set! (.request_code (XEvent -1)) 0)
	    (if (not (= (.resourceid (XEvent -1)) 0)) (snd-display ";error resourceid: ~A" (.resourceid (XEvent -1))))
	    (if (not (= (.request_code (XEvent -1)) 0)) (snd-display ";error request_code: ~A" (.request_code (XEvent -1))))
	    (set! (.pad (XColor)) 1)

	    (let ((val (XpQueryExtension (XtDisplay (cadr (main-widgets))))))
	      (if (car val) (snd-display ";got Xp?? ~A" val)))

	    (let* ((win (XtWindow (cadr (main-widgets))))
		   (xm-procs 
		    ;; these can't be called in this context:
		    ;;   XtProcessEvent XtMainLoop XtAddActions XtNextEvent XtPeekEvent XtMalloc XtCalloc XtRealloc XtFree XFree 
		    ;;   freeXPoints moveXPoints vector->XPoints XmParseMappingCreate XmParseMappingSetValues 
		    ;;   XReadBitmapFile XReadBitmapFileData XmTransferStartRequest XmTransferSendRequest XmTransferDone 
		    (list
		         XPutBackEvent XNextEvent
		         XtAppProcessEvent XtAppMainLoop XtAppAddActions XtAppNextEvent XtAppPeekEvent

		         XpStartPage XpEndPage XpCancelPage XpStartJob XpEndJob XpCancelJob XpStartDoc XpEndDoc
		         XpCancelDoc XpRehashPrinterList XpCreateContext XpSetContext XpGetContext XpDestroyContext
		         XpGetLocaleNetString XpNotifyPdm XpSendAuth XpGetImageResolution XpGetAttributes XpSetAttributes
		         XpGetOneAttribute XpGetScreenOfContext XpFreePrinterList XpQueryVersion XpQueryExtension
		         XpQueryScreens XpGetPdmStartParams XpGetAuthParams XpSendOneTicket XpGetPageDimensions
		         XpSetImageResolution XpGetPrinterList XpSelectInput XpInputSelected XpPutDocumentData
		         XpGetDocumentData XtSetArg XtManageChildren XtManageChild XtUnmanageChildren XtUnmanageChild
		         XtDispatchEvent XtCallAcceptFocus XtIsSubclass XtIsObject XtIsManaged XtIsRealized
		         XtIsSensitive XtOwnSelection XtOwnSelectionIncremental XtMakeResizeRequest XtTranslateCoords
		         XtKeysymToKeycodeList XtParseTranslationTable XtParseAcceleratorTable XtOverrideTranslations XtAugmentTranslations
		         XtInstallAccelerators XtInstallAllAccelerators XtUninstallTranslations XtAppAddActionHook
		         XtRemoveActionHook XtGetActionList XtCallActionProc XtRegisterGrabAction XtSetMultiClickTime
		         XtGetMultiClickTime XtGetActionKeysym XtTranslateKeycode XtTranslateKey XtSetKeyTranslator
		         XtRegisterCaseConverter XtConvertCase XtAddEventHandler XtRemoveEventHandler XtAddRawEventHandler
		         XtRemoveRawEventHandler XtInsertEventHandler XtInsertRawEventHandler XtDispatchEventToWidget
		         XtBuildEventMask XtAddGrab XtRemoveGrab XtAddExposureToRegion XtSetKeyboardFocus
		         XtGetKeyboardFocusWidget XtLastEventProcessed XtLastTimestampProcessed XtAddTimeOut
		         XtAppAddTimeOut XtRemoveTimeOut XtAddInput XtAppAddInput XtRemoveInput XtPending XtAppPending
		         XtRealizeWidget XtUnrealizeWidget XtDestroyWidget XtSetSensitive XtNameToWidget XtWindowToWidget
		         XtMergeArgLists XtVaCreateArgsList XtDisplay XtDisplayOfObject XtScreen XtScreenOfObject
		         XtWindow XtWindowOfObject XtName XtSuperclass XtClass XtParent XtAddCallback XtRemoveCallback
		         XtAddCallbacks XtRemoveCallbacks XtRemoveAllCallbacks XtCallCallbacks XtCallCallbackList
		         XtHasCallbacks XtCreatePopupShell XtVaCreatePopupShell XtPopup XtPopupSpringLoaded
		         XtCallbackNone XtCallbackNonexclusive XtCallbackExclusive XtPopdown XtCallbackPopdown
		         XtCreateWidget XtCreateManagedWidget XtVaCreateWidget XtVaCreateManagedWidget
		         XtCreateApplicationShell XtAppCreateShell XtVaAppCreateShell XtToolkitInitialize
		         XtSetLanguageProc XtDisplayInitialize XtOpenApplication XtVaOpenApplication XtAppInitialize
		         XtVaAppInitialize XtInitialize XtOpenDisplay XtCreateApplicationContext
		         XtDestroyApplicationContext XtInitializeWidgetClass XtWidgetToApplicationContext
		         XtDisplayToApplicationContext XtCloseDisplay 
			 XtSetValues XtVaSetValues XtGetValues XtVaGetValues
		         XtAppSetErrorMsgHandler XtSetErrorMsgHandler XtAppSetWarningMsgHandler XtSetWarningMsgHandler
		         XtAppErrorMsg XtErrorMsg XtAppWarningMsg XtWarningMsg XtAppSetErrorHandler XtSetErrorHandler
		         XtAppSetWarningHandler XtSetWarningHandler XtAppError XtError XtAppWarning XtWarning
		         XtAddWorkProc XtAppAddWorkProc XtRemoveWorkProc XtGetGC XtAllocateGC XtDestroyGC XtReleaseGC
		         XtFindFile XtResolvePathname XtDisownSelection XtGetSelectionValue
		         XtGetSelectionValues XtAppSetSelectionTimeout XtSetSelectionTimeout XtAppGetSelectionTimeout
		         XtGetSelectionTimeout XtGetSelectionRequest XtGetSelectionValueIncremental
		         XtGetSelectionValuesIncremental XtCreateSelectionRequest XtSendSelectionRequest
		         XtCancelSelectionRequest XtGrabKey XtUngrabKey
		         XtGrabKeyboard XtUngrabKeyboard XtGrabButton XtUngrabButton XtGrabPointer XtUngrabPointer
		         XtGetApplicationNameAndClass XtGetDisplays XtToolkitThreadInitialize XtAppLock XtAppUnlock XtIsRectObj XtIsWidget
		         XtIsComposite XtIsConstraint XtIsShell XtIsOverrideShell XtIsWMShell XtIsVendorShell
		         XtIsTransientShell XtIsTopLevelShell XtIsApplicationShell XtIsSessionShell XtMapWidget
		         XtUnmapWidget XLoadQueryFont XQueryFont XGetMotionEvents XDeleteModifiermapEntry
		         XGetModifierMapping XInsertModifiermapEntry XNewModifiermap XCreateImage XGetImage
		         XGetSubImage XOpenDisplay XFetchBytes XFetchBuffer XGetAtomName XDisplayName XUniqueContext
		         XKeysymToString XSynchronize XSetAfterFunction XInternAtom XCopyColormapAndFree XCreateColormap
		         XCreatePixmapCursor XCreateGlyphCursor XCreateFontCursor XLoadFont XCreateGC XFlushGC
		         XCreatePixmap XCreateBitmapFromData XCreatePixmapFromBitmapData XCreateSimpleWindow
		         XGetSelectionOwner XCreateWindow XListInstalledColormaps XListFonts XListFontsWithInfo
		         XGetFontPath XListExtensions XListProperties XKeycodeToKeysym XLookupKeysym
		         XGetKeyboardMapping XStringToKeysym
		         XDisplayMotionBufferSize XVisualIDFromVisual XMaxRequestSize XExtendedMaxRequestSize
		         XInitThreads XLockDisplay XUnlockDisplay XRootWindow XDefaultRootWindow XRootWindowOfScreen
		         XDefaultVisual XDefaultVisualOfScreen XDefaultGC XDefaultGCOfScreen XBlackPixel XWhitePixel
		         XAllPlanes XBlackPixelOfScreen XWhitePixelOfScreen XNextRequest XLastKnownRequestProcessed
		         XServerVendor XDisplayString XDefaultColormap XDefaultColormapOfScreen XDisplayOfScreen
		         XScreenOfDisplay XDefaultScreenOfDisplay XEventMaskOfScreen XScreenNumberOfScreen
		         XSetErrorHandler XSetIOErrorHandler XListPixmapFormats XListDepths XReconfigureWMWindow
		         XGetWMProtocols XSetWMProtocols XIconifyWindow XWithdrawWindow XGetCommand XGetWMColormapWindows
		         XFreeStringList XSetTransientForHint XActivateScreenSaver
		         XAllocColor XAllocColorCells XAllocColorPlanes XAllocNamedColor
		         XAllowEvents XAutoRepeatOff XAutoRepeatOn XBell XBitmapBitOrder XBitmapPad XBitmapUnit
		         XCellsOfScreen XChangeActivePointerGrab XChangeGC XChangeKeyboardControl XChangeKeyboardMapping
		         XChangePointerControl XChangeProperty XChangeWindowAttributes ; XCheckIfEvent
		         XCheckMaskEvent XCheckTypedEvent XCheckTypedWindowEvent XCheckWindowEvent XCirculateSubwindows
		         XCirculateSubwindowsDown XCirculateSubwindowsUp XClearArea XClearWindow XCloseDisplay
		         XConfigureWindow XConnectionNumber XConvertSelection XCopyArea XCopyGC XCopyPlane XDefaultDepth
		         XDefaultDepthOfScreen XDefaultScreen XDefineCursor XDeleteProperty XDestroyWindow
		         XDestroySubwindows XDoesBackingStore XDoesSaveUnders XDisableAccessControl XDisplayCells
		         XDisplayHeight XDisplayHeightMM XDisplayKeycodes XDisplayPlanes XDisplayWidth XDisplayWidthMM
		         XDrawArc XDrawArcs XDrawImageString XDrawLine XDrawLines XDrawLinesDirect XDrawPoint
		         XDrawPoints XDrawRectangle XDrawRectangles XDrawSegments XDrawString XDrawText
		         XEnableAccessControl XEventsQueued XFetchName XFillArc XFillArcs XFillPolygon XFillRectangle
		         XFillRectangles XFlush XForceScreenSaver XFreeColormap XFreeColors XFreeCursor
		         XFreeExtensionList XFreeFont XFreeFontInfo XFreeFontNames XFreeFontPath XFreeGC
		         XFreeModifiermap XFreePixmap XGeometry XGetErrorText XGetFontProperty
		         XGetGCValues XGCValues XEvent XGetGeometry XGetIconName XGetInputFocus XGetKeyboardControl
		         XGetPointerControl XGetPointerMapping XGetScreenSaver XGetTransientForHint XGetWindowProperty
		         XGetWindowAttributes XGrabButton XGrabKey XGrabKeyboard XGrabPointer XGrabServer
		         XHeightMMOfScreen XHeightOfScreen XIfEvent XImageByteOrder XInstallColormap XKeysymToKeycode
		         XKillClient XLookupColor XLowerWindow XMapRaised XMapSubwindows XMapWindow XMaskEvent
		         XMaxCmapsOfScreen XMinCmapsOfScreen XMoveResizeWindow XMoveWindow XNoOp XParseColor
		         XParseGeometry XPeekEvent XPeekIfEvent XPending XPlanesOfScreen XProtocolRevision
		         XProtocolVersion XPutImage XQLength XQueryBestCursor XQueryBestSize XQueryBestStipple
		         XQueryBestTile XQueryColor XQueryColors XQueryExtension XQueryKeymap XQueryPointer
		         XQueryTextExtents XQueryTree XRaiseWindow XRebindKeysym XRecolorCursor XRefreshKeyboardMapping
		         XReparentWindow XResetScreenSaver XResizeWindow
		         XRestackWindows XRotateBuffers XRotateWindowProperties XScreenCount XSelectInput XSendEvent
		         XSetAccessControl XSetArcMode XSetBackground XSetClipMask XSetClipOrigin XSetClipRectangles
		         XSetCloseDownMode XSetCommand XSetDashes XSetFillRule XSetFillStyle XSetFont XSetFontPath
		         XSetForeground XSetFunction XSetGraphicsExposures XSetIconName XSetInputFocus XSetLineAttributes
		         XSetModifierMapping XSetPlaneMask XSetPointerMapping XSetScreenSaver XSetSelectionOwner
		         XSetState XSetStipple XSetSubwindowMode XSetTSOrigin XSetTile XSetWindowBackground
		         XSetWindowBackgroundPixmap XSetWindowBorder XSetWindowBorderPixmap XSetWindowBorderWidth
		         XSetWindowColormap XStoreBuffer XStoreBytes XStoreColor XStoreColors XStoreName
		         XStoreNamedColor XSync XTextExtents XTextWidth XTranslateCoordinates XUndefineCursor
		         XUngrabButton XUngrabKey XUngrabKeyboard XUngrabPointer XUngrabServer XUninstallColormap
		         XUnloadFont XUnmapSubwindows XUnmapWindow XVendorRelease XWarpPointer XWidthMMOfScreen
		         XWidthOfScreen XWindowEvent XWriteBitmapFile XSupportsLocale XSetLocaleModifiers XCreateFontSet
		         XFreeFontSet XFontsOfFontSet XBaseFontNameListOfFontSet XLocaleOfFontSet XContextDependentDrawing
		         XDirectionalDependentDrawing XContextualDrawing XFilterEvent XAllocIconSize
		         XAllocStandardColormap XAllocWMHints XClipBox XCreateRegion XDefaultString XDeleteContext
		         XDestroyRegion XEmptyRegion XEqualRegion XFindContext XGetIconSizes XGetRGBColormaps
		         XGetStandardColormap XGetVisualInfo XGetWMHints XIntersectRegion XConvertCase XLookupString
		         XMatchVisualInfo XOffsetRegion XPointInRegion XPolygonRegion XRectInRegion XSaveContext
		         XSetRGBColormaps XSetWMHints XSetRegion XSetStandardColormap XShrinkRegion XSubtractRegion
		         XUnionRectWithRegion XUnionRegion XXorRegion DefaultScreen DefaultRootWindow QLength
		         ScreenCount ServerVendor ProtocolVersion ProtocolRevision VendorRelease DisplayString
		         BitmapUnit BitmapBitOrder BitmapPad ImageByteOrder NextRequest LastKnownRequestProcessed
		         DefaultScreenOfDisplay DisplayOfScreen RootWindowOfScreen BlackPixelOfScreen WhitePixelOfScreen
		         DefaultColormapOfScreen DefaultDepthOfScreen DefaultGCOfScreen DefaultVisualOfScreen
		         WidthOfScreen HeightOfScreen WidthMMOfScreen HeightMMOfScreen PlanesOfScreen CellsOfScreen
		         MinCmapsOfScreen MaxCmapsOfScreen DoesSaveUnders DoesBackingStore EventMaskOfScreen RootWindow
		         DefaultVisual DefaultGC BlackPixel WhitePixel DisplayWidth DisplayHeight DisplayWidthMM
		         DisplayHeightMM DisplayPlanes DisplayCells DefaultColormap ScreenOfDisplay DefaultDepth
		         IsKeypadKey IsPrivateKeypadKey IsCursorKey IsPFKey IsFunctionKey IsMiscFunctionKey
		         IsModifierKey XmCreateMessageBox XmCreateMessageDialog XmCreateErrorDialog
		         XmCreateInformationDialog XmCreateQuestionDialog XmCreateWarningDialog XmCreateWorkingDialog
		         XmCreateTemplateDialog XmMessageBoxGetChild XmCreateArrowButtonGadget XmCreateArrowButton
		         XmCreateNotebook XmNotebookGetPageInfo XmPrintSetup XmPrintToFile XmPrintPopupPDM
		         XmRedisplayWidget XmTransferSetParameters XmTransferValue XmCreateComboBox
		         XmCreateDropDownComboBox XmCreateDropDownList XmComboBoxAddItem XmComboBoxDeletePos
		         XmComboBoxSelectItem XmComboBoxSetItem XmComboBoxUpdate XmCreateContainer
		         XmContainerGetItemChildren XmContainerRelayout XmContainerReorder XmContainerCut XmContainerCopy
		         XmContainerPaste XmContainerCopyLink XmContainerPasteLink XmCreateSpinBox
		         XmSpinBoxValidatePosition XmCreateSimpleSpinBox XmSimpleSpinBoxAddItem XmSimpleSpinBoxDeletePos
		         XmSimpleSpinBoxSetItem XmDropSiteRegistered XmTextFieldCopyLink XmTextFieldPasteLink
		         XmTextGetCenterline XmToggleButtonGadgetSetValue XmCreateIconGadget
		         XmCreateIconHeader XmObjectAtPoint XmConvertStringToUnits XmCreateGrabShell
		         XmToggleButtonSetValue XmTextPasteLink XmTextCopyLink XmScaleSetTicks XmInternAtom XmGetAtomName
		         XmCreatePanedWindow XmCreateBulletinBoard XmCreateBulletinBoardDialog XmCreateCascadeButtonGadget
		         XmCascadeButtonGadgetHighlight XmAddProtocols XmRemoveProtocols XmAddProtocolCallback
		         XmRemoveProtocolCallback XmActivateProtocol XmDeactivateProtocol XmSetProtocolHooks
		         XmCreateCascadeButton XmCascadeButtonHighlight XmCreatePushButtonGadget XmCreatePushButton
		         XmCreateCommand XmCommandGetChild XmCommandSetValue XmCommandAppendValue XmCommandError
		         XmCreateCommandDialog XmMenuPosition XmCreateRowColumn XmCreateWorkArea XmCreateRadioBox
		         XmCreateOptionMenu XmOptionLabelGadget XmOptionButtonGadget XmCreateMenuBar XmCreatePopupMenu
		         XmCreatePulldownMenu XmGetPostedFromWidget XmGetTearOffControl XmAddToPostFromList
		         XmRemoveFromPostFromList XmScaleSetValue XmScaleGetValue XmCreateScale
		         XmClipboardStartCopy XmClipboardCopy XmClipboardEndCopy XmClipboardCancelCopy
		         XmClipboardWithdrawFormat XmClipboardCopyByName XmClipboardUndoCopy XmClipboardLock
		         XmClipboardUnlock XmClipboardStartRetrieve XmClipboardEndRetrieve XmClipboardRetrieve
		         XmClipboardInquireCount XmClipboardInquireFormat XmClipboardInquireLength
		         XmClipboardInquirePendingItems XmClipboardRegisterFormat XmGetXmScreen XmCreateScrollBar
		         XmScrollBarGetValues XmScrollBarSetValues XmCreateDialogShell XmScrolledWindowSetAreas
		         XmCreateScrolledWindow XmScrollVisible XmGetDragContext XmGetXmDisplay XmSelectionBoxGetChild
		         XmCreateSelectionBox XmCreateSelectionDialog XmCreatePromptDialog XmDragStart XmDragCancel
		         XmTargetsAreCompatible XmCreateSeparatorGadget XmCreateDragIcon XmCreateSeparator
		         XmCreateDrawingArea XmCreateDrawnButton XmDropSiteRegister XmDropSiteUnregister
		         XmDropSiteStartUpdate XmDropSiteUpdate XmDropSiteEndUpdate XmDropSiteRetrieve
		         XmDropSiteQueryStackingOrder XmDropSiteConfigureStackingOrder XmDropTransferStart
		         XmDropTransferAdd XmTextFieldGetString XmTextFieldGetSubstring XmTextFieldGetLastPosition
		         XmTextFieldSetString XmTextFieldReplace XmTextFieldInsert XmTextFieldSetAddMode
		         XmTextFieldGetAddMode XmTextFieldGetEditable XmTextFieldSetEditable XmTextFieldGetMaxLength
		         XmTextFieldSetMaxLength XmTextFieldGetCursorPosition XmTextFieldGetInsertionPosition
		         XmTextFieldSetCursorPosition XmTextFieldSetInsertionPosition XmTextFieldGetSelectionPosition
		         XmTextFieldGetSelection XmTextFieldRemove XmTextFieldCopy XmTextFieldCut XmTextFieldPaste
		         XmTextFieldClearSelection XmTextFieldSetSelection XmTextFieldXYToPos XmTextFieldPosToXY
		         XmTextFieldShowPosition XmTextFieldSetHighlight XmTextFieldGetBaseline XmCreateTextField
		         XmFileSelectionBoxGetChild XmFileSelectionDoSearch XmCreateFileSelectionBox
		         XmCreateFileSelectionDialog XmTextSetHighlight XmCreateScrolledText XmCreateText
		         XmTextGetSubstring XmTextGetString XmTextGetLastPosition XmTextSetString XmTextReplace
		         XmTextInsert XmTextSetAddMode XmTextGetAddMode XmTextGetEditable XmTextSetEditable
		         XmTextGetMaxLength XmTextSetMaxLength XmTextGetTopCharacter XmTextSetTopCharacter
		         XmTextGetCursorPosition XmTextGetInsertionPosition XmTextSetInsertionPosition
		         XmTextSetCursorPosition XmTextRemove XmTextCopy XmTextCut XmTextPaste XmTextGetSelection
		         XmTextSetSelection XmTextClearSelection XmTextGetSelectionPosition XmTextXYToPos XmTextPosToXY
		         XmTextGetSource XmTextSetSource XmTextShowPosition XmTextScroll XmTextGetBaseline
		         XmTextDisableRedisplay XmTextEnableRedisplay XmTextFindString XmCreateForm XmCreateFormDialog
		         XmCreateFrame XmToggleButtonGadgetGetState XmToggleButtonGadgetSetState XmCreateToggleButtonGadget
		         XmToggleButtonGetState XmToggleButtonSetState XmCreateToggleButton XmCreateLabelGadget
		         XmCreateLabel XmIsMotifWMRunning XmListAddItem XmListAddItems XmListAddItemsUnselected
		         XmListAddItemUnselected XmListDeleteItem XmListDeleteItems XmListDeletePositions XmListDeletePos
		         XmListDeleteItemsPos XmListDeleteAllItems XmListReplaceItems XmListReplaceItemsPos
		         XmListReplaceItemsUnselected XmListReplaceItemsPosUnselected XmListReplacePositions
		         XmListSelectItem XmListSelectPos XmListDeselectItem XmListDeselectPos XmListDeselectAllItems
		         XmListSetPos XmListSetBottomPos XmListSetItem XmListSetBottomItem XmListSetAddMode
		         XmListItemExists XmListItemPos XmListGetKbdItemPos XmListSetKbdItemPos XmListYToPos
		         XmListPosToBounds XmListGetMatchPos XmListGetSelectedPos XmListSetHorizPos
		         XmListUpdateSelectedList XmListPosSelected XmCreateList XmCreateScrolledList XmTranslateKey
		         XmMainWindowSetAreas XmMainWindowSep1 XmMainWindowSep2 XmMainWindowSep3 XmCreateMainWindow
		         XmInstallImage XmUninstallImage XmGetPixmap XmGetPixmapByDepth XmDestroyPixmap XmUpdateDisplay
		         XmWidgetGetBaselines XmRegisterSegmentEncoding XmMapSegmentEncoding
		         XmCvtCTToXmString XmCvtXmStringToCT XmConvertUnits XmSetFontUnits XmSetFontUnit XmSetMenuCursor
		         XmGetMenuCursor XmCreateSimpleMenuBar XmCreateSimplePopupMenu XmCreateSimplePulldownMenu
		         XmCreateSimpleOptionMenu XmCreateSimpleRadioBox XmCreateSimpleCheckBox XmVaCreateSimpleMenuBar
		         XmVaCreateSimplePopupMenu XmVaCreateSimplePulldownMenu XmVaCreateSimpleOptionMenu
		         XmVaCreateSimpleRadioBox XmVaCreateSimpleCheckBox XmTrackingEvent XmTrackingLocate
		         XmSetColorCalculation XmGetColorCalculation XmGetColors XmChangeColor XmStringCreate
		         XmStringCreateSimple XmStringCreateLocalized XmStringDirectionCreate XmStringSeparatorCreate
		         XmStringSegmentCreate XmStringCreateLtoR XmStringInitContext
		         XmStringFreeContext XmStringGetNextComponent XmStringPeekNextComponent XmStringGetNextSegment
		         XmStringGetLtoR XmFontListEntryCreate
		         XmStringConcatAndFree XmStringIsVoid XmStringPeekNextTriple XmStringGetNextTriple
		         XmStringComponentCreate XmStringUnparse XmStringParseText XmStringToXmStringTable
		         XmStringTableToXmString XmStringTableUnparse XmStringTableParseStringArray
		         XmDirectionToStringDirection XmStringDirectionToDirection XmStringGenerate XmStringPutRendition
		         XmParseMappingGetValues XmParseMappingFree XmParseTableFree XmStringTableProposeTablist
		         XmTabSetValue XmTabGetValues XmTabFree XmTabCreate XmTabListTabCount XmTabListRemoveTabs
		         XmTabListReplacePositions XmTabListGetTab XmTabListCopy XmTabListInsertTabs
		         XmRenderTableCvtFromProp XmRenderTableCvtToProp XmRenditionUpdate XmRenditionRetrieve
		         XmRenditionFree XmRenditionCreate XmRenderTableGetRenditions XmRenderTableGetRendition
		         XmRenderTableGetTags XmRenderTableFree XmRenderTableCopy XmRenderTableRemoveRenditions
		         XmRenderTableAddRenditions XmFontListEntryFree XmFontListEntryGetFont XmFontListEntryGetTag
		         XmFontListAppendEntry XmFontListNextEntry XmFontListRemoveEntry XmFontListEntryLoad
		         XmFontListCreate XmFontListFree XmFontListAdd XmFontListCopy
		         XmFontListInitFontContext XmFontListGetNextFont XmFontListFreeFontContext XmStringConcat
		         XmStringNConcat XmStringCopy XmStringNCopy XmStringByteCompare XmStringCompare XmStringLength
		         XmStringEmpty XmStringHasSubstring XmStringFree XmStringBaseline XmStringWidth XmStringHeight
		         XmStringExtent XmStringLineCount XmStringDraw XmStringDrawImage XmStringDrawUnderline
		         XmGetDestination XmIsTraversable XmGetVisibility XmGetTabGroup XmGetFocusWidget
		         XmProcessTraversal XmCreateMenuShell XmIsMessageBox
		         XmIsArrowButtonGadget XmIsArrowButton XmIsNotebook XmIsPrintShell XmIsComboBox XmIsContainer
		         XmIsGrabShell XmIsIconGadget XmIsIconHeader XmIsPanedWindow XmIsBulletinBoard XmIsPrimitive
		         XmIsCascadeButtonGadget XmIsCascadeButton XmIsPushButtonGadget XmIsPushButton XmIsCommand
		         XmIsRowColumn XmIsScale XmIsScreen XmIsScrollBar XmIsDialogShell XmIsScrolledWindow XmIsDisplay
		         XmIsSelectionBox XmIsDragContext XmIsSeparatorGadget XmIsDragIconObjectClass
		         XmIsSeparator XmIsDrawingArea XmIsDrawnButton XmIsDropSiteManager XmIsDropTransfer XmIsTextField
		         XmIsFileSelectionBox XmIsText XmIsForm XmIsFrame XmIsGadget XmIsToggleButtonGadget
		         XmIsToggleButton XmIsLabelGadget XmIsLabel XmIsVendorShell XmIsList XmIsMainWindow XmIsManager
		         XmIsMenuShell XpmCreatePixmapFromData XpmCreateDataFromPixmap XpmReadFileToPixmap
		         XpmReadPixmapFile XpmWriteFileFromPixmap XpmWritePixmapFile XpmCreatePixmapFromXpmImage
		         XpmCreateXpmImageFromPixmap XGetPixel XDestroyImage XPutPixel XSubImage XAddPixel
		         XtAppContext? XtRequestId? XtWorkProcId? XtInputId? XtIntervalId? Screen? XEvent?
		         XRectangle? XArc? XPoint? XSegment? XColor? Atom? Colormap?
		         XModifierKeymap? Depth? Display? Drawable? Font? GC? KeySym? Pixel? Pixmap? Region?
		         Time? Visual? Window? XFontProp? XFontSet? XFontStruct? XGCValues? XImage? XVisualInfo?
		         XWMHints? XWindowAttributes? XWindowChanges? KeyCode? XContext? XCharStruct? XTextItem?
		         XStandardColormap? XPContext? Widget? XmStringContext? WidgetClass? XmString?
		         XmToggleButton? XmDrawingArea? XmPushButton? XmTextField? XmFileSelectionBox? XmText?
		         XmFrame? XmLabel? XmList? XmArrowButton? XmScrollBar? XmCommand? XmScale? XmRowColumn?
		         XmTab? XmNotebook? XmPrintShell? XmComboBox? XmContainer? XmIconHeader?
		         XmGrabShell? XmRendition? XmRenderTable? XmIconGadget? XmTabList? XmParseMapping?
		         XmPanedWindow? XmScrolledWindow? XmCascadeButton? XmForm? XmBulletinBoard? XmScreen?
		         XmDialogShell? XmDisplay? XmSelectionBox? XmDragContext? XmDragIconObjectClass? XmSeparator?
		         XmDropSiteManager? XmDropTransfer? XmVendorShell? XmMainWindow? XmMessageBox? XmManager?
		         XmMenuShell? XmLabelGadget? XmPushButtonGadget? XmSeparatorGadget? XmArrowButtonGadget?
		         XmCascadeButtonGadget? XmToggleButtonGadget? XmDrawnButton? XmPrimitive? XmFontList?
		         XmFontContext? XmFontListEntry? XmTextSource? XpmAttributes? XpmImage? XpmColorSymbol?
			  ))
		   (xm-procs0 (remove-if (lambda (n) (not (arity-ok n 0))) xm-procs))
		   (xm-procs1 (remove-if (lambda (n) (not (arity-ok n 1))) xm-procs))
		   (xm-procs2 (remove-if (lambda (n) (not (arity-ok n 2))) xm-procs))
		   (xm-procs3 (remove-if (lambda (n) (not (arity-ok n 3))) xm-procs))
		   (xm-procs4 (remove-if (lambda (n) (not (arity-ok n 4))) xm-procs))
		   )

	      ;; ---------------- 0 Args
	      (for-each 
	       (lambda (n)
		 (catch #t
			(lambda () 
			  (n))
			(lambda args (car args))))
	       xm-procs0)
	      
	      ;; ---------------- 1 Arg
	      (for-each 
	       (lambda (arg)
		 (for-each 
		  (lambda (n)
		    (catch #t
			   (lambda () (n arg))
			   (lambda args (car args))))
		  xm-procs1))
	       (list win 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (make-color .95 .95 .95)  '#(0 1) 3/4 'mus-error (sqrt -1.0) (make-delay 32)
		     (lambda () #t) (current-module) (make-sound-data 2 3) :order 0 1 -1 (make-hook 2) #f #t '() (make-vector 0) 12345678901234567890))
	      
	      ;; ---------------- 2 Args
	      (for-each 
	       (lambda (arg1)
		 (for-each 
		  (lambda (arg2)
		    (for-each 
		     (lambda (n)
		       (catch #t
			      (lambda () (n arg1 arg2))
			      (lambda args (car args))))
		     xm-procs2))
		  (list win 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (make-color .95 .95 .95) '#(0 1) 3/4 
			(sqrt -1.0) (make-delay 32) :feedback -1 0 #f #t '() (make-vector 0) 12345678901234567890)))
	       (list win 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (make-color .95 .95 .95) '#(0 1) 3/4 
		     (sqrt -1.0) (make-delay 32) :frequency -1 0 #f #t '() (make-vector 0) 12345678901234567890))
	      
	      (if all-args
		  (begin
		    
		    ;; ---------------- 3 Args
		    (for-each 
		     (lambda (arg1)
		       (for-each 
			(lambda (arg2)
			  (for-each 
			   (lambda (arg3)
			     (for-each 
			      (lambda (n)
				(catch #t
				       (lambda () (n arg1 arg2 arg3))
				       (lambda args (car args))))
			      xm-procs3))
			   (list win 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) '#(0 1) (sqrt -1.0) (make-delay 32) 
				 :start -1 0 #f #t '() (make-vector 0) 12345678901234567890)))
			(list win 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) '#(0 1) (sqrt -1.0) (make-delay 32) 
			      :phase -1 0 #f #t '() (make-vector 0) 12345678901234567890)))
		     (list win 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) '#(0 1) (sqrt -1.0) (make-delay 32) 
			   :channels -1 0 #f #t '() (make-vector 0) 12345678901234567890))
		    
		    ;; ---------------- 4 Args
		    (for-each 
		     (lambda (arg1)
		       (for-each 
			(lambda (arg2)
			  (for-each 
			   (lambda (arg3)
			     (for-each 
			      (lambda (arg4)
				(for-each 
				 (lambda (n)
				   (catch #t
					  (lambda () (n arg1 arg2 arg3 arg4))
					  (lambda args (car args))))
				 xm-procs4))
			      (list win 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) '#(0 1) (sqrt -1.0) (make-delay 32) 
				    :start -1 0 #f #t '() (make-vector 0) 12345678901234567890)))
			   (list win 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) '#(0 1) (sqrt -1.0) (make-delay 32) 
				 :phase -1 0 #f #t '() (make-vector 0) 12345678901234567890)))
			(list win 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) '#(0 1) (sqrt -1.0) (make-delay 32) 
			      :channels -1 0 #f #t '() (make-vector 0) 12345678901234567890)))
		     (list win 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) '#(0 1) (sqrt -1.0) (make-delay 32) 
			   :channels -1 0 #f #t '() (make-vector 0) 12345678901234567890))
		    ))

	      (let ((struct-accessors (list  .pixel .red .green .blue .flags .pad .x .y .width .height .angle1 .angle2 .ptr
				.x1 .y1 .x2 .y2 .dashes .dash_offset .clip_mask .clip_y_origin .clip_x_origin .graphics_exposures
				.subwindow_mode .font .ts_y_origin .ts_x_origin .stipple .tile .arc_mode .fill_rule .fill_style
				.join_style .cap_style .line_style .line_width .background .foreground .plane_mask .function .delta
				.nchars .chars .name .depth .visual .mwidth .mheight .ndepths .depths .root_depth .root_visual
				.default_gc .cmap .white_pixel .black_pixel .max_maps .min_maps .backing_store .save_unders .root_input_mask
				.lbearing .rbearing .ascent .descent .attributes .card32 .fid .properties .min_bounds .max_bounds .per_char
				.input .initial_state .icon_pixmap .icon_window .icon_x .icon_y .icon_mask .window_group .visualid
				.class  .red_mask .green_mask .blue_mask .bits_per_rgb .map_entries .nvisuals .visuals .bits_per_pixel
				.background_pixmap .background_pixel .border_pixmap .border_pixel .bit_gravity .win_gravity .backing_planes
				.backing_pixel .save_under .event_mask .do_not_propagate_mask .cursor .map_installed .map_state .all_event_masks
				.your_event_mask .screen .xoffset .byte_order .bitmap_unit .bitmap_bit_order .bitmap_pad .bytes_per_line
				.obdata .sibling .stack_mode .red_max .red_mult .green_max .green_mult .blue_max .blue_mult .base_pixel
				.killid .data .min_height .max_height .min_width .max_width .height_inc .width_inc .page_number
				.page_widget .status_area_widget .major_tab_widget .minor_tab_widget .source_data .location_data .parm
				.parm_format .parm_length .parm_type .transfer_id .destination_data .remaining .item_or_text .auto_selection_type
				.new_outline_state .prev_page_number .prev_page_widget .rendition .render_table .last_page .crossed_boundary
				.client_data .status .font_name .tag .traversal_destination .dragProtocolStyle .direction .reason
				.timeStamp .operation .operations .dropSiteStatus .dropAction .iccHandle .completionStatus .dragContext
				.animate .length .click_count .widget .item_position .callbackstruct
				.set .item .item_length .selected_items .selected_item_count .selected_item_positions .selection_type
				.mask .mask_length .dir .dir_length .pattern .pattern_length .position .currInsert .newInsert .startPos
				.endPos .text .request_code .error_code .first_keycode .request .resourceid .format .message_type .new
				.property .display .target .requestor .owner .selection .atom .place .value_mask .above .from_configure
				.event .override_redirect .border_width .parent .minor_code .major_code .drawable .count .key_vector .focus
				.detail .mode .is_hint .button .same_screen .keycode .state .y_root .x_root .root .time .subwindow .window
				.send_event .serial .type .value .doit .colormap .menuToPost .postIt .valuemask .ncolors .cpp
				.numsymbols .colorsymbols .npixels .y_hotspot .x_hotspot))

		    (struct-accessor-names (list  '.pixel '.red '.green '.blue '.flags '.pad '.x '.y '.width '.height '.angle1 '.angle2 '.ptr
				'.x1 '.y1 '.x2 '.y2 '.dashes '.dash_offset '.clip_mask '.clip_y_origin '.clip_x_origin '.graphics_exposures
				'.subwindow_mode '.font '.ts_y_origin '.ts_x_origin '.stipple '.tile '.arc_mode '.fill_rule '.fill_style
				'.join_style '.cap_style '.line_style '.line_width '.background '.foreground '.plane_mask '.function '.delta
				'.nchars '.chars '.name '.depth '.visual '.mwidth '.mheight '.ndepths '.depths '.root_depth '.root_visual
				'.default_gc '.cmap '.white_pixel '.black_pixel '.max_maps '.min_maps '.backing_store '.save_unders '.root_input_mask
				'.lbearing '.rbearing '.ascent '.descent '.attributes '.card32 '.fid '.properties '.min_bounds '.max_bounds '.per_char
				'.input '.initial_state '.icon_pixmap '.icon_window '.icon_x '.icon_y '.icon_mask '.window_group '.visualid
				'.class  '.red_mask '.green_mask '.blue_mask '.bits_per_rgb '.map_entries '.nvisuals '.visuals '.bits_per_pixel
				'.background_pixmap '.background_pixel '.border_pixmap '.border_pixel '.bit_gravity '.win_gravity '.backing_planes
				'.backing_pixel '.save_under '.event_mask '.do_not_propagate_mask '.cursor '.map_installed '.map_state '.all_event_masks
				'.your_event_mask '.screen '.xoffset '.byte_order '.bitmap_unit '.bitmap_bit_order '.bitmap_pad '.bytes_per_line
				'.obdata '.sibling '.stack_mode '.red_max '.red_mult '.green_max '.green_mult '.blue_max '.blue_mult '.base_pixel
				'.killid '.data '.min_height '.max_height '.min_width '.max_width '.height_inc '.width_inc '.page_number
				'.page_widget '.status_area_widget '.major_tab_widget '.minor_tab_widget '.source_data '.location_data '.parm
				'.parm_format '.parm_length '.parm_type '.transfer_id '.destination_data '.remaining '.item_or_text '.auto_selection_type
				'.new_outline_state '.prev_page_number '.prev_page_widget '.rendition '.render_table '.last_page '.crossed_boundary
				'.client_data '.status '.font_name '.tag '.traversal_destination '.dragProtocolStyle '.direction '.reason
				'.timeStamp '.operation '.operations '.dropSiteStatus '.dropAction '.iccHandle '.completionStatus '.dragContext
				'.animate '.length '.click_count '.widget '.item_position '.callbackstruct
				'.set '.item '.item_length '.selected_items '.selected_item_count '.selected_item_positions '.selection_type
				'.mask '.mask_length '.dir '.dir_length '.pattern '.pattern_length '.position '.currInsert '.newInsert '.startPos
				'.endPos '.text '.request_code '.error_code '.first_keycode '.request '.resourceid '.format '.message_type '.new
				'.property '.display '.target '.requestor '.owner '.selection '.atom '.place '.value_mask '.above '.from_configure
				'.event '.override_redirect '.border_width '.parent '.minor_code '.major_code '.drawable '.count '.key_vector '.focus
				'.detail '.mode '.is_hint '.button '.same_screen '.keycode '.state '.y_root '.x_root '.root '.time '.subwindow '.window
				'.send_event '.serial '.type '.value '.doit '.colormap '.menuToPost '.postIt '.valuemask '.ncolors '.cpp
				'.numsymbols '.colorsymbols '.npixels '.y_hotspot '.x_hotspot))
		    (dpy (XtDisplay (cadr (main-widgets))))
		    (win (XtWindow (cadr (main-widgets)))))

		;; ---------------- 0 Args
		(for-each 
		 (lambda (n name)
		   (let ((tag
			  (catch #t
				 (lambda () 
				   (n))
				 (lambda args (car args)))))
		     (if (not (eq? tag 'wrong-number-of-args))
			 (snd-display ";(~A) -> ~A" name tag)))
		   (if (procedure-with-setter? n)
		       (let ((tag
			      (catch #t
				     (lambda () 
				       (set! (n) 0))
				     (lambda args (car args)))))
			 (if (not (eq? tag 'wrong-number-of-args))
			     (snd-display ";(~A) -> ~A" name tag)))))
		 struct-accessors
		 struct-accessor-names)

		;; ---------------- 1 Arg
		(for-each 
		 (lambda (arg)
		   (for-each 
		    (lambda (n name)
		      (let ((tag 
			     (catch #t
				    (lambda () (n arg))
				    (lambda args (car args)))))
			(if (not (eq? tag 'wrong-type-arg))
			    (snd-display ";(~A ~A) -> ~A" name arg tag)))
		      (if (procedure-with-setter? n)
			  (begin
			    (let ((tag 
				   (catch #t
					  (lambda () (set! (n arg) 0))
					  (lambda args (car args)))))
			      (if (not (eq? tag 'wrong-type-arg))
				  (snd-display ";(~A ~A) -> ~A" name arg tag)))
			    (let ((tag 
				   (catch #t
					  (lambda () (set! (n 0) arg))
					  (lambda args (car args)))))
			      (if (not (eq? tag 'wrong-type-arg))
				  (snd-display ";(set ~A ~A) -> ~A" name arg tag))))))
		    struct-accessors
		    struct-accessor-names))
		 (list dpy win '(Atom 0) '(Colormap 0) 1.5 "/hiho" 1234 #f #\c '(Time 0) (make-vector 0))))
	      (gc))
	      ))))

;;; -------------------- test 26: Gtk --------------------

(if (or full-test (= snd-test 26) (and keep-going (<= snd-test 26)))
    (begin
      (if (procedure? test-hook) (test-hook 26))
      (if (and (provided? 'snd-gtk)
	       (provided? 'xg))
	  (let ((ind (open-sound "oboe.snd")))
	    (if (not (GTK_IS_WIDGET (cadr (main-widgets)))) (snd-display ";GTK_IS_WIDGET?"))
	    ;; all gtk proc names are in gtk-procs.scm
	    (if (not (GTK_IS_ENTRY (list-ref (sound-widgets) 3))) (snd-display ";GTK_IS_ENTRY?"))

	    (let* ((win (car (main-widgets)))
		   (vals (gdk_property_get win (gdk_atom_intern "SND_VERSION" #f) GDK_TARGET_STRING 0 1024 0))
		   (lst (and vals (list-ref vals 4) (c-array->list (list-ref vals 4) (list-ref vals 3))))
		   (str (and lst (make-string (1- (length lst))))))
	      (if str
		  (do ((i 0 (1+ i)))
		      ((= i (1- (length lst))))
		    (string-set! str i (integer->char (list-ref lst i)))))
	      (if (or (not str) 
		      (not (string=? (snd-version) str)))
		  (snd-display ";SND_VERSION: ~A ~A" str (snd-version))))
	    (if (not (string=? "STRING" (gdk_atom_name GDK_TARGET_STRING)))
		(snd-display ";gdk_atom_name: ~A" (gdk_atom_name GDK_TARGET_STRING)))

	    (close-sound ind)

	    (for-each
	     (lambda (data)
	       (let* ((creator (car data))
		      (checker (cadr data))
		      (name (caddr data))
		      (w (creator)))
		 (if (not (checker w)) (snd-display ";~A: ~A?" name w))))
	     (list
	      (list (lambda () (gtk_vbox_new #t 0)) GTK_IS_VBOX 'GTK_IS_VBOX)
	      (list gtk_accel_group_new GTK_IS_ACCEL_GROUP 'GTK_IS_ACCEL_GROUP)
	      (list (lambda () (gtk_accel_label_new "hiho")) GTK_IS_ACCEL_LABEL 'GTK_IS_ACCEL_LABEL)
	      (list (lambda () (gtk_adjustment_new 1.0 0.0 2.0 .1 .1 .1)) GTK_IS_ADJUSTMENT 'GTK_IS_ADJUSTMENT)
	      (list (lambda () (gtk_alignment_new 0.0 0.0 1.0 1.0)) GTK_IS_ALIGNMENT 'GTK_IS_ALIGNMENT)
	      (list (lambda () (gtk_arrow_new GTK_ARROW_UP GTK_SHADOW_IN)) GTK_IS_ARROW 'GTK_IS_ARROW)
	      (list (lambda () (gtk_aspect_frame_new "hi" 1.0 1.0 1.0 #f)) GTK_IS_ASPECT_FRAME 'GTK_IS_ASPECT_FRAME)
	      (list (lambda () (gtk_button_new_with_label "hi")) GTK_IS_BUTTON 'GTK_IS_BUTTON)
	      (list gtk_calendar_new GTK_IS_CALENDAR 'GTK_IS_CALENDAR)
	      (list gtk_check_button_new GTK_IS_CHECK_BUTTON 'GTK_IS_CHECK_BUTTON)
	      (list gtk_check_menu_item_new GTK_IS_CHECK_MENU_ITEM 'GTK_IS_CHECK_MENU_ITEM)
	      (list (lambda () (gtk_color_selection_dialog_new "hi")) GTK_IS_COLOR_SELECTION_DIALOG 'GTK_IS_COLOR_SELECTION_DIALOG)
	      (list gtk_color_selection_new GTK_IS_COLOR_SELECTION 'GTK_IS_COLOR_SELECTION)
	      (list gtk_combo_new GTK_IS_COMBO 'GTK_IS_COMBO)
	      (list gtk_curve_new GTK_IS_CURVE 'GTK_IS_CURVE)
	      (list gtk_dialog_new GTK_IS_DIALOG 'GTK_IS_DIALOG)
	      (list gtk_drawing_area_new GTK_IS_DRAWING_AREA 'GTK_IS_DRAWING_AREA)
	      (list gtk_entry_new GTK_IS_ENTRY 'GTK_IS_ENTRY)
	      (list gtk_event_box_new GTK_IS_EVENT_BOX 'GTK_IS_EVENT_BOX)
	      (list (lambda () (gtk_file_selection_new "hi")) GTK_IS_FILE_SELECTION 'GTK_IS_FILE_SELECTION)
	      (list gtk_fixed_new GTK_IS_FIXED 'GTK_IS_FIXED)
	      (list gtk_font_selection_new GTK_IS_FONT_SELECTION 'GTK_IS_FONT_SELECTION)
	      (list (lambda () (gtk_font_selection_dialog_new "hi")) GTK_IS_FONT_SELECTION_DIALOG 'GTK_IS_FONT_SELECTION_DIALOG)
	      (list (lambda () (gtk_frame_new "hi")) GTK_IS_FRAME 'GTK_IS_FRAME)
	      (list gtk_gamma_curve_new GTK_IS_GAMMA_CURVE 'GTK_IS_GAMMA_CURVE)
	      (list gtk_handle_box_new GTK_IS_HANDLE_BOX 'GTK_IS_HANDLE_BOX)
	      (list gtk_hbutton_box_new GTK_IS_HBUTTON_BOX 'GTK_IS_HBUTTON_BOX)
	      (list (lambda () (gtk_hbox_new #f 0)) GTK_IS_HBOX 'GTK_IS_HBOX)
	      (list gtk_hpaned_new GTK_IS_HPANED 'GTK_IS_HPANED)
	      (list gtk_hruler_new GTK_IS_HRULER 'GTK_IS_HRULER)
	      (list gtk_hseparator_new GTK_IS_HSEPARATOR 'GTK_IS_HSEPARATOR)
	      (list gtk_icon_factory_new GTK_IS_ICON_FACTORY 'GTK_IS_ICON_FACTORY)
	      (list gtk_image_new GTK_IS_IMAGE 'GTK_IS_IMAGE)
	      (list gtk_image_menu_item_new GTK_IS_IMAGE_MENU_ITEM 'GTK_IS_IMAGE_MENU_ITEM)
	      (list gtk_im_context_simple_new GTK_IS_IM_CONTEXT_SIMPLE 'GTK_IS_IM_CONTEXT_SIMPLE)
	      (list gtk_im_multicontext_new GTK_IS_IM_MULTICONTEXT 'GTK_IS_IM_MULTICONTEXT)
	      (list gtk_input_dialog_new GTK_IS_INPUT_DIALOG 'GTK_IS_INPUT_DIALGO)
	      (list gtk_invisible_new GTK_IS_INVISIBLE 'GTK_IS_INVISIBLE)
	      (list (lambda () (gtk_label_new "hi")) GTK_IS_LABEL 'GTK_IS_LABEL)
	      (list gtk_menu_bar_new GTK_IS_MENU_BAR 'GTK_IS_MENU_BAR)
	      (list gtk_menu_new GTK_IS_MENU 'GTK_IS_MENU)
	      (list gtk_menu_item_new GTK_IS_MENU_ITEM 'GTK_IS_MENU_ITEM)
	      (list gtk_notebook_new GTK_IS_NOTEBOOK 'GTK_IS_NOTEBOOK)
	      (list gtk_option_menu_new GTK_IS_OPTION_MENU 'GTK_IS_OPTION_MENU)
	      (list gtk_progress_bar_new GTK_IS_PROGRESS_BAR 'GTK_IS_PROGRESS_BAR)
	      (list gtk_rc_style_new GTK_IS_RC_STYLE 'GTK_IS_RC_STYLE)
	      (list gtk_separator_menu_item_new GTK_IS_SEPARATOR_MENU_ITEM 'GTK_IS_SEPARATOR_MENU_ITEM)
	      (list gtk_socket_new GTK_IS_SOCKET 'GTK_IS_SOCKET)
	      (list (lambda () (gtk_spin_button_new_with_range 0.0 20.0 1.0)) GTK_IS_SPIN_BUTTON 'GTK_IS_SPIN_BUTTON)
	      (list gtk_statusbar_new GTK_IS_STATUSBAR 'GTK_IS_STATUSBAR)
	      (list gtk_style_new GTK_IS_STYLE 'GTK_IS_STYLE)
	      (list (lambda () (gtk_table_new 2 2 #t)) GTK_IS_TABLE 'GTK_IS_TABLE)
	      (list gtk_tearoff_menu_item_new GTK_IS_TEAROFF_MENU_ITEM 'GTK_IS_TEAROFF_MENU_ITEM)
	      (list gtk_text_tag_table_new GTK_IS_TEXT_TAG_TABLE 'GTK_IS_TEXT_TAG_TABLE)
	      (list gtk_text_view_new GTK_IS_TEXT_VIEW 'GTK_IS_TEXT_VIEW)
	      (list gtk_toggle_button_new GTK_IS_TOGGLE_BUTTON 'GTK_IS_TOGGLE_BUTTON)
	      (list gtk_toolbar_new GTK_IS_TOOLBAR 'GTK_IS_TOOLBAR)
	      (list gtk_tooltips_new GTK_IS_TOOLTIPS 'GTK_IS_TOOLTIPS)
	      (list gtk_tree_view_column_new GTK_IS_TREE_VIEW_COLUMN 'GTK_IS_TREE_VIEW_COLUMN)
	      (list gtk_tree_view_new GTK_IS_TREE_VIEW 'GTK_IS_TREE_VIEW)
	      (list gtk_vbutton_box_new GTK_IS_VBUTTON_BOX 'GTK_IS_VBUTTON_BOX)
	      (list gtk_vpaned_new GTK_IS_VPANED 'GTK_IS_VPANED)
	      (list gtk_vruler_new GTK_IS_VRULER 'GTK_IS_VRULER)
	      (list gtk_vseparator_new GTK_IS_VSEPARATOR 'GTK_IS_VSEPARATOR)))
	    
	    
	    ))))
    

;;; -------------------- test 27: GL --------------------

(if (and with-gui (or full-test (= snd-test 27) (and keep-going (<= snd-test 27))))
    (begin
      (if (procedure? test-hook) (test-hook 27))
      (if (provided? 'gl)
	  (begin
	    (load "snd-gl.scm")
	    (gl-info)
	    (if all-args (gl-dump-state))
	    (let ((gl-procs 
		   (list
		    glXChooseVisual glXCopyContext glXCreateContext glXCreateGLXPixmap glXDestroyContext glXDestroyGLXPixmap glXGetConfig
		    glXGetCurrentContext glXGetCurrentDrawable glXIsDirect glXMakeCurrent glXQueryExtension glXQueryVersion glXSwapBuffers
		    glXUseXFont glXWaitGL glXWaitX glXGetClientString glXQueryServerString glXQueryExtensionsString glClearIndex glClearColor
		    glClear glIndexMask glColorMask glAlphaFunc glBlendFunc glLogicOp glCullFace glFrontFace glPointSize glLineWidth glLineStipple
		    glPolygonMode glPolygonOffset glPolygonStipple glEdgeFlag glScissor glClipPlane glGetClipPlane
		    glDrawBuffer glReadBuffer glEnable glDisable glIsEnabled glEnableClientState glDisableClientState glGetBooleanv
		    glGetDoublev glGetFloatv glGetIntegerv glPushAttrib glPopAttrib glPushClientAttrib glPopClientAttrib glRenderMode
		    glGetError glGetString glFinish glFlush glHint glClearDepth glDepthFunc glDepthMask glDepthRange glClearAccum glAccum
		    glMatrixMode glOrtho glFrustum glViewport glPushMatrix glPopMatrix glLoadIdentity glLoadMatrixd glLoadMatrixf
		    glMultMatrixd glMultMatrixf glRotated glRotatef glScaled glScalef glTranslated glTranslatef glIsList glDeleteLists
		    glGenLists glNewList glEndList glCallList glCallLists glListBase glBegin glEnd glVertex2d glVertex2f glVertex2i glVertex2s
		    glVertex3d glVertex3f glVertex3i glVertex3s glVertex4d glVertex4f glVertex4i glVertex4s glNormal3b glNormal3d glNormal3f
		    glNormal3i glNormal3s glIndexd glIndexf glIndexi glIndexs glIndexub glColor3b glColor3d glColor3f glColor3i glColor3s
		    glColor3ub glColor3ui glColor3us glColor4b glColor4d glColor4f glColor4i glColor4s glColor4ub glColor4ui glColor4us glTexCoord1d
		    glTexCoord1f glTexCoord1i glTexCoord1s glTexCoord2d glTexCoord2f glTexCoord2i glTexCoord2s glTexCoord3d glTexCoord3f glTexCoord3i
		    glTexCoord3s glTexCoord4d glTexCoord4f glTexCoord4i glTexCoord4s glRasterPos2d glRasterPos2f glRasterPos2i glRasterPos2s
		    glRasterPos3d glRasterPos3f glRasterPos3i glRasterPos3s glRasterPos4d glRasterPos4f glRasterPos4i glRasterPos4s glRectd
		    glRectf glRecti glRects glVertexPointer glNormalPointer glColorPointer glIndexPointer glTexCoordPointer glEdgeFlagPointer
		    glGetPointerv glArrayElement glDrawArrays glDrawElements glInterleavedArrays glShadeModel glLightf glLighti glGetLightfv
		    glGetLightiv glLightModelf glLightModeli glMaterialf glMateriali glGetMaterialfv glGetMaterialiv glColorMaterial glPixelZoom
		    glPixelStoref glPixelStorei glPixelTransferf glPixelTransferi glGetPixelMapfv glGetPixelMapuiv glGetPixelMapusv glBitmap
		    glReadPixels glDrawPixels glCopyPixels glStencilFunc glStencilMask glStencilOp glClearStencil glTexGend glTexGenf glTexGeni
		    glGetTexGendv glGetTexGenfv glGetTexGeniv glTexEnvf glTexEnvi glGetTexEnvfv glGetTexEnviv glTexParameterf glTexParameteri
		    glGetTexParameterfv glGetTexParameteriv glGetTexLevelParameterfv glGetTexLevelParameteriv glTexImage1D glTexImage2D
		    glGenTextures glDeleteTextures glBindTexture glAreTexturesResident glIsTexture glTexSubImage1D glTexSubImage2D glCopyTexImage1D
		    glCopyTexImage2D glCopyTexSubImage1D glCopyTexSubImage2D glMap1d glMap1f glMap2d glMap2f glGetMapdv glGetMapfv glGetMapiv
		    glEvalCoord1d glEvalCoord1f glEvalCoord2d glEvalCoord2f glMapGrid1d glMapGrid1f glMapGrid2d glMapGrid2f glEvalPoint1
		    glEvalPoint2 glEvalMesh1 glEvalMesh2 glFogf glFogi glFeedbackBuffer glPassThrough glSelectBuffer glInitNames glLoadName
		    glPushName glPopName glDrawRangeElements glTexImage3D glTexSubImage3D glCopyTexSubImage3D glColorTable glColorSubTable
		    glCopyColorSubTable glCopyColorTable glGetColorTableParameterfv glGetColorTableParameteriv glBlendEquation glBlendColor
		    glHistogram glResetHistogram glGetHistogram glGetHistogramParameterfv glGetHistogramParameteriv glMinmax glResetMinmax
		    glGetMinmax glGetMinmaxParameterfv glGetMinmaxParameteriv glConvolutionFilter1D glConvolutionFilter2D glConvolutionParameterf
		    glConvolutionParameteri glCopyConvolutionFilter1D glCopyConvolutionFilter2D glSeparableFilter2D gluBeginPolygon gluBuild1DMipmaps
		    gluBuild2DMipmaps gluDeleteTess gluEndPolygon gluErrorString gluGetString gluGetTessProperty gluLookAt gluNewTess gluNextContour
		    gluOrtho2D gluPerspective gluPickMatrix gluProject gluScaleImage gluTessBeginContour gluTessBeginPolygon gluTessEndContour
		    gluTessEndPolygon gluTessNormal gluTessProperty gluTessVertex gluUnProject
		    )))

	      ;; ---------------- 1 Arg
	      (for-each 
	       (lambda (arg)
		 (for-each 
		  (lambda (n)
		    (catch #t
			   (lambda () (n arg))
			   (lambda args (car args))))
		  gl-procs))
	       (list (list 0 1) (sqrt -1.0)))
	      )

	    (let ((ind (open-sound "oboe.snd")))
	      (glXMakeCurrent (XtDisplay (cadr (main-widgets))) 
			      (XtWindow (car (channel-widgets)))
			      (snd-glx-context))
	      (glEnable GL_DEPTH_TEST)
	      (glDepthFunc GL_LEQUAL)
	      (glClearDepth 1.0)
	      (glClearColor 0.0 0.0 0.0 0.0)
	      (glLoadIdentity)
	      (gluPerspective 40.0 1.0 10.0 200.0)
	      (glTranslatef 0.0 0.0 -50.0)
	      (glRotatef -58.0 0.0 1.0 0.0)
	      (let ((vals (XtVaGetValues (car (channel-widgets)) (list XmNwidth 0 XmNheight 0))))
		(glViewport 0 0 (list-ref vals 1) (list-ref vals 3)))
	      (glClear (logior GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
	      (glBegin GL_POLYGON)
	      (glColor3f 0.0 0.0 0.0)   (glVertex3f -10.0 -10.0 0.0)
	      (glColor3f 0.7 0.7 0.7)   (glVertex3f 10.0 -10.0 0.0)
	      (glColor3f 1.0 1.0 1.0)   (glVertex3f -10.0 10.0 0.0)
	      (glEnd)
	      (glBegin GL_POLYGON)
	      (glColor3f 1.0 1.0 0.0)   (glVertex3f 0.0 -10.0 -10.0)
	      (glColor3f 0.0 1.0 0.7)   (glVertex3f 0.0 -10.0 10.0)
	      (glColor3f 0.0 0.0 1.0)   (glVertex3f 0.0 5.0 -10.0)
	      (glEnd)
	      (glBegin GL_POLYGON)
	      (glColor3f 1.0 1.0 0.0)   (glVertex3f -10.0 6.0 4.0)
	      (glColor3f 1.0 0.0 1.0)   (glVertex3f -10.0 3.0 4.0)
	      (glColor3f 0.0 0.0 1.0)   (glVertex3f 4.0 -9.0 -10.0)
	      (glColor3f 1.0 0.0 1.0)   (glVertex3f 4.0 -6.0 -10.0)
	      (glEnd)
	      (glXSwapBuffers (XtDisplay (cadr (main-widgets))) 
			      (XtWindow (car (channel-widgets))))
	      (glFlush)
	      (close-sound ind))

	    ))))


;;; ---------------- test 28: errors ----------------

(gc)
(mem-report)
(if (file-exists? "memlog")
    (system "mv memlog memlog.22")) ; save pre-error version
;;; regions exist here (etc) so it's not a cleaned-out state

(define (check-error-tag expected-tag thunk)
  (let ((tag
	 (catch #t 
		thunk
		(lambda args (car args)))))
    (if (not (eq? tag expected-tag))
	(snd-display ";check-error-tag ~A from ~A: ~A" 
			   expected-tag (procedure-source thunk) tag))))

(defvar env3 '(0 0 1 1))
(set! (with-background-processes) #t)

(if with-gui (begin
(define procs (list 
	       add-mark add-player add-sound-file-extension add-to-main-menu add-to-menu add-transform amp-control
	       as-one-edit ask-before-overwrite audio-input-device audio-output-device
	       auto-resize auto-update autocorrelate axis-info axis-label-font axis-numbers-font
	       backward-graph backward-mark backward-mix basic-color bind-key bold-button-font bomb
	       button-font c-g?  apply-controls change-menu-label change-samples-with-origin channel-style
	       channel-widgets channels chans peaks-font bold-peaks-font
	       close-sound ;close-sound-file 
	       color-cutoff color-dialog
	       color-inverted color-scale color->list colormap color?  comment contrast-control contrast-control-amp
	       contrast-control? vct-convolve! convolve-selection-with convolve-with channel-properties
	       auto-update-interval count-matches current-font cursor cursor-color cursor-follows-play cursor-size
	       cursor-style dac-combines-channels dac-size data-clipped data-color data-format data-location data-size
	       default-output-chans default-output-format default-output-srate default-output-type define-envelope
	       delete-mark delete-marks forget-region delete-sample delete-samples delete-samples-with-origin
	       delete-selection dialog-widgets display-edits dot-size draw-dot draw-dots draw-line
	       draw-lines draw-string edit-header-dialog edit-fragment edit-position edit-tree edits env-selection
	       env-sound enved-active-env enved-base enved-clip? enved-in-dB enved-dialog enved-exp? enved-power
	       enved-selected-env enved-target enved-waveform-color enved-wave? eps-file eps-left-margin emacs-style-save-as
	       eps-bottom-margin eps-size expand-control expand-control-hop expand-control-length expand-control-ramp
	       expand-control? fft fft-window-beta fft-log-frequency fft-log-magnitude transform-size disk-kspace
	       transform-graph-type fft-window transform-graph? file-dialog mix-file-dialog file-name fill-polygon
	       fill-rectangle filter-sound filter-control-in-dB filter-control-env enved-filter-order enved-filter
	       filter-env-in-hz filter-control-order filter-selection filter-waveform-color filter-control? find
	       find-mark find-sound finish-progress-report foreground-color forward-graph forward-mark forward-mix
	       frames free-mix-sample-reader free-sample-reader free-track-sample-reader graph
	       graph-color graph-cursor graph-data graph->ps graph-style lisp-graph?  graphs-horizontal header-type
	       help-dialog help-text-font highlight-color in insert-region insert-sample insert-samples
	       insert-samples-with-origin insert-selection insert-silence insert-sound just-sounds key key-binding
	       left-sample listener-color listener-font listener-prompt listener-selection listener-text-color load-font
	       main-widgets make-color make-graph-data make-mix-sample-reader make-player make-region
	       make-region-sample-reader make-sample-reader make-track-sample-reader map-chan mark-color mark-name
	       mark-sample mark-sync mark-sync-max mark-home marks mark?  max-transform-peaks max-regions
	       maxamp menu-sensitive menu-widgets minibuffer-history-length min-dB mix mixes mix-amp mix-amp-env
	       mix-anchor mix-chans mix-color mix-track mix-frames mix-locked mix-name mix? mix-panel mix-position
	       mix-region mix-sample-reader?  mix-selection mix-sound mix-home mix-speed mix-tag-height mix-tag-width
	       mix-tag-y mix-vct mix-waveform-height time-graph-style lisp-graph-style transform-graph-style
	       ;new-sound 
	       next-mix-sample read-mix-sample read-track-sample next-sample next-track-sample
	       transform-normalization equalize-panes open-raw-sound open-sound orientation-dialog
	       peak-env-info peaks play play-and-wait play-mix play-region play-selection play-track player?
	       position-color position->x position->y preload-directory preload-file previous-files-sort previous-sample
	       print-length progress-report prompt-in-minibuffer protect-region pushed-button-color read-only
	       recorder-in-device read-peak-env-info-file recorder-autoload recorder-buffer-size recorder-dialog
	       recorder-file recorder-gain recorder-in-amp recorder-in-format recorder-max-duration recorder-out-amp
	       recorder-out-chans recorder-out-format recorder-srate recorder-trigger redo region-chans region-dialog
	       region-graph-style region-frames region-maxamp selection-maxamp region-sample region-samples->vct
	       region-srate regions region?  remove-from-menu report-in-minibuffer reset-controls restore-controls
	       restore-marks restore-region reverb-control-decay reverb-control-feedback 
	       reverb-control-length reverb-control-lowpass reverb-control-scale reverb-control?  reverse-sound
	       reverse-selection revert-sound right-sample sample sample-reader-at-end?  sample-reader? samples sample-reader-position
	       samples->vct samples->sound-data sash-color save-controls ladspa-dir save-dir save-edit-history save-envelopes
	       save-listener save-macros save-marks save-options save-region save-selection save-sound save-sound-as
	       save-state save-state-file scale-by scale-selection-by scale-selection-to scale-to scale-sound-by
	       scale-sound-to scan-chan search-procedure select-all select-channel select-sound
	       selected-channel selected-data-color selected-graph-color selected-mix selected-mix-color selected-sound
	       selection-position selection-color selection-creates-region selection-frames selection-member? selection?
	       short-file-name show-axes show-backtrace show-controls show-transform-peaks show-indices show-listener
	       show-marks show-mix-waveforms show-selection-transform show-y-zero sinc-width
	       smooth-sound smooth-selection snd-print snd-spectrum snd-tempnam snd-version sound-files-in-directory
	       sound-loop-info sound-widgets soundfont-info sound? sounds spectro-cutoff spectro-hop spectro-start
	       spectro-x-angle spectro-x-scale spectro-y-angle spectro-y-scale spectro-z-angle spectro-z-scale
	       speed-control speed-control-style speed-control-tones squelch-update srate src-sound src-selection
	       start-playing start-progress-report stop-player stop-playing swap-channels syncd-marks sync sound-properties temp-dir
	       text-focus-color tiny-font track-sample-reader?  transform-dialog transform-sample
	       transform-samples->vct transform-samples-size transform-type trap-segfault optimization unbind-key undo
	       update-transform-graph update-time-graph update-lisp-graph update-sound
	       vct->samples vct->sound-file verbose-cursor view-sound vu-font vu-font-size vu-size wavelet-type
	       time-graph?  time-graph-type wavo-hop wavo-trace window-height window-width window-x window-y
	       with-mix-tags with-relative-panes with-gl write-peak-env-info-file x-axis-style 
	       beats-per-minute x-bounds x-position-slider x->position x-zoom-slider
	       y-bounds y-position-slider y->position y-zoom-slider zero-pad zoom-color zoom-focus-style
	       mus-sound-samples mus-sound-frames mus-sound-duration mus-sound-datum-size mus-sound-data-location data-size
	       mus-sound-chans mus-sound-srate mus-sound-header-type mus-sound-data-format mus-sound-length
	       mus-sound-type-specifier mus-header-type-name mus-data-format-name mus-sound-comment mus-sound-write-date
	       mus-data-format-bytes-per-sample mus-sound-loop-info mus-audio-report mus-audio-sun-outputs
	       mus-sound-maxamp mus-sound-maxamp-exists? mus-sound-open-input mus-sound-open-output
	       mus-sound-reopen-output mus-sound-close-input mus-sound-close-output mus-sound-read mus-sound-write
	       mus-sound-seek-frame mus-file-prescaler mus-file-data-clipped
	       mus-expand-filename make-sound-data sound-data-ref sound-data-set!  sound-data? sound-data-length
	       sound-data-maxamp sound-data-chans sound-data->vct vct->sound-data all-pass all-pass? amplitude-modulate
	       array->file array-interp asymmetric-fm asymmetric-fm?  buffer->frame buffer->sample buffer-empty? buffer?
	       clear-array comb comb? contrast-enhancement convolution convolve convolve? db->linear degrees->radians
	       delay delay? dot-product env env-interp env? file->array file->frame file->frame?  file->sample
	       file->sample?  filter filter? fir-filter fir-filter? formant formant-bank formant? frame* frame+
	       frame->buffer frame->file frame->file? frame->frame frame->list frame->sample frame-ref frame-set! frame?
	       granulate granulate? hz->radians iir-filter iir-filter?  in-any in-hz ina inb linear->db locsig
	       locsig-ref locsig-reverb-ref locsig-reverb-set! locsig-set!  locsig? make-all-pass make-asymmetric-fm
	       make-buffer make-comb make-convolve make-delay make-env make-fft-window make-file->frame
	       make-file->sample make-filter make-fir-filter make-formant make-frame make-frame->file make-granulate
	       make-iir-filter make-locsig move-locsig make-mixer make-notch make-one-pole make-one-zero make-oscil make-ppolar
	       make-pulse-train make-rand make-rand-interp make-readin make-sample->file make-sawtooth-wave
	       make-sine-summation make-square-wave make-src make-sum-of-cosines make-table-lookup make-triangle-wave
	       make-two-pole make-two-zero make-wave-train make-waveshape make-zpolar mixer* mixer-ref mixer-set! mixer?
	       multiply-arrays mus-a0 mus-a1 mus-a2 mus-array-print-length mus-b1 mus-b2 mus-x1 mus-x2 mus-y1 mus-y2 mus-channel mus-channels
	       mus-close mus-cosines mus-data mus-feedback mus-feedforward mus-fft mus-formant-radius mus-frequency
	       mus-hop mus-increment mus-input? mus-file-name mus-length mus-location mus-mix mus-order mus-output?  mus-phase
	       mus-ramp mus-random mus-scaler mus-srate mus-xcoeffs mus-ycoeffs notch notch? one-pole one-pole?
	       one-zero one-zero? oscil oscil-bank oscil? out-any outa outb outc outd partials->polynomial
	       partials->wave partials->waveshape phase-partials->wave polynomial pulse-train pulse-train?
	       radians->degrees radians->hz rand rand-interp rand-interp?  rand? readin readin?  rectangular->polar
	       restart-env ring-modulate sample->buffer sample->file sample->file? sample->frame sawtooth-wave
	       sawtooth-wave? sine-summation sine-summation? spectrum square-wave square-wave? src src? sum-of-cosines
	       sum-of-cosines? table-lookup table-lookup? tap triangle-wave triangle-wave? two-pole two-pole? two-zero
	       two-zero? wave-train wave-train?  waveshape waveshape?  make-vct vct-add! vct-subtract!  vct-copy
	       vct-length vct-multiply! vct-offset! vct-ref vct-scale! vct-fill! vct-set! mus-audio-describe vct-peak
	       vct? list->vct vct->list vector->vct vct->vector vct-move!  vct-subseq vct little-endian?
	       clm-channel env-channel map-channel scan-channel play-channel reverse-channel 
	       smooth-channel vct->channel channel->vct src-channel scale-channel ramp-channel pad-channel
	       cursor-position clear-listener mus-sound-prune mus-sound-forget xramp-channel ptree-channel

	       beats-per-minute buffer-full? channel-amp-envs convolve-files find-mix filter-control-coeffs 
	       locsig-type make-phase-vocoder mus-audio-mixer-read mus-bank 
	       mus-describe mus-inspect mus-error-to-string mus-file-buffer-size mus-name mus-offset mus-out-format
	       mus-position mus-rand-seed mus-width mus-x1 mus-x2 mus-y1 mus-y2 phase-vocoder?
	       polar->rectangular previous-files-sort-procedure 
	       pv-amp-increments pv-amps pv-freqs pv-outctr pv-phase-increments pv-phases 
               read-sample reset-listener-cursor sample-reader-home selection-chans selection-srate snd-gcs
	       snd-warning sum-of-sines vct-map

	       ))

(define set-procs (list 
		   amp-control ask-before-overwrite audio-input-device audio-output-device auto-resize
		   auto-update axis-label-font axis-numbers-font ;basic-color 
		   bold-button-font button-font channel-style peaks-font bold-peaks-font
		   color-cutoff color-inverted color-scale contrast-control contrast-control-amp
		   contrast-control? auto-update-interval current-font cursor cursor-color channel-properties
		   cursor-follows-play cursor-size cursor-style dac-combines-channels dac-size data-clipped data-color
		   default-output-chans default-output-format default-output-srate default-output-type dot-size
		   enved-active-env enved-base enved-clip? enved-in-dB enved-exp? enved-power enved-selected-env
		   enved-target enved-waveform-color enved-wave? eps-file eps-left-margin eps-bottom-margin eps-size
		   expand-control expand-control-hop expand-control-length expand-control-ramp expand-control?
		   fft-window-beta fft-log-frequency fft-log-magnitude transform-size transform-graph-type fft-window
		   transform-graph? filter-control-in-dB filter-control-env enved-filter-order enved-filter emacs-style-save-as
		   filter-env-in-hz filter-control-order filter-waveform-color filter-control?  foreground-color
		   graph-color graph-cursor graph-style lisp-graph? graphs-horizontal help-text-font highlight-color
		   just-sounds left-sample listener-color listener-font listener-prompt listener-text-color mark-color
		   mark-name mark-sample mark-sync max-transform-peaks max-regions menu-sensitive min-dB mix-amp
		   mix-amp-env mix-anchor mix-chans mix-color mix-track mix-frames mix-locked mix-name mix-position
		   mix-speed mix-tag-height mix-tag-width mix-tag-y mix-waveform-height transform-normalization
		   equalize-panes position-color recorder-in-device previous-files-sort print-length pushed-button-color
		   recorder-autoload recorder-buffer-size recorder-dialog recorder-file recorder-gain recorder-in-amp
		   recorder-in-format recorder-max-duration recorder-out-amp recorder-out-chans recorder-out-format
		   recorder-srate region-graph-style recorder-trigger reverb-control-decay reverb-control-feedback
		   reverb-control-length reverb-control-lowpass reverb-control-scale time-graph-style lisp-graph-style transform-graph-style
		   reverb-control? sash-color ladspa-dir save-dir save-state-file selected-data-color selected-graph-color
		   selected-mix-color selection-color selection-creates-region show-axes show-backtrace show-controls
		   show-transform-peaks show-indices show-marks show-mix-waveforms show-selection-transform show-listener
		   show-y-zero sinc-width spectro-cutoff spectro-hop spectro-start spectro-x-angle
		   spectro-x-scale spectro-y-angle spectro-y-scale spectro-z-angle spectro-z-scale speed-control
		   speed-control-style speed-control-tones squelch-update sync sound-properties temp-dir text-focus-color tiny-font y-bounds
		   transform-type trap-segfault optimization verbose-cursor vu-font vu-font-size vu-size wavelet-type x-bounds
		   time-graph? wavo-hop wavo-trace with-gl with-mix-tags x-axis-style beats-per-minute zero-pad zoom-color zoom-focus-style 
		   with-relative-panes  window-x window-y window-width window-height
		   channels chans colormap comment data-format data-location data-size edit-position frames header-type maxamp
		   minibuffer-history-length read-only right-sample sample samples selected-channel
		   selected-mix selected-sound selection-position selection-frames selection-member? sound-loop-info
		   srate time-graph-type x-position-slider x-zoom-slider
		   y-position-slider y-zoom-slider sound-data-ref mus-a0 mus-a1 mus-a2 mus-x1 mus-x2 mus-y1 mus-y2 mus-array-print-length 
		   mus-b1 mus-b2 mus-cosines mus-data mus-feedback mus-feedforward mus-formant-radius mus-frequency mus-hop
		   mus-increment mus-length mus-location mus-phase mus-ramp mus-scaler vct-ref

		   beats-per-minute filter-control-coeffs locsig-type mus-file-buffer-size 
		   mus-position mus-rand-seed mus-width mus-x1 mus-x2 mus-y1 mus-y2 
	           previous-files-sort-procedure pv-amp-increments pv-amps pv-freqs pv-outctr pv-phase-increments pv-phases 
		   ))

(define make-procs (list
               make-all-pass make-asymmetric-fm
	       make-buffer make-comb make-convolve make-delay make-env make-fft-window make-file->frame
	       make-file->sample make-filter make-fir-filter make-formant make-frame make-frame->file make-granulate
	       make-iir-filter make-locsig make-mixer make-notch make-one-pole make-one-zero make-oscil make-ppolar
	       make-pulse-train make-rand make-rand-interp make-readin make-sample->file make-sawtooth-wave
	       make-sine-summation make-square-wave make-src make-sum-of-cosines make-table-lookup make-triangle-wave
	       make-two-pole make-two-zero make-wave-train make-waveshape make-zpolar make-phase-vocoder))

(define keyargs
	 (list 
	  :frequency :initial-phase :wave :cosines :amplitude :ratio :size :a0 :a1 :a2 :b1 :b2 :input 
	  :srate :file :channel :start :initial-contents :initial-element :scaler :feedforward :feedback 
	  :max-size :radius :gain :partials :r :a :n :fill-time :order :xcoeffs :ycoeffs :envelope 
	  :base :duration :offset :end :direction :degree :distance :reverb :output :fft-size :expansion 
	  :length :hop :ramp :jitter :type :format :comment :channels :filter :revout :width :edit 
	  :synthesize :analyze :interp :overlap :pitch))

(define procs0 (remove-if (lambda (n) (or (not (procedure? n)) (not (arity-ok n 0)))) procs))
(define set-procs0 (remove-if (lambda (n) (or (not (procedure? n)) (not (set-arity-ok n 1)))) set-procs))
(define procs1 (remove-if (lambda (n) (or (not (procedure? n)) (not (arity-ok n 1)))) procs))
(define set-procs1 (remove-if (lambda (n) (or (not (procedure? n)) (not (set-arity-ok n 2)))) set-procs))
(define procs2 (remove-if (lambda (n) (or (not (procedure? n)) (not (arity-ok n 2)))) procs))
(define set-procs2 (remove-if (lambda (n) (or (not (procedure? n)) (not (set-arity-ok n 3)))) set-procs))
(define procs3 (remove-if (lambda (n) (or (not (procedure? n)) (not (arity-ok n 3)))) procs))
(define set-procs3 (remove-if (lambda (n) (or (not (procedure? n)) (not (set-arity-ok n 4)))) set-procs))
(define procs4 (remove-if (lambda (n) (or (not (procedure? n)) (not (arity-ok n 4)))) procs))
(define procs5 (remove-if (lambda (n) (or (not (procedure? n)) (not (arity-ok n 5)))) procs))
(define procs6 (remove-if (lambda (n) (or (not (procedure? n)) (not (arity-ok n 6)))) procs))
(define procs8 (remove-if (lambda (n) (or (not (procedure? n)) (not (arity-ok n 8)))) procs))
(define procs10 (remove-if (lambda (n) (or (not (procedure? n)) (not (arity-ok n 10)))) procs))

(reset-almost-all-hooks)

(if (or full-test (= snd-test 28) (and keep-going (<= snd-test 28)))
    (begin
      (if (procedure? test-hook)  (test-hook 28))

      (for-each (lambda (n)
		  (let ((tag
			 (catch #t
				(lambda ()
				  (n 123))
				(lambda args (car args)))))
		    (if (not (eq? tag 'no-such-sound))
			(snd-display ";snd no-such-sound ~A: ~A" n tag))))
		(list amp-control bomb apply-controls channels chans close-sound comment contrast-control
		      contrast-control-amp contrast-control? data-format data-location data-size expand-control expand-control-hop
		      expand-control-length expand-control-ramp expand-control? file-name filter-control-in-dB
		      filter-control-env filter-control-order filter-control?  finish-progress-report frames header-type
		      progress-report read-only reset-controls restore-controls reverb-control-decay reverb-control-feedback
		      reverb-control-length reverb-control-lowpass reverb-control-scale reverb-control? save-controls
		      select-sound short-file-name sound-loop-info soundfont-info speed-control speed-control-style
		      speed-control-tones srate channel-style start-progress-report sync sound-properties swap-channels))
      
      (for-each (lambda (arg)
		  (for-each (lambda (n)
			      (let ((tag
				     (catch #t
					    (lambda ()
					      (n arg))
					    (lambda args (car args)))))
				(if (not (eq? tag 'wrong-type-arg))
				    (snd-display ";snd wrong-type-arg ~A: ~A ~A" n tag arg))))
			    (list amp-control bomb apply-controls channels chans close-sound comment contrast-control
				  contrast-control-amp contrast-control? data-format data-location data-size expand-control
				  expand-control-hop expand-control-length expand-control-ramp expand-control? file-name
				  filter-control-in-dB filter-control-env filter-control-order filter-control?
				  finish-progress-report frames header-type read-only reset-controls restore-controls
				  reverb-control-decay reverb-control-feedback reverb-control-length reverb-control-lowpass
				  reverb-control-scale reverb-control? save-controls select-sound short-file-name
				  sound-loop-info soundfont-info speed-control speed-control-style speed-control-tones srate
				  channel-style start-progress-report sync sound-properties swap-channels)))
		(list (current-module) (sqrt -1.0) 1.5 "hiho"))

      (for-each (lambda (arg)
		  (let ((ctr 0))
		    (for-each (lambda (n)
				(let ((tag
				       (catch #t
					      (lambda ()
						(set! (n arg) 0))
					      (lambda args (car args)))))
				  (if (not (eq? tag 'wrong-type-arg))
				      (snd-display ";snd set wrong-type-arg ~D: ~A: ~A ~A" ctr n tag arg))
				  (set! ctr (+ ctr 1))))
			      (list amp-control channels chans comment contrast-control contrast-control-amp
				    contrast-control? data-format data-location data-size expand-control expand-control-hop
				    expand-control-length expand-control-ramp expand-control? filter-control-in-dB
				    filter-control-env filter-control-order filter-control? frames header-type read-only
				    reverb-control-decay reverb-control-feedback reverb-control-length reverb-control-lowpass
				    reverb-control-scale reverb-control? sound-loop-info soundfont-info speed-control
				    speed-control-style speed-control-tones srate channel-style sync))))
		(list (current-module) (sqrt -1.0) 1.5 "hiho"))

      (let ((index (open-sound "obtest.snd")))
	(for-each (lambda (arg)
		    (let ((ctr 0))
		      (for-each (lambda (n)
				  (let ((tag
					 (catch #t
						(lambda ()
						  (set! (n index) arg))
						(lambda args (car args)))))
				    (if (not (eq? tag 'wrong-type-arg))
					(snd-display ";snd safe set wrong-type-arg ~A: ~A ~A ~A" ctr n tag arg))
				    (set! ctr (+ ctr 1))))
			      (list amp-control contrast-control contrast-control-amp contrast-control?  expand-control
				    expand-control-hop expand-control-length expand-control-ramp expand-control?
				    filter-control-in-dB filter-control-env filter-control-order filter-control?
				    reverb-control-decay reverb-control-feedback reverb-control-length reverb-control-lowpass
				    reverb-control-scale reverb-control? speed-control speed-control-style speed-control-tones
				    channel-style sync))))
		  (list (current-module) (sqrt -1.0) "hiho"))
	(close-sound index))

      (for-each (lambda (arg)
		  (for-each (lambda (n)
			      (let ((tag
				     (catch #t
					    (lambda ()
					      (n arg))
					    (lambda args (car args)))))
				(if (not (eq? tag 'wrong-type-arg))
				    (snd-display ";vct 0 wrong-type-arg ~A: ~A ~A" n tag arg))))
			    (list make-vct vct-copy vct-length vct->list vct-peak)))
		(list (current-module) "hiho" (sqrt -1.0) 1.5 (list 1 0) '#(0 1)))

      (for-each (lambda (arg1)
		  (for-each (lambda (arg2)
			      (for-each (lambda (n)
					  (let ((tag
						 (catch #t
							(lambda ()
							  (n arg1 arg2))
							(lambda args (car args)))))
					    (if (not (or (eq? tag 'wrong-type-arg)
							 (eq? tag 'wrong-number-of-args)
							 (eq? tag 'mus-error)))
						(snd-display ";vct 1 wrong-whatever ~A: ~A ~A ~A" n tag arg1 arg2))))
					(list vct-add! vct-subtract! vct-multiply! vct-ref vct-scale! vct-fill! vct-map!)))
			    (list (current-module) "hiho" (sqrt -1.0) 1.5 (list 1 0) '#(0 1))))
		  (list (current-module) "hiho" (sqrt -1.0) 1.5 (list 1 0) '#(0 1)))

      (for-each (lambda (arg)
		  (for-each (lambda (n)
			      (let ((tag
				     (catch #t
					    (lambda ()
					      (n (make-vct 3) arg))
					    (lambda args (car args)))))
				(if (not (eq? tag 'wrong-type-arg))
				    (snd-display ";vct 2 wrong-type-arg ~A: ~A" n tag))))
			    (list vct-add! vct-subtract! vct-multiply! vct-ref vct-scale! vct-fill! vct-map!)))
		(list (current-module) "hiho" (sqrt -1.0) (list 1 0) '#(0 1)))

        (let ((tag
	       (catch #t
		      (lambda ()
			(make-vct -23))
		      (lambda args (car args)))))
	  (if (not (eq? tag 'out-of-range))
	      (snd-display ";make-vct -23: ~A" tag)))

        (let* ((v (make-vct 3)))
	  (let ((tag
		 (catch #t
			(lambda ()
			  (vct-ref v 12))
			(lambda args (car args)))))
	    (if (not (eq? tag 'out-of-range))
		     (snd-display ";vct[12]: ~A" tag))))

	(for-each (lambda (arg)
		    (for-each (lambda (n)
				(let ((tag
				       (catch #t
					      (lambda ()
						(n arg))
					      (lambda args (car args)))))
				  (if tag
				      (snd-display ";?proc ~A: ~A" n tag))))
			      (list all-pass? asymmetric-fm? buffer? comb? convolve? delay? env? file->frame? file->sample? 
				    filter? fir-filter? formant? frame->file? frame? granulate? iir-filter? locsig? mixer? mus-input? 
				    mus-output? notch? one-pole? one-zero? oscil? phase-vocoder? pulse-train? rand-interp? rand? readin? 
				    sample->file? sawtooth-wave? sine-summation? square-wave? src? sum-of-cosines? table-lookup? 
				    triangle-wave? two-pole? two-zero? wave-train? waveshape? color? mix-sample-reader? 
				    sample-reader? track-sample-reader? vct? )))
		(list (current-module) "hiho" (sqrt -1.0) 1.5 (list 1 0) '#(0 1)))
	(gc)

	(for-each (lambda (n)
		    (let ((tag
			   (catch #t
				  (lambda ()
				    (n (make-oscil 440)))
				  (lambda args (car args)))))
		      (if tag
			  (snd-display ";oscil?proc ~A: ~A" n tag))))
		  (list all-pass? asymmetric-fm? buffer? comb? convolve? delay? env? file->frame? file->sample? 
			filter? fir-filter? formant? frame->file? frame? granulate? iir-filter? locsig? mixer? mus-input? 
			mus-output? notch? one-pole? one-zero? phase-vocoder? pulse-train? rand-interp? rand? readin? 
			sample->file? sawtooth-wave? sine-summation? square-wave? src? sum-of-cosines? table-lookup? 
			triangle-wave? two-pole? two-zero? wave-train? waveshape? sound? color? mix-sample-reader? 
			sample-reader? track-sample-reader? vct?))

	(for-each (lambda (n)
		    (let ((tag
			   (catch #t
				  (lambda ()
				    (n))
				  (lambda args (car args)))))
		      (if (not (eq? tag 'no-active-selection))
			  (snd-display ";selection ~A: ~A" n tag))))
		  (list reverse-selection selection-position selection-frames smooth-selection
			scale-selection-to play-selection insert-selection delete-selection mix-selection))

	(for-each (lambda (n)
		    (let ((tag
			   (catch #t
				  (lambda ()
				    (n 0.0))
				  (lambda args (car args)))))
		      (if (not (eq? tag 'no-active-selection))
			  (snd-display ";selection ~A: ~A" n tag))))
		  (list src-selection filter-selection env-selection))

	(for-each (lambda (arg)
		    (let ((ctr 0))
		      (for-each (lambda (n)
				  (let ((tag
					 (catch #t
						(lambda ()
						  (n arg))
						(lambda args (car args)))))
				    (if (not (eq? tag 'wrong-type-arg))
					(snd-display ";clm ~A: ~A ~A [~A]: ~A" n tag arg ctr (procedure-property n 'documentation)))
				    (set! ctr (1+ ctr))))
			      (list all-pass asymmetric-fm buffer->sample clear-array comb convolve db->linear
				    degrees->radians delay env formant frame->list granulate hz->radians in-hz linear->db
				    make-all-pass make-asymmetric-fm make-buffer make-comb make-convolve make-delay make-env
				    make-file->frame make-file->sample make-filter make-fir-filter make-formant make-frame
				    make-granulate make-iir-filter make-locsig make-notch make-one-pole make-one-zero
				    make-oscil make-ppolar make-pulse-train make-rand make-rand-interp make-readin
				    make-sawtooth-wave make-sine-summation make-square-wave make-src make-sum-of-cosines
				    make-table-lookup make-triangle-wave make-two-pole make-two-zero make-wave-train
				    make-waveshape make-zpolar mus-a0 mus-a1 mus-a2 mus-b1 mus-b2 mus-x1 mus-x2 mus-y1 mus-y2 mus-channel mus-channels
				    mus-cosines mus-data mus-feedback mus-feedforward mus-formant-radius mus-frequency mus-hop
				    mus-increment mus-length mus-file-name mus-location mus-order mus-phase mus-ramp mus-random mus-run
				    mus-scaler mus-xcoeffs mus-ycoeffs notch one-pole one-zero
				    oscil partials->polynomial partials->wave partials->waveshape phase-partials->wave
				    phase-vocoder pulse-train radians->degrees radians->hz rand rand-interp readin restart-env
				    sawtooth-wave sine-summation square-wave src sum-of-cosines table-lookup tap triangle-wave
				    two-pole two-zero wave-train waveshape))))
		(list (current-module) (sqrt -1.0)))
	(gc)

	(for-each (lambda (n)
		    (let ((tag
			   (catch #t
				  (lambda ()
				    (n (make-oscil) (current-module)))
				  (lambda args (car args)))))
		      (if (not (or (eq? tag 'wrong-type-arg)
				   (eq? tag 'bad-arity)
				   (eq? tag 'mus-error)))
			  (snd-display ";clm ~A: ~A" n tag))))
		  (list all-pass array-interp asymmetric-fm comb contrast-enhancement convolution convolve
			convolve-files delay dot-product env-interp file->frame file->sample filter fir-filter formant
			formant-bank frame* frame+ frame->buffer frame->frame frame-ref frame->sample granulate iir-filter ina
			inb locsig-ref locsig-reverb-ref make-all-pass make-asymmetric-fm make-buffer make-comb make-convolve
			make-delay make-env make-fft-window make-filter make-fir-filter make-formant make-frame make-granulate
			make-iir-filter make-locsig make-notch make-one-pole make-one-zero make-oscil make-phase-vocoder
			make-ppolar make-pulse-train make-rand make-rand-interp make-readin make-sawtooth-wave
			make-sine-summation make-square-wave make-src make-sum-of-cosines make-table-lookup make-triangle-wave
			make-two-pole make-two-zero make-wave-train make-waveshape make-zpolar mixer* multiply-arrays mus-bank
			notch one-pole one-zero oscil oscil-bank partials->polynomial partials->wave partials->waveshape
			phase-partials->wave phase-vocoder polynomial pulse-train rand rand-interp rectangular->polar
			ring-modulate sample->buffer sample->frame sawtooth-wave sine-summation square-wave src sum-of-cosines
			sum-of-sines table-lookup tap triangle-wave two-pole two-zero wave-train waveshape ))

	(for-each (lambda (n)
		    (let ((tag
			   (catch #t
				  (lambda ()
				    (set! (n (make-oscil)) (current-module)))
				  (lambda args (car args)))))
		      (if (not (eq? tag 'wrong-type-arg))
			  (snd-display ";mus-gen ~A: ~A" n tag))))
		  (list mus-a0 mus-a1 mus-a2 mus-b1 mus-b2 mus-x1 mus-x2 mus-y1 mus-y2 mus-bank mus-channel mus-channels mus-cosines mus-data
			mus-feedback mus-feedforward mus-formant-radius mus-frequency mus-hop mus-increment mus-length
			mus-location mus-mix mus-order mus-phase mus-ramp mus-random mus-run mus-scaler mus-xcoeffs
			mus-ycoeffs))
	(gc)

	(for-each (lambda (n)
		    (let ((tag
			   (catch #t
				  (lambda ()
				    (n (current-module)))
				  (lambda args (car args)))))
		      (if (not (eq? tag 'wrong-type-arg))
			  (snd-display ";mus-sound ~A: ~A" n tag))))
		  (list mus-sound-samples mus-sound-frames mus-sound-duration mus-sound-datum-size
			mus-sound-data-location mus-sound-chans mus-sound-srate mus-sound-header-type mus-sound-data-format
			mus-sound-length mus-sound-type-specifier mus-header-type-name mus-data-format-name mus-sound-comment
			mus-sound-write-date mus-data-format-bytes-per-sample mus-sound-loop-info mus-sound-maxamp
			mus-sound-maxamp-exists?))

	(for-each (lambda (n)
		    (let ((tag
			   (catch #t
				  (lambda ()
				    (n))
				  (lambda args (car args)))))
		      (if (not (eq? tag 'wrong-number-of-args))
			  (snd-display ";no arg mus-sound ~A: ~A" n tag))))
		  (list mus-sound-samples mus-sound-frames mus-sound-duration mus-sound-datum-size
			mus-sound-data-location mus-sound-chans mus-sound-srate mus-sound-header-type mus-sound-data-format
			mus-sound-length mus-sound-type-specifier mus-header-type-name mus-data-format-name mus-sound-comment
			mus-sound-write-date mus-data-format-bytes-per-sample mus-sound-loop-info mus-sound-maxamp
			mus-sound-maxamp-exists?))

	(for-each (lambda (n)
		    (let ((tag
			   (catch #t
				  (lambda ()
				    (n "/bad/baddy"))
				  (lambda args (car args)))))
		      (if (not (eq? tag 'mus-error))
			  (snd-display ";bad file mus-sound ~A: ~A" n tag))))
		  (list mus-sound-samples mus-sound-frames mus-sound-duration mus-sound-datum-size
			mus-sound-data-location mus-sound-chans mus-sound-srate mus-sound-header-type mus-sound-data-format
			mus-sound-length mus-sound-type-specifier mus-sound-comment mus-sound-write-date mus-sound-maxamp
			mus-sound-maxamp-exists?))

	(let ((ctr 0))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (n (current-module)))
				    (lambda args (car args)))))
			(if (not (eq? tag 'wrong-type-arg))
			    (snd-display ";~D: chn (no snd) procs ~A: ~A" ctr n tag))
			(set! ctr (+ ctr 1))))
		    (list backward-graph channel-widgets count-matches cursor channel-properties
			  cursor-follows-play cursor-position cursor-size cursor-style delete-sample display-edits dot-size
			  draw-dots draw-lines edit-fragment edit-position edit-tree edits fft-window-beta fft-log-frequency
			  fft-log-magnitude transform-size transform-graph-type fft-window transform-graph? find forward-graph
			  forward-mark forward-mix graph graph-style lisp-graph? insert-region insert-sound
			  time-graph-style lisp-graph-style transform-graph-style
			  left-sample make-graph-data map-chan max-transform-peaks maxamp min-dB mix-region
			  transform-normalization peak-env-info peaks play play-and-wait position->x position->y reverse-sound
			  revert-sound right-sample sample samples->vct samples->sound-data save-sound save-sound-as scan-chan
			  select-channel show-axes show-transform-peaks show-marks show-mix-waveforms show-y-zero
			  spectro-cutoff spectro-hop spectro-start spectro-x-angle spectro-x-scale spectro-y-angle
			  spectro-y-scale spectro-z-angle spectro-z-scale squelch-update transform-sample
			  transform-samples->vct transform-samples-size transform-type update-transform-graph update-time-graph
			  update-lisp-graph update-sound wavelet-type time-graph? time-graph-type wavo-hop wavo-trace x-bounds
			  x-position-slider x-zoom-slider y-bounds y-position-slider y-zoom-slider zero-pad))
	  (gc))

	(let ((ctr 0))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (n 0 (current-module)))
				    (lambda args (car args)))))
			(if (not (eq? tag 'wrong-type-arg))
			    (snd-display ";~D: chn (no chn) procs ~A: ~A" ctr n tag))
			(set! ctr (+ ctr 1))))
		    (list backward-graph channel-widgets count-matches cursor channel-properties
			  cursor-position cursor-size cursor-style delete-sample display-edits dot-size draw-dots draw-lines
			  edit-fragment edit-position edit-tree edits fft-window-beta fft-log-frequency fft-log-magnitude
			  transform-size transform-graph-type fft-window transform-graph? find forward-graph forward-mark
			  forward-mix graph graph-style lisp-graph? insert-region insert-sound left-sample
			  time-graph-style lisp-graph-style transform-graph-style
			  make-graph-data map-chan max-transform-peaks maxamp min-dB mix-region transform-normalization
			  peak-env-info peaks play play-and-wait position->x position->y reverse-sound right-sample sample
			  samples->vct samples->sound-data save-sound-as scan-chan show-axes show-transform-peaks show-marks
			  show-mix-waveforms show-y-zero spectro-cutoff spectro-hop spectro-start spectro-x-angle
			  spectro-x-scale spectro-y-angle spectro-y-scale spectro-z-angle spectro-z-scale squelch-update
			  transform-sample transform-samples->vct transform-samples-size transform-type
			  update-transform-graph update-time-graph update-lisp-graph wavelet-type time-graph? time-graph-type
			  wavo-hop wavo-trace x-bounds x-position-slider x-zoom-slider y-bounds y-position-slider
			  y-zoom-slider zero-pad)))

        (let ((ctr 0))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (n 1234))
				    (lambda args (car args)))))
			(if (not (eq? tag 'no-such-sound))
			    (snd-display ";~D: chn procs ~A: ~A" ctr n tag))
			(set! ctr (+ ctr 1))))
		    (list backward-graph channel-widgets cursor cursor-follows-play channel-properties
			  cursor-position cursor-size cursor-style delete-sample display-edits dot-size edit-fragment
			  edit-position edit-tree edits env-sound fft-window-beta fft-log-frequency fft-log-magnitude
			  transform-size transform-graph-type fft-window transform-graph? filter-sound forward-graph
			  forward-mark forward-mix graph-data graph-style lisp-graph? insert-region left-sample
			  time-graph-style lisp-graph-style transform-graph-style
			  make-graph-data max-transform-peaks maxamp min-dB transform-normalization peak-env-info play
			  play-and-wait position->x position->y redo reverse-sound revert-sound right-sample sample
			  samples->vct samples->sound-data save-sound scale-by scale-to show-axes show-transform-peaks
			  show-marks show-mix-waveforms show-y-zero spectro-cutoff spectro-hop spectro-start spectro-x-angle
			  spectro-x-scale spectro-y-angle spectro-y-scale spectro-z-angle spectro-z-scale squelch-update
			  src-sound transform-sample transform-samples->vct scale-sound-by scale-sound-to
			  transform-samples-size transform-type undo update-transform-graph update-time-graph update-lisp-graph
			  update-sound wavelet-type time-graph? time-graph-type wavo-hop wavo-trace x-bounds x-position-slider
			  x->position x-zoom-slider y-bounds y-position-slider y->position y-zoom-slider zero-pad scale-channel)))

        (let ((ctr 0))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (n 0 1234))
				    (lambda args (car args)))))
			(if (not (eq? tag 'no-such-sound))
			    (snd-display ";~D: snd(1) chn procs ~A: ~A" ctr n tag))
			(set! ctr (+ ctr 1))))
		    (list backward-graph delete-sample edit-fragment forward-graph forward-mark
			  forward-mix graph-data graph-style play play-and-wait position->x position->y redo
			  time-graph-style lisp-graph-style transform-graph-style
			  scale-sound-by scale-sound-to scale-by scale-to undo x->position y->position)))

        (let ((ctr 0)
	      (index (open-sound "oboe.snd")))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (n 0 index 1234))
				    (lambda args (car args)))))
			(if (not (eq? tag 'no-such-channel))
			    (snd-display ";~D: snd(1 1234) chn procs ~A: ~A" ctr n tag))
			(set! ctr (+ ctr 1))))
		    (list backward-graph delete-sample edit-fragment forward-graph forward-mark
			  forward-mix graph-data play play-and-wait position->x position->y redo scale-by
			  scale-to undo x->position y->position))
	  (close-sound index))

        (let ((ctr 0)
	      (index (open-sound "oboe.snd")))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (n index 1234))
				    (lambda args (car args)))))
			(if (not (eq? tag 'no-such-channel))
			    (snd-display ";~D: chn procs ~A: ~A" ctr n tag))
			(set! ctr (+ ctr 1))))
		    (list channel-widgets cursor cursor-position cursor-size cursor-style display-edits
			  dot-size edit-position edit-tree edits fft-window-beta fft-log-frequency fft-log-magnitude
			  transform-size transform-graph-type fft-window transform-graph? graph-style lisp-graph? left-sample
			  time-graph-style lisp-graph-style transform-graph-style
			  make-graph-data max-transform-peaks maxamp min-dB transform-normalization peak-env-info
			  reverse-sound right-sample show-axes show-transform-peaks show-marks show-mix-waveforms show-y-zero
			  spectro-cutoff spectro-hop spectro-start spectro-x-angle spectro-x-scale spectro-y-angle
			  spectro-y-scale spectro-z-angle spectro-z-scale squelch-update transform-samples->vct
			  transform-samples-size transform-type update-transform-graph update-time-graph update-lisp-graph
			  wavelet-type time-graph?  time-graph-type wavo-hop wavo-trace x-bounds x-position-slider
			  x-zoom-slider y-bounds y-position-slider y-zoom-slider zero-pad channel-properties))
	  (close-sound index))

        (let ((ctr 0)
	      (index (open-sound "oboe.snd")))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (set! (n index 0) (current-module)))
				    (lambda args (car args)))))
			(if (not (eq? tag 'wrong-type-arg))
			    (snd-display ";~D: set chn procs ~A: ~A" ctr n tag))
			(set! ctr (+ ctr 1))))
		    (list channel-widgets cursor cursor-position display-edits dot-size edit-tree edits
			  fft-window-beta fft-log-frequency fft-log-magnitude transform-size transform-graph-type fft-window
			  transform-graph? graph-style lisp-graph? left-sample make-graph-data max-transform-peaks maxamp
			  time-graph-style lisp-graph-style transform-graph-style
			  min-dB transform-normalization peak-env-info reverse-sound right-sample show-axes 
			  show-transform-peaks show-marks show-mix-waveforms show-y-zero spectro-cutoff spectro-hop
			  spectro-start spectro-x-angle spectro-x-scale spectro-y-angle spectro-y-scale spectro-z-angle
			  spectro-z-scale squelch-update transform-samples->vct transform-samples-size transform-type
			  update-transform-graph update-time-graph update-lisp-graph wavelet-type time-graph? time-graph-type
			  wavo-hop wavo-trace x-bounds x-position-slider x-zoom-slider y-bounds y-position-slider
			  y-zoom-slider zero-pad
			  ))
	  (gc)
	  (close-sound index))

        (let ((ctr 0))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (n (current-module)))
				    (lambda args (car args)))))
			(if (not (eq? tag 'wrong-type-arg))
			    (snd-display ";~D: mix procs ~A: ~A" ctr n tag))
			(set! ctr (+ ctr 1))))
		    (list backward-mix mix-amp mix-amp-env mix-anchor mix-chans mix-track mix-frames mix-locked mix-name
			  mix-position mix-home mix-speed mix-tag-y))) 

        (let ((ctr 0))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (n 1234))
				    (lambda args (car args)))))
			(if (not (eq? tag 'no-such-mix))
			    (snd-display ";~D: mix procs ~A: ~A" ctr n tag))
			(set! ctr (+ ctr 1))))
		    (list mix-amp mix-anchor mix-chans mix-track mix-frames mix-locked mix-name
			  mix-position mix-home mix-speed mix-tag-y)))

        (let ((ctr 0))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (set! (n 1234) (current-module)))
				    (lambda args (car args)))))
			(if (not (eq? tag 'wrong-type-arg))
			    (snd-display ";~D: mix procs ~A: ~A" ctr n tag))
			(set! ctr (+ ctr 1))))
		    (list mix-anchor mix-chans mix-track mix-frames mix-locked mix-name
			  mix-position mix-home mix-speed mix-tag-y))) 

        (let* ((ctr 0)
	       (index (open-sound "oboe.snd"))
	       (id (mix-sound "oboe.snd" 10)))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (set! (n id) (current-module)))
				    (lambda args (car args)))))
			(if (not (eq? tag 'wrong-type-arg))
			    (snd-display ";~D: mix procs ~A: ~A" ctr n tag))
			(set! ctr (+ ctr 1))))
		    (list mix-anchor mix-chans mix-track mix-frames mix-locked mix-name
			  mix-position mix-home mix-speed mix-tag-y))
	  (close-sound index))

        (let ((ctr 0))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (n (current-module)))
				    (lambda args (car args)))))
			(if (not (eq? tag 'wrong-type-arg))
			    (snd-display ";~D: mark procs ~A: ~A" ctr n tag))
			(set! ctr (+ ctr 1))))
		    (list add-mark backward-mark mark-name mark-sample mark-sync mark-home delete-mark delete-marks find-mark))) 

        (let ((ctr 0))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (n 1234))
				    (lambda args (car args)))))
			(if (not (eq? tag 'no-such-mark))
			    (snd-display ";~D: no mark procs ~A: ~A" ctr n tag))
			(set! ctr (+ ctr 1))))
		    (list mark-name mark-sample mark-sync mark-home delete-mark))) 

        (let* ((ctr 0)
	       (index (open-sound "oboe.snd"))
	       (id (add-mark 0 index 0)))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (set! (n id) (current-module)))
				    (lambda args (car args)))))
			(if (not (eq? tag 'wrong-type-arg))
			    (snd-display ";~D: set mark procs ~A: ~A" ctr n tag))
			(set! ctr (+ ctr 1))))
		    (list mark-name mark-sample mark-sync))
	  (close-sound index)
	  (gc))

	(for-each (lambda (arg)
		    (let ((ctr 0))
		      (for-each (lambda (n)
				  (let ((tag
					 (catch #t
						(lambda ()
						  (n arg))
						(lambda args (car args)))))
				    (if (not (eq? tag 'wrong-type-arg))
					(snd-display ";~D: region procs ~A: ~A ~A" ctr n tag arg))
				    (set! ctr (+ ctr 1))))
				(list play-region region-chans region-frames region-maxamp region-sample 
				      region-samples->vct region-srate forget-region))))
		  (list (current-module) '#(0 1) (sqrt -1.0) "hiho" (list 0 1)))

        (let ((ctr 0))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (n 1234))
				    (lambda args (car args)))))
			(if (not (eq? tag 'no-such-region))
			    (snd-display ";~D: (no) region procs ~A: ~A" ctr n tag))
			(set! ctr (+ ctr 1))))
		    (list play-region region-chans region-frames region-maxamp region-srate forget-region))) 

        (let ((ctr 0))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (set! (n) (current-module)))
				    (lambda args (car args)))))
			(if (not (eq? tag 'wrong-type-arg))
			    (snd-display ";~D: misc procs ~A: ~A" ctr n tag))
			(set! ctr (+ ctr 1))))
		    (list enved-filter-order enved-filter filter-env-in-hz filter-waveform-color ask-before-overwrite
			  auto-resize auto-update axis-label-font axis-numbers-font basic-color bind-key
			  bold-button-font button-font channel-style color-cutoff color-dialog color-inverted color-scale
			  cursor-color dac-combines-channels dac-size data-clipped data-color default-output-chans emacs-style-save-as
			  default-output-format default-output-srate default-output-type enved-active-env enved-base
			  enved-clip? enved-in-dB enved-dialog enved-exp?  enved-power enved-selected-env enved-target
			  enved-waveform-color enved-wave? eps-file eps-left-margin eps-bottom-margin eps-size
			  foreground-color graph-color graph-cursor help-text-font highlight-color just-sounds key-binding
			  listener-color listener-font listener-prompt listener-text-color max-regions
			  minibuffer-history-length mix-waveform-height region-graph-style position-color
			  time-graph-style lisp-graph-style transform-graph-style peaks-font bold-peaks-font
			  previous-files-sort print-length pushed-button-color recorder-in-device recorder-autoload
			  recorder-buffer-size recorder-file recorder-in-format recorder-max-duration recorder-out-chans
			  recorder-out-format recorder-srate recorder-trigger sash-color ladspa-dir save-dir save-state-file
			  selected-channel selected-data-color selected-graph-color selected-mix selected-mix-color
			  selected-sound selection-creates-region show-backtrace show-controls show-indices show-listener
			  show-selection-transform sinc-width temp-dir text-focus-color tiny-font
			  trap-segfault optimization unbind-key verbose-cursor vu-font vu-font-size vu-size window-height
			  window-width window-x window-y with-gl with-mix-tags x-axis-style beats-per-minute zoom-color zoom-focus-style mix-tag-height
			  mix-tag-width with-relative-panes))
	  (gc))

	(for-each (lambda (n)
		    (let* ((hook (car n))
			   (hook-name (cadr n))
			   (tag
			    (catch #t
				   (lambda () (add-hook! hook (lambda () (+ 1 2))))
				   (lambda args (car args)))))
		      (if (not (eq? tag 'wrong-type-arg))
			  (snd-display ";hooks ~A: ~A" hook-name tag))))
		  (list (list after-graph-hook 'after-graph-hook)
			(list lisp-graph-hook 'lisp-graph-hook)
			(list before-transform-hook 'before-transform-hook)
			(list mix-position-changed-hook 'mix-position-changed-hook)
			(list stop-playing-channel-hook 'stop-playing-channel-hook)
			(list save-hook 'save-hook)
			(list save-state-hook 'save-state-hook)
			(list new-sound-hook 'new-sound-hook)
			(list mus-error-hook 'mus-error-hook)
			(list mouse-enter-graph-hook 'mouse-enter-graph-hook)
			(list mouse-leave-graph-hook 'mouse-leave-graph-hook)
			(list open-raw-sound-hook 'open-raw-sound-hook)
			(list select-channel-hook 'select-channel-hook)
			(list after-open-hook 'after-open-hook)
			(list close-hook 'close-hook)
			(list draw-mark-hook 'draw-mark-hook)
			(list just-sounds-hook 'just-sounds-hook)
			(list mark-click-hook 'mark-click-hook)
			(list listener-click-hook 'listener-click-hook)
			(list mix-click-hook 'mix-click-hook)
			(list after-save-state-hook 'after-save-state-hook)
			(list mark-hook 'mark-hook)
			(list mark-drag-hook 'mark-drag-hook)
			(list mix-drag-hook 'mix-drag-hook)
			(list mix-amp-changed-hook 'mix-amp-changed-hook)
			(list mix-speed-changed-hook 'mix-speed-changed-hook)
			(list name-click-hook 'name-click-hook)
			(list before-apply-hook 'before-apply-hook)
			(list after-apply-hook 'after-apply-hook)
			(list open-hook 'open-hook)
			(list output-comment-hook 'output-comment-hook)
			(list help-hook 'help-hook)
			(list multichannel-mix-hook 'multichannel-mix-hook)
			(list play-hook 'play-hook)
			(list dac-hook 'dac-hook)
			(list new-widget-hook 'new-widget-hook)
			(list read-hook 'read-hook)
			(list bad-header-hook 'bad-header-hook)
			(list snd-error-hook 'snd-error-hook)
			(list snd-warning-hook 'snd-warning-hook)
			(list start-hook 'start-hook)
			(list start-playing-hook 'start-playing-hook)
			(list stop-playing-hook 'stop-playing-hook)
			(list stop-playing-region-hook 'stop-playing-region-hook)
			(list mouse-enter-listener-hook 'mouse-enter-listener-hook)
			(list mouse-leave-listener-hook 'mouse-leave-listener-hook)
			(list window-property-changed-hook 'window-property-changed-hook)
			(list select-sound-hook 'select-sound-hook)
			(list select-mix-hook 'select-mix-hook)
			(list previous-files-select-hook 'previous-files-select-hook)
			(list during-open-hook 'during-open-hook)
			(list transform-hook 'transform-hook)
			(list mouse-enter-label-hook 'mouse-enter-label-hook)
			(list mouse-leave-label-hook 'mouse-leave-label-hook)
			(list initial-graph-hook 'initial-graph-hook)
			(list graph-hook 'graph-hook)
			(list key-press-hook 'key-press-hook)
			(list mouse-drag-hook 'mouse-drag-hook)
			(list mouse-press-hook 'mouse-press-hook)
			(list mouse-click-hook 'mouse-click-hook)
			(list mouse-release-hook 'mouse-release-hook)
			(list enved-hook 'enved-hook)))

	(check-error-tag 'no-such-envelope (lambda () (set! (enved-active-env) "not-an-env")))
	(check-error-tag 'no-such-envelope (lambda () (set! (enved-selected-env) "not-an-env")))
	(check-error-tag 'cannot-save (lambda () (save-envelopes "/bad/baddy")))
	(check-error-tag 'bad-arity (lambda () (set! (search-procedure) (lambda (a b c) a))))
	(check-error-tag 'no-such-sound (lambda () (set! (search-procedure 1234) (lambda (a) a))))
	(check-error-tag 'no-such-channel (lambda () (make-sample-reader 0 "oboe.snd" 1)))
	(check-error-tag 'no-such-channel (lambda () (make-sample-reader 0 "oboe.snd" -1)))
	(check-error-tag 'bad-arity (lambda () (bind-key (char->integer #\p) 0 (lambda (a b) (play-often (max 1 a))))))
	(check-error-tag 'bad-type (lambda () (mus-mix "oboe.snd" "pistol.snd" 0 12 0 (make-mixer 1 1.0) (make-vector 0))))
	(check-error-tag 'no-such-sound (lambda () (set! (sound-loop-info 123) '(0 0 1 1))))
	(check-error-tag 'mus-error (lambda () (new-sound "fmv.snd" mus-nist mus-bfloat 22050 2 "this is a comment")))
	(check-error-tag 'no-such-player (lambda () (player-home 123)))
	(check-error-tag 'no-such-file (lambda () (set! (temp-dir) "/hiho")))
	(check-error-tag 'no-such-file (lambda () (set! (save-dir) "/hiho")))
	(check-error-tag 'out-of-range (lambda () (snd-transform 20 (make-vct 4))))
	(check-error-tag 'no-such-menu (lambda () (change-menu-label 443 "hi" "ho")))
	(check-error-tag 'no-such-file (lambda () (close-sound-file 23 3)))
	(check-error-tag 'bad-header (lambda () (mus-sound-maxamp (string-append sf-dir "bad_chans.snd"))))
	(check-error-tag 'bad-header (lambda () (set! (mus-sound-maxamp (string-append sf-dir "bad_chans.snd")) '(0.0 0.0))))
	(check-error-tag 'no-such-sound (lambda () (restore-marks 123 123 123 '())))
	(check-error-tag 'mus-error (lambda () (play (string-append sf-dir "midi60.mid"))))
	(if (provided? 'snd-motif)
	    (begin
	      (check-error-tag 'no-such-widget (lambda () (widget-position (list 'Widget 0)))) ; dubious -- not sure these should be supported
	      (check-error-tag 'no-such-widget (lambda () (widget-size (list 'Widget 0))))
	      (check-error-tag 'no-such-widget (lambda () (widget-text (list 'Widget 0))))
	      (check-error-tag 'no-such-widget (lambda () (set! (widget-position (list 'Widget 0)) (list 0 0))))
	      (check-error-tag 'no-such-widget (lambda () (set! (widget-size (list 'Widget 0)) (list 10 10))))
	      (check-error-tag 'no-such-widget (lambda () (set! (widget-text (list 'Widget 0)) "hiho")))
	      (check-error-tag 'no-such-widget (lambda () (recolor-widget (list 'Widget 0) (make-color 1 0 0))))))
	(check-error-tag 'no-such-menu (lambda () (main-menu -1)))
	(check-error-tag 'no-such-menu (lambda () (main-menu 111)))
	(check-error-tag 'no-such-menu (lambda () (change-menu-label -1 "hiho" "hhoo")))
	(check-error-tag 'mus-error (lambda () (vct-map (lambda () 1.0))))
	(check-error-tag 'out-of-range (lambda () (new-sound "hiho" 123)))
	(check-error-tag 'out-of-range (lambda () (new-sound "hiho" mus-nist 123)))
	(check-error-tag 'mus-error (lambda () (new-sound "hiho" mus-nist mus-bfloat)))
	(check-error-tag 'out-of-range (lambda () (make-sound-data 0 1)))
	(check-error-tag 'out-of-range (lambda () (make-sound-data -2 1)))
	(check-error-tag 'out-of-range (lambda () (make-sound-data 1 -1)))
	(check-error-tag 'out-of-range (lambda () (make-sound-data 1 0)))
	(check-error-tag 'out-of-range (lambda () (mus-sound-close-output 0 1)))
	(check-error-tag 'out-of-range (lambda () (mus-sound-close-output 1 1)))
	(check-error-tag 'out-of-range (lambda () (mus-sound-close-output 2 1)))
	(check-error-tag 'out-of-range (lambda () (mus-sound-close-input 0)))
	(check-error-tag 'out-of-range (lambda () (mus-sound-close-input 1)))
	(check-error-tag 'out-of-range (lambda () (mus-sound-close-input 2)))
	(check-error-tag 'wrong-type-arg (lambda () (vector->vct (make-vector 3 "hio"))))
	(check-error-tag 'wrong-type-arg (lambda () (vct (list #f))))
	(check-error-tag 'out-of-range (lambda () (make-color 1.5 0.0 0.0)))
	(check-error-tag 'out-of-range (lambda () (make-color -0.5 0.0 0.0)))
	(check-error-tag 'cannot-print (lambda () (graph->ps)))
	(let ((ind (open-sound "oboe.snd"))) 
	  (select-all)
	  (check-error-tag 'mus-error (lambda () (filter-sound (make-frame 4))))
	  (check-error-tag 'wrong-type-arg (lambda () (smooth-sound 0 -10)))
	  (check-error-tag 'out-of-range (lambda () (let ((hi (make-sound-data 1 10))) (samples->sound-data 0 8 #f #f hi #f 2))))
	  (check-error-tag 'cannot-save (lambda () (write-peak-env-info-file ind 0 "/baddy/hi")))
	  (check-error-tag 'bad-arity (lambda () (ptree-channel (lambda (a b c) #f) 0 10 #f #f #f #f (lambda (a) #f))))
	  (check-error-tag 'bad-arity (lambda () (ptree-channel (lambda (a) #f) 0 10 #f #f #f #f (lambda (a b) #f))))
	  (check-error-tag 'no-such-channel (lambda () (mix-selection 0 ind 123)))
	  (check-error-tag 'no-such-channel (lambda () (insert-selection 0 ind 123)))
	  (check-error-tag 'out-of-range (lambda () (set! (channels ind) 0)))
	  (check-error-tag 'out-of-range (lambda () (set! (channels ind) -1)))
	  (check-error-tag 'out-of-range (lambda () (set! (channels ind) 12340)))
	  (check-error-tag 'out-of-range (lambda () (set! (data-format ind) 12340)))
	  (check-error-tag 'out-of-range (lambda () (set! (header-type ind) 12340)))
	  (check-error-tag 'out-of-range (lambda () (set! (srate ind) 0)))
	  (check-error-tag 'out-of-range (lambda () (set! (data-location ind) -1)))
	  (check-error-tag 'out-of-range (lambda () (set! (data-size ind) -1)))
	  (check-error-tag 'no-such-sample (lambda () (set! (sample -1) -1)))
	  (check-error-tag 'no-such-sample (lambda () (sample -1)))
	  (check-error-tag 'out-of-range (lambda () (set! (frames) -10)))
	  (check-error-tag 'out-of-range (lambda () (set! (min-dB) 0.0)))
	  (check-error-tag 'out-of-range (lambda () (set! (min-dB ind 0) 0.0)))
	  (check-error-tag 'out-of-range (lambda () (start-playing 1 -22)))
	  (check-error-tag 'out-of-range (lambda () (start-playing 1 0)))
	  (check-error-tag 'out-of-range (lambda () (set! (filter-control-env ind) (list 0.0 1.0 0.1 -0.1 1.0 0.0))))
	  (check-error-tag 'out-of-range (lambda () (set! (filter-control-env ind) (list 0.0 1.0 0.1 1.1 1.0 0.0))))
	  (check-error-tag 'out-of-range (lambda () (apply-controls ind 123)))
	  (check-error-tag 'out-of-range (lambda () (vct->sound-file 123 (make-vct 3) 4)))
	  (check-error-tag 'out-of-range (lambda () (vct->sound-file 123 (make-vct 3) -4)))
	  (check-error-tag 'mus-error (lambda () (vct->sound-file 123 (make-vct 3) 2)))
	  (check-error-tag 'bad-header (lambda () (insert-sound (string-append sf-dir "bad_chans.snd"))))
	  (check-error-tag 'mus-error (lambda () (convolve-with (string-append sf-dir "bad_chans.snd"))))
	  (check-error-tag 'cannot-save (lambda () (save-sound-as "hiho.snd" ind -1)))
	  (check-error-tag 'cannot-save (lambda () (save-sound-as "hiho.snd" ind mus-next -1)))
	  (check-error-tag 'cannot-save (lambda () (save-sound-as "test.snd" ind mus-nist mus-bdouble)))
	  (check-error-tag 'cannot-save (lambda () (save-sound-as "test.snd" ind mus-aifc mus-lfloat)))
	  (check-error-tag 'cannot-save (lambda () (save-sound-as "test.snd" ind mus-riff mus-bshort)))
	  (check-error-tag 'cannot-save (lambda () (save-sound-as "test.snd" ind mus-voc mus-bshort)))
	  (check-error-tag 'cannot-save (lambda () (save-selection "test.snd" mus-riff mus-bshort)))
	  (check-error-tag 'cannot-save (lambda () (save-selection "test.snd" mus-voc mus-bshort)))
	  (check-error-tag 'no-data (lambda () (draw-lines '#())))
	  (check-error-tag 'out-of-range (lambda () (src-channel (make-env '(0 0 1 1) :end 10))))
	  (check-error-tag 'out-of-range (lambda () (src-channel (make-env '(0 1 1 0) :end 10))))
	  (check-error-tag 'out-of-range (lambda () (src-channel (make-env '(0 1 1 -1) :end 10))))
	  (check-error-tag 'out-of-range (lambda () (src-channel (make-env '(0 -1 1 1) :end 10))))
	  (check-error-tag 'out-of-range (lambda () (src-sound (make-env '(0 0 1 1) :end 10))))
	  (check-error-tag 'out-of-range (lambda () (src-sound (make-env '(0 1 1 0) :end 10))))
	  (check-error-tag 'out-of-range (lambda () (src-sound (make-env '(0 1 1 -1) :end 10))))
	  (check-error-tag 'out-of-range (lambda () (src-sound (make-env '(0 -1 1 1) :end 10))))
	  (check-error-tag 'mus-error (lambda () (make-readin 0.0 0.0 0.0 0.0 0.0 0.0 0.0)))
	  (check-error-tag 'out-of-range (lambda () (filter-sound (make-vct 3) 32)))
	  (check-error-tag 'out-of-range (lambda () (filter-sound '(0 0 1 1) 0)))
	  (check-error-tag 'no-such-sound (lambda () (swap-channels ind 0 12345 0)))
	  (check-error-tag 'no-such-sample (lambda () (scan-channel (lambda (n) #f) (* (frames) 2))))
	  (check-error-tag 'no-such-sample (lambda () (map-channel (lambda (n) #f) (* (frames) 2))))
	  (check-error-tag 'no-such-sample (lambda () (mix-vct (vct 0.1 0.2 0.3) -1 ind 0 #t)))
	  (check-error-tag 'out-of-range (lambda () (snd-spectrum (make-vct 8) 0 -123)))
	  (check-error-tag 'out-of-range (lambda () (snd-spectrum (make-vct 8) 0 0)))
	  (check-error-tag 'no-such-file (lambda () (play "/baddy/hiho")))
	  (check-error-tag 'mus-error (lambda () (play (string-append sf-dir "nist-shortpack.wav"))))
	  (check-error-tag 'no-such-channel (lambda () (play 0 ind 123)))
	  (check-error-tag 'no-such-channel (lambda () (make-player ind 123)))
	  (check-error-tag 'no-such-file (lambda () (mix "/baddy/hiho")))
	  (check-error-tag 'no-such-channel (lambda () (mix "oboe.snd" 0 2)))
	  (check-error-tag 'no-such-file (lambda () (mix-sound "/baddy/hiho" 0)))
	  (check-error-tag 'no-data (lambda () (set! (filter-control-env ind) '())))
	  (check-error-tag 'out-of-range (lambda () (set! (data-format ind) 123)))
	  (check-error-tag 'out-of-range (lambda () (set! (header-type ind) 123)))
	  (check-error-tag 'no-such-channel (lambda () (set! (selected-channel ind) 123)))
	  (check-error-tag 'bad-arity (lambda () (set! (search-procedure ind) (lambda (a b c) #t))))
	  (check-error-tag 'bad-arity (lambda () (map-chan (lambda (a b c) 1.0))))
	  (check-error-tag 'bad-arity (lambda () (scan-chan (lambda (a b c) 1.0))))
	  (check-error-tag 'bad-arity (lambda () (set! (cursor-style ind 0) (lambda (a) 32))))
	  (check-error-tag 'bad-arity (lambda () (find (lambda () 1.0))))
	  (check-error-tag 'bad-arity (lambda () (count-matches (lambda () 1.0))))
	  (check-error-tag 'no-such-graphics-context (lambda () (draw-line 0 0 1 1 ind 0 1234)))
	  (check-error-tag 'no-such-graphics-context (lambda () (foreground-color ind 0 1234)))
	  (check-error-tag 'no-such-graphics-context (lambda () (current-font ind 0 1234)))
	  (check-error-tag 'no-such-graphics-context (lambda () (graph-data (list (make-vct 3) (make-vct 3)) ind 0 1234 0 1 0)))
	  (check-error-tag 'no-such-axis (lambda () (position->x 100 ind 0 1234)))
	  (check-error-tag 'no-such-axis (lambda () (position->y 100 ind 0 1234)))
	  (check-error-tag 'no-such-axis (lambda () (x->position 100 ind 0 1234)))
	  (check-error-tag 'no-such-axis (lambda () (y->position 100 ind 0 1234)))
	  (check-error-tag 'no-such-axis (lambda () (axis-info ind 0 1234)))
	  (check-error-tag 'no-such-channel (lambda () (axis-info ind 1234)))
	  (check-error-tag 'no-such-sound (lambda () (axis-info 1234)))
	  (check-error-tag 'out-of-range (lambda () (set! (x-bounds) (list 0 0))))
	  (check-error-tag 'out-of-range (lambda () (set! (x-bounds) (list .1 -.1))))
	  (check-error-tag 'out-of-range (lambda () (set! (y-bounds) (list .2 .1))))
	  (check-error-tag 'out-of-range (lambda () (make-region 100 0)))
	  (check-error-tag 'no-such-sample (lambda () (delete-sample -1)))
	  (check-error-tag 'no-such-sample (lambda () (delete-sample (* 2 (frames ind)))))
	  (check-error-tag 'no-such-file (lambda () (play "/bad/baddy.snd")))
	  (check-error-tag 'no-such-sound (lambda () (play 0 1234)))
	  (check-error-tag 'no-such-channel (lambda () (play 0 ind 1234)))
	  (check-error-tag 'no-such-channel (lambda () (region-sample 0 (car (regions)) 1234)))
	  (check-error-tag 'no-such-region (lambda () (region-samples->vct 0 1 -1)))
	  (check-error-tag 'no-such-channel (lambda () (region-samples->vct 0 1 (car (regions)) 1234)))
	  (check-error-tag 'cannot-save (lambda () (save-sound-as "/bad/baddy.snd")))
	  (check-error-tag 'no-such-sound (lambda () (transform-sample 0 1 1234)))
	  (check-error-tag 'no-such-channel (lambda () (transform-sample 0 1 ind 1234)))
	  (check-error-tag 'no-such-sound (lambda () (samples->vct 0 100 1234)))
	  (check-error-tag 'no-such-channel (lambda () (samples->vct 0 100 ind 1234)))
	  (check-error-tag 'no-such-sound (lambda () (samples->sound-data 0 100 1234)))
	  (check-error-tag 'no-such-channel (lambda () (samples->sound-data 0 100 ind 1234)))
	  (check-error-tag 'no-such-sound (lambda () (graph '#(0 1) "hi" 0 1 0 1 1234)))
	  (check-error-tag 'no-such-channel (lambda () (graph '#(0 1) "hi" 0 1 0 1 ind 1234)))
	  (set! (selection-member? #t) #f)
	  (check-error-tag 'no-active-selection (lambda () (save-selection "/bad/baddy.snd")))
	  (check-error-tag 'no-active-selection (lambda () (env-selection '(0 0 1 1))))
	  (check-error-tag 'no-such-region (lambda () (save-region 1234 "/bad/baddy.snd")))
	  (make-region 0 100 ind 0)
	  (check-error-tag 'cannot-save (lambda () (save-selection "/bad/baddy.snd")))
	  (check-error-tag 'cannot-save (lambda () (save-region (car (regions)) "/bad/baddy.snd")))
	  (check-error-tag 'no-such-sound (lambda () (make-track-sample-reader 0 1234 0)))
	  (check-error-tag 'no-such-track (lambda () (make-track-sample-reader 1234 ind 0)))
	  (check-error-tag 'no-such-mix (lambda () (make-mix-sample-reader 1234)))
	  (set! (read-only ind) #t)
	  (check-error-tag 'cannot-save (lambda () (set! (sound-loop-info ind) '(0 0 1 1))))
	  (check-error-tag 'no-such-direction (lambda () (make-sample-reader 0 ind 0 123)))
	  (check-error-tag 'no-such-direction (lambda () (make-sample-reader 0 ind 0 0)))
	  (check-error-tag 'no-such-direction (lambda () (make-sample-reader 0 ind 0 -2)))
	  (check-error-tag 'no-data (lambda () (scale-by (make-vector 0))))
	  (check-error-tag 'no-data (lambda () (scale-to '())))
	  (check-error-tag 'no-such-sample (lambda () (ptree-channel (lambda (y) (+ y .1)) 1234567)))
	  (check-error-tag 'bad-arity (lambda () (prompt-in-minibuffer "hi" (lambda (x y) (+ x y)))))
	  (check-error-tag 'no-such-sample (lambda () (set! (selection-position ind 0) -999)))
	  (check-error-tag 'wrong-type-arg (lambda () (set! (selection-frames ind 0) -999)))
	  (check-error-tag 'wrong-type-arg (lambda () (set! (selection-frames ind 0) 0)))
	  (check-error-tag 'no-such-edit (lambda () (edit-fragment -1)))
	  (check-error-tag 'no-such-edit (lambda () (edit-fragment 101 ind 0)))
	  (check-error-tag 'no-such-edit (lambda () (edit-tree ind 0 -2)))
	  (check-error-tag 'no-such-edit (lambda () (edit-tree ind 0 101)))
	  (check-error-tag 'no-such-sample (lambda () (add-mark -1)))
	  (check-error-tag 'no-such-sample (lambda () (add-mark (* 2 (frames)))))
	  (check-error-tag 'no-such-file (lambda () (convolve-with "/bad/baddy")))
	  (check-error-tag 'no-such-file (lambda () (mix "/bad/baddy")))
	  (check-error-tag 'no-such-sound (lambda () (swap-channels ind 0 123)))
	  (check-error-tag 'out-of-range (lambda () (set! (show-axes ind 0) 123)))
	  (check-error-tag 'out-of-range (lambda () (set! (x-axis-style ind 0) 123)))
	  (check-error-tag 'out-of-range (lambda () (set! (graph-style ind 0) 123)))
	  (check-error-tag 'out-of-range (lambda () (env-sound '(0 0 1 1) 0 #f -1.5)))
	  (check-error-tag 'out-of-range (lambda () (xramp-channel 0.0 1.0 -1.6)))
	  (check-error-tag 'no-such-sample (lambda () (samples->sound-data -1)))
	  (check-error-tag 'out-of-range (lambda () (samples->sound-data 0 2 ind 0 (make-sound-data 1 4) 0 -1)))
	  (check-error-tag 'wrong-type-arg (lambda () (set! (samples 0 2) -1)))
	  (check-error-tag 'wrong-type-arg (lambda () (left-sample (list 0))))
	  (check-error-tag 'wrong-type-arg (lambda () (amp-control (list 0))))
	  (check-error-tag 'wrong-type-arg (lambda () (sound-loop-info (list 0))))
	  (check-error-tag 'wrong-type-arg (lambda () (add-mark 123 (list 0))))
	  (close-sound ind))
	(check-error-tag 'bad-arity (lambda () (add-transform "hiho" "time" 0 1 (lambda () 1.0))))
	(check-error-tag 'cannot-save (lambda () (save-options "/bad/baddy")))
	(check-error-tag 'cannot-save (lambda () (save-state "/bad/baddy")))
	(check-error-tag 'no-such-menu (lambda () (add-to-menu 1234 "hi" (lambda () #f))))
	(check-error-tag 'bad-arity (lambda () (add-to-main-menu "hi" (lambda (a b) #f))))
	(check-error-tag 'bad-arity (lambda () (add-to-menu 1 "hi" (lambda (a b) #f))))
	(check-error-tag 'no-such-file (lambda () (open-sound-file "/bad/baddy.snd")))
	(check-error-tag 'out-of-range (lambda () (close-sound-file 0 0)))
	(check-error-tag 'wrong-type-arg (lambda () (help-dialog (list 0 1) "hiho")))
	(check-error-tag 'no-such-sound (lambda () (edit-header-dialog 1234)))
	(check-error-tag 'no-such-sound (lambda () (make-track-sample-reader 0)))
	(check-error-tag 'wrong-type-arg (lambda () (yes-or-no? (list 0 1))))
	(check-error-tag 'no-such-file (lambda () (open-sound "/bad/baddy.snd")))
	(check-error-tag 'no-such-file (lambda () (open-raw-sound "/bad/baddy.snd" 1 22050 mus-lshort)))
	(check-error-tag 'no-such-file (lambda () (view-sound "/bad/baddy.snd")))
	(check-error-tag 'no-such-file (lambda () (make-sample-reader 0 "/bad/baddy.snd")))
	(check-error-tag 'no-such-region (lambda () (make-region-sample-reader 0 1234567)))
	(check-error-tag 'no-such-mix (lambda () (mix-tag-position 12345)))
	(check-error-tag 'no-such-key (lambda () (bind-key 12345678 0 #f)))
	(check-error-tag 'no-such-key (lambda () (bind-key -1 0 #f)))
	(check-error-tag 'no-such-key (lambda () (bind-key 12 17 #f)))
	(check-error-tag 'no-such-key (lambda () (bind-key 12 -1 #f)))
	(check-error-tag 'no-such-key (lambda () (key-binding 12345678 0)))
	(check-error-tag 'no-such-key (lambda () (key-binding -1 0)))
	(check-error-tag 'no-such-key (lambda () (key-binding 12 17)))
	(check-error-tag 'no-such-key (lambda () (key-binding 12 -1)))
	(check-error-tag 'wrong-type-arg (lambda () (send-netscape -1)))

	(if (provided? 'snd-motif)
	    (for-each
	     (lambda (n name)
	       (let ((tag (catch #t
				 (lambda () (n (list 'Widget 0)))
				 (lambda args (car args)))))
		 (if (not (eq? tag 'no-such-widget))
		     (snd-display ";~A of null widget -> ~A" name tag))))
	     (list widget-position widget-size widget-text hide-widget show-widget focus-widget)
	     (list 'widget-position 'widget-size 'widget-text 'hide-widget 'show-widget 'focus-widget)))


	;; now try everything! (all we care about here is that Snd keeps running)

	;; ---------------- key args
	(for-each
	 (lambda (arg1)
	   (for-each 
	    (lambda (arg2)
	      (for-each 
	       (lambda (n)
		 (catch #t
			(lambda () (n arg1 arg2))
			(lambda args (car args))))
	       make-procs))
	    (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) :wave -1 0 1 #f #t '() (make-vector 0) 12345678901234567890)))
	 keyargs)

	(if all-args
	    (begin
	      (for-each
	       (lambda (arg1)
		 (for-each 
		  (lambda (arg2)
		    (for-each 
		     (lambda (arg3)
		       (for-each 
			(lambda (n)
			  (catch #t
				 (lambda () (n arg1 arg2 arg3))
				 (lambda args (car args))))
			make-procs))
		     (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) :wave -1 0 1 #f #t '() (make-vector 0) 12345678901234567890)))
		  keyargs))
	       (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) :wave -1 0 1 #f #t '() (make-vector 0) 12345678901234567890))
	      
	      (for-each
	       (lambda (arg1)
		 (for-each 
		  (lambda (arg2)
		    (for-each 
		     (lambda (arg3)
		       (for-each 
			(lambda (arg4)
			  (for-each 
			   (lambda (n)
			     (catch #t
				    (lambda () (n arg1 arg2 arg3))
				    (lambda args (car args))))
			   make-procs))
			(list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) :wave -1 0 1 #f #t '() (make-vector 0) 12345678901234567890)))
		     keyargs))
		  (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) :wave -1 0 1 #f #t '() (make-vector 0) 12345678901234567890)))
	       keyargs)))
	(gc)

	;; ---------------- 0 Args
	(for-each 
	 (lambda (n)
	   (let ((err (catch #t
			     (lambda ()
			       (n))
			     (lambda args (car args)))))
	     (if (eq? err 'wrong-number-of-args)
		 (snd-display ";procs0: ~A ~A" err (procedure-property n 'documentation)))))
	 procs0)
	(dismiss-all-dialogs)
	(gc)

	;; ---------------- 1 Arg
	(for-each 
	 (lambda (arg)
	   (for-each 
	    (lambda (n)
	      (let ((err (catch #t
				(lambda () (n arg))
				(lambda args (car args)))))
		(if (eq? err 'wrong-number-of-args)
		    (snd-display ";procs1: ~A ~A" err (procedure-property n 'documentation)))))
	    procs1))
	 (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (make-color .95 .95 .95)  '#(0 1) 3/4 'mus-error (sqrt -1.0) (make-delay 32)
	       (lambda () #t) (current-module) (make-sound-data 2 3) :order 0 1 -1 (make-hook 2) #f #t #\c 0.0 1.0 -1.0 
	       '() '3 4 2 8 16 32 64 (make-vector 0) '(1 . 2) (expt 2.0 21.5) (expt 2.0 -18.0) (car (main-widgets)) (cadr (main-widgets)) 
	       12345678901234567890))
	(gc)

	;; ---------------- 2 Args
	(for-each 
	 (lambda (arg1)
	   (for-each 
	    (lambda (arg2)
	      (for-each 
	       (lambda (n)
		 (let ((err (catch #t
				   (lambda () (n arg1 arg2))
				   (lambda args (car args)))))
		   (if (eq? err 'wrong-number-of-args)
		       (snd-display ";procs2: ~A ~A" err (procedure-property n 'documentation)))))
	       procs2))
	    (if all-args
		(list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (make-color .95 .95 .95)  '#(0 1) 3/4 'mus-error (sqrt -1.0) (make-delay 32)
		      (lambda () #t) (current-module) (make-sound-data 2 3) :order 0 1 -1 (make-hook 2) #f #t #\c 0.0 1.0 -1.0 
		      '() '3 4 2 8 16 32 64 (make-vector 0) '(1 . 2) (expt 2.0 21.5) (expt 2.0 -18.0) (car (main-widgets)) (cadr (main-widgets)) 
		      12345678901234567890)
		(list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (make-color .95 .95 .95) '#(0 1) 3/4 
		      (sqrt -1.0) (make-delay 32) :feedback -1 0 #f #t '() (make-vector 0) 12345678901234567890))))
	 (if all-args
	     (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (make-color .95 .95 .95)  '#(0 1) 3/4 'mus-error (sqrt -1.0) (make-delay 32)
		   (lambda () #t) (current-module) (make-sound-data 2 3) :order 0 1 -1 (make-hook 2) #f #t #\c 0.0 1.0 -1.0 
		   '() '3 4 2 8 16 32 64 (make-vector 0) '(1 . 2) (expt 2.0 21.5) (expt 2.0 -18.0) (car (main-widgets)) (cadr (main-widgets)) 
		   12345678901234567890)
	     (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (make-color .95 .95 .95) '#(0 1) 3/4 
		   (sqrt -1.0) (make-delay 32) :frequency -1 0 #f #t '() (make-vector 0) 12345678901234567890)))
	(gc)

	;; ---------------- set! no Args
	(for-each 
	 (lambda (arg)
	   (for-each 
	    (lambda (n)
	      (let ((err (catch #t
				(lambda () (set! (n) arg))
				(lambda args (car args)))))
		    (if (eq? err 'wrong-number-of-args)
			(snd-display ";set-procs0: ~A ~A" err (procedure-property n 'documentation)))))
	    set-procs0))
	 (if all-args
	     (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (make-color .95 .95 .95)  '#(0 1) 3/4 'mus-error (sqrt -1.0) (make-delay 32)
		   (lambda () #t) (current-module) (make-sound-data 2 3) :order 0 1 -1 (make-hook 2) #f #t #\c 0.0 1.0 -1.0 
		   '() '3 4 2 8 16 32 64 (make-vector 0) '(1 . 2) (expt 2.0 21.5) (expt 2.0 -18.0) (car (main-widgets)) (cadr (main-widgets)) 
		   12345678901234567890)
	     (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (make-color .95 .95 .95)  '#(0 1) 3/4 'mus-error (sqrt -1.0) (make-delay 32)
		   (lambda () #t) (current-module) (make-sound-data 2 3) :order 0 1 -1 (make-hook 2) #f #t '() (make-vector 0) 12345678901234567890)))
	(gc)

	;; ---------------- set! 1 Arg
	(for-each 
	 (lambda (arg1)
	   (for-each 
	    (lambda (arg2)
	      (for-each 
	       (lambda (n)
		 (let ((err (catch #t
				   (lambda () (set! (n arg1) arg2))
				   (lambda args (car args)))))
		       (if (eq? err 'wrong-number-of-args)
			(snd-display ";set-procs1: ~A ~A" err (procedure-property n 'documentation)))))
	       set-procs1))
	    (if all-args
		(list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (make-color .95 .95 .95)  '#(0 1) 3/4 'mus-error (sqrt -1.0) (make-delay 32)
		      (lambda () #t) (current-module) (make-sound-data 2 3) :order 0 1 -1 (make-hook 2) #f #t #\c 0.0 1.0 -1.0 
		      '() '3 4 2 8 16 32 64 (make-vector 0) '(1 . 2) (expt 2.0 21.5) (expt 2.0 -18.0) (car (main-widgets)) (cadr (main-widgets)) 
		      12345678901234567890)
		(list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (make-color .95 .95 .95) '#(0 1) 3/4 
		      (sqrt -1.0) (make-delay 32) :feedback -1 0 #f #t '() (make-vector 0) 12345678901234567890))))
	 (if all-args
	     (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (make-color .95 .95 .95)  '#(0 1) 3/4 'mus-error (sqrt -1.0) (make-delay 32)
		   (lambda () #t) (current-module) (make-sound-data 2 3) :order 0 1 -1 (make-hook 2) #f #t #\c 0.0 1.0 -1.0 
		   '() '3 4 2 8 16 32 64 (make-vector 0) '(1 . 2) (expt 2.0 21.5) (expt 2.0 -18.0) (car (main-widgets)) (cadr (main-widgets)) 
		   12345678901234567890)
	     (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (make-color .95 .95 .95) '#(0 1) 3/4 
		   (sqrt -1.0) (make-delay 32) :frequency -1 0 #f #t '() (make-vector 0) 12345678901234567890)))
	(gc)

	;; ---------------- set! 2 Args
	(for-each 
	 (lambda (arg1)
	   (for-each 
	    (lambda (arg2)
	      (for-each 
	       (lambda (arg3)
		 (for-each 
		  (lambda (n)
		    (let ((err (catch #t
				      (lambda () (set! (n arg1 arg2) arg3))
				      (lambda args (car args)))))
		      (if (eq? err 'wrong-number-of-args)
			  (snd-display ";set-procs2: ~A ~A" err (procedure-property n 'documentation)))))
		  set-procs2))
	       (if all-args
		   (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (make-color .95 .95 .95)  '#(0 1) 3/4 'mus-error (sqrt -1.0) (make-delay 32)
			 (lambda () #t) (current-module) (make-sound-data 2 3) :order 0 1 -1 (make-hook 2) #f #t #\c 0.0 1.0 -1.0 
			 '() '3 4 2 8 16 32 64 (make-vector 0) '(1 . 2) (expt 2.0 21.5) (expt 2.0 -18.0) (car (main-widgets)) (cadr (main-widgets)) 
			 12345678901234567890)
		   (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (make-color .95 .95 .95) '#(0 1) 3/4 
			 (sqrt -1.0) (make-delay 32) :feedback -1 0 #f #t '() (make-vector 0) 12345678901234567890))))
	    (if all-args
		(list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (make-color .95 .95 .95)  '#(0 1) 3/4 'mus-error (sqrt -1.0) (make-delay 32)
		      (lambda () #t) (current-module) (make-sound-data 2 3) :order 0 1 -1 (make-hook 2) #f #t #\c 0.0 1.0 -1.0 
		      '() '3 4 2 8 16 32 64 (make-vector 0) '(1 . 2) (expt 2.0 21.5) (expt 2.0 -18.0) (car (main-widgets)) (cadr (main-widgets)) 
		      12345678901234567890)
		(list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (make-color .95 .95 .95) '#(0 1) 3/4 
		      (sqrt -1.0) (make-delay 32) :frequency -1 0 #f #t '() (make-vector 0) 12345678901234567890))))
	 (if all-args
	     (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (make-color .95 .95 .95)  '#(0 1) 3/4 'mus-error (sqrt -1.0) (make-delay 32)
		   (lambda () #t) (current-module) (make-sound-data 2 3) :order 0 1 -1 (make-hook 2) #f #t #\c 0.0 1.0 -1.0 
		   '() '3 4 2 8 16 32 64 (make-vector 0) '(1 . 2) (expt 2.0 21.5) (expt 2.0 -18.0) (car (main-widgets)) (cadr (main-widgets)) 
		   12345678901234567890)
	     (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (make-color .95 .95 .95) '#(0 1) 3/4 
		   (sqrt -1.0) (make-delay 32) :frequency -1 0 #f #t '() (make-vector 0) 12345678901234567890)))
	(gc)

	(if all-args
	    ;; these can take awhile...
	    (begin
	      ;; ---------------- 3 Args
	      (for-each 
	       (lambda (arg1)
		 (begin
		   (for-each
		    (lambda (arg2)
		      (for-each 
		       (lambda (arg3)
			 (for-each
			  (lambda (n)
			    (let ((err (catch #t
					      (lambda () (n arg1 arg2 arg3))
					      (lambda args (car args)))))
			      (if (eq? err 'wrong-number-of-args)
				  (snd-display ";procs3: ~A ~A" err (procedure-property n 'documentation)))))
			  procs3))
		       (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) '#(0 1) (sqrt -1.0) (make-delay 32) 
			     :start -1 0 3 #f #t '() (make-vector 0) 12345678901234567890)))
		    (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) '#(0 1) (sqrt -1.0) (make-delay 32) 
			  :phase -1 0 3 #f #t '() (make-vector 0) 12345678901234567890))))
	       (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) '#(0 1) (sqrt -1.0) (make-delay 32) 
		     :channels -1 0 3 #f #t '() (make-vector 0) 12345678901234567890))
	      (gc)

	      ;; ---------------- set! 3 Args
	      (for-each 
	       (lambda (arg1)
		 (for-each 
		  (lambda (arg2)
		    (for-each 
		     (lambda (arg3)
		       (for-each 
			(lambda (arg4)
			  (for-each 
			   (lambda (n)
			     (let ((err (catch #t
					       (lambda () (set! (n arg1 arg2 arg3) arg4))
					       (lambda args (car args)))))
			      (if (eq? err 'wrong-number-of-args)
				  (snd-display ";set-procs3: ~A ~A" err (procedure-property n 'documentation)))))
			   set-procs3))
			(list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (sqrt -1.0) (make-delay 32) 
			      :wave -1 0 3 16 #f #t '() (make-vector 0) 12345678901234567890)))
		     (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (sqrt -1.0) (make-delay 32) 
			   :initial-contents -1 0 3 16 #f #t '() (make-vector 0) 12345678901234567890)))
		  (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (sqrt -1.0) (make-delay 32) 
			:srate -1 0 3 16 #f #t '() (make-vector 0) 12345678901234567890)))
	      (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (sqrt -1.0) (make-delay 32) 
		    :input -1 0 3 16 #f #t '() (make-vector 0) 12345678901234567890))


	      ;; ---------------- 4 Args
	      (for-each 
	       (lambda (arg1)
		 (begin
		   (for-each 
		    (lambda (arg2)
		      (for-each 
		       (lambda (arg3)
			 (for-each 
			  (lambda (arg4)
			    (for-each
			     (lambda (n)
			       (let ((err (catch #t
						 (lambda () (n arg1 arg2 arg3 arg4))
						 (lambda args (car args)))))
				 (if (eq? err 'wrong-number-of-args)
				     (snd-display ";procs4: ~A ~A" err (procedure-property n 'documentation)))))
			     procs4))
			  (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (sqrt -1.0) (make-delay 32) 
				:wave -1 0 #f #t '() (make-vector 0) 12345678901234567890)))
		       (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (sqrt -1.0) (make-delay 32) 
			     :initial-contents -1 0 #f #t '() (make-vector 0) 12345678901234567890)))
		    (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (sqrt -1.0) (make-delay 32)
			  :srate -1 0 #f #t '() (make-vector 0) 12345678901234567890))))
	       (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (sqrt -1.0) (make-delay 32) 
		     :input -1 0 #f #t '() (make-vector 0) 12345678901234567890))

	      ;; ---------------- 5 Args
	      (for-each 
	       (lambda (arg1)
		 (for-each 
		  (lambda (arg2)
		    (for-each 
		     (lambda (arg3)
		       (for-each 
			(lambda (arg4)
			  (for-each
			   (lambda (arg5)
			     (for-each 
			      (lambda (n)
				(let ((err (catch #t
						  (lambda () (n arg1 arg2 arg3 arg4 arg5))
						  (lambda args (car args)))))
				  (if (eq? err 'wrong-number-of-args)
				      (snd-display ";procs5: ~A ~A" err (procedure-property n 'documentation)))))
			      procs5))
			      (list 1.5 "/hiho" 1234 (make-vct 3) (sqrt -1.0) -1 0 #f 12345678901234567890)))
			   (list 1.5 "/hiho" 1234 (make-vct 3) (sqrt -1.0) -1 0 #f 12345678901234567890)))
			(list 1.5 "/hiho" 1234 (make-vct 3) (sqrt -1.0) -1 0 #f 12345678901234567890)))
		     (list 1.5 "/hiho" 1234 (make-vct 3) (sqrt -1.0) -1 0 #f 12345678901234567890)))
		  (list 1.5 "/hiho" 1234 (make-vct 3) (sqrt -1.0) -1 0 #f 12345678901234567890))

	      ;; ---------------- 6 Args
	      (for-each 
	       (lambda (arg1)
		 (for-each 
		  (lambda (arg2)
		    (for-each 
		     (lambda (arg3)
		       (for-each 
			(lambda (arg4)
			  (for-each
			   (lambda (arg5)
			     (for-each 
			      (lambda (arg6)
				(for-each 
				 (lambda (n)
				   (let ((err (catch #t
						     (lambda () (n arg1 arg2 arg3 arg4 arg5 arg6))
						     (lambda args (car args)))))
				     (if (eq? err 'wrong-number-of-args)
					 (snd-display ";procs6: ~A ~A" err (procedure-property n 'documentation)))))
				 procs6))
			      (list 1.5 "/hiho" 1234 -1 0 #f)))
			   (list 1.5 "/hiho" 1234 0 #t)))
			(list 1.5 "/hiho" 1234 (make-vct 3) #f #t)))
		     (list 1.5 "/hiho" (make-vct 3) -1 #t)))
		  (list 1.5 (make-vct 3) -1 0 #f #t)))
	       (list 1.5 "/hiho" #f))
		 
	      ;; ---------------- 8 Args
	      (for-each 
	       (lambda (arg1)
		 (for-each 
		  (lambda (arg2)
		    (for-each 
		     (lambda (arg3)
		       (for-each 
			(lambda (arg4)
			  (for-each
			   (lambda (arg5)
			     (for-each 
			      (lambda (arg6)
				(for-each 
				 (lambda (arg7)
				   (for-each 
				    (lambda (arg8)
				      (for-each 
				       (lambda (n)
					 (let ((err (catch #t
							   (lambda () (n arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8))
							   (lambda args (car args)))))
					   (if (eq? err 'wrong-number-of-args)
					       (snd-display ";procs8: ~A ~A" err (procedure-property n 'documentation)))))
				       procs8))
				    (list 1.5 -1 #f)))
				 (list "/hiho" 1234)))
			      (list #t (make-vct 3))))
			   (list (sqrt -1.0) 1)))
			(list 1.5 '())))
		     (list 2 1234)))
		  (list #f #t)))
	       (list 1.5 "/hiho"))
				    

	      ;; ---------------- 10 Args
	      (for-each 
	       (lambda (arg1)
		 (for-each 
		  (lambda (arg2)
		    (for-each 
		     (lambda (arg3)
		       (for-each 
			(lambda (arg4)
			  (for-each
			   (lambda (arg5)
			     (for-each 
			      (lambda (arg6)
				(for-each 
				 (lambda (arg7)
				   (for-each 
				    (lambda (arg8)
				      (for-each 
				       (lambda (arg9)
					 (for-each 
					  (lambda (arg10)
					    (for-each 
					     (lambda (n)
					       (let ((err (catch #t
								 (lambda () (n arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10))
								 (lambda args (car args)))))
						 (if (eq? err 'wrong-number-of-args)
						     (snd-display ";procs10: ~A ~A" err (procedure-property n 'documentation)))))
					     procs10))
					  (list 1.5 -1 #f)))
				       (list "/hiho" 1234)))
				    (list #t (make-vct 3))))
				 (list (sqrt -1.0) 1)))
			      (list 1.5 '())))
			   (list 2 1234)))
			(list #f #t)))
		     (list 1.5 "/hiho")))
		  (list 1.5 -1)))
	       (list #f 1234))
	      (gc)))

	(mus-audio-reinitialize)
	))

(set! (window-y) 10)
;(set! (basic-color) (make-color 0.96 0.96 0.86))
(dismiss-all-dialogs)
))


;;; -------------------------------- clean up and quit -------------------------------- 

;(set! (max-regions) 2)
(let ((regs (regions)))
  (for-each
   (lambda (n)
     (forget-region n))
   regs))
(set! (previous-files-sort) 0)

(if (file-exists? "saved-snd.scm") (delete-file "saved-snd.scm"))
(gc)
(clear-sincs)
(reset-almost-all-hooks)

(save-listener "test.output")
(set! (listener-prompt) original-prompt)

(snd-display ";all done!~%~A" original-prompt)

(snd-display ";gc: ~A~%" (gc-stats))

(let ((gc-lst (gc-stats)))
  (snd-display ";timings:~%  ~A: total~%  GC: ~A~%~{    ~A~%~})" 
	       (/ (- (get-internal-real-time) overall-start-time) internal-time-units-per-second) 
	       (/ (cdr (list-ref gc-lst 0)) internal-time-units-per-second) ; was 1000 -- off by a factor of 10 for years...
	       (list (list-ref gc-lst 1) 
		     (list-ref gc-lst 5)
		     (if (> (length gc-lst) 9)
			 (list-ref gc-lst 9)
			 #f))))

(if (not (null? times))
    (for-each (lambda (n)
 		(snd-display ";  ~A: ~A" (cadr n) (car n)))
 	      times))

(if (number? (vector-ref timings total-tests)) 
    (vector-set! timings total-tests (- (get-internal-real-time) (vector-ref timings total-tests))))
(do ((i 0 (1+ i)))
    ((= i (+ total-tests 1)))
  (if (number? (vector-ref timings i))
      (display (format #f " [~D: ~A]" i (/ (vector-ref timings i) internal-time-units-per-second)))))
	
(if (and (string? test14-file)
	 (file-exists? test14-file))
    (snd-display ";~%~A(~D)" test14-file (mus-sound-samples test14-file)))

(show-listener)

(if (file-exists? original-save-dir)
    (begin
      (snd-display (format #f "ls ~A/snd_* | wc~%" original-save-dir))
      (system (format #f "ls ~A/snd_* | wc" original-save-dir))
      (system (format #f "rm ~A/snd_*" original-save-dir))))

(if (file-exists? original-temp-dir)
    (begin
      (snd-display (format #f "ls ~A/snd_* | wc~%" original-temp-dir))
      (system (format #f "ls ~A/snd_* | wc" original-temp-dir))
      (system (format #f "sndinfo ~A/snd_*" original-temp-dir))
      (system (format #f "rm ~A/snd_*" original-temp-dir))))

(if (file-exists? "/tmp")
    (begin ; -noinit possibly
      (snd-display (format #f "ls /tmp/snd_* | wc~%"))
      (system "ls /tmp/snd_* | wc")
      ;(system "sndinfo /tmp/snd_*") ; not a bug -- save_dir null will write to /tmp
      (system "rm /tmp/snd_*")
      (system "ls /tmp/file*.snd | wc") ; these are externally created perhaps 
      (system "rm /tmp/file*.snd")))

(mus-sound-prune)
(close-output-port optimizer-log)
;;;(mus-sound-report-cache "hiho.tmp")
(gc)
(mem-report)
(if (and full-test
	 (file-exists? "oldopt2.log"))
    (system "diff -w optimizer.log oldopt2.log"))

(if (file-exists? (string-append home-dir "/dot-snd"))
    (system (string-append "cp " home-dir "/dot-snd " home-dir "/.snd")))

(snd-print #\#)
(snd-print #\t)

(if with-exit (exit))


