;;; Snd tests
;;;
;;; test 0: constants 
;;; test 1: default values
;;; test 2: headers 
;;; test 3: can variables be set/reset
;;; test 4: sndlib tests 
;;; test 5: simple overall checks
;;; test 6: vcts 
;;; test 7: colors 
;;; test 8: clm
;;; test 9: mix 
;;; test 10: marks 
;;; test 11: dialogs 
;;; test 12: sound file extensions etc 
;;; test 13: menus, edit lists, hooks, etc
;;; test 14: all functions
;;; test 15: chan-local vars 
;;; test 16: define-syntax 
;;; test 17: guile-gtk dialogs and graphics
;;; test 18: enved
;;; test 19: save and restore
;;; test 20: errors
;;; test 21: transforms
;;; test 22: error continuations


(use-modules (ice-9 format) (ice-9 debug))

(define tests 1)
(define snd-test -1)
(define full-test (< snd-test 0))
(define total-tests 22)

(if (provided? 'gcing) (set! g-gc-step 100))

(if (and (not (file-exists? "4.aiff"))
	 (not (string=? (getcwd) "/home/bil/cl")))
    (copy-file "/home/bil/cl/4.aiff" (string-append (getcwd) "/4.aiff")))
(if (and (not (file-exists? "2.snd"))
	 (not (string=? (getcwd) "/home/bil/cl")))
    (copy-file "/home/bil/cl/2.snd" (string-append (getcwd) "/2.snd")))

(define times '())
(defmacro time (a) 
  `(let ((start (get-internal-real-time))) 
   ,a 
   (let ((val (/ (- (get-internal-real-time) start) 100)))
     (set! times (cons (list ',a val) times)))))

(define include-clm #f)
(define original-prompt (listener-prompt))
(activate-listener)
(show-listener)
(hide-listener)
(show-listener)
(set! (window-x) 600)
(set! (window-y) 10)

(define (snd-display str)
  (display str)
  (if (not (provided? 'snd-nogui))
      (snd-print str)))

(define fneq (lambda (a b) (> (abs (- a b)) .001)))
(define ffneq (lambda (a b) (> (abs (- a b)) .01)))
(define feql
  (lambda (a b)
    (if (null? a)
	(null? b)
	(if (null? b)
	    #f
	    (if (fneq (car a) (car b))
		#f
		(feql (cdr a) (cdr b)))))))
(define fveql 
  (lambda (a b i)
    (if (null? b)
	#t
	(if (fneq (car b) (vct-ref a i))
	    #f
	    (fveql a (cdr b) (+ i 1))))))

(define (vequal v0 v1)
  (define (dequal ctr len)
    (if (= ctr len)
	#t
	(and (< (abs (- (vct-ref v0 ctr) (vct-ref v1 ctr))) .001)
	     (dequal (1+ ctr) len))))
  (let ((len (vct-length v0)))
    (and (= len (vct-length v1))
	 (dequal 0 len))))

(define my-random
  (lambda (n)
    (if (= n 0) 
	0 ;sigh...
	(random n))))

;(define rs (lambda (n) (< (my-random 1.0) n)))
(define rs (lambda (n) #t))

;;; preliminaries -- check constants, default variable values (assumes -noinit), sndlib and clm stuff

(define timings (make-vector (+ total-tests 1)))

(snd-display (format #f ";;~A" (snd-version)))
(define trace-hook (lambda (n)
		     (if (and (> n 0) (number? (vector-ref timings (- n 1))))
			 (vector-set! timings (- n 1) (- (get-internal-real-time) (vector-ref timings (- n 1)))))
		     (vector-set! timings n (get-internal-real-time))
		     (snd-display (format #f ";test ~D~%" n))
		     (gc)
		     ;(snd-display (gc-stats))
		     ))

(define overall-start-time (get-internal-real-time))
(snd-display (format #f "~%~A~%" (strftime "%d-%b %H:%M %Z" (localtime (current-time)))))

(define (log-mem tst) (if (and (> tests 50) (= (modulo tst 10) 0))  (mem-report)))


;;; ---------------- test 0: constants ----------------
(if (or full-test (= snd-test 0))
    (letrec ((test-constants 
	      (lambda (lst)
		(if (not (null? lst))
		    (begin
		      (if (not (= (cadr lst) (caddr lst)))
			  (snd-display (format #f ";~A /= ~A (~A)~%"
					     (car lst) (cadr lst) (caddr lst))))
		      (test-constants (cdddr lst)))))))
      (if (procedure? trace-hook) (trace-hook 0))
      (test-constants
       (list
	'amplitude-env amplitude-env 0 
	'autocorrelation autocorrelation 4 
	'bartlett-window bartlett-window 4 
	'blackman2-window blackman2-window 6 
	'blackman3-window blackman3-window 7 
	'blackman4-window blackman4-window 8
	'cauchy-window cauchy-window 12 
	'channels-combined channels-combined 1 
	'channels-separate channels-separate 0 
	'channels-superimposed channels-superimposed 2
	'chebyshev-transform chebyshev-transform 5 
	'cursor-in-middle cursor-in-middle 3
	'cursor-in-view cursor-in-view 0 
	'cursor-no-action cursor-no-action 5 
	'cursor-on-left cursor-on-left 1 
	'cursor-on-right cursor-on-right 2 
	'cursor-update-display cursor-update-display 4 
	'dolph-chebyshev-window dolph-chebyshev-window 16
	'exponential-window exponential-window 9 
	'focus-active focus-active 2
	'focus-left focus-left 0
	'focus-middle focus-middle 3
	'focus-right focus-right 1 
	'fourier-transform fourier-transform 0 
	'gaussian-window gaussian-window 14 
	'graph-dots graph-dots 1
	'graph-dots-and-lines graph-dots-and-lines 3 
	'graph-filled graph-filled 2 
	'graph-lines graph-lines 0 
	'graph-lollipops graph-lollipops 4
	'hadamard-transform hadamard-transform 7 
	'haar-transform haar-transform 8
	'hamming-window hamming-window 5
	'hankel-transform hankel-transform 2 
	'hanning-window hanning-window 1
	'kaiser-window kaiser-window 11 
	'keyboard-no-action keyboard-no-action 6
	'cepstrum cepstrum 6
	'normal-fft normal-fft 0 
	'parzen-window parzen-window 3
	'poisson-window poisson-window 13
	'rectangular-window rectangular-window 0 
	'riemann-window riemann-window 10 
	'sonogram sonogram 1
	'spectrogram spectrogram 2 
	'spectrum-env spectrum-env 1
	'speed-as-float speed-as-float 0 
	'speed-as-ratio speed-as-ratio 1 
	'speed-as-semitone speed-as-semitone 2 
	'srate-env srate-env 2 
	'tukey-window tukey-window 15 
	'walsh-transform walsh-transform 3
	'wavelet-transform wavelet-transform 1
	'welch-window welch-window 2 
	'cursor-cross cursor-cross 0
	'cursor-line cursor-line 1
	'dont-normalize dont-normalize 0
	'normalize-by-channel normalize-by-channel 1
	'normalize-by-sound normalize-by-sound 2
	'normalize-globally normalize-globally 3
	'x-in-samples x-in-samples 1 
	'x-in-seconds x-in-seconds 0 
	'x-to-one x-to-one 2
	'enved-add-point enved-add-point 0
	'enved-delete-point enved-delete-point 1
	'enved-move-point enved-move-point 2
	'time-graph time-graph 0
	'fft-graph fft-graph 1
	'lisp-graph lisp-graph 2
	'copy-context copy-context 0
	'cursor-context cursor-context 3
	)))
    )

(defmacro without-errors (func)
  `(catch #t 
	  (lambda ()
	    ,func)
	  (lambda args 
	    ;(snd-display (format #f ";warning: ~A" (car args)))
	    (car args))))
;(defmacro without-errors (func) `(begin ,func))


;;; ---------------- test 1: default values ----------------
(if (or full-test (= snd-test 1))
    (letrec ((test-defaults
	      (lambda (lst)
		(if (not (null? lst))
		    (begin
		      (if (not (equal? (cadr lst)  (caddr lst)))
			  (if (and (number? (caddr lst))
				   (inexact? (caddr lst)))
			      (if (fneq (cadr lst) (caddr lst))
				  (snd-display (format #f ";~A /= ~A (~A)~%" (car lst) (caddr lst) (cadr lst))))
			      (snd-display (format #f ";~A /= ~A (~A)~%" (car lst) (caddr lst) (cadr lst)))))
		      (test-defaults (cdddr lst)))))))
      (if (procedure? trace-hook) (trace-hook 1))
      (test-defaults
       (list
	'amp (without-errors (amp)) 'no-such-sound
	'ask-before-overwrite (ask-before-overwrite) #f 
	'audio-output-device (audio-output-device) 0
	'audio-state-file (audio-state-file) ".snd-mixer" 
	'auto-resize (auto-resize) #t 
	'auto-update (auto-update) #f
	'channel-style (channel-style) 0 
	'color-cutoff (color-cutoff) 0.003 
	'color-inverted (color-inverted) #t
	'color-scale (color-scale) 1.0 
	'colormap (colormap) -1 
	'contrast (without-errors (contrast)) 'no-such-sound
	'contrast-amp (without-errors (contrast-amp)) 'no-such-sound
	'contrasting (without-errors (contrasting)) 'no-such-sound
	'corruption-time (corruption-time) 60.0 
	'cursor-follows-play (without-errors (cursor-follows-play)) 'no-such-sound
	'dac-folding (dac-folding) #t
	'dac-size (dac-size) 256 
	'minibuffer-history-length (minibuffer-history-length) 8
	'data-clipped (data-clipped) #f 
	'default-output-chans (default-output-chans) 1 
	'default-output-format (default-output-format) 1
	'default-output-srate (default-output-srate) 22050 
	'default-output-type (default-output-type) 0 
	'dot-size (dot-size) 1 
	'enved-base (enved-base) 1.0 
	'enved-clipping (enved-clipping) #f 
	'enved-dBing (enved-dBing) #f 
	'enved-exping (enved-exping) #f 
	'enved-power (enved-power) 3.0
	'enved-target (enved-target) 0 
	'enved-waving (enved-waving) #f 
	'enved-active-env (enved-active-env) '()
	'enved-selected-env (enved-selected-env) '()
	'eps-file (eps-file) "snd.eps" 
	'eps-bottom-margin (eps-bottom-margin) 0.0
	'eps-left-margin (eps-left-margin) 0.0
	'expand (without-errors (expand)) 'no-such-sound
	'expand-hop (without-errors (expand-hop)) 'no-such-sound
	'expand-length (without-errors (expand-length)) 'no-such-sound
	'expand-ramp (without-errors (expand-ramp)) 'no-such-sound
	'expanding (without-errors (expanding)) 'no-such-sound
	'fft-beta (fft-beta) 0.0 
	'fft-log-frequency (fft-log-frequency) #f 
	'fft-log-magnitude (fft-log-magnitude) #f 
	'fft-size (fft-size) 256 
	'fft-style (fft-style) 0
	'fft-window (fft-window) 6 
	'ffting (without-errors (ffting)) 'no-such-sound
	'filter-dBing (without-errors (filter-dBing)) 'no-such-sound
	'filter-env (without-errors (filter-env)) 'no-such-sound
	'filter-env-order (filter-env-order) 40
	'filter-env-in-hz (filter-env-in-hz) #f
	'filter-order (without-errors (filter-order)) 'no-such-sound
	'filtering (without-errors (filtering)) 'no-such-sound
	'graph-cursor (graph-cursor) 34
	'graph-style (graph-style) 0 
	'graphing (without-errors (graphing)) 'no-such-sound
	'graphs-horizontal (graphs-horizontal) #t
	'just-sounds (just-sounds) #f
	'line-size (line-size) 128 
	'listener-prompt (listener-prompt) ">" 
	'max-fft-peaks (max-fft-peaks) 100
	'max-regions (max-regions) 16 
	'min-dB (min-dB) -60.0 
	'movies (movies) #t 
	'selection-creates-region (selection-creates-region) #t 
	'normalize-fft (normalize-fft) normalize-by-channel
	'normalize-on-open (normalize-on-open) #t
	'previous-files-sort (previous-files-sort) 0 
	'print-length (print-length) 12 
	'read-only (without-errors (read-only)) 'no-such-sound
	'recorder-autoload (recorder-autoload) #f
	'recorder-buffer-size (recorder-buffer-size) 4096 
	'recorder-file (recorder-file) #f 
	'recorder-max-duration (recorder-max-duration) 1000000.0
	'recorder-out-chans (recorder-out-chans) 2 
	'recorder-srate (recorder-srate) 22050 
	'recorder-trigger (recorder-trigger) 0.0
	'reverb-decay (reverb-decay) 1.0 
	'reverb-feedback (without-errors (reverb-feedback)) 'no-such-sound
	'reverb-length (without-errors (reverb-length)) 'no-such-sound
	'reverb-lowpass (without-errors (reverb-lowpass)) 'no-such-sound
	'reverb-scale (without-errors (reverb-scale)) 'no-such-sound
	'reverbing (without-errors (reverbing)) 'no-such-sound
	'save-state-file (save-state-file) "saved-snd.scm" 
	'save-state-on-exit (save-state-on-exit) #f
	'show-axes (show-axes) 1
	'show-fft-peaks (show-fft-peaks) #f 
	'show-indices (show-indices) #f
	'show-backtrace (show-backtrace) #f
	'show-marks (show-marks) #t 
	'show-mix-waveforms (show-mix-waveforms) #t
	'show-selection-transform (show-selection-transform) #f 
	'show-usage-stats (show-usage-stats) #f
	'show-y-zero (show-y-zero) #f 
	'show-controls (without-errors (show-controls)) 'no-such-sound
	'sinc-width (sinc-width) 10 
	'spectro-cutoff (spectro-cutoff) 1.0
	'spectro-hop (spectro-hop) 4 
	'spectro-start (spectro-start) 0.0 
	'spectro-x-angle (spectro-x-angle) 90.0 
	'spectro-x-scale (spectro-x-scale) 1.0
	'spectro-y-angle (spectro-y-angle) 0.0 
	'spectro-y-scale (spectro-y-scale) 1.0 
	'spectro-z-angle (spectro-z-angle) -2.0
	'spectro-z-scale (spectro-z-scale) 0.1 
	'speed (without-errors (speed)) 'no-such-sound
	'speed-style (speed-style) 0 
	'speed-tones (speed-tones) 12
	'sync (without-errors (sync)) 'no-such-sound
	'temp-dir (temp-dir) #f 
	'tiny-font (tiny-font) "6x12"
	'transform-type (transform-type) 0 
	'trap-segfault (trap-segfault) #f
	'uniting (without-errors (uniting)) 'no-such-sound
	'use-sinc-interp (use-sinc-interp) #t 
	'verbose-cursor (verbose-cursor) #f
	'vu-font (vu-font) #f 
	'vu-font-size (vu-font-size) 1.0 
	'vu-size (vu-size) 1.0 
	'wavelet-type (wavelet-type) 0 
	'waving (without-errors (waving)) 'no-such-sound
	'wavo (wavo) #f 
	'wavo-hop (wavo-hop) 3 
	'wavo-trace (wavo-trace) 64 
	'x-axis-style (x-axis-style) 0 
	'zero-pad (zero-pad) 0
	'zoom-focus-style (zoom-focus-style) 2 
	'mix-waveform-height (mix-waveform-height) 20 
	'mix-tag-width (mix-tag-width) 6
	'mix-tag-height (mix-tag-height) 14
	'audio-output-device (audio-output-device) 0 
	'selected-mix (selected-mix) -1
	'prefix-arg (prefix-arg) 0
	))))


;;; headers
(define sf-dir "/home/bil/sf1/") 
(if (not (file-exists? (string-append sf-dir "alaw.wav")))
    (begin
      (set! sf-dir "/home/bil/sf/")
      (if (not (file-exists? (string-append sf-dir "alaw.wav")))
	  (begin
	    (set! sf-dir "/usr/people/bil/sf/")
	    (if (not (file-exists? (string-append sf-dir "alaw.wav")))
		(begin
		  (set! sf-dir "/space/home/bil/sf/")
		  (if (not (file-exists? (string-append sf-dir "alaw.wav")))
		      (begin
			(snd-display "can't find sf directory!")
			(set! sf-dir #f)))))))))


;;; ---------------- test 2: headers ----------------
(if (or full-test (= snd-test 2))
    (if (string? sf-dir)
	(letrec ((test-headers
		  (lambda (base-files)
		    (if (not (null? base-files))
			(let ((testf (car base-files)))
			  
			  (let ((file (string-append sf-dir (list-ref testf 0))))
			    (if (file-exists? file)
				(begin
				  (if (not (equal? (mus-sound-chans file) (list-ref testf 1)))
				      (snd-display (format #f ";~A: chans ~A /= ~A" 
							 (list-ref testf 0) 
							 (mus-sound-chans file) 
							 (list-ref testf 1))))
				  (if (not (equal? (mus-sound-srate file) (list-ref testf 2)))
				      (snd-display (format #f ";~A: srate ~A /= ~A" 
							 (list-ref testf 0) 
							 (mus-sound-srate file) 
							 (list-ref testf 2))))
				  (if (fneq (mus-sound-duration file) (list-ref testf 3))
				      (snd-display (format #f ";~A: duration ~A /= ~A" 
							 (list-ref testf 0)
							 (mus-sound-duration file) 
							 (list-ref testf 3))))
				  (if (and (not (= (mus-sound-data-format file) -1))
					   (not (= (mus-sound-header-type file) 33)) ; bogus header on test case
					   (< (+ (mus-sound-length file) 1)
					      (* (mus-sound-datum-size file) (mus-sound-duration file) (mus-sound-srate file) (mus-sound-chans file))))
				      (snd-display (format #f ";mus-sound-length ~A: ~A (~A)" file
							   (mus-sound-length file)
							   (* (mus-sound-duration file) (mus-sound-srate file) (mus-sound-chans file) (mus-sound-datum-size file)))))
				  (if (fneq (/ (mus-sound-frames file) (mus-sound-srate file)) (mus-sound-duration file))
				      (snd-display (format #f ";mus-sound-frames ~A: ~A (~A ~A)" file
							   (mus-sound-frames file)
							   (mus-sound-duration file)
							   (/ (mus-sound-frames file) (mus-sound-srate file)))))
				  (if (> (abs (- (mus-sound-frames file) (/ (mus-sound-samples file) (mus-sound-chans file)))) 1)
				      (snd-display (format #f ";mus-sound-samples ~A: ~A ~A" file
							   (mus-sound-samples file)
							   (* (mus-sound-frames file) (mus-sound-chans file)))))
				  (if (not (equal? (mus-header-type-name (mus-sound-header-type file)) (list-ref testf 4)))
				      (snd-display (format #f ";~A: type ~A /= ~A" 
							 (list-ref testf 0) 
							 (mus-header-type-name (mus-sound-header-type file)) 
							 (list-ref testf 4))))
				  (if (not (equal? (mus-data-format-name (mus-sound-data-format file)) (list-ref testf 5)))
				      (snd-display (format #f ";~A: type ~A /= ~A"
							 (list-ref testf 0) 
							 (mus-data-format-name (mus-sound-data-format file)) 
							 (list-ref testf 5))))
				  (let ((lst (mus-sound-loop-info file)))
				    (if (> (length testf) 6)
					(begin
					  (if (not (equal? (car lst) (list-ref testf 6))) 
					      (snd-display (format #f ";~A: loop start: ~A" (car lst) (list-ref testf 6))))
					  (if (not (equal? (cadr lst) (list-ref testf 7))) 
					      (snd-display (format #f ";~A: loop end: ~A" (cadr lst) (list-ref testf 7)))))
					(if (not (null? lst))
					    (snd-display (format #f ";~A thinks it has loop info: ~A" file lst))))))
				(snd-display (format #f ";~A missing?" file)))
			    (test-headers (cdr base-files))))))))
	  (if (procedure? trace-hook) (trace-hook 2))
	  (test-headers
	   (list
	    (list "8svx-8.snd" 1 22050 1.88766443729401 "SVX8" "signed byte (8 bits)")
	    (list "Fnonull.aif" 1 8000 0.00112499995157123 "AIFC" "mulaw (8 bits)")
	    (list "Pmiscck.aif" 1 8000 0.00112499995157123 "AIFC" "mulaw (8 bits)")
	    (list "Pmiscck.wav" 1 8000 0.00112499995157123 "RIFF" "mulaw (8 bits)")
	    (list "Pnossnd.aif" 1 8000 0.0 "AIFC" "mulaw (8 bits)")
	    (list "Poffset.aif" 1 8000 0.00112499995157123 "AIFC" "mulaw (8 bits)")
	    (list "Porder.aif" 1 8000 0.00112499995157123 "AIFC" "mulaw (8 bits)")
	    (list "Ptjunk.aif" 1 8000 0.00112499995157123 "AIFC" "mulaw (8 bits)")
	    (list "Ptjunk.wav" 1 8000 0.00112499995157123 "RIFF" "mulaw (8 bits)")
	    (list "SINE24-S.WAV" 2 44100 2.0 "RIFF" "little endian int (24 bits)")
	    (list "a1.asf" 1 16000 0.0 "asf" "unsupported")
	    (list "a2.asf" 1 8000 0.0 "asf" "unsupported")
	    (list "addf8.afsp" 1 8000 2.9760000705719 "Sun" "big endian short (16 bits)")
	    (list "addf8.d" 1 8000 2.9760000705719 "SPPACK" "big endian short (16 bits)")
	    (list "addf8.dwd" 1 8000 2.9760000705719 "DiamondWare" "little endian short (16 bits)")
	    (list "addf8.nh" 2 44100 0.269931972026825 "raw (no header)" "big endian short (16 bits)")
	    (list "addf8.sd" 1 8000 2.9760000705719 "ESPS" "big endian short (16 bits)")
	    (list "addf8.sf_mipseb" 1 8000 2.9760000705719 "IRCAM" "big endian short (16 bits)")
	    (list "addf8.sf_sun" 1 8000 2.9760000705719 "IRCAM" "big endian short (16 bits)")
	    (list "addf8.sf_vax_b" 1 8000 2.9760000705719 "IRCAM" "big endian short (16 bits)")
	    (list "addf8.wav" 1 8000 2.9760000705719 "RIFF" "little endian short (16 bits)")
	    (list "aebass.krz" 1 44100 3.0 "Kurzweil 2000" "big endian short (16 bits)")
	    (list "aiff-16.snd" 2 44100 0.746666669845581 "AIFF" "big endian short (16 bits)")
	    (list "aiff-8.snd" 2 44100 0.746666669845581 "AIFF" "signed byte (8 bits)")
	    (list "alaw.aifc" 1 44100 0.0367800444364548 "AIFC" "alaw (8 bits)")
	    (list "alaw.wav" 1 11025 8.70666694641113 "RIFF" "alaw (8 bits)")
	    (list "astor_basia.mp2" 2 44100 1.02179133892059 "raw (no header)" "big endian short (16 bits)")
	    (list "c.asf" 1 8000 0.0 "asf" "unsupported")
	    (list "ce-c3.w02" 1 33000 3.88848495483398 "TX-16" "unsupported")
	    (list "ce-c4.w03" 1 33000 2.91618180274963 "TX-16" "unsupported")
	    (list "ce-d2.w01" 1 33000 3.46439385414124 "TX-16" "unsupported")
	    (list "clbonef.wav" 1 22050 2.57832193374634 "RIFF" "little endian float (32 bits)")
	    (list "cranker.krz" 1 44100 3.48267579078674 "Kurzweil 2000" "big endian short (16 bits)")
	    (list "d40130.aif" 1 10000 0.100000001490116 "AIFF" "big endian short (16 bits)")
	    (list "d40130.au" 1 10000 0.100000001490116 "Sun" "big endian short (16 bits)")
	    (list "d40130.dsf" 1 8000 0.125 "Delusion" "little endian short (16 bits)")
	    (list "d40130.fsm" 1 8000 0.125249996781349 "Farandole" "little endian short (16 bits)")
	    (list "d40130.iff" 1 10000 0.100000001490116 "SVX8" "signed byte (8 bits)")
	    (list "d40130.pat" 1 10000 0.100000001490116 "Gravis Ultrasound patch" "little endian short (16 bits)")
	    (list "d40130.sds" 1 10000 0.100000001490116 "MIDI sample dump" "unsupported")
	    (list "d40130.sdx" 1 10000 0.100000001490116 "Sample dump" "unsigned little endian short (16 bits)")
	    (list "d40130.sf" 1 10000 0.100000001490116 "IRCAM" "little endian short (16 bits)")
	    (list "d40130.smp" 1 8000 0.125 "SMP" "little endian short (16 bits)")
	    (list "d40130.sou" 1 8000 0.125 "SBStudioII" "little endian short (16 bits)")
	    (list "d40130.st3" 1 8000 0.125 "Digiplayer ST3" "unsigned little endian short (16 bits)")
	    (list "d40130.uwf" 1 8000 0.125249996781349 "Ultratracker" "little endian short (16 bits)")
	    (list "d40130.voc" 1 10000 0.100100003182888 "VOC" "unsigned byte (8 bits)")
	    (list "d40130.w00" 1 16000 0.0625 "TX-16" "unsupported")
	    (list "d40130.wav" 1 10000 0.100000001490116 "RIFF" "little endian short (16 bits)")
	    (list "d43.wav" 1 10000 0.100000001490116 "RIFF" "little endian short (16 bits)")
	    (list "digit0v0.aiff" 1 8000 0.560000002384186 "AIFC" "big endian short (16 bits)")
	    (list "esps-16.snd" 1 8000 3.09737491607666 "ESPS" "big endian short (16 bits)")
	    (list "forest.aiff" 2 44100 3.907143 "AIFF" "big endian short (16 bits)" 24981 144332)
	    (list "g721.au" 1 11025 4.35328817367554 "Sun" "unsupported")
	    (list "g722.aifc" 1 44100 0.0184353739023209 "AIFC" "unsupported")
	    (list "gong.wve" 1 8000 3.96799993515015 "PSION" "alaw (8 bits)")
	    (list "gsm610.wav" 1 11025 1.7687075138092 "RIFF" "unsupported")
	    (list "inrs-16.snd" 1 8000 2.46399998664856 "INRS" "little endian short (16 bits)")
	    (list "kirk.wve" 1 8000 1.40799999237061 "PSION" "alaw (8 bits)")
	    (list "loop.aiff" 1 44100 0.0367120169103146 "AIFC" "big endian short (16 bits)" 12 23)
	    (list "m.asf" 1 8000 0.0 "asf" "unsupported")
	    (list "mary-sun4.sig" 1 8000 5.95137500762939 "Comdisco SPW signal" "big endian double (64 bits)")
	    (list "mocksong.wav" 1 11025 7.86956930160522 "RIFF" "little endian short (16 bits)")
	    (list "mono24.wav" 1 22050 1.98997735977173 "RIFF" "little endian int (24 bits)")
	    (list "msadpcm.wav" 1 11025 4.43501138687134 "RIFF" "unsupported")
	    (list "n8.snd" 1 44100 0.0367800444364548 "Sun" "signed byte (8 bits)")
	    (list "nasahal.aif" 1 11025 9.89841270446777 "AIFF" "signed byte (8 bits)")
	    (list "nasahal.avi" 1 11025 0.0 "AVI" "unsupported")
	    (list "nasahal.dig" 1 11025 9.89841270446777 "Sound Designer 1" "big endian short (16 bits)")
	    (list "nasahal.ivc" 2 44100 0.449002265930176 "raw (no header)" "big endian short (16 bits)")
	    (list "nasahal.pat" 1 11025 3.95410442352295 "Gravis Ultrasound patch" "unsigned byte (8 bits)")
	    (list "nasahal.snd" 1 11025 9.89841270446777 "SNDT" "unsigned byte (8 bits)")
	    (list "nasahal.svx" 1 11025 9.89841270446777 "SVX8" "signed byte (8 bits)")
	    (list "nasahal.v8" 1 8000 13.6412496566772 "Covox V8" "unsigned byte (8 bits)")
	    (list "nasahal.voc" 1 11025 9.89941024780273 "VOC" "unsigned byte (8 bits)")
	    (list "nasahal.vox" 2 44100 0.224444448947906 "raw (no header)" "big endian short (16 bits)")
	    (list "nasahal8.wav" 1 11025 9.89841270446777 "RIFF" "unsigned byte (8 bits)")
	    (list "nasahalad.smp" 1 11025 4.94920635223389 "Goldwave sample" "little endian short (16 bits)")
	    (list "next-16.snd" 1 22050 1.00004529953003 "Sun" "big endian short (16 bits)")
	    (list "next-8.snd" 1 22050 0.226757362484932 "Sun" "signed byte (8 bits)")
	    (list "next-dbl.snd" 1 22050 0.226757362484932 "Sun" "big endian double (64 bits)")
	    (list "next-flt.snd" 1 22050 0.226757362484932 "Sun" "big endian float (32 bits)")
	    (list "next-mulaw.snd" 1 8012 2.03295063972473 "Sun" "mulaw (8 bits)")
	    (list "next24.snd" 1 44100 0.0367800444364548 "Sun" "big endian int (24 bits)")
	    (list "nist-01.wav" 1 16000 2.26912498474121 "NIST" "little endian short (16 bits)")
	    (list "nist-10.wav" 1 16000 2.26912498474121 "NIST" "big endian short (16 bits)")
	    (list "nist-16.snd" 1 16000 1.02400004863739 "NIST" "big endian short (16 bits)")
	    (list "nist-shortpack.wav" 1 16000 4.53824996948242 "NIST" "unsupported")
	    (list "none.aifc" 1 44100 0.0367800444364548 "AIFC" "big endian short (16 bits)")
	    (list "nylon2.wav" 2 22050 1.14376413822174 "RIFF" "unsupported")
	    (list "o2.avr" 1 44100 0.0183900222182274 "AVR" "big endian short (16 bits)")
	    (list "o2.bicsf" 1 44100 0.0367800444364548 "IRCAM" "big endian short (16 bits)")
	    (list "o2.mpeg1" 2 44100 0.00709750549867749 "raw (no header)" "big endian short (16 bits)")
	    (list "o2.sd2" 2 44100 0.0183900222182274 "raw (no header)" "big endian short (16 bits)")
	    (list "o2.sf2" 1 44100 0.0367800444364548 "SoundFont" "little endian short (16 bits)")
	    (list "o2.smp" 1 8000 0.202749997377396 "SMP" "little endian short (16 bits)")
	    (list "o2.voc" 1 44100 0.0368934236466885 "VOC" "little endian short (16 bits)")
	    (list "o2.wave" 1 44100 0.0367800444364548 "RIFF" "little endian short (16 bits)")
	    (list "o2_12bit.aiff" 1 44100 0.0367800444364548 "AIFF" "big endian short (16 bits)")
	    (list "o2_18bit.aiff" 1 44100 0.0367800444364548 "AIFF" "big endian int (24 bits)")
	    (list "o2_711u.wave" 1 44100 0.0367800444364548 "RIFF" "mulaw (8 bits)")
	    (list "o2_722.snd" 1 44100 0.0183900222182274 "Sun" "unsupported")
	    (list "o2_726.aiff" 1 8000 0.0367499999701977 "AIFC" "unsupported")
	    (list "o2_726.snd" 1 44100 0.0230158735066652 "Sun" "unsupported")
	    (list "o2_728.aiff" 1 8000 0.0367499999701977 "AIFC" "unsupported")
	    (list "o2_8.iff" 1 44100 0.0367800444364548 "SVX8" "signed byte (8 bits)")
	    (list "o2_8.voc" 1 44100 0.0370294786989689 "VOC" "unsigned byte (8 bits)")
	    (list "o2_dvi.wave" 1 44100 0.0232199542224407 "RIFF" "unsupported")
	    (list "o2_float.bicsf" 1 44100 0.0367800444364548 "IRCAM" "big endian float (32 bits)")
	    (list "o2_gsm.aiff" 1 8000 0.0367499999701977 "AIFC" "unsupported")
	    (list "o2_u8.avr" 1 44100 0.0367800444364548 "AVR" "unsigned byte (8 bits)")
	    (list "o2_u8.wave" 1 44100 0.0367800444364548 "RIFF" "unsigned byte (8 bits)")
	    (list "oboe.g721" 1 22050 1.15287983417511 "Sun" "unsupported")
	    (list "oboe.g723_24" 1 22050 0.864761888980865 "Sun" "unsupported")
	    (list "oboe.g723_40" 1 22050 1.44126987457275 "Sun" "unsupported")
	    (list "oboe.sf2" 1 22050 2.30512475967407 "SoundFont" "little endian short (16 bits)")
	    (list "oboe.paf" 1 22050 2.305125 "Ensoniq Paris" "big endian short (16 bits)")
	    (list "oboe.smp" 1 22050 2.305125 "snack SMP" "little endian short (16 bits)")
	    (list "oboe.nsp" 1 22050 2.305125 "CSL" "little endian short (16 bits)")
	    (list "oki.snd" 2 44100 0.0041950112208724 "raw (no header)" "big endian short (16 bits)")
	    (list "orv-dvi-adpcm.wav" 1 44100 1.92725622653961 "RIFF" "unsupported")
	    (list "riff-16.snd" 1 22050 1.88766443729401 "RIFF" "little endian short (16 bits)")
	    (list "riff-8-u.snd" 1 11025 0.506848096847534 "RIFF" "unsigned byte (8 bits)")
	    (list "rooster.wve" 1 8000 2.04800009727478 "PSION" "alaw (8 bits)")
	    (list "sd1-16.snd" 1 44100 0.400544226169586 "Sound Designer 1" "big endian short (16 bits)")
	    (list "segfault.snd" 16777216 576061440 1.24986669902682e-7 "Sun" "unsupported")
	    (list "sf-16.snd" 1 22050 1.88766443729401 "IRCAM" "big endian short (16 bits)")
	    (list "si654.adc" 1 16000 6.71362495422363 "ADC/OGI" "big endian short (16 bits)")
	    (list "smp-16.snd" 1 8000 5.2028751373291 "SMP" "little endian short (16 bits)")
	    (list "sound.pat" 1 8000 1.95050001144409 "Gravis Ultrasound patch" "unsigned little endian short (16 bits)")
	    (list "sound.sap" 1 8000 1.95050001144409 "Goldwave sample" "little endian short (16 bits)")
	    (list "sound.sds" 1 8000 1.95050001144409 "MIDI sample dump" "unsupported")
	    (list "sound.sfr" 1 8000 1.95050001144409 "SRFS" "little endian short (16 bits)")
	    (list "sound.v8" 1 8000 1.95050001144409 "Covox V8" "unsigned byte (8 bits)")
	    (list "sound.vox" 2 44100 0.044217687100172 "raw (no header)" "big endian short (16 bits)")
	    (list "step.omf" 1 11025 8.70666694641113 "OMF" "signed byte (8 bits)")
	    (list "step.qt" 1 11025 8.70630359649658 "Quicktime" "unsigned byte (8 bits)")
	    (list "sun-16-afsp.snd" 1 8000 2.9760000705719 "Sun" "big endian short (16 bits)")
	    (list "sun-mulaw.snd" 1 8000 4.61950016021729 "Sun" "mulaw (8 bits)")
	    (list "sw1038t_short.wav" 2 8000 6.0 "NIST" "mulaw (8 bits)")
	    (list "swirl.pat" 1 22050 1.0619500875473 "Gravis Ultrasound patch" "unsigned little endian short (16 bits)")
	    (list "sy85.snd" 1 8000 5.05600023269653 "Sy-85" "big endian short (16 bits)")
	    (list "sy99.snd" 1 8000 4.54400014877319 "Sy-99" "big endian short (16 bits)")
	    (list "telephone.wav" 1 16000 2.27881240844727 "NIST" "little endian short (16 bits)")
	    (list "truspech.wav" 1 8000 1.1599999666214 "RIFF" "unsupported")
	    (list "ulaw.aifc" 1 44100 0.0367800444364548 "AIFC" "mulaw (8 bits)")
	    (list "voc-8-u.snd" 1 8000 1.49937498569489 "VOC" "unsigned byte (8 bits)")
	    (list "voxware.wav" 1 8000 0.324000000953674 "RIFF" "unsupported")
	    (list "wd.w00" 1 8000 0.202749997377396 "Sy-99" "big endian short (16 bits)")
	    (list "wd1.smp" 1 8000 0.202749997377396 "SMP" "little endian short (16 bits)")
	    (list "wd1.wav" 1 44100 0.0367800444364548 "RIFF" "little endian short (16 bits)")
	    (list "wheel.mat" 2 44100 0.145646259188652 "raw (no header)" "big endian short (16 bits)")
	    (list "b8.pvf" 1 44100 0.036803 "Portable Voice Format" "signed byte (8 bits)")
	    (list "b16.pvf" 1 44100 0.036803 "Portable Voice Format" "big endian short (16 bits)")
	    (list "b32.pvf" 1 44100 0.036803 "Portable Voice Format" "big endian int (32 bits)")
	    (list "wood.dsf" 1 8000 0.202749997377396 "Delusion" "little endian short (16 bits)")
	    (list "wood.dvi" 1 22100 0.0278733037412167 "RIFF" "unsupported")
	    (list "wood.dwd" 1 22100 0.0733936652541161 "DiamondWare" "signed byte (8 bits)")
	    (list "wood.fsm" 1 8000 0.202999994158745 "Farandole" "little endian short (16 bits)")
	    (list "wood.mad" 1 22100 0.0372398197650909 "RIFF" "unsupported")
	    (list "wood.maud" 1 44100 0.0183900222182274 "MAUD" "big endian short (16 bits)")
	    (list "wood.pat" 1 22100 0.0733936652541161 "Gravis Ultrasound patch" "little endian short (16 bits)")
	    (list "wood.riff" 1 44100 0.0367800444364548 "RIFF" "little endian short (16 bits)")
	    (list "wood.rifx" 1 44100 0.0367800444364548 "RIFF" "big endian short (16 bits)")
	    (list "wood.sds" 1 22100 0.0733936652541161 "MIDI sample dump" "unsupported")
	    (list "wood.sdx" 1 22100 0.0733936652541161 "Sample dump" "unsigned little endian short (16 bits)")
	    (list "wood.sf" 1 44100 0.0367800444364548 "IRCAM" "big endian short (16 bits)")
	    (list "wood.sndr" 2 44100 0.0092290248721838 "raw (no header)" "big endian short (16 bits)")
	    (list "wood.sndt" 1 44100 0.0367800444364548 "SNDT" "unsigned byte (8 bits)")
	    (list "wood.st3" 1 8000 0.202749997377396 "Digiplayer ST3" "unsigned little endian short (16 bits)")
	    (list "wood.uwf" 1 8000 0.202999994158745 "Ultratracker" "little endian short (16 bits)")
	    (list "wood.w00" 1 16000 0.101374998688698 "TX-16" "unsupported")
	    (list "wood12.aiff" 1 44100 0.0367800444364548 "AIFF" "big endian short (16 bits)")
	    (list "wood16.dwd" 2 44100 0.0367800444364548 "DiamondWare" "little endian short (16 bits)")
	    (list "wood16.wav" 2 44100 0.0367800444364548 "RIFF" "little endian short (16 bits)")
	    (list "wood16.nsp" 2 44100 0.0367800444364548 "CSL" "little endian short (16 bits)")
	    (list "wood16.smp" 2 44100 0.0367800444364548 "snack SMP" "little endian short (16 bits)")
	    (list "wood24.aiff" 1 44100 0.0367800444364548 "AIFF" "big endian int (24 bits)")
	    (list "woodblock.aiff" 1 44100 0.0367800444364548 "AIFF" "big endian short (16 bits)")
	    (list "woodflt.snd" 1 44100 0.0367800444364548 "Sun" "big endian float (32 bits)")
	    (list "zulu_a4.w11" 1 33000 1.21987879276276 "TX-16" "unsupported")))))
    )


;;; ---------------- test 3: can variables be set/reset ----------------
(if (or full-test (= snd-test 3))
    (begin
      (if (procedure? trace-hook) (trace-hook 3))
      (open-sound "oboe.snd")
      (if (file-exists? "funcs.cl") (load "funcs.cl"))
      (let ((td (temp-dir)))
	(set! (temp-dir) "/hoho/wasup")
	(if (not (string=? (temp-dir) "/hoho/wasup")) (snd-display (format #f ";set temp-dir: ~A?" (temp-dir))))
	(if td 
	    (set! (temp-dir) td)
	    (set! (temp-dir) "")))
      (if (fneq (sample 1000) 0.0328) (snd-display (format #f ";sample: ~A?" (sample 1000))))
      (if (or (not (hook? output-name-hook)) (not (hook-empty? output-name-hook)))
	  (snd-display (format #f ";output-name-hook: ~A?" output-name-hook)))
      (if (or (not (hook? output-comment-hook)) (not (hook-empty? output-comment-hook)))
	  (snd-display (format #f ";output-comment-hook: ~A?" output-comment-hook)))
      (if (or (not (hook? mark-drag-hook)) (not (hook-empty? mark-drag-hook)))
	  (snd-display (format #f ";mark-drag-hook: ~A?" mark-drag-hook)))
      (if (or (not (hook? mouse-drag-hook)) (not (hook-empty? mouse-drag-hook)))
	  (snd-display (format #f ";mouse-drag-hook: ~A?" mouse-drag-hook)))
      (if (or (not (hook? mouse-release-hook)) (not (hook-empty? mouse-release-hook)))
	  (snd-display (format #f ";mouse-release-hook: ~A?" mouse-release-hook)))
      (if (or (not (hook? mouse-press-hook)) (not (hook-empty? mouse-press-hook)))
	  (snd-display (format #f ";mouse-press-hook: ~A?" mouse-press-hook)))
      (if (or (not (hook? start-playing-hook)) (not (hook-empty? start-playing-hook)))
	  (snd-display (format #f ";start-playing-hook: ~A?" start-playing-hook)))
      (if (or (not (hook? stop-playing-hook)) (not (hook-empty? stop-playing-hook)))
	  (snd-display (format #f ";stop-playing-hook: ~A?" stop-playing-hook)))
      (if (or (not (hook? key-press-hook)) (not (hook-empty? key-press-hook)))
	  (snd-display (format #f ";key-press-hook: ~A?" key-press-hook)))
      (if (or (not (hook? snd-error-hook)) (not (hook-empty? snd-error-hook)))
	  (snd-display (format #f ";snd-error-hook: ~A?" snd-error-hook)))
      (if (or (not (hook? snd-warning-hook)) (not (hook-empty? snd-warning-hook)))
	  (snd-display (format #f ";snd-warning-hook: ~A?" snd-warning-hook)))
      (if (or (not (hook? name-click-hook)) (not (hook-empty? name-click-hook)))
	  (snd-display (format #f ";name-click-hook: ~A?" name-click-hook)))
      (if (or (not (hook? enved-hook)) (not (hook-empty? enved-hook)))
	  (snd-display (format #f ";enved-hook: ~A?" enved-hook)))
      (if (or (not (hook? mouse-enter-label-hook)) (not (hook-empty? mouse-enter-label-hook)))
	  (snd-display (format #f ";mouse-enter-label-hook: ~A?" mouse-enter-label-hook)))
      (if (or (not (hook? mouse-enter-graph-hook)) (not (hook-empty? mouse-enter-graph-hook)))
	  (snd-display (format #f ";mouse-enter-graph-hook: ~A?" mouse-enter-graph-hook)))
      (if (or (not (hook? mouse-enter-listener-hook)) (not (hook-empty? mouse-enter-listener-hook)))
	  (snd-display (format #f ";mouse-enter-listener-hook: ~A?" mouse-enter-listener-hook)))
      (if (or (not (hook? mouse-leave-label-hook)) (not (hook-empty? mouse-leave-label-hook)))
	  (snd-display (format #f ";mouse-leave-label-hook: ~A?" mouse-leave-label-hook)))
      (if (or (not (hook? mouse-leave-graph-hook)) (not (hook-empty? mouse-leave-graph-hook)))
	  (snd-display (format #f ";mouse-leave-graph-hook: ~A?" mouse-leave-graph-hook)))
      (if (or (not (hook? mouse-leave-listener-hook)) (not (hook-empty? mouse-leave-listener-hook)))
	  (snd-display (format #f ";mouse-leave-listener-hook: ~A?" mouse-leave-listener-hook)))
      (if (or (not (hook? property-changed-hook)) (not (hook-empty? property-changed-hook)))
	  (snd-display (format #f ";property-changed-hook: ~A?" property-changed-hook)))
      (if (or (not (hook? initial-graph-hook)) (not (hook-empty? initial-graph-hook)))
	  (snd-display (format #f ";initial-graph-hook: ~A?" initial-graph-hook)))
      (if (or (not (hook? after-graph-hook)) (not (hook-empty? after-graph-hook)))
	  (snd-display (format #f ";after-graph-hook: ~A?" after-graph-hook)))
      (if (or (not (hook? graph-hook)) (not (hook-empty? graph-hook)))
	  (snd-display (format #f ";graph-hook: ~A?" graph-hook)))

      (set! (show-controls) #t)
      (enved-dialog) 
      (set! (enved-active-env) '(0.0 0.0 1.0 1.0 2.0 0.0))
      (if (not (equal? (enved-active-env) (list 0.0 0.0 1.0 1.0 2.0 0.0)))
	  (snd-display (format #f ";set enved-active-env: ~A?" (enved-active-env))))
      (orientation-dialog) 

      (letrec ((test-vars
		(lambda (lst)
		  (if (not (null? lst))
		      (let ((name (list-ref (car lst) 0))
			    (getfnc (list-ref (car lst) 1))
			    (setfnc (list-ref (car lst) 3))
			    (initval (list-ref (car lst) 2))
			    (newval (list-ref (car lst) 4)))
			
			(setfnc newval)
			(let ((nowval (getfnc)))
			  (if (not (equal? newval nowval))
			      (if (and (number? newval) (inexact? newval))
				  (if (> (abs (- newval nowval)) .01)
				      (snd-display (format #f ";~A /= ~A (~A)~%" name newval nowval)))
				  (snd-display (format #f ";~A /= ~A (~A)~%" name newval nowval))))
			  (setfnc initval)
			  (set! (getfnc) newval)
			  (let ((nowval (getfnc)))
			    (if (not (equal? newval nowval))
				(if (and (number? newval) (inexact? newval))
				    (if (> (abs (- newval nowval)) .01)
					(snd-display (format #f ";set! ~A /= ~A (~A)~%" name newval nowval)))
				    (snd-display (format #f ";set! ~A /= ~A (~A)~%" name newval nowval))))
			    (setfnc initval))
			  (test-vars (cdr lst))))))))
	(test-vars 
	 (list
	  (list 'amp amp 1.0 set-amp 0.5)
	  (list 'ask-before-overwrite ask-before-overwrite #f set-ask-before-overwrite #t)
	  (list 'audio-state-file audio-state-file ".snd-mixer" set-audio-state-file "not-a-file")
	  (list 'audio-input-device audio-input-device 0 set-audio-input-device 1)
	  (list 'audio-output-device audio-output-device 0 set-audio-output-device 1)
	  (list 'auto-resize auto-resize #t set-auto-resize #f)
	  (list 'auto-update auto-update #f set-auto-update #t)
	  (list 'channel-style channel-style 0 set-channel-style 1)
	  (list 'colormap colormap 2 set-colormap 0)
	  (list 'color-cutoff color-cutoff 0.003 set-color-cutoff 0.01)
	  (list 'color-inverted color-inverted #t set-color-inverted #f)
	  (list 'color-scale color-scale 1.0 set-color-scale 0.5)
	  (list 'contrast contrast 0.0 set-contrast 0.5)
	  (list 'contrast-amp contrast-amp 1.0 set-contrast-amp 0.5)
	  (list 'contrasting contrasting #f set-contrasting #t)
	  (list 'corruption-time corruption-time 60.0 set-corruption-time 120.0)
	  (list 'cursor-follows-play cursor-follows-play #f set-cursor-follows-play #t)
	  (list 'dac-folding dac-folding #t set-dac-folding #f)
	  (list 'dac-size dac-size 256 set-dac-size 512)
	  (list 'minibuffer-history-length minibuffer-history-length 8 set-minibuffer-history-length 16)
	  (list 'data-clipped data-clipped #f set-data-clipped #t)
	  (list 'default-output-chans default-output-chans 1 set-default-output-chans 2)
	  (list 'default-output-format default-output-format 1 set-default-output-format 1)
	  (list 'default-output-srate default-output-srate 22050 set-default-output-srate 44100)
	  (list 'default-output-type default-output-type 0 set-default-output-type 1)
	  (list 'dot-size dot-size 1 set-dot-size 4)
	  (list 'enved-base enved-base 1.0  set-enved-base 1.5)
	  (list 'enved-clipping enved-clipping #f set-enved-clipping #t)
	  (list 'enved-dBing enved-dBing #f set-enved-dBing #t)
	  (list 'enved-exping enved-exping #f set-enved-exping #t)
	  (list 'enved-power enved-power 3.0 set-enved-power 3.5)
	  (list 'enved-target enved-target 0 set-enved-target 1)
	  (list 'enved-waving enved-waving #f set-enved-waving #t)
	  (list 'eps-file eps-file "snd.eps" set-eps-file "snd-1.eps")
	  (list 'eps-left-margin eps-left-margin 0.0 set-eps-left-margin 72.0)
	  (list 'eps-bottom-margin eps-bottom-margin 0.0 set-eps-bottom-margin 36.0)
	  (list 'expand expand 1.0 set-expand 2.0)
	  (list 'expand-hop expand-hop 0.05 set-expand-hop 0.1)
	  (list 'expand-length expand-length 0.15 set-expand-length 0.2)
	  (list 'expand-ramp expand-ramp 0.4 set-expand-ramp 0.2)
	  (list 'expanding expanding #f set-expanding #t)
	  (list 'fft-beta fft-beta 0.0  set-fft-beta 0.5)
	  (list 'fft-log-frequency fft-log-frequency #f set-fft-log-frequency #t)
	  (list 'fft-log-magnitude fft-log-magnitude #f set-fft-log-magnitude #t)
	  (list 'fft-size fft-size 256 set-fft-size 512)
	  (list 'fft-style fft-style 0 set-fft-style 1)
	  (list 'fft-window fft-window 6 set-fft-window 5)
	  (list 'ffting ffting #f set-ffting #t)
	  (list 'filter-dBing filter-dBing #f set-filter-dBing #t)
	  (list 'filter-env filter-env (list 0.0 1.0 1.0 1.0) set-filter-env (list 0.0 1.0 1.0 0.0))
	  (list 'filter-env-order filter-env-order 40 set-filter-env-order 20)
	  (list 'filter-env-in-hz filter-env-in-hz #f set-filter-env-in-hz #t)
	  (list 'filter-order filter-order 20 set-filter-order 40)
	  (list 'filtering filtering #f set-filtering #t)
	  (list 'graph-cursor graph-cursor 34 set-graph-cursor 33)
	  (list 'graph-style graph-style 0 set-graph-style 1)
	  (list 'just-sounds just-sounds #f set-just-sounds #t)
	  (list 'line-size line-size 128 set-line-size 64)
	  (list 'listener-prompt listener-prompt ">" set-listener-prompt ":")
	  (list 'max-fft-peaks max-fft-peaks 100 set-max-fft-peaks 10)
	  (list 'max-regions max-regions 16 set-max-regions 6)
	  (list 'min-dB min-dB -60.0 set-min-dB -90.0)
	  (list 'mix-waveform-height mix-waveform-height 20 set-mix-waveform-height 40)
	  (list 'mix-tag-height mix-tag-height 14 set-mix-tag-height 20)
	  (list 'mix-tag-width mix-tag-width 6 set-mix-tag-width 20)
	  (list 'movies movies #t set-movies #f)
	  (list 'selection-creates-region selection-creates-region #t set-selection-creates-region #f)
	  (list 'normalize-fft normalize-fft normalize-by-channel set-normalize-fft dont-normalize)
	  (list 'normalize-on-open normalize-on-open #t set-normalize-on-open #f)
	  (list 'prefix-arg prefix-arg 0 set-prefix-arg 123)
	  (list 'previous-files-sort previous-files-sort 0 set-previous-files-sort 1)
	  (list 'print-length print-length 12 set-print-length 16)
	  (list 'recorder-autoload recorder-autoload #f set-recorder-autoload #t)
	  (list 'recorder-out-chans recorder-out-chans 2 set-recorder-out-chans 1)
	  (list 'recorder-buffer-size recorder-buffer-size 4096 set-recorder-buffer-size 256)
	  (list 'recorder-max-duration recorder-max-duration 1000000.0 set-recorder-max-duration 1000.0)
	  (list 'recorder-trigger recorder-trigger 0.0 set-recorder-trigger 0.1)
	  (list 'reverb-decay reverb-decay 1.0 set-reverb-decay 2.0)
	  (list 'reverb-feedback reverb-feedback 1.09 set-reverb-feedback 1.6)
	  (list 'reverb-length reverb-length 1.0 set-reverb-length 2.0)
	  (list 'reverb-lowpass reverb-lowpass 0.7 set-reverb-lowpass 0.9)
	  (list 'reverb-scale reverb-scale 0.0 set-reverb-scale 0.2)
	  (list 'reverbing reverbing #f set-reverbing #t)
	  (list 'save-state-on-exit save-state-on-exit #f set-save-state-on-exit #t)
	  (list 'show-axes show-axes 1 set-show-axes 0)
	  (list 'show-fft-peaks show-fft-peaks #f set-show-fft-peaks #t)
	  (list 'show-indices show-indices #f set-show-indices #t)
	  (list 'show-backtrace show-backtrace #f set-show-backtrace #t)
	  (list 'show-marks show-marks #t set-show-marks #f)
	  (list 'show-mix-waveforms show-mix-waveforms #t set-show-mix-waveforms #f)
	  (list 'show-selection-transform show-selection-transform #f set-show-selection-transform #t)
	  (list 'show-usage-stats show-usage-stats #f set-show-usage-stats #t)
	  (list 'show-y-zero show-y-zero #f set-show-y-zero #t)
	  (list 'sinc-width sinc-width 10 set-sinc-width 40)
	  (list 'spectro-cutoff spectro-cutoff 1.0 set-spectro-cutoff 0.7)
	  (list 'spectro-hop spectro-hop 4 set-spectro-hop 10)
	  (list 'spectro-start spectro-start 0.0 set-spectro-start 0.1)
	  (list 'spectro-x-angle spectro-x-angle 90.0 set-spectro-x-angle 60.0)
	  (list 'spectro-x-scale spectro-x-scale 1.0 set-spectro-x-scale 2.0)
	  (list 'spectro-y-angle spectro-y-angle 0.0 set-spectro-y-angle 60.0)
	  (list 'spectro-y-scale spectro-y-scale 1.0 set-spectro-y-scale 2.0)
	  (list 'spectro-z-angle spectro-z-angle 358.0 set-spectro-z-angle 60.0)
	  (list 'spectro-z-scale spectro-z-scale 0.1 set-spectro-z-scale 0.2)
	  (list 'speed speed 1.0 set-speed 0.5)
	  (list 'speed-style speed-style 0 set-speed-style 1)
	  (list 'speed-tones speed-tones 12 set-speed-tones 18)
	  (list 'sync sync 0 set-sync 1)
	  (list 'tiny-font tiny-font "6x12" set-tiny-font "9x15")
	  (list 'transform-type transform-type 0 set-transform-type 1)
	  (list 'use-sinc-interp use-sinc-interp #t set-use-sinc-interp #f)
	  (list 'verbose-cursor verbose-cursor #f set-verbose-cursor #t)
	  (list 'vu-size vu-size 1.0 set-vu-size 2.0)
	  (list 'vu-font-size vu-font-size 1.0 set-vu-font-size 2.0)
	  (list 'wavelet-type wavelet-type 0 set-wavelet-type 1)
	  (list 'waving waving #f set-waving #t)
	  (list 'wavo wavo #f set-wavo #t)
	  (list 'wavo-hop wavo-hop 3 set-wavo-hop 6)
	  (list 'wavo-trace wavo-trace 64 set-wavo-trace 128)
	  (list 'with-mix-tags with-mix-tags #t set-with-mix-tags #f)
	  (list 'x-axis-style x-axis-style 0 set-x-axis-style 1)
	  (list 'zero-pad zero-pad 0 set-zero-pad 1)
	  (list 'zoom-focus-style zoom-focus-style 2 set-zoom-focus-style 1))))
    
      (letrec ((test-bad-args
		(lambda (lst)
		  (if (not (null? lst))
		      (let ((name (list-ref (car lst) 0))
			    (getfnc (list-ref (car lst) 1))
			    (setfnc (list-ref (car lst) 3))
			    (initval (list-ref (car lst) 2))
			    (newvals (list-ref (car lst) 4)))
			(map (lambda (n)
			       (catch #t 
				      (lambda ()
					(setfnc n))
				      (lambda args (car args)))
			       (let ((nowval (getfnc)))
				 (if (equal? n nowval)
				     (snd-display (format #f ";~A = ~A (~A)~%" name n initval)))
				 (setfnc initval)))
			     newvals)
			(test-bad-args (cdr lst)))))))
	(test-bad-args
	 (list
	  (list 'amp amp 1.0 set-amp '(-1.0 123.123))
	  (list 'channel-style channel-style 0 set-channel-style '(32 -1 1.0))
	  (list 'colormap colormap 2 set-colormap '(321 -123))
	  (list 'color-cutoff color-cutoff 0.003 set-color-cutoff '(-1.0 123.123))
	  (list 'color-scale color-scale 1.0 set-color-scale '(-32.0 32.0))
	  (list 'contrast contrast 0.0 set-contrast '(-123.123 123.123))
	  (list 'dac-size dac-size 256 set-dac-size '(-1 0 -123))
	  (list 'dot-size dot-size 1 set-dot-size '(0 -1 -123))
	  (list 'enved-target enved-target 0 set-enved-target '(123 -321))
	  (list 'expand expand 1.0 set-expand '(-1.0 0.0))
	  (list 'expand-hop expand-hop 0.05 set-expand-hop '(-1.0))
	  (list 'expand-length expand-length 0.15 set-expand-length '(-1.0 0.0))
	  (list 'expand-ramp expand-ramp 0.4 set-expand-ramp '(-1.0 1.0 123.123))
	  (list 'fft-beta fft-beta 0.0  set-fft-beta '(-1.0 123.123))
	  (list 'fft-size fft-size 256 set-fft-size '(-1 0))
	  (list 'zero-pad zero-pad 0 set-zero-pad '(-1 -123))
	  (list 'cursor-style cursor-style cursor-cross set-cursor-style '(-1))
	  (list 'cursor-style cursor-style cursor-line set-cursor-style '(2 123))
	  (list 'fft-style fft-style 0 set-fft-style '(-1 123))
	  (list 'fft-window fft-window 6 set-fft-window '(-1 123))
	  (list 'filter-env-order filter-env-order 40 set-filter-env-order '(-1 0))
	  (list 'filter-order filter-order 20 set-filter-order '(-10 -1 0))
	  (list 'max-fft-peaks max-fft-peaks 100 set-max-fft-peaks '(-1))
	  (list 'max-regions max-regions 16 set-max-regions '(-1 -123))
	  (list 'previous-files-sort previous-files-sort 0 set-previous-files-sort '(-1 123))
	  (list 'reverb-length reverb-length 1.0 set-reverb-length '(-1.0))
	  (list 'show-axes show-axes 1 set-show-axes '(-1 123))
	  (list 'sinc-width sinc-width 10 set-sinc-width '(-10))
	  (list 'spectro-cutoff spectro-cutoff 1.0 set-spectro-cutoff '(-1.0))
	  (list 'spectro-hop spectro-hop 4 set-spectro-hop '(-10 -1 0))
	  (list 'spectro-start spectro-start 0.0 set-spectro-start '(-1.0))
	  (list 'speed speed 1.0 set-speed '(0.0))
	  (list 'speed-style speed-style 0 set-speed-style '(-1 10))
	  (list 'transform-type transform-type 0 set-transform-type '(-1 123))
	  (list 'wavelet-type wavelet-type 0 set-wavelet-type '(-1 123))
	  (list 'wavo-hop wavo-hop 1 set-wavo-hop '(0 -123))
	  (list 'wavo-trace wavo-trace 1 set-wavo-trace '(0 -123))
	  (list 'x-axis-style x-axis-style 0 set-x-axis-style '(-1 123))
	  (list 'zoom-focus-style zoom-focus-style 2 set-zoom-focus-style '(-1 123)))))

      (set! (window-width) 300)
      (set! (window-height) 300)
      (if (not (equal? (window-width) 300))
	  (snd-display (format #f ";window width: ~A /= 300?" (window-width))))
      (if (not (equal? (window-height) 300))
	  (snd-display (format #f ";window height: ~A /= 300?" (window-height))))
      (set! (window-x) 123)
      (set! (window-y) 321)
      (if (not (equal? (window-x) 123))
	  (snd-display (format #f ";window x: ~A /= 123?" (window-x))))
      (if (not (equal? (window-y) 321))
	  (snd-display (format #f ";window y: ~A /= 321?" (window-y))))
      (set! (window-y) 10) ; get it back out of harm's way
      (set! (vu-font) "8x15")

      (close-sound 0) 
      (dismiss-all-dialogs)
      ))

(define play-sound
  (lambda (file)
    (let* ((sound-fd (mus-sound-open-input file))
           (chans (mus-sound-chans file))
           (frames (mus-sound-frames file))
           (bufsize 256)
           (data (make-sound-data chans bufsize))
           (bytes (* bufsize chans 2)))
      (mus-sound-read sound-fd 0 (1- bufsize) chans data)
      (let ((audio-fd (mus-audio-open-output mus-audio-default (mus-sound-srate file) chans mus-lshort bytes)))
	(if (= audio-fd -1)
	    (set! audio-fd (mus-audio-open-output mus-audio-default (mus-sound-srate file) chans mus-bshort bytes)))
	(if (= audio-fd -1)
	    (snd-display (format #f ";can't play ~A" file))
	    (begin
	      (do ((i 0 (+ i bufsize)))
		  ((>= i frames))
		(mus-audio-write audio-fd data bufsize)
		(mus-sound-read sound-fd 0 (1- bufsize) chans data))
	      (mus-audio-close audio-fd))))
      (mus-sound-close-input sound-fd))))


;;; ---------------- test 4: sndlib tests ----------------

(define (show-input-1 . arg)
  ;; from rtio.scm
  (define (card+device card device)
    (logior (ash card 16) device))
  (let* ((our-short (if (little-endian?) mus-lshort mus-bshort))
	 (our-srate 22050)
	 (our-dac-buffer-size-in-bytes 512)
	 (our-dac-buffer-size-in-shorts 256)
	 (our-chans 1)
	 (our-chan 0)
	 (our-default-card-number 0)
	 (in-sys (if (not (null? arg)) 
		     (car arg) 
		     our-default-card-number))
	 (in-port (mus-audio-open-input 
		   (card+device in-sys mus-audio-default) 
		   our-srate our-chans our-short our-dac-buffer-size-in-bytes))
	 (data (make-sound-data our-chans our-dac-buffer-size-in-shorts))
    	 (vobj (make-vct our-dac-buffer-size-in-shorts)))
    (if (= in-port -1)
	(snd-display "can't open audio input port!")
	(begin
	  (do ((i 0 (1+ i)))
	      ((= i 10))
	    (mus-audio-read in-port data our-dac-buffer-size-in-shorts)
	    (graph (sound-data->vct data our-chan vobj)))
	  (mus-audio-close in-port)))))

(if (or full-test (= snd-test 4))
    (let ((chns (mus-sound-chans "oboe.snd"))
	  (dl (mus-sound-data-location "oboe.snd"))
	  (fr (mus-sound-frames "oboe.snd"))
	  (smps (mus-sound-samples "oboe.snd"))
	  (len (mus-sound-length "oboe.snd"))
	  (size (mus-sound-datum-size "oboe.snd"))
	  (com (mus-sound-comment "oboe.snd"))
	  (sr (mus-sound-srate "oboe.snd"))
	  (m1 (mus-sound-max-amp-exists? "oboe.snd"))
	  (ma (mus-sound-max-amp "oboe.snd"))
	  (bytes (mus-data-format-bytes-per-sample (mus-sound-data-format "oboe.snd")))
	  (sys (mus-audio-systems)))
      (if (procedure? trace-hook) (trace-hook 4))
      (mus-sound-report-cache "hiho.tmp")
      (let ((p (open-input-file "hiho.tmp")))
	(if (not p)
	    (snd-display (format #f ";mus-sound-report-cache->hiho.tmp failed?"))
	    (let ((line (read-line p)))
	      (if (or (not (string? line))
		      (not (string=? "sound table:")))
		  (snd-display (format #f ";print-cache 1: ~A?" line)))
	      (close-port p)
	      (delete-file "hiho.tmp"))))
      (if (< (string-length (mus-audio-report)) 10)
	  (snd-display (format #f ";mus-audio-report: ~A" (mus-audio-report))))
      (if (and (not (= sys 1)) (not (= sys 2))) (snd-display (format #f ";mus-audio-systems: ~A?" sys)))
      (if (not (= chns 1)) (snd-display (format #f ";oboe: mus-sound-chans ~D?" chns)))
      (if (not (= dl 28)) (snd-display (format #f ";oboe: mus-sound-data-location ~D?" dl)))
      (if (not (= fr 50828)) (snd-display (format #f ";oboe: mus-sound-frames ~D?" fr)))
      (if (not (= smps 50828)) (snd-display (format #f ";oboe: mus-sound-samples ~D?" smps)))
      (if (not (= len (+ 28 (* 2 50828)))) (snd-display (format #f ";oboe: mus-sound-length ~D?" len)))
      (if (not (= size 2)) (snd-display (format #f ";oboe: mus-sound-datum-size ~D?" size)))
      (if (not (= bytes 2)) (snd-display (format #f ";oboe: sound-bytes ~D?" bytes)))
      (if (not (= sr 22050)) (snd-display (format #f ";oboe: mus-sound-srate ~D?" sr)))
      (if m1 (snd-display (format #f ";oboe: mus-sound-max-amp-exists before max-amp: ~A" m1)))
      (if (not (mus-sound-max-amp-exists? "oboe.snd")) 
	  (snd-display (format #f ";oboe: mus-sound-max-amp-exists after max-amp: ~A" (mus-sound-max-amp-exists? "oboe.snd"))))

      (let ((str (strftime "%d-%b %H:%M %Z" (localtime (mus-sound-write-date "oboe.snd")))))
	(if (not (string=? str "18-Oct 06:56 PDT"))
	    (snd-display (format #f ";mus-sound-write-date oboe.snd: ~A?" str))))
      (let ((str (strftime "%d-%b %H:%M %Z" (localtime (mus-sound-write-date "pistol.snd")))))
	(if (not (string=? str "05-Jan 15:43 PST"))
	    (snd-display (format #f ";mus-sound-write-date pistol.snd: ~A?" str))))

      (if com (snd-display (format #f ";oboe: mus-sound-comment ~A?" com)))
      (set! com (mus-sound-comment (string-append sf-dir "nasahal8.wav")))
      (if (or (not (string? com)) (not (string=? com "ICRD: 1997-02-22\nIENG: Paul R. Roger\nISFT: Sound Forge 4.0\n")))
	  (snd-display (format #f ";mus-sound-comment \"nasahal8.wav\") -> ~A?" com)))
      (set! com (mus-sound-comment (string-append sf-dir "8svx-8.snd")))
      (if (or (not (string? com)) (not (string=? com "File created by Sound Exchange  ")))
	  (snd-display (format #f ";mus-sound-comment \"8svx-8.snd\") -> ~A?" com)))
      (set! com (mus-sound-comment (string-append sf-dir "sun-16-afsp.snd")))
      (if (or (not (string? com)) (not (string=? com "AFspdate:1981/02/11 23:03:34 UTC")))
	  (snd-display (format #f ";mus-sound-comment \"sun-16-afsp.snd\") -> ~A?" com)))
      (set! com (mus-sound-comment (string-append sf-dir "smp-16.snd")))
      (if (or (not (string? com)) (not (string=? com "Converted using Sox.                                        ")))
	  (snd-display (format #f ";mus-sound-comment \"smp-16.snd\") -> ~A?" com)))
      (set! com (mus-sound-comment (string-append sf-dir "d40130.au")))
      (if (or (not (string? com)) (not (string=? com "1994 Jesus Villena")))
	  (snd-display (format #f ";mus-sound-comment \"d40130.au\") -> ~A?" com)))
      (set! com (mus-sound-comment (string-append sf-dir "wood.maud")))
      (if (or (not (string? com)) (not (string=? com "file written by SOX MAUD-export ")))
	  (snd-display (format #f ";mus-sound-comment \"wood.maud\") -> ~A?" com)))
      (set! com (mus-sound-comment (string-append sf-dir "addf8.sf_mipseb")))
      (if (or (not (string? com)) (not (string=? com "date=\"Feb 11 18:03:34 1981\" info=\"Original recorded at 20 kHz, 15-bit D/A, digitally filtered and resampled\" speaker=\"AMK female\" text=\"Add the sum to the product of these three.\" ")))
	  (snd-display (format #f ";mus-sound-comment \"addf8.sf_mipseb\") -> ~A?" com)))
      (set! com (mus-sound-comment (string-append sf-dir "mary-sun4.sig")))
      (if (or (not (string? com)) (not (string=? com "MARY HAD A LITTLE LAMB\n")))
	  (snd-display (format #f ";mus-sound-comment \"mary-sun4.sig\") -> ~A?" com)))
      (set! com (mus-sound-comment (string-append sf-dir "nasahal.pat")))
      (if (or (not (string? com)) (not (string=? com "This patch saved with Sound Forge 3.0.")))
	  (snd-display (format #f ";mus-sound-comment \"nasahal.pat\") -> ~A?" com)))
      (set! com (mus-sound-comment (string-append sf-dir "next-16.snd")))
      (if (or (not (string? com)) (not (string=? com ";Written on Mon 1-Jul-91 at 12:10 PDT  at localhost (NeXT) using Allegro CL and clm of 25-June-91")))
	  (snd-display (format #f ";mus-sound-comment \"next-16.snd\") -> ~A?" com)))
      (set! com (mus-sound-comment (string-append sf-dir "wood16.nsp")))
      (if (or (not (string? com)) (not (string=? com "Created by Snack   ")))
	  (snd-display (format #f ";mus-sound-comment \"wood16.nsp\") -> ~A?" com)))
      (set! com (mus-sound-comment (string-append sf-dir "wood.sdx")))
      (if (or (not (string? com)) (not (string=? com "1994 Jesus Villena")))
	  (snd-display (format #f ";mus-sound-comment \"wood.sdx\") -> ~A?" com)))
      (set! com (mus-sound-comment (string-append sf-dir "clmcom.aif")))
      (if (or (not (string? com)) (not (string=? com "this is a comment")))
	  (snd-display (format #f ";mus-sound-comment \"clmcom.aif\") -> ~A?" com)))
      (set! com (mus-sound-comment (string-append sf-dir "anno.aif")))
      (if (or (not (string? com)) (not (string=? com "1994 Jesus Villena\n")))
	  (snd-display (format #f ";mus-sound-comment \"anno.aif\") -> ~A?" com)))
      (set! com (mus-sound-comment (string-append sf-dir "telephone.wav")))
      (if (or (not (string? com)) (not (string=? com "sample_byte_format -s2 01\nchannel_count -i 1\nsample_count -i 36461\nsample_rate -i 16000\nsample_n_bytes -i 2\nsample_sig_bits -i 16\n")))
	  (snd-display (format #f ";mus-sound-comment \"telephone.wav\") -> ~A?" com)))
      
      (if (fneq (vector-ref ma 1) .14724) (snd-display (format #f ";oboe: mus-sound-max-amp ~F?" (vector-ref ma 1))))
      (if (not (= (vector-ref ma 0) 24971)) (snd-display (format #f ";oboe: mus-sound-max-amp at ~D?" (vector-ref ma 0))))
      (mus-sound-set-max-amp "oboe.snd" #(1234 .5))
      (set! ma (mus-sound-max-amp "oboe.snd"))
      (if (fneq (vector-ref ma 1) .5) (snd-display (format #f ";oboe: mus-sound-set-max-amp ~F?" (vector-ref ma 1))))
      (if (not (= (vector-ref ma 0) 1234)) (snd-display (format #f ";oboe: mus-sound-set-max-amp at ~D?" (vector-ref ma 0))))
      (set! ma (vector->list (mus-sound-max-amp "4.aiff")))
      (if (not (feql ma (list 810071 0.245 810071 0.490 810071 0.735 810071 0.980)))
	  (snd-display (format #f ";mus-sound-max-amp 4.aiff: ~A?" ma)))
      (mus-sound-set-max-amp "4.aiff" #(12345 .5 54321 .2 0 .1 9999 .01))
      (set! ma (vector->list (mus-sound-max-amp "4.aiff")))
      (if (not (feql ma (list 12345 .5 54321 .2 0 .1 9999 .01)))
	  (snd-display (format #f ";mus-sound-set-max-amp 4.aiff: ~A?" ma)))

      (if (and (not (= (mus-sound-type-specifier "oboe.snd") #x646e732e))  ;little endian reader
	       (not (= (mus-sound-type-specifier "oboe.snd") #x2e736e64))) ;big endian reader
	  (snd-display (format #f ";oboe: mus-sound-type-specifier: ~X?" (mus-sound-type-specifier "oboe.snd"))))
      (if (not (string=? (strftime "%d-%b-%Y %H:%M" (localtime (file-write-date "oboe.snd"))) "18-Oct-1999 06:56"))
	  (snd-display (format #f ";oboe: file-write-date: ~A?" (strftime "%d-%b-%Y %H:%M %Z" (localtime (file-write-date "oboe.snd"))))))
      (play-sound "oboe.snd")
      (let* ((ob (view-sound "oboe.snd"))
	     (samp (sample 1000 ob)))
	(save-sound-as "test.snd" ob mus-aifc)
	(let ((ab (open-sound "test.snd")))
	  (if (not (= (header-type ab) mus-aifc)) 
	      (snd-display (format #f ";save-as aifc -> ~A?" (mus-header-type-name (header-type ab)))))
	  (if (not (= (mus-sound-header-type "test.snd") mus-aifc)) 
	      (snd-display (format #f ";saved-as aifc -> ~A?" (mus-header-type-name (mus-sound-header-type "test.snd")))))
	  (if (fneq (sample 1000 ab) samp) (snd-display (format #f ";aifc[1000] = ~A?" (sample 1000 ab))))
	  (close-sound ab))
	(save-sound-as "test.snd" ob mus-raw)
	(let ((ab (open-raw-sound "test.snd" 1 22050 mus-bshort)))
	  (if (not (= (header-type ab) mus-raw)) 
	      (snd-display (format #f ";save-as raw -> ~A?" (mus-header-type-name (header-type ab)))))
	  (if (not (= (mus-sound-header-type "test.snd") mus-raw)) 
	      (snd-display (format #f ";saved-as raw -> ~A?" (mus-header-type-name (mus-sound-header-type "test.snd")))))
	  (if (fneq (sample 1000 ab) samp) (snd-display (format #f ";raw[1000] = ~A?" (sample 1000 ab))))
	  (close-sound ab))
	(save-sound-as "test.snd" ob mus-nist mus-bint)
	(let ((ab (open-sound "test.snd")))
	  (if (not (= (header-type ab) mus-nist)) 
	      (snd-display (format #f ";save-as nist -> ~A?" (mus-header-type-name (header-type ab)))))
	  (if (not (= (mus-sound-header-type "test.snd") mus-nist)) 
	      (snd-display (format #f ";saved-as nist -> ~A?" (mus-header-type-name (mus-sound-header-type "test.snd")))))
	  (if (not (= (data-format ab) mus-bint)) 
	      (snd-display (format #f ";save-as int -> ~A?" (mus-data-format-name (data-format ab)))))
	  (if (not (= (mus-sound-data-format "test.snd") mus-bint)) 
	      (snd-display (format #f ";saved-as int -> ~A?" (mus-data-format-name (mus-sound-data-format "test.snd")))))
	  (if (fneq (sample 1000 ab) samp) (snd-display (format #f ";nist[1000] = ~A?" (sample 1000 ab))))
	  (close-sound ab))
	(save-sound-as "test.snd" ob mus-riff mus-lfloat)
	(let ((ab (open-sound "test.snd")))
	  (if (not (= (header-type ab) mus-riff)) 
	      (snd-display (format #f ";save-as riff -> ~A?" (mus-header-type-name (header-type ab)))))
	  (if (not (= (mus-sound-header-type "test.snd") mus-riff)) 
	      (snd-display (format #f ";saved-as riff -> ~A?" (mus-header-type-name (mus-sound-header-type "test.snd")))))
	  (if (not (= (data-format ab) mus-lfloat)) 
	      (snd-display (format #f ";save-as float -> ~A?" (mus-data-format-name (data-format ab)))))
	  (if (not (= (mus-sound-data-format "test.snd") mus-lfloat)) 
	      (snd-display (format #f ";saved-as float -> ~A?" (mus-data-format-name (mus-sound-data-format "test.snd")))))
	  (if (fneq (sample 1000 ab) samp) (snd-display (format #f ";riff[1000] = ~A?" (sample 1000 ab))))
	  (close-sound ab))
	(save-sound-as "test.snd" ob mus-aiff mus-b24int)
	(let ((ab (open-sound "test.snd")))
	  (if (not (= (header-type ab) mus-aiff)) 
	      (snd-display (format #f ";save-as aiff -> ~A?" (mus-header-type-name (header-type ab)))))
	  (if (not (= (mus-sound-header-type "test.snd") mus-aiff)) 
	      (snd-display (format #f ";saved-as aiff -> ~A?" (mus-header-type-name (mus-sound-header-type "test.snd")))))
	  (if (not (= (data-format ab) mus-b24int))
	      (snd-display (format #f ";save-as 24-bit -> ~A?" (mus-data-format-name (data-format ab)))))
	  (if (not (= (mus-sound-data-format "test.snd") mus-b24int))
	      (snd-display (format #f ";saved-as 24-bit -> ~A?" (mus-data-format-name (mus-sound-data-format "test.snd")))))
	  (if (fneq (sample 1000 ab) samp) (snd-display (format #f ";aiff[1000] = ~A?" (sample 1000 ab))))
	  (close-sound ab))
	(save-sound-as "test.snd" ob mus-ircam mus-mulaw)
	(let ((ab (open-sound "test.snd")))
	  (if (not (= (header-type ab) mus-ircam)) 
	      (snd-display (format #f ";save-as ircam -> ~A?" (mus-header-type-name (header-type ab)))))
	  (if (not (= (mus-sound-header-type "test.snd") mus-ircam)) 
	      (snd-display (format #f ";saved-as ircam -> ~A?" (mus-header-type-name (mus-sound-header-type "test.snd")))))
	  (if (not (= (data-format ab) mus-mulaw))
	      (snd-display (format #f ";save-as mulaw -> ~A?" (mus-data-format-name (data-format ab)))))
	  (if (not (= (mus-sound-data-format "test.snd") mus-mulaw))
	      (snd-display (format #f ";saved-as mulaw -> ~A?" (mus-data-format-name (mus-sound-data-format "test.snd")))))
	  (if (fneq (sample 1000 ab) samp) (snd-display (format #f ";ircam[1000] = ~A?" (sample 1000 ab))))
	  (close-sound ab))
	(save-sound-as "test.snd" ob mus-next mus-alaw)
	(let ((ab (open-sound "test.snd")))
	  (if (not (= (header-type ab) mus-next)) 
	      (snd-display (format #f ";save-as next -> ~A?" (mus-header-type-name (header-type ab)))))
	  (if (not (= (mus-sound-header-type "test.snd") mus-next)) 
	      (snd-display (format #f ";saved-as next -> ~A?" (mus-header-type-name (mus-sound-header-type "test.snd")))))
	  (if (not (= (data-format ab) mus-alaw)) 
	      (snd-display (format #f ";save-as alaw -> ~A?" (mus-data-format-name (data-format ab)))))
	  (if (not (= (mus-sound-data-format "test.snd") mus-alaw)) 
	      (snd-display (format #f ";saved-as alaw -> ~A?" (mus-data-format-name (mus-sound-data-format "test.snd")))))
	  (if (fneq (sample 1000 ab) samp) (snd-display (format #f ";next (alaw)[1000] = ~A?" (sample 1000 ab))))
	  (close-sound ab))
	(save-sound-as "test.snd" ob mus-next mus-bdouble)
	(let ((ab (open-sound "test.snd")))
	  (if (not (= (header-type ab) mus-next)) 
	      (snd-display (format #f ";save-as dbl next -> ~A?" (mus-header-type-name (header-type ab)))))
	  (if (not (= (data-format ab) mus-bdouble)) 
	      (snd-display (format #f ";save-as dbl -> ~A?" (mus-data-format-name (data-format ab)))))
	  (if (fneq (sample 1000 ab) samp) (snd-display (format #f ";next (dbl)[1000] = ~A?" (sample 1000 ab))))
	  (close-sound ab))
	(save-sound-as "test.snd" ob mus-next mus-bshort)
	(let ((ab (open-sound "test.snd")))
	  (if (not (= (header-type ab) mus-next)) 
	      (snd-display (format #f ";save-as next -> ~A?" (mus-header-type-name (header-type ab)))))
	  (if (not (= (mus-sound-header-type "test.snd") mus-next)) 
	      (snd-display (format #f ";saved-as next -> ~A?" (mus-header-type-name (mus-sound-header-type "test.snd")))))
	  (if (not (= (data-format ab) mus-bshort)) 
	      (snd-display (format #f ";save-as short -> ~A?" (mus-data-format-name (data-format ab)))))
	  (if (not (= (mus-sound-data-format "test.snd") mus-bshort)) 
	      (snd-display (format #f ";saved-as short -> ~A?" (mus-data-format-name (mus-sound-data-format "test.snd")))))
	  (if (fneq (sample 1000 ab) samp) (snd-display (format #f ";next (short)[1000] = ~A?" (sample 1000 ab))))
	  (set! (data-format ab) mus-lshort)
	  (if (not (= (data-format ab) mus-lshort)) (snd-display (format #f ";set data-format: ~A?" (mus-data-format-name (data-format ab)))))
	  (set! (header-type ab) mus-aifc)
	  (if (not (= (header-type ab) mus-aifc)) (snd-display (format #f ";set header-type: ~A?" (mus-header-type-name (header-type ab)))))
	  (set! (channels ab) 3)
	  (if (not (= (channels ab) 3)) (snd-display (format #f ";set chans: ~A?" (channels ab))))
	  (set! (data-location ab) 1234)
	  (if (not (= (data-location ab) 1234)) (snd-display (format #f ";set data-location: ~A?" (data-location ab))))
	  (set! (srate ab) 12345)
	  (if (not (= (srate ab) 12345)) (snd-display (format #f ";set srate: ~A?" (srate ab))))
	  (close-sound ab))
	(save-sound-as "test.snd" ob mus-next mus-bfloat)
	(let ((ab (open-sound "test.snd")))
	  (if (not (= (header-type ab) mus-next)) 
	      (snd-display (format #f ";save-as next -> ~A?" (mus-header-type-name (header-type ab)))))
	  (if (not (= (mus-sound-header-type "test.snd") mus-next)) 
	      (snd-display (format #f ";saved-as next -> ~A?" (mus-header-type-name (mus-sound-header-type "test.snd")))))
	  (if (not (= (data-format ab) mus-bfloat)) 
	      (snd-display (format #f ";save-as float -> ~A?" (mus-data-format-name (data-format ab)))))
	  (if (not (= (mus-sound-data-format "test.snd") mus-bfloat)) 
	      (snd-display (format #f ";saved-as float -> ~A?" (mus-data-format-name (mus-sound-data-format "test.snd")))))
	  (if (fneq (sample 1000 ab) samp) (snd-display (format #f ";next (float)[1000] = ~A?" (sample 1000 ab))))
	  (close-sound ab))
	(close-sound ob))
      (let* ((ob (open-sound "oboe.snd"))
	     (sd (samples->sound-data)))
	(if (not (= (sound-data-length sd) 50828)) (snd-display (format #f ";oboe->sd: len ~A?" (sound-data-length sd))))
	(if (fneq (sound-data-ref sd 0 1000) .0328369) (snd-display (format #f ";oboe->sd[1000]: ~A?" (sound-data-ref sd 0 1000))))
	(close-sound ob))
      (let* ((vals (make-vector 32))
	     (err (mus-audio-mixer-read mus-audio-microphone mus-audio-amp 0 vals)))
	(if (= err -1) 
	    (snd-display (format #f ";mus-audio-mixer-read?"))
	    (begin
	      (mus-audio-save)
	      (let ((old-val (vector-ref vals 0)))
		(vector-set! vals 0 .5)
		(set! err (mus-audio-mixer-write mus-audio-microphone mus-audio-amp 0 vals))
		(if (= err -1) 
		    (snd-display (format #f ";mus-audio-mixer-write?")))
		(if (defined? 'clear-audio-inputs) (clear-audio-inputs))
		(mus-audio-restore)
		(mus-audio-mixer-read mus-audio-microphone mus-audio-amp 0 vals)
		(if (fneq (vector-ref vals 0) old-val) (snd-display (format #f ";mus-audio-restore: ~A ~A?" old-val (vector-ref vals 0))))))))

      (let ((fil (open-sound (string-append (or sf-dir "") "a.sf2"))))
	(if fil
	    (let ((loops (and fil (soundfont-info))))
	      (if (or (null? loops)
		      (not (= (caddar loops) 65390))
		      (not (= (cadadr loops) 65490)))
		  (snd-display (format #f ";soundfont-info: ~A?" loops)))
	      (close-sound fil))))

      (if (file-exists? "fmv5.snd") (delete-file "fmv5.snd"))
      (let ((fd (mus-sound-open-output "fmv5.snd" 22050 1 mus-bshort mus-aiff "no comment"))
	    (sdata (make-sound-data 1 100)))
	(do ((i 0 (1+ i)))
	    ((= i 100))
	  (sound-data-set! sdata 0 i (* i .01)))
	(if (not (string=? "#<sound-data: 1 chan, 100 frames>" (format #f "~A" sdata)))
	    (snd-display (format #f ";print sound-data: ~A?" (format #f "~A" sdata))))
	(let ((edat sdata)
	      (edat1 (make-sound-data 1 100))
	      (edat2 (make-sound-data 2 100)))
	  (if (not (eq? sdata edat)) (snd-display (format #f ";sound-data not eq? ~A ~A" sdata edat)))
	  (if (not (equal? sdata edat)) (snd-display (format #f ";sound-data not equal? ~A ~A" sdata edat)))
	  (if (equal? sdata edat1) (snd-display (format #f ";sound-data 1 equal? ~A ~A" sdata edat1)))
	  (if (equal? edat2 edat1) (snd-display (format #f ";sound-data 2 equal? ~A ~A" edat2 edat1)))
	  (do ((i 0 (1+ i)))
	      ((= i 100))
	    (sound-data-set! edat1 0 i (sound-data-ref sdata 0 i)))
	  (if (not (equal? sdata edat1)) (snd-display (format #f ";sound-data 3 not equal? ~A ~A" sdata edat1))))
	(let ((v0 (make-vct 100)))
	  (sound-data->vct sdata 0 v0) 
	  (if (fneq (vct-ref v0 10) .1) (snd-display (format #f ";sound-data->vct: ~A?" v0)))
	  (vct->sound-data v0 sdata 0) 
	  (if (fneq (sound-data-ref sdata 0 10) .1) (snd-display (format #f ";vct->sound-data: ~A?" (sound-data-ref sdata 0 10)))))
	(let ((v0 (make-vct 10))
	      (sdata2 (make-sound-data 2 10)))
	  (do ((i 0 (1+ i)))
	      ((= i 10))
	    (sound-data-set! sdata2 0 i 0.1)
	    (sound-data-set! sdata2 1 i 0.2))
	  (sound-data->vct sdata2 0 v0) 
	  (if (fneq (vct-ref v0 1) .1) (snd-display (format #f ";sound-data->vct[1]: ~A?" v0)))
	  (sound-data->vct sdata2 1 v0) 
	  (if (fneq (vct-ref v0 1) .2) (snd-display (format #f ";sound-data->vct[2]: ~A?" v0)))
	  (vct->sound-data v0 sdata2 0) 
	  (if (fneq (sound-data-ref sdata2 0 1) .2) 
	      (snd-display (format #f ";vct->sound-data[2]: ~A?" (sound-data-ref sdata2 0 1))))
	  (vct-fill! v0 .3)
	  (vct->sound-data v0 sdata2 1) 
	  (if (fneq (sound-data-ref sdata2 1 1) .3) 
	      (snd-display (format #f ";vct->sound-data[3]: ~A?" (sound-data-ref sdata2 1 1)))))
	(mus-sound-write fd 0 99 1 sdata)
	(mus-sound-close-output fd 200)
	(set! fd (mus-sound-reopen-output "fmv5.snd" 1 mus-bshort mus-aiff (mus-sound-data-location "fmv5.snd")))
	(mus-sound-close-output fd 200)
	(set! fd (mus-sound-open-input "fmv5.snd"))
	(mus-sound-read fd 0 99 1 sdata)
	(if (fneq (sound-data-ref sdata 0 10) .1) (snd-display (format #f ";mus-sound-write: ~A?" (sound-data-ref sdata 0 10))))
	(mus-sound-seek-frame fd 20)
	(mus-sound-read fd 0 10 1 sdata)
	(if (fneq (sound-data-ref sdata 0 0) .2) (snd-display (format #f ";mus-sound-seek: ~A?" (sound-data-ref sdata 0 0))))
	(mus-sound-seek fd 20 0)
	(mus-sound-close-input fd))

      (if (provided? 'gcing) (set! g-gc-step 0))
      (for-each 
       (lambda (chans)
	 (for-each 
	  (lambda (df-ht)
	    (let ((samps (if (= chans 1) 100000
			     (if (= chans 2) 50000
				 1000))))
	      (if (file-exists? "fmv5.snd") (delete-file "fmv5.snd"))
	      (let ((fd (mus-sound-open-output "fmv5.snd" 22050 chans (car df-ht) (cadr df-ht) "no comment"))
		    (sdata (make-sound-data chans samps))
		    (ndata (make-sound-data chans samps)))
		(do ((k 0 (1+ k)))
		    ((= k chans))
		  (do ((i 0 (1+ i)))
		      ((= i samps))
		    (sound-data-set! sdata k i (- (random 2.0) 1.0))))
		(mus-sound-write fd 0 (- samps 1) chans sdata)
		(mus-sound-close-output fd (* samps chans (mus-data-format-bytes-per-sample (car df-ht))))
		(set! fd (mus-sound-open-input "fmv5.snd"))
		(mus-sound-read fd 0 (- samps 1) chans ndata)
		(mus-sound-close-input fd)
		(catch #t
		       (lambda ()
			 (do ((k 0 (1+ k)))
			     ((= k chans))
			   (do ((i 0 (1+ i)))
			       ((= i samps))
			     (if (fneq (sound-data-ref sdata k i) (sound-data-ref ndata k i))
				 (throw 'read-write-error
					(car df-ht) (mus-data-format-name (car df-ht))
					(cadr df-ht) (mus-header-type-name (cadr df-ht))
					i k
					(sound-data-ref sdata k i) (sound-data-ref ndata k i))))))
		       (lambda args (begin (snd-display args) (car args)))))))
	  (list (list mus-bshort mus-next)
		(list mus-bfloat mus-aifc)
		(list mus-lfloat mus-riff)
		(list mus-lshort mus-nist)
		(list mus-bint mus-aiff)
		(list mus-lint mus-next)
		(list mus-b24int mus-aifc)
		(list mus-l24int mus-riff)
		(list mus-bfloat mus-ircam)
		(list mus-bdouble mus-next))))
       (list 1 2 4 8))
      
      (let ((ind (open-sound "oboe.snd")))
	(show-input-1)
	(close-sound ind))

      ))

(if (provided? 'gcing) (set! g-gc-step 100))
(define a-ctr 0)


;;; ---------------- test 5: simple overall checks ----------------

(if (or full-test (= snd-test 5))
    (let* ((index (open-sound "oboe.snd"))
	   (bnds (x-bounds index))
	   (xp (x-position-slider))
	   (yp (y-position-slider))
	   (xz (x-zoom-slider))
	   (yz (y-zoom-slider)))
      (if (procedure? trace-hook) (trace-hook 5))
      (play-and-wait "oboe.snd")
      (play-and-wait "oboe.snd" 12000)
      (play-and-wait "oboe.snd" 12000 15000)
      (play-and-wait 0 #f #f #f #f (1- (edit-position)))
      (bomb index #t)
      (if (not (= (transform-size) 0)) (snd-display (format #f ";transform-size ~A?" (transform-size))))
      (set! (ffting) #t)
      (set! (waving) #t)
      (graph '(0 0 1 1 2 0))
      (update-lisp-graph)
      (graph #(0 0 1 1 2 0))
      (do ((i 0 (1+ i))) 
	  ((= i 32)) 
	(graph #(0 1 2)) 
	(graph (list #(0 1 2) #(3 2 1) #(1 2 3)))
	(graph (list #(0 1 2) #(3 2 1))))
      (if (= (transform-size) 0) (snd-display (format #f ";ffting transform-size ~A?" (transform-size))))
      (update-fft)
      (peaks "tmp.peaks")
      (let ((p (open-input-file "tmp.peaks")))
	(if (not p)
	    (snd-display (format #f ";peaks->tmp.peaks failed?"))
	    (let ((line (read-line p)))
	      (if (or (not (string? line))
		      (not (string=? "Snd: fft peaks" (substring line 0 14))))
		  (snd-display (format #f ";peaks 1: ~A?" line)))
	      (set! line (read-line p))
	      (set! line (read-line p))
	      (if (or (not (string? line))
		      (not (string=? "oboe.snd, fft 256 points beginning at sample 0 (0.000 secs)" line)))
		  (snd-display (format #f ";peaks 2: ~A?" line)))
	      (set! line (read-line p))
	      (set! line (read-line p))
	      (if (or (not (string? line))
		      (not (string=? "  86.132812  1.00000" line)))
		  (snd-display (format #f ";peaks 3: ~A?" line)))
	      (close-port p)
	      (delete-file "tmp.peaks"))))
      (let* ((num-transforms 9)
	     (num-fft-styles 3))
	(set! (ffting index 0) #t)
	(set! (fft-size index 0) 64)
	(do ((i 0 (1+ i)))
	    ((= i num-transforms))
	  (set! (transform-type) i)
	  (do ((j 0 (1+ j)))
	      ((= j num-fft-styles))
	    (set! (fft-style index 0) j)
	    (update-fft index 0))))
      (if (read-only index) (snd-display (format #f ";read-only open-sound: ~A?" (read-only index))))
      (set! (read-only index) #t)
      (if (not (read-only index)) (snd-display (format #f ";set-read-only: ~A?" (read-only index))))
      (bind-key (char->integer #\a) 0 (lambda () (set! a-ctr 3)))
      (key (char->integer #\a) 0) 
      (if (not (= a-ctr 3)) (snd-display (format #f ";bind-key: ~A?" a-ctr)))
      (let ((str (with-output-to-string (lambda () (display (key-binding (char->integer #\a) 0))))))
	(if (not (string=? str "#<procedure #f (() (set! a-ctr 3))>"))
	    (snd-display (format #f ";key-binding: ~A?" str))))
      (unbind-key (char->integer #\a) 0)
      (set! a-ctr 0)
      (key (char->integer #\a) 0) 
      (do ((i 0 (1+ i)))
	  ((= i 4))
	(let ((psf (eps-file)))
	  (if (and psf (string? psf))
	      (begin
		(if (file-exists? psf) (delete-file psf))
		(set! (graph-style) i)
		(graph->ps)
		(if (not (file-exists? psf)) 
		    (snd-display (format #f ";graph->ps: ~A?" psf))
		    (delete-file psf))))))
      (let ((err (catch 'cannot-print 
		   (lambda () 
		     (graph->ps "/bad/bad.eps"))
		   (lambda args 12345))))
	(if (not (= err 12345)) (snd-display (format #f ";graph->ps err: ~A?" err))))
      (let ((n2 (or (open-sound "2.snd") (open-sound "4.aiff"))))
	(set! (uniting n2) channels-superimposed)
	(if (not (= (uniting n2) channels-superimposed)) (snd-display (format #f ";uniting->~D: ~A?" channels-superimposed (uniting n2))))
	(set! (uniting n2) channels-combined)
	(if (not (= (uniting n2) channels-combined)) (snd-display (format #f ";uniting->~D: ~A?" channels-combined (uniting n2))))
	(set! (uniting n2) channels-separate)
	(if (not (= (uniting n2) channels-separate)) (snd-display (format #f ";uniting->~D: ~A?" channels-separate (uniting n2))))
	(close-sound n2))
      (if (= (channels index) 1)
	  (begin
	    (set! (uniting index) channels-superimposed)
	    (if (not (= (uniting index) channels-separate)) (snd-display (format #f ";uniting[0]->~D: ~A?" channels-separate (uniting index))))))
      (set! (sync index) 32)
      (if (not (= (sync index) 32)) (snd-display (format #f ";sync->32: ~A?" (sync index))))
      (set! (sync index) 0)
      (set! (channel-sync index 0) 12)
      (if (not (= (channel-sync index 0) 12)) (snd-display (format #f ";sync-chn->12: ~A?" (channel-sync index 0))))
      (set! (channel-sync index 0) 0)
      (if (not (= a-ctr 0)) (snd-display (format #f ";unbind-key: ~A?" a-ctr)))
      (if (fneq xp 0.0) (snd-display (format #f ";x-position-slider: ~A?" xp)))
      (if (fneq yp 0.0) (snd-display (format #f ";y-position-slider: ~A?" yp)))
      (if (fneq xz 0.04338) (snd-display (format #f ";x-zoom-slider: ~A?" xz)))
      (if (fneq yz 1.0) (snd-display (format #f ";y-zoom-slider: ~A?" yz)))
      (if (or (fneq (car bnds) 0.0) (fneq (cadr bnds) 0.1)) (snd-display (format #f ";x-bounds: ~A?" bnds)))
      (if (not (= (find-sound "oboe.snd") index)) (snd-display (format #f ";oboe: index ~D /= ~D?" (find-sound "oboe.snd") index)))
      (if (not (sound? index)) (snd-display (format #f ";oboe: ~D not ok?" index)))
      (if (not (= (chans index) 1)) (snd-display (format #f ";oboe: chans ~D?" (chans index))))
      (if (not (= (channels index) 1)) (snd-display (format #f ";oboe: channels ~D?" (channels index))))
      (if (not (= (frames index) 50828)) (snd-display (format #f ";oboe: frames ~D?" (frames index))))
      (if (not (= (srate index) 22050)) (snd-display (format #f ";oboe: srate ~D?" (srate index))))
      (if (not (= (data-location index) 28)) (snd-display (format #f ";oboe: location ~D?" (data-location index))))
      (if (not (= (data-format index) 1)) (snd-display (format #f ";oboe: format ~A?" (data-format index))))
      (if (fneq (maxamp index) .14724) (snd-display (format #f ";oboe: maxamp ~F?" (maxamp index))))
      (if (comment index) (snd-display (format #f ";oboe: comment ~A?" (comment index))))
      (if (not (= (string-length "asdf") 4)) (snd-display (format #f ";string-length: ~A?" (string-length "asdf"))))
      (if (not (string=? (short-file-name index) "oboe.snd")) (snd-display (format #f ";oboe short name: ~S?" (short-file-name index))))
      (let ((matches (count-matches (lambda (a) (> a .125)))))
	(if (not (= matches 1313)) (snd-display (format #f ";count-matches: ~A?" matches))))
      (let ((spot (find (lambda (a) (> a .13)))))
	(if (or (null? spot) (not (= (cadr spot) 8862))) (snd-display (format #f ";find: ~A?" spot))))
      (set! (right-sample) 3000) 
      (let ((samp (right-sample)))
	(if (> (abs (- samp 3000)) 1) (snd-display (format #f ";right-sample: ~A?" samp))))
      (set! (channel-sync) 123)
      (if (not (= (channel-sync) 123)) (snd-display (format #f ";channel-sync: ~A?" (channel-sync))))
      (set! (left-sample) 1000) 
      (let ((samp (left-sample)))
	(if (> (abs (- samp 1000)) 1) (snd-display (format #f ";left-sample: ~A?" samp))))
      (let ((eds (edits)))
	(if (or (not (= (car eds) 0)) (not (= (cadr eds) 0)))
	    (snd-display (format #f ";edits: ~A?" eds)))
	(if (not (= (edit-position) (car eds)))
	    (snd-display (format #f ";edit-position: ~A ~A?" (edit-position) eds))))
      (play-and-wait 0 index 0)
      (bomb index #f)
      (select-all index 0) 
      (if (not (selection?)) (snd-display "selection?"))
      (if (not (region? 0)) (snd-display "region?"))
      (save-region 0 "temp.dat")
      (if (file-exists? "temp.dat")
	  (delete-file "temp.dat")
	  (snd-display ";save-region file disappeared?"))
      (play-region 0 #t) ;needs to be #t here or it never gets run
      (if (not (= (length (regions)) 1)) (snd-display (format #f ";regions: ~A?" (regions))))
      (if (not (selection-member? index)) (snd-display (format #f ";selection-member?: ~A" (selection-member? index))))
      (if (not (= (region-srate 0) 22050)) (snd-display (format #f ";region-srate: ~A?" (region-srate 0))))
      (if (not (= (region-chans 0) 1)) (snd-display (format #f ";region-chans: ~A?" (region-chans 0))))
      (if (not (= (region-length 0) 50828)) (snd-display (format #f ";region-length: ~A?" (region-length 0))))
      (if (not (= (selection-length) 50828)) (snd-display (format #f ";selection-length: ~A?" (selection-length 0))))
      (if (not (= (selection-position) 0)) (snd-display (format #f ";selection-position: ~A?" (selection-position))))
      (if (fneq (region-maxamp 0) (maxamp index)) (snd-display (format #f ";region-maxamp: ~A?" (region-maxamp 0))))
      (let ((samps1 (samples->vct 0 50827 index 0))
	    (samps2 (region-samples->vct 0 50827 0 0))
	    (vr (make-sample-reader 0 index 0 1)))
	(if (not (sample-reader? vr)) (snd-display (format #f ";~A not sample-reader?" vr)))
	(let ((reader-string (format #f "~A" vr)))
	  (if (not (string=? (substring reader-string 0 18) "#<sample-reader 0x"))
	      (snd-display (format #f ";sample reader actually got: [~S]" (substring reader-string 0 18))))
	  (if (not (string=? (substring reader-string 25) ": oboe.snd from 0, at 0>"))
	      (snd-display (format #f ";sample reader actually got: [~S]" (substring reader-string 25)))))
	(let ((evr vr))
	  (if (not (equal? evr vr)) (snd-display (format #f ";sample-reader equal? ~A ~A" vr evr))))
	(do ((i 0 (1+ i)))
	    ((= i 50827))
	  (if (not (= (next-sample vr) (vct-ref samps1 i) (vct-ref samps2 i)))
	      (snd-display (format #f ";readers disagree at ~D" i))))
	(free-sample-reader vr))
      
      (revert-sound index)
      (insert-sample 100 .5 index) 
      (update-fft index) 
      (update-graph index) 
      (if (or (fneq (sample 100) .5)
	      (not (= (frames index) 50829)))
	  (snd-display (format #f ";insert-sample: ~A ~A?" (sample 100) (frames index))))
      (let ((v0 (make-vector 3))
	    (v1 (make-vct 3)))
	(vct-fill! v1 .75)
	(do ((i 0 (1+ i))) ((= i 3)) (vector-set! v0 i .25))
	(insert-samples 200 3 v0 index) 
	(insert-samples 300 3 v1 index) 
	(if (or (fneq (sample 201) .25)
		(fneq (sample 301) .75)
	      (not (= (frames index) 50835)))
	    (snd-display (format #f ";insert-samples: ~A ~A ~A?" (sample 201) (sample 301) (frames index)))))
      (save-sound-as "hiho.snd" index mus-next mus-bshort 22050)
      (let ((nindex (view-sound "hiho.snd")))
	(if (fneq (sample 101 nindex) (sample 101 index))
	    (snd-display (format #f ";save-sound-as: ~A ~A?" (sample 101 nindex) (sample 101 index))))
	(if (not (read-only nindex)) (snd-display (format #f ";read-only view-sound: ~A?" (read-only nindex))))
	(close-sound nindex))
      (revert-sound index)
      (set! (sample 50 index) .5) 
      (if (fneq (sample 50) .5) (snd-display (format #f ";set-sample: ~A?" (sample 50))))
      (let ((v0 (make-vector 3)))
	(do ((i 0 (1+ i))) ((= i 3)) (vector-set! v0 i .25))
	(set! (samples 60 3 index) v0) 
	(if (or (fneq (sample 60) .25) (fneq (sample 61) .25))
	    (snd-display (format #f ";set-samples: ~A ~A ~A?" (sample 60) (sample 61) (sample 62)))))
      (revert-sound index)
      (delete-sample 100 index) 
      (if (not (= (frames index) 50827)) (snd-display (format #f ";delete-sample: ~A?" (frames index))))
      (delete-samples 0 100 index) 
      (if (not (= (frames index) 50727)) (snd-display (format #f ";delete-samples: ~A?" (frames index))))
      (revert-sound index)
      (let ((maxa (maxamp index)))
	(scale-to .5 index) 
	(let ((newmaxa (maxamp index)))
	  (if (fneq newmaxa .5) (snd-display (format #f ";scale-to: ~A?" newmaxa)))
	  (undo 1 index) 
	  (scale-by 2.0 index) 
	  (set! newmaxa (maxamp index))
	  (if (fneq newmaxa (* 2.0 maxa)) (snd-display (format #f ";scale-by: ~A?" newmaxa)))
	  (revert-sound index)
	  (select-all index) 
	  (if (not (= (length (regions)) 2)) (snd-display (format #f ";regions(2): ~A?" (regions))))
	  (scale-selection-to .5) 
	  (set! newmaxa (maxamp index))
	  (if (fneq newmaxa .5) (snd-display (format #f ";scale-selection-to: ~A?" newmaxa)))
	  (revert-sound index)
	  (select-all index) 
	  (scale-selection-by 2.0) 
	  (set! newmaxa (maxamp index))
	  (if (fneq newmaxa (* 2.0 maxa)) (snd-display (format #f ";scale-selection-by: ~A?" newmaxa)))
	  (revert-sound index)
	  (select-all index) 
	  (let ((rread (make-region-sample-reader 0 0))
		(sread (make-sample-reader 0 index))
		(rvect (region-samples 0 100 0))
		(svect (samples 0 100 index)))
	    (if (fneq (vector-ref rvect 1) (region-sample 1 0)) 
		(snd-display (format #f ";region-sample: ~A ~A?" (region-sample 1 0) (vector-ref rvect 1))))
	    (do ((i 0 (1+ i)))
		((= i 100))
	      (let ((rval (next-sample rread))
		    (sval (next-sample sread)))
		(if (fneq rval sval) (snd-display (format #f ";sample-read: ~A ~A?" rval sval)))
		(if (fneq rval (vector-ref rvect i)) (snd-display (format #f ";region-samples: ~A ~A?" rval (vector-ref rvect i))))
		(if (fneq sval (vector-ref svect i)) (snd-display (format #f ";samples: ~A ~A?" sval (vector-ref svect i))))))
	    (free-sample-reader rread) 
	    (let ((val0 (next-sample sread)))
	      (if (sample-reader-at-end? sread) (snd-display "premature end?"))
	      (previous-sample sread)
	      (let ((val1 (previous-sample sread)))
		(if (fneq val0 val1) (snd-display (format #f ";previous-sample: ~A ~A?" val0 val1)))))
	    (free-sample-reader sread))))
      (revert-sound index)
      (let ((s100 (sample 100))
	    (s40 (sample 40))
	    (len (frames))
	    (addlen (mus-sound-frames "fyow.snd")))
	(set! (cursor-style) cursor-line)
	(set! (cursor-size) 25)
	(set! (cursor index) 50) 
	(if (not (= (cursor-style) cursor-line))
	    (snd-display (format #f ";cursor-style: ~A? " (cursor-style))))
	(if (not (= (cursor-size) 25))
	    (snd-display (format #f ";cursor-size: ~A? " (cursor-size))))
	(set! (cursor-style) cursor-cross)
	(set! (cursor-size) 15)
	(insert-sound "fyow.snd" (cursor) 0 index 0) 
	(if (or (fneq (sample 40) s40) (not (fneq (sample 100) s100)) (fneq (sample 100) 0.001831))
	    (snd-display (format #f ";insert-sound: ~A?" (sample 100))))
	(if (not (= (frames) (+ len addlen))) (snd-display (format #f ";insert-sound len: ~A?" (frames))))
	(revert-sound)
	(make-region 0 99) 
	(insert-region 60 0 index) 
	(if (not (= (frames) (+ len 100))) (snd-display (format #f ";insert-region len: ~A?" (frames))))
	(if (fneq (sample 100) s40) (snd-display (format #f ";insert-region: ~A ~A?" (sample 100) s40))))
      (close-sound index)
      (set! index (new-sound "fmv.snd" mus-ircam mus-bshort 22050 1 "this is a comment"))
      (let ((v0 (make-vct 128)))
	(vct-set! v0 64 .5)
	(vct-set! v0 127 .5)
	(vct->samples 0 128 v0 index 0)
	(make-region 0 126) 
	(smooth-selection) 
	(set! v0 (samples->vct 0 128 index 0 v0))
	(if (or (fneq (sample 127) .5) (fneq (sample 120) .4962) (fneq (sample 32) 0.07431) (fneq (sample 64) 0.25308))
	    (snd-display (format #f ";smooth-selection: ~A?" v0)))
	(revert-sound index)
	(vct-fill! v0 0.0)
	(vct-set! v0 10 .5)
	(vct->samples 0 128 v0 index 0) 
	(select-all) 
	(set! (sinc-width) 40)
	(src-selection 0.5) 
	(set! v0 (samples->vct 0 128 index 0 v0))
	(if (or (fneq (sample 20) .5) (fneq (sample 30) 0.0) (fneq (sample 17) -.1057) )
	    (snd-display (format #f ";src-selection: ~A?" v0)))
	(revert-sound index)
	(vct-fill! v0 0.0)
	(vct-set! v0 10 .5)
	(vct->samples 0 128 v0 index 0) 
	(select-all) 
	(filter-selection '(0 0 .1 1 1 0) 40) 
	(set! v0 (samples->vct 0 128 index 0 v0)) 
	(if (or (fneq (sample 29) .1945) (fneq (sample 39) -.0137) (fneq (sample 24) -0.01986))
	    (snd-display (format #f ";filter-selection: ~A?" v0)))
	(revert-sound index)
	(vct-fill! v0 1.0)
	(vct->samples 0 128 v0 index 0) 
	(if (file-exists? "fmv5.snd") (delete-file "fmv5.snd"))
	(select-all) 
	(env-selection '(0 0 1 1 2 0) 1.0) 
	(set! v0 (samples->vct 0 128 index 0 v0)) 
	(if (or (fneq (sample 64) 1.0) (fneq (sample 20) .3125) (fneq (sample 120) 0.125))
	    (snd-display (format #f ";env-selection: ~A ~A ~A ~A?" (sample 64) (sample 20) (sample 120) v0)))
	(save-selection "fmv5.snd" mus-next mus-bint 22050 "") ;1.0->-1.0 if short
	(revert-sound index)
	(file->array "fmv5.snd" 0 0 128 v0) 
	(if (or (fneq (vct-ref v0 64) 1.0) (fneq (vct-ref v0 20) .3125) (fneq (vct-ref v0 120) 0.125))
	    (snd-display (format #f ";save-selection: ~A ~A ~A ~A?" (vct-ref v0 64) (vct-ref v0 20) (vct-ref v0 120) v0)))
	(vct-fill! v0 0.0)
	(vct-set! v0 100 .5)
	(vct-set! v0 2 -.5)
	(vct->samples 0 128 v0 index 0) 
	(select-all) 
	(without-errors (reverse-selection)) 
	(set! v0 (samples->vct 0 128 index 0 v0)) 
	(if (or (fneq (sample 27) 0.5) (fneq (sample 125) -.5))
	    (snd-display (format #f ";reverse-selection: ~A?" v0)))
	(revert-sound index)
	(vct-fill! v0 0.0)
	(vct-set! v0 2 1.0)
	(vct->samples 0 128 v0 index 0) 
	(select-all) 
	(convolve-selection-with "fmv5.snd" .5) 
	(set! v0 (samples->vct 0 128 index 0 v0))
	(if (fneq (sample 66) -.5) (snd-display (format #f ";convolve-selection-with: ~A ~A ~A?" (vct-ref v0 66) (sample 66) v0)))
	(close-sound index))
      (let* ((obind (open-sound "oboe.snd"))
	     (vol (maxamp obind))
	     (dur (frames)))
	(set! (amp obind) 2.0)
	(if (eq? (without-errors (call-apply obind)) 'no-such-sound) (snd-display "call-apply can't find oboe.snd?"))
	(let ((newamp (maxamp obind)))
	  (if (> (abs (- (* 2.0 vol) newamp)) .05) (snd-display (format #f ";apply amp: ~A -> ~A?" vol newamp)))
	  (set! (speed obind) 0.5)
	  (call-apply obind)
	  (let ((newdur (frames obind)))
	    (set! (speed obind) 1.0)
	    (if (not (< (- newdur (* 2.0 dur)) 256)) (snd-display (format #f ";apply speed: ~A -> ~A?" dur newdur)))
	    ;; within 256 which is apply's buffer size (it always flushes full buffers) 
	    (set! (contrasting obind) #t)
	    (set! (contrast obind) 1.0)
	    (call-apply obind)
	    (let ((secamp (maxamp obind))
		  (secdur (frames obind)))
	      (if (fneq secamp .989) (snd-display (format #f ";apply contrast: ~A?" secamp)))
	      (if (not (= secdur newdur)) (snd-display (format #f ";apply contrast length: ~A -> ~A?" newdur secdur)))
	      (undo 3 obind)
	      (set! (reverbing obind) #t)
	      (set! (reverb-scale obind) .2)
	      (call-apply obind)
	      (let ((revamp (maxamp obind))
		    (revdur (frames obind)))
		(if (fneq revamp .213) (snd-display (format #f ";apply reverb scale: ~A?" revamp)))
		(if (not (< (- revdur (+ 50828 (inexact->exact (* (reverb-decay) 22050)))) 256)) 
		    (snd-display (format #f ";apply reverb length: ~A?" revdur)))
		(undo 1 obind)
		(set! (expanding obind) #t)
		(set! (expand obind) 1.5)
		(call-apply obind)
		(let ((expamp (maxamp obind))
		      (expdur (frames obind)))
		  (if (fneq expamp .152) (snd-display (format #f ";apply expand scale: ~A?" expamp)))
		  (if (not (> expdur (* 1.25 50828))) (snd-display (format #f ";apply expand length: ~A?" expdur)))
		  (undo 1 obind)
		  (set! (filtering obind) #t)
		  (set! (filter-order obind) 40)
		  (set! (filter-env obind) '(0 0 1 .5 1 0))
		  (call-apply obind)
		  (let ((fltamp (maxamp obind))
			(fltdur (frames obind)))
		    (if (> (abs (- fltamp .01)) .005) (snd-display (format #f ";apply filter scale: ~A?" fltamp)))
		    (if (> (- fltdur (+ 40 50828)) 256) (snd-display (format #f ";apply filter length: ~A?" fltdur)))
		    (undo obind)))))))
	(revert-sound obind)
	(make-region 1000 1000)
	(scale-selection-to .1)
	(scale-selection-by 2.0)
	(make-region 2000 2001)
	(scale-selection-by 2.0)
	(scale-selection-to .5)
	(make-region 1000 2001)
	(scale-selection-to .5)
	(scale-selection-by .5)
	(make-region 2000 2000)
	(scale-selection-by 2.0)
	(scale-selection-to .5)
	(make-region 1000 1001)
	(scale-selection-to .1)
	(scale-selection-by 2.0)
	(make-region 999 2002)
	(scale-selection-to 1.0)
	(scale-selection-by .5)
	(let ((tree (edit-tree))
	      (true-tree '((0 0 0 998 1.0) 
			   (999 0 999 999 0.999969720840454) 
			   (1000 0 1000 1000 6.09052181243896) 
			   (1001 0 1001 1001 0.999969720840454) 
			   (1002 0 1002 1999 0.499984979629517) 
			   (2000 0 2000 2000 7.54652404785156) 
			   (2001 0 2001 2001 3.7732629776001) 
			   (2002 0 2002 2002 0.999969720840454) 
			   (2003 0 2003 50827 1.0) 
			   (50828 -2 0 0 0.0))))
	  (if (not (= (length tree) (length true-tree)))
	      (snd-display (format #f ";edit trees are not same length: ~A ~A?" (length tree) (length true-tree)))
	      (let ((len (length tree)))
		(do ((i 0 (1+ i)))
		    ((= i len))
		  (let ((branch (list-ref tree i))
			(true-branch (list-ref true-tree i)))
		    (if (or (not (= (car branch) (car true-branch)))
			    (not (= (cadr branch) (cadr true-branch)))
			    (not (= (caddr branch) (caddr true-branch)))
			    (not (= (cadddr branch) (cadddr true-branch)))
			    (fneq (list-ref branch 4) (list-ref true-branch 4)))
			(snd-display (format #f ";edit trees disagree at ~D: ~A ~A" i branch true-branch))))))))
	(insert-silence 1001 8)
	(insert-silence 900 50)
	(insert-silence 2005 1)
	(insert-silence 999 2)
	(let ((tree (edit-tree))
	      (true-tree '((0 0 0 899 1.0) 
			   (900 2 0 49 1.0) 
			   (950 0 900 948 1.0) 
			   (999 4 0 1 1.0) 
			   (1001 0 949 998 1.0) 
			   (1051 0 999 999 0.999969720840454) 
			   (1052 0 1000 1000 6.09052181243896) 
			   (1053 1 0 7 1.0) 
			   (1061 0 1001 1001 0.999969720840454)
			   (1062 0 1002 1946 0.499984979629517) 
			   (2007 3 0 0 1.0) 
			   (2008 0 1947 1999 0.499984979629517) 
			   (2061 0 2000 2000 7.54652404785156) 
			   (2062 0 2001 2001 3.7732629776001) 
			   (2063 0 2002 2002 0.999969720840454) 
			   (2064 0 2003 50827 1.0) 
			   (50889 -2 0 0 0.0))))
	  (if (not (= (length tree) (length true-tree)))
	      (snd-display (format #f ";silenced edit trees are not same length: ~A ~A?" (length tree) (length true-tree)))
	      (let ((len (length tree)))
		(do ((i 0 (1+ i)))
		    ((= i len))
		  (let ((branch (list-ref tree i))
			(true-branch (list-ref true-tree i)))
		    (if (or (not (= (car branch) (car true-branch)))
			    (not (= (cadr branch) (cadr true-branch)))
			    (not (= (caddr branch) (caddr true-branch)))
			    (not (= (cadddr branch) (cadddr true-branch)))
			    (fneq (list-ref branch 4) (list-ref true-branch 4)))
			(snd-display (format #f ";silenced edit trees disagree at ~D: ~A ~A" i branch true-branch))))))))
	(if (or (fneq (sample 998) -.03)
		(fneq (sample 999) 0.0)
		(fneq (sample 1000) 0.0)
		(fneq (sample 1001) -.03))
	    (snd-display (format ";insert-silence [999 for 2]: ~A ~A ~A ~A?" (sample 998) (sample 999) (sample 1000) (sample 1001) )))
	(if (or (fneq (sample 2006) -.033)
		(fneq (sample 2007) 0.0)
		(fneq (sample 2008) -.033))
	    (snd-display (format ";insert-silence [2007 for 1]: ~A ~A ~A?" (sample 2006) (sample 2007) (sample 2008))))
	(revert-sound obind)
	(add-mark 1200 obind 0)
	(let ((mark-num (length (marks obind 0))))
	  (scale-by 2.0 obind 0)
	  (let ((mark-now (length (marks obind 0))))
	    (if (not (= mark-num mark-now))
		(snd-display (format #f ";mark lost after scaling?")))
	    (set! (selection-position) 0)
	    (set! (selection-length) 100)
	    (scale-selection-to .5)
	    (set! mark-now (length (marks obind 0)))
	    (if (not (= mark-num mark-now))
		(snd-display (format #f ";mark lost after selection scaling?"))))
	  (let ((m1 (add-mark 1000)))
	    (set! (cursor obind 0) 100)
	    (key (char->integer #\u) 4 obind)
	    (key (char->integer #\1) 0 obind)
	    (key (char->integer #\0) 0 obind)
	    (key (char->integer #\0) 0 obind)
	    (key (char->integer #\o) 4 obind)
	    (if (not (= (mark-sample m1) 1100))
		(snd-display (format #f ";mark after zeros: ~D (1100)? " (mark-sample m1))))))
	(revert-sound obind)
	(let ((frs (frames obind)))
	  (make-region 0 999 obind 0)
	  (if (not (selection?)) (snd-display (format #f ";make-region but no selection? ~A" (selection?))))
	  (delete-selection)
	  (if (not (= (frames obind) (- frs 1000)))
	      (snd-display (format #f ";delete-selection: ~A?" (frames obind))))
	  (let ((val (sample 0 obind 0)))
	    (undo)
	    (if (fneq (sample 1000) val)
		(snd-display (format #f ";delete-selection val: ~A ~A" val (sample 1000))))
	    (insert-selection)
	    (if (not (= (frames obind) (+ frs 1000)))
		(snd-display (format #f ";insert-selection: ~A?" (frames obind))))
	    (if (fneq (sample 2000) val)
		(snd-display (format #f ";insert-selection val: ~A ~A" val (sample 2000))))
	    (set! val (sample 900))
	    (mix-selection)
	    (if (fneq (sample 900) (* 2 val))
		(snd-display (format #f ";mix-selection val: ~A ~A" (* 2 val) (sample 900))))
	    (if (not (= (frames obind) (+ frs 1000)))
		(snd-display (format #f ";mix-selection: ~A?" (frames obind))))))
	(close-sound obind))

      (let* ((obind (open-sound "4.aiff"))
	     (amps (maxamp obind #t)))
	(set! (amp obind) 0.1)
	(select-channel 2)
	(if (eq? (without-errors (call-apply obind 1)) 'no-such-sound) (snd-display "call-apply can't find 4.aiff?"))
	(let ((newamps (maxamp obind #t)))
	  (if (or (fneq (car amps) (car newamps))
		  (fneq (cadr amps) (cadr newamps))
		  (> (abs (- (* 0.1 (caddr amps)) (caddr newamps))) .05)
		  (fneq (cadddr amps) (cadddr newamps)))
	      (snd-display (format #f ";apply amps:~%  ~A ->~%  ~A?" amps newamps)))
	  (undo 1 obind 2)
	  (set! (amp obind) 0.1)
	  (make-region 0 (frames obind) obind 1)
	  (without-errors (call-apply obind 2))
	  (set! newamps (maxamp obind #t))
	  (if (or (fneq (car amps) (car newamps))
		  (> (abs (- (* 0.1 (cadr amps)) (cadr newamps))) .05)
		  (fneq (caddr amps) (caddr newamps))
		  (fneq (cadddr amps) (cadddr newamps)))
	      (snd-display (format #f ";apply selection amp:~%  ~A ->~%  ~A?" amps newamps)))
	  (if (not (provided? 'snd-nogui))
	      (let* ((axinfo (axis-info obind 0 time-graph))
		     (x0 (list-ref axinfo 2))
		     (y0 (list-ref axinfo 3))
		     (x1 (list-ref axinfo 4))
		     (y1 (list-ref axinfo 5))
		     (xpos (+ x0 (* .5 (- x1 x0))))
		     (ypos (+ y0 (* .75 (- y1 y0)))))
		(set! (cursor obind) 100)
		(let ((xy (cursor-position obind)))
		  (if (fneq (position->x (car xy)) (/ (cursor obind) (srate obind)))
		      (snd-display (format #f ";cursor-position: ~A ~A ~A?" (car xy) (position->x (car xy)) (/ (cursor obind) (srate obind))))))
		(if (fneq (position->x (x->position xpos)) xpos)
		    (snd-display (format #f ";x<->position: ~A ~A?" (position->x (x->position xpos)) xpos)))
		(if (> (abs (- (position->y (y->position ypos)) ypos)) .5)
		    (snd-display (format #f ";y<->position: ~A ~A?" (position->y (y->position ypos)) ypos)))
		))
	  (close-sound obind)))

      (let ((ind1 (open-sound "oboe.snd"))
	    (ind2 (open-sound "2.snd")))
	(let ((ups1 (count-matches (lambda (n) (> n .1)) 0 ind1 0))
	      (ups2 (let ((count 0))
		      (scan-chan (lambda (n)
				   (if (> n .1)
				       (set! count (+ count 1)))
				   #f)
				 0 (frames ind1) ind1 0)
		      count)))
	  (if (not (= ups1 ups2))
	      (snd-display (format #f ";scan-chan: ~A ~A?" ups1 ups2)))
	  (set! ups1 (count-matches (lambda (n) (> n .03)) 0 ind2 0))
	  (set! ups2 (count-matches (lambda (n) (> n .03)) 0 ind2 1))
	  (let ((ups3 (let ((count 0))
			(scan-chan (lambda (n)
				     (if (> n .03)
					 (set! count (+ count 1)))
				     #f)
				   0 (frames ind2) ind2 0)
			count))
		(ups4 (let ((count 0))
			(scan-chan (lambda (n)
				     (if (> n .03)
					 (set! count (+ count 1)))
				     #f)
				   0 (frames ind2) ind2 1)
			count)))
	    (if (not (= ups1 ups3))
		(snd-display (format #f ";2[0] scan-chan: ~A ~A?" ups1 ups3)))
	    (if (not (= ups2 ups4))
		(snd-display (format #f ";2[1] scan-chan: ~A ~A?" ups2 ups4))))
	  (set! (sync ind2) #t)
	  (let ((total
		 (let ((count 0)) 
		   (scan-chans (lambda (n) 
				 (if (> n .03) 
				     (set! count (+ count 1))) 
				 #f))
		   count)))
	    (if (not (= total (+ ups1 ups2)))
		(snd-display (format #f ";scan-chans: ~A ~A?" total (+ ups1 ups2)))))
	  (set! (sync ind2) #f)
	  (let ((total
		 (let ((count 0)) 
		   (scan-sound-chans (lambda (n) 
				       (if (> n .03) 
					   (set! count (+ count 1))) 
				       #f)
				     0 (frames ind2) ind2)
		   count)))
	    (if (not (= total (+ ups1 ups2)))
		(snd-display (format #f ";scan-sound-chans: ~A ~A?" total (+ ups1 ups2)))))
	  (set! (sync ind2) #t)
	  (let ((total
		 (let ((count 0)) 
		   (scan-across-chans (lambda (nd len) 
					(do ((i 0 (1+ i)))
					    ((= i len) #f) 
					  (if (> (vector-ref nd i) .03) 
					      (set! count (+ count 1))))))
		   count)))
	    (if (not (= total (+ ups1 ups2)))
		(snd-display (format #f ";scan-across-chans: ~A ~A?" total (+ ups1 ups2)))))
	  (set! (sync ind2) #f)
	  (let ((total
		 (let ((count 0)) 
		   (scan-across-all-chans (lambda (nd len) 
					    (do ((i 0 (1+ i)))
						((= i len) #f) 
					      (if (> (vector-ref nd i) .03) 
						  (set! count (+ count 1))))))
		   count))
		(ups3 (count-matches (lambda (n) (> n .03)) 0 ind1 0)))
	    (if (not (= total (+ ups1 ups2 ups3)))
		(snd-display (format #f ";scan-across-all-chans: ~A ~A?" total (+ ups1 ups2 ups3))))))
	
	(select-sound ind1)
	(forward-graph)
	(if (or (not (= (selected-sound) ind2))
		(not (= (selected-channel) 0)))
	    (snd-display (format #f ";forward from ~A 0 to ~A ~A?" ind1 (selected-sound) (selected-channel))))
	(forward-graph)
	(if (or (not (= (selected-sound) ind2))
		(not (= (selected-channel) 1)))
	    (snd-display (format #f ";forward from ~A 0 to ~A ~A?" ind2 (selected-sound) (selected-channel))))
	(forward-graph 1)
	(if (or (not (= (selected-sound) ind1))
		(not (= (selected-channel) 0)))
	    (snd-display (format #f ";forward from ~A 1 to ~A ~A?" ind2 (selected-sound) (selected-channel))))
	(forward-graph 2)
	(if (or (not (= (selected-sound) ind2))
		(not (= (selected-channel) 1)))
	    (snd-display (format #f ";forward from ~A 0 to ~A ~A?" ind1 (selected-sound) (selected-channel))))
	(forward-graph 0)
	(if (or (not (= (selected-sound) ind2))
		(not (= (selected-channel) 1)))
	    (snd-display (format #f ";forward 0 from ~A 1 to ~A ~A?" ind2 (selected-sound) (selected-channel))))
	(backward-graph 2)
	(if (or (not (= (selected-sound) ind1))
		(not (= (selected-channel) 0)))
	    (snd-display (format #f ";backward 2 from ~A 1 to ~A ~A?" ind2 (selected-sound) (selected-channel))))
	(backward-graph)
	(if (or (not (= (selected-sound) ind2))
		(not (= (selected-channel) 1)))
	    (snd-display (format #f ";backward 2 from ~A 0 to ~A ~A?" ind1 (selected-sound) (selected-channel))))

	(close-sound ind1)
	(close-sound ind2))

      (let ((ind1 (open-sound "oboe.snd"))
	    (ind2 (open-sound "2.snd")))
	(let ((ups1 (maxamp ind1 0))
	      (ups2 (maxamp ind2 #t)))
	  (map-chan (lambda (n)
		      (* n 2.0))
		    0 (frames ind1) "times 2" ind1 0)
	  (map-sound-chans (lambda (n)
			     (* n 2.0))
			   0 (frames ind2) "times 2" ind2)
	  (let ((ups3 (maxamp ind1 0))
		(ups4 (maxamp ind2 #t)))
	    (if (fneq ups3 (* ups1 2.0))
		(snd-display (format #f ";map-chan: ~A ~A?" ups3 (* ups1 2.0))))
	    (if (or (fneq (car ups4) (* (car ups2) 2.0))
		    (fneq (cadr ups4) (* (cadr ups2) 2.0)))
		(snd-display (format #f ";map-sound-chans: ~A ~A?" (map (lambda (n) (* 2 n)) ups2) ups4))))
	  
	  (set! (sync ind2) #t)
	  (set! (sync ind1) #t)
	  (map-chans (lambda (n) (* n 0.5)))
	  (let ((ups3 (maxamp ind1 0))
		(ups4 (maxamp ind2 #t)))
	    (if (fneq ups3 ups1)
		(snd-display (format #f ";map-chans: ~A ~A?" ups3 ups1)))
	    (if (or (fneq (car ups4) (car ups2))
		    (fneq (cadr ups4) (cadr ups2)))
		(snd-display (format #f ";map-chans: ~A ~A?" ups2 ups4))))
	  (set! (sync ind1) #f)
	  
	  (let ((len-err #f))
	    (map-across-chans (lambda (data len)
				(if (not (= len 2))
				    (set! len-err len))
				(let ((chan0-sample (vector-ref data 0)))
				  (vector-set! data 0 (vector-ref data 1))
				  (vector-set! data 1 chan0-sample)
				  data)))
	    (if (number? len-err)
		(snd-display (format #f ";map-across-chans sync: ~A?" len-err)))
	    (let ((ups3 (maxamp ind1 0))
		  (ups4 (maxamp ind2 #t)))
	      (if (fneq ups3 ups1)
		  (snd-display (format #f ";map-across-chans: ~A ~A?" ups3 ups1)))
	      (if (or (fneq (car ups4) (cadr ups2))
		      (fneq (cadr ups4) (car ups2)))
		  (snd-display (format #f ";map-across-chans: ~A ~A?" ups2 ups4)))))
  
	  (let ((len-err #f))
	    (map-across-all-chans (lambda (data len)
				    (if (not (= len 3))
					(set! len-err len))
				    (vector-set! data 0 (* (vector-ref data 0) 4.0))
				    (let ((chan0-sample (vector-ref data 1)))
				      (vector-set! data 1 (vector-ref data 2))
				      (vector-set! data 2 chan0-sample)
				      data)))
	    (if (number? len-err)
		(snd-display (format #f ";map-across-all-chans len: ~A?" len-err)))
	    (let ((ups3 (maxamp ind1 0))
		  (ups4 (maxamp ind2 #t)))
	      (if (fneq ups3 (* 4 ups1))
		  (snd-display (format #f ";map-across-all-chans: ~A ~A?" ups3 ups1)))
	      (if (or (fneq (car ups4) (car ups2))
		      (fneq (cadr ups4) (cadr ups2)))
		  (snd-display (format #f ";map-across-all-chans: ~A ~A?" ups2 ups4)))))
  
	  (close-sound ind1)
	  (close-sound ind2)))

      (let* ((ind1 (open-sound "oboe.snd"))
	     (len (frames ind1))
	     (ctr 0))
	(map-chan (lambda (n)
		    (if (= ctr 1) (set! ctr 0) (set! ctr 1))
		    (if (= ctr 0)
			(* n 2.0)
			#f))
		  0 (frames ind1) "cut 2" ind1 0)
	(if (> (frames ind1) (+ (* len 2) 1))
	    (snd-display (format #f ";map-chan cut: ~A ~A?" len (frames ind1))))
	(revert-sound ind1)
	(set! ctr 0)
	(map-chan (lambda (n)
		    (set! ctr (1+ ctr))
		    (if (> ctr 3)
			#t
			n))
		  0 (frames ind1) "cut none" ind1 0)
	(if (> ctr 4)
	    (snd-display (format #f ";map-chan no-edit count: ~A?" ctr)))
	(revert-sound ind1)
	(map-chan (lambda (n)
		    (vct n (* n 3)))
		  0 (frames ind1) "cut 2" ind1 0)
	(if (> (abs (- (frames ind1) (* len 2))) 3)
	    (snd-display (format #f ";map-chan double: ~A ~A?" len (frames ind1))))
	(close-sound ind1))

      (let* ((ind1 (open-sound "oboe.snd"))
	     (count1 (count-matches (lambda (n) (> n .1)) 0 ind1 0))
	     (count2 (count-matches (lambda (n) (> n .1)) 0 ind1 0 current-edit-position))
	     (count3 (count-matches (lambda (n) (> n .1)) 0 ind1 0 0))
	     (count4 (count-matches (lambda (n) (> n .1)) 0 ind1 0 (lambda (snd chn) 0))))
	(if (not (and (= count1 count2)
		      (= count1 count3)
		      (= count1 count4)))
	    (snd-display (format #f ";initial count (edpos 0): ~A ~A ~A ~A?" count1 count2 count3 count4)))
	(scale-by 2.0 ind1 0)
	(let ((count5 (count-matches (lambda (n) (> n .1)) 0 ind1 0))
	      (count6 (count-matches (lambda (n) (> n .1)) 0 ind1 0 current-edit-position))
	      (count7 (count-matches (lambda (n) (> n .1)) 0 ind1 0 1))
	      (count8 (count-matches (lambda (n) (> n .1)) 0 ind1 0 (lambda (snd chn) 1))))
	  (if (not (and (= count5 count6)
			(= count5 count7)
			(= count5 count8)))
	      (snd-display (format #f ";count (edpos 1): ~A ~A ~A ~A?" count5 count6 count7 count8)))
	  (set! count5 (count-matches (lambda (n) (> n .1)) 0 ind1 0 0))
	  (set! count6 (count-matches (lambda (n) (> n .1)) 0 ind1 0 (lambda (snd chn) 0)))
	  (if (not (and (= count1 count5)
			(= count1 count6)))
	      (snd-display (format #f ";count (edpos -1): ~A ~A ~A?" count1 count5 count6)))
	  (undo 1 ind1 0)
	  (set! count5 (count-matches (lambda (n) (> n .1)) 0 ind1 0))
	  (set! count6 (count-matches (lambda (n) (> n .1)) 0 ind1 0 current-edit-position))
	  (if (not (and (= count1 count5)
			(= count1 count6)))
	      (snd-display (format #f ";count (edpos 0): ~A ~A ~A?" count1 count5 count6)))
	  (set! count5 (count-matches (lambda (n) (> n .1)) 0 ind1 0 1))
	  (set! count6 (count-matches (lambda (n) (> n .1)) 0 ind1 0 (lambda (snd chn) 1)))
	  (if (not (and (= count8 count5)
			(= count8 count6)))
	      (snd-display (format #f ";count (edpos +1): ~A ~A ~A?" count8 count5 count6))))
	
	(revert-sound ind1)
	(let ((fr1 (frames ind1 0))
	      (fr2 (frames ind1 0 0))
	      (fr3 (frames ind1 0 current-edit-position))
	      (fr4 (frames ind1 0 (lambda (snd chn) 0))))
	  (if (not (and (= fr1 fr2)
			(= fr1 fr3)
			(= fr1 fr4)))
	      (snd-display (format #f ";initial frames: ~A ~A ~A ~A?" fr1 fr2 fr3 fr4)))
	  (src-sound 2.0 ind1 0)
	  (let ((fr5 (frames ind1 0))
		(fr6 (frames ind1 0 1))
		(fr7 (frames ind1 0 current-edit-position))
		(fr8 (frames ind1 0 (lambda (snd chn) (edit-position snd chn)))))
	    (if (not (and (= fr5 fr6)
			  (= fr5 fr7)
			  (= fr5 fr8)))
		(snd-display (format #f ";frames (edpos 1): ~A ~A ~A ~A?" fr5 fr6 fr7 fr8)))
	    (set! fr5 (frames ind1 0 0))
	    (set! fr6 (frames ind1 0 (lambda (snd chn) 0)))
	    (if (not (and (= fr1 fr5)
			  (= fr1 fr6)))
		(snd-display (format #f ";frames (edpos -1): ~A ~A ~A?" fr1 fr5 fr6)))
	    (undo 1 ind1 0)
	    (set! fr5 (frames ind1 0 1))
	    (set! fr6 (frames ind1 0 (lambda (snd chn) (+ (edit-position snd chn) 1))))
	    (if (not (and (= fr8 fr5)
			  (= fr8 fr6)))
		(snd-display (format #f ";frames (edpos +1): ~A ~A ~A?" fr8 fr5 fr6)))))
	(revert-sound ind1)
	(src-sound 2.0 ind1 0)
	(play-and-wait 0 ind1 0 #f #f 0)
	(play-and-wait 0 ind1 0 #f #f 1)
	(play-and-wait 0 ind1 0 #f #f (lambda (snd chn) (edit-position snd chn)))
	(undo 1 ind1 0)
	(play-and-wait 0 ind1 0 #f #f 1)
	(let ((fr1 (maxamp ind1 0))
	      (fr2 (maxamp ind1 0 0))
	      (fr3 (maxamp ind1 0 current-edit-position))
	      (fr4 (maxamp ind1 0 (lambda (snd chn) 0))))
	  (if (not (and (= fr1 fr2)
			(= fr1 fr3)
			(= fr1 fr4)))
	      (snd-display (format #f ";initial maxamp: ~A ~A ~A ~A?" fr1 fr2 fr3 fr4)))
	  (scale-by 2.0 ind1 0)
	  (let ((fr5 (maxamp ind1 0))
		(fr6 (maxamp ind1 0 1))
		(fr7 (maxamp ind1 0 current-edit-position))
		(fr8 (maxamp ind1 0 (lambda (snd chn) (edit-position snd chn)))))
	    (if (not (and (= fr5 fr6)
			  (= fr5 fr7)
			  (= fr5 fr8)))
		(snd-display (format #f ";maxamp (edpos 1): ~A ~A ~A ~A?" fr5 fr6 fr7 fr8)))
	    (set! fr5 (maxamp ind1 0 0))
	    (set! fr6 (maxamp ind1 0 (lambda (snd chn) 0)))
	    (if (not (and (= fr1 fr5)
			  (= fr1 fr6)))
		(snd-display (format #f ";maxamp (edpos -1): ~A ~A ~A?" fr1 fr5 fr6)))
	    (undo 1 ind1 0)
	    (set! fr5 (maxamp ind1 0 1))
	    (set! fr6 (maxamp ind1 0 (lambda (snd chn) (+ (edit-position snd chn) 1))))
	    (if (not (and (= fr8 fr5)
			  (= fr8 fr6)))
		(snd-display (format #f ";maxamp (edpos +1): ~A ~A ~A?" fr8 fr5 fr6)))))
	(close-sound ind1))

      ))


;;; ---------------- test 6: vcts ----------------

(load "prc95.scm")

(if (or full-test (= snd-test 6))
    (let ((v0 (make-vct 10))
	  (v1 (make-vct 10))
	  (vlst (make-vct 3)))
      (if (procedure? trace-hook) (trace-hook 6))
      (if (not (vct? v0)) (snd-display "v0 isn't a vct?!?"))
      (if (not (= (vct-length v0) 10)) (snd-display (format #f ";v0 length = ~D?" (vct-length v0))))
      (vct-fill! v0 1.0)
      (vct-fill! v1 0.5)
      (if (equal? v0 v1) (snd-display (format #f ";vct equal? ~A ~A" v0 v1)))
      (if (eq? v0 v1) (snd-display (format #f ";vct eq? ~A ~A" v0 v1)))
      (let ((v2 v1)
	    (v3 (make-vct 10))
	    (v4 (make-vct 3)))
	(if (not (eq? v1 v2)) (snd-display (format #f ";vct not eq? ~A ~A" v1 v2)))
	(vct-fill! v3 0.5) 
	(if (not (equal? v3 v1)) (snd-display (format #f ";vct not equal? ~A ~A" v3 v1)))
	(if (equal? v4 v1) (snd-display (format #f ";len diff vct equal? ~A ~A" v4 v1))))
      (vct-set! vlst 1 .1)
      (if (not (feql (vct->list vlst) (list 0.0 0.1 0.0))) (snd-display (format #f ";vct->list: ~A?" (vct->list vlst))))
      (let* ((vect #(0 1 2 3))
	     (v2 (vector->vct vect))
	     (v3 v2)
	     (str (format #f "~A" v2)))
	(if (not (string=? str "#<vct[len=4]: 0.000 1.000 2.000 3.000>"))
	    (snd-display (format #f ";vct print: ~%  ~A~%  ~A?" str v2)))
	(if (not (equal? v3 v2)) (snd-display (format #f ";vct=? ~A ~A?" v2 v3)))
	(if (not (= (vct-length v2) 4)) (snd-display (format #f ";vector->vct length: ~A?" (vct-length v2))))
	(if (fneq (vct-ref v2 2) 2.0) (snd-display (format #f ";vector->vct: ~A?" v2)))
	(vct-move! v2 0 2)
	(if (fneq (vct-ref v2 0) 2.0) (snd-display (format #f ";vct-move!: ~A?" v2))))
      (let ((v2 (make-vct 4)))
	(do ((i 0 (1+ i)))
	    ((= i 4))
	  (vct-set! v2 i i))
	(vct-move! v2 3 2 #t)
	(if (or (fneq (vct-ref v2 3) 2.0) (fneq (vct-ref v2 2) 1.0))
	    (snd-display (format #f ";vct-move! back: ~A?" v2))))
      (do ((i 0 (1+ i)))
	  ((= i 10))
	(if (fneq (vct-ref v0 i) 1.0) (snd-display (format #f ";fill v0[~D] = ~F?" i (vct-ref v0 i))))
	(if (fneq (vct-ref v1 i) 0.5) (snd-display (format #f ";preset v1[~D] = ~F?" i (vct-ref v1 i)))))
      (vct-add! v0 v1)
      (do ((i 0 (1+ i)))
	  ((= i 10))
	(if (fneq (vct-ref v0 i) 1.5) (snd-display (format #f ";add v0[~D] = ~F?" i (vct-ref v0 i)))))
      (vct-subtract! v0 v1)
      (do ((i 0 (1+ i)))
	  ((= i 10))
	(if (fneq (vct-ref v0 i) 1.0) (snd-display (format #f ";subtract v0[~D] = ~F?" i (vct-ref v0 i)))))
      (let ((v2 (vct-copy v0)))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (if (fneq (vct-ref v2 i) 1.0) (snd-display (format #f ";copy v0[~D] = ~F?" i (vct-ref v2 i)))))
	(vct-scale! v2 5.0)
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (if (fneq (vct-ref v2 i) 5.0) (snd-display (format #f ";scale v2[~D] = ~F?" i (vct-ref v2 i)))))
	(vct-offset! v0 -1.0)
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (if (fneq (vct-ref v0 i) 0.0) (snd-display (format #f ";offset v0[~D] = ~F?" i (vct-ref v0 i)))))
	(vct-multiply! v2 v1)
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (if (fneq (vct-ref v2 i) 2.5) (snd-display (format #f ";multiply v2[~D] = ~F?" i (vct-ref v2 i)))))
	(if (fneq (vct-peak v2) 2.5) (snd-display (format #f ";v2's peak is ~F?" (vct-peak v2))))
	(vct-set! v2 5 123.0)
	(if (fneq (vct-peak v2) 123.0) (snd-display (format #f ";v2's set peak is ~F?" (vct-peak v2))))
	(let ((vn (make-vct 32))
	      (vb (make-vct 64))
	      (vs (make-vct 3))
	      (vss (make-vct 1)))
	  (do ((i 0 (1+ i)))
	      ((= i 32))
	    (vct-set! vn i i))
	  (let ((vnew (vct-subseq vn 3)))
	    (if (fneq (vct-ref vnew 0) 3.0) (snd-display (format #f ";vct-subseq[3:] ~A?" (vct-ref vnew 0))))
	    (if (not (= (vct-length vnew) 29)) (snd-display (format #f ";vct-subseq[3:] length: ~A?" (vct-length vnew)))))
	  (let ((vnew (vct-subseq vn 3 8)))
	    (if (fneq (vct-ref vnew 0) 3.0) (snd-display (format #f ";vct-subseq[3:8] ~A?" (vct-ref vnew 0))))
	    (if (not (= (vct-length vnew) 6)) (snd-display (format #f ";vct-subseq[3:8] length: ~A?" (vct-length vnew)))))
	  (vct-subseq vn 3 3 vs)
	  (if (or (fneq (vct-ref vs 0) 3.0)
		  (fneq (vct-ref vs 1) 0.0)
		  (fneq (vct-ref vs 2) 0.0))
	      (snd-display (format #f ";vct-subseq[3:3->vs] ~A?" vs)))
	  (vct-subseq vn 0 32 vs)
	  (if (not (= (vct-length vs) 3)) (snd-display (format #f ";vct-subseq[0:32->vs] length: ~A?" (vct-length vs))))
	  (vct-subseq vn 2 3 vss)
	  (if (fneq (vct-ref vss 0) 2.0) (snd-display (format #f ";vct-subseq[2:3->vss] ~A?" (vct-ref vss 0))))
	  (vct-set! vb 8 123.0)
	  (vct-subseq vn 1 8 vb)
	  (if (fneq (vct-ref vb 0) 1.0) (snd-display (format #f ";vct-subseq[1:8->vb] ~A?" (vct-ref vb 0))))
	  (if (fneq (vct-ref vb 8) 123.0) (snd-display (format #f ";vct-subseq[1:8->vb][8] ~A?" (vct-ref vb 8)))))
	(vct-do! v0 (lambda (i) (* i .5)))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (if (fneq (vct-ref v0 i) (* i .5)) (snd-display (format #f ";do v0[~D] = ~F?" i (vct-ref v0 i)))))
	(vct-map! v0 (lambda () 1.0))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (if (fneq (vct-ref v0 i) 1.0) (snd-display (format #f ";map v0[~D] = ~F?" i (vct-ref v0 i)))))
	(vcts-do! v0 v1 v2 (lambda (num i) (list i 0.0 (* i 2))))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (if (fneq (vct-ref v0 i) i) (snd-display (format #f ";dos v0[~D] = ~F?" i (vct-ref v0 i))))
	  (if (fneq (vct-ref v1 i) 0.0) (snd-display (format #f ";dos v1[~D] = ~F?" i (vct-ref v1 i))))
	  (if (fneq (vct-ref v2 i) (* i 2)) (snd-display (format #f ";dos v2[~D] = ~F?" i (vct-ref v2 i)))))
	(vcts-map! v0 v1 v2 (lambda (num) (list 0.0 1.0 2.0)))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (if (fneq (vct-ref v0 i) 0.0) (snd-display (format #f ";maps v0[~D] = ~F?" i (vct-ref v0 i))))
	  (if (fneq (vct-ref v1 i) 1.0) (snd-display (format #f ";maps v1[~D] = ~F?" i (vct-ref v1 i))))
	  (if (fneq (vct-ref v2 i) 2.0) (snd-display (format #f ";maps v2[~D] = ~F?" i (vct-ref v2 i)))))
	(let ((fd (open-sound-file "hiho.snd" 1 22050 "hiho is from snd-test")))
	  (vct->sound-file fd v2 10)
	  (close-sound-file fd 10)
	  (let ((v3 (make-vct 40)))
	    (file->array "hiho.snd" 0 0 10 v3)
	    (if (fneq (vct-ref v3 5) (vct-ref v2 5))
		(snd-display (format #f ";vct->sound-file: ~A ~A?" v2 v3))))))
      (if (provided? 'snd-new-smob)
	  (begin
	    (if (fneq ((vct 1.0 2.0 3.0) 1) 2.0)
		(snd-display (format #f ";(vct...) = ~A?" ((vct 1.0 2.0 3.0) 1))))
	    (let ((v1 (vct 1 2 3 4)))
	      (if (fneq (v1 1) 2.0)
		  (snd-display (format #f ";(v1 1) = ~A?" (v1 1)))))))
      (let ((nind (new-sound "tmp.snd" mus-next mus-bshort 22050 1 "hiho a comment")))
	(test-prc95)
	(play-and-wait 0 nind)
	(set! (use-sinc-interp) #f)
	(set! (speed nind) .5)
	(play-and-wait)
	(call-apply)
	(set! (use-sinc-interp) #t)
	(close-sound nind)
	(delete-file "tmp.snd"))
      )
    )


;;; ---------------- test 7: colors ----------------
(if (and (or full-test (= snd-test 7))
	 (or (provided? 'snd-gtk)
	     (provided? 'snd-motif)))
    (letrec ((test-color
	      (lambda (lst)
		(if (not (null? lst))
		    (let ((name (list-ref (car lst) 0))
			  (getfnc (list-ref (car lst) 1))
			  (setfnc (list-ref (car lst) 2))
			  (initval (list-ref (car lst) 3)))
		      (if (not (color? initval)) (snd-display (format #f ";~A not color?" initval)))
		      ;; we'll get warnings here if the cell chosen didn't exactly match the one requested -- not a bug
		      ;; (if (not (equal? (getfnc) initval))
		      ;;	  (snd-display (format #f ";~A /= ~A (~A)?~%" name initval (getfnc))))
		      (setfnc beige)
		      (if (not (equal? (getfnc) beige))
			  (snd-display (format #f ";set-~A /= beige (~A)?~%" name (getfnc))))
		      (setfnc initval)
		      (test-color (cdr lst)))))))
      (if (procedure? trace-hook) (trace-hook 7))
      (let* ((c1 (make-color 0 0 1))
	     (c2 c1)
	     (c3 (make-color 0 0 1)))
	(if (not (equal? c1 c2)) (snd-display (format #f ";color equal? ~A ~A?" c1 c2)))
	(if (not (eq? c1 c2)) (snd-display (format #f ";color eq? ~A ~A?" c1 c2)))
	(if (not (equal? c1 c3)) (snd-display (format #f ";diff color equal? ~A ~A?" c1 c3)))
	(if (eq? c1 c3) (snd-display (format #f ";diff color eq? ~A ~A?" c1 c3)))
	(let ((str (format #f "~A" c1)))
	  (if (not (string=? str "#<color: (0.00 0.00 1.00)>"))
	      (snd-display (format #f ";print color: ~A ~A?" str c1)))))
      (let ((old-tan tan))
	(load "rgb.scm")
	(set! tan old-tan))
      (test-color
       (list
	(list 'basic-color basic-color set-basic-color ivory2)
	(list 'cursor-color cursor-color set-cursor-color red)
	(list 'data-color data-color set-data-color black)
	(list 'enved-waveform-color enved-waveform-color set-enved-waveform-color blue)
	(list 'filter-waveform-color filter-waveform-color set-filter-waveform-color blue)
	(list 'graph-color graph-color set-graph-color white)
	(list 'highlight-color highlight-color set-highlight-color ivory1)
	(list 'listener-color listener-color set-listener-color alice-blue)
	(list 'listener-text-color listener-text-color set-listener-text-color black)
	(list 'mark-color mark-color set-mark-color red)
	(list 'mix-color mix-color set-mix-color dark-gray)
	(list 'selected-mix-color selected-mix-color set-selected-mix-color light-green)
	(list 'position-color position-color set-position-color ivory3)
	(list 'pushed-button-color pushed-button-color set-pushed-button-color lightsteelblue1)
	(list 'sash-color sash-color set-sash-color light-green)
	(list 'selected-data-color selected-data-color set-selected-data-color black)
	(list 'selected-graph-color selected-graph-color set-selected-graph-color white)
	(list 'selection-color selection-color set-selection-color lightsteelblue1)
	(list 'text-focus-color text-focus-color set-text-focus-color white)
	(list 'zoom-color zoom-color set-zoom-color ivory4)))
      (let ((hi (make-vector 512)))
	(do ((i 0 (+ i 4))) ((>= i 512))
	  (vector-set! hi i red) 
	  (vector-set! hi (+ i 1) blue)
	  (vector-set! hi (+ i 2) green) 
	  (vector-set! hi (+ i 3) black))
	(load-colormap hi))
      (let ((ind (open-sound "oboe.snd")))
	(recolor-widget (cadr (sound-widgets ind)) (make-color 1 0 0))
        (set-widget-foreground (cadr (sound-widgets 0)) (make-color 0 1 0))
	(close-sound ind))
      ))


(load "examp.scm")
(reset-hook! graph-hook)
(load "mix.scm")
(load "pqwvox.scm")
(clear-sincs)

;;; ---------------- test 8: clm ----------------

(define (print-and-check gen name desc insp)
  (if (not (string=? (mus-name gen) name))
      (snd-display (format #f ";mus-name ~A: ~A?" name (mus-name gen))))
  (if (not (string=? (mus-describe gen) desc))
      (snd-display (format #f ";mus-describe ~A: ~A?" (mus-name gen) (mus-describe gen))))
  (if (not (string=? (mus-inspect gen) insp))
      (snd-display (format #f ";mus-inspect ~A: ~A?" (mus-name gen) (mus-inspect gen))))
  (let ((egen gen))
    (if (not (equal? egen gen))
	(snd-display (format #f ";equal? ~A: ~A?" gen egen)))))

(define (test-gen-equal g0 g1 g2)
  ;; g0 = g1 at start != g2
  (let ((g3 g0)
	(gad (make-frame 2)))
    (if (not (eq? g0 g3))
	(snd-display (format #f ";let ~A eq? ~A ~A" (mus-name g0) g0 g3)))
    (if (eq? g0 g1)
	(snd-display (format #f ";arg ~A eq? ~A ~A" (mus-name g0) g0 g1)))
    (if (not (equal? g0 g1))
	(snd-display (format #f ";~A equal? ~A ~A" (mus-name g0) g0 g1)))
    (if (equal? g0 g2)
	(snd-display (format #f ";~A not equal? ~A ~A" (mus-name g0) g0 g2)))
    (if (equal? g0 gad)
	(snd-display (format #f ";~A equal frame? ~A ~A" (mus-name g0) g0 gad)))
    (if (provided? 'snd-new-smob)
	(begin
	  (g0)
	  (g3)
	  (g3)
	  (if (not (eq? g0 g3))
	      (snd-display (format #f ";run let ~A eq? ~A ~A" (mus-name g0) g0 g3)))
	  (if (eq? g0 g1)
	      (snd-display (format #f ";arg ~A eq? ~A ~A" (mus-name g0) g0 g1)))
	  (if (equal? g0 g1)
	      (snd-display (format #f ";run ~A equal? ~A ~A" (mus-name g0) g0 g1)))
	  (if (equal? g0 g2)
	      (snd-display (format #f ";run ~A not equal? ~A ~A" (mus-name g0) g0 g2)))))))
    
(if (or full-test (= snd-test 8))
    (do ((clmtest 0 (1+ clmtest))) ((= clmtest tests))
      (if (procedure? trace-hook) (trace-hook 8))
      (log-mem clmtest)
      (if (> tests 1) (snd-display (format #f ";clm test ~D " clmtest)))
      (set! (mus-srate) 22050)
      (if (not (= (mus-file-buffer-size) 8192)) (snd-display (format #f ";mus-file-buffer-size: ~D?" (mus-file-buffer-size))))
      (if (not (= (mus-array-print-length) 8)) (snd-display (format #f ";mus-array-print-length: ~D?" (mus-array-print-length))))
      (set! (mus-array-print-length) 32)
      (if (not (= (mus-array-print-length) 32)) (snd-display (format #f ";set mus-array-print-length: ~D?" (mus-array-print-length))))
      (set! (mus-array-print-length) 8)
      (if (fneq (mus-srate) 22050.0) (snd-display (format #f ";mus-srate: ~F?" (mus-srate))))
      (if (fneq (hz->radians 1.0) 2.84951704088598e-4) (snd-display (format #f ";hz->radians: ~F?" (hz->radians 1.0))))
      (if (fneq (radians->hz 2.84951704088598e-4) 1.0) (snd-display (format #f ";radians->hz: ~F?" (radians->hz 2.84951704088598e-4))))
      (if (fneq (radians->degrees 1.0) 57.2957801818848) (snd-display (format #f ";radians->degrees: ~F?" (radians->degrees 1.0))))
      (if (fneq (degrees->radians 57.2957801818848) 1.0) (snd-display (format #f ";degrees->radians: ~F?" (degrees->radians 57.2957801818848))))
      (if (fneq (linear->db .25) -12.0411996841431) (snd-display (format #f ";linear->db: ~F?" (linear->db .25))))
      (if (fneq (db->linear -12.0411996841431) .25) (snd-display (format #f ";db->linear: ~F?" (db->linear -12.0411996841431))))
      (if (fneq (hz->radians 1.0) (in-hz 1.0)) (snd-display (format #f ";in-hz: ~F? " (in-hz 1.0))))
      (if (fneq (ring-modulate .4 .5) .2) (snd-display (format #f ";ring-modulate: ~F?" (ring-modulate .4 .5))))
      (if (fneq (amplitude-modulate 1.0 .5 .4) .7) (snd-display (format #f ";amplitude-modulate: ~F?" (amplitude-modulate 1.0 .5 .4))))
      (if (fneq (contrast-enhancement 0.1 0.75) (sin (+ (* 0.1 (/ pi 2)) (* .75 (sin (* 0.1 2.0 pi))))))
	  (snd-display (format #f ";contrast-enhancement: ~F (0.562925306221587)" (contrast-enhancement 0.1 0.75))))
      (let ((v0 (partials->polynomial '(1 1 2 1) 1))
	    (v1 (partials->polynomial '(1 1 2 1) 0))
	    (v2 (partials->polynomial '(1 1 2 1 3 1 5 1) 1))
	    (v3 (partials->polynomial '(1 1 2 1 3 1 5 1) 0))
	    (v4 (partials->polynomial '(1 1 2 .5 3 .1 6 .01) 1))
	    (v5 (partials->polynomial '(1 1 2 .5 3 .1 6 .01) 0)))
	(if (not (fveql v0 '(-1.000 1.000 2.000) 0)) (snd-display (format #f ";partials->polynomial(1): ~A?" v0)))
	(if (not (fveql v1 '(1.000 2.000 0.0) 0)) (snd-display (format #f ";partials->polynomial(2): ~A?" v1)))
	(if (not (fveql v2 '(-1.000 3.000 2.000 -16.000 0.000 16.000) 0)) (snd-display (format #f ";partials->polynomial(3): ~A?" v2)))
	(if (not (fveql v3 '(1.000 2.000 -8.000 0.000 16.000 0.000) 0)) (snd-display (format #f ";partials->polynomial(4): ~A?" v3)))
	(if (not (fveql v4 '(-0.510 0.700 1.180 0.400 -0.480 0.000 0.320) 0)) (snd-display (format #f ";partials->polynomial(5): ~A?" v4)))
	(if (not (fveql v5 '(0.900 1.060 0.400 -0.320 0.000 0.320 0.000) 0)) (snd-display (format #f ";partials->polynomial(6): ~A?" v5))))

      (let* ((amps (list->vct '(1.0)))
	     (phases (list->vct '(0.0)))
	     (val (sum-of-sines amps phases)))
	(if (fneq val 0.0) (snd-display (format #f ";sum-of-sines: ~A 0.0?" val)))
	(vct-set! phases 0 (/ pi 2))
	(set! val (sum-of-sines amps phases))
	(if (fneq val 1.0) (snd-display (format #f ";sum-of-sines: ~A 1.0?" val)))
	(set! amps (list->vct '(0.5 0.25 1.0)))
	(set! phases (list->vct '(1.0 0.5 2.0)))
	(set! val (sum-of-sines amps phases))
	(if (fneq val 1.44989) (snd-display (format #f ";sum-of-sines: ~A 1.449?" val))))

      (let ((rdat (make-vct 16))
	    (idat (make-vct 16))
	    (vdat (make-vct 16)))
	(vct-set! rdat 0 1.0)
	(vct-set! vdat 0 1.0)
	(let ((v0 (spectrum rdat idat (make-fft-window rectangular-window 16) 16 1)) ;rectangular here to avoid clobbering 0-th data point
	      (v1 (snd-spectrum vdat rectangular-window 16 #t)))
	  (do ((i 0 (1+ i)))
	      ((= i 8)) ;should all be 1.0 (impulse in)
	    (if (fneq (vct-ref v0 i) (vct-ref v1 i))
		(snd-display (format #f ";spectra not equal: ~A ~A" v0 v1))))))

      (let ((rdat (make-vct 16))
	    (idat (make-vct 16))
	    (xdat (make-vct 16))
	    (ydat (make-vct 16)))
	(vct-set! rdat 0 1.0)
	(vct-set! idat 1 1.0)
	(vct-set! xdat 0 1.0)
	(vct-set! ydat 1 1.0)
	(let ((v0 (convolution rdat idat 8))
	      (v1 (convolve-arrays xdat ydat)))
	  (if (or (fneq (vct-ref v0 0) 0.0) (fneq (vct-ref v0 1) 1.0)) (snd-display (format #f ";convolution: ~A?" v0)))
	  (if (or (fneq (vct-ref v1 0) 0.0) (fneq (vct-ref v1 1) 1.0)) (snd-display (format #f ";convolve-arrays: ~A?" v1)))
	  (do ((i 0 (1+ i)))
	      ((= i 8)) 
	    (if (fneq (vct-ref v0 i) (vct-ref v1 i))
		(snd-display (format #f ";convolutions not equal: ~A ~A" v0 v1))))))

      (let ((rdat (make-vct 16))
	    (idat (make-vct 16))
	    (xdat (make-vct 16))
	    (ydat (make-vct 16)))
	(vct-set! rdat 3 1.0)
	(vct-set! xdat 3 1.0)
	(fft rdat idat 1)
	(mus-fft xdat ydat 16 1)
	(if (fneq (vct-ref rdat 0) (vct-ref xdat 0)) (snd-display (format #f ";ffts: ~A ~A?" rdat xdat)))
	(fft rdat idat -1)
	(mus-fft xdat ydat 16 -1)
	(do ((i 0 (1+ i)))
	    ((= i 16))
	  (if (or (and (= i 3) (or (fneq (vct-ref rdat i) 16.0) (fneq (vct-ref xdat i) 16.0)))
		  (and (not (= i 3)) (or (fneq (vct-ref rdat i) 0.0) (fneq (vct-ref xdat i) 0.0))))
	      (snd-display (format #f ";fft real[~D]: ~A ~A?" i (vct-ref rdat i) (vct-ref xdat i))))
	  (if (or (fneq (vct-ref idat i) 0.0) (fneq (vct-ref ydat i) 0.0))
	      (snd-display (format #f ";fft imag[~D]: ~A ~A?" i (vct-ref idat i) (vct-ref ydat i))))))

      (let ((rdat (make-vector 16))
	    (idat (make-vector 16)))
	(do ((i 0 (1+ i)))
	    ((= i 16))
	  (vector-set! rdat i 0.0)
	  (vector-set! idat i 0.0))
	(vector-set! rdat 3 1.0)
	(fft rdat idat 1)
	(fft rdat idat -1)
	(if (or (fneq (vector-ref rdat 3) 16.0)
		(fneq (vector-ref rdat 4) 0.0))
	    (snd-display (format #f ";vector fft real[~D]: ~A ~A?" i (vector-ref rdat 3) (vector-ref rdat 4)))))

      (let* ((size 256)
	     (rdat (make-vct 256))
	     (idat (make-vct 256))
	     (xdat (make-vct 256)))
	(vct-set! rdat 3 1.0)
	(vct-set! xdat 3 1.0)
	(fft rdat idat 1)
	(fht xdat)
	(do ((i 1 (1+ i)))
	    ((= i (/ size 2)))
	  (let ((hdat (* (sqrt (+ (* (vct-ref xdat i) (vct-ref xdat i))
				  (* (vct-ref xdat (- size i)) (vct-ref xdat (- size i)))))
			 (/ (sqrt 2.0) size)))
		(fdat (* (sqrt (+ (* (vct-ref rdat i) (vct-ref rdat i))
				  (* (vct-ref idat i) (vct-ref idat i))))
			 (/ 2 size))))
	    (if (fneq fdat hdat)
		(snd-display (format #f ";~D: fft ~A, fht ~A " i fdat hdat)))))
	(fft rdat idat -1)
	(fht xdat)
	(if (fneq (vct-ref rdat 3) size)
	    (snd-display (format #f ";ifft: ~A" (vct-ref rdat 3))))
	(if (fneq (vct-ref xdat 3) size)
	    (snd-display (format #f ";ifht: ~A" (vct-ref xdat 3))))
	(if (fneq (vct-ref rdat 4) 0.0)
	    (snd-display (format #f ";ifft: ~A" (vct-ref rdat 3))))
	(if (fneq (vct-ref xdat 4) 0.0)
	    (snd-display (format #f ";ifht: ~A" (vct-ref xdat 3)))))

      (let ((v0 (make-vct 10))
	    (v1 (make-vct 10)))
	(vct-fill! v0 1.0)
	(vct-fill! v1 0.5)
	(multiply-arrays v0 v1)
	(if (fneq (vct-ref v0 0) 0.5) (snd-display (format #f ";multiple-arrays: ~F?" (vct-ref v0 0))))
	(let ((sum (dot-product v0 v1)))
	  (if (fneq sum 2.5) (snd-display (format #f ";dot-product: ~F?" sum))))
	(clear-array v0)
	(if (fneq (vct-ref v0 3) 0.0) (snd-display (format #f ";clear-array: ~A?" v0)))
	(vct-fill! v0 1.0)
	(vct-fill! v1 0.5)
	(let ((v2 (rectangular->polar v0 v1)))
	  (if (fneq (vct-ref v2 0) 1.118) (snd-display (format #f ";rectangular->polar: ~A?" v2)))))

      (let ((v0 (make-vct 3)))
	(vct-set! v0 0 1.0)
	(vct-set! v0 1 0.5)
	(vct-set! v0 2 0.1)
	(if (or (fneq (polynomial v0 0.0) 1.0)
		(fneq (polynomial v0 1.0) 1.6)
		(fneq (polynomial v0 2.0) 2.4))
	    (snd-display (format #f ";polynomial: ~A ~A ~A?"
				 (polynomial v0 0.0)
				 (polynomial v0 1.0)
				 (polynomial v0 2.0)))))

      (let ((v0 (make-vct 10)))
	(do ((i 0 (1+ i))) ((= i 10))
	  (vct-set! v0 i i))
	(if (fneq (array-interp v0 3.5) 3.5) (snd-display (format #f ";array-interp: ~F?" (array-interp v0 3.5))))
	(if (fneq (array-interp v0 13.5) 3.5) (snd-display (format #f ";array-interp(13.5): ~F?" (array-interp v0 13.5))))
	(if (fneq (array-interp v0 -6.5) 3.5) (snd-display (format #f ";array-interp(-6.5): ~F?" (array-interp v0 -6.5))))
	(if (fneq (array-interp v0 103.6) 3.6) (snd-display (format #f ";array-interp(103.5): ~F?" (array-interp v0 103.6))))
	(if (fneq (array-interp v0 -106.6) 3.4) (snd-display (format #f ";array-interp(-106.6): ~F?" (array-interp v0 -106.6))))
	(if (fneq (array-interp v0 -0.5) 4.5) (snd-display (format #f ";array-interp(-0.5): ~F?" (array-interp v0 -0.5))))
	;; interpolating between 9 and 0 here (confusing...)
	(if (fneq (array-interp v0 -0.9) 8.1) (snd-display (format #f ";array-interp(-0.9): ~F?" (array-interp v0 -0.9))))
	(if (fneq (array-interp v0 -0.1) 0.9) (snd-display (format #f ";array-interp(-0.1): ~F?" (array-interp v0 -0.1))))
	(if (fneq (array-interp v0 9.1) 8.1) (snd-display (format #f ";array-interp(9.1): ~F?" (array-interp v0 9.1))))
	(if (fneq (array-interp v0 9.9) 0.9) (snd-display (format #f ";array-interp(9.9): ~F?" (array-interp v0 9.9))))
	(if (fneq (array-interp v0 10.1) 0.1) (snd-display (format #f ";array-interp(10.1): ~F?" (array-interp v0 10.1)))))

      (let ((gen (make-delay 3))
	    (gen1 (make-delay 4 :initial-contents '(1.0 0.5 0.25 0.0)))
	    (v0 (make-vct 10)))
	(print-and-check gen 
			 "delay" 
			 "delay: line[3]: [0.000 0.000 0.000]"
			 "dly line[3,3 at 0,0 (external)]: [0.000 0.000 0.000], xscl: 0.000000, yscl: 0.000000")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (delay gen i)))
	(if (not (delay? gen)) (snd-display (format #f ";~A not delay?" gen)))
	(if (not (= (mus-length gen) 3)) (snd-display (format #f ";delay length: ~D?" (mus-length gen))))
	(if (or (fneq (vct-ref v0 1) 0.0) (fneq (vct-ref v0 4) 1.0) (fneq (vct-ref v0 8) 5.0))
	    (snd-display (format #f ";delay output: ~A" v0)))
	(if (or (fneq (delay gen1) 1.0) 
		(fneq (delay gen1) 0.5)
		(fneq (delay gen1) 0.25)
		(fneq (delay gen1) 0.0)
		(fneq (delay gen1) 0.0))
	    (snd-display (format #f ";delay with initial-contents confused"))))

      (test-gen-equal (let ((d1 (make-delay 3))) (delay d1 1.0) d1) 
		      (let ((d2 (make-delay 3))) (delay d2 1.0) d2)
		      (let ((d3 (make-delay 4))) (delay d3 1.0) d3))
      (test-gen-equal (make-delay 3 :initial-element 1.0) (make-delay 3 :initial-element 1.0) (make-delay 3 :initial-element 0.5))
      (test-gen-equal (make-delay 3 :initial-contents '(1.0 0.0 0.0)) 
		      (make-delay 3 :initial-contents '(1.0 0.0 0.0)) 
		      (make-delay 3 :initial-contents '(1.0 1.0 1.0)))

      (let ((gen (make-all-pass .4 .6 3))
	    (v0 (make-vct 10)))
	(print-and-check gen 
			 "all_pass"
			 "all_pass: feedback: 0.600, feedforward: 0.400, line[3]:[0.000 0.000 0.000]"
			 "dly line[3,3 at 0,0 (external)]: [0.000 0.000 0.000], xscl: 0.600000, yscl: 0.400000")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (all-pass gen 1.0)))
	(if (not (all-pass? gen)) (snd-display (format #f ";~A not all-pass?" gen)))
	(if (not (= (mus-length gen) 3)) (snd-display (format #f ";all-pass length: ~D?" (mus-length gen))))
	(if (not (= (mus-order gen) 3)) (snd-display (format #f ";all-pass order: ~D?" (mus-order gen))))
	(if (fneq (mus-feedback gen) .4) (snd-display (format #f ";all-pass feedback: ~F?" (mus-feedback gen))))
	(if (fneq (mus-feedforward gen) .6) (snd-display (format #f ";all-pass feedforward: ~F?" (mus-feedforward gen))))
	(if (or (fneq (vct-ref v0 1) 0.6) (fneq (vct-ref v0 4) 1.84) (fneq (vct-ref v0 8) 2.336))
	    (snd-display (format #f ";all-pass output: ~A" v0)))
	(set! (mus-feedback gen) 0.5) (if (fneq (mus-feedback gen) .5) (snd-display (format #f ";all-pass set-feedback: ~F?" (mus-feedback gen))))
	(set! (mus-feedforward gen) 0.5) (if (fneq (mus-feedforward gen) .5) (snd-display (format #f ";all-pass set-feedforward: ~F?" (mus-feedforward gen)))))

      (test-gen-equal (let ((d1 (make-all-pass 0.7 0.5 3))) (all-pass d1 1.0) d1)
		      (let ((d2 (make-all-pass 0.7 0.5 3))) (all-pass d2 1.0) d2) 
		      (let ((d3 (make-all-pass 0.7 0.5 4))) (all-pass d3 1.0) d3))
      (test-gen-equal (make-all-pass 0.7 0.5 3 :initial-element 1.0) 
		      (make-all-pass 0.7 0.5 3 :initial-element 1.0) 
		      (make-all-pass 0.7 0.5 3 :initial-element 0.5))
      (test-gen-equal (make-all-pass 0.7 0.5 3 :initial-element 1.0) 
		      (make-all-pass 0.7 0.5 3 :initial-element 1.0) 
		      (make-all-pass 0.5 0.5 3 :initial-element 1.0))
      (test-gen-equal (make-all-pass 0.7 0.5 3 :initial-contents '(1.0 0.0 0.0)) 
		      (make-all-pass 0.7 0.5 3 :initial-contents '(1.0 0.0 0.0)) 
		      (make-all-pass 0.7 0.5 3 :initial-contents '(1.0 1.0 1.0)))

      (let ((gen (make-comb .4 3))
	    (v0 (make-vct 10)))
	(print-and-check gen 
			 "comb"
			 "comb: scaler: 0.400, line[3]: [0.000 0.000 0.000]"
			 "dly line[3,3 at 0,0 (external)]: [0.000 0.000 0.000], xscl: 0.400000, yscl: 0.000000")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (comb gen 1.0)))
	(if (not (comb? gen)) (snd-display (format #f ";~A not comb?" gen)))
	(if (not (= (mus-length gen) 3)) (snd-display (format #f ";comb length: ~D?" (mus-length gen))))
	(if (not (= (mus-order gen) 3)) (snd-display (format #f ";comb order: ~D?" (mus-order gen))))
	(if (fneq (mus-feedback gen) .4) (snd-display (format #f ";comb feedback: ~F?" (mus-feedback gen))))
	(if (or (fneq (vct-ref v0 1) 0.0) (fneq (vct-ref v0 4) 1.0) (fneq (vct-ref v0 8) 1.4))
	    (snd-display (format #f ";comb output: ~A" v0))))

      (test-gen-equal (let ((d1 (make-comb 0.7 3))) (comb d1 1.0) d1) 
		      (let ((d2 (make-comb 0.7 3))) (comb d2 1.0) d2) 
		      (let ((d3 (make-comb 0.7 4))) (comb d3 1.0) d3))
      (test-gen-equal (make-comb 0.7 3 :initial-element 1.0) 
		      (make-comb 0.7 3 :initial-element 1.0) 
		      (make-comb 0.7 3 :initial-element 0.5))
      (test-gen-equal (make-comb 0.7 3 :initial-element 1.0) 
		      (make-comb 0.7 3 :initial-element 1.0) 
		      (make-comb 0.5 3 :initial-element 1.0))
      (test-gen-equal (make-comb 0.7 3 :initial-contents '(1.0 0.0 0.0)) 
		      (make-comb 0.7 3 :initial-contents '(1.0 0.0 0.0)) 
		      (make-comb 0.7 3 :initial-contents '(1.0 1.0 1.0)))

      (let ((gen (make-notch .4 3))
	    (v0 (make-vct 10)))
	(print-and-check gen 
			 "notch"
			 "notch: scaler: 0.400, line[3]: [0.000 0.000 0.000]"
			 "dly line[3,3 at 0,0 (external)]: [0.000 0.000 0.000], xscl: 0.400000, yscl: 0.000000")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (notch gen 1.0)))
	(if (not (notch? gen)) (snd-display (format #f ";~A not notch?" gen)))
	(if (not (= (mus-length gen) 3)) (snd-display (format #f ";notch length: ~D?" (mus-length gen))))
	(if (not (= (mus-order gen) 3)) (snd-display (format #f ";notch order: ~D?" (mus-order gen))))
	(if (fneq (mus-feedforward gen) .4) (snd-display (format #f ";notch feedforward: ~F?" (mus-feedforward gen))))
	(if (or (fneq (vct-ref v0 1) 0.4) (fneq (vct-ref v0 4) 1.4) (fneq (vct-ref v0 8) 1.4))
	    (snd-display (format #f ";notch output: ~A" v0))))

      (test-gen-equal (let ((d1 (make-notch 0.7 3))) (notch d1 1.0) d1)
		      (let ((d2 (make-notch 0.7 3))) (notch d2 1.0) d2)
		      (let ((d3 (make-notch 0.7 4))) (notch d3 1.0) d3))
      (test-gen-equal (make-notch 0.7 3 :initial-element 1.0) 
		      (make-notch 0.7 3 :initial-element 1.0) 
		      (make-notch 0.7 3 :initial-element 0.5))
      (test-gen-equal (make-notch 0.7 3 :initial-element 1.0) 
		      (make-notch 0.7 3 :initial-element 1.0) 
		      (make-notch 0.5 3 :initial-element 1.0))
      (test-gen-equal (make-notch 0.7 3 :initial-contents '(1.0 0.0 0.0)) 
		      (make-notch 0.7 3 :initial-contents '(1.0 0.0 0.0)) 
		      (make-notch 0.7 3 :initial-contents '(1.0 1.0 1.0)))

      (let ((gen (make-one-pole .4 .7))
	    (v0 (make-vct 10)))
	(print-and-check gen 
			 "one_pole"
			 "one_pole: a0: 0.400, b1: 0.700, y1: 0.000"
			 "smpflt a0: 0.400000, a1: 0.000000, a2: 0.000000, b1: 0.700000, b2: 0.000000, x1: 0.000000, x2: 0.000000, y1: 0.000000, y2: 0.000000")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (one-pole gen 1.0)))
	(if (not (one-pole? gen)) (snd-display (format #f ";~A not one-pole?" gen)))
	(if (not (= (mus-order gen) 1)) (snd-display (format #f ";one-pole order: ~D?" (mus-order gen))))
	(if (fneq (mus-a0 gen) .4) (snd-display (format #f ";one-pole a0: ~F?" (mus-a0 gen))))
	(if (fneq (mus-b1 gen) .7) (snd-display (format #f ";one-pole b1: ~F?" (mus-b1 gen))))
	(if (or (fneq (vct-ref v0 1) 0.120) (fneq (vct-ref v0 4) 0.275) (fneq (vct-ref v0 8) 0.245))
	    (snd-display (format #f ";one-pole output: ~A" v0))))

      (let ((gen (make-one-zero .4 .7))
	    (v0 (make-vct 10)))
	(print-and-check gen
			 "one_zero"
			 "one_zero: a0: 0.400, a1: 0.700, x1: 0.000"
			 "smpflt a0: 0.400000, a1: 0.700000, a2: 0.000000, b1: 0.000000, b2: 0.000000, x1: 0.000000, x2: 0.000000, y1: 0.000000, y2: 0.000000")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (one-zero gen 1.0)))
	(if (not (one-zero? gen)) (snd-display (format #f ";~A not one-zero?" gen)))
	(if (not (= (mus-order gen) 1)) (snd-display (format #f ";one-zero order: ~D?" (mus-order gen))))
	(if (fneq (mus-a0 gen) .4) (snd-display (format #f ";one-zero a0: ~F?" (mus-a0 gen))))
	(if (fneq (mus-a1 gen) .7) (snd-display (format #f ";one-zero a1: ~F?" (mus-a1 gen))))
	(if (fneq (vct-ref v0 1) 1.1) (snd-display (format #f ";one-zero output: ~A" v0))))

      (let ((gen (make-two-zero .4 .7 .3))
	    (v0 (make-vct 10)))
	(print-and-check gen 
			 "two_zero"
			 "two_zero: a0: 0.400, a1: 0.700, a2: 0.300, x1: 0.000, x2: 0.000"
			 "smpflt a0: 0.400000, a1: 0.700000, a2: 0.300000, b1: 0.000000, b2: 0.000000, x1: 0.000000, x2: 0.000000, y1: 0.000000, y2: 0.000000")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (two-zero gen 1.0)))
	(if (not (two-zero? gen)) (snd-display (format #f ";~A not two-zero?" gen)))
	(if (not (= (mus-order gen) 2)) (snd-display (format #f ";two-zero order: ~D?" (mus-order gen))))
	(if (fneq (mus-a0 gen) .4) (snd-display (format #f ";two-zero a0: ~F?" (mus-a0 gen))))
	(if (fneq (mus-a1 gen) .7) (snd-display (format #f ";two-zero a1: ~F?" (mus-a1 gen))))
	(if (fneq (mus-a2 gen) .3) (snd-display (format #f ";two-zero a2: ~F?" (mus-a2 gen))))
	(if (or (fneq (vct-ref v0 1) 1.1) (fneq (vct-ref v0 8) 1.4)) (snd-display (format #f ";two-zero output: ~A" v0))))

      (let ((gen (make-two-pole .4 .7 .3))
	    (v0 (make-vct 10)))
	(print-and-check gen 
			 "two_pole"
			 "two_pole: a0: 0.400, b1: 0.700, b2: 0.300, y1: 0.000, y2: 0.000"
			 "smpflt a0: 0.400000, a1: 0.000000, a2: 0.000000, b1: 0.700000, b2: 0.300000, x1: 0.000000, x2: 0.000000, y1: 0.000000, y2: 0.000000")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (two-pole gen 1.0)))
	(if (not (two-pole? gen)) (snd-display (format #f ";~A not two-pole?" gen)))
	(if (not (= (mus-order gen) 2)) (snd-display (format #f ";two-pole order: ~D?" (mus-order gen))))
	(if (fneq (mus-a0 gen) .4) (snd-display (format #f ";two-pole a0: ~F?" (mus-a0 gen))))
	(if (fneq (mus-b1 gen) .7) (snd-display (format #f ";two-pole b1: ~F?" (mus-b1 gen))))
	(if (fneq (mus-b2 gen) .3) (snd-display (format #f ";two-pole b2: ~F?" (mus-b2 gen))))
	(if (or (fneq (vct-ref v0 1) 0.12) (fneq (vct-ref v0 8) 0.201)) (snd-display (format #f ";two-pole output: ~A" v0))))

      (let ((gen (make-oscil 440.0))
	    (gen1 (make-oscil 440.0))
	    (v0 (make-vct 10))
	    (v1 (make-vct 10)))
	(print-and-check gen 
			 "oscil"
			 "oscil freq: 440.000Hz, phase: 0.000"
			 "osc freq: 0.125379, phase: 0.000000")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (oscil gen 0.0))
	  (vct-set! v1 i (mus-apply gen1 0.0 0.0)))
	(if (not (oscil? gen)) (snd-display (format #f ";~A not oscil?" gen)))
	(if (fneq (mus-phase gen) 1.253787) (snd-display (format #f ";oscil phase: ~F?" (mus-phase gen))))
	(if (fneq (mus-frequency gen) 440.0) (snd-display (format #f ";oscil frequency: ~F?" (mus-frequency gen))))
	(if (not (= (mus-cosines gen) 1)) (snd-display (format #f ";oscil cosines: ~D?" (mus-cosines gen))))
	(if (or (fneq (vct-ref v0 1) 0.125) (fneq (vct-ref v0 8) 0.843)) (snd-display (format #f ";oscil output: ~A" v0)))
	(set! (mus-phase gen) 0.0)
	(if (fneq (mus-phase gen) 0.0) (snd-display (format #f ";oscil set-phase: ~F?" (mus-phase gen))))
	(set! (mus-frequency gen) 100.0)
	(if (fneq (mus-frequency gen) 100.0) (snd-display (format #f ";oscil set-frequency: ~F?" (mus-frequency gen))))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (if (fneq (vct-ref v0 i) (vct-ref v1 i))
	      (snd-display (format #f ";mus-apply oscil at ~D: ~A ~A?" i (vct-ref v0 i) (vct-ref v1 i))))))

      (let ((gen (make-oscil 440.0))
	    (gen1 (make-oscil 440.0)))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (let ((oval (oscil gen .1))
		(mval (mus-run gen1 .1)))
	    (if (fneq oval mval)
		(snd-display (format #f ";mus-run ~A but oscil ~A?" mval oval))))))

      (let ((gen (make-oscil 440.0))
	    (gen1 (make-oscil 440.0))
	    (gen2 (make-oscil 440.0))
	    (gen3 (make-oscil 440.0))
	    (fm-index (hz->radians 440.0))
	    (v0 (make-vct 10))
	    (v1 (make-vct 10)))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (oscil gen (* fm-index (oscil gen1 0.0))))
	  (vct-set! v1 i (mus-apply gen2 (* fm-index (mus-apply gen3 0.0 0.0)) 0.0)))
	(if (or (fneq (vct-ref v0 1) 0.125) (fneq (vct-ref v0 6) 0.830) (fneq (vct-ref v0 8) 0.987))
	    (snd-display (format #f ";oscil fm output: ~A" v0)))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (if (fneq (vct-ref v0 i) (vct-ref v1 i))
	      (snd-display (format #f ";mus-apply fm oscil at ~D: ~A ~A?" i (vct-ref v0 i) (vct-ref v1 i))))))

      (test-gen-equal (make-oscil 440.0) (make-oscil 440.0) (make-oscil 100.0))
      (test-gen-equal (make-oscil 440.0) (make-oscil 440.0) (make-oscil 440.0 1.0))
      
      (if (provided? 'snd-new-smob)
	  (let ((gen (make-oscil 440.0))
		(gen1 (make-oscil 440.0))
		(pm-index 2.0)
		(v0 (make-vct 10)))
	    (do ((i 0 (1+ i)))
		((= i 10))
	      (vct-set! v0 i (gen 0.0 (* pm-index (gen1 0.0)))))
	    (if (or (fneq (vct-ref v0 1) 0.367) (fneq (vct-ref v0 6) 0.854) (fneq (vct-ref v0 8) 0.437))
		(snd-display (format #f ";oscil pm output: ~A" v0)))))

      (let ((amps (make-vector 3))
	    (oscils (make-vector 3))
	    (fms (make-vector 3))
	    (results (make-vector 10)))
	(do ((i 0 (1+ i))) ((= i 3))
	  (vector-set! amps i (* (+ i 1) .1))
	  (vector-set! oscils i (make-oscil :frequency (* (+ i 1) 220.0)))
	  (vector-set! fms i (* i .05)))
	(do ((i 0 (1+ i))) ((= i 10))
	  (vector-set! results i (oscil-bank amps oscils fms)))
	(if (or (fneq (vector-ref results 1) 0.12639)
		(fneq (vector-ref results 5) 0.48203)
		(fneq (vector-ref results 9) 0.41001))
	    (snd-display (format #f ";oscil-bank: ~A?" results))))

      (let ((amps (make-vector 3))
	    (oscils (make-vector 3))
	    (fms (make-vector 3))
	    (results (make-vector 10)))
	(do ((i 0 (1+ i))) ((= i 3))
	  (vector-set! amps i (* (+ i 1) .1))
	  (vector-set! oscils i (make-oscil :frequency (* (+ i 1) 220.0)))
	  (vector-set! fms i (* i .05)))
	(do ((i 0 (1+ i))) ((= i 10))
	  (vector-set! results i (mus-bank oscils amps fms)))
	(if (or (fneq (vector-ref results 1) 0.12639)
		(fneq (vector-ref results 5) 0.48203)
		(fneq (vector-ref results 9) 0.41001))
	    (snd-display (format #f ";mus-bank: ~A?" results))))

      (let ((gen (make-buffer 3)))
	(if (not (buffer-empty? gen)) (snd-display (format #f ";new buf not buffer-empty: ~A?" gen)))
	(sample->buffer gen 1.0)
	(sample->buffer gen 0.5)
	(sample->buffer gen 0.25)
	(print-and-check gen 
			 "buffer"
			 "buffer: length: 3, loc: 0, fill: 3.000"
			 "rblk buf[3 (external)]: [1.000 0.500 0.250], loc: 0, fill_time: 3.000000, empty: 1")
	(if (not (buffer-full? gen)) (snd-display (format #f ";buffer-full: ~A?" gen)))
	(if (not (buffer? gen)) (snd-display (format #f ";~A not buffer?" gen)))
	(if (not (= (mus-length gen) 3)) (snd-display (format #f ";buffer length: ~D?" (mus-length gen))))
	(if (or (fneq (buffer->sample gen) 1.0) (fneq (buffer->sample gen) 0.5) (fneq (buffer->sample gen) 0.25))
	    (snd-display (format "buffer output?")))
	(if (not (buffer-empty? gen)) (snd-display (format #f ";emptied buf not buffer-empty: ~A?" gen)))
	(let ((fr0 (make-frame 2 .1 .2))
	      (fr1 (make-frame 2 0.0 0.0)))
	  (frame->buffer gen fr0)
	  (set! fr1 (buffer->frame gen fr1))
	  (if (not (equal? fr0 fr1)) (snd-display (format #f ";frame->buffer: ~A ~A?" fr0 fr1)))))

      (test-gen-equal (make-buffer 3) (make-buffer 3) (make-buffer 4))
      (let ((gen (make-buffer 3))
	    (gen1 (make-buffer 3))
	    (gen2 (make-buffer 3)))
	(sample->buffer gen 1.0)
	(sample->buffer gen 0.5)
	(sample->buffer gen1 1.0)
	(sample->buffer gen1 0.5)
	(sample->buffer gen2 1.0)
	(sample->buffer gen2 0.5)
	(sample->buffer gen2 0.25)
	(test-gen-equal gen gen1 gen2))

      (let ((gen (make-sum-of-cosines 10 440.0))
	    (v0 (make-vct 10)))
	(print-and-check gen 
			 "sum_of_cosines"
			 "sum_of_cosines freq: 440.000Hz, phase: 0.000, cosines: 10"
			 "cosp freq: 0.125379, phase: 0.000000, cosines: 10, scaler: 0.047619")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (sum-of-cosines gen 0.0)))
	(if (not (sum-of-cosines? gen)) (snd-display (format #f ";~A not sum-of-cosines?" gen)))
	(if (fneq (mus-phase gen) 1.253787) (snd-display (format #f ";sum-of-cosines phase: ~F?" (mus-phase gen))))
	(if (fneq (mus-frequency gen) 440.0) (snd-display (format #f ";sum-of-cosines frequency: ~F?" (mus-frequency gen))))
	(if (fneq (mus-scaler gen) (/ 1.0 21.0)) (snd-display (format #f ";sum-of-cosines scaler: ~F?" (mus-scaler gen))))
	(if (not (= (mus-cosines gen) 10)) (snd-display (format #f ";sum-of-cosines cosines: ~D?" (mus-cosines gen))))
	(if (not (= (mus-length gen) 10)) (snd-display (format #f ";sum-of-cosines length: ~D?" (mus-length gen))))
	(if (or (fneq (vct-ref v0 1) 0.736) (fneq (vct-ref v0 8) -0.089)) (snd-display (format #f ";sum-of-cosines output: ~A" v0)))
	(set! (mus-scaler gen) .5) (if (fneq (mus-scaler gen) 0.5) (snd-display (format #f ";sum-of-cosines set-scaler: ~F?" (mus-scaler gen)))))

      (test-gen-equal (make-sum-of-cosines 3 440.0) (make-sum-of-cosines 3 440.0) (make-sum-of-cosines 5 440.0))
      (test-gen-equal (make-sum-of-cosines 3 440.0) (make-sum-of-cosines 3 440.0) (make-sum-of-cosines 3 440.0 1.0))
      (test-gen-equal (make-sum-of-cosines 3 440.0) (make-sum-of-cosines 3 440.0) (make-sum-of-cosines 3 400.0))

      (let ((gen (make-sine-summation 440.0))
	    (v0 (make-vct 10)))
	(print-and-check gen 
			 "sine_summation"
			 "sine_summation: frequency: 440.000, phase: 0.000, n: 1, a: 0.500, ratio: 1.000"
			 "sss freq: 0.125379, phase: 0.000000, a: 0.500000, b: 1.000000, an: 0.250000, a2: 1.250000, n: 1")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (sine-summation gen 0.0)))
	(if (not (sine-summation? gen)) (snd-display (format #f ";~A not sine-summation?" gen)))
	(if (fneq (mus-phase gen) 1.253787) (snd-display (format #f ";sine-summation phase: ~F?" (mus-phase gen))))
	(if (fneq (mus-frequency gen) 440.0) (snd-display (format #f ";sine-summation frequency: ~F?" (mus-frequency gen))))
	(if (or (fneq (vct-ref v0 1) 0.249) (fneq (vct-ref v0 8) 1.296)) (snd-display (format #f ";sine-summation output: ~A" v0))))

      (test-gen-equal (make-sine-summation 440.0) (make-sine-summation 440.0) (make-sine-summation 100.0))
      (test-gen-equal (make-sine-summation 440.0) (make-sine-summation 440.0) (make-sine-summation 440.0 1.0))
      (test-gen-equal (make-sine-summation 440.0) (make-sine-summation 440.0) (make-sine-summation 440.0 0.0 3))

      (let ((gen (make-asymmetric-fm 440.0))
	    (v0 (make-vct 10)))
	(print-and-check gen 
			 "asymmetric_fm"
			 "asymmetric-fm freq: 440.000Hz, phase: 0.000, ratio: 1.000, r: 1.000"
			 "asyfm r: 1.000000, freq: 0.125379, phase: 0.000000, ratio: 1.000000, cosr: 0.000000, sinr: 1.000000")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (asymmetric-fm gen 0.0)))
	(if (not (asymmetric-fm? gen)) (snd-display (format #f ";~A not asymmetric-fm?" gen)))
	(if (fneq (mus-phase gen) 1.253787) (snd-display (format #f ";asymmetric-fm phase: ~F?" (mus-phase gen))))
	(if (fneq (mus-frequency gen) 440.0) (snd-display (format #f ";asymmetric-fm frequency: ~F?" (mus-frequency gen))))
	(if (or (fneq (vct-ref v0 1) 0.248) (fneq (vct-ref v0 8) .962)) (snd-display (format #f ";asymmetric-fm output: ~A" v0))))

      (test-gen-equal (make-asymmetric-fm 440.0) (make-asymmetric-fm 440.0) (make-asymmetric-fm 100.0))
      (test-gen-equal (make-asymmetric-fm 440.0) (make-asymmetric-fm 440.0) (make-asymmetric-fm 440.0 1.0))
      (test-gen-equal (make-asymmetric-fm 440.0) (make-asymmetric-fm 440.0) (make-asymmetric-fm 440.0 0.0 3))

      (let ((gen (make-fir-filter 3 (list->vct '(.5 .25 .125))))
	    (v0 (make-vct 10)))
	(print-and-check gen 
			 "fir_filter"
			 "fir_filter: order: 3"
			 "flt order: 3, state (local): [0.000 0.000 0.000], x: [0.500 0.250 0.125], y: nil")
	(vct-set! v0 0 (fir-filter gen 1.0))
	(do ((i 1 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (fir-filter gen 0.0)))
	(if (not (fir-filter? gen)) (snd-display (format #f ";~A not fir-filter?" gen)))
	(if (not (= (mus-length gen) 3)) (snd-display (format #f ";fir-filter length: ~D?" (mus-length gen))))
	(if (or (fneq (vct-ref v0 1) 0.25) (fneq (vct-ref v0 2) .125)) (snd-display (format #f ";fir-filter output: ~A" v0)))
	(let ((data (mus-xcoeffs gen)))
	  (if (fneq (vct-ref data 1) .25) (snd-display (format #f ";fir-filter xcoeffs: ~A?" data)))))

      (test-gen-equal (let ((f1 (make-fir-filter 3 (list->vct '(.5 .25 .125))) )) (fir-filter f1 1.0) f1)
		      (let ((f2 (make-fir-filter 3 (list->vct '(.5 .25 .125))) )) (fir-filter f2 1.0) f2)
		      (let ((f3 (make-fir-filter 3 (list->vct '(.75 .25 .125))))) (fir-filter f3 1.0) f3))
      (test-gen-equal (let ((f1 (make-fir-filter 3 (list->vct '(.5 .25 .125))) )) (fir-filter f1 1.0) f1)
		      (let ((f2 (make-fir-filter 3 (list->vct '(.5 .25 .125))) )) (fir-filter f2 1.0) f2)
		      (let ((f3 (make-fir-filter 2 (list->vct '(.5 .25))))) (fir-filter f3 1.0) f3))

      (let* ((coeffs (list .1 .2 .3 .4 .4 .3 .2 .1))
	     (flt (make-fir-filter 8 (list->vct coeffs)))
	     (es (make-vector 8)))
	(do ((i 0 (1+ i)))
	    ((= i 8))
	  (vector-set! es i (make-env (list 0 (list-ref coeffs i) 1 0) :end 100)))
	(vector-set! es 5 (make-env '(0 .4 1 1) :end 100))
	(let ((data (make-vct 100)))
	  (do ((k 0 (1+ k)))
	      ((= k 100))
	    (let ((val (fir-filter flt (if (= (modulo k 12) 0) 1.0 0.0)))
		  (xcof (mus-data flt)))
	      (do ((i 0 (1+ i)))
		  ((= i 8))
		(vct-set! xcof i (env (vector-ref es i))))
	      (vct-set! data k val)))
	  (if (or (fneq (vct-ref data 1) .2)
		  (fneq (vct-ref data 10) 0.0)
		  (fneq (vct-ref data 18) 0.166)
		  (fneq (vct-ref data 89) 0.923))
	      (snd-display (format #f ";filter xcoeffs: ~A?" data)))))

      (let ((gen (make-iir-filter 3 (list->vct '(.5 .25 .125))))
	    (v0 (make-vct 10)))
	(print-and-check gen 
			 "iir_filter"
			 "iir_filter: order: 3"
			 "flt order: 3, state (local): [0.000 0.000 0.000], x: nil, y: [0.500 0.250 0.125]")
	(vct-set! v0 0 (iir-filter gen 1.0))
	(do ((i 1 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (iir-filter gen 0.0)))
	(if (not (iir-filter? gen)) (snd-display (format #f ";~A not iir-filter?" gen)))
	(if (not (= (mus-length gen) 3)) (snd-display (format #f ";iir-filter length: ~D?" (mus-length gen))))
	(if (or (fneq (vct-ref v0 1) -0.25) (fneq (vct-ref v0 2) -.062)) (snd-display (format #f ";iir-filter output: ~A" v0)))
	(let ((data (mus-ycoeffs gen)))
	  (if (fneq (vct-ref data 1) .25) (snd-display (format #f ";iir-filter ycoeffs: ~A?" data)))))

      (test-gen-equal (let ((f1 (make-iir-filter 3 (list->vct '(.5 .25 .125))))) (iir-filter f1 1.0) f1)
		      (let ((f2 (make-iir-filter 3 (list->vct '(.5 .25 .125))) )) (iir-filter f2 1.0) f2)
		      (let ((f3 (make-iir-filter 3 (list->vct '(.75 .25 .125))))) (iir-filter f3 1.0) f3))
      (test-gen-equal (let ((f1 (make-iir-filter 3 (list->vct '(.5 .25 .125))) )) (iir-filter f1 1.0) f1)
		      (let ((f2 (make-iir-filter 3 (list->vct '(.5 .25 .125))) )) (iir-filter f2 1.0) f2)
		      (let ((f3 (make-iir-filter 2 (list->vct '(.5 .25))))) (iir-filter f3 1.0) f3))

      (let ((gen (make-filter 3 (list->vct '(.5 .25 .125)) (list->vct '(.5 .25 .125))))
	    (v0 (make-vct 10)))
	(print-and-check gen 
			 "filter"
			 "filter: order: 3"
			 "flt order: 3, state (local): [0.000 0.000 0.000], x: [0.500 0.250 0.125], y: [0.500 0.250 0.125]")
	(vct-set! v0 0 (filter gen 1.0))
	(do ((i 1 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (filter gen 0.0)))
	(if (not (filter? gen)) (snd-display (format #f ";~A not filter?" gen)))
	(if (not (= (mus-length gen) 3)) (snd-display (format #f ";filter length: ~D?" (mus-length gen))))
	(if (or (fneq (vct-ref v0 1) 0.125) (fneq (vct-ref v0 2) .031)) (snd-display (format #f ";filter output: ~A" v0)))
	(let ((xs (mus-xcoeffs gen))
	      (ys (mus-ycoeffs gen)))
	  (if (or (not (equal? xs (list->vct '(.5 .25 .125))))
		  (not (equal? xs ys)))
	      (snd-display (format #f ";mus-xcoeffs: ~A ~A?" xs ys)))))

      (test-gen-equal (let ((f1 (make-filter 3 (list->vct '(.5 .25 .125)) (list->vct '(.5 .25 .125))))) (filter f1 1.0) f1)
		      (let ((f2 (make-filter 3 (list->vct '(.5 .25 .125)) (list->vct '(.5 .25 .125))))) (filter f2 1.0) f2)
		      (let ((f3 (make-filter 3 (list->vct '(.5 .25 .125)) (list->vct '(.5 .5))))) (filter f3 1.0) f3))
      (test-gen-equal (let ((f1 (make-filter 3 (list->vct '(.5 .25 .125)) (list->vct '(.5 .25 .125))))) (filter f1 1.0) f1)
		      (let ((f2 (make-filter 3 (list->vct '(.5 .25 .125)) (list->vct '(.5 .25 .125))))) (filter f2 1.0) f2)
		      (let ((f3 (make-filter 3 (list->vct '(.5 .5 .125)) (list->vct '(.5 .25 .125 .0625))))) (filter f3 1.0) f3))

      (let ((gen (make-sawtooth-wave 440.0))
	    (v0 (make-vct 10)))
	(print-and-check gen 
			 "sawtooth_wave"
			 "sawtooth freq: 440.000Hz, phase: 3.142, amp: 1.000"
			 "sw current_value: 0.000000, freq: 0.125379, phase: 3.141593, base: 0.318310")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (sawtooth-wave gen 0.0)))
	(if (not (sawtooth-wave? gen)) (snd-display (format #f ";~A not sawtooth-wave?" gen)))
	(if (fneq (mus-phase gen) 4.39538) (snd-display (format #f ";sawtooth-wave phase: ~F?" (mus-phase gen)))) ;starts at pi
	(if (fneq (mus-frequency gen) 440.0) (snd-display (format #f ";sawtooth-wave frequency: ~F?" (mus-frequency gen))))
	(if (fneq (mus-scaler gen) 1.0) (snd-display (format #f ";sawtooth-wave scaler: ~F?" (mus-scaler gen))))
	(if (or (fneq (vct-ref v0 1) 0.04) (fneq (vct-ref v0 8) .319)) (snd-display (format #f ";sawtooth-wave output: ~A" v0))))

      (test-gen-equal (make-sawtooth-wave 440.0) (make-sawtooth-wave 440.0) (make-sawtooth-wave 120.0))
      (test-gen-equal (make-sawtooth-wave 440.0) (make-sawtooth-wave 440.0) (make-sawtooth-wave 440.0 1.0 1.0))
      (test-gen-equal (make-sawtooth-wave 440.0) (make-sawtooth-wave 440.0) (make-sawtooth-wave 440.0 0.5))

      (let ((gen (make-square-wave 440.0))
	    (v0 (make-vct 10)))
	(print-and-check gen 
			 "square_wave"
			 "square_wave freq: 440.000Hz, phase: 0.000, amp: 1.000"
			 "sw current_value: 1.000000, freq: 0.125379, phase: 0.000000, base: 1.000000")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (square-wave gen 0.0)))
	(if (not (square-wave? gen)) (snd-display (format #f ";~A not square-wave?" gen)))
	(if (fneq (mus-phase gen) 1.253787) (snd-display (format #f ";square-wave phase: ~F?" (mus-phase gen))))
	(if (fneq (mus-frequency gen) 440.0) (snd-display (format #f ";square-wave frequency: ~F?" (mus-frequency gen))))
	(if (fneq (mus-scaler gen) 1.0) (snd-display (format #f ";square-wave scaler: ~F?" (mus-scaler gen))))
	(if (or (fneq (vct-ref v0 1) 1.0) (fneq (vct-ref v0 8) 1.0)) (snd-display (format #f ";square-wave output: ~A" v0))))

      (test-gen-equal (make-square-wave 440.0) (make-square-wave 440.0) (make-square-wave 120.0))
      (test-gen-equal (make-square-wave 440.0) (make-square-wave 440.0) (make-square-wave 440.0 1.0 1.0))
      (test-gen-equal (make-square-wave 440.0) (make-square-wave 440.0) (make-square-wave 440.0 0.5))

      (let ((gen (make-triangle-wave 440.0))
	    (v0 (make-vct 10)))
	(print-and-check gen 
			 "triangle_wave"
			 "triangle_wave freq: 440.000Hz, phase: 0.000, amp: 1.000"
			 "sw current_value: 0.000000, freq: 0.125379, phase: 0.000000, base: 0.636620")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (triangle-wave gen 0.0)))
	(if (not (triangle-wave? gen)) (snd-display (format #f ";~A not triangle-wave?" gen)))
	(if (fneq (mus-phase gen) 1.253787) (snd-display (format #f ";triangle-wave phase: ~F?" (mus-phase gen))))
	(if (fneq (mus-frequency gen) 440.0) (snd-display (format #f ";triangle-wave frequency: ~F?" (mus-frequency gen))))
	(if (fneq (mus-scaler gen) 1.0) (snd-display (format #f ";triangle-wave scaler: ~F?" (mus-scaler gen))))
	(if (or (fneq (vct-ref v0 1) 0.080) (fneq (vct-ref v0 8) 0.639)) (snd-display (format #f ";triangle-wave output: ~A" v0))))

      (test-gen-equal (make-triangle-wave 440.0) (make-triangle-wave 440.0) (make-triangle-wave 120.0))
      (test-gen-equal (make-triangle-wave 440.0) (make-triangle-wave 440.0) (make-triangle-wave 440.0 1.0 1.0))
      (test-gen-equal (make-triangle-wave 440.0) (make-triangle-wave 440.0) (make-triangle-wave 440.0 0.5))

      (let ((gen (make-pulse-train 440.0))
	    (v0 (make-vct 10)))
	(print-and-check gen 
			 "pulse_train"
			 "pulse_train freq: 440.000Hz, phase: 6.283, amp: 1.000"
			 "sw current_value: 0.000000, freq: 0.125379, phase: 6.283185, base: 1.000000")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (pulse-train gen 0.0)))
	(if (not (pulse-train? gen)) (snd-display (format #f ";~A not pulse-train?" gen)))
	(if (fneq (mus-phase gen) 1.253787) (snd-display (format #f ";pulse-train phase: ~F?" (mus-phase gen))))
	(if (fneq (mus-frequency gen) 440.0) (snd-display (format #f ";pulse-train frequency: ~F?" (mus-frequency gen))))
	(if (fneq (mus-scaler gen) 1.0) (snd-display (format #f ";pulse-train scaler: ~F?" (mus-scaler gen))))
	(if (or (fneq (vct-ref v0 0) 1.0) (fneq (vct-ref v0 8) 0.0)) (snd-display (format #f ";pulse-train output: ~A" v0))))

      (test-gen-equal (make-pulse-train 440.0) (make-pulse-train 440.0) (make-pulse-train 120.0))
      (test-gen-equal (make-pulse-train 440.0) (make-pulse-train 440.0) (make-pulse-train 440.0 1.0 1.0))
      (test-gen-equal (make-pulse-train 440.0) (make-pulse-train 440.0) (make-pulse-train 440.0 0.5))

      (let ((gen (make-ppolar .1 1200.0))
	    (v0 (make-vct 10)))
	(vct-set! v0 0 (two-pole gen 1.0))
	(do ((i 1 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (two-pole gen 0.0)))
	(if (not (two-pole? gen)) (snd-display (format #f ";~A not ppolar?" gen)))
	(if (not (= (mus-order gen) 2)) (snd-display (format #f ";ppolar order: ~D?" (mus-order gen))))
	(if (fneq (mus-a0 gen) 1.0) (snd-display (format #f ";ppolar a0: ~F?" (mus-a0 gen))))
	(if (fneq (mus-b1 gen) -.188) (snd-display (format #f ";ppolar b1: ~F?" (mus-b1 gen))))
	(if (fneq (mus-b2 gen) .01) (snd-display (format #f ";ppolar b2: ~F?" (mus-b2 gen))))
	(if (or (fneq (vct-ref v0 0) 1.0) (fneq (vct-ref v0 1) .188)) (snd-display (format #f ";ppolar output: ~A" v0))))

      (test-gen-equal (let ((z1 (make-ppolar .1 600.0))) (two-pole z1 1.0) z1)
		      (let ((z2 (make-ppolar .1 600.0))) (two-pole z2 1.0) z2)
		      (let ((z3 (make-ppolar .1 1200.0))) (two-pole z3 1.0) z3))
      (test-gen-equal (let ((z1 (make-ppolar .1 600.0))) (two-pole z1 1.0) z1)
		      (let ((z2 (make-ppolar .1 600.0))) (two-pole z2 1.0) z2)
		      (let ((z3 (make-ppolar .2 1200.0))) (two-pole z3 1.0) z3))
      (test-gen-equal (let ((z1 (make-ppolar .1 600.0))) (two-pole z1 1.0) z1)
		      (let ((z2 (make-ppolar .1 600.0))) (two-pole z2 1.0) z2)
		      (let ((z3 (make-ppolar .1 600.0))) (two-pole z3 0.5) z3))

      (let ((gen (make-zpolar .1 1200.0))
	    (v0 (make-vct 10)))
	(vct-set! v0 0 (two-zero gen 1.0))
	(do ((i 1 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (two-zero gen 0.0)))
	(if (not (two-zero? gen)) (snd-display (format #f ";~A not zpolar?" gen)))
	(if (not (= (mus-order gen) 2)) (snd-display (format #f ";zpolar order: ~D?" (mus-order gen))))
	(if (fneq (mus-a0 gen) 1.0) (snd-display (format #f ";zpolar a0: ~F?" (mus-a0 gen))))
	(if (fneq (mus-a1 gen) -.188) (snd-display (format #f ";zpolar a1: ~F?" (mus-a1 gen))))
	(if (fneq (mus-a2 gen) .01) (snd-display (format #f ";zpolar a2: ~F?" (mus-a2 gen))))
	(if (or (fneq (vct-ref v0 0) 1.0) (fneq (vct-ref v0 1) -.188)) (snd-display (format #f ";zpolar output: ~A" v0))))

      (test-gen-equal (let ((z1 (make-zpolar .1 600.0))) (two-zero z1 1.0) z1)
		      (let ((z2 (make-zpolar .1 600.0))) (two-zero z2 1.0) z2)
		      (let ((z3 (make-zpolar .1 1200.0))) (two-zero z3 1.0) z3))
      (test-gen-equal (let ((z1 (make-zpolar .1 600.0))) (two-zero z1 1.0) z1)
		      (let ((z2 (make-zpolar .1 600.0))) (two-zero z2 1.0) z2)
		      (let ((z3 (make-zpolar .2 1200.0))) (two-zero z3 1.0) z3))
      (test-gen-equal (let ((z1 (make-zpolar .1 600.0))) (two-zero z1 1.0) z1)
		      (let ((z2 (make-zpolar .1 600.0))) (two-zero z2 1.0) z2)
		      (let ((z3 (make-zpolar .1 600.0))) (two-zero z3 0.5) z3))

      (let ((gen (make-formant .9 1200.0 1.0))
	    (v0 (make-vct 10)))
	(print-and-check gen 
			 "formant"
			 "formant: radius: 0.900, frequency: 1200.000, (gain: 1.000)"
			 "smpflt a0: 0.063710, a1: 1.000000, a2: -0.900000, b1: -1.695789, b2: 0.810000, x1: 0.000000, x2: 0.000000, y1: 0.000000, y2: 0.000000")
	(vct-set! v0 0 (formant gen 1.0))
	(do ((i 1 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (formant gen 0.0)))
	(if (not (formant? gen)) (snd-display (format #f ";~A not formant?" gen)))
	(if (not (= (mus-order gen) 2)) (snd-display (format #f ";formant order: ~D?" (mus-order gen))))
	(if (fneq (mus-a0 gen) 0.06371) (snd-display (format #f ";formant a0: ~F?" (mus-a0 gen))))
	(if (fneq (mus-a1 gen) 1.0) (snd-display (format #f ";formant a1: ~F?" (mus-a1 gen))))
	(if (fneq (mus-a2 gen) -0.9) (snd-display (format #f ";formant a2: ~F?" (mus-a2 gen))))
	(if (fneq (mus-b1 gen) -1.6957893) (snd-display (format #f ";formant b1: ~F?" (mus-b1 gen))))
	(if (fneq (mus-b2 gen) 0.81) (snd-display (format #f ";formant b2: ~F?" (mus-b2 gen))))
	(if (fneq (mus-formant-radius gen) .9) (snd-display (format #f ";formant radius: ~F?" (mus-formant-radius gen))))
	(if (fneq (mus-frequency gen) 1200.0) (snd-display (format #f ";formant frequency: ~F?" (mus-frequency gen))))
	(if (or (fneq (vct-ref v0 0) .064) (fneq (vct-ref v0 1) .108)) (snd-display (format #f ";formant output: ~A" v0)))
	(set! (mus-a0 gen) .5) (if (fneq (mus-a0 gen) 0.5) (snd-display (format #f ";formant set-a0: ~F?" (mus-a0 gen))))
	(set! (mus-a1 gen) .5) (if (fneq (mus-a1 gen) 0.5) (snd-display (format #f ";formant set-a1: ~F?" (mus-a1 gen))))
	(set! (mus-a2 gen) .5) (if (fneq (mus-a2 gen) 0.5) (snd-display (format #f ";formant set-a2: ~F?" (mus-a2 gen))))
	(set! (mus-b1 gen) .5) (if (fneq (mus-b1 gen) 0.5) (snd-display (format #f ";formant set-b1: ~F?" (mus-b1 gen))))
	(set! (mus-b2 gen) .5) (if (fneq (mus-b2 gen) 0.5) (snd-display (format #f ";formant set-b2: ~F?" (mus-b2 gen))))
	(set! (mus-formant-radius gen) .01) (if (fneq (mus-formant-radius gen) 0.01) (snd-display (format #f ";formant set-radius: ~F?" (mus-formant-radius gen)))))

      (test-gen-equal (let ((f1 (make-formant .9 1200.0 1.0))) (formant f1 1.0) f1)
		      (let ((f2 (make-formant .9 1200.0 1.0))) (formant f2 1.0) f2)
		      (let ((f3 (make-formant .9 600.0 1.0))) (formant f3 1.0) f3))
      (test-gen-equal (let ((f1 (make-formant .9 1200.0 1.0))) (formant f1 1.0) f1)
		      (let ((f2 (make-formant .9 1200.0 1.0))) (formant f2 1.0) f2)
		      (let ((f3 (make-formant .99 1200.0 1.0))) (formant f3 1.0) f3))
      (test-gen-equal (let ((f1 (make-formant .9 1200.0 1.0))) (formant f1 1.0) f1)
		      (let ((f2 (make-formant .9 1200.0 1.0))) (formant f2 1.0) f2)
		      (let ((f3 (make-formant .9 1200.0 0.5))) (formant f3 1.0) f3))

      (let ((ob (open-sound "oboe.snd")))
	(define (poltergeist frek amp R gain frek-env R-env)
	  ;; test courtesy of Anders Vinjar
	  (let ((filt (make-formant R frek gain))
		(fe (make-env :envelope frek-env :end (frames) :offset frek))
		(re (make-env :envelope R-env :end (frames) :offset R)))
	    (lambda (y)
	      (let ((outval (formant filt (* amp y))))
		(mus-set-formant-radius-and-frequency filt (env re) (env fe))
		outval))))
	(map-chan (poltergeist 300 0.1 0.0 30.0 '(0 100 1 4000.0) '(0 0.99 1 .9)))  ;; should sound like "whyieee?"
	(play-and-wait 0 ob)
	(close-sound ob))

      (let ((gen (make-mixer 2 .5 .25 .125 1.0))
	    (fr0 (make-frame 2 1.0 1.0))
	    (fr1 (make-frame 2 0.0 0.0)))
	(print-and-check gen 
			 "mixer"
			 "mixer: chans: 2, vals: [(0.500 0.250) (0.125 1.000)]"
			 "mixer: chans: 2, vals: [(0.500 0.250) (0.125 1.000)]")
	(print-and-check fr0 
			 "frame"
			 "frame[2]: [1.000 1.000]"
			 "frame[2]: [1.000 1.000]")
	(if (not (frame? fr0)) (snd-display (format #f ";~A not a frame?" fr0)))
	(if (not (mixer? gen)) (snd-display (format #f ";~A not a mixer?" gen)))
	(if (equal? fr0 fr1) (snd-display (format #f ";frame=? ~A ~A?" fr0 fr1)))
	(if (not (= (mus-channels fr0) 2)) (snd-display (format #f ";frame channels: ~D?" (mus-channels fr0))))
	(if (not (= (mus-length fr1) 2)) (snd-display (format #f ";frame length: ~D?" (mus-length fr0))))
	(if (not (= (mus-channels gen) 2)) (snd-display (format #f ";mixer channels: ~D?" (mus-channels gen))))
	(frame->frame gen fr0 fr1)
	(if (or (fneq (frame-ref fr0 0) 1.0)
		(fneq (frame-ref fr1 1) 1.25)
		(fneq (mixer-ref gen 0 0) .5))
	    (snd-display (format #f ";fr0: ~A" fr0)))
	(frame-set! fr1 0 1.0)
	(frame-set! fr1 1 1.0)
	(let ((fr3 (frame+ fr0 fr1))
	      (fr4 (frame* fr0 fr1))
	      (fr5 (sample->frame fr1 .5)))
	  (if (or (fneq (frame-ref fr3 0) 2.0)
		  (fneq (frame-ref fr4 0) 1.0))
	      (snd-display (format #f ";fr+*: ~A ~A" fr3 fr4)))
	  (if (fneq (frame-ref fr5 0) .5) 
	      (snd-display (format #f ";sample->frame: ~A?" (frame-ref fr5 0)))))
	(let ((fr3 (make-frame 2))
	      (fr4 (make-frame 4)))
	  (frame-set! fr3 0 1.0)
	  (frame-set! fr4 0 0.5)
	  (frame-set! fr4 2 1.0)
	  (if (not (feql (frame->list (frame+ fr3 fr4)) (list 1.5 0.0)))
	      (snd-display (format #f ";frame+ unequal chans: ~A?" (frame+ fr3 fr4)))))
	(let ((fr3 (make-frame 2))
	      (fr4 (make-frame 4)))
	  (frame-set! fr3 0 1.0)
	  (frame-set! fr4 0 0.5)
	  (frame-set! fr4 2 1.0)
	  (if (not (feql (frame->list (frame* fr3 fr4)) (list 0.5 0.0)))
	      (snd-display (format #f ";frame* unequal chans: ~A?" (frame* fr3 fr4)))))
	(let* ((mx1 (make-mixer 2 1.0 0.0 0.0 1.0))
	       (mx2 (mixer* gen mx1))
	       (fr4 (make-frame 2 1.0 1.0))
	       (fr5 (make-frame 2 1.0 1.0))
	       (val (frame->sample mx1 fr1)))
	  (if (fneq val 1.0) (snd-display (format #f ";frame->sample: ~A?" val)))
	  (if (fneq (frame->sample fr5 fr4) 2.0) (snd-display (format #f ";frame->sample ~A" (frame->sample fr5 fr4))))
	  (if (not (equal? (frame->list fr1) (list 1.0 1.0))) (snd-display (format #f ";frame->list: ~A?" (frame->list fr1))))
	  (if (or (fneq (mixer-ref mx2 0 1) .25) (fneq (mixer-ref mx2 1 0) .125)) (snd-display (format #f ";mixer*: ~A?" mx2)))
	  (if (not (equal? mx2 gen)) (snd-display (format #f ";mixer=? ~A ~A?" gen mx2)))
	  (if (equal? mx2 mx1) (snd-display (format #f ";mixer/=? ~A ~A?" mx1 mx2)))
	  (mixer-set! mx2 0 0 2.0)
	  (if (fneq (mixer-ref mx2 0 0) 2.0) (snd-display (format #f ";mixer-set: ~A?" mx2)))
	  (set! fr0 (sample->frame mx2 1.0))
	  (if (or (fneq (frame-ref fr0 0) 2.0) (fneq (frame-ref fr0 1) .25)) (snd-display (format #f ";sample->frame: ~A?" fr0)))
	  (let ((frout (make-frame 2)))
	    (sample->frame mx2 1.0 frout)
	    (if (not (equal? frout fr0)) (snd-display (format #f ";sample->frame via frout: ~A ~A?" frout fr0))))))

      (let ((gen (make-fft-window hamming-window 16)))
	(if (not (vequal gen (vct 0.080 0.115 0.215 0.364 0.540 0.716 0.865 1.000 1.000 0.865 0.716 0.540 0.364 0.215 0.115 0.080)))
	    (snd-display (format #f ";hamming window: ~A" gen))))
      (let ((gen (make-fft-window rectangular-window 16)))
	(if (not (vequal gen (vct 1.000 1.000 1.000 1.000 1.000 1.000 1.000 1.000 1.000 1.000 1.000 1.000 1.000 1.000 1.000 1.000)))
	    (snd-display (format #f ";rectangular window: ~A" gen))))
      (let ((gen (make-fft-window hanning-window 16)))
	(if (not (vequal gen (vct 0.000 0.038 0.146 0.309 0.500 0.691 0.854 1.000 1.000 0.854 0.691 0.500 0.309 0.146 0.038 0.000)))
	    (snd-display (format #f ";hanning window: ~A" gen))))
      (let ((gen (make-fft-window welch-window 16)))
	(if (not (vequal gen (vct 0.000 0.234 0.438 0.609 0.750 0.859 0.938 1.000 1.000 0.938 0.859 0.750 0.609 0.438 0.234 0.000)))
	    (snd-display (format #f ";welch window: ~A" gen))))
      (let ((gen (make-fft-window parzen-window 16)))
	(if (not (vequal gen (vct 0.000 0.125 0.250 0.375 0.500 0.625 0.750 1.000 1.000 0.750 0.625 0.500 0.375 0.250 0.125 0.000)))
	    (snd-display (format #f ";parzen window: ~A" gen))))
      (let ((gen (make-fft-window bartlett-window 16)))
	(if (not (vequal gen (vct 0.000 0.125 0.250 0.375 0.500 0.625 0.750 1.000 1.000 0.750 0.625 0.500 0.375 0.250 0.125 0.000)))
	    (snd-display (format #f ";bartlett window: ~A" gen))))
      (let ((gen (make-fft-window blackman2-window 16)))
	(if (not (vequal gen (vct 0.005 0.020 0.071 0.177 0.344 0.558 0.775 1.000 1.000 0.775 0.558 0.344 0.177 0.071 0.020 0.005)))
	    (snd-display (format #f ";blackman2 window: ~A" gen))))
      (let ((gen (make-fft-window blackman3-window 16)))
	(if (not (vequal gen (vct 0.000 0.003 0.022 0.083 0.217 0.435 0.696 1.000 1.000 0.696 0.435 0.217 0.083 0.022 0.003 0.000)))
	    (snd-display (format #f ";blackman3 window: ~A" gen))))
      (let ((gen (make-fft-window blackman4-window 16)))
	(if (not (vequal gen (vct 0.002 0.002 0.003 0.017 0.084 0.263 0.562 1.000 1.000 0.562 0.263 0.084 0.017 0.003 0.002 0.002)))
	    (snd-display (format #f ";blackman4 window: ~A" gen))))
      (let ((gen (make-fft-window exponential-window 16)))
	(if (not (vequal gen (vct 0.000 0.087 0.181 0.283 0.394 0.515 0.646 0.944 0.944 0.646 0.515 0.394 0.283 0.181 0.087 0.000)))
	    (snd-display (format #f ";exponential window: ~A" gen))))
      (let ((gen (make-fft-window riemann-window 16)))
	(if (not (vequal gen (vct 0.000 0.139 0.300 0.471 0.637 0.784 0.900 1.000 1.000 0.900 0.784 0.637 0.471 0.300 0.139 0.000)))
	    (snd-display (format #f ";riemann window: ~A" gen))))
      (let ((gen (make-fft-window kaiser-window 16 2.5)))
	(if (not (vequal gen (vct 0.304 0.426 0.550 0.670 0.779 0.871 0.941 1.000 1.000 0.941 0.871 0.779 0.670 0.550 0.426 0.304)))
	    (snd-display (format #f ";kaiser window: ~A" gen))))
      (let ((gen (make-fft-window cauchy-window 16 2.5)))
	(if (not (vequal gen (vct 0.138 0.173 0.221 0.291 0.390 0.532 0.719 1.000 1.000 0.719 0.532 0.390 0.291 0.221 0.173 0.138)))
	    (snd-display (format #f ";cauchy window: ~A" gen))))
      (let ((gen (make-fft-window poisson-window 16 2.5)))
	(if (not (vequal gen (vct 0.082 0.112 0.153 0.210 0.287 0.392 0.535 1.000 1.000 0.535 0.392 0.287 0.210 0.153 0.112 0.082)))
	    (snd-display (format #f ";poisson window: ~A" gen))))
      (let ((gen (make-fft-window gaussian-window 16 1.0)))
	(if (not (vequal gen (vct 0.607 0.682 0.755 0.823 0.882 0.932 0.969 1.000 1.000 0.969 0.932 0.882 0.823 0.755 0.682 0.607)))
	    (snd-display (format #f ";gaussian window: ~A" gen))))
      (let ((gen (make-fft-window tukey-window 16)))
	(if (not (vequal gen (vct 0.000 0.038 0.146 0.309 0.500 0.691 0.854 1.000 1.000 0.854 0.691 0.500 0.309 0.146 0.038 0.000)))
	    (snd-display (format #f ";tukey window: ~A" gen))))
      (without-errors
       (let ((gen (make-fft-window dolph-chebyshev-window 16 1.0)))
	 (if (not (vequal gen (vct 0.000 0.494 0.604 0.710 0.806 0.887 0.949 0.987 1.000 0.987 0.949 0.887 0.806 0.710 0.604 0.494)))
	     (snd-display (format #f ";dolph-chebyshev window: ~A" gen)))))

      (let ((v0 (make-vct 10))
	    (gen (make-env '(0 0 1 1 2 0) :scaler 0.5 :end 9)))
	(print-and-check gen 
			 "env"
			 "env: linear, pass: 0 (dur: 10), index: 0, data: [0.000 0.000 1.000 1.000 2.000 0.000]"
			 "seg rate: 0.100000, current_value: 0.000000, base: 0.000000, offset: 0.000000, scaler: 0.500000, power: 0.000000, init_y: 0.000000, init_power: 0.000000, b1: 0.000000, pass: 0, end: 9, style: 0, index: 0, size: 3, original_data[6]: [0.000 0.000 1.000 1.000 2.000 0.000], rates[3]: [0.100 -0.100 0.000], passes[3]: [5 10 100000000]")
	(if (not (env? gen)) (snd-display (format #f ";~A not env?" gen)))
	(if (fneq (mus-scaler gen) 0.5) (snd-display (format #f ";env scaler ~F?" (mus-scaler gen))))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (env gen)))
	(if (or (fneq (vct-ref v0 0) 0.0) (fneq (vct-ref v0 1) .1) (fneq (vct-ref v0 6) .4))
	    (snd-display (format #f ";~A output: ~A" gen v0)))
	(if (fneq (env-interp 1.5 gen) 0.25) (snd-display (format #f ";env-interp ~A at 1.5: ~F?" gen (env-interp 1.5 gen))))
	(set! gen (make-env :envelope '(0 1 1 0) :base 32.0 :end 9))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (env gen)))
	(if (or (fneq (vct-ref v0 0) 1.0) (fneq (vct-ref v0 1) .698) (fneq (vct-ref v0 8) .032))
	    (snd-display (format #f ";~A output: ~A" gen v0)))
	(set! gen (make-env :envelope '(0 1 1 0) :base .0325 :end 9))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (env gen)))
	(if (or (fneq (vct-ref v0 0) 1.0) (fneq (vct-ref v0 1) .986) (fneq (vct-ref v0 8) .513))
	    (snd-display (format #f ";~A output: ~A" gen v0)))
	(set! gen (make-env :envelope '(0 1 1 .5 2 0) :base 0.0 :end 9 :offset 1.0))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (if (= i 3)
	      (if (not (= (mus-location gen) 3))
		  (snd-display (format #f ";env location: ~A?" (mus-location gen)))))
	  (vct-set! v0 i (env gen)))
	(if (or (fneq (vct-ref v0 0) 2.0) (fneq (vct-ref v0 6) 1.5) (fneq (vct-ref v0 8) 1.5))
	    (snd-display (format #f ";~A output: ~A" gen v0)))
	(if (fneq (env-interp 1.5 gen) 1.5) (snd-display (format #f ";env-interp ~A at 1.5: ~F?" gen (env-interp 1.5 gen))))
	(set! (mus-location gen) 6)
	(if (not (= (mus-location gen) 6)) (snd-display (format #f ";mus-set-location ~A: ~A (6)?" (mus-location gen))))
	(let ((val (env gen)))
	  (if (fneq val 1.5) (snd-display (format #f ";mus-set-location 6 -> ~A (1.5)?" val))))
	(set! (mus-location gen) 0)
	(let ((val (env gen)))
	  (if (fneq val 2.0) (snd-display (format #f ";mus-set-location 0 -> ~A (2.0)?" val))))

	(let ((e1 (make-env '(0 0 1 1) :base .03125 :end 9))
	      (e2 (make-env '(0 0 1 1 2 0) :base 32.0 :end 9))
	      (e3 (make-env '(0 0 .1 1 2 0) :base 1.1 :end 99)))
	  (do ((i 0 (1+ i)))
	      ((= i 10))
	    (let ((v1 (env-interp (* i .1) e1))
		  (v2 (env e1))
		  (v3 (env-interp (* i .2) e2))
		  (v4 (env e2)))
	      (if (ffneq v1 v2) (snd-display (format #f ";env-interp[rmp ~F]: ~A (~A)?" (* .1 i) v1 v2)))
	      (if (ffneq v3 v4) (snd-display (format #f ";env-interp[pyr ~F]: ~A (~A)?" (* .2 i) v3 v4)))))
	  (do ((i 0 (1+ i)))
	      ((= i 100))
	    (let ((v5 (env-interp (* i .02) e3))
		  (v6 (env e3)))
	      (if (ffneq v5 v6) (snd-display (format #f ";env-interp[tri ~F]: ~A (~A)?" (* .02 i) v5 v6))))))

	(set! gen (make-env '(0 0 1 1 2 0) :end 9))
	(do ((i 0 (1+ i))) ((= i 4)) (env gen))
	(let ((val (env gen)))
	  (if (fneq val .8) (snd-display (format #f ";env(5): ~A?" val)))
	  (restart-env gen)
	  (do ((i 0 (1+ i))) ((= i 4)) (env gen))
	  (set! val (env gen))
	  (if (fneq val .8) (snd-display (format #f ";restart-env: ~A?" val)))
	  (set! (mus-location gen) 6)
	  (let ((val (env gen)))
	    (if (fneq val 0.8) (snd-display (format #f ";mus-set-location 6 -> ~A (0.8)?" val))))))

      (test-gen-equal (make-env '(0 0 1 1 2 0) :scaler 0.5 :end 9) (make-env '(0 0 1 1 2 0) :scaler 0.5 :end 9) (make-env '(0 0 1 1 2 0) :scaler 0.25 :end 9))
      (test-gen-equal (make-env '(0 0 1 1 2 0) :scaler 0.5 :end 9) (make-env '(0 0 1 1 2 0) :scaler 0.5 :end 9) (make-env '(0 0 1 1 2 0) :scaler 0.5 :end 10))
      (test-gen-equal (make-env '(0 0 1 1 2 0) :scaler 0.5 :end 9) (make-env '(0 0 1 1 2 0) :scaler 0.5 :end 9) (make-env '(0 0 1 1 3 0) :scaler 0.5 :end 9))

      (let ((gen (make-table-lookup 440.0 :wave (partials->wave '(1 1 2 1))))
	    (gen1 (make-table-lookup 440.0 :wave (partials->wave '(1 1 2 1))))
	    (gen2 (partials->wave '(1 1 2 1 3 1 4 1) #f #t))
	    (v0 (make-vct 10))
	    (v1 (make-vct 10)))
	(print-and-check gen 
			 "table_lookup"
			 "table_lookup: freq: 440.000Hz, phase: 0.000, length: 512"
			 (mus-inspect gen))
	;; problem with mus-inspect here is that it includes the table pointer itself
	(if (not (= (mus-length gen) 512)) (snd-display (format #f ";table-lookup length: ~A?" (mus-length gen))))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (table-lookup gen 0.0))
	  (vct-set! v1 i (mus-apply gen1 0.0)))
	(if (not (table-lookup? gen)) (snd-display (format #f ";~A not table-lookup?" gen)))
	(if (fneq (mus-phase gen) 1.253787) (snd-display (format #f ";table-lookup phase: ~F?" (mus-phase gen))))
	(if (fneq (mus-frequency gen) 440.0) (snd-display (format #f ";table-lookup frequency: ~F?" (mus-frequency gen))))
	(if (or (fneq (vct-ref v0 1) 0.373) (fneq (vct-ref v0 8) 1.75)) (snd-display (format #f ";table-lookup output: ~A" v0)))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (if (fneq (vct-ref v0 i) (vct-ref v1 i))
	      (snd-display (format #f ";mus-apply table-lookup at ~D: ~A ~A?" i (vct-ref v0 i) (vct-ref v1 i)))))
	(set! gen (make-table-lookup 440.0 :wave (phase-partials->wave (list 1 1 0 2 1 (* pi .5)))))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (table-lookup gen 0.0)))
	(if (or (fneq (vct-ref v0 1) 1.094) (fneq (vct-ref v0 8) .421)) (snd-display (format #f ";table-lookup phase output: ~A" v0)))
	(if (or (fneq (vct-peak (partials->wave '(1 1 2 1))) 1.76035475730896)
		(fneq (vct-peak (partials->wave '(1 1 2 1) #f #t)) 1.0)
		(fneq (vct-peak (partials->wave '(1 1 2 1 3 1 4 1) #f #t)) 1.0))
	    (snd-display (format #f ";normalized partials?"))))

      (test-gen-equal (make-table-lookup 440.0 :wave (partials->wave '(1 1 2 1)))
		      (make-table-lookup 440.0 :wave (partials->wave '(1 1 2 1)))
		      (make-table-lookup 100.0 :wave (partials->wave '(1 1 2 1))))
      (test-gen-equal (make-table-lookup 440.0 :wave (partials->wave '(1 1 2 1)))
		      (make-table-lookup 440.0 :wave (partials->wave '(1 1 2 1)))
		      (make-table-lookup 440.0 :wave (partials->wave '(1 1 2 .5))))

      (let ((gen0 (make-waveshape 440.0 :wave (partials->waveshape '(1 1))))
	    (gen (make-waveshape 440.0 :partials '(1 1)))
	    (v0 (make-vct 10)))
	(print-and-check gen 
			 "waveshape"
			 "waveshape freq: 440.000Hz, phase: 0.000, size: 512"
			 "ws freq: 0.125379, phase: 0.000000, offset: 256.000000, table[512 (external)]: [-1.000 -0.996 -0.992 -0.988 -0.984 -0.980 -0.977 -0.973...]")
	(if (not (= (mus-length gen) 512)) (snd-display (format #f ";waveshape length: ~A?" (mus-length gen))))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (let ((val0 (waveshape gen0 1.0 0.0))
		(val (waveshape gen 1.0 0.0)))
	    (if (fneq val val0) (snd-display (format #f ";waveshape: ~A /= ~F?" val val0)))
	    (vct-set! v0 i val)))
	(if (not (waveshape? gen)) (snd-display (format #f ";~A not waveshape?" gen)))
	(if (fneq (mus-phase gen) 1.253787) (snd-display (format #f ";waveshape phase: ~F?" (mus-phase gen))))
	(if (fneq (mus-frequency gen) 440.0) (snd-display (format #f ";waveshape frequency: ~F?" (mus-frequency gen))))
	(if (or (fneq (vct-ref v0 1) 0.125) (fneq (vct-ref v0 8) .843)) (snd-display (format #f ";waveshape output: ~A" v0))))

      (test-gen-equal (make-waveshape 440.0 :partials '(1 1)) (make-waveshape 440.0 :partials '(1 1)) (make-waveshape 100.0 :partials '(1 1)))
      (test-gen-equal (make-waveshape 440.0 :partials '(1 1)) (make-waveshape 440.0 :partials '(1 1)) (make-waveshape 4400.0 :partials '(1 1 2 .5)))

      (let ((gen (make-wave-train 440.0 0.0 (make-vct 20)))
	    (v0 (make-vct 10)))
	(print-and-check gen 
			 "wave_train"
			 "wave_train freq: 440.000Hz, phase: 0.000, size: 20"
			 "wt freq: 440.000000, phase: 0.000000, wave[20 (external)]: [0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000...], b:rblk buf[20 (local)]: [0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000...], loc: 0, fill_time: 0.000000, empty: 1")
	(do ((i 0 (1+ i)))
	    ((= i 20))
	  (vct-set! (mus-data gen) i (* i .5)))
	(if (not (= (vct-length (mus-data gen)) 20)) (snd-display (format #f ";wave-train data length: ~A?" (vct-length (mus-data gen)))))
	(if (not (= (mus-length gen) 20)) (snd-display (format #f ";wave-train length: ~A?" (mus-length gen))))
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (wave-train gen 0.0)))
	(if (not (wave-train? gen)) (snd-display (format #f ";~A not wave-train?" gen)))
	(if (fneq (mus-phase gen) 0.0) (snd-display (format #f ";wave-train phase: ~F?" (mus-phase gen))))
	(if (fneq (mus-frequency gen) 440.0) (snd-display (format #f ";wave-train frequency: ~F?" (mus-frequency gen))))
	(if (or (fneq (vct-ref v0 1) 0.5) (fneq (vct-ref v0 8) 4.0)) (snd-display (format #f ";wave-train output: ~A" v0))))

      (test-gen-equal (make-wave-train 440.0 0.0 (make-vct 20)) (make-wave-train 440.0 0.0 (make-vct 20)) (make-wave-train 100.0 0.0 (make-vct 20)))
      (test-gen-equal (make-wave-train 440.0 0.0 (make-vct 20)) (make-wave-train 440.0 0.0 (make-vct 20)) (make-wave-train 440.0 1.0 (make-vct 20)))

      (let ((gen (make-readin "oboe.snd" 0 1490))
	    (v0 (make-vct 10)))
	(print-and-check gen 
			 "readin"
			 "readin: oboe.snd[chan 0], loc: 1490, dir: 1"
			 "rdin chan: 0, dir: 1, loc: 1490, chans: 1, data_start: 0, data_end: -1, file_end: 50828, file_name: oboe.snd")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (readin gen)))
	(if (not (readin? gen)) (snd-display (format #f ";~A not readin?" gen)))
	(if (not (mus-input? gen)) (snd-display (format #f ";~A not input?" gen)))
	(if (not (= (mus-channel gen) 0)) (snd-display (format #f ";readin chan: ~A?" (mus-channel gen))))
	(if (or (fneq (vct-ref v0 1) -0.009) (fneq (vct-ref v0 7) .029)) (snd-display (format #f ";readin output: ~A" v0)))
	(set! (mus-location gen) 1000)
	(if (not (= (mus-location gen) 1000)) (snd-display (format #f ";mus-set-location: ~A?" (mus-location gen))))
	(let ((val (readin gen)))
	  (if (fneq val 0.033) (snd-display (format #f ";mus-set-location readin: ~A?" val)))))

      (test-gen-equal (make-readin "oboe.snd" 0) (make-readin "oboe.snd" 0) (make-readin "oboe.snd" 0 1230))
      (test-gen-equal (make-readin "oboe.snd" 0) (make-readin "oboe.snd" 0) (make-readin "pistol.snd" 0))

      (let ((gen (make-file->sample "oboe.snd"))
	    (v0 (make-vct 10)))
	(print-and-check gen 
			 "file2sample"
			 "file2sample: oboe.snd"
			 "rdin chan: 0, dir: 0, loc: 0, chans: 1, data_start: 0, data_end: -1, file_end: 50828, file_name: oboe.snd")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (file->sample gen (+ 1490 i))))
	(if (not (file->sample? gen)) (snd-display (format #f ";~A not file->sample?" gen)))
	(if (or (fneq (vct-ref v0 1) -0.009) (fneq (vct-ref v0 7) .029)) (snd-display (format #f ";file->sample output: ~A" v0))))

      (let ((gen (make-file->frame "oboe.snd"))
	    (v0 (make-vct 10)))
	(print-and-check gen 
			 "file2frame"
			 "file2frame: oboe.snd"
			 "rdin chan: 0, dir: 0, loc: 0, chans: 1, data_start: 0, data_end: -1, file_end: 50828, file_name: oboe.snd")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (frame-ref (file->frame gen (+ 1490 i)) 0)))
	(if (not (file->frame? gen)) (snd-display (format #f ";~A not file->frame?" gen)))
	(if (or (fneq (vct-ref v0 1) -0.009) (fneq (vct-ref v0 7) .029)) (snd-display (format #f ";file->frame output: ~A" v0))))

      (if (file-exists? "fmv.snd") (delete-file "fmv.snd"))
      (if (file-exists? "fmv1.snd") (delete-file "fmv1.snd"))
      (if (file-exists? "fmv2.snd") (delete-file "fmv2.snd"))
      (if (file-exists? "fmv3.snd") (delete-file "fmv3.snd"))
      (let ((gen (make-sample->file "fmv.snd" 2 mus-lshort mus-riff)))
	(print-and-check gen 
			 "sample2file"
			 "sample2file: fmv.snd"
			 "rdout chan: 0, loc: 0, file_name: fmv.snd, chans: 2, data_start: 0, data_end: 8191, out_end: 0")
	(if (not (mus-output? gen)) (snd-display (format #f ";~A not output?" gen)))
	(if (not (sample->file? gen)) (snd-display (format #f ";~A not sample->file?" gen)))
	(do ((i 0 (1+ i)))
	    ((= i 100))
	  (sample->file gen i 0 (* i .001))
	  (sample->file gen i 1 (* i .01)))
	(outa 50 .015 gen)
	(outb 50 .15 gen)
	(out-any 60 .015 0 gen)
	(out-any 60 .15 1 gen)
	(mus-close gen))
      (let* ((gen (make-file->sample "fmv.snd"))
	     (val0 (in-any 20 0 gen))
	     (val1 (in-any 20 1 gen))
	     (val2 (ina 30 gen))
	     (val3 (inb 30 gen))
	     (val4 (file->sample gen 40 0))
	     (val5 (file->sample gen 40 1))
	     (val6 (in-any 50 0 gen))
	     (val7 (in-any 50 1 gen))
	     (val8 (in-any 60 0 gen))
	     (val9 (in-any 60 1 gen)))
	(print-and-check gen 
			 "file2sample"
			 "file2sample: fmv.snd"
			 "rdin chan: 0, dir: 0, loc: 0, chans: 2, data_start: 20, data_end: 100, file_end: 100, file_name: fmv.snd")
	(if (not (= (mus-channels gen) 2)) (snd-display (format #f ";make-sample->file chans: ~A?" (mus-channels gen))))
	(if (not (mus-input? gen)) (snd-display (format #f ";~A not input?" gen)))
	(if (or (fneq val0 .02) (fneq val1 .2)) (snd-display (format #f ";in-any: ~A ~A?" val0 val1)))
	(if (or (fneq val2 .03) (fneq val3 .3)) (snd-display (format #f ";inab: ~A ~A?" val2 val3)))
	(if (or (fneq val4 .04) (fneq val5 .4)) (snd-display (format #f ";sample->file: ~A ~A?" val4 val5)))
	(if (or (fneq val6 .065) (fneq val7 .65)) (snd-display (format #f ";outab: ~A ~A?" val6 val7)))
	(if (or (fneq val8 .075) (fneq val9 .75)) (snd-display (format #f ";out-any: ~A ~A?" val8 val9))))

      (let ((gen (make-frame->file "fmv1.snd" 2 mus-bshort mus-next)))
	(print-and-check gen 
			 "frame2file"
			 "frame2file: fmv1.snd"
			 "rdout chan: 0, loc: 0, file_name: fmv1.snd, chans: 2, data_start: 0, data_end: 8191, out_end: 0")
	(if (not (mus-output? gen)) (snd-display (format #f ";~A not output?" gen)))
	(if (not (frame->file? gen)) (snd-display (format #f ";~A not frame->file?" gen)))
	(let ((fr0 (make-frame 2 0.0 0.0)))
	  (do ((i 0 (1+ i)))
	      ((= i 100))
	    (frame-set! fr0 0 (* i .001))
	    (frame-set! fr0 1 (* i .01))
	    (frame->file gen i fr0)))
	(mus-close gen))
      (let* ((gen (make-file->frame "fmv1.snd"))
	     (val4 (file->frame gen 40))
	     (frout (make-frame 2)))
	(if (or (fneq (frame-ref val4 0) .04) (fneq (frame-ref val4 1) .4))
	    (snd-display (format #f ";frame->file output: ~A?" val4)))
	(file->frame gen 40 frout)
	(if (not (equal? frout val4))
	    (snd-display (format #f ";frame->file output via frame: ~A ~A?" frout val4))))

      (let ((gen (make-sample->file "fmv2.snd" 4 mus-bshort mus-aifc)))
	(print-and-check gen 
			 "sample2file"
			 "sample2file: fmv2.snd"
			 "rdout chan: 0, loc: 0, file_name: fmv2.snd, chans: 4, data_start: 0, data_end: 8191, out_end: 0")
	(if (not (mus-output? gen)) (snd-display (format #f ";~A not output?" gen)))
	(if (not (sample->file? gen)) (snd-display (format #f ";~A not sample->file?" gen)))
	(do ((i 0 (1+ i)))
	    ((= i 100))
	  (sample->file gen i 0 (* i .001))
	  (sample->file gen i 1 (* i .01))
	  (sample->file gen i 2 (* i .002))
	  (sample->file gen i 3 (* i .003)))
	(outa 50 .015 gen)
	(outb 50 .15 gen)
	(outc 50 .02 gen)
	(outd 50 .03 gen)
	(out-any 60 .015 0 gen)
	(out-any 60 .15 1 gen)
	(out-any 60 .02 2 gen)
	(out-any 60 .03 3 gen)
	(mus-close gen))
      (let* ((gen (make-file->sample "fmv2.snd"))
	     (val0 (in-any 20 2 gen))
	     (val1 (in-any 20 3 gen))
	     (val2 (file->sample gen 50 2))
	     (val3 (file->sample gen 50 3))
	     (val4 (file->sample gen 60 2))
	     (val5 (file->sample gen 60 3)))
	(if (not (= (mus-channels gen) 4)) (snd-display (format #f ";make-sample->file (4) chans: ~A?" (mus-channels gen))))
	(if (or (fneq val0 .04) (fneq val1 .06)) (snd-display (format #f ";in-any(4): ~A ~A?" val0 val1)))
	(if (or (fneq val2 .12) (fneq val3 .18)) (snd-display (format #f ";sample->file(4): ~A ~A?" val2 val3)))
	(if (or (fneq val4 .14) (fneq val5 .21)) (snd-display (format #f ";out-any(4): ~A ~A?" val4 val5))))

      (let ((v0 (make-vct 1000))
	    (os (make-oscil 440.0)))
	(do ((i 0 (1+ i)))
	    ((= i 1000))
	  (vct-set! v0 i (* .1 (oscil os))))
	(array->file "fmv3.snd" v0 1000 22050 1)
	(let ((v1 (make-vct 1000)))
	  (file->array "fmv3.snd" 0 0 1000 v1)
	  (do ((i 0 (1+ i)))
	      ((= i 1000))
	    (if (fneq (vct-ref v0 i) (vct-ref v1 i)) (snd-display (format #f ";array->file->array: ~A ~A ~A?" i (vct-ref v0 i) (vct-ref v1 i)))))))

      (let ((gen (make-rand 10000.0))
	    (v0 (make-vct 10)))
	(print-and-check gen 
			 "rand"
			 "rand freq: 10000.000Hz, phase: 0.000, amp: 1.000"
			 "noi freq: 2.849517, phase: 0.000000, base: 1.000000, output: 0.000000, incr: 0.000000")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (rand gen 0.0)))
	(if (not (rand? gen)) (snd-display (format #f ";~A not rand?" gen)))
	(if (fneq (mus-phase gen) 3.3624296) (snd-display (format #f ";rand phase: ~F?" (mus-phase gen))))
	(if (fneq (mus-frequency gen) 10000.0) (snd-display (format #f ";rand frequency: ~F?" (mus-frequency gen))))
	(if (= (vct-ref v0 1) (vct-ref v0 8)) (snd-display (format #f ";rand output: ~A" v0))))

      (test-gen-equal (make-rand 1000) (make-rand 1000) (make-rand 500))
      (test-gen-equal (make-rand 1000) (make-rand 1000) (make-rand 1000 0.5))

      (let ((gen (make-rand-interp 4000.0))
	    (v0 (make-vct 10)))
	(print-and-check gen 
			 "rand_interp"
			 (mus-describe gen)
			 (mus-inspect gen)) ; problem here is the random incr field
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (rand-interp gen 0.0)))
	(if (not (rand-interp? gen)) (snd-display (format #f ";~A not rand-interp?" gen)))
	(if (fneq (mus-phase gen) 5.114882) (snd-display (format #f ";rand-interp phase: ~F?" (mus-phase gen))))
	(if (fneq (mus-frequency gen) 4000.0) (snd-display (format #f ";rand-interp frequency: ~F?" (mus-frequency gen))))
	(if (= (vct-ref v0 1) (vct-ref v0 8)) (snd-display (format #f ";rand-interp output: ~A" v0))))

      (let* ((gen (make-locsig 30.0 :channels 2))
	     (gen1 (make-locsig 60.0 :channels 2))
	     (gen2 (make-locsig 60.0 :channels 4))
	     (gen3 gen1)
	     (fr0 (locsig gen 0 1.0)))
	(print-and-check gen 
			 "locsig"
			 "locsig: chans 2, outn: [0.667 0.333]"
			 "locs outn[2]: [0.667 0.333], revn[0]: nil")
	(if (not (locsig? gen)) (snd-display (format #f ";~A not locsig?" gen)))
	(if (not (eq? gen1 gen3)) (snd-display (format #f ";locsig eq? ~A ~A" gen1 gen3)))
	(if (not (equal? gen1 gen3)) (snd-display (format #f ";locsig equal? ~A ~A" gen1 gen3)))
	(if (eq? gen1 gen2) (snd-display (format #f ";locsig 1 eq? ~A ~A" gen1 gen2)))
	(if (equal? gen gen1) (snd-display (format #f ";locsig 2 equal? ~A ~A" gen gen1)))
	(if (equal? gen gen2) (snd-display (format #f ";locsig 3 equal? ~A ~A" gen gen2)))
	(if (or (fneq (frame-ref fr0 0) .667) (fneq (frame-ref fr0 1) .333)) (snd-display (format #f ";locsig output: ~A" fr0)))
	(if (or (fneq (locsig-ref gen 0) .667) (fneq (locsig-ref gen 1) .333))
	    (snd-display (format #f ";locsig ref: ~F ~F?" (locsig-ref gen 0) (locsig-ref gen 1))))
	(locsig-set! gen 0 .5)
	(set! fr0 (locsig gen 0 1.0))
	(if (fneq (frame-ref fr0 0) .5) (snd-display (format #f ";locsig-set: ~F?" (frame-ref fr0 0))))
	(set! gen (make-locsig 120.0 2.0 .1 :channels 4))
	(set! fr0 (locsig gen 0 1.0))
	(if (or (fneq (frame-ref fr0 1) .333) (fneq (frame-ref fr0 2) .167)) (snd-display (format #f ";locsig quad output: ~A" fr0)))
	(set! gen (make-locsig 300.0 2.0 .1 :channels 4))
	(set! fr0 (locsig gen 0 1.0))
	(if (or (fneq (frame-ref fr0 3) .333) (fneq (frame-ref fr0 0) .167)) (snd-display (format #f ";300 locsig quad output: ~A" fr0))))

      (if (file-exists? "fmv4.snd") (delete-file "fmv4.snd"))
      (if (file-exists? "fmv4.reverb") (delete-file "fmv4.reverb"))
      (let* ((gen (make-frame->file "fmv4.snd" 2 mus-bshort mus-next))
	     (rev (make-frame->file "fmv4.reverb" 1 mus-bshort mus-next))
	     (lc (make-locsig 60.0 :reverb .1 :channels 2 :output gen :revout rev)))
	(do ((i 0 (1+ i)))
	    ((= i 100))
	  (locsig lc i 1.0))
	(if (fneq (locsig-reverb-ref lc 0) .1) (snd-display (format #f ";locsig reverb ref: ~A?" (locsig-reverb-ref lc 0))))
	(locsig-reverb-set! lc 0 .2)
	(if (fneq (locsig-reverb-ref lc 0) .2) (snd-display (format #f ";locsig reverb set: ~A?" (locsig-reverb-ref lc 0))))
	(mus-close gen)
	(mus-close rev)
	(let ((v0 (make-vct 100))
	      (v1 (make-vct 100))
	      (v2 (make-vct 100)))
	  (file->array "fmv4.snd" 0 0 100 v0)
	  (file->array "fmv4.snd" 1 0 100 v1)
	  (file->array "fmv4.reverb" 0 0 100 v2)
	  (if (fneq (vct-ref v2 0) .1) (snd-display (format #f ";locsig reverb: ~A?" v2)))
	  (if (fneq (* 2 (vct-ref v0 0)) (vct-ref v1 0)) (snd-display (format #f ";locsig direct: ~A?" (vct-ref v0 0) (vct-ref v1 0))))))

      (let ((gen (make-src :srate 2.0))
	    (v0 (make-vct 10))
	    (rd (make-readin "oboe.snd" 0 2000)))
	(print-and-check gen 
			 "src"
			 "src: width: 10, x: 0.000, incr: 2.000, len: 10000"
			 "sr x: 0.000000, incr: 2.000000, width: 10, len: 10000, data[21]: [0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000...]")
	(do ((i 0 (1+ i)))
	    ((= i 10))
	  (vct-set! v0 i (src gen 0.0 (lambda (dir) (readin rd)))))
	(if (not (src? gen)) (snd-display (format #f ";~A not scr?" gen)))
	(if (or (fneq (vct-ref v0 1) .001) (fneq (vct-ref v0 7) .021)) (snd-display (format #f ";src output: ~A" v0)))
	(if (fneq (mus-increment gen) 2.0) (snd-display (format #f ";src increment: ~F?" (mus-increment gen)))))

      (let ((gen (make-granulate :expansion 2.0))
	    (v0 (make-vct 1000))
	    (rd (make-readin "oboe.snd" 0 4000)))
	(print-and-check gen 
			 "granulate"
			 "granulate: expansion: 2.000 (551/1102), scaler: 0.600, length: 0.150 secs (3308 samps), ramp: 0.060"
			 "grn_info s20: 1102, s50: 441, rmp: 1323, amp: 0.600000, len: 3308, cur_out: 0, cur_in: 0, input_hop: 551, ctr: 0, output_hop: 1102, in_data_start: 5513, in_data[5513]: [0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000...], data[4410]: [0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000...]")
	(do ((i 0 (1+ i)))
	    ((= i 1000))
	  (vct-set! v0 i (granulate gen (lambda (dir) (readin rd)))))
	(if (= (vct-peak v0) 0.0) (snd-display (format #f ";granulate output peak: ~F?" (vct-peak v0))))
	(if (not (granulate? gen)) (snd-display (format #f ";~A not granulate?" gen)))
	(if (fneq (mus-increment gen) 2.0) (snd-display (format #f ";granulate increment: ~F?" (mus-increment gen))))
	(if (fneq (mus-scaler gen) 0.6) (snd-display (format #f ";granulate scaler: ~F?" (mus-scaler gen))))
	(if (fneq (mus-frequency gen) 0.05) (snd-display (format #f ";granulate frequency: ~F?" (mus-frequency gen))))
	(if (not (= (mus-ramp gen) 1323)) (snd-display (format #f ";granulate ramp: ~F?" (mus-ramp gen))))
	(if (not (= (mus-length gen) 3308)) (snd-display (format #f ";granulate length: ~A?" (mus-length gen))))
	(if (not (= (mus-hop gen) 1102)) (snd-display (format #f ";granulate hop: ~A?" (mus-hop gen))))
	(set! (mus-hop gen) 1000) (if (not (= (mus-hop gen) 1000)) (snd-display (format #f ";granulate set-hop: ~A?" (mus-hop gen))))
	(set! (mus-ramp gen) 1000) (if (not (= (mus-ramp gen) 1000)) (snd-display (format #f ";granulate set-ramp: ~A?" (mus-ramp gen))))
	(set! (mus-length gen) 3000) (if (not (= (mus-length gen) 3000)) (snd-display (format #f ";granulate set-length: ~A?" (mus-length gen))))
	(set! (mus-increment gen) 3.0)
	(if (> (abs (- (mus-increment gen) 3.0)) .01) (snd-display (format #f ";granulate set-increment: ~F?" (mus-increment gen)))))

      (let* ((v0 (make-vct 32))
	     (v1 (make-vct 256))
	     (v2 (make-vct 256)))
	(do ((i 1 (1+ i)))
	    ((= i 16))
	  (vct-set! v0 i (/ 1.0 i)))
	(vct-set! v1 0 1.0)
	(let ((gen (make-convolve :filter v0))
	      (n -1))
	  (print-and-check gen 
			   "convolve"
			   "convolve: size: 64"
			   "conv fftsize: 64, fftsize2: 32, filtersize: 32, ctr: 32, rl1: [0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000...], rl2: [0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000...], buf: [0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000...], filter: [0.000 1.000 0.500 0.333 0.250 0.200 0.167 0.143...]")
	  (if (not (convolve? gen)) (snd-display (format #f ";~A not convolve?" gen)))
	  (if (not (= (mus-length gen) 64)) (snd-display (format #f ";convolve fft len: ~D?" (mus-length gen))))
	  (do ((i 0 (1+ i)))
	      ((= i 128))
	    (vct-set! v2 i (convolve gen (lambda (dir) (set! n (+ n 1)) (vct-ref v1 n)))))
	  (if (or (fneq (vct-ref v2 0) 0.0)
		  (fneq (vct-ref v2 1) 1.0)
		  (fneq (vct-ref v2 4) 0.25)
		  (fneq (vct-ref v2 7) 0.143))
	      (snd-display (format #f ";convolve output: ~A?" v2))))
	(convolve-files "oboe.snd" "fyow.snd" .5 "fmv.snd")
	(if (fneq (vector-ref (mus-sound-max-amp "fmv.snd") 1) .5) 
	    (snd-display (format #f ";convolve-files: ~A /= .5?" (vector-ref (mus-sound-max-amp "fmv.snd") 1))))
	(play-sound "fmv.snd"))

      (let* ((fd (mus-sound-open-input "oboe.snd"))
	     (chans (mus-sound-chans "oboe.snd"))
	     (data (make-sound-data chans 2000)))
	(if (not (sound-data? data)) (snd-display (format #f ";~A not sound-data?" data)))
	(if (not (= (sound-data-chans data) 1)) (snd-display (format #f ";sound-data chans: ~A?" (sound-data-chans data))))
	(if (not (= (sound-data-length data) 2000)) (snd-display (format #f ";sound-data length: ~A?" (sound-data-length data))))
	(mus-sound-read fd 0 1999 chans data)
	(let ((val (sound-data-ref data 0 1497)))
	  (mus-sound-close-input fd)
	  (if (fneq val 0.02893066) (snd-display (format #f ";mus-sound-read: ~F?" val)))))

      (let ((nind (new-sound "fmv.snd" mus-aifc mus-bshort 22050 1 "this is a comment")))
	(time (fm-violin 0 1 440 .1))
	(fofins 1 1 270 .2 .001 730 .6 1090 .3 2440 .1) 
	(scissor 2.0) 
	(play-and-wait 0 nind)
	(save-sound nind)
	(let ((oboe-index (or (find-sound "oboe.snd") (open-sound "oboe.snd"))))
	  (cnvtest oboe-index nind .1) 
	  (select-sound nind)
	  (select-channel 0)
	  (if (not (= (selected-sound) nind)) (snd-display (format #f ";selected-sound: ~A?" (selected-sound))))
	  (if (not (= (selected-channel) 0)) (snd-display (format #f ";selected-channel: ~A?" (selected-channel))))
	  (jc-reverb 1.0 #f .1 #f) 
	  (play-and-wait 0 nind)
	  (voiced->unvoiced 1.0 256 2.0 2.0) 
	  (map-chan (fltit))
	  (close-sound oboe-index))
	(let ((fr (frames nind 0)))
	  (do ((k 0 (1+ k)))
	      ((= k 10))
	    (delete-samples 10 100 nind 0)
	    (save-sound nind)) ;flush out memory leaks here
	  (if (not (= (frames nind 0) (- fr 1000)))
	      (snd-display (format #f ";delete-samples: ~A ~A" fr (frames nind 0)))))
	(revert-sound nind)
	(close-sound nind))
      (if (file-exists? "fmv.snd") (delete-file "fmv.snd"))

      (let ((nind (new-sound "fmv.snd")))
	(if (not (= (header-type nind) (default-output-type)))
	    (snd-display (format #f ";new-sound default header-type: ~A ~A?"
			       (mus-header-type-name (header-type nind))
			       (mus-header-type-name (default-output-type)))))
	(if (not (= (data-format nind) (default-output-format)))
	    (snd-display (format #f ";new-sound default data-format: ~A ~A?"
			       (mus-data-format-name (data-format nind))
			       (mus-data-format-name (default-output-format)))))
	(if (not (= (chans nind) (default-output-chans)))
	    (snd-display (format #f ";new-sound default chans: ~A ~A?" (chans nind) (default-output-chans))))
	(if (not (= (srate nind) (default-output-srate)))
	    (snd-display (format #f ";new-sound default srate: ~A ~A?" (srate nind) (default-output-srate))))
	(close-sound nind)
	(if (file-exists? "fmv.snd") (delete-file "fmv.snd")))
      (let ((nind (new-sound "fmv.snd" mus-nist mus-bshort 22050 1 "this is a comment")))
	(set! (sample 0 nind) 1.0) 
	(start-progress-report nind)
	(convolve-with "oboe.snd") 
	(progress-report .1 "hiho" 0 1 nind)
	(if (fneq (sample 1000) -0.22299) (snd-display (format #f ";convolve-with: ~A?" (sample 1000))))
	(progress-report .3 "hiho" 0 1 nind)
	(revert-sound nind)
	(progress-report .5 "hiho" 0 1 nind)
	(set! (sample 200) .0001) 
	(set! (sample 100) 1.0) 
	(progress-report .8 "hiho" 0 1 nind)
	(smooth 0 100) 
	(finish-progress-report nind)
	(if (or (fneq (sample 50) .5) (fneq (sample 30) 0.20608) (fneq (sample 90) 0.9755))
	    (snd-display (format #f ";smooth: ~A ~A ~A?" (sample 50) (sample 30) (sample 90))))
	(undo) 
	(set! (sinc-width) 40) 
	(set! (sample 100) 0.5) 
	(if (fneq (sample 100) 0.5) (snd-display (format #f ";set-sample 100: ~A?" (sample 100))))
	(src-sound .1) 
	(if (or (fneq (sample 1000) 0.5) (fneq (sample 1024) 0.0625) (fneq (sample 1010) 0.0))
	    (snd-display (format #f ";src-sound: ~A ~A ~A?" (sample 1000) (sample 1024) (sample 1010))))
	(revert-sound)
	(close-sound nind))
      (let ((nind (new-sound "fmv.snd" mus-riff mus-lshort 22050 1 "this is a comment")))
	(mix "pistol.snd") 
	(map-chan (expsrc 2.0 nind)) 
	(play-and-wait 0 nind)
	(undo) 
	(let ((eds (edits)))
	  (if (or (not (= (car eds) 1)) (not (= (cadr eds) 1)))
	      (snd-display (format #f ";undo edits: ~A?" eds)))
	  (if (not (= (edit-position) (car eds)))
	      (snd-display (format #f ";undo edit-position: ~A ~A?" (edit-position) eds))))
	(expsnd '(0 1 2 .4)) 
	(map-chan (comb-chord .95 100 .3)) 
	(map-chan (formants .99 900 .02 1800 .01 2700)) 
	(map-chan (moving-formant .99 '(0 1200 1 2400))) 
	(scale-to .3) 
	(play-and-wait 0)
	(let ((eds (edits)))
	  (if (or (not (= (car eds) 6)) (not (= (cadr eds) 0)))
	      (snd-display (format #f ";edits(6): ~A?" eds)))
	  (if (not (= (edit-position) (car eds)))
	      (snd-display (format #f ";edit-position(6): ~A ~A?" (edit-position) eds))))
	(set! (edit-position) 1)
	(if (not (= (edit-position) 1))
	    (snd-display (format #f ";set edit-position(1): ~A ~A?" (edit-position))))
	(revert-sound nind)
	(mix "pistol.snd") 
	(map-chan (zecho .5 .75 6 10.0) 0 65000) 
	(map-chan (am 440)) 
	(add-mark 1200)
	(add-mark 2300)
	(key (char->integer #\x) 4)
	(key (char->integer #\c) 0) ; trigger mark-define-region
	(reverse-sound nind) 
	(play-and-wait 0 nind)
	(revert-sound nind)
	(mix-sound "pistol.snd" 0) 
	(hello-dentist 40.0 .1) 
	(fp 1.0 .3 20) 
	(play-and-wait 0 nind)
	(revert-sound nind)
	(enveloped-mix "oboe.snd" 0 '(0 0 1 1 2 0)) 
	(pvoc :pitch 0.5 :time 1.0 :snd nind) 
	(play-and-wait 0 nind)
	(revert-sound nind)
	(pqw-vox 0 1 300 300 .1 '(0 0 50 1 100 0) '(0 0 100 0) 0 '(0 L 100 L) '(.33 .33 .33) '((1 1 2 .5) (1 .5 2 .5 3 1) (1 1 4 .5)))
	(play-and-wait 0 nind)
	(close-sound nind))

      (if (file-exists? "fmv.snd") (delete-file "fmv.snd"))
      (if (file-exists? "fmv1.snd") (delete-file "fmv1.snd"))
      (if (file-exists? "fmv2.snd") (delete-file "fmv2.snd"))
      (if (file-exists? "fmv3.snd") (delete-file "fmv3.snd"))
      (let ((v0 (make-vct 12)))
	(vct-fill! v0 0.1)
	(array->file "fmv1.snd" v0 12 22050 1)
	(vct-fill! v0 0.2)
	(array->file "fmv2.snd" v0 12 22050 2)
	(vct-fill! v0 0.3)
	(array->file "fmv3.snd" v0 12 22050 4)
	(do ((i 0 (1+ i))) ((= i 12)) (vct-set! v0 i (* i .01)))
	(array->file "fmv.snd" v0 12 22050 1)
	(mus-mix "fmv.snd" "fmv1.snd")
	(file->array "fmv.snd" 0 0 12 v0)
	(do ((i 0 (1+ i))) ((= i 12)) (if (fneq (vct-ref v0 i) (+ 0.1 (* i .01))) (snd-display (format #f ";mus-mix(1->1): ~A?" v0))))
	(mus-mix "fmv.snd" "fmv2.snd" 3 9 0 (make-mixer 2 0.3 0.0 0.7 0.0))
	(file->array "fmv.snd" 0 0 12 v0)
	(if (or (fneq (vct-ref v0 0) .1) (fneq (vct-ref v0 3) .33) (fneq (vct-ref v0 9) .19)) (snd-display (format #f ";mus-mix(2->1): ~A?" v0)))
	(mus-mix "fmv.snd" "fmv3.snd")
	(file->array "fmv.snd" 0 0 12 v0)
	(if (or (fneq (vct-ref v0 0) .4) (fneq (vct-ref v0 3) .33)) (snd-display (format #f ";mus-mix(4->1): ~A?" v0)))
	(let ((e0 (make-env '(0 0 1 1) :end 9))
	      (vf (make-vector 1))
	      (vf1 (make-vector 1)))
	  (vector-set! vf 0 vf1)
	  (vector-set! vf1 0 e0)
	  (mus-mix "fmv.snd" "fmv1.snd" 0 12 0 (make-mixer 1 1.0) vf)
	  (file->array "fmv.snd" 0 0 12 v0)
	  (if (or (fneq (vct-ref v0 0) .4) (fneq (vct-ref v0 3) .360) (fneq (vct-ref v0 9) .28)) (snd-display (format #f ";mus-mix(env): ~A?" v0))))
	(delete-file "fmv.snd")
	(do ((i 0 (1+ i))) ((= i 12)) (vct-set! v0 i (* i .01)))
	(array->file "fmv.snd" v0 12 22050 4)
	(mus-mix "fmv.snd" "fmv1.snd")
	(file->array "fmv.snd" 0 0 3 v0) ; chan 0 start 0 len 3
	(if (or (fneq (vct-ref v0 0) .1) (fneq (vct-ref v0 2) .18)) (snd-display (format #f ";mus-mix(1->4): ~A?" v0)))
	(mus-mix "fmv.snd" "fmv2.snd"  0 3 0 (make-mixer 2 0.3 0.0 0.7 0.0))
	(file->array "fmv.snd" 0 0 3 v0)
	(if (or (fneq (vct-ref v0 0) .3) (fneq (vct-ref v0 2) .38)) (snd-display (format #f ";mus-mix(2->4): ~A?" v0)))
	(mus-mix "fmv.snd" "fmv3.snd" 0 2 0)
	(file->array "fmv.snd" 0 0 3 v0)
	(if (or (fneq (vct-ref v0 0) .6) (fneq (vct-ref v0 2) .38)) (snd-display (format #f ";mus-mix(4->4): ~A?" v0))))

      (let* ((ind (open-sound "oboe.snd"))
	     (pi2 (* 2.0 pi))
	     (pv (make-phase-vocoder #f
				    512 4 128 1.0
				    #f ;no change to analysis
				    #f ;no change to edits
				    #f ;no change to synthesis
				    ))
	    (reader (make-sample-reader 0)))
	(print-and-check pv 
			 "phase_vocoder"
			 "phase_vocoder: outctr: 128, interp: 128, filptr: 0, N: 512, D: 128, in_data: nil"
			 "pv_info outctr: 128, interp: 128, filptr: 0, N: 512, D: 128, in_data: nil, amps: [0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000...], freqs: [0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000...]")
	(select-sound ind)
	(map-chan (lambda (val)
 		    (phase-vocoder pv (lambda (dir) 
					(next-sample reader)))
		    #f))
	(if (fneq (pv-ampinc pv 0) (vct-ref (pv-ampinc-1 pv) 0))
	    (snd-display (format #f ";pvoc ampinc: ~A ~A?" (pv-ampinc pv 0) (vct-ref (pv-ampinc-1 pv) 0))))
	(set-pv-ampinc pv 0 .1)
	(if (fneq (pv-ampinc pv 0) .1)
	    (snd-display (format #f ";set-pv-ampinc: ~A?" (pv-ampinc pv 0))))
	(if (fneq (pv-amps pv 0) (vct-ref (pv-amps-1 pv) 0))
	    (snd-display (format #f ";pvoc amps: ~A ~A?" (pv-amps pv 0) (vct-ref (pv-amps-1 pv) 0))))
	(set-pv-amps pv 0 .1)
	(if (fneq (pv-amps pv 0) .1)
	    (snd-display (format #f ";set-pv-amps: ~A?" (pv-amps pv 0))))
	(if (fneq (pv-phases pv 0) (vct-ref (pv-phases-1 pv) 0))
	    (snd-display (format #f ";pvoc phases: ~A ~A?" (pv-phases pv 0) (vct-ref (pv-phases-1 pv) 0))))
	(set-pv-phases pv 0 .1)
	(if (fneq (pv-phases pv 0) .1)
	    (snd-display (format #f ";set-pv-phases: ~A?" (pv-phases pv 0))))
	(if (fneq (pv-phaseinc pv 0) (vct-ref (pv-phaseinc-1 pv) 0))
	    (snd-display (format #f ";pvoc phaseinc: ~A ~A?" (pv-phaseinc pv 0) (vct-ref (pv-phaseinc-1 pv) 0))))
	(set-pv-phaseinc pv 0 .1)
	(if (fneq (pv-phaseinc pv 0) .1)
	    (snd-display (format #f ";set-pv-phaseinc: ~A?" (pv-phaseinc pv 0))))
	(if (fneq (pv-lastphase pv 0) (vct-ref (pv-lastphase-1 pv) 0))
	    (snd-display (format #f ";pvoc lastphase: ~A ~A?" (pv-lastphase pv 0) (vct-ref (pv-lastphase-1 pv) 0))))
	(set-pv-lastphase pv 0 .1)
	(if (fneq (pv-lastphase pv 0) .1)
	    (snd-display (format #f ";set-pv-lastphase: ~A?" (pv-lastphase pv 0))))
	(if (fneq (pv-freqs pv 0) (vct-ref (pv-freqs-1 pv) 0))
	    (snd-display (format #f ";pvoc freqs: ~A ~A?" (pv-freqs pv 0) (vct-ref (pv-freqs-1 pv) 0))))
	(set-pv-freqs pv 0 .1)
	(if (fneq (pv-freqs pv 0) .1)
	    (snd-display (format #f ";set-pv-freqs: ~A?" (pv-freqs pv 0))))
	(undo 1)
	(free-sample-reader reader)
	(set! pv (make-phase-vocoder #f
				     512 4 128 1.0
				     #f ;no change to analysis
				     (lambda (v)
				       ; new editing func changes pitch
				       (let* ((N (mus-length v)) ;mus-increment => interp, mus-data => in-data
					      (D (mus-hop v)))
					 (do ((k 0 (1+ k))
					      (pscl (/ 1.0 D))
					      (kscl (/ pi2 N)))
					     ((= k (inexact->exact (floor (/ N 2)))))
					   (let ((phasediff (- (pv-freqs v k) (pv-lastphase v k))))
					     (set-pv-lastphase v k (pv-freqs v k))
					     (if (> phasediff pi) (do () ((<= phasediff pi)) (set! phasediff (- phasediff pi2))))
					     (if (< phasediff (- pi)) (do () ((>= phasediff (- pi))) (set! phasediff (+ phasediff pi2))))
					     (set-pv-freqs v k 
							   (* 0.5
							      (+ (* pscl phasediff)
								 (* k kscl))))))
					 #f))
				     #f ; no change to synthesis
				     ))
	(if (provided? 'snd-new-smob)
	    (begin
	      (set! reader (make-sample-reader 0))
	      (map-chan (lambda (val)
			  (phase-vocoder pv (lambda (dir) 
					      (reader)))
			  #f))
	      (undo 1)
	      (free-sample-reader reader)))
	(set! pv (make-phase-vocoder #f
				     512 4 (inexact->exact (* 128 2.0)) 1.0
				     #f ;no change to analysis
				     #f ;no change to edits
				     #f ;no change to synthesis
				     ))
	(set! reader (make-sample-reader 0))
	(let* ((len (inexact->exact (* 2.0 (frames ind))))
	       (data (make-vct len)))
	  (vct-map! data
		    (lambda ()
		      (phase-vocoder pv (lambda (dir) (next-sample reader)))))
	  (set! (samples 0 len) data))
	(undo 1)
	(free-sample-reader reader)
	(close-sound ind))

      ))


;;; ---------------- test 9: mix ----------------
(if (or full-test (= snd-test 9))
    (begin
    (do ((test-ctr 0 (1+ test-ctr)))
	((= test-ctr tests))
      (let ((new-index (new-sound "hiho.wave" mus-next mus-bshort 22050 1)))
	(if (procedure? trace-hook) (trace-hook 9))
	(log-mem test-ctr)
	(select-sound new-index)
	(let ((mix-id (mix "pistol.snd" 100)))
	  (if (not (mix? mix-id)) (snd-display (format #f ";~A not mix?" mix-id)))
	  (mix-panel)
	  (let ((pos (mix-position mix-id))
		(len (mix-length mix-id))
		(loc (mix-locked mix-id))
		(anc (mix-anchor mix-id))
		(spd (mix-speed mix-id))
		(trk (mix-track mix-id))
		(snd (mix-sound-index mix-id))
		(chn (mix-sound-channel mix-id))
		(chns (mix-chans mix-id))
		(amp (mix-amp mix-id 0))
		(mr (make-mix-sample-reader mix-id)))
	    (if (not (mix-sample-reader? mr)) (snd-display (format #f ";~A not mix-sample-reader?" mr)))
	    (let ((reader-string (format #f "~A" mr)))
	      (if (not (string=? (substring reader-string 0 22) "#<mix-sample-reader 0x"))
		  (snd-display (format #f ";mix sample reader actually got: [~S]" (substring reader-string 0 22))))
	      (if (not (string=? (substring reader-string 29) ": /home/bil/cl/pistol.snd via mix 5>"))
		  (snd-display (format #f ";mix sample reader actually got: [~S]" (substring reader-string 29)))))
	    (do ((i 0 (1+ i)))
		((= i 99))
	      (let ((mx (next-mix-sample mr))
		    (sx (sample (+ 100 i))))
		(if (fneq mx sx) (snd-display (format #f ";next-mix-sample: ~A ~A?" mx sx)))))
	    (if (provided? 'snd-new-smob)
		(let ((mx (mr))
		      (sx (sample 199)))
		  (if (fneq mx sx) (snd-display (format #f ";mix-sample 100: ~A ~A?" mx sx)))))
	    (free-mix-sample-reader mr)
	    (if (not (= pos 100)) (snd-display (format #f ";mix-position: ~A?" pos)))
	    (if (not (= len 41623)) (snd-display (format #f ";mix-length: ~A?" len)))
	    (if loc (snd-display (format #f ";mix-locked: ~A?" loc)))
	    (if (not (= anc 0)) (snd-display (format #f ";mix-anchor: ~A?" anc)))
	    (if (not (= trk 0)) (snd-display (format #f ";mix-track: ~A?" trk)))
	    (if (not (= snd new-index)) (snd-display (format #f ";mix-sound-index: ~A?" snd)))		
	    (if (not (= chn 0)) (snd-display (format #f ";mix-sound-channel: ~A?" chn)))
	    (if (not (= chns 1)) (snd-display (format #f ";mix-chans: ~A?" chn)))
	    (if (fneq amp 1.0) (snd-display (format #f ";mix-amp: ~A?" amp)))
	    (if (fneq spd 1.0) (snd-display (format #f ";mix-speed: ~A?" spd)))
	    (play-mix mix-id) 
	    (set! (mix-position mix-id) 200) 
	    (set! (mix-name mix-id) "asdf") 
	    (set! (mix-amp mix-id 0) 0.5) 
	    (set! (mix-speed mix-id) 2.0) 
	    (set! (mix-track mix-id) 3) 
	    (set! (mix-anchor mix-id) 30) 
	    (set! (mix-amp-env mix-id 0) '(0.0 0.0 1.0 1.0)) 
	    (set! (mix-tag-y mix-id) 20) 
	    (let ((pos (mix-position mix-id))
		  (spd (mix-speed mix-id))
		  (trk (mix-track mix-id))
		  (amp (mix-amp mix-id 0))
		  (nam (mix-name mix-id))
		  (my (mix-tag-y mix-id))
		  (anc (mix-anchor mix-id)))
	      (if (not (= pos 200)) (snd-display (format #f ";set-mix-position: ~A?" pos)))
	      (if (not (= my 20)) (snd-display (format #f ";set-mix-tag-y: ~A?" my)))
	      (if (not (= trk 3)) (snd-display (format #f ";set-mix-track: ~A?" trk)))
	      (if (fneq amp 0.5) (snd-display (format #f ";set-mix-amp: ~A?" amp)))
	      (if (fneq spd 2.0) (snd-display (format #f ";set-mix-speed: ~A?" spd)))
	      (if (not (= anc 30)) (snd-display (format #f ";set-mix-anchor: ~A?" anc)))
	      (if (not (equal? (mix-amp-env mix-id 0) '(0.0 0.0 1.0 1.0))) (snd-display (format #f ";set-mix-amp-env: ~A?" (mix-amp-env mix-id 0))))
	      (if (not (string=? nam "asdf")) (snd-display (format #f ";set-mix-name: ~A?" nam)))
	      (if (= mix-id (selected-mix)) (snd-display (format #f ";selected-mix: ~A?" mix-id)))
	      (set! (selected-mix) mix-id)
	      (if (not (= mix-id (selected-mix))) (snd-display (format #f ";set! select-mix: ~A ~A?" mix-id (selected-mix))))
	      (set! (selected-mix) -1)
	      (select-mix mix-id)
	      (if (not (= mix-id (selected-mix))) (snd-display (format #f ";select-mix: ~A ~A?" mix-id (selected-mix)))))
	    (make-region 0 100) 
	    (mix-region 100 0) 
	    (mix-region 200 0) 
	    (if (not (= (mix-name->id "asdf") mix-id)) (snd-display (format #f ";mix-name->id: ~A?" (mix-name->id "asdf"))))))
	(let ((mix-id (mix "oboe.snd" 100)))
	  (if (not (sound? (list mix-id))) (snd-display (format #f ";mix oboe: ~D not ok?" mix-id)))
	  (if (not (= (chans (list mix-id)) 1)) (snd-display (format #f ";mix oboe: chans ~D?" (chans (list mix-id)))))
	  (if (not (= (channels (list mix-id)) 1)) (snd-display (format #f ";mix oboe: channels ~D?" (channels (list mix-id)))))
	  (if (not (= (frames (list mix-id)) 50828)) (snd-display (format #f ";mix oboe: frames ~D?" (frames (list mix-id)))))
	  (if (not (= (srate (list mix-id)) 22050)) (snd-display (format #f ";mix oboe: srate ~D?" (srate (list mix-id)))))
	  (if (not (= (data-location (list mix-id)) 28)) (snd-display (format #f ";mix oboe: location ~D?" (data-location (list mix-id)))))
	  (if (not (= (data-format (list mix-id)) 1)) (snd-display (format #f ";mix oboe: format ~A?" (data-format (list mix-id)))))
	  (if (fneq (maxamp (list mix-id)) .14724) (snd-display (format #f ";mix oboe: maxamp ~F?" (maxamp (list mix-id)))))
	  (if (comment (list mix-id)) (snd-display (format #f ";mix oboe: comment ~A?" (comment (list mix-id)))))
	  (if (not (string=? (short-file-name (list mix-id)) "oboe.snd")) (snd-display (format #f ";mix oboe short name: ~S?" (short-file-name (list mix-id)))))
	  (let ((matches (count-matches (lambda (a) (> a .125)) 0 (list mix-id))))
	    (if (not (= matches 1313)) (snd-display (format #f ";mix count-matches: ~A?" matches))))
	  (let ((spot (find (lambda (a) (> a .13)) 0 (list mix-id))))
	    (if (or (null? spot) (not (= (cadr spot) 8862))) (snd-display (format #f ";mix find: ~A?" spot))))
	  (let ((eds (edits (list mix-id))))
	    (if (or (not (= (car eds) 0)) (not (= (cadr eds) 0)))
		(snd-display (format #f ";mix edits: ~A?" eds)))
	    (if (not (= (edit-position (list mix-id)) (car eds)))
		(snd-display (format #f ";mix edit-position: ~A ~A?" (edit-position (list mix-id)) eds))))
	  (if (provided? 'snd-new-smob)
	      (let ((samps1 (samples->vct 0 50828 (list mix-id) 0))
		    (vr (make-sample-reader 0 (list mix-id) 0 1)))
		(if (not (sample-reader? vr)) (snd-display (format #f ";(mix) ~A not sample-reader?" vr)))
		(do ((i 0 (1+ i)))
		    ((= i 50828))
		  (if (not (= (vr) (samps1 i)))
		      (snd-display (format #f ";(mix) readers disagree at ~D" i))))
		(free-sample-reader vr)))
	  (insert-sample 100 .5 (list mix-id)) 
	  (if (or (fneq (sample 100 (list mix-id)) .5)
		  (not (= (frames (list mix-id)) 50829)))
	      (snd-display (format #f ";(mix) insert-sample: ~A ~A?" (sample 100 (list mix-id)) (frames (list mix-id)))))
	  (let ((v0 (make-vector 3))
		(v1 (make-vct 3)))
	    (vct-fill! v1 .75)
	    (do ((i 0 (1+ i))) ((= i 3)) (vector-set! v0 i .25))
	    (insert-samples 200 3 v0 (list mix-id)) 
	    (insert-samples 300 3 v1 (list mix-id)) 
	    (if (or (fneq (sample 201 (list mix-id)) .25)
		    (fneq (sample 301 (list mix-id)) .75)
		    (not (= (frames (list mix-id)) 50835)))
		(snd-display (format #f ";(mix) insert-samples: ~A ~A ~A?" (sample 201 (list mix-id)) (sample 301 (list mix-id)) (frames (list mix-id))))))
	  (revert-sound (list mix-id))
	  (set! (sample 50 (list mix-id)) .5) 
	  (if (fneq (sample 50 (list mix-id)) .5) (snd-display (format #f ";(mix) set-sample: ~A?" (sample 50 (list mix-id)))))
	  (let ((v0 (make-vector 3)))
	    (do ((i 0 (1+ i))) ((= i 3)) (vector-set! v0 i .25))
	    (set! (samples 60 3 (list mix-id)) v0) 
	    (if (or (fneq (sample 60 (list mix-id)) .25) (fneq (sample 61 (list mix-id)) .25))
		(snd-display (format #f ";(mix) set-samples: ~A ~A ~A?" (sample 60 (list mix-id)) (sample 61 (list mix-id)) (sample 62 (list mix-id))))))
	  (revert-sound (list mix-id))
	  (delete-sample 100 (list mix-id)) 
	  (if (not (= (frames (list mix-id)) 50827)) (snd-display (format #f ";(mix) delete-sample: ~A?" (frames (list mix-id)))))
	  (delete-samples 0 100 (list mix-id)) 
	  (if (not (= (frames (list mix-id)) 50727)) (snd-display (format #f ";(mix) delete-samples: ~A?" (frames (list mix-id)))))
	  (revert-sound (list mix-id))
	  (let ((maxa (maxamp (list mix-id))))
	  (scale-to .5 (list mix-id)) 
	  (let ((newmaxa (maxamp (list mix-id))))
	    (if (fneq newmaxa .5) (snd-display (format #f ";(mix) scale-to: ~A?" newmaxa)))
	    (undo 1 (list mix-id)) 
	    (scale-by 2.0 (list mix-id)) 
	    (set! newmaxa (maxamp (list mix-id)))
	    (if (fneq newmaxa (* 2.0 maxa)) (snd-display (format #f ";(mix) scale-by: ~A?" newmaxa)))
	    (revert-sound (list mix-id)))))
	;; now track tests (mix.scm)
	(revert-sound new-index)
	(let ((mix-ids (make-vector 6)))
	  (do ((i 0 (1+ i)))
	      ((= i 6))
	    (vector-set! mix-ids i (mix "oboe.snd" (* i 1000))))
	  (set! (mix-track (vector-ref mix-ids 0)) 1)
	  (set! (mix-track (vector-ref mix-ids 2)) 1)
	  (set! (mix-track (vector-ref mix-ids 4)) 1)
	  (if (not (= (track-position (track 1)) 0)) (snd-display (format #f ";track-position: ~D?" (track-position (track 1)))))
	  (let* ((mr (make-track-sample-reader 1))
		 (reader-string (format #f "~A" mr)))
	      (if (not (string=? (substring reader-string 0 24) "#<track-sample-reader 0x"))
		  (snd-display (format #f ";track sample reader actually got: [~S]" (substring reader-string 0 24))))
	      (if (not (string=? (substring reader-string 31) ": /home/bil/cl/oboe.snd chan 0 via mixes '(9 11 13)>"))
		  (snd-display (format #f ";track sample reader actually got: [~S]" (substring reader-string 31))))
	      (free-track-sample-reader mr))
	  (let ((curend (track-end (track 1))))
	    (set-track-position (track 1) 500)
	    (if (not (= (track-position (track 1)) 500)) (snd-display (format #f ";set-track-position: ~D?" (track-position (track 1)))))
	    (if (not (= (mix-position (vector-ref mix-ids 0)) 500)) (snd-display (format #f ";track-position ~D = ~D?" 0 (mix-position (vector-ref mix-ids 0)))))
	    (if (not (= (mix-position (vector-ref mix-ids 1)) 1000)) (snd-display (format #f ";track-position ~D = ~D?" 1 (mix-position (vector-ref mix-ids 1)))))
	    (if (not (= (mix-position (vector-ref mix-ids 4)) 4500)) (snd-display (format #f ";track-position ~D = ~D?" 4 (mix-position (vector-ref mix-ids 4)))))
	    (if (not (= (track-end (track 1)) (+ curend 500))) (snd-display (format #f ";track-end: ~D (~D)?" (track-end (track 1)) (+ curend 500)))))
	  (if (not (= (track-length (track 1)) (+ (frames (list (vector-ref mix-ids 0))) 4000)))
	      (snd-display (format #f ";track-length: ~D (~D)?" (track-length (track 1)) (+ 4000 50828))))
	  (set-track-amp (track 1) .5)
	  (if (fneq (mix-amp (vector-ref mix-ids 2) 0) .5) (snd-display (format #f ";set-track-amp ~F?" (mix-amp (vector-ref mix-ids 2) 0))))
	  (incf-track-amp (track 1) .25)
	  (if (fneq (mix-amp (vector-ref mix-ids 4) 0) .75) (snd-display (format #f ";incf-track-amp ~F?" (mix-amp (vector-ref mix-ids 4) 0))))
	  (transpose-track (track 1) 12)
	  (if (fneq (mix-speed (vector-ref mix-ids 2)) 2.0)
	      (snd-display (format #f ";transpose-track: ~F?" (mix-speed (vector-ref mix-ids 2)))))
	  (if (not (= (frames (list (vector-ref mix-ids 1))) 50828))
	      (snd-display (format #f ";transpose-track mixup: ~D (~D)?" (frames (list (vector-ref mix-ids 1))) 50828)))
	  (set-track-tempo (track 1) 2.0)
	  (if (not (= (track-length (track 1)) (/ (+ 4000 50828) 2)))
	      (snd-display (format #f ";track-tempo: ~D (~D)?" (track-length (track 1)) (/ (+ 4000 50828) 2))))
	  (set-track-color (track 1) (make-color .8 .8 .8))
	  (set! (mix-track (vector-ref mix-ids 1)) 2)
	  (set! (mix-track (vector-ref mix-ids 3)) 2)
	  (set-track-color (track 2) (make-color .2 .8 0))
	  (let ((t2 (track->vct (track 2)))
		(t3 (mix->vct (vector-ref mix-ids 5))))
	    (if (or (fneq (vct-ref t2 1000) (vct-ref t3 1000))
		    (fneq (vct-ref t3 1000) 0.0328369))
		(snd-display (format #f ";track->vct: ~F, mix->vct: ~F (.0328369)?" (vct-ref t2 1000) (vct-ref t3 1000)))))
	  (set-track-amp-env (track 1) 0 '(0 0 1 1))
	  (filter-track (track 1) '(.1 .2 .3 .3 .2 .1))
	  (play-and-wait))
	(let ((v1 (envelope-interp 1.0 '(0 0 2.0 1.0)))
	      (v2 (envelope-interp 1.0 '(0 0.0 1 1.0 2 0.0)))
	      (v3 (envelope-interp 2.0 '(0 0.0 1 1.0)))
	      (v4 (envelope-interp 0.0 '(1 .5 2 0))))
	  (if (fneq v1 0.5) (snd-display (format #f ";envelope-interp(1): ~F (0.5)?" v1)))
	  (if (fneq v2 1.0) (snd-display (format #f ";envelope-interp(2): ~F (1.0)?" v2)))
	  (if (fneq v3 1.0) (snd-display (format #f ";envelope-interp(3): ~F (1.0)?" v3)))
	  (if (fneq v4 0.5) (snd-display (format #f ";envelope-interp(4): ~F (0.5)?" v4))))
	(let ((v1 (multiply-envelopes '(0.0 0.0 2.0 0.5) '(0.0 0.0 1.0 2.0 2.0 1.0)))
	      (v2 (window-envelope 1.0 3.0 '(0.0 0.0 5.0 1.0))))
	  (if (not (feql v1 (list 0.0 0.0 0.5 0.5 1.0 0.5))) (snd-display (format #f ";multiply-envelopes: ~A?" v1)))
	  (if (not (feql v2 (list 1.0 0.2 3.0 0.6))) (snd-display (format #f ";window-envelope: ~A?" v2))))
	(close-sound new-index))
      (let ((index (open-sound "pistol.snd"))
	    (data (samples->vct 0 100)))
	(close-sound index)
	(let ((reader (make-sample-reader 0 "pistol.snd")))
	  (do ((i 0 (1+ i)))
	      ((= i 10))
	    (if (fneq (vct-ref data i) (next-sample reader))
		(snd-display "external reader trouble")))
	  (free-sample-reader reader)))
      )
    (if (provided? 'gcing) (set! g-gc-step 0))
    (load "bird.scm")
    (time (make-birds "fmv.snd"))
    ;(play-and-wait 0 (find-sound "fmv.snd"))
    (if (provided? 'gcing) (set! g-gc-step 100))
    (close-sound (find-sound "fmv.snd"))
    (dismiss-all-dialogs)
    ))

(clear-sincs)

(define data-max
  (lambda (beg end)
    (let ((maxval 0.0))
      (scan-across-all-chans
       (lambda (data len)
	 (do ((i 0 (1+ i)))
	     ((= i len) #f)
	   (let ((curval (abs (vector-ref data i))))
	     (if (> curval maxval) (set! maxval curval))))
	 #f)
       beg end)
      maxval)))

(define data-max2
  (lambda (beg end snd)
    (let ((maxval 0.0))
      (scan-across-sound-chans
       (lambda (data len)
	 (do ((i 0 (1+ i)))
	     ((= i len) #f)
	   (let ((curval (abs (vector-ref data i))))
	     (if (> curval maxval) (set! maxval curval))))
	 #f)
       beg end snd)
      maxval)))

(define data-max1
  (lambda (beg end snd chn)
    (let ((maxval 0.0))
      (scan-chan 
       (lambda (data)
	 (let ((curval (abs data)))
	   (if (> curval maxval) (set! maxval curval))
	   #f))
       beg end snd chn)
      maxval)))

(load "marks.scm")


;;; ---------------- test 10: marks ----------------
(if (or full-test (= snd-test 10))
    (do ((test-ctr 0 (1+ test-ctr)))
	((= test-ctr tests))
      (let ((ind0 (view-sound "oboe.snd"))
	    (ind1 (view-sound "pistol.snd"))
	    (v0 (make-vct 100))
	    (vc (make-vector 10)))
	(if (procedure? trace-hook) (trace-hook 10))
	(log-mem test-ctr)
	(vct-fill! v0 .1)
	(vector-set! vc 0 (mix-vct v0 0 ind0))
	(vector-set! vc 1 (mix-vct v0 1000 ind0))
	(vector-set! vc 2 (mix-vct v0 2000 ind0))
	(vector-set! vc 3 (mix-vct v0 3000 ind0))
	(vector-set! vc 4 (mix-vct v0 4000 ind0))
	(vector-set! vc 5 (mix-vct v0 0 ind1))
	(vector-set! vc 6 (mix-vct v0 1000 ind1))
	(vector-set! vc 7 (mix-vct v0 2000 ind1))
	(vector-set! vc 8 (mix-vct v0 3000 ind1))
	(vector-set! vc 9 (mix-vct v0 4000 ind1))
	(let ((t0 (make-track 1 (list (vector-ref vc 0) (vector-ref vc 3) (vector-ref vc 5))))
	      (t1 (make-track 2 (list (vector-ref vc 2) (vector-ref vc 6) (vector-ref vc 8)))))
	  (set-track-amp t0 .5)
	  (time (transpose-track t1 3))
	  (set-track-color t1 (make-color 0 0 1))
	  (let ((t0e (track-end t0)))
	    (set-track-position t0 1000)
	    (if (not (= (track-position t0) 1000)) (snd-display (format #f ";track-position: ~A?" (track-position t0))))
	    (if (not (= (track-end t0) (+ t0e 1000))) (snd-display (format #f ";track-end: ~A ~A?" t0e (track-end t0)))))
	  (if (not (= (track-length t0) 3100)) (snd-display (format #f ";track-length: ~A?" (track-length t0))))
	  (set-track-tempo t0 2.0)
	  (if (not (provided? 'snd-nogui))
	      (let ((col (color->list (track-color t1))))
		(if (or (fneq (car col) 0.0) (fneq (cadr col) 0.0) (fneq (caddr col) 1.0))
		    (snd-display (format #f ";track-color: ~A?" col)))))
	  (if (not (= (track-length t0) 1600)) (snd-display (format #f ";track-tempo -> length: ~A?" (track-length t0)))))
	(close-sound ind0)
	(close-sound ind1)
	(set! ind0 (new-sound "fmv.snd" mus-aifc mus-bshort 22050 1 "this is a comment"))
	(let ((v0 (make-vector 10)))
	  (do ((i 0 (1+ i))) ((= i 10)) (vector-set! v0 i 1.0))
	  (insert-samples 0 10 v0 ind0) 
	  (time (env-sound '(0 0 1 1) 0 10 1.0 ind0))
	  (do ((i 0 (1+ i))) ((= i 10)) (if (fneq (sample i) (* i .1)) (snd-display (format #f ";env-sound[~D]: ~A?" i (sample i)))))
	  (undo) 
	  (env-sound (make-env '(0 0 1 1) :end 9) 0 10 1.0 ind0) 
	  (do ((i 0 (1+ i))) ((= i 10)) (if (fneq (sample i) (* i .1)) (snd-display (format #f ";env-sound[~D]: ~A?" i (sample i)))))
	  (undo) 
	  (env-sound '(0 0 .5 1 1 1) 0 10 0.0 ind0) 
	  (if (or (fneq (sample 3) 0.0) (fneq (sample 8) 1.0) )
	      (snd-display (format #f ";env-sound stepped: ~A?" (sample 3) (sample 8))))
	  (undo) 
	  (env-sound '(0 0 1 1) 0 10 32.0 ind0) 
	  (if (or (fneq (sample 3) 0.0589) (fneq (sample 8) 0.484) )
	      (snd-display (format #f ";env-sound exp: ~A ~A?" (sample 3) (sample 8))))
	  (undo) 
	  (env-sound (make-env '(0 0 1 1) :base 32.0 :end 9) 0 10 32.0 ind0) 
	  (if (or (fneq (sample 3) 0.0589) (fneq (sample 8) 0.484) )
	      (snd-display (format #f ";env-sound exp: ~A ~A?" (sample 3) (sample 8))))
	  (undo) 
	  (do ((i 1 (1+ i))) ((= i 10)) (set! (sample i) 0.0))
	  (filter-sound '(0 1 1 0) 4)
	  (if (or (fneq (sample 1) 0.3678) (fneq (sample 2) .3678) (fneq (sample 3) .132) (fneq (sample 4) 0.0))
	      (snd-display (format #f ";filter-sound env: ~A?" (samples 0 8))))
	  (undo)
	  (filter-sound '(0 1 1 0) 1024)
	  (undo)
	  (filter-sound (make-fir-filter 6 (list->vct '(.1 .2 .3 .3 .2 .1))))
	  (undo)
	  (filter-sound (make-delay 120))
	  (undo)
	  (filter-sound (make-formant .99 1200))
	  (undo)
	  (let ((vc0 (make-vct 4)))
	    (vct-set! vc0 0 .125) (vct-set! vc0 1 .25) (vct-set! vc0 2 .25) (vct-set! vc0 3 .125) 
	    (filter-sound vc0 4) 
	    (if (or (fneq (sample 0) 0.125) (fneq (sample 1) .25) (fneq (sample 2) .25) (fneq (sample 5) 0.0))
		(snd-display (format #f ";filter-sound direct: ~A?" (samples 0 8))))
	    (revert-sound)))
	(close-sound ind0)

	(set! ind0 (new-sound "fmv.snd" mus-aifc mus-bshort 22050 1 "this is a comment"))
	(let ((v0 (make-vct 10))
	      (old5 (sample 5 ind0)))
	  (vct-fill! v0 0.1)
	  (insert-samples 10 10 v0 ind0)
	  (env-sound '(0 0 1 2) 10 10 1.0 ind0)
	  (do ((i 0 (1+ i))) ((= i 10)) 
	    (if (fneq (sample (+ i 10) ind0) (* i .02)) (snd-display (format #f ";env-sound [~D]: ~A?" (+ i 10) (sample (+ i 10) ind0)))))
	  (if (fneq (sample 5 ind0) old5) (snd-display (format #f ";env-sound 5: ~A ~A?" old5 (sample 5 ind0))))
	  (undo)
	  (env-sound '(0 0 1 2) 10 10 4.0 ind0)
	  (set! v0 (samples->vct 10 10))
	  (if (or (fneq (vct-ref v0 3) 0.034) (fneq (vct-ref v0 8) .135)) (snd-display (format #f ";env-sound 4: ~A" v0)))
	  (undo)
	  (env-sound '(0 0 1 2) 10 10 .05 ind0)
	  (set! v0 (samples->vct 10 10))
	  (if (or (fneq (vct-ref v0 3) 0.125) (fneq (vct-ref v0 8) .191)) (snd-display (format #f ";env-sound 05: ~A" v0))))
	
	(close-sound ind0)
	(set! ind0 (new-sound "fmv.snd" mus-aifc mus-bshort 22050 2 "this is a comment"))
	(set! ind1 (new-sound "fmv1.snd" mus-next mus-bshort 22050 1 "this is a comment"))
	(let ((v0 (make-vector 10)))
	  (do ((i 0 (1+ i))) ((= i 10)) (vector-set! v0 i 1.0))
	  (insert-samples 0 10 v0 ind0 0) 
	  (do ((i 0 (1+ i))) ((= i 10)) (vector-set! v0 i 0.1))
	  (insert-samples 0 10 v0 ind0 1) 
	  (do ((i 0 (1+ i))) ((= i 10)) (vector-set! v0 i 0.01))
	  (insert-samples 0 10 v0 ind1 0) 
	  (let ((val (data-max1 0 9 ind0 0)))
	    (if (fneq val 1.0) (snd-display (format #f ";scan-chan[0,0]: ~A?" val))))
	  (let ((val (data-max1 0 9 ind0 1)))
	    (if (fneq val 0.1) (snd-display (format #f ";scan-chan[0,1]: ~A?" val))))
	  (let ((val (data-max1 0 9 ind1 0)))
	    (if (fneq val 0.01) (snd-display (format #f ";scan-chan[1,0]: ~A?" val))))
	  (let ((val (data-max1 0 9 #f #f)))
	    (if (fneq val 0.01) (snd-display (format #f ";scan-chans: ~A?" val))))
	  (let ((val (data-max 0 9)))
	    (if (fneq val 1.0) (snd-display (format #f ";scan-all-chans: ~A?" val))))
	  (let ((val (data-max2 0 9 ind0)))
	    (if (fneq val 1.0) (snd-display (format #f ";scan-across-sound-chans: ~A?" val)))))
	(close-sound ind0)
	(close-sound ind1)
	
	(let ((fd (open-sound "oboe.snd"))
	      (m1 (add-mark 123))
	      (sync-val (+ 1 (mark-sync-max))))
	  (if (not (mark? m1)) (snd-display ";mark?"))
	  (if (not (= (mark-sample m1) 123)) (snd-display (format #f ";add-mark: ~A? " (mark-sample m1))))
	  (if (not (eq? (without-errors (mark-sample 12345678)) 'no-such-mark)) (snd-display (format #f ";mark-sample err: ~A?" (mark-sample 12345678))))
	  (if (not (eq? (without-errors (add-mark 123 123)) 'no-such-sound)) (snd-display (format #f ";add-mark err: ~A?" (add-mark 123 123))))
	  (let ((m2 (without-errors (add-mark 12345 fd 0))))
	    (if (eq? m2 'no-such-mark) (snd-display (format #f ";add-mark failed?")))
	    (if (not (= (mark-sample m2) 12345)) (snd-display (format #f ";add-mark 0 0: ~A?" (mark-sample m2))))
	    (if (not (= (mark-sync m2) 0)) (snd-display (format #f ";init mark-sync: ~A?" (mark-sync m2))))
	    (set! (mark-sync m2) sync-val)
	    (if (not (= (mark-sync m2) sync-val)) (snd-display (format #f ";set-mark-sync (~A): ~A?" sync-val (mark-sync m2))))
	    (let* ((syncs (syncd-marks sync-val))
		   (chans (marks fd 0))
		   (samps (map mark-sample chans)))
	      (if (not (equal? syncs (list m2))) (snd-display (format #f ";syncd-marks: ~A?" syncs)))
	      (if (not (equal? chans (list m1 m2))) (snd-display (format #f ";marks: ~A?" chans)))
	      (if (not (equal? samps (list (mark-sample m1) (mark-sample m2)))) (snd-display (format #f ";map samps: ~A?" samps)))
	      (delete-samples 200 100 fd 0)
	      (set! chans (marks fd))
	      (set! samps (map mark-sample (car chans)))
	      (if (not (equal? samps (list (mark-sample m1 0) (- (mark-sample m2 0) 100)))) (snd-display (format #f ";map samps: ~A?" samps)))
	      (let ((descr (describe-mark m2)))
		(if (not (equal? descr (list (list 'mark m2 'sound fd "oboe.snd" 'channel 0) 12345 12245)))
		    (snd-display (format #f ";describe-mark: ~A?" descr))))
	      (set! (mark-sync m1) (mark-sync m2))
	      (move-syncd-marks sync-val 100)
	      (set! chans (marks fd))
	      (set! samps (map mark-sample (car chans)))
	      (if (not (equal? samps (list (+ (mark-sample m1 0) 100) (mark-sample m2 0)))) (snd-display (format #f ";syncd move samps: ~A?" samps)))
	      (set! (cursor) 500)
	      (backward-mark)
	      (if (not (= (cursor) (mark-sample m1))) (snd-display (format #f ";backward-mark: ~A?" (cursor))))
	      (forward-mark 1)
	      (if (not (= (cursor) (mark-sample m2))) (snd-display (format #f ";forward-mark: ~A?" (cursor))))
	      (delete-mark m1)
	      (set! chans (marks fd 0))
	      (if (not (equal? chans (list m2))) (snd-display (format #f ";delete-mark? ~A" chans)))
	      (undo)
	      (set! chans (marks fd 0))
	      (if (not (equal? chans (list m1 m2))) (snd-display (format #f ";delete-mark then undo? ~A" chans)))
	      (redo)
	      (if (not (string=? (mark-name m2) "")) (snd-display (format #f ";init mark-name: ~A?" (mark-name m2))))
	      (set! (mark-name m2) "hiho!")
	      (if (not (string=? (mark-name m2) "hiho!")) (snd-display (format #f ";set-mark-name: ~A?" (mark-name m2))))
	      (undo)
	      (if (not (string=? (mark-name m2) "")) (snd-display (format #f ";undo mark-name: ~A?" (mark-name m2))))
	      (redo)
	      (if (not (string=? (mark-name m2) "hiho!")) (snd-display (format #f ";redo mark-name: ~A?" (mark-name m2))))
	      (let ((m3 (find-mark "hiho!"))
		    (m4 (find-mark (mark-sample m2)))
		    (m5 (without-errors (find-mark "not-a-mark")))
		    (m6 (without-errors (find-mark 123456787)))
		    (m7 (mark-name->id "hiho!")))
		(if (not (eq? m2 m3 m4 m7)) (snd-display (format #f ";find-mark: ~A ~A ~A ~A?" m2 m3 m4 m7)))
		(if (not (eq? m5 m6 'no-such-mark)) (snd-display (format #f ";find-not-a-mark: ~A ~A?" m5 m6)))
		(set! (mark-sample m2) 2000)
		(set! m1 (add-mark 1000))
		(set! m3 (add-mark 3000))
		(set! m4 (add-mark 4000))
		(insert-samples 2500 500 (make-vct 500) fd 0)
		(set! samps (map mark-sample (marks fd 0)))
		(if (not (equal? samps '(1000 2000 3500 4500))) (snd-display (format #f ";insert ripple: ~A?" samps)))
		(set! (mark-sample m3) 300)
		(set! (cursor) 500)
		(backward-mark)
		(if (not (= (cursor) 300)) (snd-display (format #f ";sort marks: ~A?" (cursor))))
		(if (not (equal? (mark->sound m2) (list fd 0))) (snd-display (format #f ";mark->sound: ~A?" (mark->sound m2))))
		(let ((sd (open-sound "4.aiff")))
		  (set! m3 (add-mark 1000 sd 2))
		  (set! m4 (add-mark 1000 sd 3))
		  (if (not (equal? (mark->sound m3) (list sd 2))) (snd-display (format #f ";marks->sound 4: ~A?" (mark->sound m3))))
		  (close-sound sd))
		(save-marks fd)
		(close-sound fd)
		(let ((fd (open-sound "oboe.snd")))
		  (load "oboe.marks")
		  (let ((mlst (marks fd 0)))
		    (if (not (= (length mlst) 2)) (snd-display (format #f ";restore-marks: ~A?" mlst)))
		    (if (or (not (= (mark-sample (car mlst)) 123))
			    (not (= (mark-sample (cadr mlst)) 12345)))
			(snd-display (format #f ";restored-marks: ~D ~D?" (mark-sample (car mlst)) (mark-sample (cadr mlst))))))
		  (close-sound fd)))))))))


;;; ---------------- test 11: dialogs ----------------
(define env1 '(0 0 1 1))
(if (or full-test (= snd-test 11))
    (begin
      (if (procedure? trace-hook) (trace-hook 11))
     (without-errors (peaks))
     (mus-audio-describe) 
     (define-envelope "env1" '(0 1 1 0)) 
     (enved-dialog) 
     (if (fneq (env-base 'env1) 1.0) (snd-display (format #f ";env-base 'env1: ~A?" (env-base 'env1))))
     (if (fneq (env-base "env1") 1.0) (snd-display (format #f ";env-base \"env1\": ~A?" (env-base "env1"))))
     (set! (env-base 'env1) 2.0)
     (if (fneq (env-base 'env1) 2.0) (snd-display (format #f ";set-env-base 'env1: ~A?" (env-base 'env1))))
     (color-dialog) 
     (orientation-dialog) 
     (transform-dialog) 
     (file-dialog) 
     (region-dialog) 
     (without-errors (edit-header-dialog)) 
     (if (and (not (provided? 'snd-gtk))
	      (not (provided? 'snd-guile-gtk)))
	 (begin
	   ;(recorder-dialog) 
	   (set! (recorder-file) "hiho.snd")
	   (if (not (string=? (recorder-file) "hiho.snd")) (snd-display (format #f ";set-recorder-file: ~A?" (recorder-file))))
	   (set! (recorder-in-format) mus-mulaw)
	   (if (not (= (recorder-in-format) mus-mulaw)) (snd-display (format #f ";set-recorder-in-format: ~A?" (recorder-in-format))))
	   (set! (recorder-out-format) mus-mulaw)
	   (if (not (= (recorder-out-format) mus-mulaw)) (snd-display (format #f ";set-recorder-out-format: ~A?" (recorder-out-format))))
	   (set! (recorder-srate) 44100)
	   (if (not (= (recorder-srate) 44100)) (snd-display (format #f ";set-recorder-srate: ~A?" (recorder-srate))))
	   (set! (recorder-gain 0) 0.5)
	   (if (fneq (recorder-gain 0) 0.5) (snd-display (format #f ";set-recorder-gain: ~A?" (recorder-gain 0))))
	   (set! (recorder-out-amp 0) 0.5)
	   (if (> (abs (- (recorder-out-amp 0) 0.5)) .01) (snd-display (format #f ";set-recorder-out-amp: ~A?" (recorder-out-amp 0))))
	   (set! (recorder-in-amp 0 0) 0.5)
	   (if (> (abs (- (recorder-in-amp 0 0) 0.5)) .01) (snd-display (format #f ";set-recorder-in-amp: ~A?" (recorder-in-amp 0 0))))))
     (help-dialog "Test" "snd-test here") 
     (if (provided? 'snd-html)
	 (begin
	   ;; these are trying to flush out html syntax errors
	   (help-dialog "Find" "#find")
	   (help-dialog "CLM" "grfsnd.html#sndwithclm")
	   (help-dialog "Find" "snd.html#find")
	   (help-dialog "Constants" "extsnd.html#sndconstants")
	   (help-dialog "Sndinfo" "sndlib.html#sndinfo")
	   (help-dialog "Generators" "clm.html#generators")
	   ))
     (save-envelopes "hiho.env")
     (load "hiho.env")
     (if (not (equal? env1 (list 0.0 1.0 1.0 0.0))) (snd-display (format #f ";save-envelopes: ~A?" env1)))
     (delete-file "hiho.env")
     (dismiss-all-dialogs)
     (let ((ind (open-sound "oboe.snd")))
       (edit-header-dialog ind)
       (dismiss-all-dialogs)
       (close-sound ind))
     (let ((str1 (snd-help open-sound))
	   (str2 (snd-help 'open-sound))
	   (str3 (snd-help "open-sound")))
       (if (or (not (string? str1)) ; can happen if we're running -DTIMING
	       (not (string=? str1 str2))
	       (not (string=? str1 str3)))
	   (snd-display (format #f ";snd-help open-sound: ~A ~A ~A" str1 str2 str3))))
     (let ((str1 (snd-help 'hamming-window))
	   (str2 (snd-help "hamming-window")))
       (if (not (string=? str1 str2))
	   (snd-display (format #f ";snd-help hamming-window: ~A ~A" str1 str2))))
     ))

(define map-silence
  (lambda (silence replacement)
    (let ((sum-of-squares 0.0)
          (buffer (make-vector 128 0.0))
          (position 0)
          (current-sample 0)
          (chan-samples (frames)))
      (lambda (y)
	(let ((old-y (vector-ref buffer position)))
	  (set! sum-of-squares (- (+ sum-of-squares (* y y)) (* old-y old-y)))
	  (vector-set! buffer position y)
	  (set! position (1+ position))
	  (if (= position 128) (set! position 0))
	  (set! current-sample (1+ current-sample))
	  (if (> sum-of-squares silence)
	      (if (= current-sample chan-samples)
		  ;; at end return trailing samples as long as it looks like sound
		  (let ((temp-buffer (make-vector 128 0.0)))
		    (do ((i 0 (1+ i)))
			((= i 128) temp-buffer)
		      (let ((final-y (vector-ref buffer position)))
			(vector-set! temp-buffer i (if (> sum-of-squares silence) final-y 0.0))
			(set! sum-of-squares (- sum-of-squares (* final-y final-y)))
			(set! position (1+ position))
			(if (= position 128) (set! position 0)))))
		  old-y)
	      replacement))))))

(define sf-dir-files (if (string? sf-dir) (sound-files-in-directory sf-dir) #f))
(define sf-dir-len (if sf-dir-files (vector-length sf-dir-files) 0))
(define cur-dir-files (sound-files-in-directory "."))
(define cur-dir-len (vector-length cur-dir-files))
(define buffer-menu #f)

(define (remove-if p l)
  (cond ((null? l) '())
	((p (car l)) (remove-if p (cdr l)))
	(else (cons (car l) (remove-if p (cdr l))))))


;;; ---------------- test 12:  extensions etc ----------------

(define (spectral-difference snd1 snd2)
  (let* ((size (max (frames snd1) (frames snd2)))
	 (pow2 (ceiling (/ (log size) (log 2))))
	 (fftlen (inexact->exact (expt 2 pow2)))
	 (fdr1 (samples->vct 0 fftlen snd1 0))
	 (fdr2 (samples->vct 0 fftlen snd2 0))
	 (spectr1 (snd-spectrum fdr1 blackman2-window fftlen #t))
	 (spectr2 (snd-spectrum fdr2 blackman2-window fftlen #t))
	 (diff 0.0)
	 (diffs (vct-subtract! spectr1 spectr2))
	 (len (vct-length diffs)))
    (do ((i 0 (1+ i)))
	((= i len) diff)
      (set! diff (+ diff (abs (vct-ref diffs i)))))))

(define (test-spectral-difference snd1 snd2 maxok)
  (let ((s1 (open-sound snd1))
	(s2 (open-sound snd2)))
    (let ((diff (spectral-difference s1 s2)))
      (close-sound s1)
      (close-sound s2)
      (if (> diff maxok)
	  (snd-display (format #f ";translate ~A: ~A > ~A?" snd2 diff maxok))))))

(if (or full-test (= snd-test 12))
    (if sf-dir-files
	(let ((open-files '())
	      (open-ctr 0))
	  (if (procedure? trace-hook) (trace-hook 12))
	  (add-sound-file-extension "wave")
	  (do ()
	      ((= open-ctr 32))
	    (let* ((len (length open-files))
		   (open-chance (* (- 8 len) .125))
		   (close-chance (* len .125)))
	      (if (or (= len 0) (> (random 1.0) .5))
		  (let* ((choice (inexact->exact (floor (my-random sf-dir-len))))
			 (name (string-append sf-dir (vector-ref sf-dir-files choice)))
			 (ht (mus-sound-header-type name))
			 (df (mus-sound-data-format name))
			 (fd (if (or (= ht mus-raw) (= df -1)) 
				 -1 
				 (view-sound name))))
		    (if (not (= fd -1))
			(begin
			  (set! open-ctr (+ open-ctr 1))
			  (set! open-files (cons fd open-files)))))
		  (if (and (> len 0) (> (random 1.0) 0.3))
		      (let* ((choice (inexact->exact (floor (my-random (exact->inexact (length open-files))))))
			     (fd (list-ref open-files choice)))
			(close-sound fd)
			(set! open-files (remove-if (lambda (a) (= a fd)) open-files)))))))
	  (if open-files (map close-sound open-files))
	  (if (not (= (length (sounds)) 0)) (snd-display (format #f ";active-sounds: ~A?" (sounds))))
	  (let* ((name (string-append sf-dir (vector-ref sf-dir-files 0)))
		 (index (view-sound name)))
	    (if (not (string=? name (file-name index))) (snd-display (format #f ";file-name: ~A?" (file-name index))))
	    (close-sound index))
	  (let ((fd (open-raw-sound (string-append sf-dir "addf8.nh") 1 8012 mus-mulaw)))
	    (if (not (= (data-format fd) mus-mulaw)) (snd-display (format #f ";open-raw-sound: ~A?" (data-format fd))))
	    (close-sound fd))
	  (time (test-spectral-difference "oboe.snd" (string-append sf-dir "oboe.g723_24") 20.0))
	  (test-spectral-difference "oboe.snd" (string-append sf-dir "oboe.g723_40") 3.0)
	  (test-spectral-difference "oboe.snd" (string-append sf-dir "oboe.g721") 6.0)
	  (test-spectral-difference (string-append sf-dir "o2.wave") (string-append sf-dir "o2_dvi.wave") 10.0)
	  (test-spectral-difference (string-append sf-dir "wood.riff") (string-append sf-dir "wood.sds") 1.0)
	  (test-spectral-difference (string-append sf-dir "nist-10.wav") (string-append sf-dir "nist-shortpack.wav") 1.0)

	  (let ((obind (open-sound "pistol.snd")))
	    (set-reverb-funcs snd-freeverb make-snd-freeverb free-snd-freeverb)
	    (set! (reverb-scale obind) .1)
	    (set! (reverbing obind) #t)
	    (play-and-wait 0 obind)
	    (set-reverb-funcs snd-nrev make-snd-nrev free-snd-nrev)
	    (set! (reverb-length obind) 2.0)
	    (play-and-wait 0 obind)
	    (let ((delay-line #f)
		  (delay-time 0.5))
	      (set-reverb-funcs
	       (lambda (ptr invals outvals)
		 (vct-fill! outvals 0.0)
		 (vct-set! outvals 0 (delay delay-line (+ (* .75 (tap delay-line)) (vct-ref invals 0))))
		 outvals)
	       (lambda (snd chans)
		 (set! delay-line (make-delay (inexact->exact (* (srate snd) delay-time))))
		 delay-line)
	       (lambda (ptr)
		 (set! delay-line #f)
		 ptr)
	       ))
	    (play-and-wait 0 obind)
	    (set-reverb-funcs snd-nrev make-snd-nrev free-snd-nrev)
	    (close-sound obind))
	  )))

(define read-or-run
  (lambda (fil)
    (let ((val (peek-char fil)))
      (or (and val (read-char fil))
          (c-g?)
          (read-or-run fil)))))

(define execute-and-wait
  (lambda (cmd)
    (let ((fil (open-pipe cmd "r")))
      (do ((val (read-or-run fil) (read-or-run fil)))
          ((or (eq? val #t) (eof-object? val))
           (eq? val #t))
        (write-char val (current-output-port)))
      (close-pipe fil))))

(define loop-through-files
  (lambda (description make-cmd select)
    (let* ((data (if select 
		     (selection-to-temps mus-next mus-out-format) 
		     (sound-to-temps mus-next mus-out-format)))
           (input-names (temp-filenames data))
           (files (vector-length input-names))
           (output-names (make-vector files ""))
           (stopped #f))
      (do ((i 0 (1+ i)))
          ((or stopped (= i files)))
        (vector-set! output-names i (string-append (tmpnam) ".snd"))
        (set! stopped (execute-and-wait (make-cmd (vector-ref input-names i) (vector-ref output-names i)))))
      (if select 
	  (temps-to-sound data output-names description)
	  (temps-to-selection data output-names description)))))

(define copyfile-1
  (lambda (select)
    (loop-through-files
      "(cp)"
      (lambda (in out)
        (string-append "cp " in " " out))
      select)))

(define sndxtest
   (lambda ()
     (let ((data (selection-to-temp)))
       (if data
           (let* ((str "")
                  (input-names (temp-filenames data))
                  (output-name (string-append (tmpnam) ".snd"))
                  (cmd (string-append "./sndxtest \"" (vector-ref input-names 0) "\" \"" output-name "\""))
                  (fil (open-pipe cmd "r")))
             (do ((val (read-char fil) (read-char fil))) 
                 ((eof-object? val))
               (set! str (string-append str (string val))))
             (close-pipe fil)
             (temp-to-selection data output-name "(sndxtest)")
             str)
           (report-in-minibuffer "no current selection")))))

(define clm-fm-violin
  (lambda (dur frq amp)
    (let* ((beg (/ (cursor) (srate)))
           (fmv-call (string-append "(fm-violin "
                                    (number->string beg) " "
                                    (number->string dur) " "
                                    (number->string frq) " "
                                    (number->string amp) ")")))
      (loop-through-files
       fmv-call
       (lambda (in out)
       (string-append
        "lisp -I clm.dxl "
        "-e '(progn (restart-clm) "
        "      (with-sound (:play nil :output \"" out "\") "
        "        (mix \"" in "\") "
                 fmv-call
        "        ) (exit))'"))
       #f))))

(define histogram
  (add-transform "histogram" "bins" 0.0 1.0 
		 (lambda (len fd)
		   (let ((v (make-vct len))
			 (steps (/ len 16))
			 (step (/ 1.0 len)))
		     (vct-fill! v 0.0)
		     (do ((i 0 (1+ i)))
			 ((= i len) v)
		       (let* ((val (next-sample fd))
			      (bin (inexact->exact (* (abs val) 16.0))))
			 (do ((j 0 (1+ j)))
			     ((= j steps))
			   (vct-set! v (+ j bin) (+ step (vct-ref v (+ j bin)))))))))))

  (defmacro carg0 (hook)
    `(let ((str (with-output-to-string (lambda () (display (hook->list ,hook))))))
       (if (not (string=? str "(#<procedure arg0 (() 32)>)"))
	   (snd-display (format #f ";~A: ~A?" ',hook str)))))

  (defmacro carg1 (hook)
    `(let ((str (with-output-to-string (lambda () (display (hook->list ,hook))))))
       (if (not (string=? str "(#<procedure arg1 ((n) (+ n 32))>)"))
	   (snd-display (format #f ";~A: ~A?" ',hook str)))))

  (defmacro carg2 (hook)
    `(let ((str (with-output-to-string (lambda () (display (hook->list ,hook))))))
       (if (not (string=? str "(#<procedure arg2 ((n m) (+ n m 32))>)"))
	   (snd-display (format #f ";~A: ~A?" ',hook str)))))
  
  (defmacro carg3 (hook)
    `(let ((str (with-output-to-string (lambda () (display (hook->list ,hook))))))
       (if (not (string=? str "(#<procedure arg3 ((a b c) (+ a b c 32))>)"))
	   (snd-display (format #f ";~A: ~A?" ',hook str)))))

  (defmacro carg4 (hook)
    `(let ((str (with-output-to-string (lambda () (display (hook->list ,hook))))))
       (if (not (string=? str "(#<procedure arg4 ((a b c d) (+ a b c d 32))>)"))
	   (snd-display (format #f ";~A: ~A?" ',hook str)))))
  
  (defmacro carg5 (hook)
    `(let ((str (with-output-to-string (lambda () (display (hook->list ,hook))))))
       (if (not (string=? str "(#<procedure arg5 ((a b c d e) (list 0 0 1 1))>)"))
	   (snd-display (format #f ";~A: ~A?" ',hook str)))))
  
  (defmacro carg6 (hook)
    `(let ((str (with-output-to-string (lambda () (display (hook->list ,hook))))))
       (if (not (string=? str "(#<procedure arg6 ((a b c d e f) (+ a b c d e f 32))>)"))
	   (snd-display (format #f ";~A: ~A?" ',hook str)))))

(define (test-hooks)
  (define (arg0) 32)
  (define (arg1 n) (+ n 32))
  (define (arg2 n m) (+ n m 32))
  (define (arg3 a b c) (+ a b c 32))
  (define (arg4 a b c d) (+ a b c d 32))
  (define (arg5 a b c d e) (list 0 0 1 1))
  (define (arg6 a b c d e f) (+ a b c d e f 32))

  (reset-hook! after-graph-hook) (add-hook! after-graph-hook arg2) (carg2 after-graph-hook) (reset-hook! after-graph-hook)
  (reset-hook! lisp-graph-hook) (add-hook! lisp-graph-hook arg2) (carg2 lisp-graph-hook) (reset-hook! lisp-graph-hook)
  (reset-hook! before-fft-hook) (add-hook! before-fft-hook arg2) (carg2 before-fft-hook) (reset-hook! before-fft-hook)
  (reset-hook! mix-position-changed-hook) (add-hook! mix-position-changed-hook arg2) (carg2 mix-position-changed-hook) (reset-hook! mix-position-changed-hook)
  (reset-hook! stop-playing-channel-hook) (add-hook! stop-playing-channel-hook arg2) (carg2 stop-playing-channel-hook) (reset-hook! stop-playing-channel-hook)
  (reset-hook! save-hook) (add-hook! save-hook arg2) (carg2 save-hook) (reset-hook! save-hook)
  (reset-hook! mus-error-hook) (add-hook! mus-error-hook arg2) (carg2 mus-error-hook) (reset-hook! mus-error-hook)
  (reset-hook! mouse-enter-graph-hook) (add-hook! mouse-enter-graph-hook arg2) (carg2 mouse-enter-graph-hook) (reset-hook! mouse-enter-graph-hook)
  (reset-hook! mouse-leave-graph-hook) (add-hook! mouse-leave-graph-hook arg2) (carg2 mouse-leave-graph-hook) (reset-hook! mouse-leave-graph-hook)
  (reset-hook! open-raw-sound-hook) (add-hook! open-raw-sound-hook arg2) (carg2 open-raw-sound-hook) (reset-hook! open-raw-sound-hook)
  (reset-hook! select-channel-hook) (add-hook! select-channel-hook arg2) (carg2 select-channel-hook) (reset-hook! select-channel-hook)

  (reset-hook! after-open-hook) (add-hook! after-open-hook arg1) (carg1 after-open-hook) (reset-hook! after-open-hook)
  (reset-hook! close-hook) (add-hook! close-hook arg1) (carg1 close-hook) (reset-hook! close-hook)
  (reset-hook! drop-hook) (add-hook! drop-hook arg1) (carg1 drop-hook) (reset-hook! drop-hook)
  (reset-hook! just-sounds-hook) (add-hook! just-sounds-hook arg1) (carg1 just-sounds-hook) (reset-hook! just-sounds-hook)
  (reset-hook! mark-click-hook) (add-hook! mark-click-hook arg1) (carg1 mark-click-hook) (reset-hook! mark-click-hook)
  (reset-hook! mark-drag-hook) (add-hook! mark-drag-hook arg1) (carg1 mark-drag-hook) (reset-hook! mark-drag-hook)
  (reset-hook! mix-amp-changed-hook) (add-hook! mix-amp-changed-hook arg1) (carg1 mix-amp-changed-hook) (reset-hook! mix-amp-changed-hook)
  (reset-hook! mix-speed-changed-hook) (add-hook! mix-speed-changed-hook arg1) (carg1 mix-speed-changed-hook) (reset-hook! mix-speed-changed-hook)
  (reset-hook! name-click-hook) (add-hook! name-click-hook arg1) (carg1 name-click-hook) (reset-hook! name-click-hook)
  (reset-hook! open-hook) (add-hook! open-hook arg1) (carg1 open-hook) (reset-hook! open-hook)
  (reset-hook! output-comment-hook) (add-hook! output-comment-hook arg1) (carg1 output-comment-hook) (reset-hook! output-comment-hook)
  (reset-hook! multichannel-mix-hook) (add-hook! multichannel-mix-hook arg1) (carg1 multichannel-mix-hook) (reset-hook! multichannel-mix-hook)
  (reset-hook! play-hook) (add-hook! play-hook arg1) (carg1 play-hook) (reset-hook! play-hook)
  (reset-hook! snd-error-hook) (add-hook! snd-error-hook arg1) (carg1 snd-error-hook) (reset-hook! snd-error-hook)
  (reset-hook! snd-warning-hook) (add-hook! snd-warning-hook arg1) (carg1 snd-warning-hook) (reset-hook! snd-warning-hook)
  (reset-hook! start-hook) (add-hook! start-hook arg1) (carg1 start-hook) (reset-hook! start-hook)
  (reset-hook! start-playing-hook) (add-hook! start-playing-hook arg1) (carg1 start-playing-hook) (reset-hook! start-playing-hook)
  (reset-hook! stop-playing-hook) (add-hook! stop-playing-hook arg1) (carg1 stop-playing-hook) (reset-hook! stop-playing-hook)
  (reset-hook! stop-playing-region-hook) (add-hook! stop-playing-region-hook arg1) (carg1 stop-playing-region-hook) (reset-hook! stop-playing-region-hook)
  (reset-hook! mouse-enter-listener-hook) (add-hook! mouse-enter-listener-hook arg1) (carg1 mouse-enter-listener-hook) (reset-hook! mouse-enter-listener-hook)
  (reset-hook! mouse-leave-listener-hook) (add-hook! mouse-leave-listener-hook arg1) (carg1 mouse-leave-listener-hook) (reset-hook! mouse-leave-listener-hook)
  (reset-hook! property-changed-hook) (add-hook! property-changed-hook arg1) (carg1 property-changed-hook) (reset-hook! property-changed-hook)
  (reset-hook! select-sound-hook) (add-hook! select-sound-hook arg1) (carg1 select-sound-hook) (reset-hook! select-sound-hook)
  (reset-hook! select-region-hook) (add-hook! select-region-hook arg1) (carg1 select-region-hook) (reset-hook! select-region-hook)
  (reset-hook! select-mix-hook) (add-hook! select-mix-hook arg1) (carg1 select-mix-hook) (reset-hook! select-mix-hook)

  (reset-hook! exit-hook) (add-hook! exit-hook arg0) (carg0 exit-hook) (reset-hook! exit-hook)
  (reset-hook! output-name-hook) (add-hook! output-name-hook arg0) (carg0 output-name-hook) (reset-hook! output-name-hook)

  (reset-hook! during-open-hook) (add-hook! during-open-hook arg3) (carg3 during-open-hook) (reset-hook! during-open-hook)
  (reset-hook! fft-hook) (add-hook! fft-hook arg3) (carg3 fft-hook) (reset-hook! fft-hook)
  (reset-hook! mouse-enter-label-hook) (add-hook! mouse-enter-label-hook arg3) (carg3 mouse-enter-label-hook) (reset-hook! mouse-enter-label-hook)
  (reset-hook! mouse-leave-label-hook) (add-hook! mouse-leave-label-hook arg3) (carg3 mouse-leave-label-hook) (reset-hook! mouse-leave-label-hook)
  (reset-hook! initial-graph-hook) (add-hook! initial-graph-hook arg3) (carg3 initial-graph-hook) (reset-hook! initial-graph-hook)

  (reset-hook! graph-hook) (add-hook! graph-hook arg4) (carg4 graph-hook) (reset-hook! graph-hook)
  (reset-hook! key-press-hook) (add-hook! key-press-hook arg4) (carg4 key-press-hook) (reset-hook! key-press-hook)

  (reset-hook! mouse-drag-hook) (add-hook! mouse-drag-hook arg6) (carg6 mouse-drag-hook) (reset-hook! mouse-drag-hook)
  (reset-hook! mouse-press-hook) (add-hook! mouse-press-hook arg6) (carg6 mouse-press-hook) (reset-hook! mouse-press-hook)
  (reset-hook! mouse-release-hook) (add-hook! mouse-release-hook arg6) (carg6 mouse-release-hook) (reset-hook! mouse-release-hook)

  (reset-hook! enved-hook) (add-hook! enved-hook arg5) (carg5 enved-hook) (reset-hook! enved-hook)

  )
  
;;; ---------------- test 13: menus, edit lists, hooks, seach/key funcs ----------------

(if (or full-test (= snd-test 13))
    (let ((fd (view-sound "oboe.snd"))
	  (mb (add-to-main-menu "clm")))
      (if (procedure? trace-hook) (trace-hook 13))
      (set! (cursor fd) 2000)
      (set! (fft-style) normal-fft)
      (set! (ffting fd) #t)
      (add-to-menu mb "fm-violin" (lambda () (if (sound?) (clm-fm-violin .1 660 .1))))
      (add-to-menu mb "not here" (lambda () (snd-display ";oops")))
      (set! (menu-sensitive mb "not here") #f)
      (if (menu-sensitive mb "not here") (snd-display ";menu-sensitive?"))
      (remove-from-menu mb "not here")
      (add-to-menu 3 "Denoise" (lambda () (report-in-minibuffer "denoise")))
      (change-menu-label 3 "Denoise" "hiho")
      (if include-clm
	  (begin
	    (clm-fm-violin .1 660 .1)
	    (play-and-wait)))
      (let ((fr (frames fd))
	    (chn (chans fd))
	    (sr (srate fd))
	    (mx (maxamp fd)))
	(copyfile-1 #f)
	(if (not (equal? (edit-fragment) '("(cp)" "set" 0 50828))) (snd-display (format #f ";copyfile-1: ~A?" (edit-fragment))))
	(if (or (not (= fr (frames fd)))
		(not (= chn (chans fd)))
		(fneq mx (maxamp fd))
		(fneq sr (srate fd)))
	    (snd-display (format #f ";copyfile(1): ~A ~A ~A ~A?" (frames fd) (chans fd) (srate fd) (maxamp fd))))
	(let ((eds (edits)))
	  (preload-file "oboe.snd")
	  (preload-directory ".")
	  (select-all)
	  (copyfile-1 #t)
	  (if (not (equal? (edit-fragment) '("(cp)" "set" 0 50828))) (snd-display (format #f ";copyfile-1 (select): ~A?" (edit-fragment))))
	  (if (not (equal? (edits) (list (+ (car eds) 1) (cadr eds)))) (snd-display (format #f ";copyfile-1 (select eds): ~A ~A?" eds (edits))))
	  (if (or (not (= fr (frames fd)))
		  (not (= chn (chans fd)))
		  (fneq mx (maxamp fd))
		  (fneq sr (srate fd)))
	      (snd-display (format #f ";copyfile(2): ~A ~A ~A ~A?" (frames fd) (chans fd) (srate fd) (maxamp fd))))))
      
      (update-fft fd)
      (let ((v0 (transform-samples->vct fd))
	    (vc (transform-samples fd))
	    (val (transform-sample 50 0 fd)))
	(if (and v0 vc)
	    (begin
	      (if (fneq val (vector-ref vc 50)) (snd-display (format #f ";transform-sample: ~A ~A?" val (vector-ref vc 50))))
	      (do ((i 0 (1+ i))) ((= i 100)) 
		(if (fneq (vector-ref vc i) (vct-ref v0 i)) 
		    (snd-display (format #f ";transform-samples[~D]: ~A ~A?" i (vector-ref vc i) (vct-ref v0 i))))))
	    (snd-display (format #f ";fft not ready yet: ~A ~A" v0 vc))))

      (close-sound fd)
      (set! fd (open-sound "2.snd"))
      (let ((fr (frames fd))
	    (chn (chans fd))
	    (sr (srate fd))
	    (mx0 (maxamp fd 0))
	    (mx1 (maxamp fd 1)))
	(set! (sync fd) 1)
	(select-all)
	(sndxtest)
	(if (or (not (= fr (frames fd)))
		(not (= chn (chans fd)))
		(fneq (* 2.0 mx0) (maxamp fd 0))
		(fneq (* 2.0 mx1) (maxamp fd 1))
		(fneq sr (srate fd)))
	    (snd-display (format #f ";sndxtest(2): ~A ~A ~A (~A ~A) (~A ~A)?" (frames fd) (chans fd) (srate fd) mx0 (maxamp fd 0) mx1 (maxamp fd 1))))
	(close-sound fd))

      (set! fd (open-sound "obtest.snd"))
      (let ((fr (frames fd))
	    (chn (chans fd))
	    (sr (srate fd))
	    (mx (maxamp fd)))
	(select-all)
	(sndxtest)
	(if (or (not (= fr (frames fd)))
		(not (= chn (chans fd)))
		(fneq (* 2.0 mx) (maxamp fd))
		(fneq sr (srate fd)))
	    (snd-display (format #f ";sndxtest: ~A ~A ~A ~A?" (frames fd) (chans fd) (srate fd) (maxamp fd))))
	(revert-sound fd))
      (let* ((reg (make-region 10000 10020 fd))
	     (new-data (region-samples->vct))
	     (old-data (samples->vct 10030 20 fd)))
	(sndxtest)
	(let ((newer-data (samples->vct 10000 21 fd))
	      (new-old-data (samples->vct 10030 20 fd)))
	  (vct-scale! newer-data 0.5)
	  (if (not (vequal newer-data new-data))
	      (snd-display (format #f ";sndxtest new: ~A ~A" new-data newer-data)))
	  (if (not (vequal old-data new-old-data))
	      (snd-display (format #f ";sndxtest old: ~A ~A" old-data new-old-data)))))
      (revert-sound fd)

      (let ((names (short-file-name #t)))
	(change-property "SND_VERSION" "WM_NAME"
			 (format #f "snd (~A)~A"
				 (strftime "%d-%b %H:%M %Z" (localtime (current-time)))
				 (if (null? names)
				     ""
				     (format #f ":~{~A~^, ~}" names)))))
      (load "effects.scm")
      (add-hook! menu-hook
		 (lambda (name option)
		   (if (and (string=? name "File")
			    (string=? option "Exit"))
		       (begin
			 (snd-display ";no exit!")
			 #f)
		       #t))) ; #t to make sure other menu items remain active
      (let ((ctr 0))
	(add-hook! menu-hook
		   (lambda (name option)
		     (if (and (string=? name "Options")
			      (or (string=? option "Show stats")
				  (string=? option "Ignore stats")))
			 (begin
			   (set! ctr (+ ctr 1))
			   #f)
			 #t)))
	(add-hook! menu-hook
		   (lambda (name option)
		     (if (and (string=? name "Options")
			      (string=? option "Save options"))
			 (begin
			   (set! ctr (+ ctr 1))
			   #f)
			 #t)))
	(add-hook! menu-hook
		   (lambda (name option)
		     (if (and (string=? name "View")
			      (string=? option "Files"))
			 (set! ctr (+ ctr 1)))
		     #t))
	(add-hook! menu-hook
		   (lambda (name option)
		     (if (and (string=? name "Effects")
			      (string=? option "invert"))
			 (set! ctr (+ ctr 1)))
		     #t))
	(without-errors
	 (test-menus)) ; built-in self-test function
	(revert-sound fd)
	(close-sound fd)
	(if (not (= ctr 4)) (snd-display (format #f ";ctr after test-menus: ~A? " ctr)))
	(reset-hook! menu-hook))

      (test-hooks)
      (let ((ind (open-sound "oboe.snd")))
	(set! (search-procedure ind) (lambda (n) (> n .1)))
	(key (char->integer #\a) 4 ind 0)
	(if (not (= (cursor ind 0) 0))
	    (snd-display (format #f ";C-a cursor: ~D?" (cursor ind 0))))
	(key (char->integer #\s) 4 ind 0)
	(key (char->integer #\s) 4 ind 0)
	(if (not (= (cursor ind 0) 4423))
	    (snd-display (format #f ";search-procedure C-s C-s cursor: ~D?" (cursor ind 0))))
	(let ((str (with-output-to-string (lambda () (display (search-procedure ind))))))
	  (if (not (string=? str "#<procedure #f ((n) (> n 0.1))>"))
	      (snd-display (format #f ";search-procedure: ~A?" str))))
	(reset-hook! (edit-hook ind 0))
	(add-hook! (edit-hook ind 0) (lambda () (+ snd chn)))
	(let ((str (with-output-to-string (lambda () (display (hook->list (edit-hook ind 0)))))))
	  (if (not (string=? str "(#<procedure #f (() (+ snd chn))>)"))
	      (snd-display (format #f ";edit-hook: ~A?" str))))
	(reset-hook! (edit-hook ind 0))
	(reset-hook! (undo-hook ind 0))
	(add-hook! (undo-hook ind 0) (lambda () (+ snd chn)))
	(let ((str (with-output-to-string (lambda () (display (hook->list (undo-hook ind 0)))))))
	  (if (not (string=? str "(#<procedure #f (() (+ snd chn))>)"))
	      (snd-display (format #f ";undo-hook: ~A?" str))))
	(reset-hook! (undo-hook ind 0))
	(close-sound ind)
	)

      (set! (use-raw-defaults) #f)
      (add-hook! open-raw-sound-hook (lambda (file choices) (list 1 22050 mus-bshort)))
      (let ((ind (open-sound "../sf/addf8.nh")))
	(play-and-wait 0 ind)
	(reset-hook! open-raw-sound-hook)
	(if (or (not (= (chans ind) 1))
		(not (= (srate ind) 22050))
		(not (= (data-format ind) mus-bshort)))
	    (snd-display (format #f ";open-raw: ~A ~A ~A" (chans ind) (srate ind) (data-format ind))))
	(close-sound ind))

      (let ((ind #f)
	    (op #f)
	    (sl #f)
	    (aop #f)
	    (dop #f)
	    (cl #f)
	    (ig #f)
	    (scl #f)
	    (other #f))
	(add-hook! open-hook 
		   (lambda (filename)
		     (if (not (string=? filename (mus-expand-filename "oboe.snd")))
			 (snd-display (format #f ";open-hook: ~A?" filename)))
		     (set! op #t)))
	(add-hook! after-open-hook 
		   (lambda (snd)
		     (set! aop snd)))
	(add-hook! during-open-hook 
		   (lambda (fd filename reason)
		     (set! dop #t)
		     (if (not (string=? filename (mus-expand-filename "oboe.snd")))
			 (snd-display (format #f ";during-open-hook filename: ~A?" filename)))
		     (if (not (= reason 1))
			 (snd-display (format #f ";during-open-hook reason: ~A?" reason)))))
	(add-hook! initial-graph-hook
		   (lambda (snd chn dur)
		     (if (not (= chn 0))
			 (snd-display (format #f ";initial-graph-hook (channel): ~A not 0?" chn)))
		     (set! ig #t)
		     #f))

	(set! ind (open-sound "oboe.snd"))

	(if (not op) (snd-display ";open-hook not called?"))
	(if (not dop) (snd-display ";during-open-hook not called?"))
	(if (not ig) (snd-display ";initial-graph-hook not called?"))
	(if (not (number? aop)) (snd-display ";after-open-hook not called?"))
	(if (not (= aop ind)) (snd-display (format #f ";after-open-hook ~A but ind: ~A?" snd ind)))
	(reset-hook! open-hook)
	(reset-hook! during-open-hook)
	(reset-hook! after-open-hook)
	(reset-hook! initial-graph-hook)

	(let ((gr #f)
	      (agr #f))
	  (add-hook! graph-hook
		     (lambda (snd chn y0 y1)
		       (if (not (= snd ind))
			   (snd-display (format #f ";graph-hook: ~A not ~A?" snd ind)))
		       (if (not (= chn 0))
			   (snd-display (format #f ";graph-hook (channel): ~A not 0?" chn)))
		       (set! gr #t)))
	  (add-hook! after-graph-hook
		     (lambda (snd chn)
		       (if (not (= snd ind))
			   (snd-display (format #f ";after-graph-hook: ~A not ~A?" snd ind)))
		       (if (not (= chn 0))
			   (snd-display (format #f ";after-graph-hook (channel): ~A not 0?" chn)))
		       (set! agr #t)))
	  (update-graph ind 0)
	  (if (not gr) (snd-display ";graph-hook not called?"))
	  (if (not agr) (snd-display ";after-graph-hook not called?"))
	  (reset-hook! graph-hook)
	  (reset-hook! after-graph-hook))

	(set! other (open-sound "pistol.snd"))
	
	(add-hook! select-sound-hook 
		   (lambda (snd) 
		     (if (not (= snd ind))
			 (snd-display (format #f ";select-sound-hook: ~A not ~A?" snd ind)))
		     (set! sl #t)))
	(add-hook! select-channel-hook 
		   (lambda (snd chn) 
		     (if (not (= snd ind))
			 (snd-display (format #f ";select-channel-hook: ~A not ~A?" snd ind)))
		     (if (not (= chn 0))
			 (snd-display (format #f ";select-channel-hook (channel): ~A not 0?" chn)))
		     (set! scl #t)))

	(select-sound ind)
	(if (not sl) (snd-display ";select-sound-hook not called?"))
	(if (not scl) (snd-display ";select-channel-hook not called?"))
	(reset-hook! select-sound-hook)
	(reset-hook! select-channel-hook)

	(let ((spl #f)
	      (stl #f)
	      (ph #f)
	      (pc #f))
	  (add-hook! start-playing-hook
		     (lambda (snd)
		       (if (not (= snd ind))
			   (snd-display (format #f ";start-playing-hook: ~A not ~A?" snd ind)))
		       (set! spl #t)))
	  (add-hook! stop-playing-hook
		     (lambda (snd)
		       (if (not (= snd ind))
			   (snd-display (format #f ";stop-playing-hook: ~A not ~A?" snd ind)))
		       (set! stl #t)))
	  (add-hook! stop-playing-channel-hook
		     (lambda (snd chn)
		       (if (not (= snd ind))
			   (snd-display (format #f ";stop-playing-channel-hook: ~A not ~A?" snd ind)))
		       (if (not (= chn 0))
			   (snd-display (format #f ";stop-playing-channel-hook (channel): ~A not 0?" chn)))
		       (set! pc #t)))
	  (add-hook! play-hook
		     (lambda (n)
		       (if (< n 128)
			   (snd-display (format #f ";play-hook samps: ~A?" n)))
		       (set! ph #t)))

	  (play-and-wait 0 ind)

	  (if (not spl) (snd-display ";start-playing-hook not called?"))
	  (if (not stl) (snd-display ";stop-playing-hook not called?"))
	  (if (not pc) (snd-display ";stop-playing-channel-hook not called?"))
	  (if (not ph) (snd-display ";play-hook not called?"))
	  (reset-hook! start-playing-hook)
	  (reset-hook! stop-playing-hook)
	  (reset-hook! stop-playing-channel-hook)
	  (reset-hook! play-hook)

	  ;; stop-playing-region-hook
	  ;;   what about start-playing-region-hook?
	  )

	(let ((e0 #f)
	      (e1 #f)
	      (u0 #f)
	      (u1 #f))
	  (add-hook! (edit-hook ind 0) 
		     (lambda ()
		       (set! e0 #t)
		       #t))
	  (add-hook! (edit-hook other 0) 
		     (lambda ()
		       (set! e1 #t)
		       #f))
	  (add-hook! (undo-hook ind 0) 
		     (lambda ()
		       (set! u0 #t)))
	  (add-hook! (undo-hook other 0) 
		     (lambda ()
		       (set! u1 #t)))
	  
	  ;; edit of ind should be disallowed, but not other
	  (delete-sample 0 ind 0)
	  (if (not (= (edit-position ind 0) 0))
	      (snd-display ";edit-hook #t didn't disallow edit!"))
	  (if (not e0) (snd-display ";edit-hook #t not called?"))
	  (undo 1 ind 0)
	  (if u0 (snd-display ";undo-hook called?"))
	  
	  (delete-sample 0 other 0)
	  (if (not (= (edit-position other 0) 1))
	      (snd-display ";edit-hook #f didn't allow edit!"))
	  (if (not e1) (snd-display ";edit-hook #f not called?"))
	  (undo 1 other 0)
	  (if (not u1) (snd-display ";undo-hook not called?"))

	  (reset-hook! (edit-hook ind 0))
	  (reset-hook! (edit-hook other 0))
	  (reset-hook! (undo-hook ind 0))
	  (reset-hook! (undo-hook other 0)))

	(let ((se #f)
	      (sw #f)
	      (me #f))
	  (add-hook! snd-error-hook
		     (lambda (msg)
		       (set! se #t)
		       #t))
	  (add-hook! snd-warning-hook
		     (lambda (msg)
		       (set! sw #t)
		       #t))
	  (add-hook! mus-error-hook
		     (lambda (typ msg)
		       (set! me #t)
		       #t))

	  (snd-error "uhoh")
	  (snd-warning "hiho")
	  (mus-sound-samples "/bad/baddy")
	  
	  (if (not se) (snd-display ";snd-error-hook not called?"))
	  (if (not sw) (snd-display ";snd-warning-hook not called?"))
	  (if (not me) (snd-display ";mus-error-hook not called?"))
	  (reset-hook! snd-error-hook)
	  (reset-hook! snd-warning-hook)
	  (reset-hook! mus-error-hook))

	(add-hook! exit-hook (lambda () #f))
	(add-hook! exit-hook (lambda () #t))
	(add-hook! exit-hook (lambda () #f))
	(exit)
	(reset-hook! exit-hook)

	(let ((sh #f))
	  (if (file-exists? "baddy.snd") (delete-file "baddy.snd"))
	  (add-hook! save-hook
		     (lambda (snd filename)
		       (if (or (not (string? filename))
			       (not (string=? filename (mus-expand-filename "baddy.snd"))))
			   (snd-display (format #f ";save-hook filename: ~A?" filename)))
		       (if (not (= snd ind))
			   (snd-display (format #f ";save-hook snd: ~A ~A?" snd ind)))
		       (set! sh #t)
		       #t))
	  (save-sound-as "baddy.snd" ind)
	  (if (not sh) (snd-display ";save-hook not called?"))
	  (if (file-exists? "baddy.snd")
	      (begin
		(snd-display ";save-hook didn't cancel save?")
		(delete-file "baddy.snd")))
	  (reset-hook! save-hook))

	;; fft-hooks require some way to force the fft to run to completion
	;; property-changed hook is similar (seems to happen whenever it's good and ready)
	
	(add-hook! close-hook
		   (lambda (snd)
		     (if (not (= snd ind))
			 (snd-display (format #f ";close-hook: ~A not ~A?" snd ind)))
		     (set! cl #t)))
	
	(close-sound ind)
	(if (not cl) (snd-display ";close-hook not called?"))
	(reset-hook! close-hook)
	(close-sound other))
      ))


(define test-panel
  (lambda (func name)
    (define next-case 
      (lambda (snd)
	(if (< snd (max-sounds))
	    (if (sound? snd)
		(cons (func snd) (next-case (1+ snd)))
		(next-case (1+ snd)))
	    '())))
    (if (not (feql (func #t) (next-case 0)))
	(snd-display (format #f ";test-panel ~A: ~A ~A?" name (func #t) (next-case 0))))))

(define test-channel
  (lambda (func name)
    (define next-chan
      (lambda (snd chn)
	(if (< chn (channels snd))
	    (cons (func snd chn) (next-chan snd (1+ chn)))
	    '())))
    (define next-snd-case 
      (lambda (snd)
	(if (< snd (max-sounds))
	    (if (sound? snd)
		(cons (next-chan snd 0) (next-snd-case (1+ snd)))
		(next-snd-case (1+ snd)))
	    '())))
    (if (not (equal? (func #t #t) (next-snd-case 0)))
	(snd-display (format #f ";test-channel ~A: ~A ~A?" name (func #t #t) (next-snd-case 0))))))

(define duration 
  (lambda (ind)
    (/ (frames ind) (srate ind))))

(define outputs (make-vector 24))
(define delay-line #f)
(define delay-time 0.5)
(define rev-funcs-set #f)

(define (safe-make-region beg end snd)
  (let ((len (frames snd)))
    ;(snd-display (format #f "make ~D ~D " beg end))
    (if (> len 1)
	(if (< end len)
	    (make-region beg end snd)
	    (if (< beg len)
		(make-region beg (1- len) snd)
		(make-region 0 (1- len) snd))))))

;;; ---------------- test 14: all together now ----------------
(define test14-file #f)

(if (or full-test (= snd-test 14))
    (let* ((stereo-files '())
	   (quad-files '())
	   (mono-files '())
	   (octo-files '())
	   (open-files '())
	   (s8-snd (if (file-exists? "s8.snd") "s8.snd" "oboe.snd"))
	   (open-ctr 0))
      (if (procedure? trace-hook) (trace-hook 14))
      (do ((i 0 (1+ i)))
	  ((= i cur-dir-len))
	(let* ((name (vector-ref cur-dir-files i))
	       (ht (mus-sound-header-type name))
	       (df (mus-sound-data-format name))
	       (chans (mus-sound-chans name)))
	  (if (and (not (= ht mus-raw))
		   (not (= df -1)))
	      (if (= chans 1)
		  (set! mono-files (cons name mono-files))
		(if (= chans 2)
		    (set! stereo-files (cons name stereo-files))
		  (if (= chans 4)
		      (set! quad-files (cons name quad-files))
		    (if (= chans 8)
			(set! octo-files (cons name octo-files)))))))))
      
      (set! buffer-menu (add-to-main-menu "Buffers"))  
      (add-hook! open-hook open-buffer)
      (add-hook! close-hook close-buffer)
      
      (do ((test-ctr 0 (1+ test-ctr)))
	  ((= test-ctr tests))
	(if (> (length open-files) 8)
	    (begin
	      (map close-sound open-files)
	      (set! open-files '())))
	(log-mem test-ctr)
	(let* ((len (length open-files))
	       (open-chance (max 0.0 (* (- 8 len) .125)))
	       (close-chance (* len .125)))
	  (if (or (= len 0) (rs open-chance))
	      (let* ((choice (my-random cur-dir-len))
		     (name (vector-ref cur-dir-files choice))
		     (ht (mus-sound-header-type name))
		     (df (mus-sound-data-format name))
		     (fd (if (or (= ht mus-raw) (= df -1)) -1 (view-sound name))))
		(if (not (= fd -1))
		    (set! open-files (cons fd open-files))))
	    (if (and (> len 0) (rs close-chance))
		(let* ((choice (my-random (length open-files)))
		       (fd (list-ref open-files choice)))
		  (close-sound fd)
		  (set! open-files (remove-if (lambda (a) (= a fd)) open-files)))))
	  
	  (clear-sincs)
	  (set! open-ctr (length open-files))
	  (if (= open-ctr 0)
	      (let ((fd (view-sound "oboe.snd")))
		(set! open-ctr 1)
		(set! open-files (cons fd open-files))))

	  (let ((choose-fd (lambda () (list-ref open-files (my-random open-ctr)))))

	    (if (> tests 1) (snd-display (format #f ";main test ~D " test-ctr)))

	    (let* ((frame-list (map frames open-files))
		   (curloc (min 1200 (1- (list-ref frame-list 0))))
		   (curfd (choose-fd))
		   (old-marks (length (marks curfd 0))))
	      (set! test14-file (short-file-name curfd))
	      (if (> (duration curfd) 0.0)
		  (begin
		    (set! (x-bounds curfd) (list 0.0 (min (duration curfd) 1.0)))
		    (let ((xb (x-bounds curfd)))
		      (if (or (fneq (car xb) 0.0) 
			      (fneq (cadr xb) (min (duration curfd) 1.0))) 
			  (snd-display (format #f ";x-bounds: ~A?" xb))))))
	      (set! (y-bounds curfd) (list -0.5 0.5))
	      (let ((yb (y-bounds curfd)))
		(if (or (fneq (car yb) -0.5) (fneq (cadr yb) 0.5)) (snd-display (format #f ";y-bounds: ~A?" yb))))
	      (set! (cursor curfd) curloc)
	      (let ((cl (cursor curfd)))
		(if (not (= cl curloc)) (snd-display (format #f ";cursor ~A /= ~A?" cl curloc))))
	      (let* ((id (add-mark curloc curfd)))
		(if (and (number? id) (not (= id -1)))
		    (let* ((cl (mark-sample id))
			   (new-marks (length (marks curfd 0))))
		      (if (not (= cl curloc)) (snd-display (format #f ";mark ~A /= ~A?" cl curloc)))
		      (if (not (= new-marks (1+ old-marks))) (snd-display (format #f ";marks ~A ~A?" new-marks old-marks)))
		      (let ((new-id (find-mark curloc curfd)))
			(if (not (= id new-id)) (snd-display (format #f ";find-mark (by sample): ~A ~A (~A for ~A ~A)?" 
								   id new-id curloc (mark-sample id) (mark-sample new-id)))))
		      (set! (mark-name id) "hiho")
		      (let ((new-id (find-mark "hiho" curfd)))
			(if (not (= id new-id)) (snd-display (format #f ";find-mark (by name): ~A ~A?" id new-id))))
		      (if (not (string=? (mark-name id) "hiho")) (snd-display (format #f ";mark name: ~A?" (mark-name id))))
		      (set! (mark-sample id) (max 0 (- curloc 100)))
		      (set! cl (mark-sample id))
		      (if (not (= cl (max 0 (- curloc 100)))) (snd-display (format #f ";set mark ~A /= ~A?" cl curloc)))
		      (delete-mark id)))
		(if (> (duration curfd) 1.2) (set! (x-bounds curfd) '(1.0 1.1)))
		(add-mark 10 curfd)
		(add-mark 20 curfd)
		(key (char->integer #\m) 0 curfd)
		(set! (cursor curfd) 0)
		(forward-mark 1 curfd)
		(if (and (> (frames curfd) 10)
			 (not (= (cursor curfd) 10)))
		    (snd-display (format #f ";forward-mark (10): ~A (~A)?" (cursor curfd) (frames curfd))))
		(forward-mark 1 curfd)
		(if (and (> (frames curfd) 20)
			 (not (= (cursor curfd) 20)))
		    (snd-display (format #f ";forward-mark (20): ~A (~A)?" (cursor curfd) (frames curfd))))
		(set! (cursor curfd) 25)
		(backward-mark 2 curfd)
		(if (and (> (frames curfd) 10)
			 (not (= (cursor curfd) 10)))
		    (snd-display (format #f ";backward-mark (10): ~A (~A)?" (cursor curfd) (frames curfd))))
		(forward-sample 5 curfd)
		(if (and (> (frames curfd) 15)
			 (not (= (cursor curfd) 15)))
		    (snd-display (format #f ";forward-sample (5): ~A (~A)?" (cursor curfd) (frames curfd))))
		(backward-sample 1 curfd)
		(if (and (> (frames curfd) 15)
			 (not (= (cursor curfd) 14)))
		    (snd-display (format #f ";backward-sample (1): ~A (~A)?" (cursor curfd) (frames curfd))))
		(let ((new-marks (length (marks curfd 0))))
		  (delete-marks curfd)
		  (if (> (duration curfd) 0.0)
		      (set! (x-bounds curfd) (list 0.0 (min (duration curfd) 0.1))))
		  (set! (y-bounds curfd) '(-1.0 1.0))
		  (if (or (> (length (marks curfd 0)) 0)
			  (not (= new-marks (+ old-marks 2))))
		      (snd-display (format #f ";delete marks: ~A ~A?" new-marks old-marks))))
		))
	  
	    (if (rs 0.5)
		(add-hook! exit-hook (lambda () (report-in-minibuffer "") (unsaved-edits? 0)))
	    (reset-hook! exit-hook))
	    (if (rs 0.5)
		(add-hook! start-hook (lambda (file) (if (> (string-length file) 0) (no-startup-file? 0 file) #f)))
	      (reset-hook! start-hook))

	    (key (char->integer #\x) 4)
	    (key (char->integer #\() 0)
	    (key (char->integer #\f) 4)
	    (key (char->integer #\f) 4)
	    (key (char->integer #\x) 4)
	    (key (char->integer #\)) 0)
	    (key (char->integer #\x) 4)
	    (key (char->integer #\e) 0)

	    (key (char->integer #\u) 4)
	    (key (char->integer #\.) 0)
	    (key (char->integer #\5) 0)
	    (key (char->integer #\x) 4)
	    (key (char->integer #\v) 4)

	    (key (char->integer #\>) 4 (choose-fd))
	    (key (char->integer #\i) 4 (choose-fd))
	    (key (char->integer #\<) 4 (choose-fd))
	    (key (char->integer #\i) 4 (choose-fd))
	    (key (char->integer #\>) 0 (choose-fd))
	    (key (char->integer #\i) 4 (choose-fd))
	    (key (char->integer #\<) 0 (choose-fd))
	    (key (char->integer #\i) 4 (choose-fd))
	    (key (char->integer #\a) 4 (choose-fd))
	    (key (char->integer #\i) 4 (choose-fd))
	    (key (char->integer #\e) 4 (choose-fd))
	    (key (char->integer #\i) 4 (choose-fd))
	    (key (char->integer #\b) 4 (choose-fd))
	    (key (char->integer #\i) 4 (choose-fd))
	    (if (not (provided? 'snd-gtk)) (key (char->integer #\p) 4 (choose-fd))) ;this is apparently getting hung in gtk (or maybe it's the c-q below)
	    (key (char->integer #\i) 4 (choose-fd))
	    (key (char->integer #\n) 4 (choose-fd))
	    (key (char->integer #\i) 4 (choose-fd))
	    (key (char->integer #\l) 4 (choose-fd))
	    (if (rs 0.5) (begin (key (char->integer #\x) 4) (key (char->integer #\b) 0)))
	    (set! (cursor (choose-fd)) 1200)
	    (safe-make-region 1000 2000 (choose-fd))
	    (if (selection?) (cut))
	    (set! (cursor (choose-fd)) 0)
	    (insert-region (cursor) 0 (choose-fd))
	    (revert-sound (choose-fd))
	    (key (char->integer #\m) 4 (choose-fd))
	    (key (char->integer #\v) 4 (choose-fd))
	    (key (char->integer #\d) 4 (choose-fd))
	    (key (char->integer #\z) 4 (choose-fd))
	    (key (char->integer #\o) 4 (choose-fd))
	    (if (rs 0.5) (begin (key (char->integer #\x) 4)) (key (char->integer #\u) 0))
	    (undo 2 (choose-fd))
	    (key (char->integer #\<) 4 (choose-fd))
	    (key (char->integer #\i) 4 (choose-fd))
	    (key (char->integer #\w) 4 (choose-fd))
	    (key (char->integer #\y) 4 (choose-fd))
	    (if (not (provided? 'snd-gtk)) (key (char->integer #\q) 4 (choose-fd)))
	    (set! (cursor (choose-fd)) 8000)
	    (if (rs 0.5) (begin (key (char->integer #\x) 4) (key (char->integer #\f) 0) (key (char->integer #\g) 4)))
	    (if (rs 0.5) (begin (key (char->integer #\x) 4) (key (char->integer #\i) 0) (key (char->integer #\g) 4)))
	    (if (rs 0.5) (begin (key (char->integer #\x) 4) (key (char->integer #\l) 0) (key (char->integer #\g) 4)))
	    (if (rs 0.5) (begin (key (char->integer #\x) 4) (key (char->integer #\u) 0)))
	    (if (rs 0.5) (begin (key (char->integer #\x) 4) (key (char->integer #\r) 0)))
	    (if (rs 0.5) (begin (key (char->integer #\x) 4) (key (char->integer #\v) 0)))
	    (if (rs 0.5) (begin (key (char->integer #\x) 4) (key (char->integer #\o) 4)))
	    (if (rs 0.5) (begin (key (char->integer #\x) 4) (key (char->integer #\u) 4)))

	    (revert-sound)
	    (select-all)
	    (without-errors
	     (if (and (region? 0) (selection?))
		 ;; these are not necessarily coupled any more
		 (let ((r1 (region-rms 0))
		       (r2 (selection-rms))
		       (r3 (selection-rms-1))
		       (r4 (region-rms-1 0)))
		   (if (fneq r1 r4)
		       (snd-display (format #f ";region rms: ~A ~A?" r1 r4)))
		   (if (fneq r2 r3)
		       (snd-display (format #f ";selection rms: ~A ~A?" r2 r3))))))

	    (forward-graph (choose-fd))
	    (backward-graph (choose-fd))
	    (forward-mix (choose-fd))
	    (backward-mix (choose-fd))

	    (without-errors (select-region 2))
	    (without-errors (protect-region 2 #t))
	    (without-errors (play-region 2 #t))
	    (without-errors (mix-region))
	    (set! (use-sinc-interp) #t)
	    (play-and-wait)
	    (set! (use-sinc-interp) #f)
	    (scale-to .1 (choose-fd))
	    (scale-by 2.0 (choose-fd))
	    (normalize-view)
	    (save-control-panel)
	    (set! (amp) .5)
	    (test-panel amp 'amp)
	    (restore-control-panel)
	    (report-in-minibuffer "hi")
	    (append-to-minibuffer "ho")
	  
	    (without-errors
	     (begin
	       (let ((cfd (choose-fd)))
		 (safe-make-region 1000 2000 cfd)
		 (src-selection .5)
		 (undo 1 cfd))
	       (let ((cfd (choose-fd)))
		 (safe-make-region 1000 2000 cfd)
		 (src-selection -1.5)
		 (undo 1 cfd))
	       (let ((cfd (choose-fd)))
		 (safe-make-region 1000 2000 cfd)
		 (scale-selection-by .5)
		 (undo 1 cfd))
	       (let ((cfd (choose-fd)))
		 (safe-make-region 1000 2000 cfd)
		 (env-selection '(0 0 1 1 2 0))
		 (undo 1 cfd))
	       (let ((cfd (choose-fd)))
		 (safe-make-region 1000 2000 cfd)
		 (scale-selection-to .5)
		 (reverse-selection)
		 (undo 2 cfd))
	       (if (> (length (regions)) 2) (delete-region 2))
	       (if (> (length (regions)) 2) (select-region 2))))
	    (map revert-sound open-files)

	    (without-errors
	     (let ((cfd (car open-files)))
	       (set! (sync cfd) 1)
	       (if (not (null? (cdr open-files))) (set! (sync (cadr open-files)) 1))
	       (if (rs 0.5)
		   (begin
		     (safe-make-region 1000 2000 cfd)
		     (src-selection .5)
		     (undo 1 cfd)))
	       (if (rs 0.5)
		   (begin
		     (safe-make-region 1000 2000 cfd)
		     (src-selection -1.5)
		     (undo 1 cfd)))
	       (if (rs 0.5)
		   (begin
		     (safe-make-region 1000 2000 cfd)
		     (env-selection '(0 0 1 1 2 0))
		     (undo 1 cfd)))
	       (if (rs 0.5)
		   (begin
		     (safe-make-region 1000 2000 cfd)
		     (reverse-selection)
		     (undo 1 cfd)))
	       (if (rs 0.5)
		   (begin
		     (safe-make-region 1000 2000 cfd)
		     (filter-selection '(0 0 .1 1 1 0) 40)
		     (undo 1 cfd)))
	       (if (rs 0.5)
		   (begin
		     (safe-make-region 1000 2000 cfd)
		     (convolve-selection-with "oboe.snd")
		     (undo 1 cfd)))
	       (if (rs 0.5)
		   (begin
		     (safe-make-region 1000 2000 cfd)
		     (smooth-selection)
		     (undo 1 cfd)))
	       (if (rs 0.5)
		   (begin
		     (safe-make-region 1000 2000 cfd)
		     (scale-selection-by .5)
		     (undo 1 cfd)))
	       (if (rs 0.5)
		   (begin
		     (scale-selection-to .5)
		     (reverse-selection)
		     (undo 2)
		     (src-selection '(0 .5 1 1))
		     (undo)))
	       (revert-sound cfd)
	       (if (not (null? (cdr open-files))) (revert-sound (cadr open-files)))))
	  
	    (if (> (frames) 1) 
		(begin
		  (make-region 0 (frames))
		  (convolve-selection-with "fyow.snd" .5)
		  (play-and-wait)))
	    (convolve-with "fyow.snd" .25)
	    (insert-sound "oboe.snd")
	    (reset-hook! graph-hook)
	    (reset-hook! fft-hook)
	    (map revert-sound open-files)
	  
	    (let ((zz (view-sound "z.snd")))
	      (select-sound zz)
	      (let ((md (mix "4.aiff")))
		(add-mark 0)
		(add-mark 1200)
		(delete-marks)
		(if (and (number? md) (>= md 0))
		    (begin
		      (set! (mix-locked md) #t)
		      (if (not (mix-locked md)) (snd-display (format #f ";set-mix-locked: ~A?" (mix-locked md)))))))
	      (revert-sound zz)
	      (mix s8-snd 24000)
	      (select-all)
	      (if (selection?) 
		  (begin
		    (filter-selection '(0 0 .2 1 .5 0 1 0) 40)
		    (cut)
		    (mix-region)))
	      (close-sound zz))
	    (let ((s8 (view-sound s8-snd)))
	      (select-sound s8)
	      (if (= (channels s8) 8)
		  (begin
		    (select-channel 5)
		    (if (or (not (number? (selected-channel)))
			    (not (= (selected-channel) 5))) 
			(snd-display (format #f ";select-channel: ~A?" (selected-channel))))))
	      (select-all)
	      (cut)
	      (mix "4.aiff")
	      (set! (sync) 1)
	      (mix "oboe.snd" 60000)
	      (scale-by .1)
	      (set! (sync) 1)
	      (if (> (channels s8) 3)
		  (select-channel 3))
	      (insert-region 80000)
	      (revert-sound s8)
	      (close-sound s8))
	  
	    (let ((cfd (choose-fd)))
	      (if (> (chans cfd) 1)
		  (let ((uval (my-random 3)))
		    (set! (uniting cfd) uval)
		    (if (not (= uval (uniting cfd))) (snd-display (format #f ";uniting: ~A ~A?" uval (uniting cfd))))))
	      (if (rs 0.5) (src-sound 2.5 1.0 cfd))
	      (if (rs 0.5) (src-sound -2.5 1.0 cfd))
	      (if (rs 0.5) (src-sound .5 1.0 cfd))
	      (if (rs 0.5) (revert-sound cfd))
	      (if (rs 0.5) (src-sound -.5 1.0 cfd))
	      (if (rs 0.5) (src-sound '(0 .5 1 1.5) 1.0 cfd))
	      (if (rs 0.5) (if (> (frames cfd) 0) (src-sound (make-env '(0 .5 1 1.5) :end (1- (frames cfd))) 1.0 cfd)))
	      (if (rs 0.5) (revert-sound cfd))
	      (if (rs 0.5) (filter-sound '(0 1 .2 0 .5 1 1 0) 20 cfd))      ; FIR direct form
	      (if (rs 0.5) (filter-sound '(0 0 .1 0 .11 1 .12 0 1 0) 2048 cfd)) ; convolution
	      (if (rs 0.5) (env-sound '(0 0 .5 1 1 0) 0 (frames cfd) 1.0 cfd))
	      (if (rs 0.5)
		  (begin
		   (insert-sample 1200 .1 cfd)
		   (if (fneq (sample 1200 cfd) .1) (snd-display (format #f ";insert-sample(looped): ~A?" (sample 1200 cfd))))))
	      (revert-sound cfd))

	  (let ((cfd (open-sound "oboe.snd")))
	    (select-sound cfd)
	    (let ((cfd1 (open-alternate-sound "obtest.snd")))
	      (if (and (sound? cfd) (not (= cfd cfd1))) (snd-display (format #f ";open-alternate-sound: ~A ~A?" cfd cfd1)))
	      (let ((cfd2 (open-sound "pistol.snd")))
		(select-sound cfd2)
		;; now run apply a few times
		(if (rs 0.5) (set! (use-sinc-interp) #t))
		(set! (amp) .5) 
		(set! (speed) 2.0) 
		(test-panel speed 'speed)
		(call-apply) 
		(play-and-wait)

		(set! (reverbing) #t)
		(set! (reverb-scale) .2) 
		(test-panel reverb-scale 'reverb-scale)
		(test-panel reverb-length 'reverb-length)
		(test-panel reverb-lowpass 'reverb-lowpass)
		(test-panel reverb-feedback 'reverb-feedback)
		(call-apply) 
		(play-and-wait)
		(set! (contrasting) #t)
		(set! (contrast) .5) 
		(test-panel contrast 'contrast)
		(test-panel contrast-amp 'contrast-amp)
		(call-apply) 
		(play-and-wait)
		(set! (expanding) #t)
		(set! (expand) 2.5) 
		(test-panel expand 'expand)
		(test-panel expand-length 'expand-length)
		(test-panel expand-hop 'expand-hop)
		(test-panel expand-ramp 'expand-ramp)
		(call-apply) 
		(play-and-wait)
		(set! (filtering) #t)
		(set! (filter-order) 40) 
		(test-panel filter-order 'filter-order)
		(set! (filter-env) '(0 0 .1 1 .2 0 1 0)) 
		(filter-env) 
		(call-apply) 
		(play-and-wait)
		(set! (amp) 1.5) 
		(test-panel amp 'amp)
		(call-apply) 
		(play-and-wait)
		(swap-channels cfd1 0 cfd2 0)
		(set! (amp #t) .75)
		(test-panel amp 'amp)
		(if (> (abs (- (amp cfd2) .75)) .05) (snd-display (format #f ";set-amp .75 #t -> ~A?" (amp cfd2))))
		(set! (contrast-amp #t) .75)
		(if (fneq (contrast-amp cfd2) .75) (snd-display (format #f ";set-contrast-amp .75 #t -> ~A?" (contrast-amp cfd2))))
		(set! (expand-length #t) .025)
		(if (fneq (expand-length cfd2) .025) (snd-display (format #f ";set-expand-length .025 #t -> ~A?" (expand-length cfd2))))
		(set! (expand-hop #t) .025)
		(if (fneq (expand-hop cfd2) .025) (snd-display (format #f ";set-expand-hop .025 #t -> ~A?" (expand-hop cfd2))))
		(set! (expand-ramp #t) .025)
		(if (fneq (expand-ramp cfd2) .025) (snd-display (format #f ";set-expand-ramp .025 #t -> ~A?" (expand-ramp cfd2))))
		(close-sound cfd2)
		(close-sound cfd1)
		(set! (use-sinc-interp) #f))))

	  (if (and (rs .5) (not rev-funcs-set))
	      (begin
		(set! rev-funcs-set #t)
		(set-reverb-funcs
		 (lambda (ptr invals outvals)
		   (vct-fill! outvals 0.0)
		   (vct-set! outvals 0 (delay delay-line (+ (* .75 (tap delay-line)) (vct-ref invals 0))))
		   outvals)
		 (lambda (snd chans)
		   (set! delay-line (make-delay (inexact->exact (* (srate snd) delay-time))))
		   delay-line)
		 (lambda (ptr)
		   (set! delay-line #f)
		   ptr)
		 )
		(set-contrast-func (lambda (a b) (* a b))))
	      (begin
		(set! rev-funcs-set #f)
		(set-reverb-funcs snd-nrev make-snd-nrev free-snd-nrev)
		(set-contrast-func snd-contrast)))

	  (add-hook! (edit-hook) (lambda () #f))
	  (as-one-edit (lambda () (set! (sample 200) .2) (set! (sample 300) .3)))
	  (delete-sample 250)
	  (add-hook! (undo-hook) (lambda () #f))
	  (undo)
	  (delete-sample 250)
	  (undo)
	  (as-one-edit (lambda () (set! (sample 20) .2) (set! (sample 30) .3)))
	  (undo 1)
	  (as-one-edit (lambda () (set! (sample 2) .2) (set! (sample 3) .3)))
	  (undo 2)
	  (reset-hook! (undo-hook))
	  (reset-hook! (edit-hook))
	  (add-hook! snd-error-hook 
		     (lambda (msg) 
		       (if (not (string=? msg "hiho")) (snd-display (format #f ";snd-error-hook: ~A?" msg)))
		       #t))
	  (snd-error "hiho")
	  (add-hook! snd-warning-hook 
		     (lambda (msg) 
		       (if (not (string=? msg "hiho")) (snd-display (format #f ";snd-warning-hook: ~A?" msg)))
		       #t))
	  (snd-warning "hiho")
	  (reset-hook! snd-error-hook)
	  (reset-hook! snd-warning-hook)
	  (add-hook! name-click-hook 
		     (lambda (n) 
		       #t))
	  (redo 1)
	  (reset-hook! name-click-hook)
	  (set! (ffting) #t)
	  (test-channel ffting 'ffting)
	  (test-channel waving 'waving)
	  (test-channel graphing 'graphing)
	  (test-channel frames 'frames)
	  (test-channel cursor 'cursor)
	  (test-channel cursor-size 'cursor-size)
	  (test-channel cursor-style 'cursor-style)
	  (test-channel left-sample 'left-sample)
	  (test-channel right-sample 'right-sample)
	  (test-channel channel-sync 'channel-sync)
	  (test-channel squelch-update 'squelch-update)
	  (test-channel x-zoom-slider 'x-zoom-slider)
	  (test-channel y-zoom-slider 'y-zoom-slider)
	  (test-channel x-position-slider 'x-position-slider)
	  (test-channel y-position-slider 'y-position-slider)
	  (test-channel edit-position 'edit-position)
	  (test-channel maxamp 'maxamp)
	  (test-channel edit-hook 'edit-hook)
	  (test-channel undo-hook 'undo-hook)
	  (set! (transform-type) histogram)
	  (set! (x-bounds) '(.1 .2))
	  (set! (transform-type) normal-fft)
	  (set! (x-bounds) '(.1 .2))
	  (add-hook! lisp-graph-hook display-energy)
	  (shell "df")
	  (reset-hook! graph-hook)
	  (add-hook! graph-hook correlate)
	  (set! (x-bounds) '(.1 .12))
	  (set! (x-bounds) '(.1 .2))
	  (remove-hook! graph-hook correlate)
	  (set! (graphing) #f)
	  (map-chan (map-silence .01 #f))
	  (let ((maxval (+ (maxamp) .01)))
	    (if (not (every-sample? (lambda (y) (< y maxval)))) (snd-display (format #f ";every-sample: ~A?" maxval))))
	  (map-chan (echo .5 .75) 0 60000)
	  (reset-hook! fft-hook)
	  (reset-hook! lisp-graph-hook)
	  (add-hook! lisp-graph-hook 
		     (lambda (snd chn) 
		       (if (> (random 1.0) .5) 
			   (graph #(0 1 2)) 
			   (graph (list #(0 1 2) #(3 2 0))))))

	  (do ((i 0 (1+ i)))
	      ((= i (max-sounds)))
	    (if (and (sound? i) (rs .5))
		(set! (sync i) (inexact->exact (my-random 3)))))
	  (add-hook! graph-hook superimpose-ffts)
	  (do ((i 0 (1+ i)))
	      ((= i 10))
	    (do ((j 0 (1+ j)))
		((= j (max-sounds)))
	      (if (and (sound? j) (> (frames j) 0) (rs .5))
		  (let* ((dur (/ (frames j) (srate j)))
			 (start (max 0.0 (min (- dur .1) (my-random dur)))))
		    (if (> dur 0.0) 
			(set! (x-bounds) (list start (min (+ start .1) dur))))
		    ))))
	  (reset-hook! graph-hook)
	  (reset-hook! lisp-graph-hook)

	  ;; new variable settings 
	  (letrec ((reset-vars
		    (lambda (lst)
		      (if (not (null? lst))
			  (let ((name (list-ref (car lst) 0))
				(index (if (list-ref (car lst) 1) (choose-fd) #f))
				(setfnc (list-ref (car lst) 3))
				(minval (list-ref (car lst) 2))
				(maxval (list-ref (car lst) 4)))
			    
			    (if index
				(if (equal? minval #f)
				    (setfnc (rs 0.5) index)
				  (if (exact? minval)
				      (if (equal? name #t)
					  (setfnc (inexact->exact
						   (floor (expt 2 (min 31 (ceiling (/ (log (+ minval (floor (* (- maxval minval) (my-random 1.0))))) 
											(log 2)))))))
						  index)
					(setfnc (+ minval (inexact->exact (floor (* (- maxval minval) (my-random 1.0))))) index))
				    (setfnc (+ minval (* (- maxval minval) (my-random 1.0))) index)))
			      (if (equal? minval #f)
				  (setfnc (rs 0.5))
				(if (exact? minval)
				    (if (equal? name #t)
					(setfnc (inexact->exact
						 (floor (expt 2 (min 31 (ceiling (/ (log (+ minval (floor (* (- maxval minval) (my-random 1.0))))) 
										    (log 2))))))))
				      (setfnc (+ minval (inexact->exact (floor (* (- maxval minval) (my-random 1.0)))))))
				  (setfnc (+ minval (* (- maxval minval) (my-random 1.0)))))))
			    (reset-vars (cdr lst)))))))
		  (reset-vars 
		   (list
		    (list 'amp #t .1 set-amp 1.0)
		    ;(list 'ask-before-overwrite #f #f set-ask-before-overwrite #t)
		    (list 'auto-resize #f #f set-auto-resize #t)
		    (list 'auto-update #f #f set-auto-update #t)
		    (list 'channel-style #f 0 set-channel-style 2)
		    (list 'color-cutoff #f 0.0 set-color-cutoff 0.2)
		    (list 'color-inverted #f #f set-color-inverted #t)
		    (list 'color-scale #f 0.1 set-color-scale 1.0)
		    (list 'contrast #t 0.0 set-contrast 1.0)
		    (list 'contrast-amp #t 0.0 set-contrast-amp 1.0)
		    (list 'contrasting #t #f set-contrasting #t)
		    (list 'corruption-time #f 60.0 set-corruption-time 120.0)
		    (list 'cursor-follows-play #f #f set-cursor-follows-play #t)
		    (list 'data-clipped #f #f set-data-clipped #t)
		    (list 'default-output-chans #f 1 set-default-output-chans 8)
		    (list 'default-output-format #f 1 set-default-output-format 12)
		    (list 'default-output-srate #f 22050 set-default-output-srate 44100)
		    (list 'default-output-type #f 0 set-default-output-type 2)
		    (list 'dot-size #f 1 set-dot-size 10)
		    (list 'enved-base #f 0.01  set-enved-base 100.0)
		    (list 'enved-clipping #f #f set-enved-clipping #t)
		    (list 'enved-dBing #f #f set-enved-dBing #t)
		    (list 'enved-exping #f #f set-enved-exping #t)
		    (list 'enved-power #f 3.0 set-enved-power 3.5)
		    (list 'enved-target #f 0 set-enved-target 2)
		    (list 'enved-waving #f #f set-enved-waving #t)
		    (list 'expand #t 0.1 set-expand 5.0)
		    (list 'expand-hop #t 0.01 set-expand-hop 0.5)
		    (list 'expand-length #t 0.1 set-expand-length 0.25)
		    (list 'expand-ramp #t 0.1 set-expand-ramp 0.4)
		    (list 'expanding #t #f set-expanding #t)
		    (list 'fft-beta #f 0.0  set-fft-beta 1.0)
		    (list 'fft-log-frequency #f #f set-fft-log-frequency #t)
		    (list 'fft-log-magnitude #f #f set-fft-log-magnitude #t)
		    (list 'fft-size #f 16 set-fft-size 4096)
		    (list 'fft-style #f 0 set-fft-style 2)
		    (list 'fft-window #f 0 set-fft-window dolph-chebyshev-window)
		    (list 'ffting #t #f set-ffting #t)
		    (list 'filter-dBing #t #f set-filter-dBing #t)
		    (list 'filter-order #t 2 set-filter-order 400)
		    (list 'filtering #t #f set-filtering #t)
		    (list 'graph-cursor #f 0 set-graph-cursor 35)
		    (list 'graph-style #f 0 set-graph-style 4)
		    (list 'graphs-horizontal #f #f set-graphs-horizontal #t)
		    (list 'line-size #f 8 set-line-size 512)
		    (list 'max-fft-peaks #f 1 set-max-fft-peaks 100)
		    (list 'max-regions #f 1 set-max-regions 32)
		    (list 'min-dB #f -120.0 set-min-dB -30.0)
		    (list 'movies #f #f set-movies #t)
		    (list 'selection-creates-region #f #f set-selection-creates-region #t)
		    (list 'normalize-fft #f dont-normalize set-normalize-fft normalize-globally)
		    (list 'normalize-on-open #f #f set-normalize-on-open #t)
		    (list 'previous-files-sort #f 0 set-previous-files-sort 3)
		    (list 'print-length #f 2 set-print-length 32)
		    (list 'reverb-decay #f 0.0 set-reverb-decay 2.0)
		    (list 'reverb-feedback #t 1.00 set-reverb-feedback 1.1)
		    (list 'reverb-length #t 1.0 set-reverb-length 2.0)
		    (list 'reverb-lowpass #t 0.2 set-reverb-lowpass 0.99)
		    (list 'reverb-scale #t 0.0 set-reverb-scale 0.2)
		    (list 'reverbing #t #f set-reverbing #t)
		    (list 'save-state-on-exit #f #f set-save-state-on-exit #t)
		    (list 'show-axes #f 0 set-show-axes 2)
		    (list 'show-fft-peaks #f #f set-show-fft-peaks #t)
		    (list 'show-indices #f #f set-show-indices #t)
		    (list 'show-backtrace #f #f set-show-backtrace #t)
		    (list 'show-marks #f #f set-show-marks #t)
		    (list 'show-mix-waveforms #t #f set-show-mix-waveforms #t)
		    (list 'show-selection-transform #f #f set-show-selection-transform #t)
		    (list 'show-y-zero #f #f set-show-y-zero #t)
		    (list 'sinc-width #f 4 set-sinc-width 100)
		    (list 'spectro-cutoff #f 0.5 set-spectro-cutoff 0.8)
		    (list 'spectro-hop #f 2 set-spectro-hop 20)
		    (list 'spectro-start #f 0.0 set-spectro-start 0.1)
		    (list 'spectro-x-angle #f 0.0 set-spectro-x-angle 90.0)
		    (list 'spectro-x-scale #f 0.1 set-spectro-x-scale 2.0)
		    (list 'spectro-y-angle #f 0.0 set-spectro-y-angle 90.0)
		    (list 'spectro-y-scale #f 0.1 set-spectro-y-scale 2.0)
		    (list 'spectro-z-angle #f 0.0 set-spectro-z-angle 359.0)
		    (list 'spectro-z-scale #f 0.1 set-spectro-z-scale 0.2)
		    (list 'speed #t 0.1 set-speed 5.0)
		    (list 'speed-style #f 0 set-speed-style 2)
		    (list 'speed-tones #f 2 set-speed-tones 100)
		    (list 'sync #t 0 set-sync 5)
		    (list 'transform-type #f 0 set-transform-type 6)
		    (list 'use-sinc-interp #f #f set-use-sinc-interp #t)
		    (list 'verbose-cursor #f #f set-verbose-cursor #t)
		    (list 'wavelet-type #f 0 set-wavelet-type 10)
		    (list 'waving #t #f set-waving #t)
		    (list 'x-axis-style #f 0 set-x-axis-style 2)
		    (list 'zero-pad #f 0 set-zero-pad 2)
		    (list 'zoom-focus-style #f 0 set-zoom-focus-style 3))))
	  
	  (save-options "hiho.scm")
	  (if (not (= (transform-type) fourier-transform))
	      (begin
		(set! (ffting #t #t) #f)
		(set! (fft-size) (min (fft-size) 128))))

	  )))
      (if open-files (map close-sound open-files))
      (set! open-files '())
      (mus-set-rand-seed 1234)
      (let ((val (mus-random 1.0)))
	(if (fneq val -0.7828) (snd-display (format #f ";mus-random: ~A?" val))))
      )
  )

(define prefix-it
  (lambda (n id)
    (let* ((ns (number->string n))
	   (digits (string-length ns)))
      (key (char->integer #\u) 0 id)
      (do ((i 0 (1+ i)))
	  ((= i digits))
	(key (char->integer (string-ref ns i)) 0 id)))))

(define prefix-uit
  (lambda (n id)
    (let* ((ns (number->string n))
	   (digits (string-length ns)))
      (do ((i 0 (1+ i)))
	  ((= i digits))
	(key (char->integer (string-ref ns i)) 0 id)))))

(define funcs (list wavo wavo-hop wavo-trace line-size max-fft-peaks show-fft-peaks zero-pad fft-style fft-window 
		    verbose-cursor fft-log-frequency fft-log-magnitude min-dB wavelet-type fft-size fft-beta transform-type 
		    normalize-fft show-mix-waveforms graph-style dot-size show-axes show-y-zero show-marks
		    spectro-x-angle spectro-x-scale spectro-y-angle spectro-y-scale spectro-z-angle spectro-z-scale
		    spectro-hop spectro-cutoff spectro-start graphs-horizontal
		    ))
(define set-funcs (list set-wavo set-wavo-hop set-wavo-trace set-line-size set-max-fft-peaks set-show-fft-peaks set-zero-pad set-fft-style set-fft-window 
		    set-verbose-cursor set-fft-log-frequency set-fft-log-magnitude set-min-dB set-wavelet-type set-fft-size set-fft-beta set-transform-type 
		    set-normalize-fft set-show-mix-waveforms set-graph-style set-dot-size set-show-axes set-show-y-zero set-show-marks
		    set-spectro-x-angle set-spectro-x-scale set-spectro-y-angle set-spectro-y-scale set-spectro-z-angle set-spectro-z-scale
		    set-spectro-hop set-spectro-cutoff set-spectro-start set-graphs-horizontal
		    ))
(define func-names (list 'wavo 'wavo-hop 'wavo-trace 'line-size 'max-fft-peaks 'show-fft-peaks 'zero-pad 'fft-style 'fft-window
			 'verbose-cursor 'fft-log-frequency 'fft-log-magnitude 'min-dB 'wavelet-type 'fft-size 'fft-beta 'transform-type
			 'normalize-fft 'show-mix-waveforms 'graph-style 'dot-size 'show-axes 'show-y-zero 'show-marks
			 'spectro-x-angle 'spectro-x-scale 'spectro-y-angle 'spectro-y-scale 'spectro-z-angle 'spectro-z-scale
			 'spectro-hop 'spectro-cutoff 'spectro-start 'graphs-horizontal
			 ))
(define new-values (list #t 12 512 1024 3 #t 32 sonogram cauchy-window
			 #t #t #t -120.0 3 32 .5 autocorrelation
			 0 #t graph-lollipops 8 show-no-axes #t #f
			 32.0 .5 32.0 .5 32.0 .5
			 14 .3 .1 #f
			 ))

(define test-history-channel
  (lambda (func set-func name new-value snd1 snd2 snd3)
    (define next-chan
      (lambda (snd chn)
	(if (< chn (channels snd))
	    (cons (func snd chn) (next-chan snd (1+ chn)))
	    '())))
    (define next-snd-case 
      (lambda (snd)
	(if (< snd (max-sounds))
	    (if (sound? snd)
		(cons (next-chan snd 0) (next-snd-case (1+ snd)))
		(next-snd-case (1+ snd)))
	    '())))
    (define test-equal
      (lambda (nv new-value)
	(if (and (number? nv)
		 (inexact? nv))
	    (not (fneq nv new-value))
	    (equal? nv new-value))))
    (define chan-equal? 
      (lambda (vals new-value)
	(cond ((null? vals) #t)
	      ((list? vals) (and (chan-equal? (car vals) new-value)
				 (chan-equal? (cdr vals) new-value)))
	      (else (test-equal vals new-value)))))
    (if (not (equal? (func #t #t) (next-snd-case 0)))
	(snd-display (format #f ";test-history-channel ~A[0]: ~A ~A?" name (func #t #t) (next-snd-case 0))))
    (let ((old-value (func))
	  (old-chan-value (func snd1 0)))
      (set-func new-value snd1 0)
      (let ((nv (func snd1 0)))
	(if (not (test-equal nv new-value))
	    (snd-display (format #f ";test-history-channel set-~A[1]: ~A ~A?" name new-value (func snd1 0)))))
      (set-func new-value snd3 2)
      (let ((nv (func snd3 2)))
	(if (not (test-equal nv new-value))
	    (snd-display (format #f ";test-history-channel set-~A[2]: ~A ~A?" name new-value (func snd3 2)))))
      (if (not (test-equal old-value new-value))
	  (let ((nv (func snd3 1)))
	    (if (test-equal nv new-value)
		(snd-display (format #f ";test-history-channel set-~A[3]: ~A ~A?" name new-value (func snd3 1))))))
      (set-func new-value snd2 #t)
      (let ((nv (func snd2 1)))
	(if (not (test-equal nv new-value))
	    (snd-display (format #f ";test-history-channel set-~A[4]: ~A ~A?" name new-value (func snd2 1)))))
      (set-func new-value)
      (if (not (chan-equal? (func #t #t) new-value))
	  (snd-display (format #f ";test-history-channel ~A[5]: ~A ~A?" name (func #t #t) (next-snd-case 0))))
      )))
      
(load "rubber.scm")

;;; ---------------- test 15: chan-local vars ----------------
(if (or full-test (= snd-test 15))
    (let ((obi (open-sound (car (match-sound-files (lambda (file) (= (mus-sound-chans file) 1)))))))

      (define (test-selection ind beg len scaler)
	(set! (selection-member? ind 0) #t)
	(set! (selection-position) beg)
	(set! (selection-length) len)
	(scale-selection-by scaler)
	(let* ((diff 0.0)
	       (pos (edit-position ind 0))
	       (old-reader (make-sample-reader beg ind 0 1 (1- pos)))
	       (new-reader (make-sample-reader beg ind 0 1 pos)))
	  (do ((i 0 (1+ i)))
	      ((= i len))
	    (let* ((ov (* scaler (if (provided? 'snd-new-smob) (old-reader) (next-sample old-reader))))
		   (nv (next-sample new-reader))
		   (val (abs (- ov nv))))
	      (set! diff (+ diff val))))
	  (if (> diff 0.0) (snd-display (format #f ";diff (~D ~D): ~A" beg len diff)))
	  (set! diff 0.0)
	  (do ((i 0 (1+ i)))
	      ((= i 100))
	    (let* ((ov (next-sample old-reader))
		   (nv (next-sample new-reader))
		   (val (abs (- ov nv))))
	      (set! diff (+ diff val))))
	  (if (> diff 0.0) (snd-display (format #f ";zdiff (~D ~D): ~A" beg len diff)))
	  (free-sample-reader old-reader)
	  (free-sample-reader new-reader)))

      (define (test-selection-to ind beg len maxval)
	(set! (selection-member? ind 0) #t)
	(set! (selection-position) beg)
	(set! (selection-length) len)
	(scale-selection-to maxval)
	(let* ((newmax 0.0)
	       (new-reader (make-sample-reader beg ind 0)))
	  (do ((i 0 (1+ i)))
	      ((= i len))
	    (let* ((nv (abs (next-sample new-reader))))
	      (if (> nv newmax) (set! newmax nv))))
	  (if (fneq newmax maxval)
	      (snd-display (format #f ";scale-selection-to (~D ~D) ~A: ~A?" beg len maxval newmax)))
	  (free-sample-reader new-reader)))

      (define play-with-amps
	(lambda (sound . amps)
	  (let ((chans (chans sound)))
	    (do ((chan 0 (1+ chan)))
		((= chan chans))
	      (let ((player (make-player sound chan)))
		(if (not (player? player)) (snd-display (format #f ";player? ~A -> #f?" player)))
		(set! (amp player) (list-ref amps chan))
		(set! (speed player) .5)
		(set! (expanding player) #t)
		(set! (expand player) 2.0)
		(set! (contrasting player) #t)
		(set! (contrast player) 1.0)
		(set! (reverbing player) #t)
		(set! (reverb-scale player) .02)
		(add-player player)))
	    (start-playing chans (srate sound) #f))))

      (if (procedure? trace-hook) (trace-hook 15))
      (set! (show-usage-stats) #t)
      (if (not (equal? (all-chans) (list (list obi) (list 0)))) (snd-display (format #f ";all-chans: ~A?" (all-chans))))
      (let ((s2i (open-sound (car (match-sound-files-1 (lambda (file) (= (mus-sound-chans file) 2)))))))
	(if (and (not (equal? (all-chans) (list (list obi s2i s2i) (list 0 0 1))))
		 (not (equal? (all-chans) (list (list s2i s2i obi) (list 0 1 0)))))
		 (snd-display (format #f ";all-chans(2): ~A?" (all-chans))))
	(if (not (string=? (finfo "oboe.snd") "oboe.snd: chans: 1, srate: 22050, Sun, big endian short (16 bits), len: 2.305"))
	    (snd-display (format #f ";finfo: ~A?" (finfo "oboe.snd"))))
	(close-sound s2i)
	(close-sound obi)
	(if (not (equal? (all-chans) '(() ()))) (snd-display (format #f ";all-chans(0): ~A?" (all-chans))))
	(set! obi (open-sound "oboe.snd"))
	(set! (cursor obi) 1000)
	(if (not (= (locate-zero .001) 1050)) (snd-display (format #f ";locate-zero: ~A?" (locate-zero .001))))
	(add-hook! graph-hook auto-dot)
	(add-hook! graph-hook superimpose-ffts)
	(set! (ffting obi 0) #t)
	(update-graphs)
	(set! s2i (open-sound (car (match-sound-files-1 (lambda (file) (= (mus-sound-chans file) 2))))))
	(update-graphs)
	(remove-hook! graph-hook auto-dot)
	(remove-hook! graph-hook superimpose-ffts)
	(set! (ffting obi 0) #f)
	(select-sound obi)
	(let ((m1 (add-mark 100 obi 0)))
	  (first-mark-in-window-at-left)
	  (if (> (abs (- (left-sample obi 0) 100)) 1) (snd-display (format #f ";mark-in-window: ~A ~A?" (left-sample obi 0) (mark-sample m1))))
	  (delete-mark m1))
	(close-sound s2i)
	(safe-make-region 1000 2000 obi)
	(delete-selection-and-smooth)
	(if (not (equal? (edit-fragment 0 obi 0) '(#f "init" 0 50828))) 
	    (snd-display (format #f ";edit-fragment(0): ~A?" (edit-fragment 0 obi 0))))
	(if (not (equal? (edit-fragment 1 obi 0) '("delete-samples" "delete" 1000 1001))) 
	    (snd-display (format #f ";edit-fragment(0): ~A?" (edit-fragment 0 obi 0))))
	(if (not (equal? (edit-fragment 2 obi 0) '("smooth" "set" 984 32))) 
	    (snd-display (format #f ";edit-fragment(0): ~A?" (edit-fragment 0 obi 0))))

	(let ((samp100 (sample 1100 obi 0)))
	  (safe-make-region 1000 2000 obi)
	  (eval-over-selection (lambda (val) (* 2.0 val)) obi)
	  (let ((nsamp100 (sample 1100 obi 0)))
	    (if (fneq (* 2.0 samp100) nsamp100) (snd-display (format #f ";eval-over-selection: ~A ~A?" samp100 nsamp100)))
	    (let ((m2 (add-mark 1000 obi 0))
		  (m3 (add-mark 2000 obi 0)))
	      (if (not (equal? (marks obi 0) (list m2 m3))) (snd-display (format #f ";add-mark: ~A ~A?" (marks obi 0) (list m2 m3))))
	      (eval-between-marks (lambda (val) (* 2.0 val)) obi)
	      (let ((msamp100 (sample 1100 obi 0)))
		(if (fneq (* 2.0 nsamp100) msamp100) (snd-display (format #f ";eval-between-marks: ~A ~A?" nsamp100 msamp100)))
		(revert-sound obi)))))
	(let ((maxa (maxamp obi)))
	  (normalized-mix "pistol.snd" 1000 0 obi 0)
	  (let ((nmaxa (maxamp obi)))
	    (if (fneq maxa nmaxa) (snd-display (format #f ";normalized-mix: ~A ~A?" maxa nmaxa))))
	  (revert-sound obi))
	(update-usage-stats)
	(set! s2i (open-sound (car (match-sound-files-1 (lambda (file) 
							  (and (>= (mus-sound-chans file) 2)
							       (> (mus-sound-frames file) 1000)))))))
	(let ((o1 (sample 1000 obi 0))
	      (s1 (sample 1000 s2i 0))
	      (s2 (sample 1000 s2i 1)))
	  (do-all-chans (lambda (val) (if val (* 2.0 val) #f)) "double all samples")
	  (let ((o11 (sample 1000 obi 0))
		(s11 (sample 1000 s2i 0))
		(s21 (sample 1000 s2i 1)))
	    (if (or (fneq (* 2.0 o1) o11)
		    (fneq (* 2.0 s1) s11)
		    (fneq (* 2.0 s2) s21))
		(snd-display (format #f ";do-all-chans: ~A?" (list o1 s1 s2 o11 s11 s21))))))
	(update-graphs)
	(let ((m1 (maxamp obi 0))
	      (m2 (maxamp s2i 0))
	      (m3 (maxamp s2i 1))
	      (mc (apply map maxamp (list (list obi s2i s2i) (list 0 0 1)))))
	  (if (or (fneq m1 (car mc))
		  (fneq m2 (cadr mc))
		  (fneq m3 (caddr mc)))
	      (snd-display (format #f ";map maxamp all-chans: ~A ~A ~A ~A?" m1 m2 m3 mc)))
	  (set! (sync obi) 1)
	  (set! (sync s2i) 1)
	  (do-chans (lambda (val) (if val (* 2.0 val) #f)) "*2")
	  (let ((mc1 (apply map maxamp (list (list obi s2i s2i) (list 0 0 1)))))
	    (if (or (fneq (* 2.0 m1) (car mc1))
		    (fneq (* 2.0 m2) (cadr mc1))
		    (fneq (* 2.0 m3) (caddr mc1)))
		(snd-display (format #f ";do-chans: ~A ~A?" mc mc1)))
	    (set! (sync obi) 0)
	    (set! (sync s2i) 0)
	    (select-sound s2i)
	    (do-sound-chans (lambda (val) (if val (* 0.5 val) #f)) "/2")
	    (let ((mc2 (apply map maxamp (list (list obi s2i s2i) (list 0 0 1)))))
	      (if (or (fneq (* 2.0 m1) (car mc2))
		      (fneq m2 (cadr mc2))
		      (fneq m3 (caddr mc2)))
		  (snd-display (format #f ";do-sound-chans: ~A ~A ~A?" mc mc1 mc2))))
	    (if (every-sample? (lambda (val) (> val .5))) (snd-display (format #f ";every-sample(0)?"))) 
	    (if (not (every-sample? (lambda (val) (< val 5.0)))) (snd-display (format #f ";every-sample(1)?"))) 
	    (select-sound obi)
	    (let ((bins (sort-samples 32)))
	      (if (not (= (vector-ref bins 1) 4504)) (snd-display (format #f ";sort-samples: ~A?" bins))))
	    ))
	(revert-sound s2i)
	(revert-sound obi)
	(set! (sync obi) 3)
	(set! (sync s2i) 3)
	(let* ((half-way (inexact->exact (* 0.5 (frames obi))))
	       (o1 (sample half-way obi 0))
	       (s1 (sample half-way s2i 0))
	       (s2 (sample half-way s2i 1)))
	  (pan-mono-to-stereo '(0 0 1 1))
	  (let ((s11 (sample half-way s2i 0))
		(s12 (sample half-way s2i 1)))
	    (revert-sound s2i)
	    (place obi s2i 45.0)
	    (let ((s21 (sample half-way s2i 0))
		  (s22 (sample half-way s2i 1)))
	      (revert-sound s2i)
	      (place1 obi s2i 45.0)
	      (let ((s31 (sample half-way s2i 0))
		    (s32 (sample half-way s2i 1)))
		(if (or (fneq (+ s1 (* 0.5 o1)) s11)
			(fneq (+ s2 (* 0.5 o1)) s12)
			(fneq s11 s21)
			(fneq s11 s31)
			(fneq s12 s22)
			(fneq s12 s32))
		    (snd-display (format #f ";place: ~A " (list o1 s1 s2 s11 s12 s21 s22 s31 s32))))))))
	(revert-sound s2i)
	(revert-sound obi)
	(set! (sync obi) 0)
	(set! (sync s2i) 0)
	(if (or (fneq ((compand) 0.0) 0.0)
		(fneq ((compand) 1.0) 1.0)
		(fneq ((compand) .1) .2)
		(fneq ((compand) .99) .997)
		(fneq ((compand) .95) .984))
	    (snd-display (format #f ";compand: ~A?" (list ((compand) 0.0) ((compand) 1.0) ((compand) .1) ((compand) .99) ((compand) .95)))))
	
	(close-sound obi)
	(update-usage-stats)
	(revert-sound s2i)
	(let ((s1 (sample 1000 s2i 0))
	      (s2 (sample 1000 s2i 1)))
	  (set! (sync s2i) 4)
	  (select-all)
	  (swap-selection-channels)
	  (if (or (fneq s1 (sample 1000 s2i 1))
		  (fneq s2 (sample 1000 s2i 0)))
	      (snd-display (format #f ";swap-selection-channels: ~A?" (list s1 s2 (sample 1000 s2i 0) (sample 1000 s2i 1))))))
	(revert-sound s2i)
	(close-sound s2i)

	(set! obi (open-sound "oboe.snd"))
	(let ((id (select-all)))
	  (if (not (= (id-region (region-id 0)) 0)) (snd-display (format #f ";region-id: ~A ~A?" (region-id 0) (id-region (region-id 0)))))
	  (if (not (= id (region-id 0))) (snd-display (format #f ";region-id(0): ~A ~A?" (region-id 0) id))))
	(let ((tag
	       (catch #t
		      (lambda ()
			(id-region 123456))
		      (lambda args (car args)))))
	  (if (not (eq? tag 'no-such-region))
	      (snd-display (format #f ";id-region of non-region: ~A?" (id-region 123456)))))
	(do ((i (1- (max-regions)) (1- i)))
	    ((< i 0))
	  (if (region? i)
	      (delete-region i)))
	(if (not (equal? (regions) '())) (snd-display (format #f ";no regions? ~A" (regions))))
	(let ((id (make-region 100 200 obi 0)))
	  (if (not (equal? (regions) (list id))) (snd-display (format #f ";make-region regions: ~A?" (regions)))))

	;; need tests for mixes 
	;; and all the temp|sound -to- sound|temp calls

	(revert-sound obi)
	(let ((oldlen (frames obi)))
	  (env-sound-interp '(0 0 1 1 2 0) 2.0 obi 0)
	  (let ((newlen (frames obi)))
	    (if (> (abs (- (* 2 oldlen) newlen)) 3)
		(snd-display (format #f ";env-sound-interp: ~A ~A?" oldlen newlen)))))

	(close-sound obi)
	)

      (let* ((id (open-sound "oboe.snd"))
	     (fr (frames id 0))
	     (mx (maxamp id 0)))
	(set! (frames id 0) 25000)
	(if (not (= (frames id 0) 25000)) (snd-display (format #f ";set-frames 25000: ~A?" (frames id 0))))
	(if (not (= (edit-position id 0) 1)) (snd-display (format #f ";set-frames 25000 edit: ~A?" (edit-position id 0))))
	(set! (frames id 0) 75000)
	(if (not (= (frames id 0) 75000)) (snd-display (format #f ";set-frames 75000: ~A?" (frames id 0))))
	(if (not (= (edit-position id 0) 2)) (snd-display (format #f ";set-frames 75000 edit: ~A?" (edit-position id 0))))
	(if (fneq (sample 30000 id 0) 0.0) (snd-display (format #f ";set-frames 75000 zeros: ~A?" (sample 30000 id 0))))
	(revert-sound)
	(if (fneq (sample 30000 id 0) -0.0844) (snd-display (format #f ";revert from set-frames: ~A?" (sample 30000 id 0))))
	(if (not (= fr (frames id 0))) (snd-display (format #f ";revert set-frames: ~A ~= ~A?" (frames id 0) fr)))
	(set! (maxamp id 0) .5)
	(if (fneq (maxamp id 0) .5) (snd-display (format #f ";set-maxamp: ~A?" (maxamp id 0))))
	(if (not (= (edit-position id 0) 1)) (snd-display (format #f ";set-maxamp edit: ~A?" (edit-position id 0))))
	(set! (maxamp id 0) .1)
	(if (fneq (maxamp id 0) .1) (snd-display (format #f ";set-maxamp .1: ~A?" (maxamp id 0))))
	(if (not (= (edit-position id 0) 2)) (snd-display (format #f ";set-maxamp .1 edit: ~A?" (edit-position id 0))))
	(revert-sound)
	(if (fneq (maxamp id 0) mx) (snd-display (format #f ";maxamp after set: ~A ~A?" (maxamp id 0) mx)))
	(set! (x-position-slider id 0) .1)
	(if (fneq (x-position-slider id 0) .1) (snd-display (format #f ";set x-position-slider .1: ~A?" (x-position-slider id 0))))
	;(if (> (abs (- (left-sample id 0) 5083)) 3) (snd-display (format #f ";set x-position-slider sample 5083: ~A?" (left-sample id 0))))
	(set! (x-zoom-slider id 0) .5)
	(if (fneq (x-zoom-slider id 0) .5) (snd-display (format #f ";set x-zoom-slider: ~A?" (x-zoom-slider id 0))))
	(if (> (abs (- fr (* 2 (- (right-sample id 0) (left-sample id 0))))) 10)
	    (snd-display (format #f ";set x-zoom-slider: ~A ~A -> ~A?" 
			       (left-sample id 0) (right-sample id 0)
			       (abs (- fr (* 2 (right-sample id 0) (left-sample id 0)))))))
	(set! (y-position-slider id 0) .1)
	(if (fneq (y-position-slider id 0) .1) (snd-display (format #f ";set y-position-slider .1: ~A?" (y-position-slider id 0))))
	(set! (y-zoom-slider id 0) .5)
	(if (fneq (y-zoom-slider id 0) .5) (snd-display (format #f ";set y-zoom-slider: ~A?" (y-zoom-slider id 0))))
	(close-sound id))

      (let ((id (open-sound "oboe.snd")))
	(prefix-it 1000 id)
	(key (char->integer #\x) 4 id)
	(if (not (= (prefix-arg) 1000)) (snd-display (format #f ";prefix-arg: ~A?" (prefix-arg))))
	(key (char->integer #\b) 4 id)
	(let ((left (left-sample id)))
	  (if (and (not (= left 1000)) (not (= left 1001))) (snd-display (format #f ";u1000: ~A" left))))
	(prefix-it 0 id)
	(key (char->integer #\x) 4 id)
	(key (char->integer #\b) 4 id)
	(let ((left (left-sample id)))
	  (if (not (= left 0)) (snd-display (format #f ";u0: ~A" left))))
	(set! (cursor id) 1234)
	(prefix-it 0 id)
	(key (char->integer #\f) 4 id)
	(let ((cr (cursor id)))
	  (if (not (= cr 1234)) (snd-display (format #f ";0f: ~A" cr))))
	(prefix-it 100 id)
	(key (char->integer #\f) 4 id)
	(let ((cr (cursor id)))
	  (if (not (= cr 1334)) (snd-display (format #f ";100f: ~A" cr))))
	(prefix-it -100 id)
	(key (char->integer #\f) 4 id)
	(let ((cr (cursor id)))
	  (if (not (= cr 1234)) (snd-display (format #f ";-100f: ~A" cr))))
	(prefix-it 1 id)
	(key (char->integer #\f) 4 id)
	(let ((cr (cursor id)))
	  (if (not (= cr 1235)) (snd-display (format #f ";1f: ~A" cr))))
	(key (char->integer #\+) 4 id)
	(key (char->integer #\f) 4 id)
	(let ((cr (cursor id)))
	  (if (not (= cr 1236)) (snd-display (format #f ";+f: ~A" cr))))
	(key (char->integer #\-) 4 id)
	(key (char->integer #\f) 4 id)
	(let ((cr (cursor id)))
	  (if (not (= cr 1235)) (snd-display (format #f ";-f: ~A" cr))))
	(prefix-it 1000 id)
	(key (char->integer #\x) 4 id)
	(key (char->integer #\p) 4 id)
	(let ((left (left-sample id))
	      (right (right-sample id)))
	  (if (> (abs (- right left 1000)) 2) (snd-display (format #f ";1000xp: ~A:~A" left right))))
	(prefix-it 1 id)
	(key (char->integer #\.) 0 id)
	(key (char->integer #\2) 0 id)
	(key (char->integer #\x) 4 id)
	(key (char->integer #\p) 4 id)
	(let ((left (left-sample id))
	      (right (right-sample id)))
	  (if (> (abs (- right left (* 22050 1.2))) 2) (snd-display (format #f ";1.2xp: ~A:~A" left right))))
	
	(prefix-uit 1000 id)
	(key (char->integer #\x) 4 id)
	(key (char->integer #\b) 4 id)
	(let ((left (left-sample id)))
	  (if (and (not (= left 1000)) (not (= left 1001))) (snd-display (format #f ";uu1000: ~A" left))))
	(prefix-uit 0 id)
	(key (char->integer #\x) 4 id)
	(key (char->integer #\b) 4 id)
	(let ((left (left-sample id)))
	  (if (not (= left 0)) (snd-display (format #f ";uu0: ~A" left))))
	(set! (cursor id) 1234)
	(prefix-uit 0 id)
	(key (char->integer #\f) 4 id)
	(let ((cr (cursor id)))
	  (if (not (= cr 1234)) (snd-display (format #f ";u0f: ~A" cr))))
	(prefix-uit 100 id)
	(key (char->integer #\f) 4 id)
	(let ((cr (cursor id)))
	  (if (not (= cr 1334)) (snd-display (format #f ";u100f: ~A" cr))))
	(prefix-uit -100 id)
	(key (char->integer #\f) 4 id)
	(let ((cr (cursor id)))
	  (if (not (= cr 1234)) (snd-display (format #f ";u-100f: ~A" cr))))
	(prefix-uit 1 id)
	(key (char->integer #\f) 4 id)
	(let ((cr (cursor id)))
	  (if (not (= cr 1235)) (snd-display (format #f ";u1f: ~A" cr))))
	(key (char->integer #\+) 4 id)
	(key (char->integer #\f) 4 id)
	(let ((cr (cursor id)))
	  (if (not (= cr 1236)) (snd-display (format #f ";u+f: ~A" cr))))
	(key (char->integer #\-) 4 id)
	(key (char->integer #\f) 4 id)
	(let ((cr (cursor id)))
	  (if (not (= cr 1235)) (snd-display (format #f ";u-f: ~A" cr))))
	(prefix-uit 1000 id)
	(key (char->integer #\x) 4 id)
	(key (char->integer #\p) 4 id)
	(let ((left (left-sample id))
	      (right (right-sample id)))
	  (if (> (abs (- right left 1000)) 2) (snd-display (format #f ";u1000xp: ~A:~A" left right))))
	(prefix-uit 1 id)
	(key (char->integer #\.) 0 id)
	(key (char->integer #\2) 0 id)
	(key (char->integer #\x) 4 id)
	(key (char->integer #\p) 4 id)
	(let ((left (left-sample id))
	      (right (right-sample id)))
	  (if (> (abs (- right left (* 22050 1.2))) 2) (snd-display (format #f ";u1.2xp: ~A:~A" left right))))
	(close-sound id))
      (let ((id (open-sound (car (match-sound-files-1 (lambda (file) 
							(and (>= (mus-sound-chans file) 2)
							     (> (mus-sound-frames file) 1000))))))))
	(set! (sync id) 1)
	(select-sound id)
	(make-region 200 500 id)
	(select-channel 1)
	(key (char->integer #\x) 4 id)
	(key (char->integer #\v) 0 id)
	(let ((x0 (x-bounds id 0))
	      (x1 (x-bounds id 1)))
	  (if (or (fneq (car x0) (car x1)) 
		  (fneq (cadr x0) (cadr x1)))
	      (snd-display (format #f ";C-X v: ~A ~A?" x0 x1))))
	(close-sound id))

      (let ((snd1 (open-sound "oboe.snd"))
	    (snd2 (or (open-sound "2.snd") (open-sound "4.aiff")))
	    (snd3 (open-sound "4.aiff")))
	(define tests 
	  (lambda (f sf fn nv)
	    (if (not (null? f))
		(begin
		  (test-history-channel (car f) (car sf) (car fn) (car nv) snd1 snd2 snd3)
		  (tests (cdr f) (cdr sf) (cdr fn) (cdr nv))))))
	(tests funcs set-funcs func-names new-values)
	(close-sound snd1)
	(close-sound snd2)
	(close-sound snd3))

      (let ((snd2 (open-sound "2.snd")))
	(if (sound? snd2)
	    (play-with-amps snd2 0.2 0.1))
	(close-sound snd2))
      (update-usage-stats)
      (let ((ind (open-sound "pistol.snd")))
	(if (selection-member? ind 0) 
	    (snd-display (format #f ";initial selection-member? ~A ~A?" 
			       (selection-member? ind 0)
			       (selection?))))
	(set! (selection-member? ind 0) #t)
	(if (or (not (selection-member? ind 0))
		(not (selection-member? ind)))
	    (snd-display (format #f ";selection-member? ~A ~A ~A?" 
			       (selection-member? ind 0)
			       (selection-member? ind)
			       (selection?))))
	(if (not (= (selection-length) 1))
	    (snd-display (format #f ";initial selection-length: ~A?" (selection-length))))
	(set! (selection-length) 1200)
	(if (not (= (selection-length) 1200))
	    (snd-display (format #f ";selection-length: 1200 ~A?" (selection-length))))
	(cut)
	(if (selection?) (snd-display (format #f ";selection active after cut?")))
	(undo)
	(if (not (selection?)) (snd-display (format #f ";selection inactive after undo?")))
	(if (or (not (selection-member? ind 0))
		(not (selection-member? ind)))
	    (snd-display (format #f ";selection-member? after undo ~A ~A ~A?" 
			       (selection-member? ind 0)
			       (selection-member? ind)
			       (selection?))))
	(if (or (not (= (selection-length) 1200))
		(not (= (selection-position) 0)))
	    (snd-display (format #f ";selection after undo: '(0 1200) '(~A ~A)?" 
			       (selection-position) 
			       (selection-length))))
	(set! (selection-position) 1000)
	(if (or (not (= (selection-length) 200))
		(not (= (selection-position) 1000)))
	    (snd-display (format #f ";selection after reposition: '(1000 200) '(~A ~A)?" 
			       (selection-position) 
			       (selection-length))))
	(reverse-selection)
	(if (or (not (= (selection-length) 200))
		(not (= (selection-position) 1000)))
	    (snd-display (format #f ";selection after reverse: '(1000 200) '(~A ~A)?" 
			       (selection-position) 
			       (selection-length))))
	(let ((old-frames (frames ind)))
	  (src-selection .5)
	  (if (or (> (abs (- (frames ind) (+ 200 old-frames))) 5)
		  (> (abs (- (selection-length) 400)) 5))
	      (snd-display (format #f ";selection after src .5: '(1000 400) '(~A ~A)?" 
				 (selection-position) 
				 (selection-length))))
	  (undo)
	  (redo)
	  (if (or (> (abs (- (frames ind) (+ 200 old-frames))) 5)
		  (> (abs (- (selection-length) 400)) 5))
	      (snd-display (format #f ";selection after src .5 with undo/redo: '(1000 400) '(~A ~A)?" 
				 (selection-position) 
				 (selection-length))))
	  (undo 3))
	(close-sound ind))
      (set! (show-usage-stats) #f)
      (let* ((ind (open-sound "oboe.snd"))
	     (len (frames ind)))
	(set! (cursor ind) 1200)
	(key (char->integer #\u) 4 ind)
	(key (char->integer #\1) 0 ind)
	(key (char->integer #\0) 0 ind)
	(key (char->integer #\0) 0 ind)
	(key (char->integer #\o) 4 ind)
	(if (not (= (frames ind) (+ 100 len)))
	    (snd-display (format #f ";C-o len: ~A? " (frames))))
	(if (not (provided? 'snd-nogui))
	    (let ((reader (make-sample-reader 1200 ind)))
	      (do ((i 0 (1+ i)))
		  ((= i 100))
		(let ((val (next-sample reader)))
		  (if (fneq val 0.0) (snd-display (format #f ";C-o[~D]: ~A?" i val)))))
	      (free-sample-reader reader)))
	(revert-sound ind)
	(set! (cursor ind) 1200)
	(key (char->integer #\u) 4 ind)
	(key (char->integer #\1) 0 ind)
	(key (char->integer #\0) 0 ind)
	(key (char->integer #\0) 0 ind)
	(key (char->integer #\z) 4 ind)
	(if (not (= (frames ind) len))
	    (snd-display (format #f ";C-z len: ~A? " (frames))))
	(if (not (provided? 'snd-nogui))
	    (let ((reader (make-sample-reader 1200 ind)))
	      (do ((i 0 (1+ i)))
		  ((= i 100))
		(let ((val (next-sample reader)))
		  (if (fneq val 0.0) (snd-display (format #f ";C-z[~D]: ~A?" i val)))))
	      (free-sample-reader reader)))
	(revert-sound ind)
	(set! (cursor ind) 1200)
	(key (char->integer #\u) 4 ind)
	(key (char->integer #\1) 0 ind)
	(key (char->integer #\.) 0 ind)
	(key (char->integer #\0) 0 ind)
	(key (char->integer #\o) 4 ind)
	(if (not (= (frames ind) (+ (srate ind) len)))
	    (snd-display (format #f ";C-o 1.0 len: ~A? " (frames))))
	(if (not (provided? 'snd-nogui))
	    (let ((reader (make-sample-reader 1200 ind)))
	      (do ((i 0 (1+ i)))
		  ((= i (srate ind)))
		(let ((val (next-sample reader)))
		  (if (fneq val 0.0) (snd-display (format #f ";C-o 1.0[~D]: ~A?" i val)))))
	      (free-sample-reader reader)))
	(revert-sound ind)
	(set! (cursor ind) 1200)
	(key (char->integer #\u) 4 ind)
	(key (char->integer #\1) 0 ind)
	(key (char->integer #\.) 0 ind)
	(key (char->integer #\0) 0 ind)
	(key (char->integer #\z) 4 ind)
	(if (not (= (frames ind) len))
	    (snd-display (format #f ";C-z 1.0 len: ~A? " (frames))))
	(if (not (provided? 'snd-nogui))
	    (let ((reader (make-sample-reader 1200 ind)))
	      (do ((i 0 (1+ i)))
		  ((= i (srate ind)))
		(let ((val (next-sample reader)))
		  (if (fneq val 0.0) (snd-display (format #f ";C-z 1.0[~D]: ~A?" i val)))))
	      (free-sample-reader reader)))
	(close-sound ind))

      (let ((ind (open-sound "oboe.snd")))
	(test-selection ind 1200 100 2.0)
	(test-selection ind 600 1200 2.0)
	(test-selection ind 0 100 2.0)
	(test-selection ind 22500 (- 50827 22500) 0.5)
	(test-selection ind 0 50828 0.5)

	(test-selection-to ind 1200 100 1.0)
	(test-selection-to ind 600 1200 0.1)
	(test-selection-to ind 0 100 0.5)
	(test-selection-to ind 22500 (- 50827 22500) 2.0)
	(test-selection-to ind 0 50828 0.5)

	(revert-sound ind)
	(make-region 1200 1200)
	(if (not (selection?)) (snd-display ";no selection from 1 samp region?"))
	(if (not (= (selection-length) 1)) (snd-display (format #f ";1 samp selection: ~A samps?" (selection-length))))
	(scale-selection-to 1.0)
	(if (fneq (sample 1200 ind 0) 1.0) (snd-display (format #f ";scale 1 samp selection: ~A?" (sample 1200 ind 0))))

	(revert-sound ind)
	(make-region 500 1000)
	(src-selection .5)
	(if (> (abs (- (region-length 0) 500)) 1) (snd-display (format #f ";region-length after src-selection: ~A?" (region-length 0))))
	(let ((reg-mix-id (mix-region 1500 0 ind 0)))
	  (if (not (= (mix-length reg-mix-id) (region-length 0)))
	      (snd-display (format #f ";mix-region: ~A != ~A?" (region-length 0) (mix-length reg-mix-id))))
	  (let ((sel-mix-id (mix-selection 2500 ind 0)))
	    (if (not (= (selection-length) (mix-length sel-mix-id)))
		(snd-display (format #f ";mix-selection: ~A != ~A?" (selection-length) (mix-length sel-mix-id))))
	    (if (> (abs (- (* 2 (mix-length reg-mix-id)) (mix-length sel-mix-id))) 3)
		(snd-display (format #f ";mix selection and region: ~A ~A (~A ~A)?" 
				   (mix-length reg-mix-id) (mix-length sel-mix-id) (region-length 0) (selection-length))))
	    (insert-selection 3000 ind 0)
	    (delete-selection)
	    (revert-sound ind)))
	(close-sound ind)
	)

      (if (file-exists? "storm.snd")
	  (let ((ind (open-sound "storm.snd")))
	    (set! (sinc-width) 10)
	    (time (src-sound 1.3))
	    (time (env-sound '(0 0 1 1 2 0)))
	    (time (filter-sound '(0 1 .2 0 .5 1 1 0) 20))      ; FIR direct form
	    (time (filter-sound '(0 0 .1 0 .11 1 .12 0 1 0) 2048)) ; convolution
	    (time (map-chan (map-silence .01 #f)))
	    (close-sound ind)))
      (if (file-exists? "1a.snd")
	  (let ((ind1 (open-sound "1a.snd")))
	    (time (rubber-sound 1.25))
	    (close-sound ind1)))

      (let* ((oboe (open-sound "oboe.snd"))
	     (a4 (open-sound "4.aiff"))
	     (sr (srate oboe))
	     (fr (frames oboe 0))
	     (typ (header-type oboe))
	     (frm (data-format oboe))
	     (loc (data-location oboe))
	     (com (comment oboe)))
	(save-sound-as "test.aif" oboe mus-aifc)
	(let ((oboe-aif (open-sound "test.aif")))
	  (if (not (= (header-type oboe-aif) mus-aifc)) (snd-display (format #f ";oboe-aif header: ~A?" (mus-header-type-name (header-type oboe-aif)))))
	  (set! (srate oboe-aif) (* sr 2.0))
	  (if (fneq (* sr 2.0) (srate oboe-aif)) (snd-display (format #f ";set! srate: ~A ~A" (* sr 2.0) (srate oboe-aif))))
	  (set! (header-type oboe-aif) mus-next)
	  (if (not (= (header-type oboe-aif) mus-next)) (snd-display (format #f ";set! header: ~A?" (mus-header-type-name (header-type oboe-aif)))))
	  (set! (data-location oboe-aif) 28)
	  (if (not (= (data-location oboe-aif) 28)) (snd-display (format #f ";set! data-location: ~A?" (data-location oboe-aif))))
	  (set! (data-format oboe-aif) mus-mulaw)
	  (if (not (= (data-format oboe-aif) mus-mulaw)) (snd-display (format #f ";set! format: ~A?" (mus-data-format-name (data-format oboe-aif)))))
	  (close-sound oboe-aif)
	  (delete-file "test.aif")
	  (set! (selected-sound) a4)
	  (if (not (= (selected-sound) a4)) (snd-display (format #f ";set! selected-sound: ~A ~A?" (selected-sound) a4)))
	  (set! (selected-channel) 2)
	  (if (not (= (selected-channel a4) 2)) (snd-display (format #f ";set! selected-channel: ~A?" (selected-channel a4))))
	  (set! (selected-channel a4) 3)
	  (if (not (= (selected-channel a4) 3)) (snd-display (format #f ";set! selected-channel a4: ~A?" (selected-channel a4))))
	  (close-sound a4)
	  (close-sound oboe)))

      (load "env.scm")
      (if (fneq (envelope-interp .1 '(0 0 1 1)) 0.1) 
	  (snd-display (format #f ";envelope-interp .1 -> ~A?" (envelope-interp .1 '(0 0 1 1)))))
      (if (fneq (envelope-interp .1 '(0 0 1 1) 32.0) 0.01336172) 
	  (snd-display (format #f ";envelope-interp .013 -> ~A?" (envelope-interp .1 '(0 0 1 1) 32.0))))
      (if (fneq (envelope-interp .1 '(0 0 1 1) .012) 0.36177473) 
	  (snd-display (format #f ";envelope-interp .361 -> ~A?" (envelope-interp .1 '(0 0 1 1) .012)))) 
      (if (not (feql (window-envelope 1.0 3.0 '(0.0 0.0 5.0 1.0)) (list 1.0 0.2 3.0 0.6))) 
	  (snd-display (format #f ";window-envelope: ~A?" (window-envelope 1.0 3.0 '(0.0 0.0 5.0 1.0)))))
      (if (not (feql (multiply-envelopes '(0 0 1 1) '(0 0 1 1 2 0)) (list 0 0 0.5 0.5 1 0))) 
	  (snd-display (format #f ";multiply-envelopes: ~A?" (multiply-envelopes '(0 0 1 1) '(0 0 1 1 2 0)))))
      (if (fneq (max-envelope '(0 0 1 1 2 3 4 0)) 3.0)
	  (snd-display (format #f ";max-envelope: ~A?" (max-envelope '(0 0 1 1 2 3 4 0)))))
      (if (fneq (integrate-envelope '(0 0 1 1)) 0.5) 
	  (snd-display (format #f ";integrate-envelope: ~A?" (integrate-envelope '(0 0 1 1)))))
      (if (fneq (integrate-envelope '(0 1 1 1)) 1.0) 
	  (snd-display (format #f ";integrate-envelope: ~A?" (integrate-envelope '(0 1 1 1)))))
      (if (fneq (integrate-envelope '(0 0 1 1 2 .5)) 1.25) 
	  (snd-display (format #f ";integrate-envelope: ~A?" (integrate-envelope '(0 0 1 1 2 .5)))))
      (if (not (feql (stretch-envelope '(0 0 1 1) .1 .2) (list 0 0 0.2 0.1 1.0 1))) 
	  (snd-display (format #f ";stretch-envelope att: ~A?" (stretch-envelope '(0 0 1 1) .1 .2))))
      (if (not (feql (stretch-envelope '(0 0 1 1 2 0) .1 .2 1.5 1.6) (list 0 0 0.2 0.1 1.1 1 1.6 0.5 2.0 0))) 
	  (snd-display (format #f ";stretch-envelope dec: ~A?" (stretch-envelope '(0 0 1 1 2 0) .1 .2 1.5 1.6))))
      ))

;;; ---------------- test 16: define-syntax ----------------
(if (or full-test (= snd-test 16))
    (let ((hi 32)
	  (ho 0))
      (if (procedure? trace-hook) (trace-hook 16))
      (load "loop.scm")
      (set! hi (progn (dotimes (k 3) (set! ho (1+ ho))) ho))
      (if (not (= hi 3)) (snd-display (format #f ";dotimes: ~A ~A?" ho hi)))
      (loop for k from 0 to 12 do (set! ho (+ ho 1)))
      (if (not (= ho 16)) (snd-display (format #f ";loop: ~A?" ho)))
      (set! hi (prog1 (+ 2 ho) (set! ho 3)))
      (if (not (= hi 18)) (snd-display (format #f ";prog1: ~A?" hi)))
      (if (provided? 'snd-new-smob) (load "goopsnd.scm"))))


;;; ---------------- test 17: guile-gtk dialogs and graphics ----------------

(define (-> x0 y0 size snd chn)
  "draw an arrow pointing (from the left) at the point (x0 y0)"
  (let ((points (make-vector 8)))
    (define (point i x y)
      (vector-set! points (* i 2) x)
      (vector-set! points (+ (* i 2) 1) y))
    (define (arrow-head x y)
      (point 0 x y)
      (point 1 (- x (* 2 size)) (- y size))
      (point 2 (- x (* 2 size)) (+ y size))
      (point 3 x y)
      (fill-polygon points snd chn))
    (arrow-head x0 y0)
    (fill-rectangle (- x0 (* 4 size)) 
		    (inexact->exact (- y0 (* .4 size)))
		    (* 2 size)
		    (inexact->exact (* .8 size))
		    snd chn)))  

(if (and (or full-test (= snd-test 17))
	 (not (provided? 'snd-nogui)))
    (begin
      (if (procedure? trace-hook) (trace-hook 17))
      (if (and (provided? 'snd-gtk)
	       (provided? 'snd-guile-gtk))
	  (begin
	    (load "snd-gtk.scm")
	    (make-control-dialog)
	    (make-amp-dialog)))
      (load "musglyphs.scm")
      (load "draw.scm")
      (add-hook! after-graph-hook display-previous-edits)
      (add-hook! lisp-graph-hook display-energy)
      (let* ((ind (open-sound "oboe.snd"))
	     (wids (channel-widgets))
	     (wids1 (channel-widgets (selected-sound)))
	     (wids2 (channel-widgets (selected-sound) (selected-channel))))
	(do ((i 1 (1+ i)))
	    ((= i 4))
	  (scale-by 0.5)
	  (set! (x-bounds) (list 0 (* i .3))))
	(revert-sound ind)
	(draw-bass-clef 100 100 100 0 ind 0)
	(update-graph ind 0)
	(draw-fermata 200 100 60 0 ind 0)
	(draw-line 100 100 200 200 ind 0)
	(draw-dot 300 300 10 ind 0)
	(draw-string "hiho" 20 20 ind 0)
	(draw-dots #(25 25 50 50 100 100) 10 ind 0)
	(-> 100 50 10 ind 0)
	(fill-rectangle 20 20 100 100 ind 0)
	(erase-rectangle 30 30 20 20 ind 0)
	(make-bezier 0 0 20 20 40 30 60 10 10)
	(update-graph ind 0)
	(reset-hook! after-graph-hook)
	(reset-hook! lisp-graph-hook)
	(let* ((ind1 (open-sound "2.snd"))
	       (wids3 (channel-widgets ind1 0))
	       (wids4 (channel-widgets ind1 1)))
	  (if (or (not (list? wids))
		  (not (list? wids3))
		  (not (= (length wids1) 1))
		  (not (= (length wids2) 1))
		  (= (car wids3) (car wids4))
		  (= (car wids3) (car wids))
		  (not (= (car wids) (car wids1)))
		  (not (= (car wids) (car wids2))))
	      (snd-display (format #f ";channel-widgets confused: ~A ~A ~A ~A ~A" wids wids1 wids2 wids3 wids4)))
	  (hide-widget (car (channel-widgets)))
	  (show-widget (car (channel-widgets)))
	  (close-sound ind1))
	(close-sound ind))))


;;; ---------------- test 18: enved ----------------

(load "enved.scm")
(if (and (or full-test (= snd-test 18))
	 (not (provided? 'snd-nogui)))
    (begin
      (if (procedure? trace-hook) (trace-hook 18))
      (start-enveloping)
      (let ((nind (open-sound "oboe.snd")))
	(if (not (equal? (channel-envelope nind 0) (list 0.0 1.0 1.0 1.0)))
	    (snd-display (format #f ";channel-envelope: ~A?" (channel-envelope nind 0))))
	(set! (channel-envelope nind 0) (list 0 0 1 1 2 0))
	(if (not (equal? (channel-envelope nind 0) (list 0 0 1 1 2 0)))
	    (snd-display (format #f ";set channel-envelope: ~A?" (channel-envelope nind 0))))
	(close-sound nind)
	(stop-enveloping))))


;;; ---------------- test 19: save and restore ----------------

(define sfile 0)

(if (or full-test (= snd-test 19))
    (let ((nind (open-sound "oboe.snd")))
      (if (procedure? trace-hook) (trace-hook 19))
      (add-mark 123)
      (delete-sample 12)
      (set! (x-bounds) (list .2 .4))
      (let ((old-bounds (x-bounds)))
	(save-state (save-state-file))
	(save-options "test.temp")
	(close-sound nind)
	(load (save-state-file))
	(let ((ind (find-sound "oboe.snd")))
	  (if (or (> (abs (- (car old-bounds) (car (x-bounds ind 0)))) .05)
		  (> (abs (- (cadr old-bounds) (cadr (x-bounds ind 0)))) .05))
	      (snd-display (format #f ";save bounds: ~A" (x-bounds ind 0))))
	  (if (not (= (length (marks ind 0)) 1))
	      (snd-display (format #f ";save marks: ~A?" (marks ind 0))))
	  (if (not (= (mark-sample (car (marks ind 0))) 122))
	      (snd-display (format #f ";save mark: ~A?" (mark-sample (car (marks ind 0))))))
	  (if (not (= (edit-position ind 0) 1))
	      (snd-display (format #f ";save edit-position: ~A" (edit-position ind 0))))
	  (if (not (equal? (edit-fragment 1 ind 0) (list "delete-sample" "delete" 12 1)))
	      (snd-display (format #f ";save edits: ~A" (edit-fragment 1 ind 0))))
	  (if (not (equal? (edit-tree ind 0) 
			   (list (list 0 0 0 11 1.0) (list 12 0 13 50827 1.0) (list 50827 -2 0 0 0.0))))
	      (snd-display (format #f ";save edit tree: ~A" (edit-tree ind 0))))
	  (close-sound ind)

	  (let ((err (catch 'cannot-save
		   (lambda () 
		     (save-state "/bad/bad.save"))
		   (lambda args 12345))))
	    (if (not (= err 12345)) (snd-display (format #f ";save-state err: ~A?" err))))

	  (let ((err (catch 'cannot-save
		   (lambda () 
		     (save-listener "/bad/bad.save"))
		   (lambda args 12345))))
	    (if (not (= err 12345)) (snd-display (format #f ";save-listener err: ~A?" err))))
	  ))
      (set! nind (open-sound "oboe.snd"))
      (set! (sample 1) .5)
      (delete-sample 100)
      (insert-sample 10 .5)
      (save-edit-history "hiho.scm")
      (revert-sound nind)
      (set! sfile nind)
      (load "hiho.scm")
      (if (not (equal? (edit-fragment 1) '("set-sample" "set" 1 1))) (snd-display (format #f ";save-edit-history 1: ~A?" (edit-fragment 1))))
      (if (not (equal? (edit-fragment 2) '("delete-sample" "delete" 100 1))) (snd-display (format #f ";save-edit-history 2: ~A?" (edit-fragment 2))))
      (if (not (equal? (edit-fragment 3) '("insert-sample" "insert" 10 1))) (snd-display (format #f ";save-edit-history 3: ~A?" (edit-fragment 3))))
      (let ((str (display-edits)))
	(if (not (string=? str "
EDITS: 3

 (begin) [0:2]:
   (at 0, cp->sounds[0][0:50827, 1.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 50828, cp->sounds[-2][0:0, 0.000000])

 (set 1 1) ; set-sample [1:4]:
   (at 0, cp->sounds[0][0:0, 1.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 1, cp->sounds[1][0:0, 1.000000]) [buf: 1] 
   (at 2, cp->sounds[0][2:50827, 1.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 50828, cp->sounds[-2][0:0, 0.000000])

 (delete 100 1) ; delete-sample [2:5]:
   (at 0, cp->sounds[0][0:0, 1.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 1, cp->sounds[1][0:0, 1.000000]) [buf: 1] 
   (at 2, cp->sounds[0][2:99, 1.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 100, cp->sounds[0][101:50827, 1.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 50827, cp->sounds[-2][0:0, 0.000000])

 (insert 10 1) ; insert-sample [3:7]:
   (at 0, cp->sounds[0][0:0, 1.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 1, cp->sounds[1][0:0, 1.000000]) [buf: 1] 
   (at 2, cp->sounds[0][2:9, 1.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 10, cp->sounds[2][0:0, 1.000000]) [buf: 1] 
   (at 11, cp->sounds[0][10:99, 1.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 101, cp->sounds[0][101:50827, 1.000000]) [file: /home/bil/cl/oboe.snd[0]]
   (at 50828, cp->sounds[-2][0:0, 0.000000])
"))
	    (snd-display (format #f ";display-edits: ~A?" str))))
      (revert-sound nind)
      (close-sound nind)
      
      ))

;;; ---------------- test 20: errors ----------------

(define (check-error-tag expected-tag thunk)
  (let ((tag
	 (catch #t 
		thunk
		(lambda args (car args)))))
    (if (not (eq? tag expected-tag))
	(snd-display (format #f "check-error-tag ~A from ~A: ~A" 
			   expected-tag (procedure-source thunk) tag)))))
(defvar env3 '(0 0 1 1))

(define procs (list 
	       activate-listener add-mark add-player add-sound-file-extension add-to-main-menu add-to-menu add-transform amp append-to-minibuffer
	       as-one-edit ask-before-overwrite audio-input-device audio-output-device audio-state-file auto-resize auto-update autocorrelate axis-info
	       axis-label-font axis-numbers-font backward-graph backward-mark backward-mix backward-sample basic-color bind-key bold-button-font
	       bomb button-font c-g? call-apply change-menu-label change-samples-with-origin channel-style channel-sync channel-widgets channels
	       chans clear-audio-inputs close-sound close-sound-file color-cutoff color-dialog color-inverted color-scale color->list colormap
	       color? comment contrast contrast-amp contrast-func contrasting convolve-arrays convolve-selection-with convolve-with corruption-time
	       count-matches current-font cursor cursor-color cursor-follows-play cursor-size cursor-style cut dac-folding dac-size data-clipped
	       data-color data-format data-location default-output-chans default-output-format default-output-srate default-output-type define-envelope
	       delete-mark delete-marks delete-region delete-sample delete-samples delete-samples-with-origin delete-selection dialog-widgets
	       dismiss-all-dialogs display-edits dot-size draw-dot draw-dots draw-line draw-lines draw-string edit-header-dialog edit-fragment edit-position
	       edit-tree edits env-base env-selection env-sound enved-active-env enved-base enved-clipping enved-dBing enved-dialog enved-exping enved-power
	       enved-selected-env enved-target enved-waveform-color enved-waving eps-file eps-left-margin eps-bottom-margin erase-rectangle expand
	       expand-hop expand-length expand-ramp expanding fft fft-beta fft-log-frequency fft-log-magnitude fft-size fft-style fft-window ffting
	       fht file-dialog file-name fill-polygon fill-rectangle filter-sound filter-dBing filter-env filter-env-order filter-env-in-hz filter-order
	       filter-selection filter-waveform-color filtering find find-mark find-sound finish-progress-report fit-data-on-open foreground-color
	       forward-graph forward-mark forward-mix forward-sample frames free-mix-sample-reader free-sample-reader free-track-sample-reader graph
	       graph-color graph-cursor graph-data graph->ps graph-style graphing graphs-horizontal header-type help-dialog hide-listener help-text-font
	       highlight-color id-region in insert-region insert-sample insert-samples insert-samples-with-origin insert-selection insert-silence
	       insert-sound just-sounds key key-binding left-sample line-size listener-color listener-font listener-prompt listener-selection listener-text-color
	       load-colormap load-font loop-samples main-widgets make-color make-graph-data make-mix-sample-reader make-player make-region
	       make-region-sample-reader make-sample-reader make-track-sample-reader map-across-all-chans map-across-chans map-across-sound-chans
	       map-chan map-chans map-sound-chans map-all-chans mark-color mark-name mark-sample mark-sync mark-sync-max mark->sound marks mark?
	       max-fft-peaks max-regions max-sounds maxamp menu-sensitive menu-widgets minibuffer-history-length min-dB mix mixes mix-amp mix-amp-env
	       mix-anchor mix-chans mix-color mix-track mix-length mix-locked mix-name mix? mix-panel mix-position mix-region mix-sample-reader?
	       mix-selection mix-sound mix-sound-channel mix-sound-index mix-speed mix-tag-height mix-tag-width mix-tag-y mix-vct mix-waveform-height
	       movies new-sound next-mix-sample next-sample next-track-sample normalize-fft normalize-on-open normalize-view open-alternate-sound
	       open-raw-sound open-sound open-sound-file orientation-dialog peak-env-info peaks play play-and-wait play-mix play-region play-selection
	       play-track player? position-color position->x position->y prefix-arg preload-directory preload-file previous-files-sort previous-sample 
	       print-length progress-report prompt-in-minibuffer  protect-region pushed-button-color raw-chans raw-format raw-srate read-only
	       read-peak-env-info-file recorder-autoload recorder-buffer-size recorder-dialog recorder-file recorder-gain recorder-in-amp recorder-in-format
	       recorder-max-duration recorder-out-amp recorder-out-chans recorder-out-format recorder-srate recorder-trigger redo region-chans region-dialog
	       region-id region-length region-maxamp region-sample region-samples region-samples->vct region-srate regions region? remove-from-menu
	       report-in-minibuffer reset-control-panel restore-control-panel restore-marks restore-region reverb-decay reverb-feedback reverb-funcs
	       reverb-length reverb-lowpass reverb-scale reverbing reverse-sound reverse-selection revert-sound right-sample sample sample-reader-at-end?
	       sample-reader? samples samples->vct samples->sound-data sash-color save-control-panel save-dir save-edit-history save-envelopes
	       save-listener save-macros save-marks save-options save-region save-selection save-sound save-sound-as save-state save-state-file
	       save-state-on-exit scale-by scale-selection-by scale-selection-to scale-to scan-across-all-chans scan-across-chans scan-across-sound-chans
	       scan-chan scan-chans scan-sound-chans scan-all-chans search-procedure select-all select-channel select-mix select-region select-sound
	       selected-channel selected-data-color selected-graph-color selected-mix selected-mix-color selected-sound selection-position selection-color
	       selection-creates-region selection-length selection-member? selection? short-file-name show-axes show-backtrace show-controls show-fft-peaks
	       show-indices show-listener show-marks show-mix-waveforms show-selection-transform show-usage-stats show-y-zero sinc-width smooth
	       smooth-selection snd-apropos snd-print snd-spectrum snd-tempnam snd-version sound-files-in-directory sound-loop-info sound-widgets
	       soundfont-info sound? sounds spectro-cutoff spectro-hop spectro-start spectro-x-angle spectro-x-scale spectro-y-angle spectro-y-scale
	       spectro-z-angle spectro-z-scale speed speed-style speed-tones squelch-update srate src-sound src-selection start-playing start-progress-report
	       stop-player stop-playing swap-channels syncd-marks sync temp-dir text-focus-color tiny-font track-sample-reader? transform-dialog transform-sample
	       transform-samples transform-samples->vct transform-size transform-type trap-segfault unbind-key undo uniting update-fft update-graph
	       update-lisp-graph update-sound update-usage-stats use-raw-defaults use-sinc-interp vct->samples vct->sound-file verbose-cursor view-sound
	       vu-font vu-font-size vu-size wavelet-type waving wavo wavo-hop wavo-trace window-height window-width window-x window-y with-mix-tags
	       write-peak-env-info-file x-axis-style x-bounds x-position-slider x->position x-zoom-slider y-bounds y-position-slider y->position
	       y-zoom-slider zero-pad zoom-color zoom-focus-style mus-sound-samples mus-sound-frames mus-sound-duration mus-sound-datum-size
	       mus-sound-data-location mus-sound-chans mus-sound-srate mus-sound-header-type mus-sound-data-format mus-sound-length mus-sound-type-specifier
	       mus-header-type-name mus-data-format-name mus-sound-comment mus-sound-write-date mus-data-format-bytes-per-sample mus-sound-loop-info
	       mus-audio-report mus-audio-sun-outputs mus-sound-max-amp mus-sound-max-amp-exists? mus-sound-open-input mus-sound-open-output
	       mus-sound-reopen-output mus-sound-close-input mus-sound-close-output mus-sound-read mus-sound-write mus-sound-seek mus-sound-seek-frame
	       mus-file-set-data-clipped mus-file-prescaler mus-file-set-prescaler mus-expand-filename make-sound-data sound-data-ref sound-data-set!
	       sound-data? sound-data-length sound-data-chans sound-data->vct vct->sound-data all-pass all-pass? amplitude-modulate array->file
	       array-interp asymmetric-fm asymmetric-fm? buffer->frame buffer->sample buffer-empty? buffer? clear-array comb comb? contrast-enhancement
	       convolution convolve convolve? db->linear degrees->radians delay delay? dot-product env env-interp env? file->array file->frame file->frame?
	       file->sample file->sample? filter filter? fir-filter fir-filter? formant formant-bank formant? frame* frame+ frame->buffer frame->file
	       frame->file? frame->frame frame->list frame->sample frame-ref frame-set! frame? granulate granulate? hz->radians iir-filter iir-filter?
	       in-any in-hz ina inb linear->db locsig locsig-ref locsig-reverb-ref locsig-reverb-set! locsig-set! locsig? make-all-pass make-asymmetric-fm
	       make-buffer make-comb make-convolve make-delay make-env make-fft-window make-file->frame make-file->sample make-filter make-fir-filter
	       make-formant make-frame make-frame->file make-granulate make-iir-filter make-locsig make-mixer make-notch make-one-pole make-one-zero
	       make-oscil make-ppolar make-pulse-train make-rand make-rand-interp make-readin make-sample->file make-sawtooth-wave make-sine-summation
	       make-square-wave make-src make-sum-of-cosines make-table-lookup make-triangle-wave make-two-pole make-two-zero make-wave-train make-waveshape
	       make-zpolar mixer* mixer-ref mixer-set! mixer? multiply-arrays mus-a0 mus-a1 mus-a2 mus-array-print-length mus-b1 mus-b2 mus-channel
	       mus-channels mus-close mus-cosines mus-data mus-feedback mus-feedforward mus-fft mus-formant-radius mus-frequency mus-hop mus-increment
	       mus-input? mus-length mus-location mus-mix mus-order mus-output? mus-phase mus-ramp mus-random mus-scaler mus-srate mus-xcoeffs mus-ycoeffs
	       notch notch? one-pole one-pole? one-zero one-zero? oscil oscil-bank oscil? out-any outa outb outc outd partials->polynomial partials->wave
	       partials->waveshape phase-partials->wave polynomial pulse-train pulse-train? radians->degrees radians->hz rand rand-interp rand-interp?
	       rand? readin readin? rectangular->polar restart-env ring-modulate sample->buffer sample->file sample->file? sample->frame sawtooth-wave
	       sawtooth-wave? sine-summation sine-summation? spectrum square-wave square-wave? src src? sum-of-cosines sum-of-cosines? table-lookup
	       table-lookup? tap triangle-wave triangle-wave? two-pole two-pole? two-zero two-zero? wave-train wave-train? waveshape waveshape?
	       make-vct vct-add! vct-subtract! vct-copy vct-length vct-multiply! vct-offset! vct-ref vct-scale! vct-fill! vct-set! mus-audio-describe
	       vct-peak vct? list->vct vct->list vector->vct vct-move! vct-subseq vct little-endian?))

(define set-procs (list 
		   amp ask-before-overwrite audio-input-device audio-output-device audio-state-file auto-resize auto-update
		   axis-label-font axis-numbers-font basic-color bold-button-font button-font channel-style channel-sync color-cutoff color-inverted
		   color-scale contrast contrast-amp contrast-func contrasting corruption-time current-font cursor cursor-color cursor-follows-play
		   cursor-size cursor-style dac-folding dac-size data-clipped data-color default-output-chans default-output-format default-output-srate
		   default-output-type dot-size env-base enved-active-env enved-base enved-clipping enved-dBing enved-exping enved-power enved-selected-env
		   enved-target enved-waveform-color enved-waving eps-file eps-left-margin eps-bottom-margin expand expand-hop expand-length
		   expand-ramp expanding fft-beta fft-log-frequency fft-log-magnitude fft-size fft-style fft-window ffting filter-dBing filter-env
		   filter-env-order filter-env-in-hz filter-order filter-waveform-color filtering fit-data-on-open foreground-color graph-color graph-cursor
		   graph-style graphing graphs-horizontal help-text-font highlight-color just-sounds left-sample line-size listener-color listener-font
		   listener-prompt listener-text-color mark-color mark-name mark-sample mark-sync max-fft-peaks max-regions menu-sensitive min-dB mix-amp
		   mix-amp-env mix-anchor mix-chans mix-color mix-track mix-length mix-locked mix-name mix-position mix-speed mix-tag-height
		   mix-tag-width mix-tag-y mix-waveform-height movies normalize-fft normalize-on-open normalize-view position-color prefix-arg
		   previous-files-sort print-length pushed-button-color recorder-autoload recorder-buffer-size recorder-dialog recorder-file recorder-gain
		   recorder-in-amp recorder-in-format recorder-max-duration recorder-out-amp recorder-out-chans recorder-out-format recorder-srate
		   recorder-trigger reverb-decay reverb-feedback reverb-funcs reverb-length reverb-lowpass reverb-scale reverbing sash-color
		   save-dir save-state-file save-state-on-exit search-procedure selected-data-color selected-graph-color selected-mix-color
		   selection-color selection-creates-region show-axes show-backtrace show-controls show-fft-peaks show-indices show-marks
		   show-mix-waveforms show-selection-transform show-usage-stats show-y-zero sinc-width spectro-cutoff spectro-hop spectro-start
		   spectro-x-angle spectro-x-scale spectro-y-angle spectro-y-scale spectro-z-angle spectro-z-scale speed speed-style speed-tones
		   squelch-update sync temp-dir text-focus-color tiny-font transform-type trap-segfault uniting use-raw-defaults use-sinc-interp verbose-cursor
		   vu-font vu-font-size vu-size wavelet-type waving wavo-hop wavo-trace with-mix-tags x-axis-style zero-pad zoom-color zoom-focus-style ))

(if (or full-test (= snd-test 20))
    (begin
      (if (procedure? trace-hook)  (trace-hook 20))

      (for-each (lambda (n)
		  (let ((tag
			 (catch #t
				(lambda ()
				  (n 123))
				(lambda args (car args)))))
		    (if (not (eq? tag 'no-such-sound))
			(snd-display (format #f ";snd no-such-sound ~A: ~A" n tag)))))
		(list amp bomb call-apply channels chans close-sound comment contrast contrast-amp contrasting data-format data-location
		      expand expand-hop expand-length expand-ramp expanding file-name filter-dBing filter-env filter-order filtering
		      finish-progress-report frames header-type progress-report read-only reset-control-panel restore-control-panel
		      reverb-decay reverb-feedback reverb-length reverb-lowpass reverb-scale reverbing save-control-panel select-sound
		      short-file-name sound-loop-info soundfont-info speed speed-style speed-tones srate uniting start-progress-report
		      sync swap-channels))
      
      (for-each (lambda (arg)
		  (for-each (lambda (n)
			      (let ((tag
				     (catch #t
					    (lambda ()
					      (n arg))
					    (lambda args (car args)))))
				(if (not (eq? tag 'wrong-type-arg))
				    (snd-display (format #f ";snd wrong-type-arg ~A: ~A ~A" n tag arg)))))
			    (list amp bomb call-apply channels chans close-sound comment contrast contrast-amp contrasting data-format data-location
				  expand expand-hop expand-length expand-ramp expanding file-name filter-dBing filter-env filter-order filtering
				  finish-progress-report frames header-type read-only reset-control-panel restore-control-panel
				  reverb-decay reverb-feedback reverb-length reverb-lowpass reverb-scale reverbing save-control-panel select-sound
				  short-file-name sound-loop-info soundfont-info speed speed-style speed-tones srate uniting start-progress-report
				  sync swap-channels)))
		(list (current-module) (sqrt -1.0) 1.5 "hiho"))

      (for-each (lambda (arg)
		  (let ((ctr 0))
		    (for-each (lambda (n)
				(let ((tag
				       (catch #t
					      (lambda ()
						(set! (n arg) 0))
					      (lambda args (car args)))))
				  (if (not (eq? tag 'wrong-type-arg))
				      (snd-display (format #f ";snd set wrong-type-arg ~D: ~A: ~A ~A" ctr n tag arg)))
				  (set! ctr (+ ctr 1))))
			      (list amp channels chans comment contrast contrast-amp contrasting data-format data-location expand expand-hop 
				    expand-length expand-ramp expanding filter-dBing filter-env filter-order filtering frames header-type 
				    read-only reverb-decay reverb-feedback reverb-length reverb-lowpass reverb-scale reverbing sound-loop-info 
				    soundfont-info speed speed-style speed-tones srate uniting sync))))
		(list (current-module) (sqrt -1.0) 1.5 "hiho"))

      (let ((index (open-sound "obtest.snd")))
	(for-each (lambda (arg)
		    (let ((ctr 0))
		      (for-each (lambda (n)
				  (let ((tag
					 (catch #t
						(lambda ()
						  (set! (n index) arg))
						(lambda args (car args)))))
				    (if (not (eq? tag 'wrong-type-arg))
					(snd-display (format #f ";snd safe set wrong-type-arg ~A: ~A ~A ~A" ctr n tag arg)))
				    (set! ctr (+ ctr 1))))
			      (list amp contrast contrast-amp contrasting expand expand-hop expand-length expand-ramp expanding filter-dBing 
				    filter-env filter-order filtering reverb-decay reverb-feedback reverb-length reverb-lowpass reverb-scale 
				    reverbing speed speed-style speed-tones uniting sync))))
		  (list (current-module) (sqrt -1.0) "hiho"))
	(close-sound index))

      (for-each (lambda (arg)
		  (for-each (lambda (n)
			      (let ((tag
				     (catch #t
					    (lambda ()
					      (n arg))
					    (lambda args (car args)))))
				(if (not (eq? tag 'wrong-type-arg))
				    (snd-display (format #f ";vct 0 wrong-type-arg ~A: ~A ~A" n tag arg)))))
			    (list make-vct vct-copy vct-length vct->list vct-peak)))
		(list (current-module) "hiho" (sqrt -1.0) 1.5 (list 1 0) #(0 1)))

      (for-each (lambda (arg1)
		  (for-each (lambda (arg2)
			      (for-each (lambda (n)
					  (let ((tag
						 (catch #t
							(lambda ()
							  (n arg1 arg2))
							(lambda args (car args)))))
					    (if (not (or (eq? tag 'wrong-type-arg)
							 (eq? tag 'wrong-number-of-args)
							 (eq? tag 'mus-error)))
						(snd-display (format #f ";vct 1 wrong-whatever ~A: ~A ~A ~A" n tag arg1 arg2)))))
					(list vct-add! vct-subtract! vct-multiply! vct-ref vct-scale! vct-fill! vct-do! vcts-do! vct-map! vcts-map!)))
			    (list (current-module) "hiho" (sqrt -1.0) 1.5 (list 1 0) #(0 1))))
		  (list (current-module) "hiho" (sqrt -1.0) 1.5 (list 1 0) #(0 1)))

      (for-each (lambda (arg)
		  (for-each (lambda (n)
			      (let ((tag
				     (catch #t
					    (lambda ()
					      (n (make-vct 3) arg))
					    (lambda args (car args)))))
				(if (not (eq? tag 'wrong-type-arg))
				    (snd-display (format #f ";vct 2 wrong-type-arg ~A: ~A" n tag)))))
			    (list vct-add! vct-subtract! vct-multiply! vct-ref vct-scale! vct-fill! vct-do! vct-map!)))
		(list (current-module) "hiho" (sqrt -1.0) (list 1 0) #(0 1)))

        (let ((tag
	       (catch #t
		      (lambda ()
			(make-vct -23))
		      (lambda args (car args)))))
	  (if (not (eq? tag 'mus-error))
	      (snd-display (format #f ";make-vct -23: ~A" tag))))

        (let* ((v (make-vct 3)))
	  (let ((tag
		 (catch #t
			(lambda ()
			  (vct-ref v 12))
			(lambda args (car args)))))
	    (if (not (eq? tag 'mus-error))
		     (snd-display (format #f ";vct[12]: ~A" tag)))))

	(for-each (lambda (arg)
		    (for-each (lambda (n)
				(let ((tag
				       (catch #t
					      (lambda ()
						(n arg))
					      (lambda args (car args)))))
				  (if tag
				      (snd-display (format #f ";?proc ~A: ~A" n tag)))))
			      (list all-pass? asymmetric-fm? buffer? comb? convolve? delay? env? file->frame? file->sample? 
				    filter? fir-filter? formant? frame->file? frame? granulate? iir-filter? locsig? mixer? mus-input? 
				    mus-output? notch? one-pole? one-zero? oscil? phase-vocoder? pulse-train? rand-interp? rand? readin? 
				    sample->file? sawtooth-wave? sine-summation? square-wave? src? sum-of-cosines? table-lookup? 
				    triangle-wave? two-pole? two-zero? wave-train? waveshape? sound? color? mix-sample-reader? 
				    sample-reader? track-sample-reader? vct? )))
		(list (current-module) "hiho" (sqrt -1.0) 1.5 (list 1 0) #(0 1)))
	(gc)

	(for-each (lambda (n)
		    (let ((tag
			   (catch #t
				  (lambda ()
				    (n (make-oscil 440)))
				  (lambda args (car args)))))
		      (if tag
			  (snd-display (format #f ";oscil?proc ~A: ~A" n tag)))))
		  (list all-pass? asymmetric-fm? buffer? comb? convolve? delay? env? file->frame? file->sample? 
			filter? fir-filter? formant? frame->file? frame? granulate? iir-filter? locsig? mixer? mus-input? 
			mus-output? notch? one-pole? one-zero? phase-vocoder? pulse-train? rand-interp? rand? readin? 
			sample->file? sawtooth-wave? sine-summation? square-wave? src? sum-of-cosines? table-lookup? 
			triangle-wave? two-pole? two-zero? wave-train? waveshape? sound? color? mix-sample-reader? 
			sample-reader? track-sample-reader? vct?))

	(for-each (lambda (n)
		    (let ((tag
			   (catch #t
				  (lambda ()
				    (n))
				  (lambda args (car args)))))
		      (if (not (eq? tag 'no-active-selection))
			  (snd-display (format #f ";selection ~A: ~A" n tag)))))
		  (list cut reverse-selection selection-position selection-length selection-to-temp selection-to-temps smooth-selection
			scale-selection-by scale-selection-to play-selection insert-selection delete-selection mix-selection))

	(for-each (lambda (n)
		    (let ((tag
			   (catch #t
				  (lambda ()
				    (n 0.0))
				  (lambda args (car args)))))
		      (if (not (eq? tag 'no-active-selection))
			  (snd-display (format #f ";selection ~A: ~A" n tag)))))
		  (list src-selection filter-selection env-selection))

	(for-each (lambda (arg)
		    (for-each (lambda (n)
				(let ((tag
				       (catch #t
					      (lambda ()
						(n arg))
					      (lambda args (car args)))))
				  (if (not (eq? tag 'wrong-type-arg))
				      (snd-display (format #f ";clm ~A: ~A ~A" n tag arg)))))
			      (list all-pass asymmetric-fm buffer->sample clear-array comb convolve db->linear degrees->radians delay env formant frame->list 
				    granulate hz->radians in-hz linear->db make-all-pass make-asymmetric-fm make-buffer make-comb make-convolve make-delay make-env 
				    make-file->frame make-file->sample make-filter make-fir-filter make-formant make-frame make-granulate make-iir-filter make-locsig 
				    make-notch make-one-pole make-one-zero make-oscil make-ppolar make-pulse-train make-rand make-rand-interp make-readin 
				    make-sawtooth-wave make-sine-summation make-square-wave make-src make-sum-of-cosines make-table-lookup make-triangle-wave 
				    make-two-pole make-two-zero make-wave-train make-waveshape make-zpolar mus-a0 mus-a1 mus-a2 mus-b1 mus-b2 mus-channel mus-channels 
				    mus-cosines mus-data mus-feedback mus-feedforward mus-formant-radius mus-frequency mus-hop mus-increment mus-length mus-location 
				    mus-order mus-phase mus-ramp mus-random mus-run mus-scaler mus-set-rand-seed mus-set-srate mus-xcoeffs mus-ycoeffs notch 
				    one-pole one-zero oscil partials->polynomial partials->wave partials->waveshape phase-partials->wave phase-vocoder pulse-train 
				    radians->degrees radians->hz rand rand-interp readin restart-env sawtooth-wave sine-summation square-wave src sum-of-cosines 
				    table-lookup tap triangle-wave two-pole two-zero wave-train waveshape)))
		(list (current-module) (sqrt -1.0)))
	(gc)

	(for-each (lambda (n)
		    (let ((tag
			   (catch #t
				  (lambda ()
				    (n (make-oscil) (current-module)))
				  (lambda args (car args)))))
		      (if (not (eq? tag 'wrong-type-arg))
			  (snd-display (format #f ";oscil clm ~A: ~A" n tag)))))
		  (list all-pass array-interp asymmetric-fm comb contrast-enhancement convolution convolve convolve-files delay dot-product env-interp 
			file->frame file->sample filter fir-filter formant formant-bank frame* frame+ frame->buffer frame->frame frame-ref frame->sample 
			granulate iir-filter ina inb locsig-ref locsig-reverb-ref make-all-pass make-asymmetric-fm make-buffer make-comb 
			make-convolve make-delay make-env make-fft-window make-filter make-fir-filter make-formant make-frame make-granulate make-iir-filter 
			make-locsig make-notch make-one-pole make-one-zero make-oscil make-phase-vocoder make-ppolar make-pulse-train make-rand 
			make-rand-interp make-readin make-sawtooth-wave make-sine-summation make-square-wave make-src make-sum-of-cosines make-table-lookup 
			make-triangle-wave make-two-pole make-two-zero make-wave-train make-waveshape make-zpolar mixer* multiply-arrays 
			mus-bank notch one-pole one-zero oscil oscil-bank partials->polynomial partials->wave partials->waveshape phase-partials->wave 
			phase-vocoder polynomial pulse-train rand rand-interp rectangular->polar ring-modulate sample->buffer sample->frame sawtooth-wave 
			sine-summation square-wave src sum-of-cosines sum-of-sines table-lookup tap triangle-wave two-pole two-zero wave-train waveshape ))

	(for-each (lambda (n)
		    (let ((tag
			   (catch #t
				  (lambda ()
				    (set! (n (make-oscil)) (current-module)))
				  (lambda args (car args)))))
		      (if (not (eq? tag 'wrong-type-arg))
			  (snd-display (format #f ";mus-gen ~A: ~A" n tag)))))
		  (list mus-a0 mus-a1 mus-a2 mus-b1 mus-b2 mus-bank mus-channel mus-channels mus-cosines mus-data mus-feedback mus-feedforward 
			mus-formant-radius mus-frequency mus-hop mus-increment mus-length mus-location mus-mix mus-order mus-phase mus-ramp 
			mus-random mus-run mus-scaler mus-xcoeffs mus-ycoeffs))
	(gc)

	(for-each (lambda (n)
		    (let ((tag
			   (catch #t
				  (lambda ()
				    (n (current-module)))
				  (lambda args (car args)))))
		      (if (not (eq? tag 'wrong-type-arg))
			  (snd-display (format #f ";mus-sound ~A: ~A" n tag)))))
		  (list mus-sound-samples mus-sound-frames mus-sound-duration mus-sound-datum-size mus-sound-data-location mus-sound-chans
			mus-sound-srate mus-sound-header-type mus-sound-data-format mus-sound-length mus-sound-type-specifier mus-header-type-name
			mus-data-format-name mus-sound-comment mus-sound-write-date mus-data-format-bytes-per-sample mus-sound-loop-info
			mus-sound-max-amp mus-sound-max-amp-exists?))

	(for-each (lambda (n)
		    (let ((tag
			   (catch #t
				  (lambda ()
				    (n))
				  (lambda args (car args)))))
		      (if (not (eq? tag 'wrong-number-of-args))
			  (snd-display (format #f ";no arg mus-sound ~A: ~A" n tag)))))
		  (list mus-sound-samples mus-sound-frames mus-sound-duration mus-sound-datum-size mus-sound-data-location mus-sound-chans
			mus-sound-srate mus-sound-header-type mus-sound-data-format mus-sound-length mus-sound-type-specifier mus-header-type-name
			mus-data-format-name mus-sound-comment mus-sound-write-date mus-data-format-bytes-per-sample mus-sound-loop-info
			mus-sound-max-amp mus-sound-max-amp-exists?))

	(for-each (lambda (n)
		    (let ((tag
			   (catch #t
				  (lambda ()
				    (n "/bad/baddy"))
				  (lambda args (car args)))))
		      (if (not (eq? tag 'mus-error))
			  (snd-display (format #f ";bad file mus-sound ~A: ~A" n tag)))))
		  (list mus-sound-samples mus-sound-frames mus-sound-duration mus-sound-datum-size mus-sound-data-location mus-sound-chans
			mus-sound-srate mus-sound-header-type mus-sound-data-format mus-sound-length mus-sound-type-specifier mus-sound-comment 
			mus-sound-write-date mus-sound-max-amp mus-sound-max-amp-exists?))

	(let ((ctr 0))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (n (current-module)))
				    (lambda args (car args)))))
			(if (not (eq? tag 'wrong-type-arg))
			    (snd-display (format #f ";~D: chn (no snd) procs ~A: ~A" ctr n tag)))
			(set! ctr (+ ctr 1))))
		    (list backward-graph backward-sample channel-sync channel-widgets convolve-with count-matches cursor cursor-follows-play cursor-position 
			  cursor-size cursor-style delete-sample display-edits dot-size draw-dots draw-lines edit-fragment edit-position edit-tree edits 
			  fft-beta fft-log-frequency fft-log-magnitude fft-size fft-style fft-window ffting find forward-graph forward-mark forward-mix 
			  forward-sample graph graph-style graphing insert-region insert-sound left-sample line-size make-graph-data map-across-all-chans 
			  map-across-chans map-across-sound-chans map-chan map-chans map-sound-chans map-all-chans max-fft-peaks maxamp min-dB mix-region 
			  normalize-fft peak-env-info peaks play play-and-wait position->x position->y reverse-sound revert-sound right-sample sample 
			  samples->vct samples->sound-data save-sound save-sound-as scan-across-all-chans scan-across-chans scan-across-sound-chans 
			  scan-chan scan-chans scan-sound-chans scan-all-chans select-channel show-axes show-fft-peaks show-marks show-mix-waveforms 
			  show-y-zero spectro-cutoff spectro-hop spectro-start spectro-x-angle spectro-x-scale spectro-y-angle spectro-y-scale 
			  spectro-z-angle spectro-z-scale squelch-update transform-sample transform-samples transform-samples->vct transform-size 
			  transform-type update-fft update-graph update-lisp-graph update-sound wavelet-type waving wavo wavo-hop wavo-trace x-bounds 
			  x-position-slider x-zoom-slider y-bounds y-position-slider y-zoom-slider zero-pad))
	  (gc))

	(let ((ctr 0))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (n 0 (current-module)))
				    (lambda args (car args)))))
			(if (not (eq? tag 'wrong-type-arg))
			    (snd-display (format #f ";~D: chn (no chn) procs ~A: ~A" ctr n tag)))
			(set! ctr (+ ctr 1))))
		    (list backward-graph backward-sample channel-sync channel-widgets convolve-with count-matches cursor cursor-position 
			  cursor-size cursor-style delete-sample display-edits dot-size draw-dots draw-lines edit-fragment edit-position edit-tree edits 
			  fft-beta fft-log-frequency fft-log-magnitude fft-size fft-style fft-window ffting find forward-graph forward-mark forward-mix 
			  forward-sample graph graph-style graphing insert-region insert-sound left-sample line-size make-graph-data map-across-all-chans 
			  map-across-chans map-across-sound-chans map-chan map-chans map-sound-chans map-all-chans max-fft-peaks maxamp min-dB mix-region 
			  normalize-fft peak-env-info peaks play play-and-wait position->x position->y reverse-sound right-sample sample 
			  samples->vct samples->sound-data save-sound-as scan-across-all-chans scan-across-chans scan-across-sound-chans 
			  scan-chan scan-chans scan-sound-chans scan-all-chans show-axes show-fft-peaks show-marks show-mix-waveforms 
			  show-y-zero spectro-cutoff spectro-hop spectro-start spectro-x-angle spectro-x-scale spectro-y-angle spectro-y-scale 
			  spectro-z-angle spectro-z-scale squelch-update transform-sample transform-samples transform-samples->vct transform-size 
			  transform-type update-fft update-graph update-lisp-graph wavelet-type waving wavo wavo-hop wavo-trace x-bounds 
			  x-position-slider x-zoom-slider y-bounds y-position-slider y-zoom-slider zero-pad)))

        (let ((ctr 0))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (n 1234))
				    (lambda args (car args)))))
			(if (not (eq? tag 'no-such-sound))
			    (snd-display (format #f ";~D: chn procs ~A: ~A" ctr n tag)))
			(set! ctr (+ ctr 1))))
		    (list backward-graph backward-sample channel-sync channel-widgets cursor cursor-follows-play cursor-position cursor-size cursor-style 
			  delete-sample display-edits dot-size edit-fragment edit-position edit-tree edits env-sound fft-beta fft-log-frequency fft-log-magnitude 
			  fft-size fft-style fft-window ffting filter-sound forward-graph forward-mark forward-mix forward-sample graph-data graph-style 
			  graphing insert-region left-sample line-size make-graph-data max-fft-peaks maxamp min-dB normalize-fft peak-env-info play 
			  play-and-wait position->x position->y redo reverse-sound revert-sound right-sample sample samples->vct samples->sound-data 
			  save-sound scale-by scale-to show-axes show-fft-peaks show-marks show-mix-waveforms show-y-zero spectro-cutoff spectro-hop 
			  spectro-start spectro-x-angle spectro-x-scale spectro-y-angle spectro-y-scale spectro-z-angle spectro-z-scale squelch-update 
			  src-sound transform-sample transform-samples transform-samples->vct transform-size transform-type undo update-fft update-graph 
			  update-lisp-graph update-sound wavelet-type waving wavo wavo-hop wavo-trace x-bounds x-position-slider x->position x-zoom-slider 
			  y-bounds y-position-slider y->position y-zoom-slider zero-pad )))

        (let ((ctr 0))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (n 0 1234))
				    (lambda args (car args)))))
			(if (not (eq? tag 'no-such-sound))
			    (snd-display (format #f ";~D: snd(1) chn procs ~A: ~A" ctr n tag)))
			(set! ctr (+ ctr 1))))
		    (list backward-graph backward-sample delete-sample edit-fragment forward-graph forward-mark forward-mix forward-sample graph-data 
			  graph-style play play-and-wait position->x position->y redo scale-by scale-to undo x->position y->position)))

        (let ((ctr 0)
	      (index (open-sound "oboe.snd")))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (n 0 index 1234))
				    (lambda args (car args)))))
			(if (not (eq? tag 'no-such-channel))
			    (snd-display (format #f ";~D: snd(1 1234) chn procs ~A: ~A" ctr n tag)))
			(set! ctr (+ ctr 1))))
		    (list backward-graph backward-sample delete-sample edit-fragment forward-graph forward-mark forward-mix forward-sample graph-data 
			  play play-and-wait position->x position->y redo scale-by scale-to undo x->position y->position))
	  (close-sound index))

        (let ((ctr 0)
	      (index (open-sound "oboe.snd")))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (n index 1234))
				    (lambda args (car args)))))
			(if (not (eq? tag 'no-such-channel))
			    (snd-display (format #f ";~D: chn procs ~A: ~A" ctr n tag)))
			(set! ctr (+ ctr 1))))
		    (list channel-sync channel-widgets cursor cursor-position cursor-size cursor-style display-edits dot-size 
			  edit-position edit-tree edits fft-beta fft-log-frequency fft-log-magnitude fft-size fft-style fft-window 
			  ffting graph-style graphing left-sample line-size make-graph-data max-fft-peaks maxamp min-dB normalize-fft
			  peak-env-info reverse-sound right-sample show-axes show-fft-peaks show-marks show-mix-waveforms show-y-zero 
			  spectro-cutoff spectro-hop spectro-start spectro-x-angle spectro-x-scale spectro-y-angle spectro-y-scale 
			  spectro-z-angle spectro-z-scale squelch-update transform-samples->vct transform-size transform-type update-fft 
			  update-graph update-lisp-graph wavelet-type waving wavo wavo-hop wavo-trace x-bounds x-position-slider x-zoom-slider 
			  y-bounds y-position-slider y-zoom-slider zero-pad ))
	  (close-sound index))

        (let ((ctr 0)
	      (index (open-sound "oboe.snd")))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (set! (n index 0) (current-module)))
				    (lambda args (car args)))))
			(if (not (eq? tag 'wrong-type-arg))
			    (snd-display (format #f ";~D: set chn procs ~A: ~A" ctr n tag)))
			(set! ctr (+ ctr 1))))
		    (list channel-sync channel-widgets cursor cursor-position
			  display-edits dot-size 
			  edit-tree edits fft-beta fft-log-frequency fft-log-magnitude fft-size fft-style fft-window 
			  ffting graph-style graphing left-sample line-size make-graph-data max-fft-peaks maxamp min-dB normalize-fft
			  peak-env-info reverse-sound right-sample show-axes show-fft-peaks show-marks show-mix-waveforms show-y-zero 
			  spectro-cutoff spectro-hop spectro-start spectro-x-angle spectro-x-scale spectro-y-angle spectro-y-scale 
			  spectro-z-angle spectro-z-scale squelch-update transform-samples->vct transform-size transform-type update-fft 
			  update-graph update-lisp-graph wavelet-type waving wavo wavo-hop wavo-trace x-bounds x-position-slider x-zoom-slider 
			  y-bounds y-position-slider y-zoom-slider zero-pad
			  ))
	  (gc)
	  (close-sound index))

        (let ((ctr 0))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (n (current-module)))
				    (lambda args (car args)))))
			(if (not (eq? tag 'wrong-type-arg))
			    (snd-display (format #f ";~D: mix procs ~A: ~A" ctr n tag)))
			(set! ctr (+ ctr 1))))
		    (list backward-mix mix-amp mix-amp-env mix-anchor mix-chans mix-track mix-length mix-locked mix-name mix? 
			  mix-position mix-sound-channel mix-sound-index mix-speed mix-tag-y))) 

        (let ((ctr 0))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (n 1234))
				    (lambda args (car args)))))
			(if (not (eq? tag 'no-such-mix))
			    (snd-display (format #f ";~D: mix procs ~A: ~A" ctr n tag)))
			(set! ctr (+ ctr 1))))
		    (list mix-amp mix-anchor mix-chans mix-track mix-length mix-locked mix-name
			  mix-position mix-sound-channel mix-sound-index mix-speed mix-tag-y)))
 
        (let ((ctr 0))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (set! (n 1234) (current-module)))
				    (lambda args (car args)))))
			(if (not (eq? tag 'wrong-type-arg))
			    (snd-display (format #f ";~D: mix procs ~A: ~A" ctr n tag)))
			(set! ctr (+ ctr 1))))
		    (list mix-anchor mix-chans mix-track mix-length mix-locked mix-name
			  mix-position mix-sound-channel mix-sound-index mix-speed mix-tag-y))) 

        (let* ((ctr 0)
	       (index (open-sound "oboe.snd"))
	       (id (mix-sound "oboe.snd" 10)))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (set! (n id) (current-module)))
				    (lambda args (car args)))))
			(if (not (eq? tag 'wrong-type-arg))
			    (snd-display (format #f ";~D: mix procs ~A: ~A" ctr n tag)))
			(set! ctr (+ ctr 1))))
		    (list mix-anchor mix-chans mix-track mix-length mix-locked mix-name
			  mix-position mix-sound-channel mix-sound-index mix-speed mix-tag-y))
	  (close-sound index))

        (let ((ctr 0))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (n (current-module)))
				    (lambda args (car args)))))
			(if (not (eq? tag 'wrong-type-arg))
			    (snd-display (format #f ";~D: mark procs ~A: ~A" ctr n tag)))
			(set! ctr (+ ctr 1))))
		    (list add-mark backward-mark mark-name mark-sample mark-sync mark->sound mark? delete-mark delete-marks find-mark))) 

        (let ((ctr 0))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (n 1234))
				    (lambda args (car args)))))
			(if (not (eq? tag 'no-such-mark))
			    (snd-display (format #f ";~D: no mark procs ~A: ~A" ctr n tag)))
			(set! ctr (+ ctr 1))))
		    (list mark-name mark-sample mark-sync mark->sound delete-mark))) 

        (let* ((ctr 0)
	       (index (open-sound "oboe.snd"))
	       (id (add-mark 0 index 0)))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (set! (n id) (current-module)))
				    (lambda args (car args)))))
			(if (not (eq? tag 'wrong-type-arg))
			    (snd-display (format #f ";~D: set mark procs ~A: ~A" ctr n tag)))
			(set! ctr (+ ctr 1))))
		    (list mark-name mark-sample mark-sync))
	  (close-sound index)
	  (gc))

	(for-each (lambda (arg)
		    (let ((ctr 0))
		      (for-each (lambda (n)
				  (let ((tag
					 (catch #t
						(lambda ()
						  (n arg))
						(lambda args (car args)))))
				    (if (not (eq? tag 'wrong-type-arg))
					(snd-display (format #f ";~D: region procs ~A: ~A ~A" ctr n tag arg)))
				    (set! ctr (+ ctr 1))))
				(list select-region play-region id-region region-chans region-id region-length region-maxamp region-sample 
				      region-samples region-samples->vct region-srate region? delete-region))))
		  (list (current-module) #(0 1) (sqrt -1.0) "hiho" (list 0 1)))

        (let ((ctr 0))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (n 1234))
				    (lambda args (car args)))))
			(if (not (eq? tag 'no-such-region))
			    (snd-display (format #f ";~D: (no) region procs ~A: ~A" ctr n tag)))
			(set! ctr (+ ctr 1))))
		    (list select-region play-region id-region region-chans region-id region-length region-maxamp region-srate delete-region))) 

        (let ((ctr 0))
	  (for-each (lambda (n)
		      (let ((tag
			     (catch #t
				    (lambda ()
				      (set! (n) (current-module)))
				    (lambda args (car args)))))
			(if (not (eq? tag 'wrong-type-arg))
			    (snd-display (format #f ";~D: misc procs ~A: ~A" ctr n tag)))
			(set! ctr (+ ctr 1))))
		    (list filter-env-order filter-env-in-hz filter-waveform-color ask-before-overwrite audio-state-file auto-resize auto-update 
			  axis-label-font axis-numbers-font basic-color bind-key bold-button-font button-font channel-style color-cutoff color-dialog 
			  color-inverted color-scale cursor-color dac-folding dac-size data-clipped data-color default-output-chans default-output-format 
			  default-output-srate default-output-type enved-active-env enved-base enved-clipping enved-dBing enved-dialog enved-exping 
			  enved-power enved-selected-env enved-target enved-waveform-color enved-waving eps-file eps-left-margin eps-bottom-margin 
			  fit-data-on-open foreground-color graph-color graph-cursor help-text-font highlight-color just-sounds key-binding listener-color 
			  listener-font listener-prompt listener-text-color max-regions max-sounds minibuffer-history-length mix-waveform-height 
			  movies normalize-on-open position-color previous-files-sort print-length pushed-button-color
			  recorder-autoload recorder-buffer-size recorder-file recorder-in-format recorder-max-duration recorder-out-chans recorder-out-format 
			  recorder-srate recorder-trigger sash-color save-dir save-state-file save-state-on-exit selected-channel selected-data-color 
			  selected-graph-color selected-mix selected-mix-color selected-sound selection-creates-region show-backtrace show-controls 
			  show-indices show-listener show-selection-transform show-usage-stats sinc-width temp-dir text-focus-color tiny-font trap-segfault 
			  unbind-key use-sinc-interp verbose-cursor vu-font vu-font-size vu-size window-height window-width window-x 
			  window-y with-mix-tags x-axis-style zoom-color zoom-focus-style mix-tag-height mix-tag-width ))
	  (gc))

	(for-each (lambda (n)
		    (let* ((hook (car n))
			   (hook-name (cadr n))
			   (tag
			    (catch #t
				   (lambda () (add-hook! hook (lambda () (+ 1 2))))
				   (lambda args (car args)))))
		      (if (not (eq? tag 'wrong-type-arg))
			  (snd-display (format #f ";hooks ~A: ~A" hook-name tag)))))
		  (list (list after-graph-hook 'after-graph-hook)
			(list lisp-graph-hook 'lisp-graph-hook)
			(list before-fft-hook 'before-fft-hook)
			(list mix-position-changed-hook 'mix-position-changed-hook)
			(list stop-playing-channel-hook 'stop-playing-channel-hook)
			(list save-hook 'save-hook)
			(list mus-error-hook 'mus-error-hook)
			(list mouse-enter-graph-hook 'mouse-enter-graph-hook)
			(list mouse-leave-graph-hook 'mouse-leave-graph-hook)
			(list open-raw-sound-hook 'open-raw-sound-hook)
			(list select-channel-hook 'select-channel-hook)
			(list after-open-hook 'after-open-hook)
			(list close-hook 'close-hook)
			(list just-sounds-hook 'just-sounds-hook)
			(list mark-click-hook 'mark-click-hook)
			(list mark-drag-hook 'mark-drag-hook)
			(list mix-amp-changed-hook 'mix-amp-changed-hook)
			(list mix-speed-changed-hook 'mix-speed-changed-hook)
			(list name-click-hook 'name-click-hook)
			(list open-hook 'open-hook)
			(list output-comment-hook 'output-comment-hook)
			(list multichannel-mix-hook 'multichannel-mix-hook)
			(list play-hook 'play-hook)
			(list snd-error-hook 'snd-error-hook)
			(list snd-warning-hook 'snd-warning-hook)
			(list start-hook 'start-hook)
			(list start-playing-hook 'start-playing-hook)
			(list stop-playing-hook 'stop-playing-hook)
			(list stop-playing-region-hook 'stop-playing-region-hook)
			(list mouse-enter-listener-hook 'mouse-enter-listener-hook)
			(list mouse-leave-listener-hook 'mouse-leave-listener-hook)
			(list property-changed-hook 'property-changed-hook)
			(list select-sound-hook 'select-sound-hook)
			(list select-region-hook 'select-region-hook)
			(list select-mix-hook 'select-mix-hook)
			(list during-open-hook 'during-open-hook)
			(list fft-hook 'fft-hook)
			(list mouse-enter-label-hook 'mouse-enter-label-hook)
			(list mouse-leave-label-hook 'mouse-leave-label-hook)
			(list initial-graph-hook 'initial-graph-hook)
			(list graph-hook 'graph-hook)
			(list key-press-hook 'key-press-hook)
			(list mouse-drag-hook 'mouse-drag-hook)
			(list mouse-press-hook 'mouse-press-hook)
			(list mouse-release-hook 'mouse-release-hook)
			(list enved-hook 'enved-hook)))

	(check-error-tag 'no-such-envelope (lambda () (env-base "not-an-env")))
	(check-error-tag 'no-such-envelope (lambda () (set! (env-base "not-an-env") .321)))
	(check-error-tag 'no-such-envelope (lambda () (set! (enved-active-env) "not-an-env")))
	(check-error-tag 'wrong-type-arg (lambda () (set! (env-base env3) (list 0 0 1 1))))
	(check-error-tag 'cannot-save (lambda () (save-envelopes "/bad/baddy")))
	(check-error-tag 'bad-arity (lambda () (set! (search-procedure) (lambda (a b c) a))))
	(check-error-tag 'no-such-sound (lambda () (set! (search-procedure 1234) (lambda (a) a))))
	(check-error-tag 'bad-arity (lambda () (bind-key (char->integer #\p) 0 (lambda (a) (play-often (max 1 (prefix-arg)))) #t)))
	
	(let ((ind (open-sound "oboe.snd"))) 
	  (check-error-tag 'mus-error (lambda () (set! (filter-env ind) '())))
	  (check-error-tag 'bad-arity (lambda () (set! (search-procedure ind) (lambda (a b c) #t))))
	  (check-error-tag 'bad-arity (lambda () (map-chan (lambda (a b c) 1.0))))
	  (check-error-tag 'bad-arity (lambda () (scan-chan (lambda (a b c) 1.0))))
	  (check-error-tag 'bad-arity (lambda () (set! (cursor-style ind 0) (lambda (a) 32))))
	  (check-error-tag 'bad-arity (lambda () (find (lambda () 1.0))))
	  (check-error-tag 'bad-arity (lambda () (count-matches (lambda () 1.0))))
	  (check-error-tag 'no-such-graphics-context (lambda () (draw-line 0 0 1 1 ind 0 1234)))
	  (check-error-tag 'no-such-graphics-context (lambda () (foreground-color ind 0 1234)))
	  (check-error-tag 'no-such-graphics-context (lambda () (current-font ind 0 1234)))
	  (check-error-tag 'no-such-graphics-context (lambda () (graph-data (list 0 1) ind 0 1234 0 1 0)))
	  (check-error-tag 'no-such-axis (lambda () (position->x 100 ind 0 1234)))
	  (check-error-tag 'no-such-axis (lambda () (position->y 100 ind 0 1234)))
	  (check-error-tag 'no-such-axis (lambda () (x->position 100 ind 0 1234)))
	  (check-error-tag 'no-such-axis (lambda () (y->position 100 ind 0 1234)))
	  (check-error-tag 'no-such-axis (lambda () (axis-info ind 0 1234)))
	  (check-error-tag 'no-such-channel (lambda () (axis-info ind 1234)))
	  (check-error-tag 'no-such-sound (lambda () (axis-info 1234)))
	  (check-error-tag 'impossible-bounds (lambda () (set! (x-bounds) (list 0 0))))
	  (check-error-tag 'impossible-bounds (lambda () (set! (x-bounds) (list .1 -.1))))
	  (check-error-tag 'no-such-file (lambda () (play "/bad/baddy.snd")))
	  (check-error-tag 'no-such-sound (lambda () (play 0 1234)))
	  (check-error-tag 'no-such-channel (lambda () (play 0 ind 1234)))
	  (check-error-tag 'cannot-save (lambda () (save-sound-as "/bad/baddy.snd")))
	  (check-error-tag 'no-such-sound (lambda () (transform-sample 0 1 1234)))
	  (check-error-tag 'no-such-channel (lambda () (transform-sample 0 1 ind 1234)))
	  (check-error-tag 'no-such-sound (lambda () (samples->vct 0 100 1234)))
	  (check-error-tag 'no-such-channel (lambda () (samples->vct 0 100 ind 1234)))
	  (check-error-tag 'no-such-sound (lambda () (samples->sound-data 0 100 1234)))
	  (check-error-tag 'no-such-channel (lambda () (samples->sound-data 0 100 ind 1234)))
	  (check-error-tag 'no-such-sound (lambda () (graph #(0 1) "hi" 0 1 0 1 1234)))
	  (check-error-tag 'no-such-channel (lambda () (graph #(0 1) "hi" 0 1 0 1 ind 1234)))
	  (check-error-tag 'no-active-selection (lambda () (save-selection "/bad/baddy.snd")))
	  (check-error-tag 'no-such-region (lambda () (save-region 1234 "/bad/baddy.snd")))
	  (make-region 0 100 ind 0)
	  (check-error-tag 'cannot-save (lambda () (save-selection "/bad/baddy.snd")))
	  (check-error-tag 'cannot-save (lambda () (save-region 0 "/bad/baddy.snd")))
	  (check-error-tag 'no-such-sound (lambda () (make-track-sample-reader 0 0 1234 0)))
	  (check-error-tag 'no-such-track (lambda () (make-track-sample-reader 0 0 ind 0)))
	  (check-error-tag 'no-such-mix (lambda () (make-mix-sample-reader 1234)))
	  (close-sound ind))
	
	(check-error-tag 'bad-arity (lambda () (set-reverb-funcs abs map +)))
	(check-error-tag 'bad-arity (lambda () (set-contrast-func (lambda () 1.0))))
	(check-error-tag 'bad-arity (lambda () (add-transform "hiho" "time" 0 1 (lambda () 1.0))))
	(check-error-tag 'cannot-save (lambda () (save-options "/bad/baddy")))
	(check-error-tag 'cannot-save (lambda () (save-state "/bad/baddy")))
	(check-error-tag 'no-such-menu (lambda () (add-to-menu 1234 "hi" (lambda () #f))))
	(check-error-tag 'bad-arity (lambda () (add-to-main-menu "hi" (lambda (a b) #f))))
	(check-error-tag 'bad-arity (lambda () (add-to-menu 1 "hi" (lambda (a b) #f))))
	(check-error-tag 'cannot-save (lambda () (open-sound-file "/bad/baddy.snd")))
	(check-error-tag 'no-such-file (lambda () (close-sound-file 1234 0)))
	(check-error-tag 'wrong-type-arg (lambda () (help-dialog (list 0 1) "hiho")))
	(check-error-tag 'no-such-sound (lambda () (edit-header-dialog 1234)))
	(check-error-tag 'no-such-sound (lambda () (make-track-sample-reader 0 0)))
	(check-error-tag 'wrong-type-arg (lambda () (yes-or-no-p (list 0 1))))
	(check-error-tag 'no-such-file (lambda () (open-sound "/bad/baddy.snd")))
	(check-error-tag 'no-such-file (lambda () (open-raw-sound "/bad/baddy.snd" 1 22050 mus-lshort)))
	(check-error-tag 'no-such-file (lambda () (open-alternate-sound "/bad/baddy.snd")))
	(check-error-tag 'no-such-file (lambda () (view-sound "/bad/baddy.snd")))
	(check-error-tag 'no-such-file (lambda () (make-sample-reader 0 "/bad/baddy.snd")))
	(check-error-tag 'no-such-region (lambda () (make-region-sample-reader 0 1234567)))

	;; now try everything! (all we care about here is that Snd keeps running)

	;; ---------------- 0 Args
	(for-each 
	 (lambda (n)
	   (catch #t
		  (lambda () (n))
		  (lambda args (car args))))
	 procs)
	(dismiss-all-dialogs)
	(gc)

	;; ---------------- 1 Arg
	(for-each 
	 (lambda (arg)
	   (for-each 
	    (lambda (n)
	      ;(display (format #f "(~A ~A)~%" n arg))
	      (catch #t
		     (lambda () (n arg))
		     (lambda args (car args))))
	    procs))
	 (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (make-color 1 0 0)  #(0 1) 3/4 'mus-error (sqrt -1.0) (make-delay 32)
	       (lambda () #t) (current-module) (make-sound-data 2 3) :order 0 1 -1 (make-hook 2) #f #t '() 12345678901234567890))
	(gc)

	;; ---------------- 2 Args
	(for-each 
	 (lambda (arg1)
	   ;(display (format #f "1: ~A" arg1))
	   (for-each 
	    (lambda (arg2)
	      (for-each 
	       (lambda (n)
		 ;(display (format #f "(~A ~A ~A)~%" n arg1 arg2))
		 (catch #t
			(lambda () (n arg1 arg2))
			(lambda args (car args)))
		 ;(gc)
		 )
	       procs))
	    (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (make-color 1 0 0) #(0 1) 3/4 
		  (sqrt -1.0) (make-delay 32) :feedback -1 0 #f #t '() 12345678901234567890)))
	 (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (make-color 1 0 0) #(0 1) 3/4 
	       (sqrt -1.0) (make-delay 32) :frequency -1 0 #f #t '() 12345678901234567890))
	(gc)

	;; ---------------- set! no Args
	(for-each 
	 (lambda (arg)
	   (for-each 
	    (lambda (n)
	      ;(display (format #f "(3 ~A ~A)~%" n arg))
	      (catch #t
		     (lambda () (set! (n) arg))
		     (lambda args (car args))))
	    set-procs))
	 (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (make-color 1 0 0)  #(0 1) 3/4 'mus-error (sqrt -1.0) (make-delay 32)
	       (lambda () #t) (current-module) (make-sound-data 2 3) :order 0 1 -1 (make-hook 2) #f #t '() 12345678901234567890))
	(gc)

	;; ---------------- set! 1 Arg
	(for-each 
	 (lambda (arg1)
	   (for-each 
	    (lambda (arg2)
	      (for-each 
	       (lambda (n)
		 ;(display (format #f "(~A ~A ~A)~%" n arg1 arg2))
		 (catch #t
			(lambda () (set! (n arg1) arg2))
			(lambda args (car args))))
	       set-procs))
	    (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (make-color 1 0 0) #(0 1) 3/4 
		  (sqrt -1.0) (make-delay 32) :feedback -1 0 #f #t '() 12345678901234567890)))
	 (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (make-color 1 0 0) #(0 1) 3/4 
	       (sqrt -1.0) (make-delay 32) :frequency -1 0 #f #t '() 12345678901234567890))
	(gc)

	;; ---------------- set! 2 Args
	(for-each 
	 (lambda (arg1)
	   (for-each 
	    (lambda (arg2)
	      (for-each 
	       (lambda (arg3)
		 ;(display (format #f "(~A ~A ~A )~%" arg1 arg2 arg3))
		 (for-each 
		  (lambda (n)
		    (catch #t
			   (lambda () (set! (n arg1 arg2) arg3))
			   (lambda args (car args))))
		  set-procs))
	       (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (make-color 1 0 0) #(0 1) 3/4 
		     (sqrt -1.0) (make-delay 32) :feedback -1 0 #f #t '() 12345678901234567890)))
	    (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (make-color 1 0 0) #(0 1) 3/4 
		  (sqrt -1.0) (make-delay 32) :frequency -1 0 #f #t '() 12345678901234567890)))
	 (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (make-color 1 0 0) #(0 1) 3/4 
	       (sqrt -1.0) (make-delay 32) :frequency -1 0 #f #t '() 12345678901234567890))
	(gc)

	(if (> tests 1)
	    ;; these can take awhile...
	    (begin
	      ;; ---------------- 3 Args
	      (for-each 
	       (lambda (arg1)
		 (begin
		   ;(display (format #f "3: ~A " arg1))
		   (for-each
		    (lambda (arg2)
		      (for-each 
		       (lambda (arg3)
			 (for-each
			  (lambda (n)
			    ;(display (format #f "(~A ~A ~A ~A)~%" n arg1 arg2 arg3))
			    (catch #t
				   (lambda () (n arg1 arg2 arg3))
				   (lambda args (car args))))
			  procs))
		       (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) #(0 1) (sqrt -1.0) (make-delay 32) :start -1 0)))
		    (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) #(0 1) (sqrt -1.0) (make-delay 32) :phase -1 0))))
	       (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) #(0 1) (sqrt -1.0) (make-delay 32) :channels -1 0))
	      (gc)

	      ;; ---------------- 4 Args
	      (for-each 
	       (lambda (arg1)
		 (begin
		   ;(display (format #f "4: ~A " arg1))
		   (for-each 
		    (lambda (arg2)
		      (for-each 
		       (lambda (arg3)
			 (for-each 
			  (lambda (arg4)
			    (for-each
			     (lambda (n)
			       ;(display (format #f "(~A ~A ~A ~A ~A)~%" n arg1 arg2 arg3 arg4))
			       (catch #t
				      (lambda () (n arg1 arg2 arg3 arg4))
				      (lambda args (car args))))
			     procs))
			  (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (sqrt -1.0) (make-delay 32) :wave -1 0)))
		       (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (sqrt -1.0) (make-delay 32) :initial-contents -1 0)))
		    (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (sqrt -1.0) (make-delay 32) :srate -1 0))))
	       (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (sqrt -1.0) (make-delay 32) :input -1 0))

	      ;; ---------------- 5 Args
	      (for-each 
	       (lambda (arg1)
		 ;(display (format #f "5: ~A " arg1))
		 (for-each 
		  (lambda (arg2)
		    (for-each 
		     (lambda (arg3)
		       (for-each 
			(lambda (arg4)
			  (for-each
			   (lambda (arg5)
			     ;(display (format #f "(~A ~A ~A ~A ~A)~%" arg1 arg2 arg3 arg4 arg5))
			     (for-each 
			      (lambda (n)
				(catch #t
				       (lambda () (n arg1 arg2 arg3 arg4 arg5))
				       (lambda args (car args))))
			      procs))
			   (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (sqrt -1.0) (make-delay 32) :wave -1 0 1)))
			(list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (sqrt -1.0) (make-delay 32) :initial-contents -1 0 1)))
		     (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (sqrt -1.0) (make-delay 32) :srate -1 0 1)))
		  (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (sqrt -1.0) (make-delay 32) :input -1 0 1)))
	       (list 1.5 "/hiho" (list 0 1) 1234 (make-vct 3) (sqrt -1.0) (make-delay 32) :order -1 0 1))
	    (gc)
	    ))
      ))

(set! (window-y) 10)
(set! (basic-color) (make-color 0.96 0.96 0.86))
(dismiss-all-dialogs)


;;; ---------------- test 21: transforms ----------------

(define (bes-j0 x)				;returns J0(x) for any real x
  (if (< (abs x) 8.0)			;direct rational function fit
      (let* ((y (* x x))
	     (ans1 (+ 57568490574.0
		      (* y (+ -13362590354.0 
			      (* y  (+ 651619640.7
				       (* y (+ -11214424.18 
					       (* y (+ 77392.33017
						       (* y -184.9052456)))))))))))
	     (ans2 (+ 57568490411.0 
		      (* y (+ 1029532985.0 
			      (* y (+ 9494680.718
				      (* y (+ 59272.64853
					      (* y (+ 267.8532712 y)))))))))))
	(/ ans1 ans2))
    (let* ((ax (abs x))
	   (z (/ 8.0 ax))
	   (y (* z z))
	   (xx (- ax 0.785398164))
	   (ans1 (+ 1.0 
		    (* y (+ -0.1098628627e-2 
			    (* y (+ 0.2734510407e-4
				    (* y (+ -0.2073370639e-5
					    (* y 0.2093887211e-6)))))))))
	   (ans2 (+ -0.1562499995e-1
		    (* y (+ 0.1430488765e-3
			    (* y (+ -0.6911147651e-5
				    (* y (+ 0.7621095161e-6
					    (* y -0.934945152e-7))))))))))
      (* (sqrt (/ 0.636619772 ax))
	 (- (* (cos xx) ans1)
	    (* z (sin xx) ans2))))))

(define (peak-at data)
  (let ((len (vct-length data))
	(peak (vct-ref data 0))
	(loc 0))
    (do ((i 1 (1+ i)))
	((= i len) (list loc peak))
      (if (> (vct-ref data i) peak)
	  (begin
	    (set! peak (vct-ref data i))
	    (set! loc i))))))

(define (chebyshev-polynomial a x kind lim)	
  ;; evaluate the sum of the Chebyshev polynomials (coeffs in a) at x
  ;;  similar to make-waveshape-table which runs through -1<=x<=1 internally,
  ;;  but intended to be parallel to the polynomial unit generator --
  ;; (polynomial (get-chebyshev-coefficients harms-and-amps) x) is equivalent to 
  ;; (chebyshev-polynomial harm-amps x)
  (let* ((n (1- (vct-length a)))
	 (r (* kind x))
	 (s 1.0)
	 (h 0.0)
	 (sum (vct-ref a 0)))
    (do ((k 1 (1+ k)))
	((= k n))
      (set! h r)
      (set! sum (+ sum (* r (vct-ref a k))))
      (set! r (- (* 2 r x) s))
      (set! s h))
    (+ sum (* r (vct-ref a n)))))

(define (inverse-haar f)
  (let* ((n (vct-length f))
	 (g (make-vct n))
	 (s2 (sqrt 2.0))
	 (v (/ 1.0 (sqrt n))))
    (vct-set! f 0 (* (vct-ref f 0) v))
    (do ((m 2 (* m 2)))
	((> m n))
      (let ((mh (/ m 2)))
	(do ((j 0 (+ j 2))
	     (k 0 (+ k 1)))
	    ((= j m))
	  (let ((x (vct-ref f k))
		(y (* (vct-ref f (+ mh k)) v)))
	    (vct-set! g j (+ x y))
	    (vct-set! g (+ j 1) (- x y))))
	(do ((i (- m 1) (- i 1)))
	    ((< i 0))
	  (vct-set! f i (vct-ref g i)))
	(set! v (* v s2))))
    f))

(define (wavelet data n isign wf cc)
  (let* ((cc-size (vct-length cc))
	 (ccr (make-vct cc-size))
	 (sig -1.0))
    (do ((i 0 (1+ i))
	 (j (- cc-size 1) (1- j)))
	((= i cc-size))
      (vct-set! ccr j (* sig (vct-ref cc i)))
      (set! sig (- sig)))
    (if (>= n 4)
	(if (>= isign 0)
	    (do ((nn n (/ nn 2)))
		((< nn 4))
	      (wf data nn isign cc ccr))
	    (do ((nn 4 (* nn 2)))
		((> nn n))
	      (wf data nn isign cc ccr))))))

(define (pwt data n isign cc cr)
  (let* ((data1 (make-vct n))
	 (n1 (1- n))
	 (ncof (vct-length cc))
	 (nmod (* ncof n))
	 (nh (inexact->exact (floor (/ n 2))))
	 (joff (inexact->exact (- (floor (/ ncof 2)))))
	 (ioff joff))
    (if (>= isign 0)
	(do ((ii 0 (1+ ii))
	     (i 1 (+ i 2)))
	    ((> i n))
	  (let ((ni (+ i nmod ioff))
		(nj (+ i nmod joff)))
	    (do ((k 1 (1+ k)))
		((> k ncof))
	      (let ((jf (logand n1 (+ ni k))) ;gad wotta kludge...
		    (jr (logand n1 (+ nj k))))
		(vct-set! data1 ii (+ (vct-ref data1 ii)
				      (* (vct-ref cc (1- k)) 
					 (vct-ref data jf))))
		(vct-set! data1 (+ ii nh) (+ (vct-ref data1 (+ ii nh))
					     (* (vct-ref cr (1- k)) 
						(vct-ref data jr))))))))
	(do ((ii 0 (1+ ii))
	     (i 1 (+ i 2)))
	    ((> i n))
	  (let ((ai (vct-ref data ii))
		(ai1 (vct-ref data (+ ii nh)))
		(ni (+ i nmod ioff))
		(nj (+ i nmod joff)))
	    (do ((k 1 (1+ k)))
		((> k ncof))
	      (let ((jf (logand n1 (+ ni k)))
		    (jr (logand n1 (+ nj k))))
		(vct-set! data1 jf (+ (vct-ref data1 jf) 
					       (* ai (vct-ref cc (1- k)))))
		(vct-set! data1 jr (+ (vct-ref data1 jr)
				      (* ai1 (vct-ref cr (1- k))))))))))
    (do ((i 0 (1+ i)))
	((= i n))
      (vct-set! data i (vct-ref data1 i)))
    data))

(define daub4 (vct 0.4829629131445341 0.8365163037378079 0.2241438680420134 -0.1294095225512604))
(define daub6 (vct 0.332670552950 0.806891509311 0.459877502118 -0.135011020010 -0.085441273882 0.035226291886))
(define daub8 (vct 0.230377813309 0.714846570553 0.630880767930 -0.027983769417 -0.187034811719 0.030841381836
		   0.032883011667 -0.010597401785))
(define daub10 (vct 0.160102397974 0.603829269797 0.724308528438 0.138428145901 -0.242294887066 -0.032244869585
		    0.077571493840 -0.006241490213 -0.012580751999 0.003335725285))
(define daub12 (vct 0.111540743350 0.494623890398 0.751133908021 0.315250351709 -0.226264693965 -0.129766867567
		    0.097501605587 0.027522865530 -0.031582039317 0.000553842201 0.004777257511 -0.001077301085))
(define daub14 (vct 0.077852054085 0.396539319482 0.729132090846 0.469782287405 -0.143906003929 -0.224036184994
		    0.071309219267 0.080612609151 -0.038029936935 -0.016574541631 0.012550998556 0.000429577973
		    -0.001801640704 0.000353713800))
(define daub16 (vct 0.054415842243 0.312871590914 0.675630736297 0.585354683654 -0.015829105256 -0.284015542962
		    0.000472484574 0.128747426620 -0.017369301002 -0.044088253931 0.013981027917 0.008746094047
		    -0.004870352993 -0.000391740373 0.000675449406 -0.000117476784))
(define daub18 (vct 0.038077947364 0.243834674613 0.604823123690 0.657288078051 0.133197385825 -0.293273783279
		    -0.096840783223 0.148540749338 0.030725681479 -0.067632829061 0.000250947115 0.022361662124
		    -0.004723204758 -0.004281503682 0.001847646883 0.000230385764 -0.000251963189 0.000039347320))
(define daub20 (vct 0.026670057901 0.188176800077 0.527201188931 0.688459039453 0.281172343661 -0.249846424327
		    -0.195946274377 0.127369340336 0.093057364604 -0.071394147166 -0.029457536822 0.033212674059
		    0.003606553567 -0.010733175483 0.001395351747 0.001992405295 -0.000685856695 -0.000116466855
		    0.000093588670 -0.000013264203))

(define SQRT2 1.41421356237309504880168872420969808)

(define Battle-Lemarie (vct (* SQRT2 -0.002) (* SQRT2 -0.003) (* SQRT2  0.006) (* SQRT2  0.006) (* SQRT2 -0.013)
			    (* SQRT2 -0.012) (* SQRT2  0.030) (* SQRT2  0.023) (* SQRT2 -0.078) (* SQRT2 -0.035)
			    (* SQRT2  0.307) (* SQRT2  0.542) (* SQRT2  0.307) (* SQRT2 -0.035) (* SQRT2 -0.078)
			    (* SQRT2  0.023) (* SQRT2  0.030) (* SQRT2 -0.012) (* SQRT2 -0.013) (* SQRT2  0.006)
			    (* SQRT2  0.006) (* SQRT2 -0.003) (* SQRT2 -0.002) 0.0))
(define Burt-Adelson (vct (* SQRT2 (/ -1.0 20.0)) (* SQRT2 (/ 5.0 20.0)) (* SQRT2 (/ 12.0 20.0))
			  (* SQRT2 (/ 5.0 20.0)) (* SQRT2 (/ -1.0 20.0)) 0.0))

(define Beylkin (vct 0.099305765374353 0.424215360812961 0.699825214056600 0.449718251149468
		     -.110927598348234 -.264497231446384 0.026900308803690 0.155538731877093
		     -.017520746266529 -.088543630622924 0.019679866044322 0.042916387274192
		     -.017460408696028 -.014365807968852 0.010040411844631 .0014842347824723
		     -.002736031626258 .0006404853285212))

(define SQRT15 3.87298334620741688517927)

(define coif2 (vct (/ (* SQRT2 (- SQRT15 3)) 32.0) (/ (* SQRT2 (- 1 SQRT15)) 32.0) (/ (* SQRT2 (- 6 (* 2 SQRT15))) 32.0)
		   (/ (* SQRT2 (+ (* 2 SQRT15) 6)) 32.0) (/ (* SQRT2 (+ SQRT15 13)) 32.0) (/ (* SQRT2 (- 9 SQRT15)) 32.0)))
(define coif4 (vct 0.0011945726958388 	-0.01284557955324 0.024804330519353 0.050023519962135 -0.15535722285996
		   -0.071638282295294 0.57046500145033 0.75033630585287 0.28061165190244 -0.0074103835186718
		   -0.014611552521451 -0.0013587990591632))
(define coif6 (vct -0.0016918510194918 -0.00348787621998426 0.019191160680044 0.021671094636352 -0.098507213321468
		   -0.056997424478478 0.45678712217269 0.78931940900416 0.38055713085151 -0.070438748794943 
		   -0.056514193868065 0.036409962612716 0.0087601307091635 -0.011194759273835 -0.0019213354141368
		   0.0020413809772660 0.00044583039753204 -0.00021625727664696))

(define sym2 (vct (* SQRT2 -0.125) (* SQRT2  0.25) (* SQRT2  0.75) (* SQRT2  0.25) (* SQRT2 -0.125)))
(define sym3 (vct (/ (* SQRT2 1.0) 8.0) (/ (* SQRT2 3.0) 8.0) (/ (* SQRT2 3.0) 8.0) (/ (* SQRT2 1.0) 8.0)))
(define sym4 (vct (/ (* SQRT2   3.0) 128.0) (/ (* SQRT2  -6.0) 128.0) (/ (* SQRT2 -16.0) 128.0)
		  (/ (* SQRT2  38.0) 128.0) (/ (* SQRT2  90.0) 128.0) (/ (* SQRT2  38.0) 128.0)
		  (/ (* SQRT2 -16.0) 128.0) (/ (* SQRT2  -6.0) 128.0) (/ (* SQRT2   3.0) 128.0) 0.0))
(define sym5 (vct (/ (* SQRT2  3.0) 64.0) (/ (* SQRT2 -9.0) 64.0) (/ (* SQRT2 -7.0) 64.0) (/ (* SQRT2 45.0) 64.0)
		  (/ (* SQRT2 45.0) 64.0) (/ (* SQRT2 -7.0) 64.0) (/ (* SQRT2 -9.0) 64.0) (/ (* SQRT2  3.0) 64.0)))
(define sym6 (vct (/ (* SQRT2   -35.0) 16384.0) (/ (* SQRT2  -105.0) 16384.0) (/ (* SQRT2  -195.0) 16384.0)
		  (/ (* SQRT2   865.0) 16384.0) (/ (* SQRT2   363.0) 16384.0) (/ (* SQRT2 -3489.0) 16384.0)
		  (/ (* SQRT2  -307.0) 16384.0) (/ (* SQRT2 11025.0) 16384.0) (/ (* SQRT2 11025.0) 16384.0)
		  (/ (* SQRT2  -307.0) 16384.0) (/ (* SQRT2 -3489.0) 16384.0) (/ (* SQRT2   363.0) 16384.0)
		  (/ (* SQRT2   865.0) 16384.0) (/ (* SQRT2  -195.0) 16384.0) (/ (* SQRT2  -105.0) 16384.0)
		  (/ (* SQRT2   -35.0) 16384.0)))

(define wts (list 
  daub4 daub6 daub8 daub10 daub12 daub14 daub16 daub18 daub20
  Battle-Lemarie Burt-Adelson Beylkin coif2 coif4 coif6
  sym2 sym3 sym4 sym5 sym6))


(if (or full-test (= snd-test 21))
    (let ((d0 #f) (d1 #f) (fn #f))
      (if (procedure? trace-hook) (trace-hook 21))
      
      ;; -------- fft

      (set! d0 (make-vct 16))
      (vct-set! d0 0 1.0)
      (snd-transform fourier-transform d0 0)
      (do ((i 0 (1+ i)))
	  ((= i 16))
	(if (fneq (vct-ref d0 i) 1.0)
	    (snd-display (format #f ";fourier (1.0) [~D]: ~A?" i (vct-ref d0 i)))))

      (snd-transform fourier-transform d0 0)
      (if (fneq (vct-ref d0 0) 256.0)
	  (snd-display (format ";fourier (256.0): ~A?" (vct-ref d0 0))))
      (do ((i 1 (1+ i)))
	  ((= i 16))
	(if (fneq (vct-ref d0 i) 0.0)
	    (snd-display (format #f ";fourier (0.0) [~D]: ~A?" i (vct-ref d0 i)))))

      (set! d0 (make-vct 8))
      (set! d1 (make-vct 8))
      (vct-set! d0 2 1.0)
      (mus-fft d0 d1 8 1)
      (if (or (not (vequal d0 (vct 1.000 0.000 -1.000 -0.000 1.000 0.000 -1.000 -0.000)))
	      (not (vequal d1 (vct 0.000 1.000 0.000 -1.000 0.000 1.000 0.000 -1.000))))
	  (snd-display (format #f ";mus-fft 1: ~A ~A?" d0 d1)))
      (mus-fft d0 d1 8 -1)
      (if (or (not (vequal d0 (vct 0.000 0.000 8.000 0.000 0.000 0.000 0.000 0.000)))
	      (not (vequal d1 (vct 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000))))
	  (snd-display (format #f ";mus-fft -1: ~A ~A?" d0 d1)))
      
      (vct-fill! d0 1.0)
      (vct-fill! d1 0.0)
      (mus-fft d0 d1 8)
      (if (or (not (vequal d0 (vct 8.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000)))
	      (not (vequal d1 (vct 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000))))
	  (snd-display (format #f ";mus-fft 2: ~A ~A?" d0 d1)))
      (mus-fft d0 d1 8 -1)
      (if (or (not (vequal d0 (vct 8.000 8.000 8.000 8.000 8.000 8.000 8.000 8.000)))
	      (not (vequal d1 (vct 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000))))
	  (snd-display (format #f ";mus-fft -2: ~A ~A?" d0 d1)))

      (vct-fill! d1 0.0)
      (vct-map! d0 (lambda () (random 1.0)))
      (set! fn (vct-copy d0))
      (mus-fft d0 d1 8)
      (mus-fft d0 d1 8 -1)
      (vct-scale! d0 (/ 1.0 8.0))
      (if (not (vequal d0 fn))
	  (snd-display (format #f ";mus-fft 3: ~A ~A?" d0 fn)))

      (for-each 
       (lambda (size)
	 (set! d0 (make-vct size))
	 (vct-set! d0 0 1.0)
	 (set! d1 (snd-spectrum d0 rectangular-window size))
	 (do ((i 0 (1+ i)))
	     ((= i (/ size 2)))
	   (if (fneq (vct-ref d1 i) 1.0)
	       (snd-display (format #f ";snd-spectrum (1.0) [~D: ~D]: ~A?" i size (vct-ref d1 i)))))

	 (set! d1 (snd-spectrum d0 rectangular-window))
	 (if (fneq (vct-ref d1 0) 1.0)
	     (snd-display (format ";snd-spectrum back (1.0 ~D): ~A?" size (vct-ref d1 0))))
	 (do ((i 1 (1+ i)))
	     ((= i (/ size 2)))
	   (if (fneq (vct-ref d1 i) 0.0)
	       (snd-display (format #f ";snd-spectrum (0.0) [~D: ~D]: ~A?" i size (vct-ref d1 i)))))

	 (set! d1 (snd-spectrum d0 rectangular-window size #f)) ; dB (0.0 = max)
	 (do ((i 0 (1+ i)))
	     ((= i (/ size 2)))
	   (if (fneq (vct-ref d1 i) 0.0)
	       (snd-display (format #f ";snd-spectrum dB (0.0) [~D: ~D]: ~A?" i size (vct-ref d1 i))))))

       (list 8 16))


      ;; -------- fht
      
      (set! d0 (make-vct 16))
      (set! d1 (make-vct 16))
      (do ((i 0 (1+ i)))
	  ((= i 16))
	(vct-set! d0 i (random 1.0)) 
	(vct-set! d1 i (vct-ref d0 i)))
      (fht d0)
      (fht d0)
      (vct-scale! d0 (/ 1.0 16.0))
      (do ((i 0 (1+ i)))
	  ((= i 16))
	(if (fneq (vct-ref d0 i) (vct-ref d1 i))
	    (snd-display (format ";fht twice [~D]:~A ~A?" i (vct-ref d0 i) (vct-ref d1 i)))))

      (for-each 
       (lambda (size)
	 (for-each
	  (lambda (loc)
	    (let ((rdat (make-vct size)))
	      (vct-set! rdat loc 1.0)
	      (autocorrelate rdat)
	      (if (fneq (vct-ref rdat 0) 2.0) (snd-display (format #f ";autocorrelate ~D:~D: ~A?" size loc rdat)))
	      (do ((i 1 (1+ i)))
		  ((= i (/ size 2)))
		(if (fneq (vct-ref rdat i) 0.0) (snd-display (format #f ";autocorrelate ~D:~D[~D]: ~A?" size loc i (vct-ref rdat i)))))))
	  (list 0 1 2 3)))
       (list 8 16 128 256))

      (for-each 
       (lambda (size)
	 (for-each
	  (lambda (loc)
	    (let ((rdat (make-vct size)))
	      (vct-set! rdat loc 1.0)
	      (vct-set! rdat (+ loc 1) 1.0)
	      (autocorrelate rdat)
	      (if (fneq (vct-ref rdat 0) 4.0) (snd-display (format #f ";autocorrelate(4) ~D:~D: ~A?" size loc rdat)))
	      (if (fneq (vct-ref rdat 1) 2.0) (snd-display (format #f ";autocorrelate(4:1) ~D:~D: ~A?" size loc rdat)))
	      (do ((i 2 (1+ i)))
		  ((= i (/ size 2)))
		(if (fneq (vct-ref rdat i) 0.0) (snd-display (format #f ";autocorrelate(4) ~D:~D[~D]: ~A?" size loc i (vct-ref rdat i)))))))
	  (list 0 1 2 3)))
       (list 8 16 128 256))


      ;; -------- hankel

      (set! d0 (make-vct 128))
      (do ((i 0 (1+ i))) 
	  ((= i 128)) 
	(vct-set! d0 i (bes-j0 (/ (* i 12 3.14159) 128.0))))
      (snd-transform hankel-transform d0)
      (let ((pinfo (peak-at d0)))
	(if (not (= (car pinfo) 5))
	    (snd-display (format #f ";hankel 1: ~A?" pinfo))))

      (do ((i 0 (1+ i))) 
	  ((= i 128)) 
	(vct-set! d0 i (+ (bes-j0 (/ (* i 12 3.14159) 128.0)) 
			  (bes-j0 (/ (* i 20 3.14159) 128.0)))))
      (snd-transform hankel-transform d0)
      (let ((pinfo (peak-at d0)))
	(if (and (not (= (car pinfo) 5))
		 (not (= (car pinfo) 9)))
	    (snd-display (format #f ";hankel 2: ~A?" pinfo)))
	(vct-set! d0 (car pinfo) 0.0)
	(let ((pinfo (peak-at d0)))
	  (if (and (not (= (car pinfo) 5))
		   (not (= (car pinfo) 9)))
	      (snd-display (format #f ";hankel 3: ~A?" pinfo)))))

      (do ((i 0 (1+ i))) 
	  ((= i 128)) 
	(vct-set! d0 i (+ (bes-j0 (/ (* i 12 3.14159) 128.0)) 
			  (* 4.0 (bes-j0 (/ (* i 20 3.14159) 128.0))))))
      (snd-transform hankel-transform d0)
      (let ((pinfo (peak-at d0)))
	(if (not (= (car pinfo) 9))
	    (snd-display (format #f ";hankel 4: ~A?" pinfo)))
	(vct-set! d0 9 0.0)
	(let ((npinfo (peak-at d0)))
	  (if (not (= (car npinfo) 5))
	      (snd-display (format #f ";hankel 5: ~A?" npinfo)))
	  (if (not (> (cadr pinfo) (cadr npinfo)))
	      (snd-display (format #f ";hankel 6: ~A?" pinfo)))))

      (do ((i 0 (1+ i))) 
	  ((= i 128)) 
	(vct-set! d0 i (bes-j0 (/ (* i 3.14159) 128.0))))
      (snd-transform hankel-transform d0)
      (let ((pinfo (peak-at d0)))
	(if (not (= (car pinfo) 0))
	    (snd-display (format #f ";hankel 7: ~A?" pinfo))))

      (set! d0 (make-vct 8))
      (do ((i 0 (1+ i))) 
	  ((= i 8)) 
	(vct-set! d0 i (bes-j0 (/ (* i 3.14159) 8.0))))
      (snd-transform hankel-transform d0)
      (if (< (/ (abs (vct-ref d0 0))
		(abs (vct-ref d0 1)))
	     3.0)
	  (snd-display (format #f ";hankel 8: ~A?" d0)))


      ;; -------- walsh

      (set! d0 (make-vct 8))
      (vct-set! d0 0 1.0)
      (snd-transform walsh-transform d0)
      (if (not (vequal d0 (vct 1.000 1.000 1.000 1.000 0.000 0.000 0.000 0.000)))
	  (snd-display (format #f ";walsh 1: ~A" d0)))
      (snd-transform walsh-transform d0)
      (if (not (vequal d0 (vct 4.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000)))
	  (snd-display (format #f ";walsh -1: ~A" d0)))
      
      (set! d0 (make-vct 8))
      (vct-set! d0 1 1.0)
      (snd-transform walsh-transform d0)
      (if (not (vequal d0 (vct 1.000 -1.000 1.000 -1.000 0.000 0.000 0.000 0.000)))
	  (snd-display (format #f ";walsh 2: ~A" d0)))
      (snd-transform walsh-transform d0)
      (if (not (vequal d0 (vct 0.000 4.000 0.000 0.000 0.000 0.000 0.000 0.000)))
	  (snd-display (format #f ";walsh -2: ~A" d0)))

      (set! d0 (make-vct 8))
      (vct-set! d0 1 1.0)
      (vct-set! d0 0 0.5)
      (snd-transform walsh-transform d0)
      (if (not (vequal d0 (vct 1.500 -0.500 1.500 -0.500 0.000 0.000 0.000 0.000)))
	  (snd-display (format #f ";walsh 3: ~A" d0)))
      (snd-transform walsh-transform d0)
      (if (not (vequal d0 (vct 2.000 4.000 0.000 0.000 0.000 0.000 0.000 0.000)))
	  (snd-display (format #f ";walsh -3: ~A" d0)))

      (set! d0 (make-vct 8))
      (vct-map! d0 (lambda () (random 1.0)))
      (set! d1 (vct-copy d0))
      (snd-transform walsh-transform d0)
      (snd-transform walsh-transform d0)
      (vct-scale! d0 (/ 1.0 4.0))
      (if (not (vequal d0 d1))
	  (snd-display (format #f ";walsh 4: ~A ~A" d0 d1)))


      ;; -------- haar
      
      (set! d0 (make-vct 8))
      (vct-set! d0 2 1.0)
      (snd-transform haar-transform d0)
      (if (not (vequal d0 (vct 0.354 0.354 -0.500 0.000 0.000 0.707 0.000 0.000)))
	  (snd-display (format #f ";haar 1: ~A" d0)))
      (inverse-haar d0)
      (if (not (vequal d0 (vct 0.000 0.000 1.000 0.000 0.000 0.000 0.000 0.000)))
	  (snd-display (format #f ";inverse haar 1: ~A" d0)))

      (set! d0 (make-vct 8))
      (vct-set! d0 0 1.0)
      (snd-transform haar-transform d0)
      (if (not (vequal d0 (vct 0.354 0.354 0.500 0.000 0.707 0.000 0.000 0.000)))
	  (snd-display (format #f ";haar 2: ~A" d0)))
      (inverse-haar d0)
      (if (not (vequal d0 (vct 1.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000)))
	  (snd-display (format #f ";inverse haar 2: ~A" d0)))

      (set! d0 (make-vct 8))
      (set! d1 (make-vct 8))
      (do ((i 0 (1+ i)))
	  ((= i 8))
	(vct-set! d0 i (random 1.0))
	(vct-set! d1 i (vct-ref d0 i)))
      (snd-transform haar-transform d0)
      (inverse-haar d0)
      (if (not (vequal d0 d1))
	  (snd-display (format #f ";inverse haar 3: ~A ~A" d0 d1)))


      ;; -------- chebyshev

      (set! fn (make-vct 128))
      (do ((i 0 (1+ i)))
	  ((= i 128))
	(vct-set! fn i (* i (/ 1.0 128))))
      (snd-transform chebyshev-transform fn)
      (set! d0 (make-vct 128))
      (do ((i 0 (1+ i)))
	  ((= i 128))
	(vct-set! d0 i (chebyshev-polynomial fn (- (* i (/ 2.0 128)) 1.0) 1 128)))
      (if (> (vct-ref d0 1) (vct-ref d0 4))
	  (snd-display (format #f ";cheby ramp: ~A?" d0)))

      (do ((i 0 (1+ i)))
	  ((= i 128))
	(vct-set! fn i (sin (/ (* i 3.14159) 64.0))))
      (snd-transform chebyshev-transform fn)
      (set! d0 (make-vct 128))
      (do ((i 0 (1+ i)))
	  ((= i 128))
	(vct-set! d0 i (chebyshev-polynomial fn (- (* i (/ 2.0 128)) 1.0) 1 128)))
      (let ((error 0.0))
	(do ((i 0 (1+ i)))
	    ((= i 128))
	  (set! error (+ error (abs (- (sin (/ (* i 3.14159) 64.0)) (* .01 (vct-ref d0 i)))))))
	(if (> error 3.0)
	    (snd-display (format #f ";cheby sine: ~A?" error))))


      ;; --------- wavelet

      (for-each 
       (lambda (size)
	 (do ((i 0 (1+ i)))
	     ((= i 20))
	   (let ((d1 (make-vct size))
		 (d2 (make-vct size)))
	     (vct-set! d1 2 1.0)
	     (vct-set! d2 2 1.0)
	     (wavelet d1 size 0 pwt (list-ref wts i))
	     (snd-transform wavelet-transform d2 i)
	     (if (not (vequal d1 d2))
		 (snd-display (format #f ";wavelet ~D: ~A ~A" i d1 d2)))
	     (wavelet d2 size -1 pwt (list-ref wts i))
	     (vct-fill! d1 0.0)
	     (vct-set! d1 2 1.0)
	     (if (not (vequal d1 d2))
		 (if (or (= i 9) (= i 10))
		     (begin
		       (vct-set! d2 2 0.0)
		       (if (> (vct-peak d2) .1)
			   (snd-display (format #f ";inverse wavelet ~D: ~A ~A" i d1 d2))))
		     (if (> i 14)
			 (let ((pk (vct-ref d2 2)))
			   (vct-set! d2 2 0.0)
			   (if (> (vct-peak d2) pk)
			       (snd-display (format #f ";inverse wavelet ~D: ~A ~A" i d1 d2))))
			 (snd-display (format #f ";inverse wavelet ~D: ~A ~A" i d1 d2)))))))
	 (do ((i 0 (1+ i)))
	     ((= i 9))
	   (let ((d1 #f)
		 (d2 (make-vct size)))
	     (vct-map! d2 (lambda () (random 1.0)))
	     (set! d1 (vct-copy d2))
	     (snd-transform wavelet-transform d2 i)
	     (wavelet d2 size -1 pwt (list-ref wts i))
	     (if (not (vequal d1 d2))
		 (snd-display (format #f ";random wavelet ~D: ~A ~A" i d1 d2))))))
       (list 16 64))


      ;; -------- hadamard (assuming blindly here that it should be its own inverse)

      (set! d0 (make-vct 8))
      (vct-set! d0 2 1.0)
      (snd-transform hadamard-transform d0)
      (if (not (vequal d0 (vct 1.000 1.000 -1.000 -1.000 -1.000 -1.000 1.000 1.000)))
	  (snd-display (format #f ";hadamard 1: ~A?" d0)))
      (snd-transform hadamard-transform d0)
      (vct-scale! d0 (/ 1.0 8.0))
      (if (not (vequal d0 (vct 0.000 0.000 1.000 0.000 0.000 0.000 0.000 0.000)))
	  (snd-display (format #f ";hadamard -1: ~A?" d0)))

      (let ((d1 #f)
	    (d2 (make-vct 64)))
	(vct-map! d2 (lambda () (random 1.0)))
	(set! d1 (vct-copy d2))
	(snd-transform hadamard-transform d2)
	(snd-transform hadamard-transform d2)
	(vct-scale! d2 (/ 1.0 64.0))
	(if (not (vequal d1 d2))
	    (snd-display (format #f ";random hadamard: ~A ~A" d1 d2))))

      ))


;;; ---------------- test 22: error continuations ----------------

(define (continuable-error? err)
  (let* ((len (length err))
	 (last-arg (and (not (null? err)) 
			(list-ref err (- len 1)))))
    (and last-arg
	 (list? last-arg)
	 (= (length last-arg) 2)
	 (eq? (car last-arg) 'snd-error-continuation)
	 (procedure? (cadr last-arg))
	 (cadr last-arg))))

(define (with-continuations thunk newval)
  (catch #t
	 (lambda ()
	   (lazy-catch #t 
		       thunk
		       lazy-handler-dispatch))
	 (lambda args
	   (let ((go-on (continuable-error? args)))
	     (if go-on
		 (go-on newval)
		 (apply throw args))))))

(define (with-default-continuations thunk)
  (with-continuations thunk #f))

(if (and (provided? 'snd-error-continuations)
	 (or full-test (= snd-test 22)))
    (begin
      (if (procedure? trace-hook) (trace-hook 22))

      (let ((v (make-vct 4))
	    (val 0))
	(with-default-continuations
	 (lambda ()
	   (vct-set! v 4 0.0)
	   (vct-ref v 23)
	   (set! val 32)))
	(if (not (= val 32)) 
	    (snd-display (format #f ";cont 0: ~A?" val)))
	(vct-fill! v 0.0)
	
	(do ((i 0 (1+ i)))
	    ((= i 5))
	  (with-continuations (lambda () (vct-set! v -1 i)) i))
	(if (not (vequal v (vct 0.0 1.0 2.0 4.0)))
	    (snd-display (format #f ";cont 1: ~A?" v)))
	
	(with-default-continuations
	 (lambda ()
	   (let ((true-max (mus-sound-max-amp "2.snd")))
	     (mus-sound-set-max-amp "2.snd" #(12345 .005))
	     (let ((ma (mus-sound-max-amp "2.snd")))
	       (if (or (fneq (vector-ref ma 1) .005)
		       (not (= (vector-ref ma 0) 12345))
		       (fneq (vector-ref ma 3) 0.0)
		       (not (= (vector-ref ma 2) 0)))
		   (snd-display (format #f ";cont 2: set-max-amp: ~A?" ma)))))))
	
	(with-default-continuations
	 (lambda ()
	   (let ((sd (make-sound-data -1 -1)))
	     (if (not (= (sound-data-chans sd) 1)) 
		 (snd-display (format #f ";cont 4: sound-data: ~A?" sd)))
	     (if (not (= (sound-data-length sd) 1)) 
		 (snd-display (format #f ";cont 5: sound-data: ~A?" sd)))
	     
	     (sound-data-set! sd -1 -1 32.0)
	     (if (fneq (sound-data-ref sd 0 0) 32.0)
		 (snd-display (format #f ";cont 6: sound-data[0]: ~A?" (sound-data-ref sd 0 0))))
	     (if (fneq (sound-data-ref sd -1 -1) 32.0)
		 (snd-display (format #f ";cont 7: sound-data[0]: ~A?" (sound-data-ref sd 0 0))))
	     )))
	
	)


      ))


;;; -------------------------------- clean up and quit -------------------------------- 

(if include-clm 
    (begin
      (set! (save-dir) "/home/bil/snd-4")
      (set! (save-state-on-exit) #t))
    (set! (save-state-on-exit) #f))
(set! (max-regions) 2)
(if (file-exists? "saved-snd.scm") (delete-file "saved-snd.scm"))
(gc)
(clear-sincs)
(reset-hook! exit-hook)
(reset-hook! graph-hook)
(reset-hook! name-click-hook)
(reset-hook! menu-hook)
(reset-hook! before-fft-hook)
(reset-hook! fft-hook)

(save-listener "test.output")
(set! (listener-prompt) original-prompt)
(update-usage-stats)

(if (defined? 'report-times) (report-times))

(snd-display (format #f ";all done!~%~A" original-prompt))
(if (provided? 'snd-new-smob)
    (snd-display (format #f "timings:~%  ~A: total~%  GC: ~A~%~{    ~A~%~})~%" 
			 (/ (- (get-internal-real-time) overall-start-time) 100) 
			 (* (cdar (gc-stats)) .001)
			 (let ((lst (gc-stats)))
			   (list (list-ref lst 1) 
				 (list-ref lst 5) 
				 (list-ref lst 9))))))
(if (not (null? times))
    (for-each (lambda (n)
		(snd-display (format #f "  ~A: ~A~%" (cadr n) (car n))))
	      times))

(if (number? (vector-ref timings total-tests)) 
    (vector-set! timings total-tests (- (get-internal-real-time) (vector-ref timings total-tests))))
(do ((i 0 (1+ i)))
    ((= i (+ total-tests 1)))
  (if (number? (vector-ref timings i))
      (snd-display (format #f "  [~D: ~A]" i (/ (vector-ref timings i) 100)))))
(if (string? test14-file)
    (snd-display (format #f "~%~A(~D)" test14-file (mus-sound-samples test14-file))))

(if (= snd-test -1) (exit))


;;; TODO: these aren't tested at all yet (except as bare error checks in a few cases):
;;;   stop-player add-input remove-input loop-samples focus-widget scan-all-chans map-all-chans map-across-sound-chans graph-data
;;;
;;;   also that help-dialog et al return the correct widget and edpos args in save-sound-as/play/scan/map/find/count-matches/make-graph-data?
;;;   edpos args: convolve-with reverse-sound env-sound convolve-with src-sound filter-sound and sound->temp cases
;;;
;;; only touched upon:
;;;   sound-to-temp(s) selection-to-temp(s) temp(s)-to-sound temp(s)-to-selection -- especially multichannel cases
;;;   convolve-files map-across-all-chans map-chans scan-across-chans map-sound-chans scan-sound-chans scan-chans
;;;   samples->sound-data forward-mix smooth-selection convolve-selection-with save-state open-alternate-sound
;;;   mus-sound-reopen-output mus-sound-seek mus-sound-seek-frame close-sound-file vct->sound-file
;;;   save-marks save-region save-selection vcts-map!
;;;   buffer->frame frame->buffer mixer* mixer-set! frame->frame restart-env locsig-set! locsig-reverb-set!
;;;   ina inb outc outd mus-channel make-track-sample-reader free-track-sample-reader mix-sound-channel mix-sound-index
;;;   backward-mix peaks forward-sample backward-sample cursor-position prompt-in-minibuffer
;;;   append-to-minibuffer scan-across-sound-chans change-menu-label update-sound erase-rectangle load-font
;;;   soundfont-info menu-widgets x->position y->position position->y axis-info listener-selection draw-line draw-string fill-rectangle

;;; need to know before calling this if libguile.so was loaded
;;; (system "cc gsl-ex.c -c")
;;; (system "ld -shared gsl-ex.o -o gsl-ex.so -lguile")
;;; (define handle (dlopen "/home/bil/snd-4/gsl-ex.so"))
;;; (dlinit handle "init_gsl_j0")
;;; (fneq (j0 1.0) 0.765)
