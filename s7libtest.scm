;;; s7 library tests

(set! (hook-functions *unbound-variable-hook*) ())

(if (not (provided? 'cload.scm)) (load "cload.scm"))

;;; --------------------------------------------------------------------------------

(define (ok? otst ola oexp)
  (let ((result (catch #t ola
		       (lambda args
			 (if (not (eq? oexp 'error)) 
			     (begin (display args) (newline)))
			 'error))))
    (if (not (equal? result oexp))
	(format #t "~A: ~A got ~S but expected ~S~%~%" (port-line-number) otst result oexp))))

(defmacro test (tst expected) ;(display tst) (newline)
  `(ok? ',tst (lambda () ,tst) ,expected))

(define (op-error op result expected)
  
  (define (conjugate n) 
    (make-rectangular (real-part n) (- (imag-part n))))
  
  (if (and (real? result)
	   (real? expected))
      (/ (abs (- result expected)) (max 1.0 (abs expected)))
      (case op
	((acosh)
	 (/ (magnitude (- (cosh result) (cosh expected)))
	    (max 0.001 (magnitude (cosh expected)))))
	((asin)
	 (/ (min (magnitude (- (sin result) (sin expected)))
		 (magnitude (- result expected)))
	    (max 0.001 (* 10 (magnitude (sin expected))))))
	((acos)
	 (/ (min (magnitude (- (cos result) (cos expected)))
		 (magnitude (- result expected)))
	    (max 0.001 (magnitude (cos expected)))))
	((asinh)
	 (/ (magnitude (- (sinh result) (sinh expected)))
	    (max 0.001 (magnitude (sinh expected)))))
	((atanh)
	 (/ (min (magnitude (- (tanh result) (tanh expected)))
		 (magnitude (- result expected)))
	    (max 0.001 (magnitude (tanh expected)))))
	((atan)
	 (/ (min (magnitude (- (tan result) (tan expected)))
		 (magnitude (- result expected)))
	    (max 0.001 (magnitude (tan expected)))))
	((cosh)
	 (/ (min (magnitude (- result expected))
		 (magnitude (- result (- expected))))
	    (max 0.001 (magnitude expected))))
	(else (/ (magnitude (- result expected)) (max 0.001 (magnitude expected)))))))


;;; relative error (/ (abs (- x res) (abs x)))

(define error-12 1e-12)
(define error-6  1e-6)

(define (number-ok? tst result expected)
  (if (not (eq? result expected))
      (if (or (and (not (number? expected))
		   (not (eq? result expected)))
	      (and (nan? expected)
		   (not (nan? result)))
	      (and (nan? result)
		   (not (nan? expected)))
	      (and (number? expected)
		   (or (not (number? result))
		       (nan? result)))
	      (and (rational? expected)
		   (rational? result)
		   (not (= result expected)))
	      (and (or (rational? expected) 
		       (rational? result))
		   (real? expected)
		   (real? result)
		   (> (/ (abs (- result expected)) (max 1.0 (abs expected))) error-12))
	      (and (pair? tst)
		   (> (op-error (car tst) result expected) error-6)))

	  (begin
	    (format #t "~A: ~A got ~A~Abut expected ~A~%" 
		    (port-line-number) tst result 
		    (if (and (rational? result) (not (rational? expected)))
			(format #f " (~A) " (* 1.0 result))
			" ")
		    expected)
	    
	    (if (and (not (number? expected))
		     (not (eq? result expected)))
		(format #t "    (eq? ~A ~A) -> #f" result expected)
		(if (and (number? expected)
			 (or (not (number? result))
			     (nan? result)))
		    (begin
		      (if (not (number? result))
			  (format #t "    (number? ~A) but not (number? ~A)" expected result)
			  (format #t "    (number? ~A) but (nan? ~A)" expected result)))
		    (if (and (rational? expected)
			     (rational? result)
			     (not (= result expected)))
			(format #t "    exact results but not (= ~A ~A): ~A" expected result (= result expected))
			(if (and (or (rational? expected) 
				     (rational? result))
				 (real? expected)
				 (real? result)
				 (> (abs (- result expected)) error-12))
			    (format #t "    rational results but diff > ~A: ~A" error-12 (abs (- result expected)))
			    (if (and (pair? tst)
				     (< (op-error (car tst) result expected) error-6))
				(let ((n result))
				  (format #t "    result not internally consistent")
				  (if (and (integer? n) 
					   (or (not (= (denominator n) 1))
					       (not (= n (numerator n)))
					       (not (zero? (imag-part n)))
					       (not (= (floor n) (ceiling n) (truncate n) (round n) n))
					       (not (= n (real-part n)))))
				      (format #t "    ~A integer but den: ~A, num: ~A, imag: ~A, real: ~A, floors: ~A ~A ~A ~A"
					      n (denominator n) (numerator n) (imag-part n) (real-part n)
					      (floor n) (ceiling n) (truncate n) (round n))
				      (if (and (rational? n)
					       (not (integer? n))
					       (or (not (zero? (imag-part n)))
						   (= (denominator n) 1)
						   (= (denominator n) 0)
						   (not (= n (real-part n)))
						   (not (= n (/ (numerator n) (denominator n))))))
					  (format #t "    ~A ratio but imag: ~A, den: ~A, real: ~A, ~A/~A=~A"
						  n (imag-part n) (denominator n) (real-part n) 
						  (numerator n) (denominator n) (* 1.0 (/ (numerator n) (denominator n))))
					  (if (and (real? n)
						   (not (rational? n))
						   (or (not (zero? (imag-part n)))
						       (not (= n (real-part n)))))
					      (format #t "    ~A real but rational: ~A, imag: ~A, real: ~A"
						      n (rational? n) (imag-part n) (real-part n))
					      (format #t "    ~A complex but real? ~A, imag: ~A, ~A+~A=~A"
						      n (real? n) (imag-part n) (real-part n) (imag-part n)
						      (+ (real-part n) (* 0+i (imag-part n)))))))))))))
	    (newline) (newline)))))

(define (nok? otst ola oexp)
  (let ((result (catch #t ola 
		       (lambda args 
			 (format *stderr* "error: ~A~%" args)
			 'error))))
     (number-ok? otst result oexp)))

(defmacro num-test (tst expected) ;(display tst) (newline)
  `(nok? ',tst  (lambda () ,tst) ,expected))



;;; --------------------------------------------------------------------------------
;;; libm

(if (not (provided? 'libm.scm)) (load "libm.scm"))

(with-environment *libm*

  ;; these tests come from glibc 2.17 math/libm-test.inc
  ;;   __DBL_DENORM_MIN__ comes from gcc

  (define M_PIl M_PI)
  (define M_El M_E)
  (define M_LOG2El M_LOG2E)
  (define M_LOG10El M_LOG10E)
  (define M_LN2l M_LN2)
  (define M_LN10l M_LN10)
  (define M_PI_2l M_PI_2)
  (define M_PI_4l M_PI_4)
  (define M_1_PIl M_1_PI)
  (define M_2_PIl M_2_PI)
  (define M_2_SQRTPIl M_2_SQRTPI)
  (define M_SQRT2l M_SQRT2)
  (define M_SQRT1_2l M_SQRT1_2)
  
  (define M_PI_6l		.52359877559829887307710723054658383)
  (define M_E2l			7.389056098930650227230427460575008)
  (define M_E3l			20.085536923187667740928529654581719)
  (define M_2_SQRT_PIl		3.5449077018110320545963349666822903)
  (define M_SQRT_PIl		1.7724538509055160272981674833411451)
  (define M_LOG_SQRT_PIl	0.57236494292470008707171367567652933)
  (define M_LOG_2_SQRT_PIl	1.265512123484645396488945797134706)
  (define M_PI_34l		(- M_PIl M_PI_4l))
  (define M_PI_34_LOG10El	(* (- M_PIl M_PI_4l) M_LOG10El))
  (define M_PI2_LOG10El		(* M_PI_2l M_LOG10El))
  (define M_PI4_LOG10El		(* M_PI_4l M_LOG10El))
  (define M_PI_LOG10El		(* M_PIl M_LOG10El))
  (define M_SQRT_2_2		0.70710678118654752440084436210484903)

  (define minus_zero -0.0)
  (define plus_zero 0.0)
  (define plus_infty (string->number "+inf.0"))
  (define minus_infty (string->number "-inf.0"))
  (define nan_value (string->number "nan.0"))
  (define max_value  1.7976931348623157e+308)
  (define min_value 2.2250738585072014e-308)
  (define min_subnorm_value 4.9406564584124654e-324)
  
  (num-test (acos 0) M_PI_2l)
  (num-test (acos minus_zero) M_PI_2l)
  (num-test (acos 1) 0)
  (num-test (acos -1) M_PIl)
  (num-test (acos 0.5) (* M_PI_6l 2.0))
  (num-test (acos -0.5) (* M_PI_6l 4.0))
  (num-test (acos 0.75) 0.722734247813415611178377352641333362)
  (num-test (acos 2e-17) 1.57079632679489659923132169163975144)
  (num-test (acos 0.0625) 1.50825556499840522843072005474337068)
  (num-test (acosh plus_infty) plus_infty)
  (num-test (acosh 1) 0)
  (num-test (acosh 7) 2.63391579384963341725009269461593689)
  (num-test (asin 0) 0)
  (num-test (asin minus_zero) minus_zero)
  (num-test (asin 0.5) M_PI_6l)
  (num-test (asin -0.5) (- M_PI_6l))
  (num-test (asin 1.0) M_PI_2l)
  (num-test (asin -1.0) (- M_PI_2l))
  (num-test (asin 0.75) 0.848062078981481008052944338998418080)
  (num-test (asinh 0) 0)
  (num-test (asinh minus_zero) minus_zero)
  (num-test (asinh 0.75) 0.693147180559945309417232121458176568)
  (num-test (atan 0) 0)
  (num-test (atan minus_zero) minus_zero)
  (num-test (atan plus_infty) M_PI_2l)
  (num-test (atan minus_infty) (- M_PI_2l))
  (num-test (atan max_value) M_PI_2l)
  (num-test (atan (- max_value)) (- M_PI_2l))
  (num-test (atan 1) M_PI_4l)
  (num-test (atan -1) (- M_PI_4l))
  (num-test (atan 0.75) 0.643501108793284386802809228717322638)
  (num-test (atanh 0) 0)
  (num-test (atanh minus_zero) minus_zero)
  (num-test (atanh 0.75) 0.972955074527656652552676371721589865)
  (num-test (atan2 0 1) 0)
  (num-test (atan2 0 0) 0)
  (num-test (atan2 minus_zero 0) minus_zero)
  (num-test (atan2 0 -1) M_PIl)
  (num-test (atan2 1 0) M_PI_2l)
  (num-test (atan2 1 minus_zero) M_PI_2l)
  (num-test (atan2 -1 0) (- M_PI_2l))
  (num-test (atan2 -1 minus_zero) (- M_PI_2l))
  (num-test (atan2 1 plus_infty) 0)
  (num-test (atan2 -1 plus_infty) minus_zero)
  (num-test (atan2 plus_infty -1) M_PI_2l)
  (num-test (atan2 minus_infty 1) (- M_PI_2l))
  (num-test (atan2 1 minus_infty) M_PIl)
  (num-test (atan2 -1 minus_infty) (- M_PIl))
  (num-test (atan2 plus_infty plus_infty) M_PI_4l)
  (num-test (atan2 minus_infty plus_infty) (- M_PI_4l))
  (num-test (atan2 plus_infty minus_infty) M_PI_34l)
  (num-test (atan2 minus_infty minus_infty) (- M_PI_34l))
  (num-test (atan2 max_value max_value) M_PI_4l)
  (num-test (atan2 max_value min_value) M_PI_2l)
  (num-test (atan2 (- max_value) (- min_value)) (- M_PI_2l))
  (num-test (atan2 0.75 1) 0.643501108793284386802809228717322638)
  (num-test (atan2 -0.75 1.0) -0.643501108793284386802809228717322638)
  (num-test (atan2 0.75 -1.0) 2.49809154479650885165983415456218025)
  (num-test (atan2 -0.75 -1.0) -2.49809154479650885165983415456218025)
  (num-test (atan2 0.390625 .00029) 1.57005392693128974780151246612928941)
  (num-test (atan2 1.390625 0.9296875) 0.981498387184244311516296577615519772)
  (num-test (atan2 -0.00756827042671106339 -.001792735857538728036) -1.80338464113663849327153994379639112)
  (num-test (cbrt 0.0) 0.0)
  (num-test (cbrt minus_zero) minus_zero)
  (num-test (cbrt plus_infty) plus_infty)
  (num-test (cbrt minus_infty) minus_infty)
  (num-test (cbrt -0.001) -0.1)
  (num-test (cbrt 8) 2)
  (num-test (cbrt -27.0) -3.0)
  (num-test (cbrt 0.9921875) 0.997389022060725270579075195353955217)
  (num-test (cbrt 0.75) 0.908560296416069829445605878163630251)
  (num-test (ceil 0.0) 0.0)
  (num-test (ceil minus_zero) minus_zero)
  (num-test (ceil plus_infty) plus_infty)
  (num-test (ceil minus_infty) minus_infty)
  (num-test (ceil M_PIl) 4.0)
  (num-test (ceil (- M_PIl)) -3.0)
  (num-test (ceil 0.1) 1.0)
  (num-test (ceil 0.25) 1.0)
  (num-test (ceil 0.625) 1.0)
  (num-test (ceil -0.1) minus_zero)
  (num-test (ceil -0.25) minus_zero)
  (num-test (ceil -0.625) minus_zero)
  (num-test (copysign 0 4) 0)
  (num-test (copysign 0 -4) minus_zero)
  (num-test (copysign minus_zero 4) 0)
  (num-test (copysign minus_zero -4) minus_zero)
  (num-test (copysign plus_infty 0) plus_infty)
  (num-test (copysign plus_infty minus_zero) minus_infty)
  (num-test (copysign minus_infty 0) plus_infty)
  (num-test (copysign minus_infty minus_zero) minus_infty)
  (num-test (copysign 0 plus_infty) 0)
  (num-test (copysign 0 minus_zero) minus_zero)
  (num-test (copysign minus_zero plus_infty) 0)
  (num-test (copysign minus_zero minus_zero) minus_zero)
  (num-test (cos 0) 1)
  (num-test (cos minus_zero) 1)
  (num-test (cos (* M_PI_6l 2.0)) 0.5)
  (num-test (cos (* M_PI_6l 4.0)) -0.5)
  (num-test (cos M_PI_2l) 0)
  (num-test (cos 0.75) 0.731688868873820886311838753000084544)
  (num-test (cos 0.80190127184058835) 0.69534156199418473)
  (num-test (cosh 0) 1)
  (num-test (cosh minus_zero) 1)
  (num-test (cosh 0.75) 1.29468328467684468784170818539018176)
  (num-test (cosh 709.8893558127259666434838436543941497802734375) 9.9999998999995070652573675944761818416035e+307)
  (num-test (cosh -709.8893558127259666434838436543941497802734375) 9.9999998999995070652573675944761818416035e+307)
  (num-test (erf 0) 0)
  (num-test (erf minus_zero) minus_zero)
  (num-test (erf plus_infty) 1)
  (num-test (erf minus_infty) -1)
  (num-test (erf 0.125) 0.140316204801333817393029446521623398)
  (num-test (erf 0.75) 0.711155633653515131598937834591410777)
  (num-test (erf 1.25) 0.922900128256458230136523481197281140)
  (num-test (erf 2.0) 0.995322265018952734162069256367252929)
  (num-test (erf 4.125) 0.999999994576599200434933994687765914)
  (num-test (erf 27.0) 1.0)
  (num-test (erfc plus_infty) 0.0)
  (num-test (erfc minus_infty) 2.0)
  (num-test (erfc 0.0) 1.0)
  (num-test (erfc minus_zero) 1.0)
  (num-test (erfc 0.125) 0.859683795198666182606970553478376602)
  (num-test (erfc 0.75) 0.288844366346484868401062165408589223)
  (num-test (erfc 1.25) 0.0770998717435417698634765188027188596)
  (num-test (erfc 2.0) 0.00467773498104726583793074363274707139)
  (num-test (erfc 4.125) 0.542340079956506600531223408575531062e-8)
  (num-test (exp 0) 1)
  (num-test (exp minus_zero) 1)
  (num-test (exp 1) M_El)
  (num-test (exp 2) M_E2l)
  (num-test (exp 3) M_E3l)
  (num-test (exp 0.75) 2.11700001661267466854536981983709561)
  (num-test (exp 50.0) 5184705528587072464087.45332293348538)
  (num-test (exp 88.72269439697265625) 3.40233126623160774937554134772290447915e38)
  (num-test (exp2 0) 1)
  (num-test (exp2 minus_zero) 1)
  (num-test (exp2 plus_infty) plus_infty)
  (num-test (exp2 minus_infty) 0)
  (num-test (exp2 10) 1024)
  (num-test (exp2 -1) 0.5)
  (num-test (exp2 0.75) 1.68179283050742908606225095246642979)
  (num-test (exp2 100.5) 1.792728671193156477399422023278661496394e+30)
  (num-test (expm1 0) 0)
  (num-test (expm1 minus_zero) minus_zero)
  (num-test (expm1 1) (- M_El 1.0))
  (num-test (expm1 0.75) 1.11700001661267466854536981983709561)
  (num-test (expm1 50.0) 5.1847055285870724640864533229334853848275e+21)
  (num-test (expm1 -10.0) -0.9999546000702375151484644084844394493898)
  (num-test (expm1 -16.0) -0.9999998874648252807408854862248209398728)
  (num-test (expm1 -17.0) -0.9999999586006228121483334034897228104472)
  (num-test (expm1 -18.0) -0.9999999847700202552873715638633707664826)
  (num-test (expm1 -36.0) -0.9999999999999997680477169756430611687736)
  (num-test (expm1 -37.0) -0.9999999999999999146695237425593420572195)
  (num-test (expm1 -38.0) -0.9999999999999999686086720795197037129104)
  (num-test (expm1 -44.0) -0.9999999999999999999221886775886620348429)
  (num-test (expm1 -45.0) -0.9999999999999999999713748141945060635553)
  (num-test (expm1 -46.0) -0.9999999999999999999894693826424461876212)
  (num-test (expm1 -73.0) -0.9999999999999999999999999999999802074012)
  (num-test (expm1 -74.0) -0.9999999999999999999999999999999927187098)
  (num-test (expm1 -75.0) -0.9999999999999999999999999999999973213630)
  (num-test (expm1 -78.0) -0.9999999999999999999999999999999998666385)
  (num-test (expm1 -79.0) -0.9999999999999999999999999999999999509391)
  (num-test (expm1 -80.0) -0.9999999999999999999999999999999999819515)
  (num-test (expm1 -100.0) -1.0)
  (num-test (expm1 -1000.0) -1.0)
  (num-test (expm1 -10000.0) -1.0)
  (num-test (expm1 -100000.0) -1.0)
  (num-test (fabs 0) 0)
  (num-test (fabs minus_zero) 0)
  (num-test (fabs plus_infty) plus_infty)
  (num-test (fabs minus_infty) plus_infty)
  (num-test (fabs 38.0) 38.0)
  (num-test (fabs (- M_El)) M_El)
  (num-test (fdim 0 0) 0)
  (num-test (fdim 9 0) 9)
  (num-test (fdim 0 9) 0)
  (num-test (fdim -9 0) 0)
  (num-test (fdim 0 -9) 9)
  (num-test (fdim plus_infty 9) plus_infty)
  (num-test (fdim plus_infty -9) plus_infty)
  (num-test (fdim minus_infty 9) 0)
  (num-test (fdim minus_infty -9) 0)
  (num-test (fdim 9 minus_infty) plus_infty)
  (num-test (fdim -9 minus_infty) plus_infty)
  (num-test (fdim 9 plus_infty) 0)
  (num-test (fdim -9 plus_infty) 0)
  (num-test (fdim plus_infty plus_infty) 0)
  (num-test (floor 0.0) 0.0)
  (num-test (floor minus_zero) minus_zero)
  (num-test (floor plus_infty) plus_infty)
  (num-test (floor minus_infty) minus_infty)
  (num-test (floor M_PIl) 3.0)
  (num-test (floor (- M_PIl)) -4.0)
  (num-test (floor 0.1) 0.0)
  (num-test (floor 0.25) 0.0)
  (num-test (floor 0.625) 0.0)
  (num-test (floor -0.1) -1.0)
  (num-test (floor -0.25) -1.0)
  (num-test (floor -0.625) -1.0)
  (num-test (fma 1.0 2.0 3.0) 5.0)
  (num-test (fma 1.25 0.75 0.0625) 1.0)
  (num-test (fma plus_zero plus_zero plus_zero) plus_zero)
  (num-test (fma plus_zero plus_zero minus_zero) plus_zero)
  (num-test (fma plus_zero minus_zero plus_zero) plus_zero)
  (num-test (fma plus_zero minus_zero minus_zero) minus_zero)
  (num-test (fma minus_zero plus_zero plus_zero) plus_zero)
  (num-test (fma minus_zero plus_zero minus_zero) minus_zero)
  (num-test (fma minus_zero minus_zero plus_zero) plus_zero)
  (num-test (fma minus_zero minus_zero minus_zero) plus_zero)
  (num-test (fma 1.0 plus_zero plus_zero) plus_zero)
  (num-test (fma 1.0 plus_zero minus_zero) plus_zero)
  (num-test (fma 1.0 minus_zero plus_zero) plus_zero)
  (num-test (fma 1.0 minus_zero minus_zero) minus_zero)
  (num-test (fma -1.0 plus_zero plus_zero) plus_zero)
  (num-test (fma -1.0 plus_zero minus_zero) minus_zero)
  (num-test (fma -1.0 minus_zero plus_zero) plus_zero)
  (num-test (fma -1.0 minus_zero minus_zero) plus_zero)
  (num-test (fma plus_zero 1.0 plus_zero) plus_zero)
  (num-test (fma plus_zero 1.0 minus_zero) plus_zero)
  (num-test (fma plus_zero -1.0 plus_zero) plus_zero)
  (num-test (fma plus_zero -1.0 minus_zero) minus_zero)
  (num-test (fma minus_zero 1.0 plus_zero) plus_zero)
  (num-test (fma minus_zero 1.0 minus_zero) minus_zero)
  (num-test (fma minus_zero -1.0 plus_zero) plus_zero)
  (num-test (fma minus_zero -1.0 minus_zero) plus_zero)
  (num-test (fma 1.0 1.0 -1.0) plus_zero)
  (num-test (fma 1.0 -1.0 1.0) plus_zero)
  (num-test (fma -1.0 1.0 1.0) plus_zero)
  (num-test (fma -1.0 -1.0 -1.0) plus_zero)
  (num-test (fmod 0 3) 0)
  (num-test (fmod minus_zero 3) minus_zero)
  (num-test (fmod 3.0 plus_infty) 3.0)
  (num-test (fmod 3.0 minus_infty) 3.0)
  (num-test (fmod 6.5 2.25) 2.0)
  (num-test (fmod -6.5 2.25) -2.0)
  (num-test (fmod 6.5 -2.25) 2.0)
  (num-test (fmod -6.5 -2.25) -2.0)
  (num-test (fpclassify nan_value) FP_NAN)
  (num-test (fpclassify plus_infty) FP_INFINITE)
  (num-test (fpclassify minus_infty) FP_INFINITE)
  (num-test (fpclassify plus_zero) FP_ZERO)
  (num-test (fpclassify minus_zero) FP_ZERO)
  (num-test (fpclassify 1000) FP_NORMAL)
;?  (num-test (fpclassify min_subnorm_value) FP_SUBNORMAL)
  (num-test (hypot 0.7 12.4) 12.419742348374220601176836866763271)
  (num-test (hypot -0.7 12.4) 12.419742348374220601176836866763271)
  (num-test (hypot 0.7 -12.4) 12.419742348374220601176836866763271)
  (num-test (hypot -0.7 -12.4) 12.419742348374220601176836866763271)
  (num-test (hypot 12.4 0.7) 12.419742348374220601176836866763271)
  (num-test (hypot -12.4 0.7) 12.419742348374220601176836866763271)
  (num-test (hypot 12.4 -0.7) 12.419742348374220601176836866763271)
  (num-test (hypot -12.4 -0.7) 12.419742348374220601176836866763271)
  (num-test (hypot 0.75 0) 0.75)
  (num-test (hypot -0.75 0) 0.75)
  (num-test (hypot -5.7e7 0) 5.7e7)
  (num-test (hypot 0.75 1.25) 1.45773797371132511771853821938639577)
  (num-test (ilogb 1) 0)
  (num-test (ilogb M_El) 1)
  (num-test (ilogb 1024) 10)
  (num-test (ilogb -2000) 10)
  (num-test (isfinite 0) 1)
  (num-test (isfinite minus_zero) 1)
  (num-test (isfinite 10) 1)
  (num-test (isfinite min_subnorm_value) 1)
  (num-test (isfinite plus_infty) 0)
  (num-test (isfinite minus_infty) 0)
  (num-test (isfinite nan_value) 0)
  (num-test (isinf 0) 0)
  (num-test (isinf minus_zero) 0)
  (num-test (isinf 10) 0)
  (num-test (isinf min_subnorm_value) 0)
  (num-test (isinf plus_infty) 1)
  (num-test (isinf minus_infty) -1)
  (num-test (isinf nan_value) 0)
  (num-test (isnan 0) 0)
  (num-test (isnan minus_zero) 0)
  (num-test (isnan 10) 0)
  (num-test (isnan min_subnorm_value) 0)
  (num-test (isnan plus_infty) 0)
  (num-test (isnan minus_infty) 0)
  (num-test (isnan nan_value) 1)
  (num-test (isnormal 0) 0)
  (num-test (isnormal minus_zero) 0)
  (num-test (isnormal 10) 1)
  (num-test (isnormal min_subnorm_value) 0)
  (num-test (isnormal plus_infty) 0)
  (num-test (isnormal minus_infty) 0)
  (num-test (isnormal nan_value) 0)
  (num-test (j0 plus_infty) 0)
  (num-test (j0 -1.0) 0.765197686557966551449717526102663221)
  (num-test (j0 0.0) 1.0)
  (num-test (j0 0.125) 0.996097563041985204620768999453174712)
  (num-test (j0 0.75) 0.864242275166648623555731103820923211)
  (num-test (j0 1.0) 0.765197686557966551449717526102663221)
  (num-test (j0 1.5) 0.511827671735918128749051744283411720)
  (num-test (j0 2.0) 0.223890779141235668051827454649948626)
  (num-test (j0 8.0) 0.171650807137553906090869407851972001)
  (num-test (j0 10.0) -0.245935764451348335197760862485328754)
  (num-test (j0 4.0) -3.9714980986384737228659076845169804197562E-1)
  (num-test (j0 -4.0) -3.9714980986384737228659076845169804197562E-1)
  (num-test (j1 plus_infty) 0)
  (num-test (j1 -1.0) -0.440050585744933515959682203718914913)
  (num-test (j1 0.0) 0.0)
  (num-test (j1 0.125) 0.0623780091344946810942311355879361177)
  (num-test (j1 0.75) 0.349243602174862192523281016426251335)
  (num-test (j1 1.0) 0.440050585744933515959682203718914913)
  (num-test (j1 1.5) 0.557936507910099641990121213156089400)
  (num-test (j1 2.0) 0.576724807756873387202448242269137087)
  (num-test (j1 8.0) 0.234636346853914624381276651590454612)
  (num-test (j1 10.0) 0.0434727461688614366697487680258592883)
  (num-test (ldexp 0 0) 0)
  (num-test (ldexp minus_zero 0) minus_zero)
  (num-test (ldexp plus_infty 1) plus_infty)
  (num-test (ldexp minus_infty 1) minus_infty)
  (num-test (ldexp 0.8 4) 12.8)
  (num-test (ldexp -0.854375 5) -27.34)
  (num-test (ldexp 1.0 0) 1.0)
  (num-test (lgamma plus_infty) plus_infty)
  (num-test (lgamma 1) 0)
  (num-test (lgamma 3) M_LN2l)
  (num-test (lgamma 0.5) M_LOG_SQRT_PIl)
  (num-test (lgamma -0.5) M_LOG_2_SQRT_PIl)
  (num-test (lgamma 0.7) 0.260867246531666514385732417016759578)
  (num-test (lgamma 1.2) -0.853740900033158497197028392998854470e-1)
  (num-test (llrint 0.0) 0)
  (num-test (llrint minus_zero) 0)
  (num-test (llrint 0.2) 0)
  (num-test (llrint -0.2) 0)
  (num-test (llrint 1.4) 1)
  (num-test (llrint -1.4) -1)
  (num-test (llrint 8388600.3) 8388600)
  (num-test (llrint -8388600.3) -8388600)
  (num-test (llrint 1071930.0008) 1071930)
  (num-test (llrint 2097151.0)2097151)
  (num-test (llrint 8388608.0) 8388608)
  (num-test (llrint 16777216.0) 16777216)
  (num-test (llrint 2199023255552.0) 2199023255552)
  (num-test (llrint 4398046511104.0) 4398046511104)
  (num-test (llrint 281474976710656.0) 281474976710656)
  (num-test (llrint 4503599627370496.0) 4503599627370496)
  (num-test (llrint 4503601774854144.0) 4503601774854144)
  (num-test (llrint 9007199254740992.0) 9007199254740992)
  (num-test (llrint 36028797018963968.0) 36028797018963968)
  (num-test (llrint 72057594037927936.0) 72057594037927936)
  (num-test (log 1) 0)
  (num-test (log M_El) 1)
  (num-test (log (/ 1.0 M_El)) -1)
  (num-test (log 2) M_LN2l)
  (num-test (log 10) M_LN10l)
  (num-test (log 0.75) -0.287682072451780927439219005993827432)
  (num-test (log10 1) 0)
  (num-test (log10 plus_infty) plus_infty)
  (num-test (log10 0.1) -1)
  (num-test (log10 10.0) 1)
  (num-test (log10 100.0) 2)
  (num-test (log10 10000.0) 4)
  (num-test (log10 M_El) M_LOG10El)
  (num-test (log10 0.75) -0.124938736608299953132449886193870744)
  (num-test (log1p 0) 0)
  (num-test (log1p minus_zero) minus_zero)
  (num-test (log1p plus_infty) plus_infty)
  (num-test (log1p (- M_El 1.0)) 1)
  (num-test (log1p -0.25) -0.287682072451780927439219005993827432)
  (num-test (log1p -0.875) -2.07944154167983592825169636437452970)
  (num-test (log2 1) 0)
  (num-test (log2 plus_infty) plus_infty)
  (num-test (log2 M_El) M_LOG2El)
  (num-test (log2 2.0) 1)
  (num-test (log2 16.0) 4)
  (num-test (log2 256.0) 8)
  (num-test (log2 0.75) -.415037499278843818546261056052183492)
  (num-test (llround 0) 0)
  (num-test (llround minus_zero) 0)
  (num-test (llround 0.2) 0.0)
  (num-test (llround -0.2) 0)
  (num-test (llround 0.5) 1)
  (num-test (llround -0.5) -1)
  (num-test (llround 0.8) 1)
  (num-test (llround -0.8) -1)
  (num-test (llround 1.5) 2)
  (num-test (llround -1.5) -2)
  (num-test (llround 22514.5) 22515)
  (num-test (llround -22514.5) -22515)
  (num-test (llround 1071930.0008) 1071930)
  (num-test (llround 2097151.0) 2097151)
  (num-test (llround 8388608.0) 8388608)
  (num-test (llround 16777216.0) 16777216)
  (num-test (llround 2199023255552.0) 2199023255552)
  (num-test (llround 4398046511104.0) 4398046511104)
  (num-test (llround 281474976710656.0) 281474976710656)
  (num-test (llround 4503599627370496.0) 4503599627370496)
  (num-test (llround 4503601774854144.0) 4503601774854144)
  (num-test (llround 9007199254740992.0) 9007199254740992)
  (num-test (llround 36028797018963968.0) 36028797018963968)
  (num-test (llround 72057594037927936.0) 72057594037927936)
  (num-test (nearbyint 0.0) 0.0)
  (num-test (nearbyint minus_zero) minus_zero)
  (num-test (nearbyint plus_infty) plus_infty)
  (num-test (nearbyint minus_infty) minus_infty)
  (num-test (nearbyint -8.98847e+307) -8.98847e+307)
  (num-test (nearbyint -4.45015e-308) minus_zero)
  (num-test (nearbyint 0.5) 0.0)
  (num-test (nearbyint 1.5) 2.0)
  (num-test (nearbyint -0.5) minus_zero)
  (num-test (nearbyint -1.5) -2.0)
  (num-test (nearbyint 262144.75) 262145.0)
  (num-test (nearbyint 262142.75) 262143.0)
  (num-test (nearbyint 524286.75) 524287.0)
  (num-test (nearbyint 524288.75) 524289.0)
  (num-test (nearbyint 1048576.75) 1048577.0)
  (num-test (nearbyint 2097152.75) 2097153.0)
  (num-test (nearbyint 2492472.75) 2492473.0)
  (num-test (nearbyint 2886220.75) 2886221.0)
  (num-test (nearbyint 3058792.75) 3058793.0)
  (num-test (nearbyint -1048576.75) -1048577.0)
  (num-test (nearbyint -2097152.75) -2097153.0)
  (num-test (nearbyint -2492472.75) -2492473.0)
  (num-test (nearbyint -2886220.75) -2886221.0)
  (num-test (nearbyint -3058792.75) -3058793.0)
  (num-test (nextafter 0 0) 0)
  (num-test (nextafter minus_zero 0) 0)
  (num-test (nextafter 0 minus_zero) minus_zero)
  (num-test (nextafter minus_zero minus_zero) minus_zero)
  (num-test (nextafter 9 9) 9)
  (num-test (nextafter -9 -9) -9)
  (num-test (nextafter plus_infty plus_infty) plus_infty)
  (num-test (nextafter minus_infty minus_infty) minus_infty)
  (num-test (nexttoward 0 0) 0)
  (num-test (nexttoward minus_zero 0) 0)
  (num-test (nexttoward 0 minus_zero) minus_zero)
  (num-test (nexttoward minus_zero minus_zero) minus_zero)
  (num-test (nexttoward 9 9) 9)
  (num-test (nexttoward -9 -9) -9)
  (num-test (nexttoward plus_infty plus_infty) plus_infty)
  (num-test (nexttoward minus_infty minus_infty) minus_infty)
  (num-test (pow 0 0) 1)
  (num-test (pow 0 minus_zero) 1)
  (num-test (pow minus_zero 0) 1)
  (num-test (pow minus_zero minus_zero) 1)
  (num-test (pow 10 0) 1)
  (num-test (pow 10 minus_zero) 1)
  (num-test (pow -10 0) 1)
  (num-test (pow -10 minus_zero) 1)
  (num-test (pow nan_value 0) 1)
  (num-test (pow nan_value minus_zero) 1)
  (num-test (pow 1 plus_infty) 1)
  (num-test (pow -1 plus_infty) 1)
  (num-test (pow 1 minus_infty) 1)
  (num-test (pow -1 minus_infty) 1)
  (num-test (pow 1 1) 1)
  (num-test (pow 1 -1) 1)
  (num-test (pow 1 1.25) 1)
  (num-test (pow 1 -1.25) 1)
  (num-test (pow 1 min_subnorm_value) 1)
  (num-test (pow 1 (- min_subnorm_value)) 1)
  (num-test (pow plus_infty 0) 1)
  (num-test (pow plus_infty minus_zero) 1)
  (num-test (pow minus_infty 0) 1)
  (num-test (pow minus_infty minus_zero) 1)
  (num-test (pow 32.75 0) 1)
  (num-test (pow 32.75 minus_zero) 1)
  (num-test (pow -32.75 0) 1)
  (num-test (pow -32.75 minus_zero) 1)
  (num-test (pow 0 1) 0)
  (num-test (pow 0 11) 0)
  (num-test (pow minus_zero 1) minus_zero)
  (num-test (pow minus_zero 11) minus_zero)
  (num-test (pow 0 2) 0)
  (num-test (pow 0 11.1) 0)
  (num-test (pow minus_zero 2) 0)
  (num-test (pow minus_zero 11.1) 0)
  (num-test (pow 0 plus_infty) 0)
  (num-test (pow minus_zero plus_infty) 0)
  (num-test (pow 0.0 4) 0.0)
  (num-test (pow 0.0 max_value) 0.0)
;?  (num-test (pow 0.0 min_subnorm_value) 0.0)
  (num-test (pow minus_zero 4) 0.0)
  (num-test (pow minus_zero max_value) 0.0)
;?  (num-test (pow minus_zero min_subnorm_value) 0.0)
  (num-test (pow 16 0.25) 2)
  (num-test (pow 2 4) 16)
  (num-test (pow 0.75 1.25) 0.697953644326574699205914060237425566)
  (num-test (pow min_subnorm_value min_subnorm_value) 1.0)
  (num-test (pow min_subnorm_value (- min_subnorm_value)) 1.0)
  (num-test (pow max_value min_subnorm_value) 1.0)
  (num-test (pow max_value (- min_subnorm_value)) 1.0)
  (num-test (pow 0.99 min_subnorm_value) 1.0)
  (num-test (pow 0.99 (- min_subnorm_value)) 1.0)
  (num-test (pow 1.01 min_subnorm_value) 1.0)
  (num-test (pow 1.01 (- min_subnorm_value)) 1.0)
  (num-test (remainder 1.625 1.0) -0.375)
  (num-test (remainder -1.625 1.0) 0.375)
  (num-test (remainder 1.625 -1.0) -0.375)
  (num-test (remainder -1.625 -1.0) 0.375)
  (num-test (remainder 5.0 2.0) 1.0)
  (num-test (remainder 3.0 2.0) -1.0)
  (num-test (rint 0.0) 0.0)
  (num-test (rint minus_zero) minus_zero)
  (num-test (rint plus_infty) plus_infty)
  (num-test (rint minus_infty) minus_infty)
  (num-test (rint 0.5) 0.0)
  (num-test (rint 1.5) 2.0)
  (num-test (rint 2.5) 2.0)
  (num-test (rint 3.5) 4.0)
  (num-test (rint 4.5) 4.0)
  (num-test (rint -0.5) -0.0)
  (num-test (rint -1.5) -2.0)
  (num-test (rint -2.5) -2.0)
  (num-test (rint -3.5) -4.0)
  (num-test (rint -4.5) -4.0)
  (num-test (rint 0.1) 0.0)
  (num-test (rint 0.25) 0.0)
  (num-test (rint 0.625) 1.0)
  (num-test (rint -0.1) -0.0)
  (num-test (rint -0.25) -0.0)
  (num-test (rint -0.625) -1.0)
  (num-test (rint 262144.75) 262145.0)
  (num-test (rint 262142.75) 262143.0)
  (num-test (rint 524286.75) 524287.0)
  (num-test (rint 524288.75) 524289.0)
  (num-test (rint 1048576.75) 1048577.0)
  (num-test (rint 2097152.75) 2097153.0)
  (num-test (rint -1048576.75) -1048577.0)
  (num-test (rint -2097152.75) -2097153.0)
  (num-test (rint -4503599627370495.5) -4503599627370496.0)
  (num-test (rint -4503599627370496.25) -4503599627370496.0)
  (num-test (rint -4503599627370496.5) -4503599627370496.0)
  (num-test (rint -4503599627370496.75) -4503599627370497.0)
  (num-test (rint -4503599627370497.5) -4503599627370498.0)
  (num-test (round 0) 0)
  (num-test (round minus_zero) minus_zero)
  (num-test (round 0.2) 0.0)
  (num-test (round -0.2) minus_zero)
  (num-test (round 0.5) 1.0)
  (num-test (round -0.5) -1.0)
  (num-test (round 0.8) 1.0)
  (num-test (round -0.8) -1.0)
  (num-test (round 1.5) 2.0)
  (num-test (round -1.5) -2.0)
  (num-test (round 0.1) 0.0)
  (num-test (round 0.25) 0.0)
  (num-test (round 0.625) 1.0)
  (num-test (round -0.1) -0.0)
  (num-test (round -0.25) -0.0)
  (num-test (round -0.625) -1.0)
  (num-test (round 2097152.5) 2097153)
  (num-test (round -2097152.5) -2097153)
  (num-test (scalbn 0 0) 0)
  (num-test (scalbn minus_zero 0) minus_zero)
  (num-test (scalbn plus_infty 1) plus_infty)
  (num-test (scalbn minus_infty 1) minus_infty)
  (num-test (scalbn 0.8 4) 12.8)
  (num-test (scalbn -0.854375 5) -27.34)
  (num-test (scalbn 1 0) 1)
  (num-test (scalbln 0 0) 0)
  (num-test (scalbln minus_zero 0) minus_zero)
  (num-test (scalbln plus_infty 1) plus_infty)
  (num-test (scalbln minus_infty 1) minus_infty)
  (num-test (scalbln 0.8 4) 12.8)
  (num-test (scalbln -0.854375 5) -27.34)
  (num-test (scalbln 1 0) 1)
  (num-test (signbit 0) 0)
;!  (num-test (signbit minus_zero) 1)
  (num-test (signbit plus_infty) 0)
  (num-test (signbit minus_infty) 128)
  (num-test (signbit -1) 128)
  (num-test (signbit 1) 0)
  (num-test (sin 0) 0)
  (num-test (sin minus_zero) minus_zero)
  (num-test (sin M_PI_6l) 0.5)
  (num-test (sin (- M_PI_6l)) -0.5)
  (num-test (sin M_PI_2l) 1)
  (num-test (sin (- M_PI_2l)) -1)
  (num-test (sin 0.75) 0.681638760023334166733241952779893935)
  (num-test (sinh 0) 0)
  (num-test (sinh minus_zero) minus_zero)
  (num-test (sinh 0.75) 0.822316731935829980703661634446913849)
  (num-test (sqrt 0) 0)
  (num-test (sqrt plus_infty) plus_infty)
  (num-test (sqrt minus_zero) minus_zero)
  (num-test (sqrt 2209) 47)
  (num-test (sqrt 4) 2)
  (num-test (sqrt 2) M_SQRT2l)
  (num-test (sqrt 0.25) 0.5)
  (num-test (sqrt 6642.25) 81.5)
  (num-test (sqrt 15190.5625) 123.25)
  (num-test (sqrt 0.75) 0.866025403784438646763723170752936183)
  (num-test (tan 0) 0)
  (num-test (tan minus_zero) minus_zero)
  (num-test (tan M_PI_4l) 1)
  (num-test (tan 0.75) 0.931596459944072461165202756573936428)
  (num-test (tanh 0) 0)
  (num-test (tanh minus_zero) minus_zero)
  (num-test (tanh 0.75) 0.635148952387287319214434357312496495)
  (num-test (tanh -0.75) -0.635148952387287319214434357312496495)
  (num-test (tanh 1.0) 0.7615941559557648881194582826047935904)
  (num-test (tanh -1.0) -0.7615941559557648881194582826047935904)
  (num-test (tgamma plus_infty) plus_infty)
  (num-test (tgamma 0.5) M_SQRT_PIl)
  (num-test (tgamma -0.5) (- M_2_SQRT_PIl))
  (num-test (tgamma 1) 1)
  (num-test (tgamma 4) 6)
  (num-test (tgamma 0.7) 1.29805533264755778568117117915281162)
  (num-test (tgamma 1.2) 0.918168742399760610640951655185830401)
  (num-test (trunc plus_infty) plus_infty)
  (num-test (trunc minus_infty) minus_infty)
  (num-test (trunc 0) 0)
  (num-test (trunc minus_zero) minus_zero)
  (num-test (trunc 0.1) 0)
  (num-test (trunc 0.25) 0)
  (num-test (trunc 0.625) 0)
  (num-test (trunc -0.1) minus_zero)
  (num-test (trunc -0.25) minus_zero)
  (num-test (trunc -0.625) minus_zero)
  (num-test (trunc 1) 1)
  (num-test (trunc -1) -1)
  (num-test (trunc 1.625) 1)
  (num-test (trunc -1.625) -1)
  (num-test (trunc 1048580.625) 1048580)
  (num-test (trunc -1048580.625) -1048580)
  (num-test (trunc 8388610.125) 8388610.0)
  (num-test (trunc -8388610.125) -8388610.0)
  (num-test (trunc 4294967296.625) 4294967296.0)
  (num-test (trunc -4294967296.625) -4294967296.0)
  )

;;; --------------------------------------------------------------------------------
